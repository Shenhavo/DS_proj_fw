
open-mv-camh7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2fc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800c594  0800c594  0001c594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb00  0800cb00  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb00  0800cb00  0001cb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb08  0800cb08  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb08  0800cb08  0001cb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800cb10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  24000010  0800cb20  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002d0  0800cb20  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e07  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004326  00000000  00000000  00048e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  0004d170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001188  00000000  00000000  0004e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037fa5  00000000  00000000  0004f638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000181f5  00000000  00000000  000875dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015a8c2  00000000  00000000  0009f7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fa094  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e40  00000000  00000000  001fa110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c57c 	.word	0x0800c57c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800c57c 	.word	0x0800c57c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_DCMI_Init+0x64>)
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <MX_DCMI_Init+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_DCMI_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_DCMI_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_DCMI_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_DCMI_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_DCMI_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_DCMI_Init+0x64>)
 8000602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000606:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_DCMI_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_DCMI_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_DCMI_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_DCMI_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_DCMI_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_DCMI_Init+0x64>)
 8000628:	f001 f824 	bl	8001674 <HAL_DCMI_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 8000632:	f000 fbed 	bl	8000e10 <Error_Handler>
  }

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	240000c4 	.word	0x240000c4
 8000640:	48020000 	.word	0x48020000

08000644 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a65      	ldr	r2, [pc, #404]	; (80007f8 <HAL_DCMI_MspInit+0x1b4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	f040 80c3 	bne.w	80007ee <HAL_DCMI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000668:	4b64      	ldr	r3, [pc, #400]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800066a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800066e:	4a63      	ldr	r2, [pc, #396]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000678:	4b60      	ldr	r3, [pc, #384]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800067a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
 8000684:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a5b      	ldr	r2, [pc, #364]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b59      	ldr	r3, [pc, #356]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0310 	and.w	r3, r3, #16
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b55      	ldr	r3, [pc, #340]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	4a54      	ldr	r2, [pc, #336]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b4:	4b51      	ldr	r3, [pc, #324]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b4e      	ldr	r3, [pc, #312]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	4a4c      	ldr	r2, [pc, #304]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	4b46      	ldr	r3, [pc, #280]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	4a45      	ldr	r2, [pc, #276]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f0:	4b42      	ldr	r3, [pc, #264]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
 80006fe:	2373      	movs	r3, #115	; 0x73
 8000700:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800070e:	230d      	movs	r3, #13
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4839      	ldr	r0, [pc, #228]	; (8000800 <HAL_DCMI_MspInit+0x1bc>)
 800071a:	f003 fa7b 	bl	8003c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800071e:	2350      	movs	r3, #80	; 0x50
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800072e:	230d      	movs	r3, #13
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4832      	ldr	r0, [pc, #200]	; (8000804 <HAL_DCMI_MspInit+0x1c0>)
 800073a:	f003 fa6b 	bl	8003c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800073e:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000750:	230d      	movs	r3, #13
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	482b      	ldr	r0, [pc, #172]	; (8000808 <HAL_DCMI_MspInit+0x1c4>)
 800075c:	f003 fa5a 	bl	8003c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000760:	23c0      	movs	r3, #192	; 0xc0
 8000762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000770:	230d      	movs	r3, #13
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4824      	ldr	r0, [pc, #144]	; (800080c <HAL_DCMI_MspInit+0x1c8>)
 800077c:	f003 fa4a 	bl	8003c14 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <HAL_DCMI_MspInit+0x1d0>)
 8000784:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000788:	224b      	movs	r2, #75	; 0x4b
 800078a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 800079a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007c4:	f001 f940 	bl	8001a48 <HAL_DMA_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_DCMI_MspInit+0x18e>
    {
      Error_Handler();
 80007ce:	f000 fb1f 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007d6:	649a      	str	r2, [r3, #72]	; 0x48
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	204e      	movs	r0, #78	; 0x4e
 80007e4:	f000 fef8 	bl	80015d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f000 ff1f 	bl	800162c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80007ee:	bf00      	nop
 80007f0:	3730      	adds	r7, #48	; 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	48020000 	.word	0x48020000
 80007fc:	58024400 	.word	0x58024400
 8000800:	58021000 	.word	0x58021000
 8000804:	58020000 	.word	0x58020000
 8000808:	58020800 	.word	0x58020800
 800080c:	58020400 	.word	0x58020400
 8000810:	2400004c 	.word	0x2400004c
 8000814:	40020010 	.word	0x40020010

08000818 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_DMA_Init+0x3c>)
 8000820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <MX_DMA_Init+0x3c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_DMA_Init+0x3c>)
 8000830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	200b      	movs	r0, #11
 8000842:	f000 fec9 	bl	80015d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000846:	200b      	movs	r0, #11
 8000848:	f000 fef0 	bl	800162c <HAL_NVIC_EnableIRQ>

}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024400 	.word	0x58024400

08000858 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086e:	4b77      	ldr	r3, [pc, #476]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	4a75      	ldr	r2, [pc, #468]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087e:	4b73      	ldr	r3, [pc, #460]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	4b6f      	ldr	r3, [pc, #444]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	4a6e      	ldr	r2, [pc, #440]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089c:	4b6b      	ldr	r3, [pc, #428]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b68      	ldr	r3, [pc, #416]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	4a66      	ldr	r2, [pc, #408]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ba:	4b64      	ldr	r3, [pc, #400]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b60      	ldr	r3, [pc, #384]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a5f      	ldr	r2, [pc, #380]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b5c      	ldr	r3, [pc, #368]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b59      	ldr	r3, [pc, #356]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	4a57      	ldr	r2, [pc, #348]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f6:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000904:	4b51      	ldr	r3, [pc, #324]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	4a50      	ldr	r2, [pc, #320]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2107      	movs	r1, #7
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 8000928:	f003 fc24 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2120      	movs	r1, #32
 8000930:	4848      	ldr	r0, [pc, #288]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 8000932:	f003 fc1f 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093c:	4846      	ldr	r0, [pc, #280]	; (8000a58 <MX_GPIO_Init+0x200>)
 800093e:	f003 fc19 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE7 PE8 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8 
 8000942:	f64f 738c 	movw	r3, #65420	; 0xff8c
 8000946:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4841      	ldr	r0, [pc, #260]	; (8000a5c <MX_GPIO_Init+0x204>)
 8000958:	f003 f95c 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC3 
                           PC4 PC5 PC8 PC9 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
 800095c:	f64e 3338 	movw	r3, #60216	; 0xeb38
 8000960:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4837      	ldr	r0, [pc, #220]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 8000972:	f003 f94f 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000976:	2307      	movs	r3, #7
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4830      	ldr	r0, [pc, #192]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 800098e:	f003 f941 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000992:	f649 738f 	movw	r3, #40847	; 0x9f8f
 8000996:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	482b      	ldr	r0, [pc, #172]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 80009a8:	f003 f934 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_CHIP_EN_Pin;
 80009ac:	2320      	movs	r3, #32
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WIFI_CHIP_EN_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4824      	ldr	r0, [pc, #144]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 80009c4:	f003 f926 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80009c8:	f640 433f 	movw	r3, #3135	; 0xc3f
 80009cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <MX_GPIO_Init+0x208>)
 80009de:	f003 f919 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80009e2:	f64c 739f 	movw	r3, #53151	; 0xcf9f
 80009e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_GPIO_Init+0x200>)
 80009f8:	f003 f90c 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RESET_N_Pin;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WIFI_RESET_N_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4810      	ldr	r0, [pc, #64]	; (8000a58 <MX_GPIO_Init+0x200>)
 8000a16:	f003 f8fd 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_INT_N_Pin;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x20c>)
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WIFI_INT_N_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480a      	ldr	r0, [pc, #40]	; (8000a58 <MX_GPIO_Init+0x200>)
 8000a30:	f003 f8f0 	bl	8003c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2028      	movs	r0, #40	; 0x28
 8000a3a:	f000 fdcd 	bl	80015d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a3e:	2028      	movs	r0, #40	; 0x28
 8000a40:	f000 fdf4 	bl	800162c <HAL_NVIC_EnableIRQ>

}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58020000 	.word	0x58020000
 8000a58:	58020c00 	.word	0x58020c00
 8000a5c:	58021000 	.word	0x58021000
 8000a60:	58020400 	.word	0x58020400
 8000a64:	11210000 	.word	0x11210000

08000a68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_I2C1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x7c>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_I2C1_Init+0x74>)
 8000aa4:	f003 fbdc 	bl	8004260 <HAL_I2C_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aae:	f000 f9af 	bl	8000e10 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ab6:	f003 fcf5 	bl	80044a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f000 f9a6 	bl	8000e10 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ac8:	f003 fd62 	bl	8004590 <HAL_I2CEx_ConfigDigitalFilter>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f99d 	bl	8000e10 <Error_Handler>
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	24000114 	.word	0x24000114
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	10707dbc 	.word	0x10707dbc

08000ae8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12e      	bne.n	8000b68 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <HAL_I2C_MspInit+0x90>)
 8000b46:	f003 f865 	bl	8003c14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020400 	.word	0x58020400

08000b7c <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  hjpeg.Instance = JPEG;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_JPEG_Init+0x20>)
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <MX_JPEG_Init+0x24>)
 8000b84:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_JPEG_Init+0x20>)
 8000b88:	f003 fd76 	bl	8004678 <HAL_JPEG_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b92:	f000 f93d 	bl	8000e10 <Error_Handler>
  }

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24000160 	.word	0x24000160
 8000ba0:	52003000 	.word	0x52003000

08000ba4 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_JPEG_MspInit+0x3c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10e      	bne.n	8000bd4 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bbc:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bcc:	f003 0320 	and.w	r3, r3, #32
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	52003000 	.word	0x52003000
 8000be4:	58024400 	.word	0x58024400

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0c2      	sub	sp, #264	; 0x108
 8000bec:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f000 fb47 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f833 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f7ff fe2f 	bl	8000858 <MX_GPIO_Init>
  MX_DCMI_Init();
 8000bfa:	f7ff fced 	bl	80005d8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000bfe:	f7ff ff33 	bl	8000a68 <MX_I2C1_Init>
  MX_JPEG_Init();
 8000c02:	f7ff ffbb 	bl	8000b7c <MX_JPEG_Init>
  MX_SPI2_Init();
 8000c06:	f000 f915 	bl	8000e34 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000c0a:	f000 fa79 	bl	8001100 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000c0e:	f7ff fe03 	bl	8000818 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  nm_bsp_init();
 8000c12:	f00b fbff 	bl	800c414 <nm_bsp_init>
  nm_bsp_reset();
 8000c16:	f00b fc09 	bl	800c42c <nm_bsp_reset>
  nm_bsp_register_isr(my_int); // TODO: SO: not working properly :(
 8000c1a:	480e      	ldr	r0, [pc, #56]	; (8000c54 <main+0x6c>)
 8000c1c:	f00b fc36 	bl	800c48c <nm_bsp_register_isr>
  /* USER CODE END 2 */
  /* USER CODE BEGIN 3 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buff[256]={0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	461a      	mov	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f00b fc9e 	bl	800c56c <memset>
  HAL_StatusTypeDef result = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
//	  if(X == 1)
//	  {
//		  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
//	  }
//	  nm_bsp_wifi_int_n_handler();
	  HAL_Delay(250);
 8000c36:	20fa      	movs	r0, #250	; 0xfa
 8000c38:	f000 fbb0 	bl	800139c <HAL_Delay>
	  result = HAL_SPI_Receive(&hspi2, buff, 256, 250);
 8000c3c:	1d39      	adds	r1, r7, #4
 8000c3e:	23fa      	movs	r3, #250	; 0xfa
 8000c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <main+0x70>)
 8000c46:	f007 fe67 	bl	8008918 <HAL_SPI_Receive>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	  HAL_Delay(250);
 8000c50:	e7f1      	b.n	8000c36 <main+0x4e>
 8000c52:	bf00      	nop
 8000c54:	08000dfd 	.word	0x08000dfd
 8000c58:	240001b8 	.word	0x240001b8

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0cc      	sub	sp, #304	; 0x130
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c66:	224c      	movs	r2, #76	; 0x4c
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00b fc7e 	bl	800c56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c74:	2220      	movs	r2, #32
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00b fc77 	bl	800c56c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	23bc      	movs	r3, #188	; 0xbc
 8000c86:	461a      	mov	r2, r3
 8000c88:	2100      	movs	r1, #0
 8000c8a:	f00b fc6f 	bl	800c56c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f004 fab6 	bl	8005200 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	4b4c      	ldr	r3, [pc, #304]	; (8000dcc <SystemClock_Config+0x170>)
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	4a4b      	ldr	r2, [pc, #300]	; (8000dcc <SystemClock_Config+0x170>)
 8000ca0:	f023 0301 	bic.w	r3, r3, #1
 8000ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ca6:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <SystemClock_Config+0x170>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	f003 0201 	and.w	r2, r3, #1
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <SystemClock_Config+0x174>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cba:	4a45      	ldr	r2, [pc, #276]	; (8000dd0 <SystemClock_Config+0x174>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	4b43      	ldr	r3, [pc, #268]	; (8000dd0 <SystemClock_Config+0x174>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd2:	bf00      	nop
 8000cd4:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <SystemClock_Config+0x174>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce0:	d1f8      	bne.n	8000cd4 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cee:	2320      	movs	r3, #32
 8000cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000d00:	2320      	movs	r3, #32
 8000d02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000d06:	2381      	movs	r3, #129	; 0x81
 8000d08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 faa7 	bl	8005288 <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d40:	f000 f866 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	233f      	movs	r3, #63	; 0x3f
 8000d46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 ff64 	bl	8005c48 <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000d86:	f000 f843 	bl	8000e10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SPI2
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	f241 020a 	movw	r2, #4106	; 0x100a
 8000d92:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2200      	movs	r2, #0
 8000d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	2200      	movs	r2, #0
 8000da2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2200      	movs	r2, #0
 8000daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4618      	mov	r0, r3
 8000db4:	f005 fc60 	bl	8006678 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000dbe:	f000 f827 	bl	8000e10 <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	58000400 	.word	0x58000400
 8000dd0:	58024800 	.word	0x58024800

08000dd4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == GPIO_PIN_13)
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000de4:	d103      	bne.n	8000dee <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000de6:	2102      	movs	r1, #2
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000dea:	f003 f9f7 	bl	80041dc <HAL_GPIO_TogglePin>
	}
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	58020800 	.word	0x58020800

08000dfc <my_int>:


void my_int(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000e00:	2104      	movs	r1, #4
 8000e02:	4802      	ldr	r0, [pc, #8]	; (8000e0c <my_int+0x10>)
 8000e04:	f003 f9ea 	bl	80041dc <HAL_GPIO_TogglePin>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	58020800 	.word	0x58020800

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <MX_SPI2_Init+0xa8>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e4e:	2203      	movs	r2, #3
 8000e50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_SPI2_Init+0xa4>)
 8000ec4:	f007 fa8c 	bl	80083e0 <HAL_SPI_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000ece:	f7ff ff9f 	bl	8000e10 <Error_Handler>
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	240001b8 	.word	0x240001b8
 8000edc:	40003800 	.word	0x40003800

08000ee0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <HAL_SPI_MspInit+0x88>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12e      	bne.n	8000f60 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_SPI_MspInit+0x8c>)
 8000f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_SPI_MspInit+0x8c>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_SPI_MspInit+0x8c>)
 8000f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_SPI_MspInit+0x8c>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <HAL_SPI_MspInit+0x8c>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_SPI_MspInit+0x8c>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f50:	2305      	movs	r3, #5
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_SPI_MspInit+0x90>)
 8000f5c:	f002 fe5a 	bl	8003c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40003800 	.word	0x40003800
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58020400 	.word	0x58020400

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_MspInit+0x30>)
 8000f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x30>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x30>)
 8000f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 f9ae 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <DMA1_Stream0_IRQHandler+0x10>)
 800100a:	f001 fa9d 	bl	8002548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2400004c 	.word	0x2400004c

08001018 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800101c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001020:	f003 f906 	bl	8004230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <DCMI_IRQHandler+0x10>)
 800102e:	f000 fc43 	bl	80018b8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	240000c4 	.word	0x240000c4

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <SystemInit+0xac>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <SystemInit+0xac>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <SystemInit+0xb0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <SystemInit+0xb0>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <SystemInit+0xb0>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <SystemInit+0xb0>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4921      	ldr	r1, [pc, #132]	; (80010ec <SystemInit+0xb0>)
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <SystemInit+0xb4>)
 800106a:	4013      	ands	r3, r2
 800106c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <SystemInit+0xb0>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <SystemInit+0xb0>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <SystemInit+0xb0>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <SystemInit+0xb0>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <SystemInit+0xb0>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <SystemInit+0xb0>)
 800108e:	2200      	movs	r2, #0
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <SystemInit+0xb0>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <SystemInit+0xb0>)
 800109a:	2200      	movs	r2, #0
 800109c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <SystemInit+0xb0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <SystemInit+0xb0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <SystemInit+0xb0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <SystemInit+0xb0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <SystemInit+0xb0>)
 80010b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <SystemInit+0xb0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <SystemInit+0xb8>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <SystemInit+0xbc>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ce:	d202      	bcs.n	80010d6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <SystemInit+0xc0>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SystemInit+0xac>)
 80010d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010dc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	58024400 	.word	0x58024400
 80010f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010f4:	5c001000 	.word	0x5c001000
 80010f8:	ffff0000 	.word	0xffff0000
 80010fc:	51008108 	.word	0x51008108

08001100 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_USART2_UART_Init+0x90>)
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <MX_USART2_UART_Init+0x94>)
 8001108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_USART2_UART_Init+0x90>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_USART2_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_USART2_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_USART2_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_USART2_UART_Init+0x90>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_USART2_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_USART2_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_USART2_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_USART2_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_USART2_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <MX_USART2_UART_Init+0x90>)
 800114a:	f008 f9d3 	bl	80094f4 <HAL_UART_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001154:	f7ff fe5c 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001158:	2100      	movs	r1, #0
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_USART2_UART_Init+0x90>)
 800115c:	f00a ffaa 	bl	800c0b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001166:	f7ff fe53 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <MX_USART2_UART_Init+0x90>)
 800116e:	f00b f83b 	bl	800c1e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001178:	f7ff fe4a 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_USART2_UART_Init+0x90>)
 800117e:	f00a ff23 	bl	800bfc8 <HAL_UARTEx_DisableFifoMode>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001188:	f7ff fe42 	bl	8000e10 <Error_Handler>
  }

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	24000240 	.word	0x24000240
 8001194:	40004400 	.word	0x40004400

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1a      	ldr	r2, [pc, #104]	; (8001220 <HAL_UART_MspInit+0x88>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12d      	bne.n	8001216 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_UART_MspInit+0x90>)
 8001212:	f002 fcff 	bl	8003c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004400 	.word	0x40004400
 8001224:	58024400 	.word	0x58024400
 8001228:	58020c00 	.word	0x58020c00

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001230:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001232:	e003      	b.n	800123c <LoopCopyDataInit>

08001234 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001236:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001238:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800123a:	3104      	adds	r1, #4

0800123c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001240:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001244:	d3f6      	bcc.n	8001234 <CopyDataInit>
  ldr  r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001248:	e002      	b.n	8001250 <LoopFillZerobss>

0800124a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800124a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800124c:	f842 3b04 	str.w	r3, [r2], #4

08001250 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001254:	d3f9      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001256:	f7ff fef1 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f00b f963 	bl	800c524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff fcc3 	bl	8000be8 <main>
  bx  lr    
 8001262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001268:	0800cb10 	.word	0x0800cb10
  ldr  r0, =_sdata
 800126c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001270:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001274:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8001278:	240002d0 	.word	0x240002d0

0800127c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC3_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f987 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800128a:	f005 f83b 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 800128e:	4601      	mov	r1, r0
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_Init+0x60>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_Init+0x64>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	fa21 f303 	lsr.w	r3, r1, r3
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_Init+0x68>)
 80012a8:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_Init+0x68>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_Init+0x60>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	490b      	ldr	r1, [pc, #44]	; (80012e4 <HAL_Init+0x64>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x6c>)
 80012c4:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f812 	bl	80012f0 <HAL_InitTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e002      	b.n	80012dc <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012d6:	f7ff fe4d 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	58024400 	.word	0x58024400
 80012e4:	0800c8c8 	.word	0x0800c8c8
 80012e8:	24000000 	.word	0x24000000
 80012ec:	24000004 	.word	0x24000004

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_InitTick+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e021      	b.n	8001348 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_InitTick+0x64>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_InitTick+0x60>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f99e 	bl	800165c <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f94e 	bl	80015d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x68>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2400000c 	.word	0x2400000c
 8001354:	24000000 	.word	0x24000000
 8001358:	24000008 	.word	0x24000008

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2400000c 	.word	0x2400000c
 8001380:	240002cc 	.word	0x240002cc

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	240002cc 	.word	0x240002cc

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff ffee 	bl	8001384 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_Delay+0x40>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffde 	bl	8001384 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2400000c 	.word	0x2400000c

080013e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetREVID+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0c1b      	lsrs	r3, r3, #16
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	5c001000 	.word	0x5c001000

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	4313      	orrs	r3, r2
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	05fa0000 	.word	0x05fa0000

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b07      	cmp	r3, #7
 80015a4:	d00f      	beq.n	80015c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b06      	cmp	r3, #6
 80015aa:	d00c      	beq.n	80015c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d009      	beq.n	80015c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d006      	beq.n	80015c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d003      	beq.n	80015c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015be:	2192      	movs	r1, #146	; 0x92
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80015c2:	f7ff fc2c 	bl	8000e1e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff16 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	0800c594 	.word	0x0800c594

080015d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d903      	bls.n	80015f4 <HAL_NVIC_SetPriority+0x1c>
 80015ec:	21aa      	movs	r1, #170	; 0xaa
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <HAL_NVIC_SetPriority+0x50>)
 80015f0:	f7ff fc15 	bl	8000e1e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	d903      	bls.n	8001602 <HAL_NVIC_SetPriority+0x2a>
 80015fa:	21ab      	movs	r1, #171	; 0xab
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <HAL_NVIC_SetPriority+0x50>)
 80015fe:	f7ff fc0e 	bl	8000e1e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001602:	f7ff ff1d 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001606:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	f7ff ff6d 	bl	80014ec <NVIC_EncodePriority>
 8001612:	4602      	mov	r2, r0
 8001614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff3c 	bl	8001498 <__NVIC_SetPriority>
}
 8001620:	bf00      	nop
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800c594 	.word	0x0800c594

0800162c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	2b00      	cmp	r3, #0
 800163c:	da03      	bge.n	8001646 <HAL_NVIC_EnableIRQ+0x1a>
 800163e:	21be      	movs	r1, #190	; 0xbe
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_NVIC_EnableIRQ+0x2c>)
 8001642:	f7ff fbec 	bl	8000e1e <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff06 	bl	800145c <__NVIC_EnableIRQ>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	0800c594 	.word	0x0800c594

0800165c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff75 	bl	8001554 <SysTick_Config>
 800166a:	4603      	mov	r3, r0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e10e      	b.n	80018a4 <HAL_DCMI_Init+0x230>
  }

  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a88      	ldr	r2, [pc, #544]	; (80018ac <HAL_DCMI_Init+0x238>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d003      	beq.n	8001698 <HAL_DCMI_Init+0x24>
 8001690:	21b6      	movs	r1, #182	; 0xb6
 8001692:	4887      	ldr	r0, [pc, #540]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 8001694:	f7ff fbc3 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_DCMI_Init+0x3c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	d003      	beq.n	80016b0 <HAL_DCMI_Init+0x3c>
 80016a8:	21b7      	movs	r1, #183	; 0xb7
 80016aa:	4881      	ldr	r0, [pc, #516]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 80016ac:	f7ff fbb7 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <HAL_DCMI_Init+0x54>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b80      	cmp	r3, #128	; 0x80
 80016be:	d003      	beq.n	80016c8 <HAL_DCMI_Init+0x54>
 80016c0:	21b8      	movs	r1, #184	; 0xb8
 80016c2:	487b      	ldr	r0, [pc, #492]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 80016c4:	f7ff fbab 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_DCMI_Init+0x6c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2b40      	cmp	r3, #64	; 0x40
 80016d6:	d003      	beq.n	80016e0 <HAL_DCMI_Init+0x6c>
 80016d8:	21b9      	movs	r1, #185	; 0xb9
 80016da:	4875      	ldr	r0, [pc, #468]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 80016dc:	f7ff fb9f 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_DCMI_Init+0x84>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d003      	beq.n	80016f8 <HAL_DCMI_Init+0x84>
 80016f0:	21ba      	movs	r1, #186	; 0xba
 80016f2:	486f      	ldr	r0, [pc, #444]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 80016f4:	f7ff fb93 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00d      	beq.n	800171c <HAL_DCMI_Init+0xa8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001708:	d008      	beq.n	800171c <HAL_DCMI_Init+0xa8>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001712:	d003      	beq.n	800171c <HAL_DCMI_Init+0xa8>
 8001714:	21bb      	movs	r1, #187	; 0xbb
 8001716:	4866      	ldr	r0, [pc, #408]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 8001718:	f7ff fb81 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d012      	beq.n	800174a <HAL_DCMI_Init+0xd6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172c:	d00d      	beq.n	800174a <HAL_DCMI_Init+0xd6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001736:	d008      	beq.n	800174a <HAL_DCMI_Init+0xd6>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001740:	d003      	beq.n	800174a <HAL_DCMI_Init+0xd6>
 8001742:	21bc      	movs	r1, #188	; 0xbc
 8001744:	485a      	ldr	r0, [pc, #360]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 8001746:	f7ff fb6a 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_DCMI_Init+0xee>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	2b08      	cmp	r3, #8
 8001758:	d003      	beq.n	8001762 <HAL_DCMI_Init+0xee>
 800175a:	21bd      	movs	r1, #189	; 0xbd
 800175c:	4854      	ldr	r0, [pc, #336]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 800175e:	f7ff fb5e 	bl	8000e1e <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	2b00      	cmp	r3, #0
 8001768:	d012      	beq.n	8001790 <HAL_DCMI_Init+0x11c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001772:	d00d      	beq.n	8001790 <HAL_DCMI_Init+0x11c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800177c:	d008      	beq.n	8001790 <HAL_DCMI_Init+0x11c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001786:	d003      	beq.n	8001790 <HAL_DCMI_Init+0x11c>
 8001788:	21bf      	movs	r1, #191	; 0xbf
 800178a:	4849      	ldr	r0, [pc, #292]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 800178c:	f7ff fb47 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_DCMI_Init+0x136>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017a0:	d003      	beq.n	80017aa <HAL_DCMI_Init+0x136>
 80017a2:	21c0      	movs	r1, #192	; 0xc0
 80017a4:	4842      	ldr	r0, [pc, #264]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 80017a6:	f7ff fb3a 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <HAL_DCMI_Init+0x150>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017ba:	d003      	beq.n	80017c4 <HAL_DCMI_Init+0x150>
 80017bc:	21c1      	movs	r1, #193	; 0xc1
 80017be:	483c      	ldr	r0, [pc, #240]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 80017c0:	f7ff fb2d 	bl	8000e1e <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_DCMI_Init+0x16a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017d4:	d003      	beq.n	80017de <HAL_DCMI_Init+0x16a>
 80017d6:	21c2      	movs	r1, #194	; 0xc2
 80017d8:	4835      	ldr	r0, [pc, #212]	; (80018b0 <HAL_DCMI_Init+0x23c>)
 80017da:	f7ff fb20 	bl	8000e1e <assert_failed>
    /* Init the low level hardware */
    hdcmi->MspInitCallback(hdcmi);
  }

#else
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_DCMI_Init+0x17c>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe ff2a 	bl	8000644 <HAL_DCMI_MspInit>
  }
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <HAL_DCMI_Init+0x240>)
 8001804:	400b      	ands	r3, r1
 8001806:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800181c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001828:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001834:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001840:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800184c:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d112      	bne.n	8001884 <HAL_DCMI_Init+0x210>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7f1b      	ldrb	r3, [r3, #28]
 8001862:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7f5b      	ldrb	r3, [r3, #29]
 8001868:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800186a:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7f9b      	ldrb	r3, [r3, #30]
 8001870:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001872:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7fdb      	ldrb	r3, [r3, #31]
 800187a:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001880:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001882:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 021e 	orr.w	r2, r2, #30
 8001892:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	48020000 	.word	0x48020000
 80018b0:	0800c5d0 	.word	0x0800c5d0
 80018b4:	ffe0f007 	.word	0xffe0f007

080018b8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2204      	movs	r2, #4
 80018d8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f043 0202 	orr.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2204      	movs	r2, #4
 80018ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f2:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_DCMI_IRQHandler+0x100>)
 80018f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fc8e 	bl	800221c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2202      	movs	r2, #2
 8001910:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192a:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <HAL_DCMI_IRQHandler+0x100>)
 800192c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fc72 	bl	800221c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2210      	movs	r2, #16
 8001948:	615a      	str	r2, [r3, #20]

    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f840 	bl	80019d0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2208      	movs	r2, #8
 8001960:	615a      	str	r2, [r3, #20]

    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f83e 	bl	80019e4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01d      	beq.n	80019ae <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b02      	cmp	r3, #2
 800197e:	d107      	bne.n	8001990 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 021e 	bic.w	r2, r2, #30
 800198e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	615a      	str	r2, [r3, #20]

    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f825 	bl	80019f8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	08001a0d 	.word	0x08001a0d

080019bc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a18:	60fb      	str	r3, [r7, #12]

  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d009      	beq.n	8001a38 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff ffbf 	bl	80019bc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff fc98 	bl	8001384 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e3d8      	b.n	8002212 <HAL_DMA_Init+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a96      	ldr	r2, [pc, #600]	; (8001cc0 <HAL_DMA_Init+0x278>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d076      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a95      	ldr	r2, [pc, #596]	; (8001cc4 <HAL_DMA_Init+0x27c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d071      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a93      	ldr	r2, [pc, #588]	; (8001cc8 <HAL_DMA_Init+0x280>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d06c      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a92      	ldr	r2, [pc, #584]	; (8001ccc <HAL_DMA_Init+0x284>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d067      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a90      	ldr	r2, [pc, #576]	; (8001cd0 <HAL_DMA_Init+0x288>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d062      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a8f      	ldr	r2, [pc, #572]	; (8001cd4 <HAL_DMA_Init+0x28c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d05d      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a8d      	ldr	r2, [pc, #564]	; (8001cd8 <HAL_DMA_Init+0x290>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d058      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8c      	ldr	r2, [pc, #560]	; (8001cdc <HAL_DMA_Init+0x294>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d053      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a8a      	ldr	r2, [pc, #552]	; (8001ce0 <HAL_DMA_Init+0x298>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d04e      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a89      	ldr	r2, [pc, #548]	; (8001ce4 <HAL_DMA_Init+0x29c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d049      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a87      	ldr	r2, [pc, #540]	; (8001ce8 <HAL_DMA_Init+0x2a0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d044      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a86      	ldr	r2, [pc, #536]	; (8001cec <HAL_DMA_Init+0x2a4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d03f      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a84      	ldr	r2, [pc, #528]	; (8001cf0 <HAL_DMA_Init+0x2a8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d03a      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a83      	ldr	r2, [pc, #524]	; (8001cf4 <HAL_DMA_Init+0x2ac>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d035      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a81      	ldr	r2, [pc, #516]	; (8001cf8 <HAL_DMA_Init+0x2b0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d030      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a80      	ldr	r2, [pc, #512]	; (8001cfc <HAL_DMA_Init+0x2b4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d02b      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a7e      	ldr	r2, [pc, #504]	; (8001d00 <HAL_DMA_Init+0x2b8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d026      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7d      	ldr	r2, [pc, #500]	; (8001d04 <HAL_DMA_Init+0x2bc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d021      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a7b      	ldr	r2, [pc, #492]	; (8001d08 <HAL_DMA_Init+0x2c0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01c      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7a      	ldr	r2, [pc, #488]	; (8001d0c <HAL_DMA_Init+0x2c4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d017      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a78      	ldr	r2, [pc, #480]	; (8001d10 <HAL_DMA_Init+0x2c8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d012      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a77      	ldr	r2, [pc, #476]	; (8001d14 <HAL_DMA_Init+0x2cc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a75      	ldr	r2, [pc, #468]	; (8001d18 <HAL_DMA_Init+0x2d0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d008      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a74      	ldr	r2, [pc, #464]	; (8001d1c <HAL_DMA_Init+0x2d4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d003      	beq.n	8001b58 <HAL_DMA_Init+0x110>
 8001b50:	21d4      	movs	r1, #212	; 0xd4
 8001b52:	4873      	ldr	r0, [pc, #460]	; (8001d20 <HAL_DMA_Init+0x2d8>)
 8001b54:	f7ff f963 	bl	8000e1e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_DMA_Init+0x130>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b40      	cmp	r3, #64	; 0x40
 8001b66:	d007      	beq.n	8001b78 <HAL_DMA_Init+0x130>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b80      	cmp	r3, #128	; 0x80
 8001b6e:	d003      	beq.n	8001b78 <HAL_DMA_Init+0x130>
 8001b70:	21d5      	movs	r1, #213	; 0xd5
 8001b72:	486b      	ldr	r0, [pc, #428]	; (8001d20 <HAL_DMA_Init+0x2d8>)
 8001b74:	f7ff f953 	bl	8000e1e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b80:	d007      	beq.n	8001b92 <HAL_DMA_Init+0x14a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_DMA_Init+0x14a>
 8001b8a:	21d6      	movs	r1, #214	; 0xd6
 8001b8c:	4864      	ldr	r0, [pc, #400]	; (8001d20 <HAL_DMA_Init+0x2d8>)
 8001b8e:	f7ff f946 	bl	8000e1e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9a:	d007      	beq.n	8001bac <HAL_DMA_Init+0x164>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_Init+0x164>
 8001ba4:	21d7      	movs	r1, #215	; 0xd7
 8001ba6:	485e      	ldr	r0, [pc, #376]	; (8001d20 <HAL_DMA_Init+0x2d8>)
 8001ba8:	f7ff f939 	bl	8000e1e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_DMA_Init+0x188>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bbc:	d008      	beq.n	8001bd0 <HAL_DMA_Init+0x188>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc6:	d003      	beq.n	8001bd0 <HAL_DMA_Init+0x188>
 8001bc8:	21d8      	movs	r1, #216	; 0xd8
 8001bca:	4855      	ldr	r0, [pc, #340]	; (8001d20 <HAL_DMA_Init+0x2d8>)
 8001bcc:	f7ff f927 	bl	8000e1e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_DMA_Init+0x1ac>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be0:	d008      	beq.n	8001bf4 <HAL_DMA_Init+0x1ac>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_Init+0x1ac>
 8001bec:	21d9      	movs	r1, #217	; 0xd9
 8001bee:	484c      	ldr	r0, [pc, #304]	; (8001d20 <HAL_DMA_Init+0x2d8>)
 8001bf0:	f7ff f915 	bl	8000e1e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d016      	beq.n	8001c2a <HAL_DMA_Init+0x1e2>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c04:	d011      	beq.n	8001c2a <HAL_DMA_Init+0x1e2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d00d      	beq.n	8001c2a <HAL_DMA_Init+0x1e2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c16:	d008      	beq.n	8001c2a <HAL_DMA_Init+0x1e2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001c20:	d003      	beq.n	8001c2a <HAL_DMA_Init+0x1e2>
 8001c22:	21da      	movs	r1, #218	; 0xda
 8001c24:	483e      	ldr	r0, [pc, #248]	; (8001d20 <HAL_DMA_Init+0x2d8>)
 8001c26:	f7ff f8fa 	bl	8000e1e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <HAL_DMA_Init+0x210>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3a:	d00d      	beq.n	8001c58 <HAL_DMA_Init+0x210>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c44:	d008      	beq.n	8001c58 <HAL_DMA_Init+0x210>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c4e:	d003      	beq.n	8001c58 <HAL_DMA_Init+0x210>
 8001c50:	21db      	movs	r1, #219	; 0xdb
 8001c52:	4833      	ldr	r0, [pc, #204]	; (8001d20 <HAL_DMA_Init+0x2d8>)
 8001c54:	f7ff f8e3 	bl	8000e1e <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_DMA_Init+0x278>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d07e      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_DMA_Init+0x27c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d079      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a15      	ldr	r2, [pc, #84]	; (8001cc8 <HAL_DMA_Init+0x280>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d074      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_DMA_Init+0x284>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d06f      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_DMA_Init+0x288>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d06a      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_DMA_Init+0x28c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d065      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <HAL_DMA_Init+0x290>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d060      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_DMA_Init+0x294>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d05b      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <HAL_DMA_Init+0x298>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d056      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_DMA_Init+0x29c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d051      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001cbc:	e032      	b.n	8001d24 <HAL_DMA_Init+0x2dc>
 8001cbe:	bf00      	nop
 8001cc0:	40020010 	.word	0x40020010
 8001cc4:	40020028 	.word	0x40020028
 8001cc8:	40020040 	.word	0x40020040
 8001ccc:	40020058 	.word	0x40020058
 8001cd0:	40020070 	.word	0x40020070
 8001cd4:	40020088 	.word	0x40020088
 8001cd8:	400200a0 	.word	0x400200a0
 8001cdc:	400200b8 	.word	0x400200b8
 8001ce0:	40020410 	.word	0x40020410
 8001ce4:	40020428 	.word	0x40020428
 8001ce8:	40020440 	.word	0x40020440
 8001cec:	40020458 	.word	0x40020458
 8001cf0:	40020470 	.word	0x40020470
 8001cf4:	40020488 	.word	0x40020488
 8001cf8:	400204a0 	.word	0x400204a0
 8001cfc:	400204b8 	.word	0x400204b8
 8001d00:	58025408 	.word	0x58025408
 8001d04:	5802541c 	.word	0x5802541c
 8001d08:	58025430 	.word	0x58025430
 8001d0c:	58025444 	.word	0x58025444
 8001d10:	58025458 	.word	0x58025458
 8001d14:	5802546c 	.word	0x5802546c
 8001d18:	58025480 	.word	0x58025480
 8001d1c:	58025494 	.word	0x58025494
 8001d20:	0800c60c 	.word	0x0800c60c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a7a      	ldr	r2, [pc, #488]	; (8001f14 <HAL_DMA_Init+0x4cc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d018      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a79      	ldr	r2, [pc, #484]	; (8001f18 <HAL_DMA_Init+0x4d0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <HAL_DMA_Init+0x4d4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00e      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a76      	ldr	r2, [pc, #472]	; (8001f20 <HAL_DMA_Init+0x4d8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a74      	ldr	r2, [pc, #464]	; (8001f24 <HAL_DMA_Init+0x4dc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_Init+0x318>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a73      	ldr	r2, [pc, #460]	; (8001f28 <HAL_DMA_Init+0x4e0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_DMA_Init+0x31c>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_DMA_Init+0x31e>
 8001d64:	2300      	movs	r3, #0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8167 	beq.w	800203a <HAL_DMA_Init+0x5f2>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b73      	cmp	r3, #115	; 0x73
 8001d72:	d903      	bls.n	8001d7c <HAL_DMA_Init+0x334>
 8001d74:	21df      	movs	r1, #223	; 0xdf
 8001d76:	486d      	ldr	r0, [pc, #436]	; (8001f2c <HAL_DMA_Init+0x4e4>)
 8001d78:	f7ff f851 	bl	8000e1e <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_DMA_Init+0x34c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d003      	beq.n	8001d94 <HAL_DMA_Init+0x34c>
 8001d8c:	21e0      	movs	r1, #224	; 0xe0
 8001d8e:	4867      	ldr	r0, [pc, #412]	; (8001f2c <HAL_DMA_Init+0x4e4>)
 8001d90:	f7ff f845 	bl	8000e1e <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d041      	beq.n	8001e20 <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00f      	beq.n	8001dc4 <HAL_DMA_Init+0x37c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d00b      	beq.n	8001dc4 <HAL_DMA_Init+0x37c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d007      	beq.n	8001dc4 <HAL_DMA_Init+0x37c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d003      	beq.n	8001dc4 <HAL_DMA_Init+0x37c>
 8001dbc:	21e5      	movs	r1, #229	; 0xe5
 8001dbe:	485b      	ldr	r0, [pc, #364]	; (8001f2c <HAL_DMA_Init+0x4e4>)
 8001dc0:	f7ff f82d 	bl	8000e1e <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d012      	beq.n	8001df2 <HAL_DMA_Init+0x3aa>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd4:	d00d      	beq.n	8001df2 <HAL_DMA_Init+0x3aa>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dde:	d008      	beq.n	8001df2 <HAL_DMA_Init+0x3aa>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001de8:	d003      	beq.n	8001df2 <HAL_DMA_Init+0x3aa>
 8001dea:	21e6      	movs	r1, #230	; 0xe6
 8001dec:	484f      	ldr	r0, [pc, #316]	; (8001f2c <HAL_DMA_Init+0x4e4>)
 8001dee:	f7ff f816 	bl	8000e1e <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d012      	beq.n	8001e20 <HAL_DMA_Init+0x3d8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e02:	d00d      	beq.n	8001e20 <HAL_DMA_Init+0x3d8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0c:	d008      	beq.n	8001e20 <HAL_DMA_Init+0x3d8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001e16:	d003      	beq.n	8001e20 <HAL_DMA_Init+0x3d8>
 8001e18:	21e7      	movs	r1, #231	; 0xe7
 8001e1a:	4844      	ldr	r0, [pc, #272]	; (8001f2c <HAL_DMA_Init+0x4e4>)
 8001e1c:	f7fe ffff 	bl	8000e1e <assert_failed>
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3e      	ldr	r2, [pc, #248]	; (8001f30 <HAL_DMA_Init+0x4e8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d04a      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3d      	ldr	r2, [pc, #244]	; (8001f34 <HAL_DMA_Init+0x4ec>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d045      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <HAL_DMA_Init+0x4f0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d040      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <HAL_DMA_Init+0x4f4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d03b      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a38      	ldr	r2, [pc, #224]	; (8001f40 <HAL_DMA_Init+0x4f8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d036      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <HAL_DMA_Init+0x4fc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d031      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a35      	ldr	r2, [pc, #212]	; (8001f48 <HAL_DMA_Init+0x500>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d02c      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a34      	ldr	r2, [pc, #208]	; (8001f4c <HAL_DMA_Init+0x504>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d027      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <HAL_DMA_Init+0x508>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d022      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_DMA_Init+0x50c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d01d      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_DMA_Init+0x4cc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d018      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_DMA_Init+0x4d0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <HAL_DMA_Init+0x4d4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00e      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_DMA_Init+0x4d8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <HAL_DMA_Init+0x4dc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d004      	beq.n	8001ed0 <HAL_DMA_Init+0x488>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_DMA_Init+0x4e0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <HAL_DMA_Init+0x49a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e007      	b.n	8001ef2 <HAL_DMA_Init+0x4aa>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ef2:	e031      	b.n	8001f58 <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef4:	f7ff fa46 	bl	8001384 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d92a      	bls.n	8001f58 <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e17e      	b.n	8002212 <HAL_DMA_Init+0x7ca>
 8001f14:	40020440 	.word	0x40020440
 8001f18:	40020458 	.word	0x40020458
 8001f1c:	40020470 	.word	0x40020470
 8001f20:	40020488 	.word	0x40020488
 8001f24:	400204a0 	.word	0x400204a0
 8001f28:	400204b8 	.word	0x400204b8
 8001f2c:	0800c60c 	.word	0x0800c60c
 8001f30:	40020010 	.word	0x40020010
 8001f34:	40020028 	.word	0x40020028
 8001f38:	40020040 	.word	0x40020040
 8001f3c:	40020058 	.word	0x40020058
 8001f40:	40020070 	.word	0x40020070
 8001f44:	40020088 	.word	0x40020088
 8001f48:	400200a0 	.word	0x400200a0
 8001f4c:	400200b8 	.word	0x400200b8
 8001f50:	40020410 	.word	0x40020410
 8001f54:	40020428 	.word	0x40020428
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1c6      	bne.n	8001ef4 <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4b92      	ldr	r3, [pc, #584]	; (80021bc <HAL_DMA_Init+0x774>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f96:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d107      	bne.n	8001fbc <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f023 0307 	bic.w	r3, r3, #7
 8001fd2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d117      	bne.n	8002016 <HAL_DMA_Init+0x5ce>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <HAL_DMA_Init+0x5ce>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f001 fa81 	bl	8003500 <DMA_CheckFifoParam>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_DMA_Init+0x5ce>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0fd      	b.n	8002212 <HAL_DMA_Init+0x7ca>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f001 f9bc 	bl	800339c <DMA_CalcBaseAndBitshift>
 8002024:	4603      	mov	r3, r0
 8002026:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	223f      	movs	r2, #63	; 0x3f
 8002032:	409a      	lsls	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	e095      	b.n	8002166 <HAL_DMA_Init+0x71e>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a60      	ldr	r2, [pc, #384]	; (80021c0 <HAL_DMA_Init+0x778>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <HAL_DMA_Init+0x642>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5e      	ldr	r2, [pc, #376]	; (80021c4 <HAL_DMA_Init+0x77c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01d      	beq.n	800208a <HAL_DMA_Init+0x642>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a5d      	ldr	r2, [pc, #372]	; (80021c8 <HAL_DMA_Init+0x780>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d018      	beq.n	800208a <HAL_DMA_Init+0x642>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a5b      	ldr	r2, [pc, #364]	; (80021cc <HAL_DMA_Init+0x784>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_DMA_Init+0x642>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5a      	ldr	r2, [pc, #360]	; (80021d0 <HAL_DMA_Init+0x788>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00e      	beq.n	800208a <HAL_DMA_Init+0x642>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_DMA_Init+0x78c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d009      	beq.n	800208a <HAL_DMA_Init+0x642>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_DMA_Init+0x790>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_DMA_Init+0x642>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a55      	ldr	r2, [pc, #340]	; (80021dc <HAL_DMA_Init+0x794>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_DMA_Init+0x646>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_DMA_Init+0x648>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05f      	beq.n	8002154 <HAL_DMA_Init+0x70c>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b11      	cmp	r3, #17
 800209a:	d904      	bls.n	80020a6 <HAL_DMA_Init+0x65e>
 800209c:	f240 1149 	movw	r1, #329	; 0x149
 80020a0:	484f      	ldr	r0, [pc, #316]	; (80021e0 <HAL_DMA_Init+0x798>)
 80020a2:	f7fe febc 	bl	8000e1e <assert_failed>

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2202      	movs	r2, #2
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <HAL_DMA_Init+0x79c>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b40      	cmp	r3, #64	; 0x40
 80020cc:	d008      	beq.n	80020e0 <HAL_DMA_Init+0x698>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b80      	cmp	r3, #128	; 0x80
 80020d4:	d102      	bne.n	80020dc <HAL_DMA_Init+0x694>
 80020d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020da:	e002      	b.n	80020e2 <HAL_DMA_Init+0x69a>
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <HAL_DMA_Init+0x69a>
 80020e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68d2      	ldr	r2, [r2, #12]
 80020e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80020e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 80020f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 80020f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8002100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8002110:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_DMA_Init+0x7a0>)
 8002128:	4413      	add	r3, r2
 800212a:	4a30      	ldr	r2, [pc, #192]	; (80021ec <HAL_DMA_Init+0x7a4>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	009a      	lsls	r2, r3, #2
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f001 f92f 	bl	800339c <DMA_CalcBaseAndBitshift>
 800213e:	4603      	mov	r3, r0
 8002140:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2201      	movs	r2, #1
 800214c:	409a      	lsls	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	e008      	b.n	8002166 <HAL_DMA_Init+0x71e>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2203      	movs	r2, #3
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e055      	b.n	8002212 <HAL_DMA_Init+0x7ca>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f001 fa46 	bl	80035f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d102      	bne.n	800217a <HAL_DMA_Init+0x732>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800218e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d02b      	beq.n	80021f0 <HAL_DMA_Init+0x7a8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b08      	cmp	r3, #8
 800219e:	d827      	bhi.n	80021f0 <HAL_DMA_Init+0x7a8>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f001 fac3 	bl	800372c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	e023      	b.n	8002202 <HAL_DMA_Init+0x7ba>
 80021ba:	bf00      	nop
 80021bc:	fe10803f 	.word	0xfe10803f
 80021c0:	58025408 	.word	0x58025408
 80021c4:	5802541c 	.word	0x5802541c
 80021c8:	58025430 	.word	0x58025430
 80021cc:	58025444 	.word	0x58025444
 80021d0:	58025458 	.word	0x58025458
 80021d4:	5802546c 	.word	0x5802546c
 80021d8:	58025480 	.word	0x58025480
 80021dc:	58025494 	.word	0x58025494
 80021e0:	0800c60c 	.word	0x0800c60c
 80021e4:	fffe000f 	.word	0xfffe000f
 80021e8:	a7fdabf8 	.word	0xa7fdabf8
 80021ec:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop

0800221c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e188      	b.n	8002540 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d004      	beq.n	8002244 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e17d      	b.n	8002540 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a8c      	ldr	r2, [pc, #560]	; (800247c <HAL_DMA_Abort_IT+0x260>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d04a      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a8b      	ldr	r2, [pc, #556]	; (8002480 <HAL_DMA_Abort_IT+0x264>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d045      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a89      	ldr	r2, [pc, #548]	; (8002484 <HAL_DMA_Abort_IT+0x268>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d040      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a88      	ldr	r2, [pc, #544]	; (8002488 <HAL_DMA_Abort_IT+0x26c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d03b      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a86      	ldr	r2, [pc, #536]	; (800248c <HAL_DMA_Abort_IT+0x270>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d036      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a85      	ldr	r2, [pc, #532]	; (8002490 <HAL_DMA_Abort_IT+0x274>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d031      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a83      	ldr	r2, [pc, #524]	; (8002494 <HAL_DMA_Abort_IT+0x278>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02c      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a82      	ldr	r2, [pc, #520]	; (8002498 <HAL_DMA_Abort_IT+0x27c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d027      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a80      	ldr	r2, [pc, #512]	; (800249c <HAL_DMA_Abort_IT+0x280>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d022      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7f      	ldr	r2, [pc, #508]	; (80024a0 <HAL_DMA_Abort_IT+0x284>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d01d      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a7d      	ldr	r2, [pc, #500]	; (80024a4 <HAL_DMA_Abort_IT+0x288>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d018      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7c      	ldr	r2, [pc, #496]	; (80024a8 <HAL_DMA_Abort_IT+0x28c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a7a      	ldr	r2, [pc, #488]	; (80024ac <HAL_DMA_Abort_IT+0x290>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00e      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a79      	ldr	r2, [pc, #484]	; (80024b0 <HAL_DMA_Abort_IT+0x294>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a77      	ldr	r2, [pc, #476]	; (80024b4 <HAL_DMA_Abort_IT+0x298>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_DMA_Abort_IT+0xc8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a76      	ldr	r2, [pc, #472]	; (80024b8 <HAL_DMA_Abort_IT+0x29c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_DMA_Abort_IT+0xcc>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_DMA_Abort_IT+0xce>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d065      	beq.n	80023ba <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a60      	ldr	r2, [pc, #384]	; (800247c <HAL_DMA_Abort_IT+0x260>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d04a      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5e      	ldr	r2, [pc, #376]	; (8002480 <HAL_DMA_Abort_IT+0x264>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d045      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5d      	ldr	r2, [pc, #372]	; (8002484 <HAL_DMA_Abort_IT+0x268>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d040      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a5b      	ldr	r2, [pc, #364]	; (8002488 <HAL_DMA_Abort_IT+0x26c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d03b      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a5a      	ldr	r2, [pc, #360]	; (800248c <HAL_DMA_Abort_IT+0x270>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d036      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_DMA_Abort_IT+0x274>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d031      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a57      	ldr	r2, [pc, #348]	; (8002494 <HAL_DMA_Abort_IT+0x278>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d02c      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a55      	ldr	r2, [pc, #340]	; (8002498 <HAL_DMA_Abort_IT+0x27c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d027      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a54      	ldr	r2, [pc, #336]	; (800249c <HAL_DMA_Abort_IT+0x280>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_DMA_Abort_IT+0x284>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01d      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <HAL_DMA_Abort_IT+0x288>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d018      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_DMA_Abort_IT+0x28c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a4e      	ldr	r2, [pc, #312]	; (80024ac <HAL_DMA_Abort_IT+0x290>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00e      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <HAL_DMA_Abort_IT+0x294>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a4b      	ldr	r2, [pc, #300]	; (80024b4 <HAL_DMA_Abort_IT+0x298>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_DMA_Abort_IT+0x17a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a49      	ldr	r2, [pc, #292]	; (80024b8 <HAL_DMA_Abort_IT+0x29c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d108      	bne.n	80023a8 <HAL_DMA_Abort_IT+0x18c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e0ca      	b.n	800253e <HAL_DMA_Abort_IT+0x322>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e0c1      	b.n	800253e <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 020e 	bic.w	r2, r2, #14
 80023c8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2b      	ldr	r2, [pc, #172]	; (800247c <HAL_DMA_Abort_IT+0x260>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04a      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a29      	ldr	r2, [pc, #164]	; (8002480 <HAL_DMA_Abort_IT+0x264>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d045      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_DMA_Abort_IT+0x268>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d040      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a26      	ldr	r2, [pc, #152]	; (8002488 <HAL_DMA_Abort_IT+0x26c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d03b      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <HAL_DMA_Abort_IT+0x270>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d036      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a23      	ldr	r2, [pc, #140]	; (8002490 <HAL_DMA_Abort_IT+0x274>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a22      	ldr	r2, [pc, #136]	; (8002494 <HAL_DMA_Abort_IT+0x278>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d02c      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_DMA_Abort_IT+0x27c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d027      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_DMA_Abort_IT+0x280>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_DMA_Abort_IT+0x284>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01d      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_DMA_Abort_IT+0x288>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d018      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <HAL_DMA_Abort_IT+0x28c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_DMA_Abort_IT+0x290>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_DMA_Abort_IT+0x294>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_DMA_Abort_IT+0x298>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_DMA_Abort_IT+0x24e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <HAL_DMA_Abort_IT+0x29c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d128      	bne.n	80024bc <HAL_DMA_Abort_IT+0x2a0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e027      	b.n	80024cc <HAL_DMA_Abort_IT+0x2b0>
 800247c:	40020010 	.word	0x40020010
 8002480:	40020028 	.word	0x40020028
 8002484:	40020040 	.word	0x40020040
 8002488:	40020058 	.word	0x40020058
 800248c:	40020070 	.word	0x40020070
 8002490:	40020088 	.word	0x40020088
 8002494:	400200a0 	.word	0x400200a0
 8002498:	400200b8 	.word	0x400200b8
 800249c:	40020410 	.word	0x40020410
 80024a0:	40020428 	.word	0x40020428
 80024a4:	40020440 	.word	0x40020440
 80024a8:	40020458 	.word	0x40020458
 80024ac:	40020470 	.word	0x40020470
 80024b0:	40020488 	.word	0x40020488
 80024b4:	400204a0 	.word	0x400204a0
 80024b8:	400204b8 	.word	0x400204b8
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2201      	movs	r2, #1
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024fa:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00c      	beq.n	800251e <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002512:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800251c:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002554:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_DMA_IRQHandler+0x1ac>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a67      	ldr	r2, [pc, #412]	; (80026f8 <HAL_DMA_IRQHandler+0x1b0>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a5f      	ldr	r2, [pc, #380]	; (80026fc <HAL_DMA_IRQHandler+0x1b4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d04a      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a5d      	ldr	r2, [pc, #372]	; (8002700 <HAL_DMA_IRQHandler+0x1b8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d045      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5c      	ldr	r2, [pc, #368]	; (8002704 <HAL_DMA_IRQHandler+0x1bc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d040      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5a      	ldr	r2, [pc, #360]	; (8002708 <HAL_DMA_IRQHandler+0x1c0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d03b      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a59      	ldr	r2, [pc, #356]	; (800270c <HAL_DMA_IRQHandler+0x1c4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d036      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a57      	ldr	r2, [pc, #348]	; (8002710 <HAL_DMA_IRQHandler+0x1c8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d031      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a56      	ldr	r2, [pc, #344]	; (8002714 <HAL_DMA_IRQHandler+0x1cc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d02c      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a54      	ldr	r2, [pc, #336]	; (8002718 <HAL_DMA_IRQHandler+0x1d0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d027      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a53      	ldr	r2, [pc, #332]	; (800271c <HAL_DMA_IRQHandler+0x1d4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a51      	ldr	r2, [pc, #324]	; (8002720 <HAL_DMA_IRQHandler+0x1d8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01d      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a50      	ldr	r2, [pc, #320]	; (8002724 <HAL_DMA_IRQHandler+0x1dc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d018      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a4e      	ldr	r2, [pc, #312]	; (8002728 <HAL_DMA_IRQHandler+0x1e0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a4d      	ldr	r2, [pc, #308]	; (800272c <HAL_DMA_IRQHandler+0x1e4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00e      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a4b      	ldr	r2, [pc, #300]	; (8002730 <HAL_DMA_IRQHandler+0x1e8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <HAL_DMA_IRQHandler+0x1ec>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d004      	beq.n	800261a <HAL_DMA_IRQHandler+0xd2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a48      	ldr	r2, [pc, #288]	; (8002738 <HAL_DMA_IRQHandler+0x1f0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_DMA_IRQHandler+0xd6>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_DMA_IRQHandler+0xd8>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 842b 	beq.w	8002e7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2208      	movs	r2, #8
 8002630:	409a      	lsls	r2, r3
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80a2 	beq.w	8002780 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2e      	ldr	r2, [pc, #184]	; (80026fc <HAL_DMA_IRQHandler+0x1b4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d04a      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2d      	ldr	r2, [pc, #180]	; (8002700 <HAL_DMA_IRQHandler+0x1b8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d045      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <HAL_DMA_IRQHandler+0x1bc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d040      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2a      	ldr	r2, [pc, #168]	; (8002708 <HAL_DMA_IRQHandler+0x1c0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d03b      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a28      	ldr	r2, [pc, #160]	; (800270c <HAL_DMA_IRQHandler+0x1c4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d036      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a27      	ldr	r2, [pc, #156]	; (8002710 <HAL_DMA_IRQHandler+0x1c8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d031      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a25      	ldr	r2, [pc, #148]	; (8002714 <HAL_DMA_IRQHandler+0x1cc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d02c      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a24      	ldr	r2, [pc, #144]	; (8002718 <HAL_DMA_IRQHandler+0x1d0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d027      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a22      	ldr	r2, [pc, #136]	; (800271c <HAL_DMA_IRQHandler+0x1d4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d022      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a21      	ldr	r2, [pc, #132]	; (8002720 <HAL_DMA_IRQHandler+0x1d8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d01d      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <HAL_DMA_IRQHandler+0x1dc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d018      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <HAL_DMA_IRQHandler+0x1e0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d013      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_DMA_IRQHandler+0x1e4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00e      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_DMA_IRQHandler+0x1e8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a19      	ldr	r2, [pc, #100]	; (8002734 <HAL_DMA_IRQHandler+0x1ec>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_DMA_IRQHandler+0x194>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a18      	ldr	r2, [pc, #96]	; (8002738 <HAL_DMA_IRQHandler+0x1f0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d12f      	bne.n	800273c <HAL_DMA_IRQHandler+0x1f4>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bf14      	ite	ne
 80026ea:	2301      	movne	r3, #1
 80026ec:	2300      	moveq	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e02e      	b.n	8002750 <HAL_DMA_IRQHandler+0x208>
 80026f2:	bf00      	nop
 80026f4:	24000000 	.word	0x24000000
 80026f8:	1b4e81b5 	.word	0x1b4e81b5
 80026fc:	40020010 	.word	0x40020010
 8002700:	40020028 	.word	0x40020028
 8002704:	40020040 	.word	0x40020040
 8002708:	40020058 	.word	0x40020058
 800270c:	40020070 	.word	0x40020070
 8002710:	40020088 	.word	0x40020088
 8002714:	400200a0 	.word	0x400200a0
 8002718:	400200b8 	.word	0x400200b8
 800271c:	40020410 	.word	0x40020410
 8002720:	40020428 	.word	0x40020428
 8002724:	40020440 	.word	0x40020440
 8002728:	40020458 	.word	0x40020458
 800272c:	40020470 	.word	0x40020470
 8002730:	40020488 	.word	0x40020488
 8002734:	400204a0 	.word	0x400204a0
 8002738:	400204b8 	.word	0x400204b8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf14      	ite	ne
 800274a:	2301      	movne	r3, #1
 800274c:	2300      	moveq	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0204 	bic.w	r2, r2, #4
 8002762:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2208      	movs	r2, #8
 800276e:	409a      	lsls	r2, r3
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d06e      	beq.n	8002874 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a69      	ldr	r2, [pc, #420]	; (8002940 <HAL_DMA_IRQHandler+0x3f8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d04a      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a67      	ldr	r2, [pc, #412]	; (8002944 <HAL_DMA_IRQHandler+0x3fc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d045      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a66      	ldr	r2, [pc, #408]	; (8002948 <HAL_DMA_IRQHandler+0x400>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d040      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a64      	ldr	r2, [pc, #400]	; (800294c <HAL_DMA_IRQHandler+0x404>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d03b      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a63      	ldr	r2, [pc, #396]	; (8002950 <HAL_DMA_IRQHandler+0x408>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d036      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a61      	ldr	r2, [pc, #388]	; (8002954 <HAL_DMA_IRQHandler+0x40c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d031      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a60      	ldr	r2, [pc, #384]	; (8002958 <HAL_DMA_IRQHandler+0x410>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d02c      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5e      	ldr	r2, [pc, #376]	; (800295c <HAL_DMA_IRQHandler+0x414>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d027      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <HAL_DMA_IRQHandler+0x418>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5b      	ldr	r2, [pc, #364]	; (8002964 <HAL_DMA_IRQHandler+0x41c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01d      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5a      	ldr	r2, [pc, #360]	; (8002968 <HAL_DMA_IRQHandler+0x420>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d018      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_DMA_IRQHandler+0x424>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_DMA_IRQHandler+0x428>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00e      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a55      	ldr	r2, [pc, #340]	; (8002974 <HAL_DMA_IRQHandler+0x42c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a54      	ldr	r2, [pc, #336]	; (8002978 <HAL_DMA_IRQHandler+0x430>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2ee>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_DMA_IRQHandler+0x434>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10a      	bne.n	800284c <HAL_DMA_IRQHandler+0x304>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e003      	b.n	8002854 <HAL_DMA_IRQHandler+0x30c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2300      	movs	r3, #0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2201      	movs	r2, #1
 8002862:	409a      	lsls	r2, r3
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2204      	movs	r2, #4
 800287e:	409a      	lsls	r2, r3
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 808f 	beq.w	80029a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2c      	ldr	r2, [pc, #176]	; (8002940 <HAL_DMA_IRQHandler+0x3f8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d04a      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <HAL_DMA_IRQHandler+0x3fc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d045      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a29      	ldr	r2, [pc, #164]	; (8002948 <HAL_DMA_IRQHandler+0x400>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d040      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_DMA_IRQHandler+0x404>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d03b      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a26      	ldr	r2, [pc, #152]	; (8002950 <HAL_DMA_IRQHandler+0x408>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d036      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_DMA_IRQHandler+0x40c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d031      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a23      	ldr	r2, [pc, #140]	; (8002958 <HAL_DMA_IRQHandler+0x410>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d02c      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a21      	ldr	r2, [pc, #132]	; (800295c <HAL_DMA_IRQHandler+0x414>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d027      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a20      	ldr	r2, [pc, #128]	; (8002960 <HAL_DMA_IRQHandler+0x418>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d022      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <HAL_DMA_IRQHandler+0x41c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d01d      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <HAL_DMA_IRQHandler+0x420>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d018      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_DMA_IRQHandler+0x424>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <HAL_DMA_IRQHandler+0x428>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00e      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_DMA_IRQHandler+0x42c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_DMA_IRQHandler+0x430>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_DMA_IRQHandler+0x3e2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a15      	ldr	r2, [pc, #84]	; (800297c <HAL_DMA_IRQHandler+0x434>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12a      	bne.n	8002980 <HAL_DMA_IRQHandler+0x438>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e023      	b.n	8002988 <HAL_DMA_IRQHandler+0x440>
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2204      	movs	r2, #4
 8002996:	409a      	lsls	r2, r3
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0204 	orr.w	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2210      	movs	r2, #16
 80029b2:	409a      	lsls	r2, r3
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a6 	beq.w	8002b0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a85      	ldr	r2, [pc, #532]	; (8002bd8 <HAL_DMA_IRQHandler+0x690>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d04a      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a83      	ldr	r2, [pc, #524]	; (8002bdc <HAL_DMA_IRQHandler+0x694>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d045      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a82      	ldr	r2, [pc, #520]	; (8002be0 <HAL_DMA_IRQHandler+0x698>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d040      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a80      	ldr	r2, [pc, #512]	; (8002be4 <HAL_DMA_IRQHandler+0x69c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d03b      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7f      	ldr	r2, [pc, #508]	; (8002be8 <HAL_DMA_IRQHandler+0x6a0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d036      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a7d      	ldr	r2, [pc, #500]	; (8002bec <HAL_DMA_IRQHandler+0x6a4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7c      	ldr	r2, [pc, #496]	; (8002bf0 <HAL_DMA_IRQHandler+0x6a8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d02c      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7a      	ldr	r2, [pc, #488]	; (8002bf4 <HAL_DMA_IRQHandler+0x6ac>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d027      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a79      	ldr	r2, [pc, #484]	; (8002bf8 <HAL_DMA_IRQHandler+0x6b0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a77      	ldr	r2, [pc, #476]	; (8002bfc <HAL_DMA_IRQHandler+0x6b4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a76      	ldr	r2, [pc, #472]	; (8002c00 <HAL_DMA_IRQHandler+0x6b8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a74      	ldr	r2, [pc, #464]	; (8002c04 <HAL_DMA_IRQHandler+0x6bc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a73      	ldr	r2, [pc, #460]	; (8002c08 <HAL_DMA_IRQHandler+0x6c0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a71      	ldr	r2, [pc, #452]	; (8002c0c <HAL_DMA_IRQHandler+0x6c4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a70      	ldr	r2, [pc, #448]	; (8002c10 <HAL_DMA_IRQHandler+0x6c8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x516>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6e      	ldr	r2, [pc, #440]	; (8002c14 <HAL_DMA_IRQHandler+0x6cc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10a      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x52c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	e009      	b.n	8002a88 <HAL_DMA_IRQHandler+0x540>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d03e      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2210      	movs	r2, #16
 8002a96:	409a      	lsls	r2, r3
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d018      	beq.n	8002adc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d108      	bne.n	8002aca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d024      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
 8002ac8:	e01f      	b.n	8002b0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01b      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
 8002ada:	e016      	b.n	8002b0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0208 	bic.w	r2, r2, #8
 8002af8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2220      	movs	r2, #32
 8002b14:	409a      	lsls	r2, r3
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8110 	beq.w	8002d40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <HAL_DMA_IRQHandler+0x690>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d04a      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2b      	ldr	r2, [pc, #172]	; (8002bdc <HAL_DMA_IRQHandler+0x694>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d045      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <HAL_DMA_IRQHandler+0x698>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d040      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a28      	ldr	r2, [pc, #160]	; (8002be4 <HAL_DMA_IRQHandler+0x69c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d03b      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_DMA_IRQHandler+0x6a0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d036      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a25      	ldr	r2, [pc, #148]	; (8002bec <HAL_DMA_IRQHandler+0x6a4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d031      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a23      	ldr	r2, [pc, #140]	; (8002bf0 <HAL_DMA_IRQHandler+0x6a8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d02c      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a22      	ldr	r2, [pc, #136]	; (8002bf4 <HAL_DMA_IRQHandler+0x6ac>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d027      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <HAL_DMA_IRQHandler+0x6b0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d022      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_DMA_IRQHandler+0x6b4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d01d      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <HAL_DMA_IRQHandler+0x6b8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d018      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_DMA_IRQHandler+0x6bc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_DMA_IRQHandler+0x6c0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00e      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <HAL_DMA_IRQHandler+0x6c4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_DMA_IRQHandler+0x6c8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x678>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <HAL_DMA_IRQHandler+0x6cc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d12b      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x6d0>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	e02a      	b.n	8002c2c <HAL_DMA_IRQHandler+0x6e4>
 8002bd6:	bf00      	nop
 8002bd8:	40020010 	.word	0x40020010
 8002bdc:	40020028 	.word	0x40020028
 8002be0:	40020040 	.word	0x40020040
 8002be4:	40020058 	.word	0x40020058
 8002be8:	40020070 	.word	0x40020070
 8002bec:	40020088 	.word	0x40020088
 8002bf0:	400200a0 	.word	0x400200a0
 8002bf4:	400200b8 	.word	0x400200b8
 8002bf8:	40020410 	.word	0x40020410
 8002bfc:	40020428 	.word	0x40020428
 8002c00:	40020440 	.word	0x40020440
 8002c04:	40020458 	.word	0x40020458
 8002c08:	40020470 	.word	0x40020470
 8002c0c:	40020488 	.word	0x40020488
 8002c10:	400204a0 	.word	0x400204a0
 8002c14:	400204b8 	.word	0x400204b8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8087 	beq.w	8002d40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d139      	bne.n	8002cc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0216 	bic.w	r2, r2, #22
 8002c5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x736>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0208 	bic.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	223f      	movs	r2, #63	; 0x3f
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 834a 	beq.w	800334c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
          }
          return;
 8002cc0:	e344      	b.n	800334c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d018      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d02c      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
 8002cee:	e027      	b.n	8002d40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d023      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
 8002d00:	e01e      	b.n	8002d40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10f      	bne.n	8002d30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0210 	bic.w	r2, r2, #16
 8002d1e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8306 	beq.w	8003356 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8088 	beq.w	8002e68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a7a      	ldr	r2, [pc, #488]	; (8002f50 <HAL_DMA_IRQHandler+0xa08>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d04a      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a79      	ldr	r2, [pc, #484]	; (8002f54 <HAL_DMA_IRQHandler+0xa0c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d045      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a77      	ldr	r2, [pc, #476]	; (8002f58 <HAL_DMA_IRQHandler+0xa10>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d040      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a76      	ldr	r2, [pc, #472]	; (8002f5c <HAL_DMA_IRQHandler+0xa14>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d03b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a74      	ldr	r2, [pc, #464]	; (8002f60 <HAL_DMA_IRQHandler+0xa18>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d036      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a73      	ldr	r2, [pc, #460]	; (8002f64 <HAL_DMA_IRQHandler+0xa1c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d031      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a71      	ldr	r2, [pc, #452]	; (8002f68 <HAL_DMA_IRQHandler+0xa20>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02c      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a70      	ldr	r2, [pc, #448]	; (8002f6c <HAL_DMA_IRQHandler+0xa24>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d027      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6e      	ldr	r2, [pc, #440]	; (8002f70 <HAL_DMA_IRQHandler+0xa28>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d022      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6d      	ldr	r2, [pc, #436]	; (8002f74 <HAL_DMA_IRQHandler+0xa2c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d01d      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6b      	ldr	r2, [pc, #428]	; (8002f78 <HAL_DMA_IRQHandler+0xa30>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d018      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <HAL_DMA_IRQHandler+0xa34>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a68      	ldr	r2, [pc, #416]	; (8002f80 <HAL_DMA_IRQHandler+0xa38>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00e      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_DMA_IRQHandler+0xa3c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a65      	ldr	r2, [pc, #404]	; (8002f88 <HAL_DMA_IRQHandler+0xa40>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d004      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x8b8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a64      	ldr	r2, [pc, #400]	; (8002f8c <HAL_DMA_IRQHandler+0xa44>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d108      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x8ca>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e007      	b.n	8002e22 <HAL_DMA_IRQHandler+0x8da>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3301      	adds	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d307      	bcc.n	8002e3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f2      	bne.n	8002e22 <HAL_DMA_IRQHandler+0x8da>
 8002e3c:	e000      	b.n	8002e40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e3e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2203      	movs	r2, #3
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e5e:	e003      	b.n	8002e68 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8272 	beq.w	8003356 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
 8002e7a:	e26c      	b.n	8003356 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a43      	ldr	r2, [pc, #268]	; (8002f90 <HAL_DMA_IRQHandler+0xa48>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d022      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x984>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a42      	ldr	r2, [pc, #264]	; (8002f94 <HAL_DMA_IRQHandler+0xa4c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01d      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x984>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a40      	ldr	r2, [pc, #256]	; (8002f98 <HAL_DMA_IRQHandler+0xa50>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d018      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x984>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3f      	ldr	r2, [pc, #252]	; (8002f9c <HAL_DMA_IRQHandler+0xa54>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x984>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <HAL_DMA_IRQHandler+0xa58>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x984>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <HAL_DMA_IRQHandler+0xa5c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x984>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3a      	ldr	r2, [pc, #232]	; (8002fa8 <HAL_DMA_IRQHandler+0xa60>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x984>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a39      	ldr	r2, [pc, #228]	; (8002fac <HAL_DMA_IRQHandler+0xa64>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x988>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x98a>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 823f 	beq.w	8003356 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2204      	movs	r2, #4
 8002eea:	409a      	lsls	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80cd 	beq.w	8003090 <HAL_DMA_IRQHandler+0xb48>
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80c7 	beq.w	8003090 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d049      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8210 	beq.w	8003350 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f38:	e20a      	b.n	8003350 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8206 	beq.w	8003350 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f4c:	e200      	b.n	8003350 <HAL_DMA_IRQHandler+0xe08>
 8002f4e:	bf00      	nop
 8002f50:	40020010 	.word	0x40020010
 8002f54:	40020028 	.word	0x40020028
 8002f58:	40020040 	.word	0x40020040
 8002f5c:	40020058 	.word	0x40020058
 8002f60:	40020070 	.word	0x40020070
 8002f64:	40020088 	.word	0x40020088
 8002f68:	400200a0 	.word	0x400200a0
 8002f6c:	400200b8 	.word	0x400200b8
 8002f70:	40020410 	.word	0x40020410
 8002f74:	40020428 	.word	0x40020428
 8002f78:	40020440 	.word	0x40020440
 8002f7c:	40020458 	.word	0x40020458
 8002f80:	40020470 	.word	0x40020470
 8002f84:	40020488 	.word	0x40020488
 8002f88:	400204a0 	.word	0x400204a0
 8002f8c:	400204b8 	.word	0x400204b8
 8002f90:	58025408 	.word	0x58025408
 8002f94:	5802541c 	.word	0x5802541c
 8002f98:	58025430 	.word	0x58025430
 8002f9c:	58025444 	.word	0x58025444
 8002fa0:	58025458 	.word	0x58025458
 8002fa4:	5802546c 	.word	0x5802546c
 8002fa8:	58025480 	.word	0x58025480
 8002fac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d160      	bne.n	800307c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a8c      	ldr	r2, [pc, #560]	; (80031f0 <HAL_DMA_IRQHandler+0xca8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d04a      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a8a      	ldr	r2, [pc, #552]	; (80031f4 <HAL_DMA_IRQHandler+0xcac>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d045      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a89      	ldr	r2, [pc, #548]	; (80031f8 <HAL_DMA_IRQHandler+0xcb0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d040      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a87      	ldr	r2, [pc, #540]	; (80031fc <HAL_DMA_IRQHandler+0xcb4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d03b      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a86      	ldr	r2, [pc, #536]	; (8003200 <HAL_DMA_IRQHandler+0xcb8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d036      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a84      	ldr	r2, [pc, #528]	; (8003204 <HAL_DMA_IRQHandler+0xcbc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d031      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a83      	ldr	r2, [pc, #524]	; (8003208 <HAL_DMA_IRQHandler+0xcc0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d02c      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a81      	ldr	r2, [pc, #516]	; (800320c <HAL_DMA_IRQHandler+0xcc4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d027      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a80      	ldr	r2, [pc, #512]	; (8003210 <HAL_DMA_IRQHandler+0xcc8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d022      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a7e      	ldr	r2, [pc, #504]	; (8003214 <HAL_DMA_IRQHandler+0xccc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01d      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7d      	ldr	r2, [pc, #500]	; (8003218 <HAL_DMA_IRQHandler+0xcd0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d018      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a7b      	ldr	r2, [pc, #492]	; (800321c <HAL_DMA_IRQHandler+0xcd4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a7a      	ldr	r2, [pc, #488]	; (8003220 <HAL_DMA_IRQHandler+0xcd8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00e      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a78      	ldr	r2, [pc, #480]	; (8003224 <HAL_DMA_IRQHandler+0xcdc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a77      	ldr	r2, [pc, #476]	; (8003228 <HAL_DMA_IRQHandler+0xce0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_DMA_IRQHandler+0xb12>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a75      	ldr	r2, [pc, #468]	; (800322c <HAL_DMA_IRQHandler+0xce4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d108      	bne.n	800306c <HAL_DMA_IRQHandler+0xb24>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0208 	bic.w	r2, r2, #8
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e007      	b.n	800307c <HAL_DMA_IRQHandler+0xb34>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8165 	beq.w	8003350 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800308e:	e15f      	b.n	8003350 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2202      	movs	r2, #2
 800309a:	409a      	lsls	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80c5 	beq.w	8003230 <HAL_DMA_IRQHandler+0xce8>
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80bf 	beq.w	8003230 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2202      	movs	r2, #2
 80030bc:	409a      	lsls	r2, r3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d018      	beq.n	80030fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 813a 	beq.w	8003354 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030e8:	e134      	b.n	8003354 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8130 	beq.w	8003354 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030fc:	e12a      	b.n	8003354 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d168      	bne.n	80031da <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a38      	ldr	r2, [pc, #224]	; (80031f0 <HAL_DMA_IRQHandler+0xca8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d04a      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a37      	ldr	r2, [pc, #220]	; (80031f4 <HAL_DMA_IRQHandler+0xcac>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d045      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <HAL_DMA_IRQHandler+0xcb0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d040      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a34      	ldr	r2, [pc, #208]	; (80031fc <HAL_DMA_IRQHandler+0xcb4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d03b      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a32      	ldr	r2, [pc, #200]	; (8003200 <HAL_DMA_IRQHandler+0xcb8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d036      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a31      	ldr	r2, [pc, #196]	; (8003204 <HAL_DMA_IRQHandler+0xcbc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d031      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <HAL_DMA_IRQHandler+0xcc0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02c      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2e      	ldr	r2, [pc, #184]	; (800320c <HAL_DMA_IRQHandler+0xcc4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d027      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2c      	ldr	r2, [pc, #176]	; (8003210 <HAL_DMA_IRQHandler+0xcc8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d022      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2b      	ldr	r2, [pc, #172]	; (8003214 <HAL_DMA_IRQHandler+0xccc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d01d      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a29      	ldr	r2, [pc, #164]	; (8003218 <HAL_DMA_IRQHandler+0xcd0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d018      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a28      	ldr	r2, [pc, #160]	; (800321c <HAL_DMA_IRQHandler+0xcd4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a26      	ldr	r2, [pc, #152]	; (8003220 <HAL_DMA_IRQHandler+0xcd8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a25      	ldr	r2, [pc, #148]	; (8003224 <HAL_DMA_IRQHandler+0xcdc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a23      	ldr	r2, [pc, #140]	; (8003228 <HAL_DMA_IRQHandler+0xce0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xc60>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a22      	ldr	r2, [pc, #136]	; (800322c <HAL_DMA_IRQHandler+0xce4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d108      	bne.n	80031ba <HAL_DMA_IRQHandler+0xc72>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0214 	bic.w	r2, r2, #20
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e007      	b.n	80031ca <HAL_DMA_IRQHandler+0xc82>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 020a 	bic.w	r2, r2, #10
 80031c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80b8 	beq.w	8003354 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031ec:	e0b2      	b.n	8003354 <HAL_DMA_IRQHandler+0xe0c>
 80031ee:	bf00      	nop
 80031f0:	40020010 	.word	0x40020010
 80031f4:	40020028 	.word	0x40020028
 80031f8:	40020040 	.word	0x40020040
 80031fc:	40020058 	.word	0x40020058
 8003200:	40020070 	.word	0x40020070
 8003204:	40020088 	.word	0x40020088
 8003208:	400200a0 	.word	0x400200a0
 800320c:	400200b8 	.word	0x400200b8
 8003210:	40020410 	.word	0x40020410
 8003214:	40020428 	.word	0x40020428
 8003218:	40020440 	.word	0x40020440
 800321c:	40020458 	.word	0x40020458
 8003220:	40020470 	.word	0x40020470
 8003224:	40020488 	.word	0x40020488
 8003228:	400204a0 	.word	0x400204a0
 800322c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2208      	movs	r2, #8
 800323a:	409a      	lsls	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8088 	beq.w	8003356 <HAL_DMA_IRQHandler+0xe0e>
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8082 	beq.w	8003356 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a41      	ldr	r2, [pc, #260]	; (800335c <HAL_DMA_IRQHandler+0xe14>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d04a      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3f      	ldr	r2, [pc, #252]	; (8003360 <HAL_DMA_IRQHandler+0xe18>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d045      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3e      	ldr	r2, [pc, #248]	; (8003364 <HAL_DMA_IRQHandler+0xe1c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d040      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3c      	ldr	r2, [pc, #240]	; (8003368 <HAL_DMA_IRQHandler+0xe20>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d03b      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a3b      	ldr	r2, [pc, #236]	; (800336c <HAL_DMA_IRQHandler+0xe24>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d036      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a39      	ldr	r2, [pc, #228]	; (8003370 <HAL_DMA_IRQHandler+0xe28>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d031      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a38      	ldr	r2, [pc, #224]	; (8003374 <HAL_DMA_IRQHandler+0xe2c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d02c      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a36      	ldr	r2, [pc, #216]	; (8003378 <HAL_DMA_IRQHandler+0xe30>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d027      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a35      	ldr	r2, [pc, #212]	; (800337c <HAL_DMA_IRQHandler+0xe34>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d022      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a33      	ldr	r2, [pc, #204]	; (8003380 <HAL_DMA_IRQHandler+0xe38>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01d      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a32      	ldr	r2, [pc, #200]	; (8003384 <HAL_DMA_IRQHandler+0xe3c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d018      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a30      	ldr	r2, [pc, #192]	; (8003388 <HAL_DMA_IRQHandler+0xe40>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2f      	ldr	r2, [pc, #188]	; (800338c <HAL_DMA_IRQHandler+0xe44>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <HAL_DMA_IRQHandler+0xe48>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <HAL_DMA_IRQHandler+0xe4c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xdaa>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <HAL_DMA_IRQHandler+0xe50>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <HAL_DMA_IRQHandler+0xdbc>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 021c 	bic.w	r2, r2, #28
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e007      	b.n	8003314 <HAL_DMA_IRQHandler+0xdcc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 020e 	bic.w	r2, r2, #14
 8003312:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2201      	movs	r2, #1
 800331e:	409a      	lsls	r2, r3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
 800334a:	e004      	b.n	8003356 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800334c:	bf00      	nop
 800334e:	e002      	b.n	8003356 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003350:	bf00      	nop
 8003352:	e000      	b.n	8003356 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003354:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40020010 	.word	0x40020010
 8003360:	40020028 	.word	0x40020028
 8003364:	40020040 	.word	0x40020040
 8003368:	40020058 	.word	0x40020058
 800336c:	40020070 	.word	0x40020070
 8003370:	40020088 	.word	0x40020088
 8003374:	400200a0 	.word	0x400200a0
 8003378:	400200b8 	.word	0x400200b8
 800337c:	40020410 	.word	0x40020410
 8003380:	40020428 	.word	0x40020428
 8003384:	40020440 	.word	0x40020440
 8003388:	40020458 	.word	0x40020458
 800338c:	40020470 	.word	0x40020470
 8003390:	40020488 	.word	0x40020488
 8003394:	400204a0 	.word	0x400204a0
 8003398:	400204b8 	.word	0x400204b8

0800339c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a42      	ldr	r2, [pc, #264]	; (80034b4 <DMA_CalcBaseAndBitshift+0x118>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d04a      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a41      	ldr	r2, [pc, #260]	; (80034b8 <DMA_CalcBaseAndBitshift+0x11c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d045      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a3f      	ldr	r2, [pc, #252]	; (80034bc <DMA_CalcBaseAndBitshift+0x120>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d040      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3e      	ldr	r2, [pc, #248]	; (80034c0 <DMA_CalcBaseAndBitshift+0x124>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d03b      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <DMA_CalcBaseAndBitshift+0x128>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d036      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <DMA_CalcBaseAndBitshift+0x12c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d031      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a39      	ldr	r2, [pc, #228]	; (80034cc <DMA_CalcBaseAndBitshift+0x130>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02c      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a38      	ldr	r2, [pc, #224]	; (80034d0 <DMA_CalcBaseAndBitshift+0x134>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d027      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <DMA_CalcBaseAndBitshift+0x138>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d022      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a35      	ldr	r2, [pc, #212]	; (80034d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d01d      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a33      	ldr	r2, [pc, #204]	; (80034dc <DMA_CalcBaseAndBitshift+0x140>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d018      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a32      	ldr	r2, [pc, #200]	; (80034e0 <DMA_CalcBaseAndBitshift+0x144>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d013      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <DMA_CalcBaseAndBitshift+0x148>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00e      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a2f      	ldr	r2, [pc, #188]	; (80034e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d009      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <DMA_CalcBaseAndBitshift+0x150>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d004      	beq.n	8003444 <DMA_CalcBaseAndBitshift+0xa8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2c      	ldr	r2, [pc, #176]	; (80034f0 <DMA_CalcBaseAndBitshift+0x154>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <DMA_CalcBaseAndBitshift+0xac>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <DMA_CalcBaseAndBitshift+0xae>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d024      	beq.n	8003498 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	3b10      	subs	r3, #16
 8003456:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <DMA_CalcBaseAndBitshift+0x158>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003468:	5cd3      	ldrb	r3, [r2, r3]
 800346a:	461a      	mov	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d908      	bls.n	8003488 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <DMA_CalcBaseAndBitshift+0x160>)
 800347e:	4013      	ands	r3, r2
 8003480:	1d1a      	adds	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	659a      	str	r2, [r3, #88]	; 0x58
 8003486:	e00d      	b.n	80034a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <DMA_CalcBaseAndBitshift+0x160>)
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
 8003496:	e005      	b.n	80034a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40020010 	.word	0x40020010
 80034b8:	40020028 	.word	0x40020028
 80034bc:	40020040 	.word	0x40020040
 80034c0:	40020058 	.word	0x40020058
 80034c4:	40020070 	.word	0x40020070
 80034c8:	40020088 	.word	0x40020088
 80034cc:	400200a0 	.word	0x400200a0
 80034d0:	400200b8 	.word	0x400200b8
 80034d4:	40020410 	.word	0x40020410
 80034d8:	40020428 	.word	0x40020428
 80034dc:	40020440 	.word	0x40020440
 80034e0:	40020458 	.word	0x40020458
 80034e4:	40020470 	.word	0x40020470
 80034e8:	40020488 	.word	0x40020488
 80034ec:	400204a0 	.word	0x400204a0
 80034f0:	400204b8 	.word	0x400204b8
 80034f4:	aaaaaaab 	.word	0xaaaaaaab
 80034f8:	0800c8d8 	.word	0x0800c8d8
 80034fc:	fffffc00 	.word	0xfffffc00

08003500 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d120      	bne.n	8003556 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	2b03      	cmp	r3, #3
 800351a:	d858      	bhi.n	80035ce <DMA_CheckFifoParam+0xce>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <DMA_CheckFifoParam+0x24>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003535 	.word	0x08003535
 8003528:	08003547 	.word	0x08003547
 800352c:	08003535 	.word	0x08003535
 8003530:	080035cf 	.word	0x080035cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d048      	beq.n	80035d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003544:	e045      	b.n	80035d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800354e:	d142      	bne.n	80035d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003554:	e03f      	b.n	80035d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355e:	d123      	bne.n	80035a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	2b03      	cmp	r3, #3
 8003566:	d838      	bhi.n	80035da <DMA_CheckFifoParam+0xda>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <DMA_CheckFifoParam+0x70>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003581 	.word	0x08003581
 8003574:	08003587 	.word	0x08003587
 8003578:	08003581 	.word	0x08003581
 800357c:	08003599 	.word	0x08003599
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
        break;
 8003584:	e030      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d025      	beq.n	80035de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003596:	e022      	b.n	80035de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a0:	d11f      	bne.n	80035e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035a6:	e01c      	b.n	80035e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d902      	bls.n	80035b6 <DMA_CheckFifoParam+0xb6>
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d003      	beq.n	80035bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80035b4:	e018      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
        break;
 80035ba:	e015      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
    break;
 80035cc:	e00b      	b.n	80035e6 <DMA_CheckFifoParam+0xe6>
        break;
 80035ce:	bf00      	nop
 80035d0:	e00a      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
        break;
 80035d2:	bf00      	nop
 80035d4:	e008      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
        break;
 80035d6:	bf00      	nop
 80035d8:	e006      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
        break;
 80035da:	bf00      	nop
 80035dc:	e004      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
        break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
        break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
    break;
 80035e6:	bf00      	nop
    }
  }

  return status;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop

080035f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a38      	ldr	r2, [pc, #224]	; (80036ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a36      	ldr	r2, [pc, #216]	; (80036f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01d      	beq.n	8003656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a35      	ldr	r2, [pc, #212]	; (80036f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a33      	ldr	r2, [pc, #204]	; (80036f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a32      	ldr	r2, [pc, #200]	; (80036fc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a30      	ldr	r2, [pc, #192]	; (8003700 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01a      	beq.n	8003696 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3b08      	subs	r3, #8
 8003668:	4a28      	ldr	r2, [pc, #160]	; (800370c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a24      	ldr	r2, [pc, #144]	; (8003714 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003684:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2201      	movs	r2, #1
 800368e:	409a      	lsls	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003694:	e024      	b.n	80036e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	3b10      	subs	r3, #16
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4a1c      	ldr	r2, [pc, #112]	; (800371c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d806      	bhi.n	80036be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d902      	bls.n	80036be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3308      	adds	r3, #8
 80036bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a16      	ldr	r2, [pc, #88]	; (8003728 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80036d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	58025408 	.word	0x58025408
 80036f0:	5802541c 	.word	0x5802541c
 80036f4:	58025430 	.word	0x58025430
 80036f8:	58025444 	.word	0x58025444
 80036fc:	58025458 	.word	0x58025458
 8003700:	5802546c 	.word	0x5802546c
 8003704:	58025480 	.word	0x58025480
 8003708:	58025494 	.word	0x58025494
 800370c:	cccccccd 	.word	0xcccccccd
 8003710:	16009600 	.word	0x16009600
 8003714:	58025880 	.word	0x58025880
 8003718:	aaaaaaab 	.word	0xaaaaaaab
 800371c:	400204b8 	.word	0x400204b8
 8003720:	4002040f 	.word	0x4002040f
 8003724:	10008200 	.word	0x10008200
 8003728:	40020880 	.word	0x40020880

0800372c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04a      	beq.n	80037d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d847      	bhi.n	80037d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d022      	beq.n	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d01d      	beq.n	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d018      	beq.n	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d013      	beq.n	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00e      	beq.n	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	461a      	mov	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a15      	ldr	r2, [pc, #84]	; (8003808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80037b4:	671a      	str	r2, [r3, #112]	; 0x70
 80037b6:	e009      	b.n	80037cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	461a      	mov	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a11      	ldr	r2, [pc, #68]	; (8003810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80037ca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	58025408 	.word	0x58025408
 80037e8:	5802541c 	.word	0x5802541c
 80037ec:	58025430 	.word	0x58025430
 80037f0:	58025444 	.word	0x58025444
 80037f4:	58025458 	.word	0x58025458
 80037f8:	5802546c 	.word	0x5802546c
 80037fc:	58025480 	.word	0x58025480
 8003800:	58025494 	.word	0x58025494
 8003804:	1600963f 	.word	0x1600963f
 8003808:	58025940 	.word	0x58025940
 800380c:	1000823f 	.word	0x1000823f
 8003810:	40020940 	.word	0x40020940

08003814 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_EXTI_SetConfigLine+0x16>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1c6      	b.n	8003bbc <HAL_EXTI_SetConfigLine+0x3a8>
  }

  /* Check the parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b9e      	ldr	r3, [pc, #632]	; (8003aac <HAL_EXTI_SetConfigLine+0x298>)
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d129      	bne.n	800388e <HAL_EXTI_SetConfigLine+0x7a>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003842:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003846:	d00d      	beq.n	8003864 <HAL_EXTI_SetConfigLine+0x50>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003854:	d006      	beq.n	8003864 <HAL_EXTI_SetConfigLine+0x50>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800385e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003862:	d114      	bne.n	800388e <HAL_EXTI_SetConfigLine+0x7a>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800386c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003870:	d006      	beq.n	8003880 <HAL_EXTI_SetConfigLine+0x6c>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800387a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800387e:	d106      	bne.n	800388e <HAL_EXTI_SetConfigLine+0x7a>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b8a      	ldr	r3, [pc, #552]	; (8003ab0 <HAL_EXTI_SetConfigLine+0x29c>)
 8003886:	4013      	ands	r3, r2
 8003888:	4a8a      	ldr	r2, [pc, #552]	; (8003ab4 <HAL_EXTI_SetConfigLine+0x2a0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d903      	bls.n	8003896 <HAL_EXTI_SetConfigLine+0x82>
 800388e:	21bb      	movs	r1, #187	; 0xbb
 8003890:	4889      	ldr	r0, [pc, #548]	; (8003ab8 <HAL_EXTI_SetConfigLine+0x2a4>)
 8003892:	f7fd fac4 	bl	8000e1e <assert_failed>
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_EXTI_SetConfigLine+0x96>
 80038a2:	21bc      	movs	r1, #188	; 0xbc
 80038a4:	4884      	ldr	r0, [pc, #528]	; (8003ab8 <HAL_EXTI_SetConfigLine+0x2a4>)
 80038a6:	f7fd faba 	bl	8000e1e <assert_failed>

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	613b      	str	r3, [r7, #16]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	60fb      	str	r3, [r7, #12]
  maskline = (1UL << linepos);
 80038c8:	2201      	movs	r2, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	60bb      	str	r3, [r7, #8]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80a6 	beq.w	8003a2c <HAL_EXTI_SetConfigLine+0x218>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 0303 	bic.w	r3, r3, #3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_EXTI_SetConfigLine+0xe0>
 80038ec:	21c9      	movs	r1, #201	; 0xc9
 80038ee:	4872      	ldr	r0, [pc, #456]	; (8003ab8 <HAL_EXTI_SetConfigLine+0x2a4>)
 80038f0:	f7fd fa95 	bl	8000e1e <assert_failed>

    /* Configure rising trigger */
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015b      	lsls	r3, r3, #5
 80038f8:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80038fc:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_EXTI_SetConfigLine+0x106>
    {
      regval |= maskline;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	e004      	b.n	8003924 <HAL_EXTI_SetConfigLine+0x110>
    }
    else
    {
      regval &= ~maskline;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	4b63      	ldr	r3, [pc, #396]	; (8003abc <HAL_EXTI_SetConfigLine+0x2a8>)
 8003930:	4413      	add	r3, r2
 8003932:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d004      	beq.n	8003950 <HAL_EXTI_SetConfigLine+0x13c>
    {
      regval |= maskline;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	e004      	b.n	800395a <HAL_EXTI_SetConfigLine+0x146>
    }
    else
    {
      regval &= ~maskline;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003968:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800396c:	d15e      	bne.n	8003a2c <HAL_EXTI_SetConfigLine+0x218>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d02b      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d027      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d023      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d01f      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d01b      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b05      	cmp	r3, #5
 800399c:	d017      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d013      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b07      	cmp	r3, #7
 80039ac:	d00f      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d00b      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d007      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b0a      	cmp	r3, #10
 80039c4:	d003      	beq.n	80039ce <HAL_EXTI_SetConfigLine+0x1ba>
 80039c6:	21f0      	movs	r1, #240	; 0xf0
 80039c8:	483b      	ldr	r0, [pc, #236]	; (8003ab8 <HAL_EXTI_SetConfigLine+0x2a4>)
 80039ca:	f7fd fa28 	bl	8000e1e <assert_failed>
      assert_param(IS_EXTI_GPIO_PIN(linepos));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b0f      	cmp	r3, #15
 80039d2:	d903      	bls.n	80039dc <HAL_EXTI_SetConfigLine+0x1c8>
 80039d4:	21f1      	movs	r1, #241	; 0xf1
 80039d6:	4838      	ldr	r0, [pc, #224]	; (8003ab8 <HAL_EXTI_SetConfigLine+0x2a4>)
 80039d8:	f7fd fa21 	bl	8000e1e <assert_failed>

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
 80039dc:	4a38      	ldr	r2, [pc, #224]	; (8003ac0 <HAL_EXTI_SetConfigLine+0x2ac>)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	3302      	adds	r3, #2
 80039e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ec:	61bb      	str	r3, [r7, #24]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	220f      	movs	r2, #15
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
 8003a1a:	4929      	ldr	r1, [pc, #164]	; (8003ac0 <HAL_EXTI_SetConfigLine+0x2ac>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	3302      	adds	r3, #2
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	011a      	lsls	r2, r3, #4
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_EXTI_SetConfigLine+0x2b0>)
 8003a32:	4413      	add	r3, r2
 8003a34:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_EXTI_SetConfigLine+0x23e>
  {
    regval |= maskline;
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e004      	b.n	8003a5c <HAL_EXTI_SetConfigLine+0x248>
  }
  else
  {
    regval &= ~maskline;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	601a      	str	r2, [r3, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <HAL_EXTI_SetConfigLine+0x270>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_EXTI_SetConfigLine+0x270>
 8003a7a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8003a7e:	480e      	ldr	r0, [pc, #56]	; (8003ab8 <HAL_EXTI_SetConfigLine+0x2a4>)
 8003a80:	f7fd f9cd 	bl	8000e1e <assert_failed>

  /* Configure event mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	011a      	lsls	r2, r3, #4
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_EXTI_SetConfigLine+0x2b4>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d015      	beq.n	8003acc <HAL_EXTI_SetConfigLine+0x2b8>
  {
    regval |= maskline;
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	e015      	b.n	8003ad6 <HAL_EXTI_SetConfigLine+0x2c2>
 8003aaa:	bf00      	nop
 8003aac:	e8ccffe0 	.word	0xe8ccffe0
 8003ab0:	0003001f 	.word	0x0003001f
 8003ab4:	00020017 	.word	0x00020017
 8003ab8:	0800c644 	.word	0x0800c644
 8003abc:	58000004 	.word	0x58000004
 8003ac0:	58000400 	.word	0x58000400
 8003ac4:	58000080 	.word	0x58000080
 8003ac8:	58000084 	.word	0x58000084
  }
  else
  {
    regval &= ~maskline;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
  }

  /* Store event mode */
  *regaddr = regval;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	601a      	str	r2, [r3, #0]
  /* Store event mode */
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* Configure the D3 PendClear source in case of Wakeup target is Any */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ae4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae8:	d167      	bne.n	8003bba <HAL_EXTI_SetConfigLine+0x3a6>
  {
    assert_param(IS_EXTI_D3_PENDCLR_SRC(pExtiConfig->PendClearSource));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d014      	beq.n	8003b1c <HAL_EXTI_SetConfigLine+0x308>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d010      	beq.n	8003b1c <HAL_EXTI_SetConfigLine+0x308>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d00c      	beq.n	8003b1c <HAL_EXTI_SetConfigLine+0x308>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d008      	beq.n	8003b1c <HAL_EXTI_SetConfigLine+0x308>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d004      	beq.n	8003b1c <HAL_EXTI_SetConfigLine+0x308>
 8003b12:	f240 1149 	movw	r1, #329	; 0x149
 8003b16:	482b      	ldr	r0, [pc, #172]	; (8003bc4 <HAL_EXTI_SetConfigLine+0x3b0>)
 8003b18:	f7fd f981 	bl	8000e1e <assert_failed>

    /*Calc the PMR register address for the given line */
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_EXTI_SetConfigLine+0x3b4>)
 8003b22:	4413      	add	r3, r2
 8003b24:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61bb      	str	r3, [r7, #24]

    if(pExtiConfig->PendClearSource == EXTI_D3_PENDCLR_SRC_NONE)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d108      	bne.n	8003b46 <HAL_EXTI_SetConfigLine+0x332>
    {
      /* Clear D3PMRx register for the given line */
      regval &= ~maskline;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e039      	b.n	8003bba <HAL_EXTI_SetConfigLine+0x3a6>
    }
    else
    {
      /* Set D3PMRx register to 1 for the given line */
      regval |= maskline;
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	601a      	str	r2, [r3, #0]

      if(linepos < 16UL)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d80a      	bhi.n	8003b70 <HAL_EXTI_SetConfigLine+0x35c>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_EXTI_SetConfigLine+0x3b8>)
 8003b60:	4413      	add	r3, r2
 8003b62:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
 8003b64:	2201      	movs	r2, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e00a      	b.n	8003b86 <HAL_EXTI_SetConfigLine+0x372>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <HAL_EXTI_SetConfigLine+0x3bc>)
 8003b76:	4413      	add	r3, r2
 8003b78:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3b10      	subs	r3, #16
 8003b7e:	2201      	movs	r2, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
      }

      regval = (*regaddr & (~(pcrlinepos * pcrlinepos * 3UL))) | (pcrlinepos * pcrlinepos * (pExtiConfig->PendClearSource - 1UL));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	fb02 f203 	mul.w	r2, r2, r3
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	ea01 0203 	and.w	r2, r1, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	6909      	ldr	r1, [r1, #16]
 8003baa:	3901      	subs	r1, #1
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
      *regaddr = regval;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	0800c644 	.word	0x0800c644
 8003bc8:	5800000c 	.word	0x5800000c
 8003bcc:	58000010 	.word	0x58000010
 8003bd0:	58000014 	.word	0x58000014

08003bd4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e00a      	b.n	8003c06 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]
      break;
 8003bfc:	e002      	b.n	8003c04 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
      break;
 8003c02:	bf00      	nop
  }

  return status;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_GPIO_Init+0x12c>)
 8003c24:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a46      	ldr	r2, [pc, #280]	; (8003d44 <HAL_GPIO_Init+0x130>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02b      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a45      	ldr	r2, [pc, #276]	; (8003d48 <HAL_GPIO_Init+0x134>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d027      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a44      	ldr	r2, [pc, #272]	; (8003d4c <HAL_GPIO_Init+0x138>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d023      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a43      	ldr	r2, [pc, #268]	; (8003d50 <HAL_GPIO_Init+0x13c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01f      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a42      	ldr	r2, [pc, #264]	; (8003d54 <HAL_GPIO_Init+0x140>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01b      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_GPIO_Init+0x144>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d017      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <HAL_GPIO_Init+0x148>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a3f      	ldr	r2, [pc, #252]	; (8003d60 <HAL_GPIO_Init+0x14c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a3e      	ldr	r2, [pc, #248]	; (8003d64 <HAL_GPIO_Init+0x150>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a3d      	ldr	r2, [pc, #244]	; (8003d68 <HAL_GPIO_Init+0x154>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a3c      	ldr	r2, [pc, #240]	; (8003d6c <HAL_GPIO_Init+0x158>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x72>
 8003c7e:	21bb      	movs	r1, #187	; 0xbb
 8003c80:	483b      	ldr	r0, [pc, #236]	; (8003d70 <HAL_GPIO_Init+0x15c>)
 8003c82:	f7fd f8cc 	bl	8000e1e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_GPIO_Init+0x88>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <HAL_GPIO_Init+0x160>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x90>
 8003c9c:	21bc      	movs	r1, #188	; 0xbc
 8003c9e:	4834      	ldr	r0, [pc, #208]	; (8003d70 <HAL_GPIO_Init+0x15c>)
 8003ca0:	f7fd f8bd 	bl	8000e1e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d035      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d031      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b11      	cmp	r3, #17
 8003cba:	d02d      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d029      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b12      	cmp	r3, #18
 8003cca:	d025      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <HAL_GPIO_Init+0x164>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d020      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a28      	ldr	r2, [pc, #160]	; (8003d7c <HAL_GPIO_Init+0x168>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d01b      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_GPIO_Init+0x16c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d016      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <HAL_GPIO_Init+0x170>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d011      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <HAL_GPIO_Init+0x174>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00c      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <HAL_GPIO_Init+0x178>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x104>
 8003d10:	21bd      	movs	r1, #189	; 0xbd
 8003d12:	4817      	ldr	r0, [pc, #92]	; (8003d70 <HAL_GPIO_Init+0x15c>)
 8003d14:	f7fd f883 	bl	8000e1e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 821a 	beq.w	8004156 <HAL_GPIO_Init+0x542>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	f000 8215 	beq.w	8004156 <HAL_GPIO_Init+0x542>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	f000 8210 	beq.w	8004156 <HAL_GPIO_Init+0x542>
 8003d36:	21be      	movs	r1, #190	; 0xbe
 8003d38:	480d      	ldr	r0, [pc, #52]	; (8003d70 <HAL_GPIO_Init+0x15c>)
 8003d3a:	f7fd f870 	bl	8000e1e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d3e:	e20a      	b.n	8004156 <HAL_GPIO_Init+0x542>
 8003d40:	58000080 	.word	0x58000080
 8003d44:	58020000 	.word	0x58020000
 8003d48:	58020400 	.word	0x58020400
 8003d4c:	58020800 	.word	0x58020800
 8003d50:	58020c00 	.word	0x58020c00
 8003d54:	58021000 	.word	0x58021000
 8003d58:	58021400 	.word	0x58021400
 8003d5c:	58021800 	.word	0x58021800
 8003d60:	58021c00 	.word	0x58021c00
 8003d64:	58022000 	.word	0x58022000
 8003d68:	58022400 	.word	0x58022400
 8003d6c:	58022800 	.word	0x58022800
 8003d70:	0800c680 	.word	0x0800c680
 8003d74:	ffff0000 	.word	0xffff0000
 8003d78:	11110000 	.word	0x11110000
 8003d7c:	11210000 	.word	0x11210000
 8003d80:	11310000 	.word	0x11310000
 8003d84:	11120000 	.word	0x11120000
 8003d88:	11220000 	.word	0x11220000
 8003d8c:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2101      	movs	r1, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 81d4 	beq.w	8004150 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x1a4>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b12      	cmp	r3, #18
 8003db6:	d15b      	bne.n	8003e70 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4aa2      	ldr	r2, [pc, #648]	; (8004044 <HAL_GPIO_Init+0x430>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02b      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4aa1      	ldr	r2, [pc, #644]	; (8004048 <HAL_GPIO_Init+0x434>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d027      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4aa0      	ldr	r2, [pc, #640]	; (800404c <HAL_GPIO_Init+0x438>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d023      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a9f      	ldr	r2, [pc, #636]	; (8004050 <HAL_GPIO_Init+0x43c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01f      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a9e      	ldr	r2, [pc, #632]	; (8004054 <HAL_GPIO_Init+0x440>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d01b      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a9d      	ldr	r2, [pc, #628]	; (8004058 <HAL_GPIO_Init+0x444>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d017      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a9c      	ldr	r2, [pc, #624]	; (800405c <HAL_GPIO_Init+0x448>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a9b      	ldr	r2, [pc, #620]	; (8004060 <HAL_GPIO_Init+0x44c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00f      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a9a      	ldr	r2, [pc, #616]	; (8004064 <HAL_GPIO_Init+0x450>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a99      	ldr	r2, [pc, #612]	; (8004068 <HAL_GPIO_Init+0x454>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a98      	ldr	r2, [pc, #608]	; (800406c <HAL_GPIO_Init+0x458>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x204>
 8003e10:	21cd      	movs	r1, #205	; 0xcd
 8003e12:	4897      	ldr	r0, [pc, #604]	; (8004070 <HAL_GPIO_Init+0x45c>)
 8003e14:	f7fd f803 	bl	8000e1e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b0f      	cmp	r3, #15
 8003e1e:	d903      	bls.n	8003e28 <HAL_GPIO_Init+0x214>
 8003e20:	21ce      	movs	r1, #206	; 0xce
 8003e22:	4893      	ldr	r0, [pc, #588]	; (8004070 <HAL_GPIO_Init+0x45c>)
 8003e24:	f7fc fffb 	bl	8000e1e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	08da      	lsrs	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3208      	adds	r2, #8
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0203 	and.w	r2, r3, #3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d00b      	beq.n	8003ec4 <HAL_GPIO_Init+0x2b0>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d007      	beq.n	8003ec4 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eb8:	2b11      	cmp	r3, #17
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b12      	cmp	r3, #18
 8003ec2:	d144      	bne.n	8003f4e <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00f      	beq.n	8003eec <HAL_GPIO_Init+0x2d8>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d00b      	beq.n	8003eec <HAL_GPIO_Init+0x2d8>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d007      	beq.n	8003eec <HAL_GPIO_Init+0x2d8>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2d8>
 8003ee4:	21e2      	movs	r1, #226	; 0xe2
 8003ee6:	4862      	ldr	r0, [pc, #392]	; (8004070 <HAL_GPIO_Init+0x45c>)
 8003ee8:	f7fc ff99 	bl	8000e1e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f22:	2201      	movs	r2, #1
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 0201 	and.w	r2, r3, #1
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80e2 	beq.w	8004150 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8c:	4b39      	ldr	r3, [pc, #228]	; (8004074 <HAL_GPIO_Init+0x460>)
 8003f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f92:	4a38      	ldr	r2, [pc, #224]	; (8004074 <HAL_GPIO_Init+0x460>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f9c:	4b35      	ldr	r3, [pc, #212]	; (8004074 <HAL_GPIO_Init+0x460>)
 8003f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003faa:	4a33      	ldr	r2, [pc, #204]	; (8004078 <HAL_GPIO_Init+0x464>)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	089b      	lsrs	r3, r3, #2
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <HAL_GPIO_Init+0x430>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d054      	beq.n	8004080 <HAL_GPIO_Init+0x46c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	; (8004048 <HAL_GPIO_Init+0x434>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d04e      	beq.n	800407c <HAL_GPIO_Init+0x468>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_GPIO_Init+0x438>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02b      	beq.n	800403e <HAL_GPIO_Init+0x42a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_GPIO_Init+0x43c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d025      	beq.n	800403a <HAL_GPIO_Init+0x426>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_GPIO_Init+0x440>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <HAL_GPIO_Init+0x422>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a17      	ldr	r2, [pc, #92]	; (8004058 <HAL_GPIO_Init+0x444>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d019      	beq.n	8004032 <HAL_GPIO_Init+0x41e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_GPIO_Init+0x448>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0x41a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_GPIO_Init+0x44c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00d      	beq.n	800402a <HAL_GPIO_Init+0x416>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <HAL_GPIO_Init+0x450>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <HAL_GPIO_Init+0x412>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a13      	ldr	r2, [pc, #76]	; (8004068 <HAL_GPIO_Init+0x454>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_GPIO_Init+0x40e>
 800401e:	2309      	movs	r3, #9
 8004020:	e02f      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 8004022:	230a      	movs	r3, #10
 8004024:	e02d      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 8004026:	2308      	movs	r3, #8
 8004028:	e02b      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 800402a:	2307      	movs	r3, #7
 800402c:	e029      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 800402e:	2306      	movs	r3, #6
 8004030:	e027      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 8004032:	2305      	movs	r3, #5
 8004034:	e025      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 8004036:	2304      	movs	r3, #4
 8004038:	e023      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 800403a:	2303      	movs	r3, #3
 800403c:	e021      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 800403e:	2302      	movs	r3, #2
 8004040:	e01f      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 8004042:	bf00      	nop
 8004044:	58020000 	.word	0x58020000
 8004048:	58020400 	.word	0x58020400
 800404c:	58020800 	.word	0x58020800
 8004050:	58020c00 	.word	0x58020c00
 8004054:	58021000 	.word	0x58021000
 8004058:	58021400 	.word	0x58021400
 800405c:	58021800 	.word	0x58021800
 8004060:	58021c00 	.word	0x58021c00
 8004064:	58022000 	.word	0x58022000
 8004068:	58022400 	.word	0x58022400
 800406c:	58022800 	.word	0x58022800
 8004070:	0800c680 	.word	0x0800c680
 8004074:	58024400 	.word	0x58024400
 8004078:	58000400 	.word	0x58000400
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_GPIO_Init+0x46e>
 8004080:	2300      	movs	r3, #0
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	f002 0203 	and.w	r2, r2, #3
 8004088:	0092      	lsls	r2, r2, #2
 800408a:	4093      	lsls	r3, r2
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004092:	4937      	ldr	r1, [pc, #220]	; (8004170 <HAL_GPIO_Init+0x55c>)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800411a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	f47f ae15 	bne.w	8003d90 <HAL_GPIO_Init+0x17c>
  }
}
 8004166:	bf00      	nop
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	58000400 	.word	0x58000400

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <HAL_GPIO_WritePin+0x20>
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_GPIO_WritePin+0x60>)
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <HAL_GPIO_WritePin+0x2a>
 8004194:	f240 11ad 	movw	r1, #429	; 0x1ad
 8004198:	480f      	ldr	r0, [pc, #60]	; (80041d8 <HAL_GPIO_WritePin+0x64>)
 800419a:	f7fc fe40 	bl	8000e1e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800419e:	787b      	ldrb	r3, [r7, #1]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_GPIO_WritePin+0x40>
 80041a4:	787b      	ldrb	r3, [r7, #1]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d004      	beq.n	80041b4 <HAL_GPIO_WritePin+0x40>
 80041aa:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80041ae:	480a      	ldr	r0, [pc, #40]	; (80041d8 <HAL_GPIO_WritePin+0x64>)
 80041b0:	f7fc fe35 	bl	8000e1e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041c0:	e003      	b.n	80041ca <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	619a      	str	r2, [r3, #24]
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	ffff0000 	.word	0xffff0000
 80041d8:	0800c680 	.word	0x0800c680

080041dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <HAL_GPIO_TogglePin+0x1c>
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <HAL_GPIO_TogglePin+0x4c>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <HAL_GPIO_TogglePin+0x26>
 80041f8:	f240 11c3 	movw	r1, #451	; 0x1c3
 80041fc:	480b      	ldr	r0, [pc, #44]	; (800422c <HAL_GPIO_TogglePin+0x50>)
 80041fe:	f7fc fe0e 	bl	8000e1e <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	887b      	ldrh	r3, [r7, #2]
 8004208:	401a      	ands	r2, r3
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	429a      	cmp	r2, r3
 800420e:	d104      	bne.n	800421a <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	041a      	lsls	r2, r3, #16
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004218:	e002      	b.n	8004220 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	619a      	str	r2, [r3, #24]
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	ffff0000 	.word	0xffff0000
 800422c:	0800c680 	.word	0x0800c680

08004230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800423a:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d006      	beq.n	8004254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004246:	4a05      	ldr	r2, [pc, #20]	; (800425c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc fdc0 	bl	8000dd4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	58000080 	.word	0x58000080

08004260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e107      	b.n	8004482 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a85      	ldr	r2, [pc, #532]	; (800448c <HAL_I2C_Init+0x22c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_I2C_Init+0x44>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a83      	ldr	r2, [pc, #524]	; (8004490 <HAL_I2C_Init+0x230>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <HAL_I2C_Init+0x44>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a82      	ldr	r2, [pc, #520]	; (8004494 <HAL_I2C_Init+0x234>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_I2C_Init+0x44>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a80      	ldr	r2, [pc, #512]	; (8004498 <HAL_I2C_Init+0x238>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_I2C_Init+0x44>
 800429a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800429e:	487f      	ldr	r0, [pc, #508]	; (800449c <HAL_I2C_Init+0x23c>)
 80042a0:	f7fc fdbd 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ac:	d304      	bcc.n	80042b8 <HAL_I2C_Init+0x58>
 80042ae:	f240 11df 	movw	r1, #479	; 0x1df
 80042b2:	487a      	ldr	r0, [pc, #488]	; (800449c <HAL_I2C_Init+0x23c>)
 80042b4:	f7fc fdb3 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d008      	beq.n	80042d2 <HAL_I2C_Init+0x72>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d004      	beq.n	80042d2 <HAL_I2C_Init+0x72>
 80042c8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80042cc:	4873      	ldr	r0, [pc, #460]	; (800449c <HAL_I2C_Init+0x23c>)
 80042ce:	f7fc fda6 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_I2C_Init+0x8e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e2:	d004      	beq.n	80042ee <HAL_I2C_Init+0x8e>
 80042e4:	f240 11e1 	movw	r1, #481	; 0x1e1
 80042e8:	486c      	ldr	r0, [pc, #432]	; (800449c <HAL_I2C_Init+0x23c>)
 80042ea:	f7fc fd98 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2bff      	cmp	r3, #255	; 0xff
 80042f4:	d904      	bls.n	8004300 <HAL_I2C_Init+0xa0>
 80042f6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80042fa:	4868      	ldr	r0, [pc, #416]	; (800449c <HAL_I2C_Init+0x23c>)
 80042fc:	f7fc fd8f 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_I2C_Init+0xea>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d01c      	beq.n	800434a <HAL_I2C_Init+0xea>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d018      	beq.n	800434a <HAL_I2C_Init+0xea>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d014      	beq.n	800434a <HAL_I2C_Init+0xea>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d010      	beq.n	800434a <HAL_I2C_Init+0xea>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b05      	cmp	r3, #5
 800432e:	d00c      	beq.n	800434a <HAL_I2C_Init+0xea>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d008      	beq.n	800434a <HAL_I2C_Init+0xea>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b07      	cmp	r3, #7
 800433e:	d004      	beq.n	800434a <HAL_I2C_Init+0xea>
 8004340:	f240 11e3 	movw	r1, #483	; 0x1e3
 8004344:	4855      	ldr	r0, [pc, #340]	; (800449c <HAL_I2C_Init+0x23c>)
 8004346:	f7fc fd6a 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_I2C_Init+0x106>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800435a:	d004      	beq.n	8004366 <HAL_I2C_Init+0x106>
 800435c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8004360:	484e      	ldr	r0, [pc, #312]	; (800449c <HAL_I2C_Init+0x23c>)
 8004362:	f7fc fd5c 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_I2C_Init+0x122>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004376:	d004      	beq.n	8004382 <HAL_I2C_Init+0x122>
 8004378:	f240 11e5 	movw	r1, #485	; 0x1e5
 800437c:	4847      	ldr	r0, [pc, #284]	; (800449c <HAL_I2C_Init+0x23c>)
 800437e:	f7fc fd4e 	bl	8000e1e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc fba6 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e006      	b.n	80043f8 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d104      	bne.n	800440a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <HAL_I2C_Init+0x240>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	ea42 0103 	orr.w	r1, r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40005400 	.word	0x40005400
 8004490:	40005800 	.word	0x40005800
 8004494:	40005c00 	.word	0x40005c00
 8004498:	58001c00 	.word	0x58001c00
 800449c:	0800c6bc 	.word	0x0800c6bc
 80044a0:	02008000 	.word	0x02008000

080044a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a32      	ldr	r2, [pc, #200]	; (800457c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d012      	beq.n	80044de <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a30      	ldr	r2, [pc, #192]	; (8004580 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00d      	beq.n	80044de <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2f      	ldr	r2, [pc, #188]	; (8004584 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d008      	beq.n	80044de <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2d      	ldr	r2, [pc, #180]	; (8004588 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80044d6:	2164      	movs	r1, #100	; 0x64
 80044d8:	482c      	ldr	r0, [pc, #176]	; (800458c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80044da:	f7fc fca0 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	d003      	beq.n	80044f4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80044ec:	2165      	movs	r1, #101	; 0x65
 80044ee:	4827      	ldr	r0, [pc, #156]	; (800458c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80044f0:	f7fc fc95 	bl	8000e1e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d138      	bne.n	8004572 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800450a:	2302      	movs	r3, #2
 800450c:	e032      	b.n	8004574 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2224      	movs	r2, #36	; 0x24
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800453c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0201 	orr.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	e000      	b.n	8004574 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004572:	2302      	movs	r3, #2
  }
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40005400 	.word	0x40005400
 8004580:	40005800 	.word	0x40005800
 8004584:	40005c00 	.word	0x40005c00
 8004588:	58001c00 	.word	0x58001c00
 800458c:	0800c6f4 	.word	0x0800c6f4

08004590 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a31      	ldr	r2, [pc, #196]	; (8004664 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d012      	beq.n	80045ca <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2f      	ldr	r2, [pc, #188]	; (8004668 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00d      	beq.n	80045ca <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2e      	ldr	r2, [pc, #184]	; (800466c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d008      	beq.n	80045ca <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2c      	ldr	r2, [pc, #176]	; (8004670 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80045c2:	2192      	movs	r1, #146	; 0x92
 80045c4:	482b      	ldr	r0, [pc, #172]	; (8004674 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80045c6:	f7fc fc2a 	bl	8000e1e <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b0f      	cmp	r3, #15
 80045ce:	d903      	bls.n	80045d8 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80045d0:	2193      	movs	r1, #147	; 0x93
 80045d2:	4828      	ldr	r0, [pc, #160]	; (8004674 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80045d4:	f7fc fc23 	bl	8000e1e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d139      	bne.n	8004658 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e033      	b.n	800465a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2224      	movs	r2, #36	; 0x24
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004620:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40005400 	.word	0x40005400
 8004668:	40005800 	.word	0x40005800
 800466c:	40005c00 	.word	0x40005c00
 8004670:	58001c00 	.word	0x58001c00
 8004674:	0800c6f4 	.word	0x0800c6f4

08004678 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e070      	b.n	800476c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fa80 	bl	8000ba4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80046da:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800470a:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a19      	ldr	r2, [pc, #100]	; (8004774 <HAL_JPEG_Init+0xfc>)
 8004710:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_JPEG_Init+0x100>)
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fae9 	bl	8004cfc <JPEG_Set_HuffEnc_Mem>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e018      	b.n	800476c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004748:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	0800ca80 	.word	0x0800ca80
 8004778:	0800cac0 	.word	0x0800cac0

0800477c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800477c:	b480      	push	{r7}
 800477e:	b08b      	sub	sp, #44	; 0x2c
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e020      	b.n	80047d6 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	4413      	add	r3, r2
 80047a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a8:	d90f      	bls.n	80047ca <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e055      	b.n	800485a <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	440b      	add	r3, r1
 80047b8:	3201      	adds	r2, #1
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
      p++;
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	3301      	adds	r3, #1
 80047c2:	623b      	str	r3, [r7, #32]
      i--;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	3b01      	subs	r3, #1
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ee      	bne.n	80047ae <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b0f      	cmp	r3, #15
 80047da:	d9db      	bls.n	8004794 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	4413      	add	r3, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	617b      	str	r3, [r7, #20]
  p = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80047fa:	e027      	b.n	800484c <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	4413      	add	r3, r2
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	601a      	str	r2, [r3, #0]
      p++;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	3301      	adds	r3, #1
 800480c:	623b      	str	r3, [r7, #32]
      code++;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3301      	adds	r3, #1
 8004812:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	4413      	add	r3, r2
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	4293      	cmp	r3, r2
 8004822:	d0eb      	beq.n	80047fc <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b1f      	cmp	r3, #31
 8004828:	d901      	bls.n	800482e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e015      	b.n	800485a <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800482e:	2201      	movs	r2, #1
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	429a      	cmp	r2, r3
 800483a:	d301      	bcc.n	8004840 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e00c      	b.n	800485a <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
    si++;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	3301      	adds	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1dd      	bne.n	8004814 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	372c      	adds	r7, #44	; 0x2c
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800486c:	af00      	add	r7, sp, #0
 800486e:	1d3b      	adds	r3, r7, #4
 8004870:	6018      	str	r0, [r3, #0]
 8004872:	463b      	mov	r3, r7
 8004874:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	f107 020c 	add.w	r2, r7, #12
 8004882:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8004886:	f7ff ff79 	bl	800477c <JPEG_Bits_To_SizeCodes>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8004890:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8004898:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800489c:	e066      	b.n	800496c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 80048a4:	e05a      	b.n	800495c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80048ae:	4413      	add	r3, r2
 80048b0:	3310      	adds	r3, #16
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 80048b8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 80048c0:	23a0      	movs	r3, #160	; 0xa0
 80048c2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80048c6:	e021      	b.n	800490c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80048c8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80048cc:	2bf0      	cmp	r3, #240	; 0xf0
 80048ce:	d103      	bne.n	80048d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 80048d0:	23a1      	movs	r3, #161	; 0xa1
 80048d2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80048d6:	e019      	b.n	800490c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80048d8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 80048e6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80048f2:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	461a      	mov	r2, r3
 8004900:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004904:	4413      	add	r3, r2
 8004906:	3b01      	subs	r3, #1
 8004908:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800490c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004910:	2ba1      	cmp	r3, #161	; 0xa1
 8004912:	d901      	bls.n	8004918 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004914:	2301      	movs	r3, #1
 8004916:	e029      	b.n	800496c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004918:	f107 030c 	add.w	r3, r7, #12
 800491c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004920:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004924:	463b      	mov	r3, r7
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800492c:	3328      	adds	r3, #40	; 0x28
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004934:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004938:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800493c:	4413      	add	r3, r2
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	b2d9      	uxtb	r1, r3
 8004944:	463b      	mov	r3, r7
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800494c:	4413      	add	r3, r2
 800494e:	460a      	mov	r2, r1
 8004950:	701a      	strb	r2, [r3, #0]
      k++;
 8004952:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004956:	3301      	adds	r3, #1
 8004958:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800495c:	f107 0308 	add.w	r3, r7, #8
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004966:	429a      	cmp	r2, r3
 8004968:	d39d      	bcc.n	80048a6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800497c:	af00      	add	r7, sp, #0
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	6018      	str	r0, [r3, #0]
 8004982:	463b      	mov	r3, r7
 8004984:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800498e:	f107 0208 	add.w	r2, r7, #8
 8004992:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8004996:	f7ff fef1 	bl	800477c <JPEG_Bits_To_SizeCodes>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80049a0:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 80049a8:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80049ac:	e03b      	b.n	8004a26 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 80049b4:	e030      	b.n	8004a18 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80049be:	4413      	add	r3, r2
 80049c0:	3310      	adds	r3, #16
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80049c8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80049cc:	2b0b      	cmp	r3, #11
 80049ce:	d901      	bls.n	80049d4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80049d0:	2301      	movs	r3, #1
 80049d2:	e028      	b.n	8004a26 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80049dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049e0:	463b      	mov	r3, r7
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80049e8:	3302      	adds	r3, #2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80049f0:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80049f4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80049f8:	4413      	add	r3, r2
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b2d9      	uxtb	r1, r3
 8004a00:	463b      	mov	r3, r7
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004a08:	4413      	add	r3, r2
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	701a      	strb	r2, [r3, #0]
      k++;
 8004a0e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004a12:	3301      	adds	r3, #1
 8004a14:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004a18:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8004a1c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d3c8      	bcc.n	80049b6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b09a      	sub	sp, #104	; 0x68
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d106      	bne.n	8004a58 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004a52:	3318      	adds	r3, #24
 8004a54:	663b      	str	r3, [r7, #96]	; 0x60
 8004a56:	e00f      	b.n	8004a78 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d106      	bne.n	8004a74 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004a6e:	3318      	adds	r3, #24
 8004a70:	663b      	str	r3, [r7, #96]	; 0x60
 8004a72:	e001      	b.n	8004a78 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e05b      	b.n	8004b30 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d057      	beq.n	8004b2e <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	4619      	mov	r1, r3
 8004a84:	68b8      	ldr	r0, [r7, #8]
 8004a86:	f7ff ff76 	bl	8004976 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004a90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004a98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a9c:	e048      	b.n	8004b30 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 8004a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa0:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aa4:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004aa8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aac:	3304      	adds	r3, #4
 8004aae:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ab2:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004ab6:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004ab8:	230c      	movs	r3, #12
 8004aba:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8004abc:	e034      	b.n	8004b28 <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8004abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac6:	3b04      	subs	r3, #4
 8004ac8:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004aca:	f107 0214 	add.w	r2, r7, #20
 8004ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ad0:	4413      	add	r3, r2
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004adc:	3302      	adds	r3, #2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	4313      	orrs	r3, r2
 8004aee:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8004af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af2:	3b01      	subs	r3, #1
 8004af4:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004af6:	f107 0214 	add.w	r2, r7, #20
 8004afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004afc:	4413      	add	r3, r2
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b08:	3302      	adds	r3, #2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004b10:	440b      	add	r3, r1
 8004b12:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b1e:	041a      	lsls	r2, r3, #16
 8004b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b22:	431a      	orrs	r2, r3
 8004b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b26:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d8c7      	bhi.n	8004abe <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3768      	adds	r7, #104	; 0x68
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	6018      	str	r0, [r3, #0]
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	6019      	str	r1, [r3, #0]
 8004b4c:	1d3b      	adds	r3, r7, #4
 8004b4e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004b50:	f107 030c 	add.w	r3, r7, #12
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	1d3a      	adds	r2, r7, #4
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d10a      	bne.n	8004b7a <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b74:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004b78:	e016      	b.n	8004ba8 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004b7a:	f107 030c 	add.w	r3, r7, #12
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004b86:	1d3a      	adds	r2, r7, #4
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d10a      	bne.n	8004ba4 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004b8e:	f107 030c 	add.w	r3, r7, #12
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004b9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b9e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004ba2:	e001      	b.n	8004ba8 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e09c      	b.n	8004ce2 <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8004ba8:	f107 0308 	add.w	r3, r7, #8
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8096 	beq.w	8004ce0 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004bb4:	f107 0214 	add.w	r2, r7, #20
 8004bb8:	f107 0308 	add.w	r3, r7, #8
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	f7ff fe51 	bl	8004866 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8004bca:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8004bd2:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004bd6:	e084      	b.n	8004ce2 <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004bd8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004bdc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004be6:	e00e      	b.n	8004c06 <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8004be8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004bec:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004bf0:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004bf2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004bfc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c00:	3301      	adds	r3, #1
 8004c02:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004c06:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d9ec      	bls.n	8004be8 <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8004c0e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c12:	4a36      	ldr	r2, [pc, #216]	; (8004cec <JPEG_Set_HuffAC_Mem+0x1b4>)
 8004c14:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c16:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8004c20:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c24:	4a32      	ldr	r2, [pc, #200]	; (8004cf0 <JPEG_Set_HuffAC_Mem+0x1b8>)
 8004c26:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c28:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8004c32:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c36:	4a2f      	ldr	r2, [pc, #188]	; (8004cf4 <JPEG_Set_HuffAC_Mem+0x1bc>)
 8004c38:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c3e:	3304      	adds	r3, #4
 8004c40:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004c44:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c48:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <JPEG_Set_HuffAC_Mem+0x1c0>)
 8004c4a:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004c4c:	23a2      	movs	r3, #162	; 0xa2
 8004c4e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8004c52:	e041      	b.n	8004cd8 <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8004c54:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8004c5e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004c62:	3b04      	subs	r3, #4
 8004c64:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004c68:	f107 0214 	add.w	r2, r7, #20
 8004c6c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c70:	4413      	add	r3, r2
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004c7a:	f107 0114 	add.w	r1, r7, #20
 8004c7e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c82:	3328      	adds	r3, #40	; 0x28
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004c92:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c96:	3b01      	subs	r3, #1
 8004c98:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004c9c:	f107 0214 	add.w	r2, r7, #20
 8004ca0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004ca4:	4413      	add	r3, r2
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004cae:	f107 0114 	add.w	r1, r7, #20
 8004cb2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cb6:	3328      	adds	r3, #40	; 0x28
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004cc6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8004cca:	041a      	lsls	r2, r3, #16
 8004ccc:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004cd6:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004cd8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d8b9      	bhi.n	8004c54 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	0fd10fd0 	.word	0x0fd10fd0
 8004cf0:	0fd30fd2 	.word	0x0fd30fd2
 8004cf4:	0fd50fd4 	.word	0x0fd50fd4
 8004cf8:	0fd70fd6 	.word	0x0fd70fd6

08004cfc <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f84d 	bl	8004da4 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004d12:	461a      	mov	r2, r3
 8004d14:	491f      	ldr	r1, [pc, #124]	; (8004d94 <JPEG_Set_HuffEnc_Mem+0x98>)
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff ff0e 	bl	8004b38 <JPEG_Set_HuffAC_Mem>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	e030      	b.n	8004d8c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004d32:	461a      	mov	r2, r3
 8004d34:	4918      	ldr	r1, [pc, #96]	; (8004d98 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff fefe 	bl	8004b38 <JPEG_Set_HuffAC_Mem>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	e020      	b.n	8004d8c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004d52:	461a      	mov	r2, r3
 8004d54:	4911      	ldr	r1, [pc, #68]	; (8004d9c <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff fe6a 	bl	8004a30 <JPEG_Set_HuffDC_Mem>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	e010      	b.n	8004d8c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004d72:	461a      	mov	r2, r3
 8004d74:	490a      	ldr	r1, [pc, #40]	; (8004da0 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fe5a 	bl	8004a30 <JPEG_Set_HuffDC_Mem>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	e000      	b.n	8004d8c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	0800c918 	.word	0x0800c918
 8004d98:	0800c9cc 	.word	0x0800c9cc
 8004d9c:	0800c8e0 	.word	0x0800c8e0
 8004da0:	0800c8fc 	.word	0x0800c8fc

08004da4 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b08b      	sub	sp, #44	; 0x2c
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8004dac:	4b80      	ldr	r3, [pc, #512]	; (8004fb0 <JPEG_Set_Huff_DHTMem+0x20c>)
 8004dae:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004db0:	4b80      	ldr	r3, [pc, #512]	; (8004fb4 <JPEG_Set_Huff_DHTMem+0x210>)
 8004db2:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004db4:	4b80      	ldr	r3, [pc, #512]	; (8004fb8 <JPEG_Set_Huff_DHTMem+0x214>)
 8004db6:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8004db8:	4b80      	ldr	r3, [pc, #512]	; (8004fbc <JPEG_Set_Huff_DHTMem+0x218>)
 8004dba:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	623b      	str	r3, [r7, #32]
  index = 16;
 8004dc8:	2310      	movs	r3, #16
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004dcc:	e01d      	b.n	8004e0a <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	5cd3      	ldrb	r3, [r2, r3]
 8004dd6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	3b02      	subs	r3, #2
 8004ddc:	6979      	ldr	r1, [r7, #20]
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004de2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	3b03      	subs	r3, #3
 8004de8:	6979      	ldr	r1, [r7, #20]
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004dee:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8004df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df2:	3a04      	subs	r2, #4
 8004df4:	6979      	ldr	r1, [r7, #20]
 8004df6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004df8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	601a      	str	r2, [r3, #0]
    address--;
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	3b04      	subs	r3, #4
 8004e02:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	3b04      	subs	r3, #4
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d8de      	bhi.n	8004dce <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004e18:	3318      	adds	r3, #24
 8004e1a:	623b      	str	r3, [r7, #32]
  index = 12;
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e20:	e021      	b.n	8004e66 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	3b01      	subs	r3, #1
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	7c1b      	ldrb	r3, [r3, #16]
 8004e2c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	3b02      	subs	r3, #2
 8004e32:	6979      	ldr	r1, [r7, #20]
 8004e34:	440b      	add	r3, r1
 8004e36:	7c1b      	ldrb	r3, [r3, #16]
 8004e38:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e3a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	3b03      	subs	r3, #3
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	440b      	add	r3, r1
 8004e44:	7c1b      	ldrb	r3, [r3, #16]
 8004e46:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e48:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4c:	3a04      	subs	r2, #4
 8004e4e:	6979      	ldr	r1, [r7, #20]
 8004e50:	440a      	add	r2, r1
 8004e52:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e54:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	601a      	str	r2, [r3, #0]
    address--;
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	3b04      	subs	r3, #4
 8004e5e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	3b04      	subs	r3, #4
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d8da      	bhi.n	8004e22 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004e74:	3328      	adds	r3, #40	; 0x28
 8004e76:	623b      	str	r3, [r7, #32]
  index = 16;
 8004e78:	2310      	movs	r3, #16
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e7c:	e01d      	b.n	8004eba <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	3b01      	subs	r3, #1
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	5cd3      	ldrb	r3, [r2, r3]
 8004e86:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	3b02      	subs	r3, #2
 8004e8c:	69f9      	ldr	r1, [r7, #28]
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004e92:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	3b03      	subs	r3, #3
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004e9e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea2:	3a04      	subs	r2, #4
 8004ea4:	69f9      	ldr	r1, [r7, #28]
 8004ea6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004ea8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	601a      	str	r2, [r3, #0]
    address--;
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	3b04      	subs	r3, #4
 8004eb2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	3b04      	subs	r3, #4
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d8de      	bhi.n	8004e7e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004ec8:	33cc      	adds	r3, #204	; 0xcc
 8004eca:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004edc:	021a      	lsls	r2, r3, #8
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	3b04      	subs	r3, #4
 8004ef6:	623b      	str	r3, [r7, #32]
  index = 160;
 8004ef8:	23a0      	movs	r3, #160	; 0xa0
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004efc:	e021      	b.n	8004f42 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	3b01      	subs	r3, #1
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	7c1b      	ldrb	r3, [r3, #16]
 8004f08:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	3b02      	subs	r3, #2
 8004f0e:	69f9      	ldr	r1, [r7, #28]
 8004f10:	440b      	add	r3, r1
 8004f12:	7c1b      	ldrb	r3, [r3, #16]
 8004f14:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f16:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	3b03      	subs	r3, #3
 8004f1c:	69f9      	ldr	r1, [r7, #28]
 8004f1e:	440b      	add	r3, r1
 8004f20:	7c1b      	ldrb	r3, [r3, #16]
 8004f22:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004f24:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	3a04      	subs	r2, #4
 8004f2a:	69f9      	ldr	r1, [r7, #28]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004f30:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	601a      	str	r2, [r3, #0]
    address--;
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d8da      	bhi.n	8004efe <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f50:	33cc      	adds	r3, #204	; 0xcc
 8004f52:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	061a      	lsls	r2, r3, #24
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f7e:	33dc      	adds	r3, #220	; 0xdc
 8004f80:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	7bdb      	ldrb	r3, [r3, #15]
 8004f90:	021a      	lsls	r2, r3, #8
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	7b92      	ldrb	r2, [r2, #14]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	3b04      	subs	r3, #4
 8004fa8:	623b      	str	r3, [r7, #32]
  index = 12;
 8004faa:	230c      	movs	r3, #12
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004fae:	e027      	b.n	8005000 <JPEG_Set_Huff_DHTMem+0x25c>
 8004fb0:	0800c918 	.word	0x0800c918
 8004fb4:	0800c9cc 	.word	0x0800c9cc
 8004fb8:	0800c8e0 	.word	0x0800c8e0
 8004fbc:	0800c8fc 	.word	0x0800c8fc
 8004fc0:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	5cd3      	ldrb	r3, [r2, r3]
 8004fcc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004fce:	6939      	ldr	r1, [r7, #16]
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	440b      	add	r3, r1
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004fd8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	6939      	ldr	r1, [r7, #16]
 8004fe0:	5ccb      	ldrb	r3, [r1, r3]
 8004fe2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004fe4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	3a02      	subs	r2, #2
 8004fea:	6939      	ldr	r1, [r7, #16]
 8004fec:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004fee:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	601a      	str	r2, [r3, #0]
    address--;
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	3b04      	subs	r3, #4
 8004ff8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3b04      	subs	r3, #4
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	2b03      	cmp	r3, #3
 8005004:	d8de      	bhi.n	8004fc4 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800500e:	33dc      	adds	r3, #220	; 0xdc
 8005010:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	7c5b      	ldrb	r3, [r3, #17]
 800501e:	061a      	lsls	r2, r3, #24
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	431a      	orrs	r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	7c1b      	ldrb	r3, [r3, #16]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800503c:	33e8      	adds	r3, #232	; 0xe8
 800503e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <JPEG_Set_Huff_DHTMem+0x458>)
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	7edb      	ldrb	r3, [r3, #27]
 800504e:	021a      	lsls	r2, r3, #8
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	7e92      	ldrb	r2, [r2, #26]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	3b04      	subs	r3, #4
 8005066:	623b      	str	r3, [r7, #32]
  index = 8;
 8005068:	2308      	movs	r3, #8
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800506c:	e021      	b.n	80050b2 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	3301      	adds	r3, #1
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	7c1b      	ldrb	r3, [r3, #16]
 8005078:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800507a:	6939      	ldr	r1, [r7, #16]
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	440b      	add	r3, r1
 8005080:	3310      	adds	r3, #16
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005086:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	3b01      	subs	r3, #1
 800508c:	6939      	ldr	r1, [r7, #16]
 800508e:	440b      	add	r3, r1
 8005090:	7c1b      	ldrb	r3, [r3, #16]
 8005092:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005094:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	3a02      	subs	r2, #2
 800509a:	6939      	ldr	r1, [r7, #16]
 800509c:	440a      	add	r2, r1
 800509e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80050a0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	601a      	str	r2, [r3, #0]
    address--;
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	3b04      	subs	r3, #4
 80050aa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	3b04      	subs	r3, #4
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d8da      	bhi.n	800506e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80050c0:	33e8      	adds	r3, #232	; 0xe8
 80050c2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	785b      	ldrb	r3, [r3, #1]
 80050d0:	061a      	lsls	r2, r3, #24
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  *address = value;
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80050ee:	33f8      	adds	r3, #248	; 0xf8
 80050f0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b41      	ldr	r3, [pc, #260]	; (80051fc <JPEG_Set_Huff_DHTMem+0x458>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	7bdb      	ldrb	r3, [r3, #15]
 8005100:	021a      	lsls	r2, r3, #8
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	7b92      	ldrb	r2, [r2, #14]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	3b04      	subs	r3, #4
 8005118:	623b      	str	r3, [r7, #32]
  index = 12;
 800511a:	230c      	movs	r3, #12
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800511e:	e01d      	b.n	800515c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	3301      	adds	r3, #1
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	5cd3      	ldrb	r3, [r2, r3]
 8005128:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800512a:	69b9      	ldr	r1, [r7, #24]
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	440b      	add	r3, r1
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005134:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	3b01      	subs	r3, #1
 800513a:	69b9      	ldr	r1, [r7, #24]
 800513c:	5ccb      	ldrb	r3, [r1, r3]
 800513e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005140:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8005142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005144:	3a02      	subs	r2, #2
 8005146:	69b9      	ldr	r1, [r7, #24]
 8005148:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800514a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	601a      	str	r2, [r3, #0]
    address--;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	3b04      	subs	r3, #4
 8005154:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	3b04      	subs	r3, #4
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	2b03      	cmp	r3, #3
 8005160:	d8de      	bhi.n	8005120 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800516a:	33f8      	adds	r3, #248	; 0xf8
 800516c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	7c5b      	ldrb	r3, [r3, #17]
 800517a:	061a      	lsls	r2, r3, #24
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	431a      	orrs	r2, r3
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	7c1b      	ldrb	r3, [r3, #16]
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005198:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800519c:	623b      	str	r3, [r7, #32]
  index = 160;
 800519e:	23a0      	movs	r3, #160	; 0xa0
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80051a2:	e021      	b.n	80051e8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	3301      	adds	r3, #1
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4413      	add	r3, r2
 80051ac:	7c1b      	ldrb	r3, [r3, #16]
 80051ae:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	440b      	add	r3, r1
 80051b6:	3310      	adds	r3, #16
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80051bc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	3b01      	subs	r3, #1
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	440b      	add	r3, r1
 80051c6:	7c1b      	ldrb	r3, [r3, #16]
 80051c8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80051ca:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	3a02      	subs	r2, #2
 80051d0:	69b9      	ldr	r1, [r7, #24]
 80051d2:	440a      	add	r2, r1
 80051d4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80051d6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	601a      	str	r2, [r3, #0]
    address--;
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	3b04      	subs	r3, #4
 80051e0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	3b04      	subs	r3, #4
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d8da      	bhi.n	80051a4 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80051ee:	bf00      	nop
 80051f0:	372c      	adds	r7, #44	; 0x2c
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	ffff0000 	.word	0xffff0000

08005200 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d006      	beq.n	800521c <HAL_PWREx_ConfigSupply+0x1c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d003      	beq.n	800521c <HAL_PWREx_ConfigSupply+0x1c>
 8005214:	21ef      	movs	r1, #239	; 0xef
 8005216:	481a      	ldr	r0, [pc, #104]	; (8005280 <HAL_PWREx_ConfigSupply+0x80>)
 8005218:	f7fb fe01 	bl	8000e1e <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 800521c:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_PWREx_ConfigSupply+0x84>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b04      	cmp	r3, #4
 8005226:	d008      	beq.n	800523a <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005228:	4b16      	ldr	r3, [pc, #88]	; (8005284 <HAL_PWREx_ConfigSupply+0x84>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d001      	beq.n	800523a <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e01d      	b.n	8005276 <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_PWREx_ConfigSupply+0x84>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f023 0207 	bic.w	r2, r3, #7
 8005242:	4910      	ldr	r1, [pc, #64]	; (8005284 <HAL_PWREx_ConfigSupply+0x84>)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4313      	orrs	r3, r2
 8005248:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800524a:	f7fc f89b 	bl	8001384 <HAL_GetTick>
 800524e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8005250:	e009      	b.n	8005266 <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8005252:	f7fc f897 	bl	8001384 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005260:	d901      	bls.n	8005266 <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e007      	b.n	8005276 <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8005266:	4b07      	ldr	r3, [pc, #28]	; (8005284 <HAL_PWREx_ConfigSupply+0x84>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800526e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005272:	d1ee      	bne.n	8005252 <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	0800c730 	.word	0x0800c730
 8005284:	58024800 	.word	0x58024800

08005288 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f000 bcc9 	b.w	8005c2e <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d028      	beq.n	80052f6 <HAL_RCC_OscConfig+0x6e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d122      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11c      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d116      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d110      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6e>
 80052ec:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80052f0:	48a2      	ldr	r0, [pc, #648]	; (800557c <HAL_RCC_OscConfig+0x2f4>)
 80052f2:	f7fb fd94 	bl	8000e1e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 809d 	beq.w	800543e <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00e      	beq.n	800532a <HAL_RCC_OscConfig+0xa2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005314:	d009      	beq.n	800532a <HAL_RCC_OscConfig+0xa2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800531e:	d004      	beq.n	800532a <HAL_RCC_OscConfig+0xa2>
 8005320:	f240 1175 	movw	r1, #373	; 0x175
 8005324:	4895      	ldr	r0, [pc, #596]	; (800557c <HAL_RCC_OscConfig+0x2f4>)
 8005326:	f7fb fd7a 	bl	8000e1e <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532a:	4b95      	ldr	r3, [pc, #596]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005334:	4b92      	ldr	r3, [pc, #584]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2b10      	cmp	r3, #16
 800533e:	d007      	beq.n	8005350 <HAL_RCC_OscConfig+0xc8>
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	2b18      	cmp	r3, #24
 8005344:	d111      	bne.n	800536a <HAL_RCC_OscConfig+0xe2>
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d10c      	bne.n	800536a <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005350:	4b8b      	ldr	r3, [pc, #556]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d06f      	beq.n	800543c <HAL_RCC_OscConfig+0x1b4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d16b      	bne.n	800543c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f000 bc62 	b.w	8005c2e <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005372:	d106      	bne.n	8005382 <HAL_RCC_OscConfig+0xfa>
 8005374:	4b82      	ldr	r3, [pc, #520]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a81      	ldr	r2, [pc, #516]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 800537a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e02e      	b.n	80053e0 <HAL_RCC_OscConfig+0x158>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10c      	bne.n	80053a4 <HAL_RCC_OscConfig+0x11c>
 800538a:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7c      	ldr	r2, [pc, #496]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4b7a      	ldr	r3, [pc, #488]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a79      	ldr	r2, [pc, #484]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 800539c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e01d      	b.n	80053e0 <HAL_RCC_OscConfig+0x158>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x140>
 80053ae:	4b74      	ldr	r3, [pc, #464]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a73      	ldr	r2, [pc, #460]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80053b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b71      	ldr	r3, [pc, #452]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a70      	ldr	r2, [pc, #448]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e00b      	b.n	80053e0 <HAL_RCC_OscConfig+0x158>
 80053c8:	4b6d      	ldr	r3, [pc, #436]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a6c      	ldr	r2, [pc, #432]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	4b6a      	ldr	r3, [pc, #424]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a69      	ldr	r2, [pc, #420]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80053da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d014      	beq.n	8005412 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fb ffcc 	bl	8001384 <HAL_GetTick>
 80053ec:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053ee:	e009      	b.n	8005404 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f0:	f7fb ffc8 	bl	8001384 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	; 0x64
 80053fc:	d902      	bls.n	8005404 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	f000 bc15 	b.w	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005404:	4b5e      	ldr	r3, [pc, #376]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0ef      	beq.n	80053f0 <HAL_RCC_OscConfig+0x168>
 8005410:	e015      	b.n	800543e <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7fb ffb7 	bl	8001384 <HAL_GetTick>
 8005416:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005418:	e009      	b.n	800542e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800541a:	f7fb ffb3 	bl	8001384 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b64      	cmp	r3, #100	; 0x64
 8005426:	d902      	bls.n	800542e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	f000 bc00 	b.w	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800542e:	4b54      	ldr	r3, [pc, #336]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ef      	bne.n	800541a <HAL_RCC_OscConfig+0x192>
 800543a:	e000      	b.n	800543e <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80d8 	beq.w	80055fc <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d018      	beq.n	8005486 <HAL_RCC_OscConfig+0x1fe>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d014      	beq.n	8005486 <HAL_RCC_OscConfig+0x1fe>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d010      	beq.n	8005486 <HAL_RCC_OscConfig+0x1fe>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b09      	cmp	r3, #9
 800546a:	d00c      	beq.n	8005486 <HAL_RCC_OscConfig+0x1fe>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b11      	cmp	r3, #17
 8005472:	d008      	beq.n	8005486 <HAL_RCC_OscConfig+0x1fe>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b19      	cmp	r3, #25
 800547a:	d004      	beq.n	8005486 <HAL_RCC_OscConfig+0x1fe>
 800547c:	f240 11a9 	movw	r1, #425	; 0x1a9
 8005480:	483e      	ldr	r0, [pc, #248]	; (800557c <HAL_RCC_OscConfig+0x2f4>)
 8005482:	f7fb fccc 	bl	8000e1e <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b7f      	cmp	r3, #127	; 0x7f
 800548c:	d904      	bls.n	8005498 <HAL_RCC_OscConfig+0x210>
 800548e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005492:	483a      	ldr	r0, [pc, #232]	; (800557c <HAL_RCC_OscConfig+0x2f4>)
 8005494:	f7fb fcc3 	bl	8000e1e <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054a2:	4b37      	ldr	r3, [pc, #220]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_RCC_OscConfig+0x236>
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b18      	cmp	r3, #24
 80054b2:	d149      	bne.n	8005548 <HAL_RCC_OscConfig+0x2c0>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d144      	bne.n	8005548 <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054be:	4b30      	ldr	r3, [pc, #192]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_RCC_OscConfig+0x24e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e3ab      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054d6:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f023 0219 	bic.w	r2, r3, #25
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	4927      	ldr	r1, [pc, #156]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fb ff4c 	bl	8001384 <HAL_GetTick>
 80054ec:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f0:	f7fb ff48 	bl	8001384 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e395      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005502:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	f7fb ff67 	bl	80013e0 <HAL_GetREVID>
 8005512:	4602      	mov	r2, r0
 8005514:	f241 0303 	movw	r3, #4099	; 0x1003
 8005518:	429a      	cmp	r2, r3
 800551a:	d80a      	bhi.n	8005532 <HAL_RCC_OscConfig+0x2aa>
 800551c:	4b18      	ldr	r3, [pc, #96]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	4915      	ldr	r1, [pc, #84]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005530:	e064      	b.n	80055fc <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005532:	4b13      	ldr	r3, [pc, #76]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	061b      	lsls	r3, r3, #24
 8005540:	490f      	ldr	r1, [pc, #60]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005542:	4313      	orrs	r3, r2
 8005544:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005546:	e059      	b.n	80055fc <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d03c      	beq.n	80055ca <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 0219 	bic.w	r2, r3, #25
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4908      	ldr	r1, [pc, #32]	; (8005580 <HAL_RCC_OscConfig+0x2f8>)
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005562:	f7fb ff0f 	bl	8001384 <HAL_GetTick>
 8005566:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005568:	e00c      	b.n	8005584 <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800556a:	f7fb ff0b 	bl	8001384 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d905      	bls.n	8005584 <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e358      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
 800557c:	0800c76c 	.word	0x0800c76c
 8005580:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005584:	4b95      	ldr	r3, [pc, #596]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0ec      	beq.n	800556a <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005590:	f7fb ff26 	bl	80013e0 <HAL_GetREVID>
 8005594:	4602      	mov	r2, r0
 8005596:	f241 0303 	movw	r3, #4099	; 0x1003
 800559a:	429a      	cmp	r2, r3
 800559c:	d80a      	bhi.n	80055b4 <HAL_RCC_OscConfig+0x32c>
 800559e:	4b8f      	ldr	r3, [pc, #572]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	031b      	lsls	r3, r3, #12
 80055ac:	498b      	ldr	r1, [pc, #556]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	604b      	str	r3, [r1, #4]
 80055b2:	e023      	b.n	80055fc <HAL_RCC_OscConfig+0x374>
 80055b4:	4b89      	ldr	r3, [pc, #548]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	4986      	ldr	r1, [pc, #536]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	604b      	str	r3, [r1, #4]
 80055c8:	e018      	b.n	80055fc <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ca:	4b84      	ldr	r3, [pc, #528]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a83      	ldr	r2, [pc, #524]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fb fed5 	bl	8001384 <HAL_GetTick>
 80055da:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055de:	f7fb fed1 	bl	8001384 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e31e      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055f0:	4b7a      	ldr	r3, [pc, #488]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f0      	bne.n	80055de <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a5 	beq.w	8005754 <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_RCC_OscConfig+0x39c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d004      	beq.n	8005624 <HAL_RCC_OscConfig+0x39c>
 800561a:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800561e:	4870      	ldr	r0, [pc, #448]	; (80057e0 <HAL_RCC_OscConfig+0x558>)
 8005620:	f7fb fbfd 	bl	8000e1e <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	2b1f      	cmp	r3, #31
 800562a:	d904      	bls.n	8005636 <HAL_RCC_OscConfig+0x3ae>
 800562c:	f240 11fb 	movw	r1, #507	; 0x1fb
 8005630:	486b      	ldr	r0, [pc, #428]	; (80057e0 <HAL_RCC_OscConfig+0x558>)
 8005632:	f7fb fbf4 	bl	8000e1e <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005636:	4b69      	ldr	r3, [pc, #420]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563e:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005640:	4b66      	ldr	r3, [pc, #408]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d007      	beq.n	800565c <HAL_RCC_OscConfig+0x3d4>
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b18      	cmp	r3, #24
 8005650:	d12d      	bne.n	80056ae <HAL_RCC_OscConfig+0x426>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d128      	bne.n	80056ae <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800565c:	4b5f      	ldr	r3, [pc, #380]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCC_OscConfig+0x3ec>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d001      	beq.n	8005674 <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e2dc      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005674:	f7fb feb4 	bl	80013e0 <HAL_GetREVID>
 8005678:	4602      	mov	r2, r0
 800567a:	f241 0303 	movw	r3, #4099	; 0x1003
 800567e:	429a      	cmp	r2, r3
 8005680:	d80a      	bhi.n	8005698 <HAL_RCC_OscConfig+0x410>
 8005682:	4b56      	ldr	r3, [pc, #344]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	069b      	lsls	r3, r3, #26
 8005690:	4952      	ldr	r1, [pc, #328]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005692:	4313      	orrs	r3, r2
 8005694:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005696:	e05d      	b.n	8005754 <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005698:	4b50      	ldr	r3, [pc, #320]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	494d      	ldr	r1, [pc, #308]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056ac:	e052      	b.n	8005754 <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d035      	beq.n	8005722 <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056b6:	4b49      	ldr	r3, [pc, #292]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a48      	ldr	r2, [pc, #288]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c2:	f7fb fe5f 	bl	8001384 <HAL_GetTick>
 80056c6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056ca:	f7fb fe5b 	bl	8001384 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e2a8      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056dc:	4b3f      	ldr	r3, [pc, #252]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056e8:	f7fb fe7a 	bl	80013e0 <HAL_GetREVID>
 80056ec:	4602      	mov	r2, r0
 80056ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d80a      	bhi.n	800570c <HAL_RCC_OscConfig+0x484>
 80056f6:	4b39      	ldr	r3, [pc, #228]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	069b      	lsls	r3, r3, #26
 8005704:	4935      	ldr	r1, [pc, #212]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
 800570a:	e023      	b.n	8005754 <HAL_RCC_OscConfig+0x4cc>
 800570c:	4b33      	ldr	r3, [pc, #204]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	061b      	lsls	r3, r3, #24
 800571a:	4930      	ldr	r1, [pc, #192]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 800571c:	4313      	orrs	r3, r2
 800571e:	60cb      	str	r3, [r1, #12]
 8005720:	e018      	b.n	8005754 <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a2d      	ldr	r2, [pc, #180]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7fb fe29 	bl	8001384 <HAL_GetTick>
 8005732:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005736:	f7fb fe25 	bl	8001384 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e272      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005748:	4b24      	ldr	r3, [pc, #144]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d047      	beq.n	80057f0 <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_RCC_OscConfig+0x4f2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d004      	beq.n	800577a <HAL_RCC_OscConfig+0x4f2>
 8005770:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8005774:	481a      	ldr	r0, [pc, #104]	; (80057e0 <HAL_RCC_OscConfig+0x558>)
 8005776:	f7fb fb52 	bl	8000e1e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d019      	beq.n	80057b6 <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005782:	4b16      	ldr	r3, [pc, #88]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005786:	4a15      	ldr	r2, [pc, #84]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578e:	f7fb fdf9 	bl	8001384 <HAL_GetTick>
 8005792:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005796:	f7fb fdf5 	bl	8001384 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e242      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80057aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x50e>
 80057b4:	e01c      	b.n	80057f0 <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	4a08      	ldr	r2, [pc, #32]	; (80057dc <HAL_RCC_OscConfig+0x554>)
 80057bc:	f023 0301 	bic.w	r3, r3, #1
 80057c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c2:	f7fb fddf 	bl	8001384 <HAL_GetTick>
 80057c6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057c8:	e00c      	b.n	80057e4 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ca:	f7fb fddb 	bl	8001384 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d905      	bls.n	80057e4 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e228      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
 80057dc:	58024400 	.word	0x58024400
 80057e0:	0800c76c 	.word	0x0800c76c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057e4:	4b71      	ldr	r3, [pc, #452]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 80057e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ec      	bne.n	80057ca <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d043      	beq.n	8005884 <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_RCC_OscConfig+0x58e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d004      	beq.n	8005816 <HAL_RCC_OscConfig+0x58e>
 800580c:	f240 2167 	movw	r1, #615	; 0x267
 8005810:	4867      	ldr	r0, [pc, #412]	; (80059b0 <HAL_RCC_OscConfig+0x728>)
 8005812:	f7fb fb04 	bl	8000e1e <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d019      	beq.n	8005852 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800581e:	4b63      	ldr	r3, [pc, #396]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a62      	ldr	r2, [pc, #392]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800582a:	f7fb fdab 	bl	8001384 <HAL_GetTick>
 800582e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005832:	f7fb fda7 	bl	8001384 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e1f4      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005844:	4b59      	ldr	r3, [pc, #356]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x5aa>
 8005850:	e018      	b.n	8005884 <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005852:	4b56      	ldr	r3, [pc, #344]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a55      	ldr	r2, [pc, #340]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800585c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800585e:	f7fb fd91 	bl	8001384 <HAL_GetTick>
 8005862:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005866:	f7fb fd8d 	bl	8001384 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e1da      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005878:	4b4c      	ldr	r3, [pc, #304]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1f0      	bne.n	8005866 <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8099 	beq.w	80059c4 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00c      	beq.n	80058b4 <HAL_RCC_OscConfig+0x62c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d008      	beq.n	80058b4 <HAL_RCC_OscConfig+0x62c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d004      	beq.n	80058b4 <HAL_RCC_OscConfig+0x62c>
 80058aa:	f240 2191 	movw	r1, #657	; 0x291
 80058ae:	4840      	ldr	r0, [pc, #256]	; (80059b0 <HAL_RCC_OscConfig+0x728>)
 80058b0:	f7fb fab5 	bl	8000e1e <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058b4:	4b3f      	ldr	r3, [pc, #252]	; (80059b4 <HAL_RCC_OscConfig+0x72c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3e      	ldr	r2, [pc, #248]	; (80059b4 <HAL_RCC_OscConfig+0x72c>)
 80058ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058c0:	f7fb fd60 	bl	8001384 <HAL_GetTick>
 80058c4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058c8:	f7fb fd5c 	bl	8001384 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	; 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e1a9      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058da:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <HAL_RCC_OscConfig+0x72c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d106      	bne.n	80058fc <HAL_RCC_OscConfig+0x674>
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6713      	str	r3, [r2, #112]	; 0x70
 80058fa:	e02d      	b.n	8005958 <HAL_RCC_OscConfig+0x6d0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10c      	bne.n	800591e <HAL_RCC_OscConfig+0x696>
 8005904:	4b29      	ldr	r3, [pc, #164]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4a28      	ldr	r2, [pc, #160]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	6713      	str	r3, [r2, #112]	; 0x70
 8005910:	4b26      	ldr	r3, [pc, #152]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005914:	4a25      	ldr	r2, [pc, #148]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005916:	f023 0304 	bic.w	r3, r3, #4
 800591a:	6713      	str	r3, [r2, #112]	; 0x70
 800591c:	e01c      	b.n	8005958 <HAL_RCC_OscConfig+0x6d0>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b05      	cmp	r3, #5
 8005924:	d10c      	bne.n	8005940 <HAL_RCC_OscConfig+0x6b8>
 8005926:	4b21      	ldr	r3, [pc, #132]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	4a20      	ldr	r2, [pc, #128]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 800592c:	f043 0304 	orr.w	r3, r3, #4
 8005930:	6713      	str	r3, [r2, #112]	; 0x70
 8005932:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	6713      	str	r3, [r2, #112]	; 0x70
 800593e:	e00b      	b.n	8005958 <HAL_RCC_OscConfig+0x6d0>
 8005940:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	6713      	str	r3, [r2, #112]	; 0x70
 800594c:	4b17      	ldr	r3, [pc, #92]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005952:	f023 0304 	bic.w	r3, r3, #4
 8005956:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d015      	beq.n	800598c <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005960:	f7fb fd10 	bl	8001384 <HAL_GetTick>
 8005964:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005966:	e00a      	b.n	800597e <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005968:	f7fb fd0c 	bl	8001384 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	; 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e157      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_RCC_OscConfig+0x724>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0ee      	beq.n	8005968 <HAL_RCC_OscConfig+0x6e0>
 800598a:	e01b      	b.n	80059c4 <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fb fcfa 	bl	8001384 <HAL_GetTick>
 8005990:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005992:	e011      	b.n	80059b8 <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7fb fcf6 	bl	8001384 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d908      	bls.n	80059b8 <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e141      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
 80059aa:	bf00      	nop
 80059ac:	58024400 	.word	0x58024400
 80059b0:	0800c76c 	.word	0x0800c76c
 80059b4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059b8:	4b9f      	ldr	r3, [pc, #636]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e7      	bne.n	8005994 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00c      	beq.n	80059e6 <HAL_RCC_OscConfig+0x75e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d008      	beq.n	80059e6 <HAL_RCC_OscConfig+0x75e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d004      	beq.n	80059e6 <HAL_RCC_OscConfig+0x75e>
 80059dc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80059e0:	4896      	ldr	r0, [pc, #600]	; (8005c3c <HAL_RCC_OscConfig+0x9b4>)
 80059e2:	f7fb fa1c 	bl	8000e1e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 811e 	beq.w	8005c2c <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059f0:	4b91      	ldr	r3, [pc, #580]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059f8:	2b18      	cmp	r3, #24
 80059fa:	f000 8115 	beq.w	8005c28 <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	f040 80f6 	bne.w	8005bf4 <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d010      	beq.n	8005a32 <HAL_RCC_OscConfig+0x7aa>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_RCC_OscConfig+0x7aa>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCC_OscConfig+0x7aa>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d004      	beq.n	8005a32 <HAL_RCC_OscConfig+0x7aa>
 8005a28:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005a2c:	4883      	ldr	r0, [pc, #524]	; (8005c3c <HAL_RCC_OscConfig+0x9b4>)
 8005a2e:	f7fb f9f6 	bl	8000e1e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_RCC_OscConfig+0x7ba>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	2b3f      	cmp	r3, #63	; 0x3f
 8005a40:	d904      	bls.n	8005a4c <HAL_RCC_OscConfig+0x7c4>
 8005a42:	f240 21cd 	movw	r1, #717	; 0x2cd
 8005a46:	487d      	ldr	r0, [pc, #500]	; (8005c3c <HAL_RCC_OscConfig+0x9b4>)
 8005a48:	f7fb f9e9 	bl	8000e1e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d904      	bls.n	8005a5e <HAL_RCC_OscConfig+0x7d6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a5c:	d904      	bls.n	8005a68 <HAL_RCC_OscConfig+0x7e0>
 8005a5e:	f240 21ce 	movw	r1, #718	; 0x2ce
 8005a62:	4876      	ldr	r0, [pc, #472]	; (8005c3c <HAL_RCC_OscConfig+0x9b4>)
 8005a64:	f7fb f9db 	bl	8000e1e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_RCC_OscConfig+0x7f0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d904      	bls.n	8005a82 <HAL_RCC_OscConfig+0x7fa>
 8005a78:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005a7c:	486f      	ldr	r0, [pc, #444]	; (8005c3c <HAL_RCC_OscConfig+0x9b4>)
 8005a7e:	f7fb f9ce 	bl	8000e1e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_RCC_OscConfig+0x80a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d904      	bls.n	8005a9c <HAL_RCC_OscConfig+0x814>
 8005a92:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8005a96:	4869      	ldr	r0, [pc, #420]	; (8005c3c <HAL_RCC_OscConfig+0x9b4>)
 8005a98:	f7fb f9c1 	bl	8000e1e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_RCC_OscConfig+0x824>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d904      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x82e>
 8005aac:	f240 21d1 	movw	r1, #721	; 0x2d1
 8005ab0:	4862      	ldr	r0, [pc, #392]	; (8005c3c <HAL_RCC_OscConfig+0x9b4>)
 8005ab2:	f7fb f9b4 	bl	8000e1e <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005abe:	d304      	bcc.n	8005aca <HAL_RCC_OscConfig+0x842>
 8005ac0:	f240 21d2 	movw	r1, #722	; 0x2d2
 8005ac4:	485d      	ldr	r0, [pc, #372]	; (8005c3c <HAL_RCC_OscConfig+0x9b4>)
 8005ac6:	f7fb f9aa 	bl	8000e1e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aca:	4b5b      	ldr	r3, [pc, #364]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a5a      	ldr	r2, [pc, #360]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005ad0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad6:	f7fb fc55 	bl	8001384 <HAL_GetTick>
 8005ada:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ade:	f7fb fc51 	bl	8001384 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e09e      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005af0:	4b51      	ldr	r3, [pc, #324]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f0      	bne.n	8005ade <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005afc:	4b4e      	ldr	r3, [pc, #312]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b00:	4b4f      	ldr	r3, [pc, #316]	; (8005c40 <HAL_RCC_OscConfig+0x9b8>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b0c:	0112      	lsls	r2, r2, #4
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	4949      	ldr	r1, [pc, #292]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	628b      	str	r3, [r1, #40]	; 0x28
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	3b01      	subs	r3, #1
 8005b26:	025b      	lsls	r3, r3, #9
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	3b01      	subs	r3, #1
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b46:	493c      	ldr	r1, [pc, #240]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	4a39      	ldr	r2, [pc, #228]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b58:	4b37      	ldr	r3, [pc, #220]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5c:	4b39      	ldr	r3, [pc, #228]	; (8005c44 <HAL_RCC_OscConfig+0x9bc>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b64:	00d2      	lsls	r2, r2, #3
 8005b66:	4934      	ldr	r1, [pc, #208]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b6c:	4b32      	ldr	r3, [pc, #200]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f023 020c 	bic.w	r2, r3, #12
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	492f      	ldr	r1, [pc, #188]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b7e:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	f023 0202 	bic.w	r2, r3, #2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8a:	492b      	ldr	r1, [pc, #172]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b90:	4b29      	ldr	r3, [pc, #164]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a28      	ldr	r2, [pc, #160]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9c:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	4a25      	ldr	r2, [pc, #148]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ba8:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005bb4:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc0:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fb fbda 	bl	8001384 <HAL_GetTick>
 8005bd0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd4:	f7fb fbd6 	bl	8001384 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e023      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x94c>
 8005bf2:	e01b      	b.n	8005c2c <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf4:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a0f      	ldr	r2, [pc, #60]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fb fbc0 	bl	8001384 <HAL_GetTick>
 8005c04:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fb fbbc 	bl	8001384 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e009      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_RCC_OscConfig+0x9b0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x980>
 8005c26:	e001      	b.n	8005c2c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3728      	adds	r7, #40	; 0x28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	0800c76c 	.word	0x0800c76c
 8005c40:	fffffc0c 	.word	0xfffffc0c
 8005c44:	ffff0007 	.word	0xffff0007

08005c48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e345      	b.n	80062e8 <HAL_RCC_ClockConfig+0x6a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x24>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b3f      	cmp	r3, #63	; 0x3f
 8005c6a:	d904      	bls.n	8005c76 <HAL_RCC_ClockConfig+0x2e>
 8005c6c:	f240 3152 	movw	r1, #850	; 0x352
 8005c70:	4827      	ldr	r0, [pc, #156]	; (8005d10 <HAL_RCC_ClockConfig+0xc8>)
 8005c72:	f7fb f8d4 	bl	8000e1e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d031      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d02e      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d02b      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d028      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d025      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b05      	cmp	r3, #5
 8005c98:	d022      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d01f      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b07      	cmp	r3, #7
 8005ca4:	d01c      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d019      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b09      	cmp	r3, #9
 8005cb0:	d016      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b0a      	cmp	r3, #10
 8005cb6:	d013      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b0b      	cmp	r3, #11
 8005cbc:	d010      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b0c      	cmp	r3, #12
 8005cc2:	d00d      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b0d      	cmp	r3, #13
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b0e      	cmp	r3, #14
 8005cce:	d007      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b0f      	cmp	r3, #15
 8005cd4:	d004      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x98>
 8005cd6:	f240 3153 	movw	r1, #851	; 0x353
 8005cda:	480d      	ldr	r0, [pc, #52]	; (8005d10 <HAL_RCC_ClockConfig+0xc8>)
 8005cdc:	f7fb f89f 	bl	8000e1e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <HAL_RCC_ClockConfig+0xcc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d914      	bls.n	8005d18 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_RCC_ClockConfig+0xcc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 020f 	bic.w	r2, r3, #15
 8005cf6:	4907      	ldr	r1, [pc, #28]	; (8005d14 <HAL_RCC_ClockConfig+0xcc>)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <HAL_RCC_ClockConfig+0xcc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e2eb      	b.n	80062e8 <HAL_RCC_ClockConfig+0x6a0>
 8005d10:	0800c76c 	.word	0x0800c76c
 8005d14:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d029      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	4b9a      	ldr	r3, [pc, #616]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d921      	bls.n	8005d78 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d014      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x11e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d010      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x11e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b50      	cmp	r3, #80	; 0x50
 8005d4a:	d00c      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x11e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b60      	cmp	r3, #96	; 0x60
 8005d52:	d008      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x11e>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b70      	cmp	r3, #112	; 0x70
 8005d5a:	d004      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x11e>
 8005d5c:	f240 316e 	movw	r1, #878	; 0x36e
 8005d60:	488d      	ldr	r0, [pc, #564]	; (8005f98 <HAL_RCC_ClockConfig+0x350>)
 8005d62:	f7fb f85c 	bl	8000e1e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d66:	4b8b      	ldr	r3, [pc, #556]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	4988      	ldr	r1, [pc, #544]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d029      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695a      	ldr	r2, [r3, #20]
 8005d88:	4b82      	ldr	r3, [pc, #520]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d921      	bls.n	8005dd8 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d014      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x17e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x17e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	2b50      	cmp	r3, #80	; 0x50
 8005daa:	d00c      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x17e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	2b60      	cmp	r3, #96	; 0x60
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x17e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	2b70      	cmp	r3, #112	; 0x70
 8005dba:	d004      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x17e>
 8005dbc:	f44f 715e 	mov.w	r1, #888	; 0x378
 8005dc0:	4875      	ldr	r0, [pc, #468]	; (8005f98 <HAL_RCC_ClockConfig+0x350>)
 8005dc2:	f7fb f82c 	bl	8000e1e <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dc6:	4b73      	ldr	r3, [pc, #460]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	4970      	ldr	r1, [pc, #448]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02d      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	4b6a      	ldr	r3, [pc, #424]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d925      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d018      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x1e6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e04:	d013      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x1e6>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e0e:	d00e      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x1e6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e18:	d009      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x1e6>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e22:	d004      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x1e6>
 8005e24:	f240 3182 	movw	r1, #898	; 0x382
 8005e28:	485b      	ldr	r0, [pc, #364]	; (8005f98 <HAL_RCC_ClockConfig+0x350>)
 8005e2a:	f7fa fff8 	bl	8000e1e <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e2e:	4b59      	ldr	r3, [pc, #356]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	4956      	ldr	r1, [pc, #344]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d029      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	4b50      	ldr	r3, [pc, #320]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d921      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d014      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x246>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d010      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x246>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	2b50      	cmp	r3, #80	; 0x50
 8005e72:	d00c      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x246>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	2b60      	cmp	r3, #96	; 0x60
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x246>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	2b70      	cmp	r3, #112	; 0x70
 8005e82:	d004      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x246>
 8005e84:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8005e88:	4843      	ldr	r0, [pc, #268]	; (8005f98 <HAL_RCC_ClockConfig+0x350>)
 8005e8a:	f7fa ffc8 	bl	8000e1e <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e8e:	4b41      	ldr	r3, [pc, #260]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	493e      	ldr	r1, [pc, #248]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d039      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	4b38      	ldr	r3, [pc, #224]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d931      	bls.n	8005f20 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d024      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d020      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	2b09      	cmp	r3, #9
 8005ed2:	d01c      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b0a      	cmp	r3, #10
 8005eda:	d018      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b0b      	cmp	r3, #11
 8005ee2:	d014      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d010      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b0d      	cmp	r3, #13
 8005ef2:	d00c      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b0e      	cmp	r3, #14
 8005efa:	d008      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b0f      	cmp	r3, #15
 8005f02:	d004      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x2c6>
 8005f04:	f240 3197 	movw	r1, #919	; 0x397
 8005f08:	4823      	ldr	r0, [pc, #140]	; (8005f98 <HAL_RCC_ClockConfig+0x350>)
 8005f0a:	f7fa ff88 	bl	8000e1e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f0e:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f023 020f 	bic.w	r2, r3, #15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	491e      	ldr	r1, [pc, #120]	; (8005f94 <HAL_RCC_ClockConfig+0x34c>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80a2 	beq.w	8006072 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d032      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3e:	d02d      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005f48:	d028      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f52:	d023      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005f5c:	d01e      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f66:	d019      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005f70:	d014      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005f7a:	d00f      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f86:	f240 319f 	movw	r1, #927	; 0x39f
 8005f8a:	4803      	ldr	r0, [pc, #12]	; (8005f98 <HAL_RCC_ClockConfig+0x350>)
 8005f8c:	f7fa ff47 	bl	8000e1e <assert_failed>
 8005f90:	e004      	b.n	8005f9c <HAL_RCC_ClockConfig+0x354>
 8005f92:	bf00      	nop
 8005f94:	58024400 	.word	0x58024400
 8005f98:	0800c76c 	.word	0x0800c76c
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d010      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x37e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00c      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x37e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d008      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x37e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d004      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x37e>
 8005fbc:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8005fc0:	4858      	ldr	r0, [pc, #352]	; (8006124 <HAL_RCC_ClockConfig+0x4dc>)
 8005fc2:	f7fa ff2c 	bl	8000e1e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005fc6:	4b58      	ldr	r3, [pc, #352]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	4955      	ldr	r1, [pc, #340]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d107      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fe0:	4b51      	ldr	r3, [pc, #324]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d121      	bne.n	8006030 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e17b      	b.n	80062e8 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ff8:	4b4b      	ldr	r3, [pc, #300]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d115      	bne.n	8006030 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e16f      	b.n	80062e8 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d107      	bne.n	8006020 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006010:	4b45      	ldr	r3, [pc, #276]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e163      	b.n	80062e8 <HAL_RCC_ClockConfig+0x6a0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006020:	4b41      	ldr	r3, [pc, #260]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e15b      	b.n	80062e8 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006030:	4b3d      	ldr	r3, [pc, #244]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f023 0207 	bic.w	r2, r3, #7
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	493a      	ldr	r1, [pc, #232]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 800603e:	4313      	orrs	r3, r2
 8006040:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006042:	f7fb f99f 	bl	8001384 <HAL_GetTick>
 8006046:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006048:	e00a      	b.n	8006060 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604a:	f7fb f99b 	bl	8001384 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f241 3288 	movw	r2, #5000	; 0x1388
 8006058:	4293      	cmp	r3, r2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e143      	b.n	80062e8 <HAL_RCC_ClockConfig+0x6a0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006060:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	429a      	cmp	r2, r3
 8006070:	d1eb      	bne.n	800604a <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d039      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	4b29      	ldr	r3, [pc, #164]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	429a      	cmp	r2, r3
 800608c:	d231      	bcs.n	80060f2 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d024      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	2b08      	cmp	r3, #8
 800609c:	d020      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	d01c      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b0a      	cmp	r3, #10
 80060ac:	d018      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b0b      	cmp	r3, #11
 80060b4:	d014      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d010      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	2b0d      	cmp	r3, #13
 80060c4:	d00c      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b0e      	cmp	r3, #14
 80060cc:	d008      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b0f      	cmp	r3, #15
 80060d4:	d004      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x498>
 80060d6:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 80060da:	4812      	ldr	r0, [pc, #72]	; (8006124 <HAL_RCC_ClockConfig+0x4dc>)
 80060dc:	f7fa fe9f 	bl	8000e1e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e0:	4b11      	ldr	r3, [pc, #68]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f023 020f 	bic.w	r2, r3, #15
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	490e      	ldr	r1, [pc, #56]	; (8006128 <HAL_RCC_ClockConfig+0x4e0>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060f2:	4b0e      	ldr	r3, [pc, #56]	; (800612c <HAL_RCC_ClockConfig+0x4e4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d217      	bcs.n	8006130 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <HAL_RCC_ClockConfig+0x4e4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f023 020f 	bic.w	r2, r3, #15
 8006108:	4908      	ldr	r1, [pc, #32]	; (800612c <HAL_RCC_ClockConfig+0x4e4>)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <HAL_RCC_ClockConfig+0x4e4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d008      	beq.n	8006130 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e0e2      	b.n	80062e8 <HAL_RCC_ClockConfig+0x6a0>
 8006122:	bf00      	nop
 8006124:	0800c76c 	.word	0x0800c76c
 8006128:	58024400 	.word	0x58024400
 800612c:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d029      	beq.n	8006190 <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	4b6b      	ldr	r3, [pc, #428]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006148:	429a      	cmp	r2, r3
 800614a:	d221      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d014      	beq.n	800617e <HAL_RCC_ClockConfig+0x536>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	d010      	beq.n	800617e <HAL_RCC_ClockConfig+0x536>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b50      	cmp	r3, #80	; 0x50
 8006162:	d00c      	beq.n	800617e <HAL_RCC_ClockConfig+0x536>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b60      	cmp	r3, #96	; 0x60
 800616a:	d008      	beq.n	800617e <HAL_RCC_ClockConfig+0x536>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b70      	cmp	r3, #112	; 0x70
 8006172:	d004      	beq.n	800617e <HAL_RCC_ClockConfig+0x536>
 8006174:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8006178:	485e      	ldr	r0, [pc, #376]	; (80062f4 <HAL_RCC_ClockConfig+0x6ac>)
 800617a:	f7fa fe50 	bl	8000e1e <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800617e:	4b5c      	ldr	r3, [pc, #368]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	4959      	ldr	r1, [pc, #356]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 800618c:	4313      	orrs	r3, r2
 800618e:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d029      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695a      	ldr	r2, [r3, #20]
 80061a0:	4b53      	ldr	r3, [pc, #332]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d221      	bcs.n	80061f0 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d014      	beq.n	80061de <HAL_RCC_ClockConfig+0x596>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	d010      	beq.n	80061de <HAL_RCC_ClockConfig+0x596>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	2b50      	cmp	r3, #80	; 0x50
 80061c2:	d00c      	beq.n	80061de <HAL_RCC_ClockConfig+0x596>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	2b60      	cmp	r3, #96	; 0x60
 80061ca:	d008      	beq.n	80061de <HAL_RCC_ClockConfig+0x596>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	2b70      	cmp	r3, #112	; 0x70
 80061d2:	d004      	beq.n	80061de <HAL_RCC_ClockConfig+0x596>
 80061d4:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80061d8:	4846      	ldr	r0, [pc, #280]	; (80062f4 <HAL_RCC_ClockConfig+0x6ac>)
 80061da:	f7fa fe20 	bl	8000e1e <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061de:	4b44      	ldr	r3, [pc, #272]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4941      	ldr	r1, [pc, #260]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02d      	beq.n	8006258 <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699a      	ldr	r2, [r3, #24]
 8006200:	4b3b      	ldr	r3, [pc, #236]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006208:	429a      	cmp	r2, r3
 800620a:	d225      	bcs.n	8006258 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d018      	beq.n	8006246 <HAL_RCC_ClockConfig+0x5fe>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621c:	d013      	beq.n	8006246 <HAL_RCC_ClockConfig+0x5fe>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006226:	d00e      	beq.n	8006246 <HAL_RCC_ClockConfig+0x5fe>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006230:	d009      	beq.n	8006246 <HAL_RCC_ClockConfig+0x5fe>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800623a:	d004      	beq.n	8006246 <HAL_RCC_ClockConfig+0x5fe>
 800623c:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8006240:	482c      	ldr	r0, [pc, #176]	; (80062f4 <HAL_RCC_ClockConfig+0x6ac>)
 8006242:	f7fa fdec 	bl	8000e1e <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006246:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	4927      	ldr	r1, [pc, #156]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 8006254:	4313      	orrs	r3, r2
 8006256:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d029      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	4b21      	ldr	r3, [pc, #132]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006270:	429a      	cmp	r2, r3
 8006272:	d221      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d014      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x65e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	d010      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x65e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	2b50      	cmp	r3, #80	; 0x50
 800628a:	d00c      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x65e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	2b60      	cmp	r3, #96	; 0x60
 8006292:	d008      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x65e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	2b70      	cmp	r3, #112	; 0x70
 800629a:	d004      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x65e>
 800629c:	f240 4112 	movw	r1, #1042	; 0x412
 80062a0:	4814      	ldr	r0, [pc, #80]	; (80062f4 <HAL_RCC_ClockConfig+0x6ac>)
 80062a2:	f7fa fdbc 	bl	8000e1e <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062a6:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	490f      	ldr	r1, [pc, #60]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062b8:	f000 f824 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80062bc:	4601      	mov	r1, r0
 80062be:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <HAL_RCC_ClockConfig+0x6a8>)
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	0a1b      	lsrs	r3, r3, #8
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	4a0b      	ldr	r2, [pc, #44]	; (80062f8 <HAL_RCC_ClockConfig+0x6b0>)
 80062ca:	5cd3      	ldrb	r3, [r2, r3]
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	fa21 f303 	lsr.w	r3, r1, r3
 80062d4:	4a09      	ldr	r2, [pc, #36]	; (80062fc <HAL_RCC_ClockConfig+0x6b4>)
 80062d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <HAL_RCC_ClockConfig+0x6b8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fb f807 	bl	80012f0 <HAL_InitTick>
 80062e2:	4603      	mov	r3, r0
 80062e4:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80062e6:	7afb      	ldrb	r3, [r7, #11]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	58024400 	.word	0x58024400
 80062f4:	0800c76c 	.word	0x0800c76c
 80062f8:	0800c8c8 	.word	0x0800c8c8
 80062fc:	24000000 	.word	0x24000000
 8006300:	24000008 	.word	0x24000008

08006304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006304:	b480      	push	{r7}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800630a:	4baf      	ldr	r3, [pc, #700]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006312:	2b18      	cmp	r3, #24
 8006314:	f200 814e 	bhi.w	80065b4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006318:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <HAL_RCC_GetSysClockFreq+0x1c>)
 800631a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631e:	bf00      	nop
 8006320:	08006385 	.word	0x08006385
 8006324:	080065b5 	.word	0x080065b5
 8006328:	080065b5 	.word	0x080065b5
 800632c:	080065b5 	.word	0x080065b5
 8006330:	080065b5 	.word	0x080065b5
 8006334:	080065b5 	.word	0x080065b5
 8006338:	080065b5 	.word	0x080065b5
 800633c:	080065b5 	.word	0x080065b5
 8006340:	080063ab 	.word	0x080063ab
 8006344:	080065b5 	.word	0x080065b5
 8006348:	080065b5 	.word	0x080065b5
 800634c:	080065b5 	.word	0x080065b5
 8006350:	080065b5 	.word	0x080065b5
 8006354:	080065b5 	.word	0x080065b5
 8006358:	080065b5 	.word	0x080065b5
 800635c:	080065b5 	.word	0x080065b5
 8006360:	080063b1 	.word	0x080063b1
 8006364:	080065b5 	.word	0x080065b5
 8006368:	080065b5 	.word	0x080065b5
 800636c:	080065b5 	.word	0x080065b5
 8006370:	080065b5 	.word	0x080065b5
 8006374:	080065b5 	.word	0x080065b5
 8006378:	080065b5 	.word	0x080065b5
 800637c:	080065b5 	.word	0x080065b5
 8006380:	080063b7 	.word	0x080063b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006384:	4b90      	ldr	r3, [pc, #576]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d009      	beq.n	80063a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006390:	4b8d      	ldr	r3, [pc, #564]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	08db      	lsrs	r3, r3, #3
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	4a8c      	ldr	r2, [pc, #560]	; (80065cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
 80063a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80063a2:	e10a      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063a4:	4b89      	ldr	r3, [pc, #548]	; (80065cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80063a6:	61bb      	str	r3, [r7, #24]
    break;
 80063a8:	e107      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80063aa:	4b89      	ldr	r3, [pc, #548]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80063ac:	61bb      	str	r3, [r7, #24]
    break;
 80063ae:	e104      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80063b0:	4b88      	ldr	r3, [pc, #544]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80063b2:	61bb      	str	r3, [r7, #24]
    break;
 80063b4:	e101      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063b6:	4b84      	ldr	r3, [pc, #528]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063c0:	4b81      	ldr	r3, [pc, #516]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063cc:	4b7e      	ldr	r3, [pc, #504]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063d6:	4b7c      	ldr	r3, [pc, #496]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	08db      	lsrs	r3, r3, #3
 80063dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80da 	beq.w	80065ae <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d05a      	beq.n	80064b6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006400:	2b01      	cmp	r3, #1
 8006402:	d302      	bcc.n	800640a <HAL_RCC_GetSysClockFreq+0x106>
 8006404:	2b02      	cmp	r3, #2
 8006406:	d078      	beq.n	80064fa <HAL_RCC_GetSysClockFreq+0x1f6>
 8006408:	e099      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800640a:	4b6f      	ldr	r3, [pc, #444]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d02d      	beq.n	8006472 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006416:	4b6c      	ldr	r3, [pc, #432]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	08db      	lsrs	r3, r3, #3
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	4a6a      	ldr	r2, [pc, #424]	; (80065cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006440:	4b61      	ldr	r3, [pc, #388]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006450:	ed97 6a02 	vldr	s12, [r7, #8]
 8006454:	eddf 5a60 	vldr	s11, [pc, #384]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006470:	e087      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80065dc <HAL_RCC_GetSysClockFreq+0x2d8>
 8006480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006484:	4b50      	ldr	r3, [pc, #320]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006494:	ed97 6a02 	vldr	s12, [r7, #8]
 8006498:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800649c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064b4:	e065      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80064c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c8:	4b3f      	ldr	r3, [pc, #252]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80064dc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80064e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f8:	e043      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006504:	eddf 6a37 	vldr	s13, [pc, #220]	; 80065e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650c:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006520:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800653c:	e021      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	ee07 3a90 	vmov	s15, r3
 8006544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006548:	eddf 6a25 	vldr	s13, [pc, #148]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800654c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006560:	ed97 6a02 	vldr	s12, [r7, #8]
 8006564:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006580:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	0a5b      	lsrs	r3, r3, #9
 8006588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658c:	3301      	adds	r3, #1
 800658e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800659a:	edd7 6a07 	vldr	s13, [r7, #28]
 800659e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a6:	ee17 3a90 	vmov	r3, s15
 80065aa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80065ac:	e005      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
    break;
 80065b2:	e002      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80065b6:	61bb      	str	r3, [r7, #24]
    break;
 80065b8:	bf00      	nop
  }

  return sysclockfreq;
 80065ba:	69bb      	ldr	r3, [r7, #24]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3724      	adds	r7, #36	; 0x24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	58024400 	.word	0x58024400
 80065cc:	03d09000 	.word	0x03d09000
 80065d0:	003d0900 	.word	0x003d0900
 80065d4:	00b71b00 	.word	0x00b71b00
 80065d8:	46000000 	.word	0x46000000
 80065dc:	4c742400 	.word	0x4c742400
 80065e0:	4a742400 	.word	0x4a742400
 80065e4:	4b371b00 	.word	0x4b371b00

080065e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065ec:	f001 fc94 	bl	8007f18 <HAL_RCCEx_GetD1SysClockFreq>
 80065f0:	4601      	mov	r1, r0
 80065f2:	4b08      	ldr	r3, [pc, #32]	; (8006614 <HAL_RCC_GetHCLKFreq+0x2c>)
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	4a07      	ldr	r2, [pc, #28]	; (8006618 <HAL_RCC_GetHCLKFreq+0x30>)
 80065fc:	5cd3      	ldrb	r3, [r2, r3]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	fa21 f303 	lsr.w	r3, r1, r3
 8006606:	4a05      	ldr	r2, [pc, #20]	; (800661c <HAL_RCC_GetHCLKFreq+0x34>)
 8006608:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800660a:	4b04      	ldr	r3, [pc, #16]	; (800661c <HAL_RCC_GetHCLKFreq+0x34>)
 800660c:	681b      	ldr	r3, [r3, #0]
}
 800660e:	4618      	mov	r0, r3
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	58024400 	.word	0x58024400
 8006618:	0800c8c8 	.word	0x0800c8c8
 800661c:	24000004 	.word	0x24000004

08006620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006624:	f7ff ffe0 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8006628:	4601      	mov	r1, r0
 800662a:	4b06      	ldr	r3, [pc, #24]	; (8006644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	091b      	lsrs	r3, r3, #4
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	4a04      	ldr	r2, [pc, #16]	; (8006648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006636:	5cd3      	ldrb	r3, [r2, r3]
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	58024400 	.word	0x58024400
 8006648:	0800c8c8 	.word	0x0800c8c8

0800664c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006650:	f7ff ffca 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8006654:	4601      	mov	r1, r0
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4a04      	ldr	r2, [pc, #16]	; (8006674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006662:	5cd3      	ldrb	r3, [r2, r3]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	fa21 f303 	lsr.w	r3, r1, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	58024400 	.word	0x58024400
 8006674:	0800c8c8 	.word	0x0800c8c8

08006678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006680:	2300      	movs	r3, #0
 8006682:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006684:	2300      	movs	r3, #0
 8006686:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d03d      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669c:	d013      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800669e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a2:	d802      	bhi.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80066a8:	e01f      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80066aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ae:	d013      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80066b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066b4:	d01c      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80066b6:	e018      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b8:	4baf      	ldr	r3, [pc, #700]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	4aae      	ldr	r2, [pc, #696]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066c4:	e015      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2102      	movs	r1, #2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 fc3f 	bl	8007f50 <RCCEx_PLL2_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066d6:	e00c      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3324      	adds	r3, #36	; 0x24
 80066dc:	2102      	movs	r1, #2
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 fd58 	bl	8008194 <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066e8:	e003      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	75fb      	strb	r3, [r7, #23]
      break;
 80066ee:	e000      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80066f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066f8:	4b9f      	ldr	r3, [pc, #636]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006704:	499c      	ldr	r1, [pc, #624]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006706:	4313      	orrs	r3, r2
 8006708:	650b      	str	r3, [r1, #80]	; 0x50
 800670a:	e001      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d03d      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006720:	2b04      	cmp	r3, #4
 8006722:	d826      	bhi.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006741 	.word	0x08006741
 8006730:	0800674f 	.word	0x0800674f
 8006734:	08006761 	.word	0x08006761
 8006738:	08006779 	.word	0x08006779
 800673c:	08006779 	.word	0x08006779
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006740:	4b8d      	ldr	r3, [pc, #564]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	4a8c      	ldr	r2, [pc, #560]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800674c:	e015      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3304      	adds	r3, #4
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f001 fbfb 	bl	8007f50 <RCCEx_PLL2_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800675e:	e00c      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3324      	adds	r3, #36	; 0x24
 8006764:	2100      	movs	r1, #0
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fd14 	bl	8008194 <RCCEx_PLL3_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006770:	e003      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
      break;
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006780:	4b7d      	ldr	r3, [pc, #500]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006784:	f023 0207 	bic.w	r2, r3, #7
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678c:	497a      	ldr	r1, [pc, #488]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800678e:	4313      	orrs	r3, r2
 8006790:	650b      	str	r3, [r1, #80]	; 0x50
 8006792:	e001      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d03e      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a8:	2b80      	cmp	r3, #128	; 0x80
 80067aa:	d01c      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80067ac:	2b80      	cmp	r3, #128	; 0x80
 80067ae:	d804      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x142>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d00d      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80067b8:	e01e      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80067ba:	2bc0      	cmp	r3, #192	; 0xc0
 80067bc:	d01f      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 80067be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c2:	d01e      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80067c4:	e018      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c6:	4b6c      	ldr	r3, [pc, #432]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4a6b      	ldr	r2, [pc, #428]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80067d2:	e017      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fbb8 	bl	8007f50 <RCCEx_PLL2_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80067e4:	e00e      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3324      	adds	r3, #36	; 0x24
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 fcd1 	bl	8008194 <RCCEx_PLL3_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80067f6:	e005      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	75fb      	strb	r3, [r7, #23]
      break;
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800680a:	4b5b      	ldr	r3, [pc, #364]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800680c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006816:	4958      	ldr	r1, [pc, #352]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006818:	4313      	orrs	r3, r2
 800681a:	650b      	str	r3, [r1, #80]	; 0x50
 800681c:	e001      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682a:	2b00      	cmp	r3, #0
 800682c:	d044      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006838:	d01f      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800683a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800683e:	d805      	bhi.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006848:	d00e      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800684a:	e01f      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800684c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006850:	d01f      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006856:	d01e      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006858:	e018      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685a:	4b47      	ldr	r3, [pc, #284]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	4a46      	ldr	r2, [pc, #280]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006866:	e017      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	2100      	movs	r1, #0
 800686e:	4618      	mov	r0, r3
 8006870:	f001 fb6e 	bl	8007f50 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006878:	e00e      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3324      	adds	r3, #36	; 0x24
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fc87 	bl	8008194 <RCCEx_PLL3_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800688a:	e005      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
      break;
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800689e:	4b36      	ldr	r3, [pc, #216]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068ac:	4932      	ldr	r1, [pc, #200]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	658b      	str	r3, [r1, #88]	; 0x58
 80068b2:	e001      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d044      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ce:	d01f      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80068d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d4:	d805      	bhi.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80068da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068de:	d00e      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80068e0:	e01f      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80068e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068e6:	d01f      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80068e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ec:	d01e      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80068ee:	e018      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f0:	4b21      	ldr	r3, [pc, #132]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a20      	ldr	r2, [pc, #128]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068fc:	e017      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3304      	adds	r3, #4
 8006902:	2100      	movs	r1, #0
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fb23 	bl	8007f50 <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800690e:	e00e      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3324      	adds	r3, #36	; 0x24
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fc3c 	bl	8008194 <RCCEx_PLL3_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006920:	e005      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	75fb      	strb	r3, [r7, #23]
      break;
 8006926:	e002      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006928:	bf00      	nop
 800692a:	e000      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800692c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006934:	4b10      	ldr	r3, [pc, #64]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006938:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006942:	490d      	ldr	r1, [pc, #52]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006944:	4313      	orrs	r3, r2
 8006946:	658b      	str	r3, [r1, #88]	; 0x58
 8006948:	e001      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d035      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695e:	2b10      	cmp	r3, #16
 8006960:	d00c      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006962:	2b10      	cmp	r3, #16
 8006964:	d802      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01b      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800696a:	e017      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d00c      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006970:	2b30      	cmp	r3, #48	; 0x30
 8006972:	d018      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006974:	e012      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006976:	bf00      	nop
 8006978:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800697c:	4baf      	ldr	r3, [pc, #700]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	4aae      	ldr	r2, [pc, #696]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006986:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006988:	e00e      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3304      	adds	r3, #4
 800698e:	2102      	movs	r1, #2
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fadd 	bl	8007f50 <RCCEx_PLL2_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800699a:	e005      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
      break;
 80069a0:	e002      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80069a2:	bf00      	nop
 80069a4:	e000      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80069a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069ae:	4ba3      	ldr	r3, [pc, #652]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ba:	49a0      	ldr	r1, [pc, #640]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069c0:	e001      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d042      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069da:	d01f      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80069dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e0:	d805      	bhi.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ea:	d00e      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80069ec:	e01f      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80069ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069f2:	d01f      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80069f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f8:	d01e      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80069fa:	e018      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069fc:	4b8f      	ldr	r3, [pc, #572]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	4a8e      	ldr	r2, [pc, #568]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a08:	e017      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	2100      	movs	r1, #0
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fa9d 	bl	8007f50 <RCCEx_PLL2_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a1a:	e00e      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3324      	adds	r3, #36	; 0x24
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 fbb6 	bl	8008194 <RCCEx_PLL3_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a2c:	e005      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
      break;
 8006a32:	e002      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006a34:	bf00      	nop
 8006a36:	e000      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d109      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a40:	4b7e      	ldr	r3, [pc, #504]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4c:	497b      	ldr	r1, [pc, #492]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	650b      	str	r3, [r1, #80]	; 0x50
 8006a52:	e001      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d042      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a6c:	d01b      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a72:	d805      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d022      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7c:	d00a      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006a7e:	e01b      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006a80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a84:	d01d      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006a86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a8a:	d01c      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006a8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a90:	d01b      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006a92:	e011      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3304      	adds	r3, #4
 8006a98:	2101      	movs	r1, #1
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 fa58 	bl	8007f50 <RCCEx_PLL2_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006aa4:	e012      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3324      	adds	r3, #36	; 0x24
 8006aaa:	2101      	movs	r1, #1
 8006aac:	4618      	mov	r0, r3
 8006aae:	f001 fb71 	bl	8008194 <RCCEx_PLL3_Config>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ab6:	e009      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
      break;
 8006abc:	e006      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006abe:	bf00      	nop
 8006ac0:	e004      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006ac2:	bf00      	nop
 8006ac4:	e002      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e000      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ad2:	4b5a      	ldr	r3, [pc, #360]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ade:	4957      	ldr	r1, [pc, #348]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	650b      	str	r3, [r1, #80]	; 0x50
 8006ae4:	e001      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d044      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b00:	d01b      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b06:	d805      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d022      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b10:	d00a      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006b12:	e01b      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b18:	d01d      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b1e:	d01c      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006b20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b24:	d01b      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006b26:	e011      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 fa0e 	bl	8007f50 <RCCEx_PLL2_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b38:	e012      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3324      	adds	r3, #36	; 0x24
 8006b3e:	2101      	movs	r1, #1
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 fb27 	bl	8008194 <RCCEx_PLL3_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b4a:	e009      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b50:	e006      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b52:	bf00      	nop
 8006b54:	e004      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b56:	bf00      	nop
 8006b58:	e002      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e000      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b66:	4b35      	ldr	r3, [pc, #212]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b74:	4931      	ldr	r1, [pc, #196]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	658b      	str	r3, [r1, #88]	; 0x58
 8006b7a:	e001      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
 8006b7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d02d      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b94:	d005      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9a:	d009      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d013      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006ba0:	e00f      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba2:	4b26      	ldr	r3, [pc, #152]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	4a25      	ldr	r2, [pc, #148]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006bae:	e00c      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 f9ca 	bl	8007f50 <RCCEx_PLL2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc6:	e000      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bd0:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bdc:	4917      	ldr	r1, [pc, #92]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	650b      	str	r3, [r1, #80]	; 0x50
 8006be2:	e001      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d037      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d81b      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c41 	.word	0x08006c41
 8006c08:	08006c15 	.word	0x08006c15
 8006c0c:	08006c23 	.word	0x08006c23
 8006c10:	08006c41 	.word	0x08006c41
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c20:	e00f      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3304      	adds	r3, #4
 8006c26:	2102      	movs	r1, #2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 f991 	bl	8007f50 <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c32:	e006      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e003      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006c3a:	bf00      	nop
 8006c3c:	58024400 	.word	0x58024400
      break;
 8006c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c48:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4c:	f023 0203 	bic.w	r2, r3, #3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c54:	4901      	ldr	r1, [pc, #4]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c5a:	e003      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8006c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
 8006c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 829b 	beq.w	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7c:	f000 81a9 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c8a:	f000 81a2 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c94:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8006c98:	f000 819b 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ca2:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8006ca6:	f000 8194 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cb0:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8006cb4:	f000 818d 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cbe:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8006cc2:	f000 8186 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ccc:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8006cd0:	f000 817f 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cda:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8006cde:	f000 8178 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ce8:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8006cec:	f000 8171 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf6:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8006cfa:	f000 816a 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d04:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8006d08:	f000 8163 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d12:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8006d16:	f000 815c 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d20:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8006d24:	f000 8155 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d2e:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8006d32:	f000 814e 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3c:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8006d40:	f000 8147 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d4a:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8006d4e:	f000 8140 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d58:	4aa8      	ldr	r2, [pc, #672]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	f000 8139 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d66:	4aa6      	ldr	r2, [pc, #664]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	f000 8132 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d74:	4aa3      	ldr	r2, [pc, #652]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	f000 812b 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d82:	4aa1      	ldr	r2, [pc, #644]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	f000 8124 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d90:	4a9e      	ldr	r2, [pc, #632]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	f000 811d 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d9e:	4a9c      	ldr	r2, [pc, #624]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	f000 8116 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dac:	4a99      	ldr	r2, [pc, #612]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	f000 810f 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dba:	4a97      	ldr	r2, [pc, #604]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	f000 8108 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dc8:	4a94      	ldr	r2, [pc, #592]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f000 8101 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dd6:	4a92      	ldr	r2, [pc, #584]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	f000 80fa 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006de4:	4a8f      	ldr	r2, [pc, #572]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	f000 80f3 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006df2:	4a8d      	ldr	r2, [pc, #564]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	f000 80ec 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e00:	4a8a      	ldr	r2, [pc, #552]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f000 80e5 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e0e:	4a88      	ldr	r2, [pc, #544]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	f000 80de 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e1c:	4a85      	ldr	r2, [pc, #532]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	f000 80d7 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e2a:	4a83      	ldr	r2, [pc, #524]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	f000 80d0 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e38:	4a80      	ldr	r2, [pc, #512]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f000 80c9 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e46:	4a7e      	ldr	r2, [pc, #504]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	f000 80c2 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e54:	4a7b      	ldr	r2, [pc, #492]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	f000 80bb 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e62:	4a79      	ldr	r2, [pc, #484]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	f000 80b4 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e70:	4a76      	ldr	r2, [pc, #472]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	f000 80ad 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e7e:	4a74      	ldr	r2, [pc, #464]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	f000 80a6 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e8c:	4a71      	ldr	r2, [pc, #452]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	f000 809f 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e9a:	4a6f      	ldr	r2, [pc, #444]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	f000 8098 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ea8:	4a6c      	ldr	r2, [pc, #432]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	f000 8091 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eb6:	4a6a      	ldr	r2, [pc, #424]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	f000 808a 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ec4:	4a67      	ldr	r2, [pc, #412]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f000 8083 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ed2:	4a65      	ldr	r2, [pc, #404]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d07c      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ede:	4a63      	ldr	r2, [pc, #396]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d076      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eea:	4a61      	ldr	r2, [pc, #388]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d070      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ef6:	4a5f      	ldr	r2, [pc, #380]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d06a      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f02:	4a5d      	ldr	r2, [pc, #372]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d064      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f0e:	4a5b      	ldr	r2, [pc, #364]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d05e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f1a:	4a59      	ldr	r2, [pc, #356]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d058      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f26:	4a57      	ldr	r2, [pc, #348]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d052      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f32:	4a55      	ldr	r2, [pc, #340]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d04c      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f3e:	4a53      	ldr	r2, [pc, #332]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d046      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f4a:	4a51      	ldr	r2, [pc, #324]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d040      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f56:	4a4f      	ldr	r2, [pc, #316]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d03a      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f62:	4a4d      	ldr	r2, [pc, #308]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d034      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6e:	4a4b      	ldr	r2, [pc, #300]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d02e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f7a:	4a49      	ldr	r2, [pc, #292]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d028      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f86:	4a47      	ldr	r2, [pc, #284]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f92:	4a45      	ldr	r2, [pc, #276]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d01c      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f9e:	4a43      	ldr	r2, [pc, #268]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d016      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006faa:	4a41      	ldr	r2, [pc, #260]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d010      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fb6:	4a3f      	ldr	r2, [pc, #252]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00a      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fc2:	4a3d      	ldr	r2, [pc, #244]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fc8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006fcc:	483b      	ldr	r0, [pc, #236]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8006fce:	f7f9 ff26 	bl	8000e1e <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fd2:	4b3b      	ldr	r3, [pc, #236]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a3a      	ldr	r2, [pc, #232]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8006fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fde:	f7fa f9d1 	bl	8001384 <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe4:	e06e      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe6:	f7fa f9cd 	bl	8001384 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b64      	cmp	r3, #100	; 0x64
 8006ff2:	d967      	bls.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	75fb      	strb	r3, [r7, #23]
        break;
 8006ff8:	e06a      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8006ffa:	bf00      	nop
 8006ffc:	00010300 	.word	0x00010300
 8007000:	00011300 	.word	0x00011300
 8007004:	00012300 	.word	0x00012300
 8007008:	00013300 	.word	0x00013300
 800700c:	00014300 	.word	0x00014300
 8007010:	00015300 	.word	0x00015300
 8007014:	00016300 	.word	0x00016300
 8007018:	00017300 	.word	0x00017300
 800701c:	00018300 	.word	0x00018300
 8007020:	00019300 	.word	0x00019300
 8007024:	0001a300 	.word	0x0001a300
 8007028:	0001b300 	.word	0x0001b300
 800702c:	0001c300 	.word	0x0001c300
 8007030:	0001d300 	.word	0x0001d300
 8007034:	0001e300 	.word	0x0001e300
 8007038:	0001f300 	.word	0x0001f300
 800703c:	00020300 	.word	0x00020300
 8007040:	00021300 	.word	0x00021300
 8007044:	00022300 	.word	0x00022300
 8007048:	00023300 	.word	0x00023300
 800704c:	00024300 	.word	0x00024300
 8007050:	00025300 	.word	0x00025300
 8007054:	00026300 	.word	0x00026300
 8007058:	00027300 	.word	0x00027300
 800705c:	00028300 	.word	0x00028300
 8007060:	00029300 	.word	0x00029300
 8007064:	0002a300 	.word	0x0002a300
 8007068:	0002b300 	.word	0x0002b300
 800706c:	0002c300 	.word	0x0002c300
 8007070:	0002d300 	.word	0x0002d300
 8007074:	0002e300 	.word	0x0002e300
 8007078:	0002f300 	.word	0x0002f300
 800707c:	00030300 	.word	0x00030300
 8007080:	00031300 	.word	0x00031300
 8007084:	00032300 	.word	0x00032300
 8007088:	00033300 	.word	0x00033300
 800708c:	00034300 	.word	0x00034300
 8007090:	00035300 	.word	0x00035300
 8007094:	00036300 	.word	0x00036300
 8007098:	00037300 	.word	0x00037300
 800709c:	00038300 	.word	0x00038300
 80070a0:	00039300 	.word	0x00039300
 80070a4:	0003a300 	.word	0x0003a300
 80070a8:	0003b300 	.word	0x0003b300
 80070ac:	0003c300 	.word	0x0003c300
 80070b0:	0003d300 	.word	0x0003d300
 80070b4:	0003e300 	.word	0x0003e300
 80070b8:	0003f300 	.word	0x0003f300
 80070bc:	0800c7a4 	.word	0x0800c7a4
 80070c0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070c4:	4bb9      	ldr	r3, [pc, #740]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d08a      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d166      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070d6:	4bb6      	ldr	r3, [pc, #728]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070e0:	4053      	eors	r3, r2
 80070e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d013      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070ea:	4bb1      	ldr	r3, [pc, #708]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070f4:	4bae      	ldr	r3, [pc, #696]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f8:	4aad      	ldr	r2, [pc, #692]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007100:	4bab      	ldr	r3, [pc, #684]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007104:	4aaa      	ldr	r2, [pc, #680]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800710c:	4aa8      	ldr	r2, [pc, #672]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711c:	d115      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fa f931 	bl	8001384 <HAL_GetTick>
 8007122:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007124:	e00b      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007126:	f7fa f92d 	bl	8001384 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	f241 3288 	movw	r2, #5000	; 0x1388
 8007134:	4293      	cmp	r3, r2
 8007136:	d902      	bls.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	75fb      	strb	r3, [r7, #23]
            break;
 800713c:	e005      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800713e:	4b9c      	ldr	r3, [pc, #624]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0ed      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d126      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800715e:	d10d      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8007160:	4b93      	ldr	r3, [pc, #588]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800716e:	0919      	lsrs	r1, r3, #4
 8007170:	4b90      	ldr	r3, [pc, #576]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007172:	400b      	ands	r3, r1
 8007174:	498e      	ldr	r1, [pc, #568]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007176:	4313      	orrs	r3, r2
 8007178:	610b      	str	r3, [r1, #16]
 800717a:	e005      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 800717c:	4b8c      	ldr	r3, [pc, #560]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	4a8b      	ldr	r2, [pc, #556]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007182:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007186:	6113      	str	r3, [r2, #16]
 8007188:	4b89      	ldr	r3, [pc, #548]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800718a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007196:	4986      	ldr	r1, [pc, #536]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007198:	4313      	orrs	r3, r2
 800719a:	670b      	str	r3, [r1, #112]	; 0x70
 800719c:	e004      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	75bb      	strb	r3, [r7, #22]
 80071a2:	e001      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d07e      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071b8:	2b28      	cmp	r3, #40	; 0x28
 80071ba:	d867      	bhi.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xc14>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	08007293 	.word	0x08007293
 80071c8:	0800728d 	.word	0x0800728d
 80071cc:	0800728d 	.word	0x0800728d
 80071d0:	0800728d 	.word	0x0800728d
 80071d4:	0800728d 	.word	0x0800728d
 80071d8:	0800728d 	.word	0x0800728d
 80071dc:	0800728d 	.word	0x0800728d
 80071e0:	0800728d 	.word	0x0800728d
 80071e4:	08007269 	.word	0x08007269
 80071e8:	0800728d 	.word	0x0800728d
 80071ec:	0800728d 	.word	0x0800728d
 80071f0:	0800728d 	.word	0x0800728d
 80071f4:	0800728d 	.word	0x0800728d
 80071f8:	0800728d 	.word	0x0800728d
 80071fc:	0800728d 	.word	0x0800728d
 8007200:	0800728d 	.word	0x0800728d
 8007204:	0800727b 	.word	0x0800727b
 8007208:	0800728d 	.word	0x0800728d
 800720c:	0800728d 	.word	0x0800728d
 8007210:	0800728d 	.word	0x0800728d
 8007214:	0800728d 	.word	0x0800728d
 8007218:	0800728d 	.word	0x0800728d
 800721c:	0800728d 	.word	0x0800728d
 8007220:	0800728d 	.word	0x0800728d
 8007224:	08007293 	.word	0x08007293
 8007228:	0800728d 	.word	0x0800728d
 800722c:	0800728d 	.word	0x0800728d
 8007230:	0800728d 	.word	0x0800728d
 8007234:	0800728d 	.word	0x0800728d
 8007238:	0800728d 	.word	0x0800728d
 800723c:	0800728d 	.word	0x0800728d
 8007240:	0800728d 	.word	0x0800728d
 8007244:	08007293 	.word	0x08007293
 8007248:	0800728d 	.word	0x0800728d
 800724c:	0800728d 	.word	0x0800728d
 8007250:	0800728d 	.word	0x0800728d
 8007254:	0800728d 	.word	0x0800728d
 8007258:	0800728d 	.word	0x0800728d
 800725c:	0800728d 	.word	0x0800728d
 8007260:	0800728d 	.word	0x0800728d
 8007264:	08007293 	.word	0x08007293
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3304      	adds	r3, #4
 800726c:	2101      	movs	r1, #1
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fe6e 	bl	8007f50 <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007278:	e00c      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	3324      	adds	r3, #36	; 0x24
 800727e:	2101      	movs	r1, #1
 8007280:	4618      	mov	r0, r3
 8007282:	f000 ff87 	bl	8008194 <RCCEx_PLL3_Config>
 8007286:	4603      	mov	r3, r0
 8007288:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800728a:	e003      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
      break;
 8007290:	e000      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8007292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007294:	7dfb      	ldrb	r3, [r7, #23]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800729a:	4b45      	ldr	r3, [pc, #276]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a6:	4942      	ldr	r1, [pc, #264]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	654b      	str	r3, [r1, #84]	; 0x54
 80072ac:	e001      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d037      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d820      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 80072c6:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	0800730f 	.word	0x0800730f
 80072d0:	080072e5 	.word	0x080072e5
 80072d4:	080072f7 	.word	0x080072f7
 80072d8:	0800730f 	.word	0x0800730f
 80072dc:	0800730f 	.word	0x0800730f
 80072e0:	0800730f 	.word	0x0800730f
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fe30 	bl	8007f50 <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80072f4:	e00c      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3324      	adds	r3, #36	; 0x24
 80072fa:	2101      	movs	r1, #1
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 ff49 	bl	8008194 <RCCEx_PLL3_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007306:	e003      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
      break;
 800730c:	e000      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 800730e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007316:	4b26      	ldr	r3, [pc, #152]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	f023 0207 	bic.w	r2, r3, #7
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007322:	4923      	ldr	r1, [pc, #140]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007324:	4313      	orrs	r3, r2
 8007326:	654b      	str	r3, [r1, #84]	; 0x54
 8007328:	e001      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d040      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007340:	2b05      	cmp	r3, #5
 8007342:	d821      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	0800738f 	.word	0x0800738f
 8007350:	08007365 	.word	0x08007365
 8007354:	08007377 	.word	0x08007377
 8007358:	0800738f 	.word	0x0800738f
 800735c:	0800738f 	.word	0x0800738f
 8007360:	0800738f 	.word	0x0800738f
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3304      	adds	r3, #4
 8007368:	2101      	movs	r1, #1
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fdf0 	bl	8007f50 <RCCEx_PLL2_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007374:	e00c      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3324      	adds	r3, #36	; 0x24
 800737a:	2101      	movs	r1, #1
 800737c:	4618      	mov	r0, r3
 800737e:	f000 ff09 	bl	8008194 <RCCEx_PLL3_Config>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007386:	e003      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	75fb      	strb	r3, [r7, #23]
      break;
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800738e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d110      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007396:	4b06      	ldr	r3, [pc, #24]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739a:	f023 0207 	bic.w	r2, r3, #7
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a4:	4902      	ldr	r1, [pc, #8]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	658b      	str	r3, [r1, #88]	; 0x58
 80073aa:	e007      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80073ac:	58024800 	.word	0x58024800
 80073b0:	58024400 	.word	0x58024400
 80073b4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d044      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d2:	d01b      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80073d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d8:	d805      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d022      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80073de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073e2:	d00a      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80073e4:	e01b      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xda6>
 80073e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ea:	d01d      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80073ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073f0:	d01c      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80073f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073f6:	d01b      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 80073f8:	e011      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3304      	adds	r3, #4
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fda5 	bl	8007f50 <RCCEx_PLL2_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800740a:	e012      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3324      	adds	r3, #36	; 0x24
 8007410:	2102      	movs	r1, #2
 8007412:	4618      	mov	r0, r3
 8007414:	f000 febe 	bl	8008194 <RCCEx_PLL3_Config>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800741c:	e009      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	75fb      	strb	r3, [r7, #23]
      break;
 8007422:	e006      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007424:	bf00      	nop
 8007426:	e004      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007438:	4bb7      	ldr	r3, [pc, #732]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800743a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007446:	49b4      	ldr	r1, [pc, #720]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007448:	4313      	orrs	r3, r2
 800744a:	654b      	str	r3, [r1, #84]	; 0x54
 800744c:	e001      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d044      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007468:	d01b      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 800746a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800746e:	d805      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d022      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8007474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007478:	d00a      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800747a:	e01b      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 800747c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007480:	d01d      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xe46>
 8007482:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007486:	d01c      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8007488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800748c:	d01b      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 800748e:	e011      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	2100      	movs	r1, #0
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fd5a 	bl	8007f50 <RCCEx_PLL2_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80074a0:	e012      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3324      	adds	r3, #36	; 0x24
 80074a6:	2102      	movs	r1, #2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fe73 	bl	8008194 <RCCEx_PLL3_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80074b2:	e009      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	75fb      	strb	r3, [r7, #23]
      break;
 80074b8:	e006      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80074ba:	bf00      	nop
 80074bc:	e004      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80074be:	bf00      	nop
 80074c0:	e002      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80074c2:	bf00      	nop
 80074c4:	e000      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80074c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074ce:	4b92      	ldr	r3, [pc, #584]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074dc:	498e      	ldr	r1, [pc, #568]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	658b      	str	r3, [r1, #88]	; 0x58
 80074e2:	e001      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d044      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074fe:	d01b      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8007500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007504:	d805      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d022      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 800750a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800750e:	d00a      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8007510:	e01b      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xed2>
 8007512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007516:	d01d      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007518:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800751c:	d01c      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 800751e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007522:	d01b      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8007524:	e011      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3304      	adds	r3, #4
 800752a:	2100      	movs	r1, #0
 800752c:	4618      	mov	r0, r3
 800752e:	f000 fd0f 	bl	8007f50 <RCCEx_PLL2_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007536:	e012      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3324      	adds	r3, #36	; 0x24
 800753c:	2102      	movs	r1, #2
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fe28 	bl	8008194 <RCCEx_PLL3_Config>
 8007544:	4603      	mov	r3, r0
 8007546:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007548:	e009      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
      break;
 800754e:	e006      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007550:	bf00      	nop
 8007552:	e004      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007554:	bf00      	nop
 8007556:	e002      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007558:	bf00      	nop
 800755a:	e000      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800755c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007564:	4b6c      	ldr	r3, [pc, #432]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007572:	4969      	ldr	r1, [pc, #420]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007574:	4313      	orrs	r3, r2
 8007576:	658b      	str	r3, [r1, #88]	; 0x58
 8007578:	e001      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d037      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007594:	d015      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800759c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a0:	d00f      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075b6:	d004      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80075b8:	f240 413a 	movw	r1, #1082	; 0x43a
 80075bc:	4857      	ldr	r0, [pc, #348]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 80075be:	f7f9 fc2e 	bl	8000e1e <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075cc:	d10b      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3324      	adds	r3, #36	; 0x24
 80075d2:	2102      	movs	r1, #2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fddd 	bl	8008194 <RCCEx_PLL3_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00c      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	75bb      	strb	r3, [r7, #22]
 80075e4:	e009      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80075e6:	4b4c      	ldr	r3, [pc, #304]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075f4:	4948      	ldr	r1, [pc, #288]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0310 	and.w	r3, r3, #16
 8007602:	2b00      	cmp	r3, #0
 8007604:	d037      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800760c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007610:	d015      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761c:	d00f      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800762e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007632:	d004      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007634:	f240 414f 	movw	r1, #1103	; 0x44f
 8007638:	4838      	ldr	r0, [pc, #224]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 800763a:	f7f9 fbf0 	bl	8000e1e <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007648:	d10b      	bne.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3324      	adds	r3, #36	; 0x24
 800764e:	2102      	movs	r1, #2
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fd9f 	bl	8008194 <RCCEx_PLL3_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	75bb      	strb	r3, [r7, #22]
 8007660:	e009      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007662:	4b2d      	ldr	r3, [pc, #180]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007666:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007670:	4929      	ldr	r1, [pc, #164]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007672:	4313      	orrs	r3, r2
 8007674:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d030      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768c:	d00d      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x1032>
 800768e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007692:	d016      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x104a>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d111      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fc56 	bl	8007f50 <RCCEx_PLL2_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076a8:	e00c      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3324      	adds	r3, #36	; 0x24
 80076ae:	2102      	movs	r1, #2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fd6f 	bl	8008194 <RCCEx_PLL3_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076ba:	e003      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	75fb      	strb	r3, [r7, #23]
      break;
 80076c0:	e000      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 80076c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076d8:	490f      	ldr	r1, [pc, #60]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	658b      	str	r3, [r1, #88]	; 0x58
 80076de:	e001      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d034      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076fa:	d011      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80076fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007700:	d01a      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007706:	d114      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007708:	4b03      	ldr	r3, [pc, #12]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	4a02      	ldr	r2, [pc, #8]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800770e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007714:	e011      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 8007716:	bf00      	nop
 8007718:	58024400 	.word	0x58024400
 800771c:	0800c7a4 	.word	0x0800c7a4

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3324      	adds	r3, #36	; 0x24
 8007724:	2101      	movs	r1, #1
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fd34 	bl	8008194 <RCCEx_PLL3_Config>
 800772c:	4603      	mov	r3, r0
 800772e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007730:	e003      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
      break;
 8007736:	e000      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8007738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007740:	4b9c      	ldr	r3, [pc, #624]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774e:	4999      	ldr	r1, [pc, #612]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007750:	4313      	orrs	r3, r2
 8007752:	654b      	str	r3, [r1, #84]	; 0x54
 8007754:	e001      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d037      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x110a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007776:	d004      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8007778:	f240 41b7 	movw	r1, #1207	; 0x4b7
 800777c:	488e      	ldr	r0, [pc, #568]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800777e:	f7f9 fb4e 	bl	8000e1e <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800778a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800778e:	d007      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007790:	e00f      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007792:	4b88      	ldr	r3, [pc, #544]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	4a87      	ldr	r2, [pc, #540]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800779e:	e00b      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3304      	adds	r3, #4
 80077a4:	2102      	movs	r1, #2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fbd2 	bl	8007f50 <RCCEx_PLL2_Config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80077b0:	e002      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
      break;
 80077b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077be:	4b7d      	ldr	r3, [pc, #500]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ca:	497a      	ldr	r1, [pc, #488]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077d0:	e001      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3324      	adds	r3, #36	; 0x24
 80077e6:	2102      	movs	r1, #2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fcd3 	bl	8008194 <RCCEx_PLL3_Config>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02f      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780c:	d00c      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 800780e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007812:	d802      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d011      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8007818:	e00d      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x11be>
 800781a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781e:	d00f      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007824:	d00e      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 8007826:	e006      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007828:	4b62      	ldr	r3, [pc, #392]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a61      	ldr	r2, [pc, #388]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800782e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007834:	e007      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	75fb      	strb	r3, [r7, #23]
      break;
 800783a:	e004      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 800783c:	bf00      	nop
 800783e:	e002      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007840:	bf00      	nop
 8007842:	e000      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d109      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800784c:	4b59      	ldr	r3, [pc, #356]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800784e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007858:	4956      	ldr	r1, [pc, #344]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800785a:	4313      	orrs	r3, r2
 800785c:	654b      	str	r3, [r1, #84]	; 0x54
 800785e:	e001      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d016      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	2b00      	cmp	r3, #0
 8007876:	d009      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007880:	d004      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8007882:	f240 5116 	movw	r1, #1302	; 0x516
 8007886:	484c      	ldr	r0, [pc, #304]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007888:	f7f9 fac9 	bl	8000e1e <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800788c:	4b49      	ldr	r3, [pc, #292]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800788e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007890:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007898:	4946      	ldr	r1, [pc, #280]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d019      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00a      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078be:	d004      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80078c0:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80078c4:	483c      	ldr	r0, [pc, #240]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80078c6:	f7f9 faaa 	bl	8000e1e <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80078ca:	4b3a      	ldr	r3, [pc, #232]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078d8:	4936      	ldr	r1, [pc, #216]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d009      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078fa:	d004      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80078fc:	f240 512a 	movw	r1, #1322	; 0x52a
 8007900:	482d      	ldr	r0, [pc, #180]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007902:	f7f9 fa8c 	bl	8000e1e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007906:	4b2b      	ldr	r3, [pc, #172]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007912:	4928      	ldr	r1, [pc, #160]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007914:	4313      	orrs	r3, r2
 8007916:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d01d      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007938:	d004      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 800793a:	f240 5134 	movw	r1, #1332	; 0x534
 800793e:	481e      	ldr	r0, [pc, #120]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007940:	f7f9 fa6d 	bl	8000e1e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007944:	4b1b      	ldr	r3, [pc, #108]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	4a1a      	ldr	r2, [pc, #104]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800794a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800794e:	6113      	str	r3, [r2, #16]
 8007950:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800795a:	4916      	ldr	r1, [pc, #88]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800795c:	4313      	orrs	r3, r2
 800795e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da1b      	bge.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00e      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007978:	d009      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007982:	d004      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007984:	f240 513e 	movw	r1, #1342	; 0x53e
 8007988:	480b      	ldr	r0, [pc, #44]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800798a:	f7f9 fa48 	bl	8000e1e <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007992:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799a:	4906      	ldr	r1, [pc, #24]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800799c:	4313      	orrs	r3, r2
 800799e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80079a0:	7dbb      	ldrb	r3, [r7, #22]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e000      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	58024400 	.word	0x58024400
 80079b8:	0800c7a4 	.word	0x0800c7a4

080079bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079c0:	f7fe fe12 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 80079c4:	4601      	mov	r1, r0
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	091b      	lsrs	r3, r3, #4
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	4a04      	ldr	r2, [pc, #16]	; (80079e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079d2:	5cd3      	ldrb	r3, [r2, r3]
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	58024400 	.word	0x58024400
 80079e4:	0800c8c8 	.word	0x0800c8c8

080079e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b089      	sub	sp, #36	; 0x24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079f0:	4b9d      	ldr	r3, [pc, #628]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80079fa:	4b9b      	ldr	r3, [pc, #620]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	0b1b      	lsrs	r3, r3, #12
 8007a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a04:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8007a06:	4b98      	ldr	r3, [pc, #608]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	f003 0310 	and.w	r3, r3, #16
 8007a0e:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a10:	4b95      	ldr	r3, [pc, #596]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	08db      	lsrs	r3, r3, #3
 8007a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	fb02 f303 	mul.w	r3, r2, r3
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 810a 	beq.w	8007c48 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d05a      	beq.n	8007af0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d302      	bcc.n	8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d078      	beq.n	8007b34 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8007a42:	e099      	b.n	8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a44:	4b88      	ldr	r3, [pc, #544]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d02d      	beq.n	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a50:	4b85      	ldr	r3, [pc, #532]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	08db      	lsrs	r3, r3, #3
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	4a84      	ldr	r2, [pc, #528]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a60:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b7b      	ldr	r3, [pc, #492]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007aaa:	e087      	b.n	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b6a      	ldr	r3, [pc, #424]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aee:	e065      	b.n	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b59      	ldr	r3, [pc, #356]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b32:	e043      	b.n	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b48      	ldr	r3, [pc, #288]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b76:	e021      	b.n	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	4b37      	ldr	r3, [pc, #220]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007bbc:	4b2a      	ldr	r3, [pc, #168]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	0a5b      	lsrs	r3, r3, #9
 8007bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be2:	ee17 2a90 	vmov	r2, s15
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007bea:	4b1f      	ldr	r3, [pc, #124]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	0c1b      	lsrs	r3, r3, #16
 8007bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c10:	ee17 2a90 	vmov	r2, s15
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c18:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	0e1b      	lsrs	r3, r3, #24
 8007c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3e:	ee17 2a90 	vmov	r2, s15
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c46:	e008      	b.n	8007c5a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	609a      	str	r2, [r3, #8]
}
 8007c5a:	bf00      	nop
 8007c5c:	3724      	adds	r7, #36	; 0x24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	58024400 	.word	0x58024400
 8007c6c:	03d09000 	.word	0x03d09000
 8007c70:	46000000 	.word	0x46000000
 8007c74:	4c742400 	.word	0x4c742400
 8007c78:	4a742400 	.word	0x4a742400
 8007c7c:	4b371b00 	.word	0x4b371b00

08007c80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b089      	sub	sp, #36	; 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c88:	4b9d      	ldr	r3, [pc, #628]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007c92:	4b9b      	ldr	r3, [pc, #620]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	0d1b      	lsrs	r3, r3, #20
 8007c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c9c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8007c9e:	4b98      	ldr	r3, [pc, #608]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007ca8:	4b95      	ldr	r3, [pc, #596]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cac:	08db      	lsrs	r3, r3, #3
 8007cae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	fb02 f303 	mul.w	r3, r2, r3
 8007cb8:	ee07 3a90 	vmov	s15, r3
 8007cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 810a 	beq.w	8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d05a      	beq.n	8007d88 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d302      	bcc.n	8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d078      	beq.n	8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8007cda:	e099      	b.n	8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cdc:	4b88      	ldr	r3, [pc, #544]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d02d      	beq.n	8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ce8:	4b85      	ldr	r3, [pc, #532]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	08db      	lsrs	r3, r3, #3
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	4a84      	ldr	r2, [pc, #528]	; (8007f04 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d12:	4b7b      	ldr	r3, [pc, #492]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d42:	e087      	b.n	8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d56:	4b6a      	ldr	r3, [pc, #424]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d86:	e065      	b.n	8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9a:	4b59      	ldr	r3, [pc, #356]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dca:	e043      	b.n	8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dde:	4b48      	ldr	r3, [pc, #288]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de6:	ee07 3a90 	vmov	s15, r3
 8007dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007df2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e0e:	e021      	b.n	8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e22:	4b37      	ldr	r3, [pc, #220]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2a:	ee07 3a90 	vmov	s15, r3
 8007e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e54:	4b2a      	ldr	r3, [pc, #168]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	0a5b      	lsrs	r3, r3, #9
 8007e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e7a:	ee17 2a90 	vmov	r2, s15
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007e82:	4b1f      	ldr	r3, [pc, #124]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea8:	ee17 2a90 	vmov	r2, s15
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007eb0:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	0e1b      	lsrs	r3, r3, #24
 8007eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed6:	ee17 2a90 	vmov	r2, s15
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ede:	e008      	b.n	8007ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	609a      	str	r2, [r3, #8]
}
 8007ef2:	bf00      	nop
 8007ef4:	3724      	adds	r7, #36	; 0x24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	58024400 	.word	0x58024400
 8007f04:	03d09000 	.word	0x03d09000
 8007f08:	46000000 	.word	0x46000000
 8007f0c:	4c742400 	.word	0x4c742400
 8007f10:	4a742400 	.word	0x4a742400
 8007f14:	4b371b00 	.word	0x4b371b00

08007f18 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f1c:	f7fe f9f2 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8007f20:	4601      	mov	r1, r0
 8007f22:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	4a06      	ldr	r2, [pc, #24]	; (8007f48 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007f2e:	5cd3      	ldrb	r3, [r2, r3]
 8007f30:	f003 031f 	and.w	r3, r3, #31
 8007f34:	fa21 f303 	lsr.w	r3, r1, r3
 8007f38:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007f3a:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007f3c:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	58024400 	.word	0x58024400
 8007f48:	0800c8c8 	.word	0x0800c8c8
 8007f4c:	24000000 	.word	0x24000000

08007f50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <RCCEx_PLL2_Config+0x1e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b3f      	cmp	r3, #63	; 0x3f
 8007f6c:	d904      	bls.n	8007f78 <RCCEx_PLL2_Config+0x28>
 8007f6e:	f640 2186 	movw	r1, #2694	; 0xa86
 8007f72:	4885      	ldr	r0, [pc, #532]	; (8008188 <RCCEx_PLL2_Config+0x238>)
 8007f74:	f7f8 ff53 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d904      	bls.n	8007f8a <RCCEx_PLL2_Config+0x3a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f88:	d904      	bls.n	8007f94 <RCCEx_PLL2_Config+0x44>
 8007f8a:	f640 2187 	movw	r1, #2695	; 0xa87
 8007f8e:	487e      	ldr	r0, [pc, #504]	; (8008188 <RCCEx_PLL2_Config+0x238>)
 8007f90:	f7f8 ff45 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <RCCEx_PLL2_Config+0x54>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b80      	cmp	r3, #128	; 0x80
 8007fa2:	d904      	bls.n	8007fae <RCCEx_PLL2_Config+0x5e>
 8007fa4:	f640 2188 	movw	r1, #2696	; 0xa88
 8007fa8:	4877      	ldr	r0, [pc, #476]	; (8008188 <RCCEx_PLL2_Config+0x238>)
 8007faa:	f7f8 ff38 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <RCCEx_PLL2_Config+0x6e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d904      	bls.n	8007fc8 <RCCEx_PLL2_Config+0x78>
 8007fbe:	f640 2189 	movw	r1, #2697	; 0xa89
 8007fc2:	4871      	ldr	r0, [pc, #452]	; (8008188 <RCCEx_PLL2_Config+0x238>)
 8007fc4:	f7f8 ff2b 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <RCCEx_PLL2_Config+0x88>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d904      	bls.n	8007fe2 <RCCEx_PLL2_Config+0x92>
 8007fd8:	f640 218a 	movw	r1, #2698	; 0xa8a
 8007fdc:	486a      	ldr	r0, [pc, #424]	; (8008188 <RCCEx_PLL2_Config+0x238>)
 8007fde:	f7f8 ff1e 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d010      	beq.n	800800c <RCCEx_PLL2_Config+0xbc>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d00c      	beq.n	800800c <RCCEx_PLL2_Config+0xbc>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	2b80      	cmp	r3, #128	; 0x80
 8007ff8:	d008      	beq.n	800800c <RCCEx_PLL2_Config+0xbc>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8008000:	d004      	beq.n	800800c <RCCEx_PLL2_Config+0xbc>
 8008002:	f640 218b 	movw	r1, #2699	; 0xa8b
 8008006:	4860      	ldr	r0, [pc, #384]	; (8008188 <RCCEx_PLL2_Config+0x238>)
 8008008:	f7f8 ff09 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <RCCEx_PLL2_Config+0xd6>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	2b20      	cmp	r3, #32
 800801a:	d004      	beq.n	8008026 <RCCEx_PLL2_Config+0xd6>
 800801c:	f640 218c 	movw	r1, #2700	; 0xa8c
 8008020:	4859      	ldr	r0, [pc, #356]	; (8008188 <RCCEx_PLL2_Config+0x238>)
 8008022:	f7f8 fefc 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800802e:	d304      	bcc.n	800803a <RCCEx_PLL2_Config+0xea>
 8008030:	f640 218d 	movw	r1, #2701	; 0xa8d
 8008034:	4854      	ldr	r0, [pc, #336]	; (8008188 <RCCEx_PLL2_Config+0x238>)
 8008036:	f7f8 fef2 	bl	8000e1e <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800803a:	4b54      	ldr	r3, [pc, #336]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b03      	cmp	r3, #3
 8008044:	d101      	bne.n	800804a <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e099      	b.n	800817e <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800804a:	4b50      	ldr	r3, [pc, #320]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a4f      	ldr	r2, [pc, #316]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008050:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008056:	f7f9 f995 	bl	8001384 <HAL_GetTick>
 800805a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800805c:	e008      	b.n	8008070 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800805e:	f7f9 f991 	bl	8001384 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d901      	bls.n	8008070 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e086      	b.n	800817e <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008070:	4b46      	ldr	r3, [pc, #280]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f0      	bne.n	800805e <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800807c:	4b43      	ldr	r3, [pc, #268]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	031b      	lsls	r3, r3, #12
 800808a:	4940      	ldr	r1, [pc, #256]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 800808c:	4313      	orrs	r3, r2
 800808e:	628b      	str	r3, [r1, #40]	; 0x28
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	3b01      	subs	r3, #1
 8008096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	3b01      	subs	r3, #1
 80080a0:	025b      	lsls	r3, r3, #9
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	041b      	lsls	r3, r3, #16
 80080ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	061b      	lsls	r3, r3, #24
 80080bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080c0:	4932      	ldr	r1, [pc, #200]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080c6:	4b31      	ldr	r3, [pc, #196]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	492e      	ldr	r1, [pc, #184]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80080d8:	4b2c      	ldr	r3, [pc, #176]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	f023 0220 	bic.w	r2, r3, #32
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	4929      	ldr	r1, [pc, #164]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080ea:	4b28      	ldr	r3, [pc, #160]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4a27      	ldr	r2, [pc, #156]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 80080f0:	f023 0310 	bic.w	r3, r3, #16
 80080f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080f6:	4b25      	ldr	r3, [pc, #148]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 80080f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080fa:	4b25      	ldr	r3, [pc, #148]	; (8008190 <RCCEx_PLL2_Config+0x240>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	69d2      	ldr	r2, [r2, #28]
 8008102:	00d2      	lsls	r2, r2, #3
 8008104:	4921      	ldr	r1, [pc, #132]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008106:	4313      	orrs	r3, r2
 8008108:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800810a:	4b20      	ldr	r3, [pc, #128]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	4a1f      	ldr	r2, [pc, #124]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008110:	f043 0310 	orr.w	r3, r3, #16
 8008114:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d106      	bne.n	800812a <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800811c:	4b1b      	ldr	r3, [pc, #108]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	4a1a      	ldr	r2, [pc, #104]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008122:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008126:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008128:	e00f      	b.n	800814a <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d106      	bne.n	800813e <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008130:	4b16      	ldr	r3, [pc, #88]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	4a15      	ldr	r2, [pc, #84]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800813a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800813c:	e005      	b.n	800814a <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008142:	4a12      	ldr	r2, [pc, #72]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008148:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800814a:	4b10      	ldr	r3, [pc, #64]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a0f      	ldr	r2, [pc, #60]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008150:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008156:	f7f9 f915 	bl	8001384 <HAL_GetTick>
 800815a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800815c:	e008      	b.n	8008170 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800815e:	f7f9 f911 	bl	8001384 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	2b02      	cmp	r3, #2
 800816a:	d901      	bls.n	8008170 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e006      	b.n	800817e <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008170:	4b06      	ldr	r3, [pc, #24]	; (800818c <RCCEx_PLL2_Config+0x23c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d0f0      	beq.n	800815e <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	0800c7a4 	.word	0x0800c7a4
 800818c:	58024400 	.word	0x58024400
 8008190:	ffff0007 	.word	0xffff0007

08008194 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <RCCEx_PLL3_Config+0x1e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b3f      	cmp	r3, #63	; 0x3f
 80081b0:	d904      	bls.n	80081bc <RCCEx_PLL3_Config+0x28>
 80081b2:	f640 21ee 	movw	r1, #2798	; 0xaee
 80081b6:	4887      	ldr	r0, [pc, #540]	; (80083d4 <RCCEx_PLL3_Config+0x240>)
 80081b8:	f7f8 fe31 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d904      	bls.n	80081ce <RCCEx_PLL3_Config+0x3a>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081cc:	d904      	bls.n	80081d8 <RCCEx_PLL3_Config+0x44>
 80081ce:	f640 21ef 	movw	r1, #2799	; 0xaef
 80081d2:	4880      	ldr	r0, [pc, #512]	; (80083d4 <RCCEx_PLL3_Config+0x240>)
 80081d4:	f7f8 fe23 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <RCCEx_PLL3_Config+0x54>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2b80      	cmp	r3, #128	; 0x80
 80081e6:	d904      	bls.n	80081f2 <RCCEx_PLL3_Config+0x5e>
 80081e8:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 80081ec:	4879      	ldr	r0, [pc, #484]	; (80083d4 <RCCEx_PLL3_Config+0x240>)
 80081ee:	f7f8 fe16 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <RCCEx_PLL3_Config+0x6e>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d904      	bls.n	800820c <RCCEx_PLL3_Config+0x78>
 8008202:	f640 21f1 	movw	r1, #2801	; 0xaf1
 8008206:	4873      	ldr	r0, [pc, #460]	; (80083d4 <RCCEx_PLL3_Config+0x240>)
 8008208:	f7f8 fe09 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <RCCEx_PLL3_Config+0x88>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	2b80      	cmp	r3, #128	; 0x80
 800821a:	d904      	bls.n	8008226 <RCCEx_PLL3_Config+0x92>
 800821c:	f640 21f2 	movw	r1, #2802	; 0xaf2
 8008220:	486c      	ldr	r0, [pc, #432]	; (80083d4 <RCCEx_PLL3_Config+0x240>)
 8008222:	f7f8 fdfc 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d013      	beq.n	8008256 <RCCEx_PLL3_Config+0xc2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008236:	d00e      	beq.n	8008256 <RCCEx_PLL3_Config+0xc2>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008240:	d009      	beq.n	8008256 <RCCEx_PLL3_Config+0xc2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800824a:	d004      	beq.n	8008256 <RCCEx_PLL3_Config+0xc2>
 800824c:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8008250:	4860      	ldr	r0, [pc, #384]	; (80083d4 <RCCEx_PLL3_Config+0x240>)
 8008252:	f7f8 fde4 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d009      	beq.n	8008272 <RCCEx_PLL3_Config+0xde>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008266:	d004      	beq.n	8008272 <RCCEx_PLL3_Config+0xde>
 8008268:	f640 21f4 	movw	r1, #2804	; 0xaf4
 800826c:	4859      	ldr	r0, [pc, #356]	; (80083d4 <RCCEx_PLL3_Config+0x240>)
 800826e:	f7f8 fdd6 	bl	8000e1e <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800827a:	d304      	bcc.n	8008286 <RCCEx_PLL3_Config+0xf2>
 800827c:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8008280:	4854      	ldr	r0, [pc, #336]	; (80083d4 <RCCEx_PLL3_Config+0x240>)
 8008282:	f7f8 fdcc 	bl	8000e1e <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008286:	4b54      	ldr	r3, [pc, #336]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b03      	cmp	r3, #3
 8008290:	d101      	bne.n	8008296 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e099      	b.n	80083ca <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008296:	4b50      	ldr	r3, [pc, #320]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a4f      	ldr	r2, [pc, #316]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800829c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a2:	f7f9 f86f 	bl	8001384 <HAL_GetTick>
 80082a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082a8:	e008      	b.n	80082bc <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082aa:	f7f9 f86b 	bl	8001384 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d901      	bls.n	80082bc <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e086      	b.n	80083ca <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082bc:	4b46      	ldr	r3, [pc, #280]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1f0      	bne.n	80082aa <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082c8:	4b43      	ldr	r3, [pc, #268]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 80082ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	051b      	lsls	r3, r3, #20
 80082d6:	4940      	ldr	r1, [pc, #256]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	628b      	str	r3, [r1, #40]	; 0x28
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	025b      	lsls	r3, r3, #9
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	041b      	lsls	r3, r3, #16
 80082fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	3b01      	subs	r3, #1
 8008306:	061b      	lsls	r3, r3, #24
 8008308:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800830c:	4932      	ldr	r1, [pc, #200]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800830e:	4313      	orrs	r3, r2
 8008310:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008312:	4b31      	ldr	r3, [pc, #196]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	492e      	ldr	r1, [pc, #184]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008320:	4313      	orrs	r3, r2
 8008322:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008324:	4b2c      	ldr	r3, [pc, #176]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	4929      	ldr	r1, [pc, #164]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008332:	4313      	orrs	r3, r2
 8008334:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008336:	4b28      	ldr	r3, [pc, #160]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833a:	4a27      	ldr	r2, [pc, #156]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800833c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008340:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008342:	4b25      	ldr	r3, [pc, #148]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008346:	4b25      	ldr	r3, [pc, #148]	; (80083dc <RCCEx_PLL3_Config+0x248>)
 8008348:	4013      	ands	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	69d2      	ldr	r2, [r2, #28]
 800834e:	00d2      	lsls	r2, r2, #3
 8008350:	4921      	ldr	r1, [pc, #132]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008352:	4313      	orrs	r3, r2
 8008354:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008356:	4b20      	ldr	r3, [pc, #128]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	4a1f      	ldr	r2, [pc, #124]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800835c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008368:	4b1b      	ldr	r3, [pc, #108]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	4a1a      	ldr	r2, [pc, #104]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800836e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008372:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008374:	e00f      	b.n	8008396 <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d106      	bne.n	800838a <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800837c:	4b16      	ldr	r3, [pc, #88]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008382:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008388:	e005      	b.n	8008396 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	4a12      	ldr	r2, [pc, #72]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008394:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008396:	4b10      	ldr	r3, [pc, #64]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a0f      	ldr	r2, [pc, #60]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 800839c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083a2:	f7f8 ffef 	bl	8001384 <HAL_GetTick>
 80083a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083a8:	e008      	b.n	80083bc <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083aa:	f7f8 ffeb 	bl	8001384 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d901      	bls.n	80083bc <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e006      	b.n	80083ca <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <RCCEx_PLL3_Config+0x244>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0f0      	beq.n	80083aa <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	0800c7a4 	.word	0x0800c7a4
 80083d8:	58024400 	.word	0x58024400
 80083dc:	ffff0007 	.word	0xffff0007

080083e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e284      	b.n	8008900 <HAL_SPI_Init+0x520>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a96      	ldr	r2, [pc, #600]	; (8008654 <HAL_SPI_Init+0x274>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d01c      	beq.n	800843a <HAL_SPI_Init+0x5a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a94      	ldr	r2, [pc, #592]	; (8008658 <HAL_SPI_Init+0x278>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d017      	beq.n	800843a <HAL_SPI_Init+0x5a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a93      	ldr	r2, [pc, #588]	; (800865c <HAL_SPI_Init+0x27c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d012      	beq.n	800843a <HAL_SPI_Init+0x5a>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a91      	ldr	r2, [pc, #580]	; (8008660 <HAL_SPI_Init+0x280>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00d      	beq.n	800843a <HAL_SPI_Init+0x5a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a90      	ldr	r2, [pc, #576]	; (8008664 <HAL_SPI_Init+0x284>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d008      	beq.n	800843a <HAL_SPI_Init+0x5a>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a8e      	ldr	r2, [pc, #568]	; (8008668 <HAL_SPI_Init+0x288>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d003      	beq.n	800843a <HAL_SPI_Init+0x5a>
 8008432:	21f6      	movs	r1, #246	; 0xf6
 8008434:	488d      	ldr	r0, [pc, #564]	; (800866c <HAL_SPI_Init+0x28c>)
 8008436:	f7f8 fcf2 	bl	8000e1e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d008      	beq.n	8008454 <HAL_SPI_Init+0x74>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800844a:	d003      	beq.n	8008454 <HAL_SPI_Init+0x74>
 800844c:	21f7      	movs	r1, #247	; 0xf7
 800844e:	4887      	ldr	r0, [pc, #540]	; (800866c <HAL_SPI_Init+0x28c>)
 8008450:	f7f8 fce5 	bl	8000e1e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d012      	beq.n	8008482 <HAL_SPI_Init+0xa2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008464:	d00d      	beq.n	8008482 <HAL_SPI_Init+0xa2>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800846e:	d008      	beq.n	8008482 <HAL_SPI_Init+0xa2>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008478:	d003      	beq.n	8008482 <HAL_SPI_Init+0xa2>
 800847a:	21f8      	movs	r1, #248	; 0xf8
 800847c:	487b      	ldr	r0, [pc, #492]	; (800866c <HAL_SPI_Init+0x28c>)
 800847e:	f7f8 fcce 	bl	8000e1e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	2b1f      	cmp	r3, #31
 8008488:	d077      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b1e      	cmp	r3, #30
 8008490:	d073      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	2b1d      	cmp	r3, #29
 8008498:	d06f      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2b1c      	cmp	r3, #28
 80084a0:	d06b      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b1b      	cmp	r3, #27
 80084a8:	d067      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	2b1a      	cmp	r3, #26
 80084b0:	d063      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	2b19      	cmp	r3, #25
 80084b8:	d05f      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	2b18      	cmp	r3, #24
 80084c0:	d05b      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b17      	cmp	r3, #23
 80084c8:	d057      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	2b16      	cmp	r3, #22
 80084d0:	d053      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b15      	cmp	r3, #21
 80084d8:	d04f      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	2b14      	cmp	r3, #20
 80084e0:	d04b      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2b13      	cmp	r3, #19
 80084e8:	d047      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	2b15      	cmp	r3, #21
 80084f0:	d043      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b12      	cmp	r3, #18
 80084f8:	d03f      	beq.n	800857a <HAL_SPI_Init+0x19a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	2b11      	cmp	r3, #17
 8008500:	d03b      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b10      	cmp	r3, #16
 8008508:	d037      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b0f      	cmp	r3, #15
 8008510:	d033      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	2b0e      	cmp	r3, #14
 8008518:	d02f      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	2b0d      	cmp	r3, #13
 8008520:	d02b      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	2b0c      	cmp	r3, #12
 8008528:	d027      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	2b0b      	cmp	r3, #11
 8008530:	d023      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b0a      	cmp	r3, #10
 8008538:	d01f      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	2b09      	cmp	r3, #9
 8008540:	d01b      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b08      	cmp	r3, #8
 8008548:	d017      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b07      	cmp	r3, #7
 8008550:	d013      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	2b06      	cmp	r3, #6
 8008558:	d00f      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b05      	cmp	r3, #5
 8008560:	d00b      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	2b04      	cmp	r3, #4
 8008568:	d007      	beq.n	800857a <HAL_SPI_Init+0x19a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	2b03      	cmp	r3, #3
 8008570:	d003      	beq.n	800857a <HAL_SPI_Init+0x19a>
 8008572:	21f9      	movs	r1, #249	; 0xf9
 8008574:	483d      	ldr	r0, [pc, #244]	; (800866c <HAL_SPI_Init+0x28c>)
 8008576:	f7f8 fc52 	bl	8000e1e <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d047      	beq.n	8008612 <HAL_SPI_Init+0x232>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	2b20      	cmp	r3, #32
 8008588:	d043      	beq.n	8008612 <HAL_SPI_Init+0x232>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858e:	2b40      	cmp	r3, #64	; 0x40
 8008590:	d03f      	beq.n	8008612 <HAL_SPI_Init+0x232>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	2b60      	cmp	r3, #96	; 0x60
 8008598:	d03b      	beq.n	8008612 <HAL_SPI_Init+0x232>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859e:	2b80      	cmp	r3, #128	; 0x80
 80085a0:	d037      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a6:	2ba0      	cmp	r3, #160	; 0xa0
 80085a8:	d033      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ae:	2bc0      	cmp	r3, #192	; 0xc0
 80085b0:	d02f      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	2be0      	cmp	r3, #224	; 0xe0
 80085b8:	d02b      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c2:	d026      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80085cc:	d021      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80085d6:	d01c      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085dc:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 80085e0:	d017      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80085ea:	d012      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f0:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80085f4:	d00d      	beq.n	8008612 <HAL_SPI_Init+0x232>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fa:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80085fe:	d008      	beq.n	8008612 <HAL_SPI_Init+0x232>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008604:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8008608:	d003      	beq.n	8008612 <HAL_SPI_Init+0x232>
 800860a:	21fa      	movs	r1, #250	; 0xfa
 800860c:	4817      	ldr	r0, [pc, #92]	; (800866c <HAL_SPI_Init+0x28c>)
 800860e:	f7f8 fc06 	bl	8000e1e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800861a:	d00c      	beq.n	8008636 <HAL_SPI_Init+0x256>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d008      	beq.n	8008636 <HAL_SPI_Init+0x256>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800862c:	d003      	beq.n	8008636 <HAL_SPI_Init+0x256>
 800862e:	21fb      	movs	r1, #251	; 0xfb
 8008630:	480e      	ldr	r0, [pc, #56]	; (800866c <HAL_SPI_Init+0x28c>)
 8008632:	f7f8 fbf4 	bl	8000e1e <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863e:	d017      	beq.n	8008670 <HAL_SPI_Init+0x290>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008644:	2b00      	cmp	r3, #0
 8008646:	d013      	beq.n	8008670 <HAL_SPI_Init+0x290>
 8008648:	21fc      	movs	r1, #252	; 0xfc
 800864a:	4808      	ldr	r0, [pc, #32]	; (800866c <HAL_SPI_Init+0x28c>)
 800864c:	f7f8 fbe7 	bl	8000e1e <assert_failed>
 8008650:	e00e      	b.n	8008670 <HAL_SPI_Init+0x290>
 8008652:	bf00      	nop
 8008654:	40013000 	.word	0x40013000
 8008658:	40003800 	.word	0x40003800
 800865c:	40003c00 	.word	0x40003c00
 8008660:	40013400 	.word	0x40013400
 8008664:	40015000 	.word	0x40015000
 8008668:	58001400 	.word	0x58001400
 800866c:	0800c7e0 	.word	0x0800c7e0
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d026      	beq.n	80086c6 <HAL_SPI_Init+0x2e6>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008680:	d021      	beq.n	80086c6 <HAL_SPI_Init+0x2e6>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800868a:	d01c      	beq.n	80086c6 <HAL_SPI_Init+0x2e6>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008694:	d017      	beq.n	80086c6 <HAL_SPI_Init+0x2e6>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869e:	d012      	beq.n	80086c6 <HAL_SPI_Init+0x2e6>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086a8:	d00d      	beq.n	80086c6 <HAL_SPI_Init+0x2e6>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80086b2:	d008      	beq.n	80086c6 <HAL_SPI_Init+0x2e6>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 80086bc:	d003      	beq.n	80086c6 <HAL_SPI_Init+0x2e6>
 80086be:	21fd      	movs	r1, #253	; 0xfd
 80086c0:	4891      	ldr	r0, [pc, #580]	; (8008908 <HAL_SPI_Init+0x528>)
 80086c2:	f7f8 fbac 	bl	8000e1e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d008      	beq.n	80086e0 <HAL_SPI_Init+0x300>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086d6:	d003      	beq.n	80086e0 <HAL_SPI_Init+0x300>
 80086d8:	21fe      	movs	r1, #254	; 0xfe
 80086da:	488b      	ldr	r0, [pc, #556]	; (8008908 <HAL_SPI_Init+0x528>)
 80086dc:	f7f8 fb9f 	bl	8000e1e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_SPI_Init+0x31a>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086f0:	d003      	beq.n	80086fa <HAL_SPI_Init+0x31a>
 80086f2:	21ff      	movs	r1, #255	; 0xff
 80086f4:	4884      	ldr	r0, [pc, #528]	; (8008908 <HAL_SPI_Init+0x528>)
 80086f6:	f7f8 fb92 	bl	8000e1e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d11b      	bne.n	800873a <HAL_SPI_Init+0x35a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d009      	beq.n	800871e <HAL_SPI_Init+0x33e>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008712:	d004      	beq.n	800871e <HAL_SPI_Init+0x33e>
 8008714:	f44f 7181 	mov.w	r1, #258	; 0x102
 8008718:	487b      	ldr	r0, [pc, #492]	; (8008908 <HAL_SPI_Init+0x528>)
 800871a:	f7f8 fb80 	bl	8000e1e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <HAL_SPI_Init+0x35a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800872e:	d004      	beq.n	800873a <HAL_SPI_Init+0x35a>
 8008730:	f240 1103 	movw	r1, #259	; 0x103
 8008734:	4874      	ldr	r0, [pc, #464]	; (8008908 <HAL_SPI_Init+0x528>)
 8008736:	f7f8 fb72 	bl	8000e1e <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a71      	ldr	r2, [pc, #452]	; (800890c <HAL_SPI_Init+0x52c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00f      	beq.n	800876a <HAL_SPI_Init+0x38a>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a70      	ldr	r2, [pc, #448]	; (8008910 <HAL_SPI_Init+0x530>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00a      	beq.n	800876a <HAL_SPI_Init+0x38a>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a6e      	ldr	r2, [pc, #440]	; (8008914 <HAL_SPI_Init+0x534>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d005      	beq.n	800876a <HAL_SPI_Init+0x38a>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2b0f      	cmp	r3, #15
 8008764:	d901      	bls.n	800876a <HAL_SPI_Init+0x38a>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e0ca      	b.n	8008900 <HAL_SPI_Init+0x520>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fea6 	bl	80094bc <SPI_GetPacketSize>
 8008770:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a65      	ldr	r2, [pc, #404]	; (800890c <HAL_SPI_Init+0x52c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00c      	beq.n	8008796 <HAL_SPI_Init+0x3b6>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a63      	ldr	r2, [pc, #396]	; (8008910 <HAL_SPI_Init+0x530>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d007      	beq.n	8008796 <HAL_SPI_Init+0x3b6>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a62      	ldr	r2, [pc, #392]	; (8008914 <HAL_SPI_Init+0x534>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d002      	beq.n	8008796 <HAL_SPI_Init+0x3b6>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b08      	cmp	r3, #8
 8008794:	d811      	bhi.n	80087ba <HAL_SPI_Init+0x3da>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800879a:	4a5c      	ldr	r2, [pc, #368]	; (800890c <HAL_SPI_Init+0x52c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d009      	beq.n	80087b4 <HAL_SPI_Init+0x3d4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a5a      	ldr	r2, [pc, #360]	; (8008910 <HAL_SPI_Init+0x530>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <HAL_SPI_Init+0x3d4>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a59      	ldr	r2, [pc, #356]	; (8008914 <HAL_SPI_Init+0x534>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d104      	bne.n	80087be <HAL_SPI_Init+0x3de>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b10      	cmp	r3, #16
 80087b8:	d901      	bls.n	80087be <HAL_SPI_Init+0x3de>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e0a0      	b.n	8008900 <HAL_SPI_Init+0x520>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <HAL_SPI_Init+0x3f8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7f8 fb84 	bl	8000ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f022 0201 	bic.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087f8:	d110      	bne.n	800881c <HAL_SPI_Init+0x43c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008802:	d10b      	bne.n	800881c <HAL_SPI_Init+0x43c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	2b00      	cmp	r3, #0
 800880a:	d107      	bne.n	800881c <HAL_SPI_Init+0x43c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800881a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008824:	431a      	orrs	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	431a      	orrs	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882e:	ea42 0103 	orr.w	r1, r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	431a      	orrs	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	431a      	orrs	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	431a      	orrs	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800887c:	ea42 0103 	orr.w	r1, r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d113      	bne.n	80088bc <HAL_SPI_Init+0x4dc>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088a6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088ba:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0201 	bic.w	r2, r2, #1
 80088ca:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00a      	beq.n	80088ee <HAL_SPI_Init+0x50e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	0800c7e0 	.word	0x0800c7e0
 800890c:	40013000 	.word	0x40013000
 8008910:	40003800 	.word	0x40003800
 8008914:	40003c00 	.word	0x40003c00

08008918 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af02      	add	r7, sp, #8
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	4613      	mov	r3, r2
 8008926:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00e      	beq.n	8008952 <HAL_SPI_Receive+0x3a>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800893c:	d009      	beq.n	8008952 <HAL_SPI_Receive+0x3a>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008946:	d004      	beq.n	8008952 <HAL_SPI_Receive+0x3a>
 8008948:	f240 31de 	movw	r1, #990	; 0x3de
 800894c:	48a3      	ldr	r0, [pc, #652]	; (8008bdc <HAL_SPI_Receive+0x2c4>)
 800894e:	f7f8 fa66 	bl	8000e1e <assert_failed>

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800895a:	d112      	bne.n	8008982 <HAL_SPI_Receive+0x6a>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10e      	bne.n	8008982 <HAL_SPI_Receive+0x6a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2204      	movs	r2, #4
 8008968:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800896c:	88fa      	ldrh	r2, [r7, #6]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	4613      	mov	r3, r2
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f9d7 	bl	8008d2c <HAL_SPI_TransmitReceive>
 800897e:	4603      	mov	r3, r0
 8008980:	e1d0      	b.n	8008d24 <HAL_SPI_Receive+0x40c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <HAL_SPI_Receive+0x78>
 800898c:	2302      	movs	r3, #2
 800898e:	e1c9      	b.n	8008d24 <HAL_SPI_Receive+0x40c>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008998:	f7f8 fcf4 	bl	8001384 <HAL_GetTick>
 800899c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d007      	beq.n	80089ba <HAL_SPI_Receive+0xa2>
  {
    errorcode = HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
 80089ac:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	e1b4      	b.n	8008d24 <HAL_SPI_Receive+0x40c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <HAL_SPI_Receive+0xae>
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d107      	bne.n	80089d6 <HAL_SPI_Receive+0xbe>
  {
    errorcode = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	e1a6      	b.n	8008d24 <HAL_SPI_Receive+0x40c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2204      	movs	r2, #4
 80089da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	88fa      	ldrh	r2, [r7, #6]
 80089f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008a26:	d107      	bne.n	8008a38 <HAL_SPI_Receive+0x120>
  {
    SPI_1LINE_RX(hspi);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	4b68      	ldr	r3, [pc, #416]	; (8008be0 <HAL_SPI_Receive+0x2c8>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	88f9      	ldrh	r1, [r7, #6]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	6812      	ldr	r2, [r2, #0]
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0201 	orr.w	r2, r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a64:	d107      	bne.n	8008a76 <HAL_SPI_Receive+0x15e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	2b0f      	cmp	r3, #15
 8008a7c:	d948      	bls.n	8008b10 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008a7e:	e040      	b.n	8008b02 <HAL_SPI_Receive+0x1ea>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	f248 0308 	movw	r3, #32776	; 0x8008
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d014      	beq.n	8008aba <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a9a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa0:	1d1a      	adds	r2, r3, #4
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ab8:	e023      	b.n	8008b02 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aba:	f7f8 fc63 	bl	8001384 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d803      	bhi.n	8008ad2 <HAL_SPI_Receive+0x1ba>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	d102      	bne.n	8008ad8 <HAL_SPI_Receive+0x1c0>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d114      	bne.n	8008b02 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 fc21 	bl	8009320 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e110      	b.n	8008d24 <HAL_SPI_Receive+0x40c>
    while (hspi->RxXferCount > 0UL)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1b8      	bne.n	8008a80 <HAL_SPI_Receive+0x168>
 8008b0e:	e0f6      	b.n	8008cfe <HAL_SPI_Receive+0x3e6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	2b07      	cmp	r3, #7
 8008b16:	f240 80eb 	bls.w	8008cf0 <HAL_SPI_Receive+0x3d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008b1a:	e063      	b.n	8008be4 <HAL_SPI_Receive+0x2cc>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d033      	beq.n	8008b92 <HAL_SPI_Receive+0x27a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d014      	beq.n	8008b62 <HAL_SPI_Receive+0x24a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b42:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b48:	1d1a      	adds	r2, r3, #4
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3b02      	subs	r3, #2
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b60:	e040      	b.n	8008be4 <HAL_SPI_Receive+0x2cc>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6e:	8812      	ldrh	r2, [r2, #0]
 8008b70:	b292      	uxth	r2, r2
 8008b72:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b78:	1c9a      	adds	r2, r3, #2
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b90:	e028      	b.n	8008be4 <HAL_SPI_Receive+0x2cc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b92:	f7f8 fbf7 	bl	8001384 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d803      	bhi.n	8008baa <HAL_SPI_Receive+0x292>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba8:	d102      	bne.n	8008bb0 <HAL_SPI_Receive+0x298>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d119      	bne.n	8008be4 <HAL_SPI_Receive+0x2cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 fbb5 	bl	8009320 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e0a4      	b.n	8008d24 <HAL_SPI_Receive+0x40c>
 8008bda:	bf00      	nop
 8008bdc:	0800c7e0 	.word	0x0800c7e0
 8008be0:	ffff0000 	.word	0xffff0000
    while (hspi->RxXferCount > 0UL)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d195      	bne.n	8008b1c <HAL_SPI_Receive+0x204>
 8008bf0:	e085      	b.n	8008cfe <HAL_SPI_Receive+0x3e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d053      	beq.n	8008ca8 <HAL_SPI_Receive+0x390>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d014      	beq.n	8008c38 <HAL_SPI_Receive+0x320>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008c18:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c1e:	1d1a      	adds	r2, r3, #4
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b04      	subs	r3, #4
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008c36:	e05b      	b.n	8008cf0 <HAL_SPI_Receive+0x3d8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c46:	d917      	bls.n	8008c78 <HAL_SPI_Receive+0x360>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c54:	8812      	ldrh	r2, [r2, #0]
 8008c56:	b292      	uxth	r2, r2
 8008c58:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c5e:	1c9a      	adds	r2, r3, #2
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	3b02      	subs	r3, #2
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008c76:	e03b      	b.n	8008cf0 <HAL_SPI_Receive+0x3d8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c84:	7812      	ldrb	r2, [r2, #0]
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ca6:	e023      	b.n	8008cf0 <HAL_SPI_Receive+0x3d8>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ca8:	f7f8 fb6c 	bl	8001384 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d803      	bhi.n	8008cc0 <HAL_SPI_Receive+0x3a8>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbe:	d102      	bne.n	8008cc6 <HAL_SPI_Receive+0x3ae>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d114      	bne.n	8008cf0 <HAL_SPI_Receive+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fb2a 	bl	8009320 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e019      	b.n	8008d24 <HAL_SPI_Receive+0x40c>
    while (hspi->RxXferCount > 0UL)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f47f af7a 	bne.w	8008bf2 <HAL_SPI_Receive+0x2da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 fb0e 	bl	8009320 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <HAL_SPI_Receive+0x40a>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <HAL_SPI_Receive+0x40c>
  }
  return errorcode;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08c      	sub	sp, #48	; 0x30
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t   tmp_mode;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <HAL_SPI_TransmitReceive+0x26>
 8008d48:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8008d4c:	489a      	ldr	r0, [pc, #616]	; (8008fb8 <HAL_SPI_TransmitReceive+0x28c>)
 8008d4e:	f7f8 f866 	bl	8000e1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <HAL_SPI_TransmitReceive+0x34>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e2da      	b.n	8009316 <HAL_SPI_TransmitReceive+0x5ea>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d68:	f7f8 fb0c 	bl	8001384 <HAL_GetTick>
 8008d6c:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008d6e:	887b      	ldrh	r3, [r7, #2]
 8008d70:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8008d72:	887b      	ldrh	r3, [r7, #2]
 8008d74:	84bb      	strh	r3, [r7, #36]	; 0x24
  tmp_state           = hspi->State;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d7c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d84:	7efb      	ldrb	r3, [r7, #27]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d014      	beq.n	8008db4 <HAL_SPI_TransmitReceive+0x88>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d90:	d106      	bne.n	8008da0 <HAL_SPI_TransmitReceive+0x74>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d102      	bne.n	8008da0 <HAL_SPI_TransmitReceive+0x74>
 8008d9a:	7efb      	ldrb	r3, [r7, #27]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d009      	beq.n	8008db4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 8008da0:	2302      	movs	r3, #2
 8008da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008db2:	e2b0      	b.n	8009316 <HAL_SPI_TransmitReceive+0x5ea>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x9a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x9a>
 8008dc0:	887b      	ldrh	r3, [r7, #2]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dd8:	e29d      	b.n	8009316 <HAL_SPI_TransmitReceive+0x5ea>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d003      	beq.n	8008dee <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2205      	movs	r2, #5
 8008dea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	887a      	ldrh	r2, [r7, #2]
 8008e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	887a      	ldrh	r2, [r7, #2]
 8008e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	887a      	ldrh	r2, [r7, #2]
 8008e16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	887a      	ldrh	r2, [r7, #2]
 8008e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	4b61      	ldr	r3, [pc, #388]	; (8008fbc <HAL_SPI_TransmitReceive+0x290>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	8879      	ldrh	r1, [r7, #2]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	6812      	ldr	r2, [r2, #0]
 8008e3e:	430b      	orrs	r3, r1
 8008e40:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f042 0201 	orr.w	r2, r2, #1
 8008e50:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e5a:	d107      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	2b0f      	cmp	r3, #15
 8008e72:	d970      	bls.n	8008f56 <HAL_SPI_TransmitReceive+0x22a>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e74:	e044      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x1d4>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d11a      	bne.n	8008eba <HAL_SPI_TransmitReceive+0x18e>
 8008e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d017      	beq.n	8008eba <HAL_SPI_TransmitReceive+0x18e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6812      	ldr	r2, [r2, #0]
 8008e94:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e9a:	1d1a      	adds	r2, r3, #4
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eb8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695a      	ldr	r2, [r3, #20]
 8008ec0:	f248 0308 	movw	r3, #32776	; 0x8008
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d01a      	beq.n	8008f00 <HAL_SPI_TransmitReceive+0x1d4>
 8008eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d017      	beq.n	8008f00 <HAL_SPI_TransmitReceive+0x1d4>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ed8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008eda:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ee0:	1d1a      	adds	r2, r3, #4
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008efe:	84bb      	strh	r3, [r7, #36]	; 0x24
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1b7      	bne.n	8008e76 <HAL_SPI_TransmitReceive+0x14a>
 8008f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1b4      	bne.n	8008e76 <HAL_SPI_TransmitReceive+0x14a>
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f0c:	f7f8 fa3a 	bl	8001384 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d803      	bhi.n	8008f24 <HAL_SPI_TransmitReceive+0x1f8>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f22:	d103      	bne.n	8008f2c <HAL_SPI_TransmitReceive+0x200>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f040 81ce 	bne.w	80092c8 <HAL_SPI_TransmitReceive+0x59c>
    {
      /* Call standard close procedure with error check */
      SPI_CloseTransfer(hspi);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f9f7 	bl	8009320 <SPI_CloseTransfer>

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      hspi->State = HAL_SPI_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e1df      	b.n	8009316 <HAL_SPI_TransmitReceive+0x5ea>
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	2b07      	cmp	r3, #7
 8008f5c:	f240 81ac 	bls.w	80092b8 <HAL_SPI_TransmitReceive+0x58c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f60:	e0b0      	b.n	80090c4 <HAL_SPI_TransmitReceive+0x398>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d140      	bne.n	8008ff2 <HAL_SPI_TransmitReceive+0x2c6>
 8008f70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d03d      	beq.n	8008ff2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008f76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d921      	bls.n	8008fc0 <HAL_SPI_TransmitReceive+0x294>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d01d      	beq.n	8008fc0 <HAL_SPI_TransmitReceive+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f94:	1d1a      	adds	r2, r3, #4
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b02      	subs	r3, #2
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008fb4:	e01d      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x2c6>
 8008fb6:	bf00      	nop
 8008fb8:	0800c7e0 	.word	0x0800c7e0
 8008fbc:	ffff0000 	.word	0xffff0000
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3320      	adds	r3, #32
 8008fca:	8812      	ldrh	r2, [r2, #0]
 8008fcc:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd2:	1c9a      	adds	r2, r3, #2
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ff0:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d03d      	beq.n	800907c <HAL_SPI_TransmitReceive+0x350>
 8009000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009002:	2b00      	cmp	r3, #0
 8009004:	d03a      	beq.n	800907c <HAL_SPI_TransmitReceive+0x350>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d018      	beq.n	8009046 <HAL_SPI_TransmitReceive+0x31a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800901c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800901e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009024:	1d1a      	adds	r2, r3, #4
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009030:	b29b      	uxth	r3, r3
 8009032:	3b02      	subs	r3, #2
 8009034:	b29a      	uxth	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009042:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009044:	e01a      	b.n	800907c <HAL_SPI_TransmitReceive+0x350>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009052:	8812      	ldrh	r2, [r2, #0]
 8009054:	b292      	uxth	r2, r2
 8009056:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905c:	1c9a      	adds	r2, r3, #2
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800907a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800907c:	f7f8 f982 	bl	8001384 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009088:	429a      	cmp	r2, r3
 800908a:	d803      	bhi.n	8009094 <HAL_SPI_TransmitReceive+0x368>
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009092:	d102      	bne.n	800909a <HAL_SPI_TransmitReceive+0x36e>
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	2b00      	cmp	r3, #0
 8009098:	d114      	bne.n	80090c4 <HAL_SPI_TransmitReceive+0x398>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 f940 	bl	8009320 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e128      	b.n	8009316 <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80090c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f47f af4b 	bne.w	8008f62 <HAL_SPI_TransmitReceive+0x236>
 80090cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f47f af47 	bne.w	8008f62 <HAL_SPI_TransmitReceive+0x236>
 80090d4:	e0f8      	b.n	80092c8 <HAL_SPI_TransmitReceive+0x59c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	f003 0302 	and.w	r3, r3, #2
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d15c      	bne.n	800919e <HAL_SPI_TransmitReceive+0x472>
 80090e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d059      	beq.n	800919e <HAL_SPI_TransmitReceive+0x472>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80090ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d91c      	bls.n	800912a <HAL_SPI_TransmitReceive+0x3fe>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f4:	2b40      	cmp	r3, #64	; 0x40
 80090f6:	d918      	bls.n	800912a <HAL_SPI_TransmitReceive+0x3fe>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009108:	1d1a      	adds	r2, r3, #4
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009114:	b29b      	uxth	r3, r3
 8009116:	3b04      	subs	r3, #4
 8009118:	b29a      	uxth	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009126:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009128:	e039      	b.n	800919e <HAL_SPI_TransmitReceive+0x472>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800912a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800912c:	2b01      	cmp	r3, #1
 800912e:	d91d      	bls.n	800916c <HAL_SPI_TransmitReceive+0x440>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009134:	2b00      	cmp	r3, #0
 8009136:	d019      	beq.n	800916c <HAL_SPI_TransmitReceive+0x440>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3320      	adds	r3, #32
 8009142:	8812      	ldrh	r2, [r2, #0]
 8009144:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800914a:	1c9a      	adds	r2, r3, #2
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009156:	b29b      	uxth	r3, r3
 8009158:	3b02      	subs	r3, #2
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009168:	84fb      	strh	r3, [r7, #38]	; 0x26
 800916a:	e018      	b.n	800919e <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3320      	adds	r3, #32
 8009176:	7812      	ldrb	r2, [r2, #0]
 8009178:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800918a:	b29b      	uxth	r3, r3
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800919c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d061      	beq.n	8009270 <HAL_SPI_TransmitReceive+0x544>
 80091ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d05e      	beq.n	8009270 <HAL_SPI_TransmitReceive+0x544>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d018      	beq.n	80091f2 <HAL_SPI_TransmitReceive+0x4c6>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80091ca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091d0:	1d1a      	adds	r2, r3, #4
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b04      	subs	r3, #4
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80091ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80091f0:	e03e      	b.n	8009270 <HAL_SPI_TransmitReceive+0x544>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80091fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009200:	d91b      	bls.n	800923a <HAL_SPI_TransmitReceive+0x50e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800920e:	8812      	ldrh	r2, [r2, #0]
 8009210:	b292      	uxth	r2, r2
 8009212:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009218:	1c9a      	adds	r2, r3, #2
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009224:	b29b      	uxth	r3, r3
 8009226:	3b02      	subs	r3, #2
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009236:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009238:	e01a      	b.n	8009270 <HAL_SPI_TransmitReceive+0x544>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009246:	7812      	ldrb	r2, [r2, #0]
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800926e:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009270:	f7f8 f888 	bl	8001384 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927c:	429a      	cmp	r2, r3
 800927e:	d803      	bhi.n	8009288 <HAL_SPI_TransmitReceive+0x55c>
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d102      	bne.n	800928e <HAL_SPI_TransmitReceive+0x562>
 8009288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928a:	2b00      	cmp	r3, #0
 800928c:	d114      	bne.n	80092b8 <HAL_SPI_TransmitReceive+0x58c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 f846 	bl	8009320 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e02e      	b.n	8009316 <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80092b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f47f af0b 	bne.w	80090d6 <HAL_SPI_TransmitReceive+0x3aa>
 80092c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f47f af07 	bne.w	80090d6 <HAL_SPI_TransmitReceive+0x3aa>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2200      	movs	r2, #0
 80092d0:	2108      	movs	r1, #8
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 f8c4 	bl	8009460 <SPI_WaitOnFlagUntilTimeout>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d007      	beq.n	80092ee <HAL_SPI_TransmitReceive+0x5c2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e4:	f043 0220 	orr.w	r2, r3, #32
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 f816 	bl	8009320 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <HAL_SPI_TransmitReceive+0x5e6>
  {
    return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e001      	b.n	8009316 <HAL_SPI_TransmitReceive+0x5ea>
  }
  return errorcode;
 8009312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009316:	4618      	mov	r0, r3
 8009318:	3728      	adds	r7, #40	; 0x28
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop

08009320 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	699a      	ldr	r2, [r3, #24]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0208 	orr.w	r2, r2, #8
 800933e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699a      	ldr	r2, [r3, #24]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0210 	orr.w	r2, r2, #16
 800934e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0201 	bic.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6919      	ldr	r1, [r3, #16]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	4b3c      	ldr	r3, [pc, #240]	; (800945c <SPI_CloseTransfer+0x13c>)
 800936c:	400b      	ands	r3, r1
 800936e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800937e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b04      	cmp	r3, #4
 800938a:	d014      	beq.n	80093b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00f      	beq.n	80093b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800939c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	699a      	ldr	r2, [r3, #24]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f042 0220 	orr.w	r2, r2, #32
 80093b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d014      	beq.n	80093ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00f      	beq.n	80093ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093d2:	f043 0204 	orr.w	r2, r3, #4
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00f      	beq.n	8009416 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093fc:	f043 0201 	orr.w	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009414:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00f      	beq.n	8009440 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009426:	f043 0208 	orr.w	r2, r3, #8
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	699a      	ldr	r2, [r3, #24]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800943e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009450:	bf00      	nop
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	fffffc90 	.word	0xfffffc90

08009460 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	603b      	str	r3, [r7, #0]
 800946c:	4613      	mov	r3, r2
 800946e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009470:	e010      	b.n	8009494 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009472:	f7f7 ff87 	bl	8001384 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	429a      	cmp	r2, r3
 8009480:	d803      	bhi.n	800948a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d102      	bne.n	8009490 <SPI_WaitOnFlagUntilTimeout+0x30>
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e00f      	b.n	80094b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695a      	ldr	r2, [r3, #20]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	4013      	ands	r3, r2
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	bf0c      	ite	eq
 80094a4:	2301      	moveq	r3, #1
 80094a6:	2300      	movne	r3, #0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d0df      	beq.n	8009472 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	3301      	adds	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	3307      	adds	r3, #7
 80094da:	08db      	lsrs	r3, r3, #3
 80094dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
	...

080094f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e0ab      	b.n	800965e <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d032      	beq.n	8009574 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a55      	ldr	r2, [pc, #340]	; (8009668 <HAL_UART_Init+0x174>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d05f      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a53      	ldr	r2, [pc, #332]	; (800966c <HAL_UART_Init+0x178>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d05a      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a52      	ldr	r2, [pc, #328]	; (8009670 <HAL_UART_Init+0x17c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d055      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a50      	ldr	r2, [pc, #320]	; (8009674 <HAL_UART_Init+0x180>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d050      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a4f      	ldr	r2, [pc, #316]	; (8009678 <HAL_UART_Init+0x184>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d04b      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a4d      	ldr	r2, [pc, #308]	; (800967c <HAL_UART_Init+0x188>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d046      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a4c      	ldr	r2, [pc, #304]	; (8009680 <HAL_UART_Init+0x18c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d041      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a4a      	ldr	r2, [pc, #296]	; (8009684 <HAL_UART_Init+0x190>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d03c      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a49      	ldr	r2, [pc, #292]	; (8009688 <HAL_UART_Init+0x194>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d037      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 8009568:	f44f 7199 	mov.w	r1, #306	; 0x132
 800956c:	4847      	ldr	r0, [pc, #284]	; (800968c <HAL_UART_Init+0x198>)
 800956e:	f7f7 fc56 	bl	8000e1e <assert_failed>
 8009572:	e031      	b.n	80095d8 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a3b      	ldr	r2, [pc, #236]	; (8009668 <HAL_UART_Init+0x174>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d02c      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a3a      	ldr	r2, [pc, #232]	; (800966c <HAL_UART_Init+0x178>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d027      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a38      	ldr	r2, [pc, #224]	; (8009670 <HAL_UART_Init+0x17c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d022      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a37      	ldr	r2, [pc, #220]	; (8009674 <HAL_UART_Init+0x180>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d01d      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a35      	ldr	r2, [pc, #212]	; (8009678 <HAL_UART_Init+0x184>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d018      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a34      	ldr	r2, [pc, #208]	; (800967c <HAL_UART_Init+0x188>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d013      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a32      	ldr	r2, [pc, #200]	; (8009680 <HAL_UART_Init+0x18c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00e      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a31      	ldr	r2, [pc, #196]	; (8009684 <HAL_UART_Init+0x190>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d009      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a2f      	ldr	r2, [pc, #188]	; (8009688 <HAL_UART_Init+0x194>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d004      	beq.n	80095d8 <HAL_UART_Init+0xe4>
 80095ce:	f240 1137 	movw	r1, #311	; 0x137
 80095d2:	482e      	ldr	r0, [pc, #184]	; (800968c <HAL_UART_Init+0x198>)
 80095d4:	f7f7 fc23 	bl	8000e1e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7f7 fdd4 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2224      	movs	r2, #36	; 0x24
 80095f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0201 	bic.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f841 	bl	8009690 <UART_SetConfig>
 800960e:	4603      	mov	r3, r0
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e022      	b.n	800965e <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f002 fa93 	bl	800bb4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009634:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009644:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0201 	orr.w	r2, r2, #1
 8009654:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f002 fbee 	bl	800be38 <UART_CheckIdleState>
 800965c:	4603      	mov	r3, r0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	40011000 	.word	0x40011000
 800966c:	40004400 	.word	0x40004400
 8009670:	40004800 	.word	0x40004800
 8009674:	40004c00 	.word	0x40004c00
 8009678:	40005000 	.word	0x40005000
 800967c:	40011400 	.word	0x40011400
 8009680:	40007800 	.word	0x40007800
 8009684:	40007c00 	.word	0x40007c00
 8009688:	58000c00 	.word	0x58000c00
 800968c:	0800c818 	.word	0x0800c818

08009690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009690:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009694:	b090      	sub	sp, #64	; 0x40
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800969a:	2300      	movs	r3, #0
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	4a17      	ldr	r2, [pc, #92]	; (800970c <UART_SetConfig+0x7c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d904      	bls.n	80096bc <UART_SetConfig+0x2c>
 80096b2:	f640 3134 	movw	r1, #2868	; 0xb34
 80096b6:	4816      	ldr	r0, [pc, #88]	; (8009710 <UART_SetConfig+0x80>)
 80096b8:	f7f7 fbb1 	bl	8000e1e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096c4:	d00d      	beq.n	80096e2 <UART_SetConfig+0x52>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d009      	beq.n	80096e2 <UART_SetConfig+0x52>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d6:	d004      	beq.n	80096e2 <UART_SetConfig+0x52>
 80096d8:	f640 3135 	movw	r1, #2869	; 0xb35
 80096dc:	480c      	ldr	r0, [pc, #48]	; (8009710 <UART_SetConfig+0x80>)
 80096de:	f7f7 fb9e 	bl	8000e1e <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a0b      	ldr	r2, [pc, #44]	; (8009714 <UART_SetConfig+0x84>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d115      	bne.n	8009718 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d037      	beq.n	8009764 <UART_SetConfig+0xd4>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096fc:	d032      	beq.n	8009764 <UART_SetConfig+0xd4>
 80096fe:	f640 3138 	movw	r1, #2872	; 0xb38
 8009702:	4803      	ldr	r0, [pc, #12]	; (8009710 <UART_SetConfig+0x80>)
 8009704:	f7f7 fb8b 	bl	8000e1e <assert_failed>
 8009708:	e02c      	b.n	8009764 <UART_SetConfig+0xd4>
 800970a:	bf00      	nop
 800970c:	00bebc20 	.word	0x00bebc20
 8009710:	0800c818 	.word	0x0800c818
 8009714:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009720:	d012      	beq.n	8009748 <UART_SetConfig+0xb8>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00e      	beq.n	8009748 <UART_SetConfig+0xb8>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009732:	d009      	beq.n	8009748 <UART_SetConfig+0xb8>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800973c:	d004      	beq.n	8009748 <UART_SetConfig+0xb8>
 800973e:	f640 313c 	movw	r1, #2876	; 0xb3c
 8009742:	48aa      	ldr	r0, [pc, #680]	; (80099ec <UART_SetConfig+0x35c>)
 8009744:	f7f7 fb6b 	bl	8000e1e <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d009      	beq.n	8009764 <UART_SetConfig+0xd4>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009758:	d004      	beq.n	8009764 <UART_SetConfig+0xd4>
 800975a:	f640 313d 	movw	r1, #2877	; 0xb3d
 800975e:	48a3      	ldr	r0, [pc, #652]	; (80099ec <UART_SetConfig+0x35c>)
 8009760:	f7f7 fb5d 	bl	8000e1e <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00e      	beq.n	800978a <UART_SetConfig+0xfa>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009774:	d009      	beq.n	800978a <UART_SetConfig+0xfa>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800977e:	d004      	beq.n	800978a <UART_SetConfig+0xfa>
 8009780:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8009784:	4899      	ldr	r0, [pc, #612]	; (80099ec <UART_SetConfig+0x35c>)
 8009786:	f7f7 fb4a 	bl	8000e1e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	f023 030c 	bic.w	r3, r3, #12
 8009792:	2b00      	cmp	r3, #0
 8009794:	d103      	bne.n	800979e <UART_SetConfig+0x10e>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d104      	bne.n	80097a8 <UART_SetConfig+0x118>
 800979e:	f640 3141 	movw	r1, #2881	; 0xb41
 80097a2:	4892      	ldr	r0, [pc, #584]	; (80099ec <UART_SetConfig+0x35c>)
 80097a4:	f7f7 fb3b 	bl	8000e1e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d013      	beq.n	80097d8 <UART_SetConfig+0x148>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097b8:	d00e      	beq.n	80097d8 <UART_SetConfig+0x148>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097c2:	d009      	beq.n	80097d8 <UART_SetConfig+0x148>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097cc:	d004      	beq.n	80097d8 <UART_SetConfig+0x148>
 80097ce:	f640 3142 	movw	r1, #2882	; 0xb42
 80097d2:	4886      	ldr	r0, [pc, #536]	; (80099ec <UART_SetConfig+0x35c>)
 80097d4:	f7f7 fb23 	bl	8000e1e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d009      	beq.n	80097f4 <UART_SetConfig+0x164>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e8:	d004      	beq.n	80097f4 <UART_SetConfig+0x164>
 80097ea:	f640 3143 	movw	r1, #2883	; 0xb43
 80097ee:	487f      	ldr	r0, [pc, #508]	; (80099ec <UART_SetConfig+0x35c>)
 80097f0:	f7f7 fb15 	bl	8000e1e <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d030      	beq.n	800985e <UART_SetConfig+0x1ce>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	2b01      	cmp	r3, #1
 8009802:	d02c      	beq.n	800985e <UART_SetConfig+0x1ce>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	2b02      	cmp	r3, #2
 800980a:	d028      	beq.n	800985e <UART_SetConfig+0x1ce>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	2b03      	cmp	r3, #3
 8009812:	d024      	beq.n	800985e <UART_SetConfig+0x1ce>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	2b04      	cmp	r3, #4
 800981a:	d020      	beq.n	800985e <UART_SetConfig+0x1ce>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	2b05      	cmp	r3, #5
 8009822:	d01c      	beq.n	800985e <UART_SetConfig+0x1ce>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	2b06      	cmp	r3, #6
 800982a:	d018      	beq.n	800985e <UART_SetConfig+0x1ce>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	2b07      	cmp	r3, #7
 8009832:	d014      	beq.n	800985e <UART_SetConfig+0x1ce>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009838:	2b08      	cmp	r3, #8
 800983a:	d010      	beq.n	800985e <UART_SetConfig+0x1ce>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	2b09      	cmp	r3, #9
 8009842:	d00c      	beq.n	800985e <UART_SetConfig+0x1ce>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	2b0a      	cmp	r3, #10
 800984a:	d008      	beq.n	800985e <UART_SetConfig+0x1ce>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	2b0b      	cmp	r3, #11
 8009852:	d004      	beq.n	800985e <UART_SetConfig+0x1ce>
 8009854:	f640 3144 	movw	r1, #2884	; 0xb44
 8009858:	4864      	ldr	r0, [pc, #400]	; (80099ec <UART_SetConfig+0x35c>)
 800985a:	f7f7 fae0 	bl	8000e1e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	4313      	orrs	r3, r2
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800987a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800987c:	4313      	orrs	r3, r2
 800987e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	4b5a      	ldr	r3, [pc, #360]	; (80099f0 <UART_SetConfig+0x360>)
 8009888:	4013      	ands	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6812      	ldr	r2, [r2, #0]
 800988e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009890:	430b      	orrs	r3, r1
 8009892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68da      	ldr	r2, [r3, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a4f      	ldr	r2, [pc, #316]	; (80099f4 <UART_SetConfig+0x364>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d004      	beq.n	80098c4 <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098c0:	4313      	orrs	r3, r2
 80098c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	4b4b      	ldr	r3, [pc, #300]	; (80099f8 <UART_SetConfig+0x368>)
 80098cc:	4013      	ands	r3, r2
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098d4:	430b      	orrs	r3, r1
 80098d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098de:	f023 010f 	bic.w	r1, r3, #15
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a42      	ldr	r2, [pc, #264]	; (80099fc <UART_SetConfig+0x36c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	f040 8085 	bne.w	8009a04 <UART_SetConfig+0x374>
 80098fa:	4b41      	ldr	r3, [pc, #260]	; (8009a00 <UART_SetConfig+0x370>)
 80098fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009902:	2b28      	cmp	r3, #40	; 0x28
 8009904:	d86c      	bhi.n	80099e0 <UART_SetConfig+0x350>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <UART_SetConfig+0x27c>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	080099b1 	.word	0x080099b1
 8009910:	080099e1 	.word	0x080099e1
 8009914:	080099e1 	.word	0x080099e1
 8009918:	080099e1 	.word	0x080099e1
 800991c:	080099e1 	.word	0x080099e1
 8009920:	080099e1 	.word	0x080099e1
 8009924:	080099e1 	.word	0x080099e1
 8009928:	080099e1 	.word	0x080099e1
 800992c:	080099b9 	.word	0x080099b9
 8009930:	080099e1 	.word	0x080099e1
 8009934:	080099e1 	.word	0x080099e1
 8009938:	080099e1 	.word	0x080099e1
 800993c:	080099e1 	.word	0x080099e1
 8009940:	080099e1 	.word	0x080099e1
 8009944:	080099e1 	.word	0x080099e1
 8009948:	080099e1 	.word	0x080099e1
 800994c:	080099c1 	.word	0x080099c1
 8009950:	080099e1 	.word	0x080099e1
 8009954:	080099e1 	.word	0x080099e1
 8009958:	080099e1 	.word	0x080099e1
 800995c:	080099e1 	.word	0x080099e1
 8009960:	080099e1 	.word	0x080099e1
 8009964:	080099e1 	.word	0x080099e1
 8009968:	080099e1 	.word	0x080099e1
 800996c:	080099c9 	.word	0x080099c9
 8009970:	080099e1 	.word	0x080099e1
 8009974:	080099e1 	.word	0x080099e1
 8009978:	080099e1 	.word	0x080099e1
 800997c:	080099e1 	.word	0x080099e1
 8009980:	080099e1 	.word	0x080099e1
 8009984:	080099e1 	.word	0x080099e1
 8009988:	080099e1 	.word	0x080099e1
 800998c:	080099d1 	.word	0x080099d1
 8009990:	080099e1 	.word	0x080099e1
 8009994:	080099e1 	.word	0x080099e1
 8009998:	080099e1 	.word	0x080099e1
 800999c:	080099e1 	.word	0x080099e1
 80099a0:	080099e1 	.word	0x080099e1
 80099a4:	080099e1 	.word	0x080099e1
 80099a8:	080099e1 	.word	0x080099e1
 80099ac:	080099d9 	.word	0x080099d9
 80099b0:	2301      	movs	r3, #1
 80099b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099b6:	e23b      	b.n	8009e30 <UART_SetConfig+0x7a0>
 80099b8:	2304      	movs	r3, #4
 80099ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099be:	e237      	b.n	8009e30 <UART_SetConfig+0x7a0>
 80099c0:	2308      	movs	r3, #8
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	e233      	b.n	8009e30 <UART_SetConfig+0x7a0>
 80099c8:	2310      	movs	r3, #16
 80099ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ce:	e22f      	b.n	8009e30 <UART_SetConfig+0x7a0>
 80099d0:	2320      	movs	r3, #32
 80099d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099d6:	e22b      	b.n	8009e30 <UART_SetConfig+0x7a0>
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099de:	e227      	b.n	8009e30 <UART_SetConfig+0x7a0>
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099e6:	bf00      	nop
 80099e8:	e222      	b.n	8009e30 <UART_SetConfig+0x7a0>
 80099ea:	bf00      	nop
 80099ec:	0800c818 	.word	0x0800c818
 80099f0:	cfff69f3 	.word	0xcfff69f3
 80099f4:	58000c00 	.word	0x58000c00
 80099f8:	11fff4ff 	.word	0x11fff4ff
 80099fc:	40011000 	.word	0x40011000
 8009a00:	58024400 	.word	0x58024400
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4ac9      	ldr	r2, [pc, #804]	; (8009d30 <UART_SetConfig+0x6a0>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d131      	bne.n	8009a72 <UART_SetConfig+0x3e2>
 8009a0e:	4bc9      	ldr	r3, [pc, #804]	; (8009d34 <UART_SetConfig+0x6a4>)
 8009a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a12:	f003 0307 	and.w	r3, r3, #7
 8009a16:	2b05      	cmp	r3, #5
 8009a18:	d826      	bhi.n	8009a68 <UART_SetConfig+0x3d8>
 8009a1a:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <UART_SetConfig+0x390>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009a39 	.word	0x08009a39
 8009a24:	08009a41 	.word	0x08009a41
 8009a28:	08009a49 	.word	0x08009a49
 8009a2c:	08009a51 	.word	0x08009a51
 8009a30:	08009a59 	.word	0x08009a59
 8009a34:	08009a61 	.word	0x08009a61
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a3e:	e1f7      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009a40:	2304      	movs	r3, #4
 8009a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a46:	e1f3      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009a48:	2308      	movs	r3, #8
 8009a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a4e:	e1ef      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009a50:	2310      	movs	r3, #16
 8009a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a56:	e1eb      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009a58:	2320      	movs	r3, #32
 8009a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a5e:	e1e7      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009a60:	2340      	movs	r3, #64	; 0x40
 8009a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a66:	e1e3      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009a68:	2380      	movs	r3, #128	; 0x80
 8009a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a6e:	bf00      	nop
 8009a70:	e1de      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4ab0      	ldr	r2, [pc, #704]	; (8009d38 <UART_SetConfig+0x6a8>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d132      	bne.n	8009ae2 <UART_SetConfig+0x452>
 8009a7c:	4bad      	ldr	r3, [pc, #692]	; (8009d34 <UART_SetConfig+0x6a4>)
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	2b05      	cmp	r3, #5
 8009a86:	d827      	bhi.n	8009ad8 <UART_SetConfig+0x448>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <UART_SetConfig+0x400>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009aa9 	.word	0x08009aa9
 8009a94:	08009ab1 	.word	0x08009ab1
 8009a98:	08009ab9 	.word	0x08009ab9
 8009a9c:	08009ac1 	.word	0x08009ac1
 8009aa0:	08009ac9 	.word	0x08009ac9
 8009aa4:	08009ad1 	.word	0x08009ad1
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aae:	e1bf      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ab6:	e1bb      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ab8:	2308      	movs	r3, #8
 8009aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009abe:	e1b7      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ac6:	e1b3      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ac8:	2320      	movs	r3, #32
 8009aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ace:	e1af      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ad0:	2340      	movs	r3, #64	; 0x40
 8009ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ad6:	e1ab      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ad8:	2380      	movs	r3, #128	; 0x80
 8009ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ade:	bf00      	nop
 8009ae0:	e1a6      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a95      	ldr	r2, [pc, #596]	; (8009d3c <UART_SetConfig+0x6ac>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d132      	bne.n	8009b52 <UART_SetConfig+0x4c2>
 8009aec:	4b91      	ldr	r3, [pc, #580]	; (8009d34 <UART_SetConfig+0x6a4>)
 8009aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	2b05      	cmp	r3, #5
 8009af6:	d827      	bhi.n	8009b48 <UART_SetConfig+0x4b8>
 8009af8:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <UART_SetConfig+0x470>)
 8009afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afe:	bf00      	nop
 8009b00:	08009b19 	.word	0x08009b19
 8009b04:	08009b21 	.word	0x08009b21
 8009b08:	08009b29 	.word	0x08009b29
 8009b0c:	08009b31 	.word	0x08009b31
 8009b10:	08009b39 	.word	0x08009b39
 8009b14:	08009b41 	.word	0x08009b41
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b1e:	e187      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b20:	2304      	movs	r3, #4
 8009b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b26:	e183      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b28:	2308      	movs	r3, #8
 8009b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b2e:	e17f      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b30:	2310      	movs	r3, #16
 8009b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b36:	e17b      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b38:	2320      	movs	r3, #32
 8009b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b3e:	e177      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b40:	2340      	movs	r3, #64	; 0x40
 8009b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b46:	e173      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b48:	2380      	movs	r3, #128	; 0x80
 8009b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b4e:	bf00      	nop
 8009b50:	e16e      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a7a      	ldr	r2, [pc, #488]	; (8009d40 <UART_SetConfig+0x6b0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d132      	bne.n	8009bc2 <UART_SetConfig+0x532>
 8009b5c:	4b75      	ldr	r3, [pc, #468]	; (8009d34 <UART_SetConfig+0x6a4>)
 8009b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b60:	f003 0307 	and.w	r3, r3, #7
 8009b64:	2b05      	cmp	r3, #5
 8009b66:	d827      	bhi.n	8009bb8 <UART_SetConfig+0x528>
 8009b68:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <UART_SetConfig+0x4e0>)
 8009b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6e:	bf00      	nop
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009b91 	.word	0x08009b91
 8009b78:	08009b99 	.word	0x08009b99
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009bb1 	.word	0x08009bb1
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b8e:	e14f      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b96:	e14b      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b9e:	e147      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ba6:	e143      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bae:	e13f      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bb6:	e13b      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009bb8:	2380      	movs	r3, #128	; 0x80
 8009bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bbe:	bf00      	nop
 8009bc0:	e136      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a5f      	ldr	r2, [pc, #380]	; (8009d44 <UART_SetConfig+0x6b4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d178      	bne.n	8009cbe <UART_SetConfig+0x62e>
 8009bcc:	4b59      	ldr	r3, [pc, #356]	; (8009d34 <UART_SetConfig+0x6a4>)
 8009bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bd4:	2b28      	cmp	r3, #40	; 0x28
 8009bd6:	d86d      	bhi.n	8009cb4 <UART_SetConfig+0x624>
 8009bd8:	a201      	add	r2, pc, #4	; (adr r2, 8009be0 <UART_SetConfig+0x550>)
 8009bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bde:	bf00      	nop
 8009be0:	08009c85 	.word	0x08009c85
 8009be4:	08009cb5 	.word	0x08009cb5
 8009be8:	08009cb5 	.word	0x08009cb5
 8009bec:	08009cb5 	.word	0x08009cb5
 8009bf0:	08009cb5 	.word	0x08009cb5
 8009bf4:	08009cb5 	.word	0x08009cb5
 8009bf8:	08009cb5 	.word	0x08009cb5
 8009bfc:	08009cb5 	.word	0x08009cb5
 8009c00:	08009c8d 	.word	0x08009c8d
 8009c04:	08009cb5 	.word	0x08009cb5
 8009c08:	08009cb5 	.word	0x08009cb5
 8009c0c:	08009cb5 	.word	0x08009cb5
 8009c10:	08009cb5 	.word	0x08009cb5
 8009c14:	08009cb5 	.word	0x08009cb5
 8009c18:	08009cb5 	.word	0x08009cb5
 8009c1c:	08009cb5 	.word	0x08009cb5
 8009c20:	08009c95 	.word	0x08009c95
 8009c24:	08009cb5 	.word	0x08009cb5
 8009c28:	08009cb5 	.word	0x08009cb5
 8009c2c:	08009cb5 	.word	0x08009cb5
 8009c30:	08009cb5 	.word	0x08009cb5
 8009c34:	08009cb5 	.word	0x08009cb5
 8009c38:	08009cb5 	.word	0x08009cb5
 8009c3c:	08009cb5 	.word	0x08009cb5
 8009c40:	08009c9d 	.word	0x08009c9d
 8009c44:	08009cb5 	.word	0x08009cb5
 8009c48:	08009cb5 	.word	0x08009cb5
 8009c4c:	08009cb5 	.word	0x08009cb5
 8009c50:	08009cb5 	.word	0x08009cb5
 8009c54:	08009cb5 	.word	0x08009cb5
 8009c58:	08009cb5 	.word	0x08009cb5
 8009c5c:	08009cb5 	.word	0x08009cb5
 8009c60:	08009ca5 	.word	0x08009ca5
 8009c64:	08009cb5 	.word	0x08009cb5
 8009c68:	08009cb5 	.word	0x08009cb5
 8009c6c:	08009cb5 	.word	0x08009cb5
 8009c70:	08009cb5 	.word	0x08009cb5
 8009c74:	08009cb5 	.word	0x08009cb5
 8009c78:	08009cb5 	.word	0x08009cb5
 8009c7c:	08009cb5 	.word	0x08009cb5
 8009c80:	08009cad 	.word	0x08009cad
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c8a:	e0d1      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009c8c:	2304      	movs	r3, #4
 8009c8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c92:	e0cd      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009c94:	2308      	movs	r3, #8
 8009c96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c9a:	e0c9      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009c9c:	2310      	movs	r3, #16
 8009c9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ca2:	e0c5      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009ca4:	2320      	movs	r3, #32
 8009ca6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009caa:	e0c1      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009cac:	2340      	movs	r3, #64	; 0x40
 8009cae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cb2:	e0bd      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009cb4:	2380      	movs	r3, #128	; 0x80
 8009cb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cba:	bf00      	nop
 8009cbc:	e0b8      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a21      	ldr	r2, [pc, #132]	; (8009d48 <UART_SetConfig+0x6b8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d141      	bne.n	8009d4c <UART_SetConfig+0x6bc>
 8009cc8:	4b1a      	ldr	r3, [pc, #104]	; (8009d34 <UART_SetConfig+0x6a4>)
 8009cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ccc:	f003 0307 	and.w	r3, r3, #7
 8009cd0:	2b05      	cmp	r3, #5
 8009cd2:	d827      	bhi.n	8009d24 <UART_SetConfig+0x694>
 8009cd4:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <UART_SetConfig+0x64c>)
 8009cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cda:	bf00      	nop
 8009cdc:	08009cf5 	.word	0x08009cf5
 8009ce0:	08009cfd 	.word	0x08009cfd
 8009ce4:	08009d05 	.word	0x08009d05
 8009ce8:	08009d0d 	.word	0x08009d0d
 8009cec:	08009d15 	.word	0x08009d15
 8009cf0:	08009d1d 	.word	0x08009d1d
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cfa:	e099      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009cfc:	2304      	movs	r3, #4
 8009cfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d02:	e095      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d04:	2308      	movs	r3, #8
 8009d06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d0a:	e091      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d12:	e08d      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d14:	2320      	movs	r3, #32
 8009d16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d1a:	e089      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d1c:	2340      	movs	r3, #64	; 0x40
 8009d1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d22:	e085      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d24:	2380      	movs	r3, #128	; 0x80
 8009d26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d2a:	bf00      	nop
 8009d2c:	e080      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d2e:	bf00      	nop
 8009d30:	40004400 	.word	0x40004400
 8009d34:	58024400 	.word	0x58024400
 8009d38:	40004800 	.word	0x40004800
 8009d3c:	40004c00 	.word	0x40004c00
 8009d40:	40005000 	.word	0x40005000
 8009d44:	40011400 	.word	0x40011400
 8009d48:	40007800 	.word	0x40007800
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a98      	ldr	r2, [pc, #608]	; (8009fb4 <UART_SetConfig+0x924>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d131      	bne.n	8009dba <UART_SetConfig+0x72a>
 8009d56:	4b98      	ldr	r3, [pc, #608]	; (8009fb8 <UART_SetConfig+0x928>)
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	f003 0307 	and.w	r3, r3, #7
 8009d5e:	2b05      	cmp	r3, #5
 8009d60:	d826      	bhi.n	8009db0 <UART_SetConfig+0x720>
 8009d62:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <UART_SetConfig+0x6d8>)
 8009d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d68:	08009d81 	.word	0x08009d81
 8009d6c:	08009d89 	.word	0x08009d89
 8009d70:	08009d91 	.word	0x08009d91
 8009d74:	08009d99 	.word	0x08009d99
 8009d78:	08009da1 	.word	0x08009da1
 8009d7c:	08009da9 	.word	0x08009da9
 8009d80:	2300      	movs	r3, #0
 8009d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d86:	e053      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d88:	2304      	movs	r3, #4
 8009d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d8e:	e04f      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d90:	2308      	movs	r3, #8
 8009d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d96:	e04b      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009d98:	2310      	movs	r3, #16
 8009d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d9e:	e047      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009da0:	2320      	movs	r3, #32
 8009da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009da6:	e043      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009da8:	2340      	movs	r3, #64	; 0x40
 8009daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dae:	e03f      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009db0:	2380      	movs	r3, #128	; 0x80
 8009db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009db6:	bf00      	nop
 8009db8:	e03a      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a7f      	ldr	r2, [pc, #508]	; (8009fbc <UART_SetConfig+0x92c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d132      	bne.n	8009e2a <UART_SetConfig+0x79a>
 8009dc4:	4b7c      	ldr	r3, [pc, #496]	; (8009fb8 <UART_SetConfig+0x928>)
 8009dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	2b05      	cmp	r3, #5
 8009dce:	d827      	bhi.n	8009e20 <UART_SetConfig+0x790>
 8009dd0:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <UART_SetConfig+0x748>)
 8009dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd6:	bf00      	nop
 8009dd8:	08009df1 	.word	0x08009df1
 8009ddc:	08009df9 	.word	0x08009df9
 8009de0:	08009e01 	.word	0x08009e01
 8009de4:	08009e09 	.word	0x08009e09
 8009de8:	08009e11 	.word	0x08009e11
 8009dec:	08009e19 	.word	0x08009e19
 8009df0:	2302      	movs	r3, #2
 8009df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009df6:	e01b      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009df8:	2304      	movs	r3, #4
 8009dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dfe:	e017      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009e00:	2308      	movs	r3, #8
 8009e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e06:	e013      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009e08:	2310      	movs	r3, #16
 8009e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e0e:	e00f      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009e10:	2320      	movs	r3, #32
 8009e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e16:	e00b      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e1e:	e007      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009e20:	2380      	movs	r3, #128	; 0x80
 8009e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e26:	bf00      	nop
 8009e28:	e002      	b.n	8009e30 <UART_SetConfig+0x7a0>
 8009e2a:	2380      	movs	r3, #128	; 0x80
 8009e2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a61      	ldr	r2, [pc, #388]	; (8009fbc <UART_SetConfig+0x92c>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	f040 86f3 	bne.w	800ac22 <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	f000 80bd 	beq.w	8009fc0 <UART_SetConfig+0x930>
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	dc04      	bgt.n	8009e54 <UART_SetConfig+0x7c4>
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d00c      	beq.n	8009e68 <UART_SetConfig+0x7d8>
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d05b      	beq.n	8009f0a <UART_SetConfig+0x87a>
 8009e52:	e276      	b.n	800a342 <UART_SetConfig+0xcb2>
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	f000 81ad 	beq.w	800a1b4 <UART_SetConfig+0xb24>
 8009e5a:	2b40      	cmp	r3, #64	; 0x40
 8009e5c:	f000 821a 	beq.w	800a294 <UART_SetConfig+0xc04>
 8009e60:	2b10      	cmp	r3, #16
 8009e62:	f000 8101 	beq.w	800a068 <UART_SetConfig+0x9d8>
 8009e66:	e26c      	b.n	800a342 <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009e68:	f7fd fda8 	bl	80079bc <HAL_RCCEx_GetD3PCLK1Freq>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d044      	beq.n	8009f00 <UART_SetConfig+0x870>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d03e      	beq.n	8009efc <UART_SetConfig+0x86c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d038      	beq.n	8009ef8 <UART_SetConfig+0x868>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d032      	beq.n	8009ef4 <UART_SetConfig+0x864>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b04      	cmp	r3, #4
 8009e94:	d02c      	beq.n	8009ef0 <UART_SetConfig+0x860>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d026      	beq.n	8009eec <UART_SetConfig+0x85c>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2b06      	cmp	r3, #6
 8009ea4:	d020      	beq.n	8009ee8 <UART_SetConfig+0x858>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b07      	cmp	r3, #7
 8009eac:	d01a      	beq.n	8009ee4 <UART_SetConfig+0x854>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	2b08      	cmp	r3, #8
 8009eb4:	d014      	beq.n	8009ee0 <UART_SetConfig+0x850>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d00e      	beq.n	8009edc <UART_SetConfig+0x84c>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	2b0a      	cmp	r3, #10
 8009ec4:	d008      	beq.n	8009ed8 <UART_SetConfig+0x848>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	2b0b      	cmp	r3, #11
 8009ecc:	d102      	bne.n	8009ed4 <UART_SetConfig+0x844>
 8009ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ed2:	e016      	b.n	8009f02 <UART_SetConfig+0x872>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e014      	b.n	8009f02 <UART_SetConfig+0x872>
 8009ed8:	2380      	movs	r3, #128	; 0x80
 8009eda:	e012      	b.n	8009f02 <UART_SetConfig+0x872>
 8009edc:	2340      	movs	r3, #64	; 0x40
 8009ede:	e010      	b.n	8009f02 <UART_SetConfig+0x872>
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	e00e      	b.n	8009f02 <UART_SetConfig+0x872>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	e00c      	b.n	8009f02 <UART_SetConfig+0x872>
 8009ee8:	230c      	movs	r3, #12
 8009eea:	e00a      	b.n	8009f02 <UART_SetConfig+0x872>
 8009eec:	230a      	movs	r3, #10
 8009eee:	e008      	b.n	8009f02 <UART_SetConfig+0x872>
 8009ef0:	2308      	movs	r3, #8
 8009ef2:	e006      	b.n	8009f02 <UART_SetConfig+0x872>
 8009ef4:	2306      	movs	r3, #6
 8009ef6:	e004      	b.n	8009f02 <UART_SetConfig+0x872>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	e002      	b.n	8009f02 <UART_SetConfig+0x872>
 8009efc:	2302      	movs	r3, #2
 8009efe:	e000      	b.n	8009f02 <UART_SetConfig+0x872>
 8009f00:	2301      	movs	r3, #1
 8009f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f08:	e21f      	b.n	800a34a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f0a:	f107 0318 	add.w	r3, r7, #24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fd fd6a 	bl	80079e8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d044      	beq.n	8009fa8 <UART_SetConfig+0x918>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d03e      	beq.n	8009fa4 <UART_SetConfig+0x914>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d038      	beq.n	8009fa0 <UART_SetConfig+0x910>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d032      	beq.n	8009f9c <UART_SetConfig+0x90c>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	2b04      	cmp	r3, #4
 8009f3c:	d02c      	beq.n	8009f98 <UART_SetConfig+0x908>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	2b05      	cmp	r3, #5
 8009f44:	d026      	beq.n	8009f94 <UART_SetConfig+0x904>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	2b06      	cmp	r3, #6
 8009f4c:	d020      	beq.n	8009f90 <UART_SetConfig+0x900>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	2b07      	cmp	r3, #7
 8009f54:	d01a      	beq.n	8009f8c <UART_SetConfig+0x8fc>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	2b08      	cmp	r3, #8
 8009f5c:	d014      	beq.n	8009f88 <UART_SetConfig+0x8f8>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f62:	2b09      	cmp	r3, #9
 8009f64:	d00e      	beq.n	8009f84 <UART_SetConfig+0x8f4>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	2b0a      	cmp	r3, #10
 8009f6c:	d008      	beq.n	8009f80 <UART_SetConfig+0x8f0>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	2b0b      	cmp	r3, #11
 8009f74:	d102      	bne.n	8009f7c <UART_SetConfig+0x8ec>
 8009f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f7a:	e016      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e014      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f80:	2380      	movs	r3, #128	; 0x80
 8009f82:	e012      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f84:	2340      	movs	r3, #64	; 0x40
 8009f86:	e010      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f88:	2320      	movs	r3, #32
 8009f8a:	e00e      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f8c:	2310      	movs	r3, #16
 8009f8e:	e00c      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f90:	230c      	movs	r3, #12
 8009f92:	e00a      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f94:	230a      	movs	r3, #10
 8009f96:	e008      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f98:	2308      	movs	r3, #8
 8009f9a:	e006      	b.n	8009faa <UART_SetConfig+0x91a>
 8009f9c:	2306      	movs	r3, #6
 8009f9e:	e004      	b.n	8009faa <UART_SetConfig+0x91a>
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	e002      	b.n	8009faa <UART_SetConfig+0x91a>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e000      	b.n	8009faa <UART_SetConfig+0x91a>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fb0:	e1cb      	b.n	800a34a <UART_SetConfig+0xcba>
 8009fb2:	bf00      	nop
 8009fb4:	40007c00 	.word	0x40007c00
 8009fb8:	58024400 	.word	0x58024400
 8009fbc:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fc0:	f107 030c 	add.w	r3, r7, #12
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fd fe5b 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d044      	beq.n	800a05e <UART_SetConfig+0x9ce>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d03e      	beq.n	800a05a <UART_SetConfig+0x9ca>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d038      	beq.n	800a056 <UART_SetConfig+0x9c6>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d032      	beq.n	800a052 <UART_SetConfig+0x9c2>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d02c      	beq.n	800a04e <UART_SetConfig+0x9be>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	2b05      	cmp	r3, #5
 8009ffa:	d026      	beq.n	800a04a <UART_SetConfig+0x9ba>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	2b06      	cmp	r3, #6
 800a002:	d020      	beq.n	800a046 <UART_SetConfig+0x9b6>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	2b07      	cmp	r3, #7
 800a00a:	d01a      	beq.n	800a042 <UART_SetConfig+0x9b2>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	2b08      	cmp	r3, #8
 800a012:	d014      	beq.n	800a03e <UART_SetConfig+0x9ae>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	2b09      	cmp	r3, #9
 800a01a:	d00e      	beq.n	800a03a <UART_SetConfig+0x9aa>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2b0a      	cmp	r3, #10
 800a022:	d008      	beq.n	800a036 <UART_SetConfig+0x9a6>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	2b0b      	cmp	r3, #11
 800a02a:	d102      	bne.n	800a032 <UART_SetConfig+0x9a2>
 800a02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a030:	e016      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a032:	2301      	movs	r3, #1
 800a034:	e014      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a036:	2380      	movs	r3, #128	; 0x80
 800a038:	e012      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a03a:	2340      	movs	r3, #64	; 0x40
 800a03c:	e010      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a03e:	2320      	movs	r3, #32
 800a040:	e00e      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a042:	2310      	movs	r3, #16
 800a044:	e00c      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a046:	230c      	movs	r3, #12
 800a048:	e00a      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a04a:	230a      	movs	r3, #10
 800a04c:	e008      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a04e:	2308      	movs	r3, #8
 800a050:	e006      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a052:	2306      	movs	r3, #6
 800a054:	e004      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a056:	2304      	movs	r3, #4
 800a058:	e002      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e000      	b.n	800a060 <UART_SetConfig+0x9d0>
 800a05e:	2301      	movs	r3, #1
 800a060:	fbb2 f3f3 	udiv	r3, r2, r3
 800a064:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a066:	e170      	b.n	800a34a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a068:	4b79      	ldr	r3, [pc, #484]	; (800a250 <UART_SetConfig+0xbc0>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b00      	cmp	r3, #0
 800a072:	d054      	beq.n	800a11e <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a074:	4b76      	ldr	r3, [pc, #472]	; (800a250 <UART_SetConfig+0xbc0>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	08db      	lsrs	r3, r3, #3
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	4a75      	ldr	r2, [pc, #468]	; (800a254 <UART_SetConfig+0xbc4>)
 800a080:	40da      	lsrs	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	2b00      	cmp	r3, #0
 800a088:	d044      	beq.n	800a114 <UART_SetConfig+0xa84>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d03e      	beq.n	800a110 <UART_SetConfig+0xa80>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	2b02      	cmp	r3, #2
 800a098:	d038      	beq.n	800a10c <UART_SetConfig+0xa7c>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d032      	beq.n	800a108 <UART_SetConfig+0xa78>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	2b04      	cmp	r3, #4
 800a0a8:	d02c      	beq.n	800a104 <UART_SetConfig+0xa74>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	2b05      	cmp	r3, #5
 800a0b0:	d026      	beq.n	800a100 <UART_SetConfig+0xa70>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	2b06      	cmp	r3, #6
 800a0b8:	d020      	beq.n	800a0fc <UART_SetConfig+0xa6c>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	2b07      	cmp	r3, #7
 800a0c0:	d01a      	beq.n	800a0f8 <UART_SetConfig+0xa68>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d014      	beq.n	800a0f4 <UART_SetConfig+0xa64>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	2b09      	cmp	r3, #9
 800a0d0:	d00e      	beq.n	800a0f0 <UART_SetConfig+0xa60>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	2b0a      	cmp	r3, #10
 800a0d8:	d008      	beq.n	800a0ec <UART_SetConfig+0xa5c>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	2b0b      	cmp	r3, #11
 800a0e0:	d102      	bne.n	800a0e8 <UART_SetConfig+0xa58>
 800a0e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0e6:	e016      	b.n	800a116 <UART_SetConfig+0xa86>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e014      	b.n	800a116 <UART_SetConfig+0xa86>
 800a0ec:	2380      	movs	r3, #128	; 0x80
 800a0ee:	e012      	b.n	800a116 <UART_SetConfig+0xa86>
 800a0f0:	2340      	movs	r3, #64	; 0x40
 800a0f2:	e010      	b.n	800a116 <UART_SetConfig+0xa86>
 800a0f4:	2320      	movs	r3, #32
 800a0f6:	e00e      	b.n	800a116 <UART_SetConfig+0xa86>
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	e00c      	b.n	800a116 <UART_SetConfig+0xa86>
 800a0fc:	230c      	movs	r3, #12
 800a0fe:	e00a      	b.n	800a116 <UART_SetConfig+0xa86>
 800a100:	230a      	movs	r3, #10
 800a102:	e008      	b.n	800a116 <UART_SetConfig+0xa86>
 800a104:	2308      	movs	r3, #8
 800a106:	e006      	b.n	800a116 <UART_SetConfig+0xa86>
 800a108:	2306      	movs	r3, #6
 800a10a:	e004      	b.n	800a116 <UART_SetConfig+0xa86>
 800a10c:	2304      	movs	r3, #4
 800a10e:	e002      	b.n	800a116 <UART_SetConfig+0xa86>
 800a110:	2302      	movs	r3, #2
 800a112:	e000      	b.n	800a116 <UART_SetConfig+0xa86>
 800a114:	2301      	movs	r3, #1
 800a116:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a11c:	e115      	b.n	800a34a <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	2b00      	cmp	r3, #0
 800a124:	d043      	beq.n	800a1ae <UART_SetConfig+0xb1e>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d03d      	beq.n	800a1aa <UART_SetConfig+0xb1a>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	2b02      	cmp	r3, #2
 800a134:	d037      	beq.n	800a1a6 <UART_SetConfig+0xb16>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d031      	beq.n	800a1a2 <UART_SetConfig+0xb12>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a142:	2b04      	cmp	r3, #4
 800a144:	d02b      	beq.n	800a19e <UART_SetConfig+0xb0e>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	2b05      	cmp	r3, #5
 800a14c:	d025      	beq.n	800a19a <UART_SetConfig+0xb0a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a152:	2b06      	cmp	r3, #6
 800a154:	d01f      	beq.n	800a196 <UART_SetConfig+0xb06>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15a:	2b07      	cmp	r3, #7
 800a15c:	d019      	beq.n	800a192 <UART_SetConfig+0xb02>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	2b08      	cmp	r3, #8
 800a164:	d013      	beq.n	800a18e <UART_SetConfig+0xafe>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	2b09      	cmp	r3, #9
 800a16c:	d00d      	beq.n	800a18a <UART_SetConfig+0xafa>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a172:	2b0a      	cmp	r3, #10
 800a174:	d007      	beq.n	800a186 <UART_SetConfig+0xaf6>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	2b0b      	cmp	r3, #11
 800a17c:	d101      	bne.n	800a182 <UART_SetConfig+0xaf2>
 800a17e:	4b36      	ldr	r3, [pc, #216]	; (800a258 <UART_SetConfig+0xbc8>)
 800a180:	e016      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a182:	4b34      	ldr	r3, [pc, #208]	; (800a254 <UART_SetConfig+0xbc4>)
 800a184:	e014      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a186:	4b35      	ldr	r3, [pc, #212]	; (800a25c <UART_SetConfig+0xbcc>)
 800a188:	e012      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a18a:	4b35      	ldr	r3, [pc, #212]	; (800a260 <UART_SetConfig+0xbd0>)
 800a18c:	e010      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a18e:	4b35      	ldr	r3, [pc, #212]	; (800a264 <UART_SetConfig+0xbd4>)
 800a190:	e00e      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a192:	4b35      	ldr	r3, [pc, #212]	; (800a268 <UART_SetConfig+0xbd8>)
 800a194:	e00c      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a196:	4b35      	ldr	r3, [pc, #212]	; (800a26c <UART_SetConfig+0xbdc>)
 800a198:	e00a      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a19a:	4b35      	ldr	r3, [pc, #212]	; (800a270 <UART_SetConfig+0xbe0>)
 800a19c:	e008      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a19e:	4b35      	ldr	r3, [pc, #212]	; (800a274 <UART_SetConfig+0xbe4>)
 800a1a0:	e006      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a1a2:	4b35      	ldr	r3, [pc, #212]	; (800a278 <UART_SetConfig+0xbe8>)
 800a1a4:	e004      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a1a6:	4b35      	ldr	r3, [pc, #212]	; (800a27c <UART_SetConfig+0xbec>)
 800a1a8:	e002      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a1aa:	4b35      	ldr	r3, [pc, #212]	; (800a280 <UART_SetConfig+0xbf0>)
 800a1ac:	e000      	b.n	800a1b0 <UART_SetConfig+0xb20>
 800a1ae:	4b29      	ldr	r3, [pc, #164]	; (800a254 <UART_SetConfig+0xbc4>)
 800a1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1b2:	e0ca      	b.n	800a34a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d046      	beq.n	800a24a <UART_SetConfig+0xbba>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d040      	beq.n	800a246 <UART_SetConfig+0xbb6>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d03a      	beq.n	800a242 <UART_SetConfig+0xbb2>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d034      	beq.n	800a23e <UART_SetConfig+0xbae>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	d02e      	beq.n	800a23a <UART_SetConfig+0xbaa>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	2b05      	cmp	r3, #5
 800a1e2:	d028      	beq.n	800a236 <UART_SetConfig+0xba6>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	2b06      	cmp	r3, #6
 800a1ea:	d022      	beq.n	800a232 <UART_SetConfig+0xba2>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f0:	2b07      	cmp	r3, #7
 800a1f2:	d01c      	beq.n	800a22e <UART_SetConfig+0xb9e>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d016      	beq.n	800a22a <UART_SetConfig+0xb9a>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a200:	2b09      	cmp	r3, #9
 800a202:	d00f      	beq.n	800a224 <UART_SetConfig+0xb94>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	2b0a      	cmp	r3, #10
 800a20a:	d008      	beq.n	800a21e <UART_SetConfig+0xb8e>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	2b0b      	cmp	r3, #11
 800a212:	d102      	bne.n	800a21a <UART_SetConfig+0xb8a>
 800a214:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a218:	e018      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a21a:	4b13      	ldr	r3, [pc, #76]	; (800a268 <UART_SetConfig+0xbd8>)
 800a21c:	e016      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a21e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a222:	e013      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a224:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a228:	e010      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a22a:	4b16      	ldr	r3, [pc, #88]	; (800a284 <UART_SetConfig+0xbf4>)
 800a22c:	e00e      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a22e:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <UART_SetConfig+0xbc8>)
 800a230:	e00c      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a232:	4b15      	ldr	r3, [pc, #84]	; (800a288 <UART_SetConfig+0xbf8>)
 800a234:	e00a      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <UART_SetConfig+0xbfc>)
 800a238:	e008      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a23a:	4b08      	ldr	r3, [pc, #32]	; (800a25c <UART_SetConfig+0xbcc>)
 800a23c:	e006      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a23e:	4b14      	ldr	r3, [pc, #80]	; (800a290 <UART_SetConfig+0xc00>)
 800a240:	e004      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a242:	4b07      	ldr	r3, [pc, #28]	; (800a260 <UART_SetConfig+0xbd0>)
 800a244:	e002      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <UART_SetConfig+0xbd4>)
 800a248:	e000      	b.n	800a24c <UART_SetConfig+0xbbc>
 800a24a:	4b07      	ldr	r3, [pc, #28]	; (800a268 <UART_SetConfig+0xbd8>)
 800a24c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a24e:	e07c      	b.n	800a34a <UART_SetConfig+0xcba>
 800a250:	58024400 	.word	0x58024400
 800a254:	03d09000 	.word	0x03d09000
 800a258:	0003d090 	.word	0x0003d090
 800a25c:	0007a120 	.word	0x0007a120
 800a260:	000f4240 	.word	0x000f4240
 800a264:	001e8480 	.word	0x001e8480
 800a268:	003d0900 	.word	0x003d0900
 800a26c:	00516155 	.word	0x00516155
 800a270:	0061a800 	.word	0x0061a800
 800a274:	007a1200 	.word	0x007a1200
 800a278:	00a2c2aa 	.word	0x00a2c2aa
 800a27c:	00f42400 	.word	0x00f42400
 800a280:	01e84800 	.word	0x01e84800
 800a284:	0001e848 	.word	0x0001e848
 800a288:	00051615 	.word	0x00051615
 800a28c:	00061a80 	.word	0x00061a80
 800a290:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d04e      	beq.n	800a33a <UART_SetConfig+0xcaa>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d047      	beq.n	800a334 <UART_SetConfig+0xca4>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d040      	beq.n	800a32e <UART_SetConfig+0xc9e>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d039      	beq.n	800a328 <UART_SetConfig+0xc98>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d032      	beq.n	800a322 <UART_SetConfig+0xc92>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	2b05      	cmp	r3, #5
 800a2c2:	d02b      	beq.n	800a31c <UART_SetConfig+0xc8c>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	2b06      	cmp	r3, #6
 800a2ca:	d024      	beq.n	800a316 <UART_SetConfig+0xc86>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b07      	cmp	r3, #7
 800a2d2:	d01d      	beq.n	800a310 <UART_SetConfig+0xc80>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	2b08      	cmp	r3, #8
 800a2da:	d016      	beq.n	800a30a <UART_SetConfig+0xc7a>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	2b09      	cmp	r3, #9
 800a2e2:	d00f      	beq.n	800a304 <UART_SetConfig+0xc74>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	2b0a      	cmp	r3, #10
 800a2ea:	d008      	beq.n	800a2fe <UART_SetConfig+0xc6e>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	2b0b      	cmp	r3, #11
 800a2f2:	d101      	bne.n	800a2f8 <UART_SetConfig+0xc68>
 800a2f4:	2380      	movs	r3, #128	; 0x80
 800a2f6:	e022      	b.n	800a33e <UART_SetConfig+0xcae>
 800a2f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2fc:	e01f      	b.n	800a33e <UART_SetConfig+0xcae>
 800a2fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a302:	e01c      	b.n	800a33e <UART_SetConfig+0xcae>
 800a304:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a308:	e019      	b.n	800a33e <UART_SetConfig+0xcae>
 800a30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a30e:	e016      	b.n	800a33e <UART_SetConfig+0xcae>
 800a310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a314:	e013      	b.n	800a33e <UART_SetConfig+0xcae>
 800a316:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a31a:	e010      	b.n	800a33e <UART_SetConfig+0xcae>
 800a31c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a320:	e00d      	b.n	800a33e <UART_SetConfig+0xcae>
 800a322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a326:	e00a      	b.n	800a33e <UART_SetConfig+0xcae>
 800a328:	f241 5355 	movw	r3, #5461	; 0x1555
 800a32c:	e007      	b.n	800a33e <UART_SetConfig+0xcae>
 800a32e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a332:	e004      	b.n	800a33e <UART_SetConfig+0xcae>
 800a334:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a338:	e001      	b.n	800a33e <UART_SetConfig+0xcae>
 800a33a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a33e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a340:	e003      	b.n	800a34a <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a348:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f001 83e8 	beq.w	800bb22 <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	4613      	mov	r3, r2
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	4413      	add	r3, r2
 800a35c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a35e:	429a      	cmp	r2, r3
 800a360:	d305      	bcc.n	800a36e <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d904      	bls.n	800a378 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a374:	f001 bbd5 	b.w	800bb22 <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 800a378:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	f000 8154 	beq.w	800a62a <UART_SetConfig+0xf9a>
 800a382:	2b08      	cmp	r3, #8
 800a384:	dc06      	bgt.n	800a394 <UART_SetConfig+0xd04>
 800a386:	2b02      	cmp	r3, #2
 800a388:	d00f      	beq.n	800a3aa <UART_SetConfig+0xd1a>
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	f000 80ac 	beq.w	800a4e8 <UART_SetConfig+0xe58>
 800a390:	f000 bc30 	b.w	800abf4 <UART_SetConfig+0x1564>
 800a394:	2b20      	cmp	r3, #32
 800a396:	f000 832d 	beq.w	800a9f4 <UART_SetConfig+0x1364>
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	f000 83a5 	beq.w	800aaea <UART_SetConfig+0x145a>
 800a3a0:	2b10      	cmp	r3, #16
 800a3a2:	f000 81e3 	beq.w	800a76c <UART_SetConfig+0x10dc>
 800a3a6:	f000 bc25 	b.w	800abf4 <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3aa:	f7fd fb07 	bl	80079bc <HAL_RCCEx_GetD3PCLK1Freq>
 800a3ae:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f04f 0100 	mov.w	r1, #0
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d067      	beq.n	800a490 <UART_SetConfig+0xe00>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d05e      	beq.n	800a486 <UART_SetConfig+0xdf6>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d055      	beq.n	800a47c <UART_SetConfig+0xdec>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d04c      	beq.n	800a472 <UART_SetConfig+0xde2>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d043      	beq.n	800a468 <UART_SetConfig+0xdd8>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b05      	cmp	r3, #5
 800a3e6:	d03a      	beq.n	800a45e <UART_SetConfig+0xdce>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b06      	cmp	r3, #6
 800a3ee:	d031      	beq.n	800a454 <UART_SetConfig+0xdc4>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b07      	cmp	r3, #7
 800a3f6:	d028      	beq.n	800a44a <UART_SetConfig+0xdba>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d01f      	beq.n	800a440 <UART_SetConfig+0xdb0>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b09      	cmp	r3, #9
 800a406:	d016      	beq.n	800a436 <UART_SetConfig+0xda6>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b0a      	cmp	r3, #10
 800a40e:	d00d      	beq.n	800a42c <UART_SetConfig+0xd9c>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	2b0b      	cmp	r3, #11
 800a416:	d104      	bne.n	800a422 <UART_SetConfig+0xd92>
 800a418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a41c:	f04f 0400 	mov.w	r4, #0
 800a420:	e03a      	b.n	800a498 <UART_SetConfig+0xe08>
 800a422:	f04f 0301 	mov.w	r3, #1
 800a426:	f04f 0400 	mov.w	r4, #0
 800a42a:	e035      	b.n	800a498 <UART_SetConfig+0xe08>
 800a42c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a430:	f04f 0400 	mov.w	r4, #0
 800a434:	e030      	b.n	800a498 <UART_SetConfig+0xe08>
 800a436:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a43a:	f04f 0400 	mov.w	r4, #0
 800a43e:	e02b      	b.n	800a498 <UART_SetConfig+0xe08>
 800a440:	f04f 0320 	mov.w	r3, #32
 800a444:	f04f 0400 	mov.w	r4, #0
 800a448:	e026      	b.n	800a498 <UART_SetConfig+0xe08>
 800a44a:	f04f 0310 	mov.w	r3, #16
 800a44e:	f04f 0400 	mov.w	r4, #0
 800a452:	e021      	b.n	800a498 <UART_SetConfig+0xe08>
 800a454:	f04f 030c 	mov.w	r3, #12
 800a458:	f04f 0400 	mov.w	r4, #0
 800a45c:	e01c      	b.n	800a498 <UART_SetConfig+0xe08>
 800a45e:	f04f 030a 	mov.w	r3, #10
 800a462:	f04f 0400 	mov.w	r4, #0
 800a466:	e017      	b.n	800a498 <UART_SetConfig+0xe08>
 800a468:	f04f 0308 	mov.w	r3, #8
 800a46c:	f04f 0400 	mov.w	r4, #0
 800a470:	e012      	b.n	800a498 <UART_SetConfig+0xe08>
 800a472:	f04f 0306 	mov.w	r3, #6
 800a476:	f04f 0400 	mov.w	r4, #0
 800a47a:	e00d      	b.n	800a498 <UART_SetConfig+0xe08>
 800a47c:	f04f 0304 	mov.w	r3, #4
 800a480:	f04f 0400 	mov.w	r4, #0
 800a484:	e008      	b.n	800a498 <UART_SetConfig+0xe08>
 800a486:	f04f 0302 	mov.w	r3, #2
 800a48a:	f04f 0400 	mov.w	r4, #0
 800a48e:	e003      	b.n	800a498 <UART_SetConfig+0xe08>
 800a490:	f04f 0301 	mov.w	r3, #1
 800a494:	f04f 0400 	mov.w	r4, #0
 800a498:	461a      	mov	r2, r3
 800a49a:	4623      	mov	r3, r4
 800a49c:	f7f5 ff1c 	bl	80002d8 <__aeabi_uldivmod>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	f04f 0300 	mov.w	r3, #0
 800a4ac:	f04f 0400 	mov.w	r4, #0
 800a4b0:	0214      	lsls	r4, r2, #8
 800a4b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a4b6:	020b      	lsls	r3, r1, #8
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	6852      	ldr	r2, [r2, #4]
 800a4bc:	0852      	lsrs	r2, r2, #1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	f04f 0200 	mov.w	r2, #0
 800a4c4:	eb13 0b01 	adds.w	fp, r3, r1
 800a4c8:	eb44 0c02 	adc.w	ip, r4, r2
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	4661      	mov	r1, ip
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f04f 0400 	mov.w	r4, #0
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4623      	mov	r3, r4
 800a4dc:	f7f5 fefc 	bl	80002d8 <__aeabi_uldivmod>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4e6:	e389      	b.n	800abfc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e8:	f107 0318 	add.w	r3, r7, #24
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fd fa7b 	bl	80079e8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f04f 0100 	mov.w	r1, #0
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d067      	beq.n	800a5d2 <UART_SetConfig+0xf42>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	2b01      	cmp	r3, #1
 800a508:	d05e      	beq.n	800a5c8 <UART_SetConfig+0xf38>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d055      	beq.n	800a5be <UART_SetConfig+0xf2e>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	2b03      	cmp	r3, #3
 800a518:	d04c      	beq.n	800a5b4 <UART_SetConfig+0xf24>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d043      	beq.n	800a5aa <UART_SetConfig+0xf1a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	2b05      	cmp	r3, #5
 800a528:	d03a      	beq.n	800a5a0 <UART_SetConfig+0xf10>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	2b06      	cmp	r3, #6
 800a530:	d031      	beq.n	800a596 <UART_SetConfig+0xf06>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	2b07      	cmp	r3, #7
 800a538:	d028      	beq.n	800a58c <UART_SetConfig+0xefc>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	2b08      	cmp	r3, #8
 800a540:	d01f      	beq.n	800a582 <UART_SetConfig+0xef2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	2b09      	cmp	r3, #9
 800a548:	d016      	beq.n	800a578 <UART_SetConfig+0xee8>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	2b0a      	cmp	r3, #10
 800a550:	d00d      	beq.n	800a56e <UART_SetConfig+0xede>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	2b0b      	cmp	r3, #11
 800a558:	d104      	bne.n	800a564 <UART_SetConfig+0xed4>
 800a55a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a55e:	f04f 0400 	mov.w	r4, #0
 800a562:	e03a      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a564:	f04f 0301 	mov.w	r3, #1
 800a568:	f04f 0400 	mov.w	r4, #0
 800a56c:	e035      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a56e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a572:	f04f 0400 	mov.w	r4, #0
 800a576:	e030      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a578:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a57c:	f04f 0400 	mov.w	r4, #0
 800a580:	e02b      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a582:	f04f 0320 	mov.w	r3, #32
 800a586:	f04f 0400 	mov.w	r4, #0
 800a58a:	e026      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a58c:	f04f 0310 	mov.w	r3, #16
 800a590:	f04f 0400 	mov.w	r4, #0
 800a594:	e021      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a596:	f04f 030c 	mov.w	r3, #12
 800a59a:	f04f 0400 	mov.w	r4, #0
 800a59e:	e01c      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a5a0:	f04f 030a 	mov.w	r3, #10
 800a5a4:	f04f 0400 	mov.w	r4, #0
 800a5a8:	e017      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a5aa:	f04f 0308 	mov.w	r3, #8
 800a5ae:	f04f 0400 	mov.w	r4, #0
 800a5b2:	e012      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a5b4:	f04f 0306 	mov.w	r3, #6
 800a5b8:	f04f 0400 	mov.w	r4, #0
 800a5bc:	e00d      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a5be:	f04f 0304 	mov.w	r3, #4
 800a5c2:	f04f 0400 	mov.w	r4, #0
 800a5c6:	e008      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a5c8:	f04f 0302 	mov.w	r3, #2
 800a5cc:	f04f 0400 	mov.w	r4, #0
 800a5d0:	e003      	b.n	800a5da <UART_SetConfig+0xf4a>
 800a5d2:	f04f 0301 	mov.w	r3, #1
 800a5d6:	f04f 0400 	mov.w	r4, #0
 800a5da:	461a      	mov	r2, r3
 800a5dc:	4623      	mov	r3, r4
 800a5de:	f7f5 fe7b 	bl	80002d8 <__aeabi_uldivmod>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	f04f 0300 	mov.w	r3, #0
 800a5ee:	f04f 0400 	mov.w	r4, #0
 800a5f2:	0214      	lsls	r4, r2, #8
 800a5f4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a5f8:	020b      	lsls	r3, r1, #8
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	6852      	ldr	r2, [r2, #4]
 800a5fe:	0852      	lsrs	r2, r2, #1
 800a600:	4611      	mov	r1, r2
 800a602:	f04f 0200 	mov.w	r2, #0
 800a606:	eb13 0b01 	adds.w	fp, r3, r1
 800a60a:	eb44 0c02 	adc.w	ip, r4, r2
 800a60e:	4658      	mov	r0, fp
 800a610:	4661      	mov	r1, ip
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f04f 0400 	mov.w	r4, #0
 800a61a:	461a      	mov	r2, r3
 800a61c:	4623      	mov	r3, r4
 800a61e:	f7f5 fe5b 	bl	80002d8 <__aeabi_uldivmod>
 800a622:	4603      	mov	r3, r0
 800a624:	460c      	mov	r4, r1
 800a626:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a628:	e2e8      	b.n	800abfc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a62a:	f107 030c 	add.w	r3, r7, #12
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd fb26 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	4618      	mov	r0, r3
 800a638:	f04f 0100 	mov.w	r1, #0
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b00      	cmp	r3, #0
 800a642:	d067      	beq.n	800a714 <UART_SetConfig+0x1084>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d05e      	beq.n	800a70a <UART_SetConfig+0x107a>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b02      	cmp	r3, #2
 800a652:	d055      	beq.n	800a700 <UART_SetConfig+0x1070>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d04c      	beq.n	800a6f6 <UART_SetConfig+0x1066>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b04      	cmp	r3, #4
 800a662:	d043      	beq.n	800a6ec <UART_SetConfig+0x105c>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b05      	cmp	r3, #5
 800a66a:	d03a      	beq.n	800a6e2 <UART_SetConfig+0x1052>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b06      	cmp	r3, #6
 800a672:	d031      	beq.n	800a6d8 <UART_SetConfig+0x1048>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b07      	cmp	r3, #7
 800a67a:	d028      	beq.n	800a6ce <UART_SetConfig+0x103e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b08      	cmp	r3, #8
 800a682:	d01f      	beq.n	800a6c4 <UART_SetConfig+0x1034>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b09      	cmp	r3, #9
 800a68a:	d016      	beq.n	800a6ba <UART_SetConfig+0x102a>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b0a      	cmp	r3, #10
 800a692:	d00d      	beq.n	800a6b0 <UART_SetConfig+0x1020>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b0b      	cmp	r3, #11
 800a69a:	d104      	bne.n	800a6a6 <UART_SetConfig+0x1016>
 800a69c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6a0:	f04f 0400 	mov.w	r4, #0
 800a6a4:	e03a      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6a6:	f04f 0301 	mov.w	r3, #1
 800a6aa:	f04f 0400 	mov.w	r4, #0
 800a6ae:	e035      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a6b4:	f04f 0400 	mov.w	r4, #0
 800a6b8:	e030      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a6be:	f04f 0400 	mov.w	r4, #0
 800a6c2:	e02b      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6c4:	f04f 0320 	mov.w	r3, #32
 800a6c8:	f04f 0400 	mov.w	r4, #0
 800a6cc:	e026      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6ce:	f04f 0310 	mov.w	r3, #16
 800a6d2:	f04f 0400 	mov.w	r4, #0
 800a6d6:	e021      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6d8:	f04f 030c 	mov.w	r3, #12
 800a6dc:	f04f 0400 	mov.w	r4, #0
 800a6e0:	e01c      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6e2:	f04f 030a 	mov.w	r3, #10
 800a6e6:	f04f 0400 	mov.w	r4, #0
 800a6ea:	e017      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6ec:	f04f 0308 	mov.w	r3, #8
 800a6f0:	f04f 0400 	mov.w	r4, #0
 800a6f4:	e012      	b.n	800a71c <UART_SetConfig+0x108c>
 800a6f6:	f04f 0306 	mov.w	r3, #6
 800a6fa:	f04f 0400 	mov.w	r4, #0
 800a6fe:	e00d      	b.n	800a71c <UART_SetConfig+0x108c>
 800a700:	f04f 0304 	mov.w	r3, #4
 800a704:	f04f 0400 	mov.w	r4, #0
 800a708:	e008      	b.n	800a71c <UART_SetConfig+0x108c>
 800a70a:	f04f 0302 	mov.w	r3, #2
 800a70e:	f04f 0400 	mov.w	r4, #0
 800a712:	e003      	b.n	800a71c <UART_SetConfig+0x108c>
 800a714:	f04f 0301 	mov.w	r3, #1
 800a718:	f04f 0400 	mov.w	r4, #0
 800a71c:	461a      	mov	r2, r3
 800a71e:	4623      	mov	r3, r4
 800a720:	f7f5 fdda 	bl	80002d8 <__aeabi_uldivmod>
 800a724:	4603      	mov	r3, r0
 800a726:	460c      	mov	r4, r1
 800a728:	4619      	mov	r1, r3
 800a72a:	4622      	mov	r2, r4
 800a72c:	f04f 0300 	mov.w	r3, #0
 800a730:	f04f 0400 	mov.w	r4, #0
 800a734:	0214      	lsls	r4, r2, #8
 800a736:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a73a:	020b      	lsls	r3, r1, #8
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	6852      	ldr	r2, [r2, #4]
 800a740:	0852      	lsrs	r2, r2, #1
 800a742:	4611      	mov	r1, r2
 800a744:	f04f 0200 	mov.w	r2, #0
 800a748:	eb13 0b01 	adds.w	fp, r3, r1
 800a74c:	eb44 0c02 	adc.w	ip, r4, r2
 800a750:	4658      	mov	r0, fp
 800a752:	4661      	mov	r1, ip
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f04f 0400 	mov.w	r4, #0
 800a75c:	461a      	mov	r2, r3
 800a75e:	4623      	mov	r3, r4
 800a760:	f7f5 fdba 	bl	80002d8 <__aeabi_uldivmod>
 800a764:	4603      	mov	r3, r0
 800a766:	460c      	mov	r4, r1
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a76a:	e247      	b.n	800abfc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a76c:	4b96      	ldr	r3, [pc, #600]	; (800a9c8 <UART_SetConfig+0x1338>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0320 	and.w	r3, r3, #32
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 80a3 	beq.w	800a8c0 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a77a:	4b93      	ldr	r3, [pc, #588]	; (800a9c8 <UART_SetConfig+0x1338>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	08db      	lsrs	r3, r3, #3
 800a780:	f003 0303 	and.w	r3, r3, #3
 800a784:	4a91      	ldr	r2, [pc, #580]	; (800a9cc <UART_SetConfig+0x133c>)
 800a786:	fa22 f303 	lsr.w	r3, r2, r3
 800a78a:	4618      	mov	r0, r3
 800a78c:	f04f 0100 	mov.w	r1, #0
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b00      	cmp	r3, #0
 800a796:	d067      	beq.n	800a868 <UART_SetConfig+0x11d8>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d05e      	beq.n	800a85e <UART_SetConfig+0x11ce>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d055      	beq.n	800a854 <UART_SetConfig+0x11c4>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d04c      	beq.n	800a84a <UART_SetConfig+0x11ba>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d043      	beq.n	800a840 <UART_SetConfig+0x11b0>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	2b05      	cmp	r3, #5
 800a7be:	d03a      	beq.n	800a836 <UART_SetConfig+0x11a6>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	2b06      	cmp	r3, #6
 800a7c6:	d031      	beq.n	800a82c <UART_SetConfig+0x119c>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	2b07      	cmp	r3, #7
 800a7ce:	d028      	beq.n	800a822 <UART_SetConfig+0x1192>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	2b08      	cmp	r3, #8
 800a7d6:	d01f      	beq.n	800a818 <UART_SetConfig+0x1188>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d016      	beq.n	800a80e <UART_SetConfig+0x117e>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b0a      	cmp	r3, #10
 800a7e6:	d00d      	beq.n	800a804 <UART_SetConfig+0x1174>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	2b0b      	cmp	r3, #11
 800a7ee:	d104      	bne.n	800a7fa <UART_SetConfig+0x116a>
 800a7f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7f4:	f04f 0400 	mov.w	r4, #0
 800a7f8:	e03a      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a7fa:	f04f 0301 	mov.w	r3, #1
 800a7fe:	f04f 0400 	mov.w	r4, #0
 800a802:	e035      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a804:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a808:	f04f 0400 	mov.w	r4, #0
 800a80c:	e030      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a80e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a812:	f04f 0400 	mov.w	r4, #0
 800a816:	e02b      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a818:	f04f 0320 	mov.w	r3, #32
 800a81c:	f04f 0400 	mov.w	r4, #0
 800a820:	e026      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a822:	f04f 0310 	mov.w	r3, #16
 800a826:	f04f 0400 	mov.w	r4, #0
 800a82a:	e021      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a82c:	f04f 030c 	mov.w	r3, #12
 800a830:	f04f 0400 	mov.w	r4, #0
 800a834:	e01c      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a836:	f04f 030a 	mov.w	r3, #10
 800a83a:	f04f 0400 	mov.w	r4, #0
 800a83e:	e017      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a840:	f04f 0308 	mov.w	r3, #8
 800a844:	f04f 0400 	mov.w	r4, #0
 800a848:	e012      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a84a:	f04f 0306 	mov.w	r3, #6
 800a84e:	f04f 0400 	mov.w	r4, #0
 800a852:	e00d      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a854:	f04f 0304 	mov.w	r3, #4
 800a858:	f04f 0400 	mov.w	r4, #0
 800a85c:	e008      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a85e:	f04f 0302 	mov.w	r3, #2
 800a862:	f04f 0400 	mov.w	r4, #0
 800a866:	e003      	b.n	800a870 <UART_SetConfig+0x11e0>
 800a868:	f04f 0301 	mov.w	r3, #1
 800a86c:	f04f 0400 	mov.w	r4, #0
 800a870:	461a      	mov	r2, r3
 800a872:	4623      	mov	r3, r4
 800a874:	f7f5 fd30 	bl	80002d8 <__aeabi_uldivmod>
 800a878:	4603      	mov	r3, r0
 800a87a:	460c      	mov	r4, r1
 800a87c:	4619      	mov	r1, r3
 800a87e:	4622      	mov	r2, r4
 800a880:	f04f 0300 	mov.w	r3, #0
 800a884:	f04f 0400 	mov.w	r4, #0
 800a888:	0214      	lsls	r4, r2, #8
 800a88a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a88e:	020b      	lsls	r3, r1, #8
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	6852      	ldr	r2, [r2, #4]
 800a894:	0852      	lsrs	r2, r2, #1
 800a896:	4611      	mov	r1, r2
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	eb13 0b01 	adds.w	fp, r3, r1
 800a8a0:	eb44 0c02 	adc.w	ip, r4, r2
 800a8a4:	4658      	mov	r0, fp
 800a8a6:	4661      	mov	r1, ip
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f04f 0400 	mov.w	r4, #0
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4623      	mov	r3, r4
 800a8b4:	f7f5 fd10 	bl	80002d8 <__aeabi_uldivmod>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a8be:	e19d      	b.n	800abfc <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d05b      	beq.n	800a980 <UART_SetConfig+0x12f0>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d053      	beq.n	800a978 <UART_SetConfig+0x12e8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d04b      	beq.n	800a970 <UART_SetConfig+0x12e0>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d043      	beq.n	800a968 <UART_SetConfig+0x12d8>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d03b      	beq.n	800a960 <UART_SetConfig+0x12d0>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b05      	cmp	r3, #5
 800a8ee:	d033      	beq.n	800a958 <UART_SetConfig+0x12c8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b06      	cmp	r3, #6
 800a8f6:	d02b      	beq.n	800a950 <UART_SetConfig+0x12c0>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b07      	cmp	r3, #7
 800a8fe:	d023      	beq.n	800a948 <UART_SetConfig+0x12b8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	2b08      	cmp	r3, #8
 800a906:	d01b      	beq.n	800a940 <UART_SetConfig+0x12b0>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d013      	beq.n	800a938 <UART_SetConfig+0x12a8>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	2b0a      	cmp	r3, #10
 800a916:	d00b      	beq.n	800a930 <UART_SetConfig+0x12a0>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91c:	2b0b      	cmp	r3, #11
 800a91e:	d103      	bne.n	800a928 <UART_SetConfig+0x1298>
 800a920:	4b2a      	ldr	r3, [pc, #168]	; (800a9cc <UART_SetConfig+0x133c>)
 800a922:	f04f 0400 	mov.w	r4, #0
 800a926:	e02e      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a928:	4b29      	ldr	r3, [pc, #164]	; (800a9d0 <UART_SetConfig+0x1340>)
 800a92a:	f04f 0403 	mov.w	r4, #3
 800a92e:	e02a      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a930:	4b28      	ldr	r3, [pc, #160]	; (800a9d4 <UART_SetConfig+0x1344>)
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	e026      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a938:	4b27      	ldr	r3, [pc, #156]	; (800a9d8 <UART_SetConfig+0x1348>)
 800a93a:	f04f 0400 	mov.w	r4, #0
 800a93e:	e022      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a940:	4b26      	ldr	r3, [pc, #152]	; (800a9dc <UART_SetConfig+0x134c>)
 800a942:	f04f 0400 	mov.w	r4, #0
 800a946:	e01e      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a948:	4b25      	ldr	r3, [pc, #148]	; (800a9e0 <UART_SetConfig+0x1350>)
 800a94a:	f04f 0400 	mov.w	r4, #0
 800a94e:	e01a      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a950:	a419      	add	r4, pc, #100	; (adr r4, 800a9b8 <UART_SetConfig+0x1328>)
 800a952:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a956:	e016      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a958:	4b22      	ldr	r3, [pc, #136]	; (800a9e4 <UART_SetConfig+0x1354>)
 800a95a:	f04f 0400 	mov.w	r4, #0
 800a95e:	e012      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a960:	4b21      	ldr	r3, [pc, #132]	; (800a9e8 <UART_SetConfig+0x1358>)
 800a962:	f04f 0400 	mov.w	r4, #0
 800a966:	e00e      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a968:	a415      	add	r4, pc, #84	; (adr r4, 800a9c0 <UART_SetConfig+0x1330>)
 800a96a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a96e:	e00a      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a970:	4b1e      	ldr	r3, [pc, #120]	; (800a9ec <UART_SetConfig+0x135c>)
 800a972:	f04f 0400 	mov.w	r4, #0
 800a976:	e006      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a978:	4b1d      	ldr	r3, [pc, #116]	; (800a9f0 <UART_SetConfig+0x1360>)
 800a97a:	f04f 0401 	mov.w	r4, #1
 800a97e:	e002      	b.n	800a986 <UART_SetConfig+0x12f6>
 800a980:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <UART_SetConfig+0x1340>)
 800a982:	f04f 0403 	mov.w	r4, #3
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6852      	ldr	r2, [r2, #4]
 800a98a:	0852      	lsrs	r2, r2, #1
 800a98c:	4611      	mov	r1, r2
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	eb13 0b01 	adds.w	fp, r3, r1
 800a996:	eb44 0c02 	adc.w	ip, r4, r2
 800a99a:	4658      	mov	r0, fp
 800a99c:	4661      	mov	r1, ip
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f04f 0400 	mov.w	r4, #0
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	f7f5 fc95 	bl	80002d8 <__aeabi_uldivmod>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a9b4:	e122      	b.n	800abfc <UART_SetConfig+0x156c>
 800a9b6:	bf00      	nop
 800a9b8:	51615500 	.word	0x51615500
 800a9bc:	00000000 	.word	0x00000000
 800a9c0:	a2c2aa00 	.word	0xa2c2aa00
 800a9c4:	00000000 	.word	0x00000000
 800a9c8:	58024400 	.word	0x58024400
 800a9cc:	03d09000 	.word	0x03d09000
 800a9d0:	d0900000 	.word	0xd0900000
 800a9d4:	07a12000 	.word	0x07a12000
 800a9d8:	0f424000 	.word	0x0f424000
 800a9dc:	1e848000 	.word	0x1e848000
 800a9e0:	3d090000 	.word	0x3d090000
 800a9e4:	61a80000 	.word	0x61a80000
 800a9e8:	7a120000 	.word	0x7a120000
 800a9ec:	f4240000 	.word	0xf4240000
 800a9f0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d05b      	beq.n	800aab4 <UART_SetConfig+0x1424>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d053      	beq.n	800aaac <UART_SetConfig+0x141c>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d04b      	beq.n	800aaa4 <UART_SetConfig+0x1414>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d043      	beq.n	800aa9c <UART_SetConfig+0x140c>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b04      	cmp	r3, #4
 800aa1a:	d03b      	beq.n	800aa94 <UART_SetConfig+0x1404>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b05      	cmp	r3, #5
 800aa22:	d033      	beq.n	800aa8c <UART_SetConfig+0x13fc>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b06      	cmp	r3, #6
 800aa2a:	d02b      	beq.n	800aa84 <UART_SetConfig+0x13f4>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b07      	cmp	r3, #7
 800aa32:	d023      	beq.n	800aa7c <UART_SetConfig+0x13ec>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d01b      	beq.n	800aa74 <UART_SetConfig+0x13e4>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2b09      	cmp	r3, #9
 800aa42:	d013      	beq.n	800aa6c <UART_SetConfig+0x13dc>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	2b0a      	cmp	r3, #10
 800aa4a:	d00b      	beq.n	800aa64 <UART_SetConfig+0x13d4>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	2b0b      	cmp	r3, #11
 800aa52:	d103      	bne.n	800aa5c <UART_SetConfig+0x13cc>
 800aa54:	4bc0      	ldr	r3, [pc, #768]	; (800ad58 <UART_SetConfig+0x16c8>)
 800aa56:	f04f 0400 	mov.w	r4, #0
 800aa5a:	e02e      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa5c:	4bbf      	ldr	r3, [pc, #764]	; (800ad5c <UART_SetConfig+0x16cc>)
 800aa5e:	f04f 0400 	mov.w	r4, #0
 800aa62:	e02a      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa64:	4bbe      	ldr	r3, [pc, #760]	; (800ad60 <UART_SetConfig+0x16d0>)
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	e026      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa6c:	4bbd      	ldr	r3, [pc, #756]	; (800ad64 <UART_SetConfig+0x16d4>)
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	e022      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa74:	4bbc      	ldr	r3, [pc, #752]	; (800ad68 <UART_SetConfig+0x16d8>)
 800aa76:	f04f 0400 	mov.w	r4, #0
 800aa7a:	e01e      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa7c:	4bbb      	ldr	r3, [pc, #748]	; (800ad6c <UART_SetConfig+0x16dc>)
 800aa7e:	f04f 0400 	mov.w	r4, #0
 800aa82:	e01a      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa84:	a4b0      	add	r4, pc, #704	; (adr r4, 800ad48 <UART_SetConfig+0x16b8>)
 800aa86:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa8a:	e016      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa8c:	4bb8      	ldr	r3, [pc, #736]	; (800ad70 <UART_SetConfig+0x16e0>)
 800aa8e:	f04f 0400 	mov.w	r4, #0
 800aa92:	e012      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa94:	4bb7      	ldr	r3, [pc, #732]	; (800ad74 <UART_SetConfig+0x16e4>)
 800aa96:	f04f 0400 	mov.w	r4, #0
 800aa9a:	e00e      	b.n	800aaba <UART_SetConfig+0x142a>
 800aa9c:	a4ac      	add	r4, pc, #688	; (adr r4, 800ad50 <UART_SetConfig+0x16c0>)
 800aa9e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aaa2:	e00a      	b.n	800aaba <UART_SetConfig+0x142a>
 800aaa4:	4bb4      	ldr	r3, [pc, #720]	; (800ad78 <UART_SetConfig+0x16e8>)
 800aaa6:	f04f 0400 	mov.w	r4, #0
 800aaaa:	e006      	b.n	800aaba <UART_SetConfig+0x142a>
 800aaac:	4bb3      	ldr	r3, [pc, #716]	; (800ad7c <UART_SetConfig+0x16ec>)
 800aaae:	f04f 0400 	mov.w	r4, #0
 800aab2:	e002      	b.n	800aaba <UART_SetConfig+0x142a>
 800aab4:	4ba9      	ldr	r3, [pc, #676]	; (800ad5c <UART_SetConfig+0x16cc>)
 800aab6:	f04f 0400 	mov.w	r4, #0
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	6852      	ldr	r2, [r2, #4]
 800aabe:	0852      	lsrs	r2, r2, #1
 800aac0:	4611      	mov	r1, r2
 800aac2:	f04f 0200 	mov.w	r2, #0
 800aac6:	eb13 0b01 	adds.w	fp, r3, r1
 800aaca:	eb44 0c02 	adc.w	ip, r4, r2
 800aace:	4658      	mov	r0, fp
 800aad0:	4661      	mov	r1, ip
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f04f 0400 	mov.w	r4, #0
 800aada:	461a      	mov	r2, r3
 800aadc:	4623      	mov	r3, r4
 800aade:	f7f5 fbfb 	bl	80002d8 <__aeabi_uldivmod>
 800aae2:	4603      	mov	r3, r0
 800aae4:	460c      	mov	r4, r1
 800aae6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aae8:	e088      	b.n	800abfc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d064      	beq.n	800abbc <UART_SetConfig+0x152c>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d05b      	beq.n	800abb2 <UART_SetConfig+0x1522>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d052      	beq.n	800aba8 <UART_SetConfig+0x1518>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d04a      	beq.n	800aba0 <UART_SetConfig+0x1510>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d041      	beq.n	800ab96 <UART_SetConfig+0x1506>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b05      	cmp	r3, #5
 800ab18:	d039      	beq.n	800ab8e <UART_SetConfig+0x14fe>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	2b06      	cmp	r3, #6
 800ab20:	d031      	beq.n	800ab86 <UART_SetConfig+0x14f6>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	2b07      	cmp	r3, #7
 800ab28:	d028      	beq.n	800ab7c <UART_SetConfig+0x14ec>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d01f      	beq.n	800ab72 <UART_SetConfig+0x14e2>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab36:	2b09      	cmp	r3, #9
 800ab38:	d016      	beq.n	800ab68 <UART_SetConfig+0x14d8>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3e:	2b0a      	cmp	r3, #10
 800ab40:	d00d      	beq.n	800ab5e <UART_SetConfig+0x14ce>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	2b0b      	cmp	r3, #11
 800ab48:	d104      	bne.n	800ab54 <UART_SetConfig+0x14c4>
 800ab4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab4e:	f04f 0400 	mov.w	r4, #0
 800ab52:	e037      	b.n	800abc4 <UART_SetConfig+0x1534>
 800ab54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab58:	f04f 0400 	mov.w	r4, #0
 800ab5c:	e032      	b.n	800abc4 <UART_SetConfig+0x1534>
 800ab5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab62:	f04f 0400 	mov.w	r4, #0
 800ab66:	e02d      	b.n	800abc4 <UART_SetConfig+0x1534>
 800ab68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab6c:	f04f 0400 	mov.w	r4, #0
 800ab70:	e028      	b.n	800abc4 <UART_SetConfig+0x1534>
 800ab72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab76:	f04f 0400 	mov.w	r4, #0
 800ab7a:	e023      	b.n	800abc4 <UART_SetConfig+0x1534>
 800ab7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab80:	f04f 0400 	mov.w	r4, #0
 800ab84:	e01e      	b.n	800abc4 <UART_SetConfig+0x1534>
 800ab86:	4b7e      	ldr	r3, [pc, #504]	; (800ad80 <UART_SetConfig+0x16f0>)
 800ab88:	f04f 0400 	mov.w	r4, #0
 800ab8c:	e01a      	b.n	800abc4 <UART_SetConfig+0x1534>
 800ab8e:	4b7d      	ldr	r3, [pc, #500]	; (800ad84 <UART_SetConfig+0x16f4>)
 800ab90:	f04f 0400 	mov.w	r4, #0
 800ab94:	e016      	b.n	800abc4 <UART_SetConfig+0x1534>
 800ab96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab9a:	f04f 0400 	mov.w	r4, #0
 800ab9e:	e011      	b.n	800abc4 <UART_SetConfig+0x1534>
 800aba0:	4b79      	ldr	r3, [pc, #484]	; (800ad88 <UART_SetConfig+0x16f8>)
 800aba2:	f04f 0400 	mov.w	r4, #0
 800aba6:	e00d      	b.n	800abc4 <UART_SetConfig+0x1534>
 800aba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800abac:	f04f 0400 	mov.w	r4, #0
 800abb0:	e008      	b.n	800abc4 <UART_SetConfig+0x1534>
 800abb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abb6:	f04f 0400 	mov.w	r4, #0
 800abba:	e003      	b.n	800abc4 <UART_SetConfig+0x1534>
 800abbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abc0:	f04f 0400 	mov.w	r4, #0
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6852      	ldr	r2, [r2, #4]
 800abc8:	0852      	lsrs	r2, r2, #1
 800abca:	4611      	mov	r1, r2
 800abcc:	f04f 0200 	mov.w	r2, #0
 800abd0:	eb13 0b01 	adds.w	fp, r3, r1
 800abd4:	eb44 0c02 	adc.w	ip, r4, r2
 800abd8:	4658      	mov	r0, fp
 800abda:	4661      	mov	r1, ip
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	f04f 0400 	mov.w	r4, #0
 800abe4:	461a      	mov	r2, r3
 800abe6:	4623      	mov	r3, r4
 800abe8:	f7f5 fb76 	bl	80002d8 <__aeabi_uldivmod>
 800abec:	4603      	mov	r3, r0
 800abee:	460c      	mov	r4, r1
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800abf2:	e003      	b.n	800abfc <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800abfa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac02:	d309      	bcc.n	800ac18 <UART_SetConfig+0x1588>
 800ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac0a:	d205      	bcs.n	800ac18 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac12:	60da      	str	r2, [r3, #12]
 800ac14:	f000 bf85 	b.w	800bb22 <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1e:	f000 bf80 	b.w	800bb22 <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac2a:	f040 83da 	bne.w	800b3e2 <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 800ac2e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac32:	2b40      	cmp	r3, #64	; 0x40
 800ac34:	f200 83b3 	bhi.w	800b39e <UART_SetConfig+0x1d0e>
 800ac38:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <UART_SetConfig+0x15b0>)
 800ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3e:	bf00      	nop
 800ac40:	0800ad8d 	.word	0x0800ad8d
 800ac44:	0800ae45 	.word	0x0800ae45
 800ac48:	0800b39f 	.word	0x0800b39f
 800ac4c:	0800b39f 	.word	0x0800b39f
 800ac50:	0800aefd 	.word	0x0800aefd
 800ac54:	0800b39f 	.word	0x0800b39f
 800ac58:	0800b39f 	.word	0x0800b39f
 800ac5c:	0800b39f 	.word	0x0800b39f
 800ac60:	0800afb9 	.word	0x0800afb9
 800ac64:	0800b39f 	.word	0x0800b39f
 800ac68:	0800b39f 	.word	0x0800b39f
 800ac6c:	0800b39f 	.word	0x0800b39f
 800ac70:	0800b39f 	.word	0x0800b39f
 800ac74:	0800b39f 	.word	0x0800b39f
 800ac78:	0800b39f 	.word	0x0800b39f
 800ac7c:	0800b39f 	.word	0x0800b39f
 800ac80:	0800b075 	.word	0x0800b075
 800ac84:	0800b39f 	.word	0x0800b39f
 800ac88:	0800b39f 	.word	0x0800b39f
 800ac8c:	0800b39f 	.word	0x0800b39f
 800ac90:	0800b39f 	.word	0x0800b39f
 800ac94:	0800b39f 	.word	0x0800b39f
 800ac98:	0800b39f 	.word	0x0800b39f
 800ac9c:	0800b39f 	.word	0x0800b39f
 800aca0:	0800b39f 	.word	0x0800b39f
 800aca4:	0800b39f 	.word	0x0800b39f
 800aca8:	0800b39f 	.word	0x0800b39f
 800acac:	0800b39f 	.word	0x0800b39f
 800acb0:	0800b39f 	.word	0x0800b39f
 800acb4:	0800b39f 	.word	0x0800b39f
 800acb8:	0800b39f 	.word	0x0800b39f
 800acbc:	0800b39f 	.word	0x0800b39f
 800acc0:	0800b1e7 	.word	0x0800b1e7
 800acc4:	0800b39f 	.word	0x0800b39f
 800acc8:	0800b39f 	.word	0x0800b39f
 800accc:	0800b39f 	.word	0x0800b39f
 800acd0:	0800b39f 	.word	0x0800b39f
 800acd4:	0800b39f 	.word	0x0800b39f
 800acd8:	0800b39f 	.word	0x0800b39f
 800acdc:	0800b39f 	.word	0x0800b39f
 800ace0:	0800b39f 	.word	0x0800b39f
 800ace4:	0800b39f 	.word	0x0800b39f
 800ace8:	0800b39f 	.word	0x0800b39f
 800acec:	0800b39f 	.word	0x0800b39f
 800acf0:	0800b39f 	.word	0x0800b39f
 800acf4:	0800b39f 	.word	0x0800b39f
 800acf8:	0800b39f 	.word	0x0800b39f
 800acfc:	0800b39f 	.word	0x0800b39f
 800ad00:	0800b39f 	.word	0x0800b39f
 800ad04:	0800b39f 	.word	0x0800b39f
 800ad08:	0800b39f 	.word	0x0800b39f
 800ad0c:	0800b39f 	.word	0x0800b39f
 800ad10:	0800b39f 	.word	0x0800b39f
 800ad14:	0800b39f 	.word	0x0800b39f
 800ad18:	0800b39f 	.word	0x0800b39f
 800ad1c:	0800b39f 	.word	0x0800b39f
 800ad20:	0800b39f 	.word	0x0800b39f
 800ad24:	0800b39f 	.word	0x0800b39f
 800ad28:	0800b39f 	.word	0x0800b39f
 800ad2c:	0800b39f 	.word	0x0800b39f
 800ad30:	0800b39f 	.word	0x0800b39f
 800ad34:	0800b39f 	.word	0x0800b39f
 800ad38:	0800b39f 	.word	0x0800b39f
 800ad3c:	0800b39f 	.word	0x0800b39f
 800ad40:	0800b2dd 	.word	0x0800b2dd
 800ad44:	f3af 8000 	nop.w
 800ad48:	05161500 	.word	0x05161500
 800ad4c:	00000000 	.word	0x00000000
 800ad50:	0a2c2a00 	.word	0x0a2c2a00
 800ad54:	00000000 	.word	0x00000000
 800ad58:	003d0900 	.word	0x003d0900
 800ad5c:	3d090000 	.word	0x3d090000
 800ad60:	007a1200 	.word	0x007a1200
 800ad64:	00f42400 	.word	0x00f42400
 800ad68:	01e84800 	.word	0x01e84800
 800ad6c:	03d09000 	.word	0x03d09000
 800ad70:	061a8000 	.word	0x061a8000
 800ad74:	07a12000 	.word	0x07a12000
 800ad78:	0f424000 	.word	0x0f424000
 800ad7c:	1e848000 	.word	0x1e848000
 800ad80:	000aaa00 	.word	0x000aaa00
 800ad84:	000ccc00 	.word	0x000ccc00
 800ad88:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad8c:	f7fb fc48 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 800ad90:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d044      	beq.n	800ae24 <UART_SetConfig+0x1794>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d03e      	beq.n	800ae20 <UART_SetConfig+0x1790>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d038      	beq.n	800ae1c <UART_SetConfig+0x178c>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d032      	beq.n	800ae18 <UART_SetConfig+0x1788>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d02c      	beq.n	800ae14 <UART_SetConfig+0x1784>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	2b05      	cmp	r3, #5
 800adc0:	d026      	beq.n	800ae10 <UART_SetConfig+0x1780>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	2b06      	cmp	r3, #6
 800adc8:	d020      	beq.n	800ae0c <UART_SetConfig+0x177c>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adce:	2b07      	cmp	r3, #7
 800add0:	d01a      	beq.n	800ae08 <UART_SetConfig+0x1778>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	2b08      	cmp	r3, #8
 800add8:	d014      	beq.n	800ae04 <UART_SetConfig+0x1774>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	2b09      	cmp	r3, #9
 800ade0:	d00e      	beq.n	800ae00 <UART_SetConfig+0x1770>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	2b0a      	cmp	r3, #10
 800ade8:	d008      	beq.n	800adfc <UART_SetConfig+0x176c>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	2b0b      	cmp	r3, #11
 800adf0:	d102      	bne.n	800adf8 <UART_SetConfig+0x1768>
 800adf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf6:	e016      	b.n	800ae26 <UART_SetConfig+0x1796>
 800adf8:	2301      	movs	r3, #1
 800adfa:	e014      	b.n	800ae26 <UART_SetConfig+0x1796>
 800adfc:	2380      	movs	r3, #128	; 0x80
 800adfe:	e012      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae00:	2340      	movs	r3, #64	; 0x40
 800ae02:	e010      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae04:	2320      	movs	r3, #32
 800ae06:	e00e      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae08:	2310      	movs	r3, #16
 800ae0a:	e00c      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae0c:	230c      	movs	r3, #12
 800ae0e:	e00a      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae10:	230a      	movs	r3, #10
 800ae12:	e008      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae14:	2308      	movs	r3, #8
 800ae16:	e006      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae18:	2306      	movs	r3, #6
 800ae1a:	e004      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae1c:	2304      	movs	r3, #4
 800ae1e:	e002      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e000      	b.n	800ae26 <UART_SetConfig+0x1796>
 800ae24:	2301      	movs	r3, #1
 800ae26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2c:	005a      	lsls	r2, r3, #1
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	085b      	lsrs	r3, r3, #1
 800ae34:	441a      	add	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae42:	e2b0      	b.n	800b3a6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae44:	f7fb fc02 	bl	800664c <HAL_RCC_GetPCLK2Freq>
 800ae48:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d044      	beq.n	800aedc <UART_SetConfig+0x184c>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d03e      	beq.n	800aed8 <UART_SetConfig+0x1848>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d038      	beq.n	800aed4 <UART_SetConfig+0x1844>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d032      	beq.n	800aed0 <UART_SetConfig+0x1840>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	2b04      	cmp	r3, #4
 800ae70:	d02c      	beq.n	800aecc <UART_SetConfig+0x183c>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2b05      	cmp	r3, #5
 800ae78:	d026      	beq.n	800aec8 <UART_SetConfig+0x1838>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b06      	cmp	r3, #6
 800ae80:	d020      	beq.n	800aec4 <UART_SetConfig+0x1834>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b07      	cmp	r3, #7
 800ae88:	d01a      	beq.n	800aec0 <UART_SetConfig+0x1830>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	d014      	beq.n	800aebc <UART_SetConfig+0x182c>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	2b09      	cmp	r3, #9
 800ae98:	d00e      	beq.n	800aeb8 <UART_SetConfig+0x1828>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	2b0a      	cmp	r3, #10
 800aea0:	d008      	beq.n	800aeb4 <UART_SetConfig+0x1824>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	2b0b      	cmp	r3, #11
 800aea8:	d102      	bne.n	800aeb0 <UART_SetConfig+0x1820>
 800aeaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeae:	e016      	b.n	800aede <UART_SetConfig+0x184e>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e014      	b.n	800aede <UART_SetConfig+0x184e>
 800aeb4:	2380      	movs	r3, #128	; 0x80
 800aeb6:	e012      	b.n	800aede <UART_SetConfig+0x184e>
 800aeb8:	2340      	movs	r3, #64	; 0x40
 800aeba:	e010      	b.n	800aede <UART_SetConfig+0x184e>
 800aebc:	2320      	movs	r3, #32
 800aebe:	e00e      	b.n	800aede <UART_SetConfig+0x184e>
 800aec0:	2310      	movs	r3, #16
 800aec2:	e00c      	b.n	800aede <UART_SetConfig+0x184e>
 800aec4:	230c      	movs	r3, #12
 800aec6:	e00a      	b.n	800aede <UART_SetConfig+0x184e>
 800aec8:	230a      	movs	r3, #10
 800aeca:	e008      	b.n	800aede <UART_SetConfig+0x184e>
 800aecc:	2308      	movs	r3, #8
 800aece:	e006      	b.n	800aede <UART_SetConfig+0x184e>
 800aed0:	2306      	movs	r3, #6
 800aed2:	e004      	b.n	800aede <UART_SetConfig+0x184e>
 800aed4:	2304      	movs	r3, #4
 800aed6:	e002      	b.n	800aede <UART_SetConfig+0x184e>
 800aed8:	2302      	movs	r3, #2
 800aeda:	e000      	b.n	800aede <UART_SetConfig+0x184e>
 800aedc:	2301      	movs	r3, #1
 800aede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee4:	005a      	lsls	r2, r3, #1
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	085b      	lsrs	r3, r3, #1
 800aeec:	441a      	add	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aefa:	e254      	b.n	800b3a6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aefc:	f107 0318 	add.w	r3, r7, #24
 800af00:	4618      	mov	r0, r3
 800af02:	f7fc fd71 	bl	80079e8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af06:	69fa      	ldr	r2, [r7, #28]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d044      	beq.n	800af9a <UART_SetConfig+0x190a>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	2b01      	cmp	r3, #1
 800af16:	d03e      	beq.n	800af96 <UART_SetConfig+0x1906>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d038      	beq.n	800af92 <UART_SetConfig+0x1902>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b03      	cmp	r3, #3
 800af26:	d032      	beq.n	800af8e <UART_SetConfig+0x18fe>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	d02c      	beq.n	800af8a <UART_SetConfig+0x18fa>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	2b05      	cmp	r3, #5
 800af36:	d026      	beq.n	800af86 <UART_SetConfig+0x18f6>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	2b06      	cmp	r3, #6
 800af3e:	d020      	beq.n	800af82 <UART_SetConfig+0x18f2>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	2b07      	cmp	r3, #7
 800af46:	d01a      	beq.n	800af7e <UART_SetConfig+0x18ee>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d014      	beq.n	800af7a <UART_SetConfig+0x18ea>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b09      	cmp	r3, #9
 800af56:	d00e      	beq.n	800af76 <UART_SetConfig+0x18e6>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	2b0a      	cmp	r3, #10
 800af5e:	d008      	beq.n	800af72 <UART_SetConfig+0x18e2>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	2b0b      	cmp	r3, #11
 800af66:	d102      	bne.n	800af6e <UART_SetConfig+0x18de>
 800af68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af6c:	e016      	b.n	800af9c <UART_SetConfig+0x190c>
 800af6e:	2301      	movs	r3, #1
 800af70:	e014      	b.n	800af9c <UART_SetConfig+0x190c>
 800af72:	2380      	movs	r3, #128	; 0x80
 800af74:	e012      	b.n	800af9c <UART_SetConfig+0x190c>
 800af76:	2340      	movs	r3, #64	; 0x40
 800af78:	e010      	b.n	800af9c <UART_SetConfig+0x190c>
 800af7a:	2320      	movs	r3, #32
 800af7c:	e00e      	b.n	800af9c <UART_SetConfig+0x190c>
 800af7e:	2310      	movs	r3, #16
 800af80:	e00c      	b.n	800af9c <UART_SetConfig+0x190c>
 800af82:	230c      	movs	r3, #12
 800af84:	e00a      	b.n	800af9c <UART_SetConfig+0x190c>
 800af86:	230a      	movs	r3, #10
 800af88:	e008      	b.n	800af9c <UART_SetConfig+0x190c>
 800af8a:	2308      	movs	r3, #8
 800af8c:	e006      	b.n	800af9c <UART_SetConfig+0x190c>
 800af8e:	2306      	movs	r3, #6
 800af90:	e004      	b.n	800af9c <UART_SetConfig+0x190c>
 800af92:	2304      	movs	r3, #4
 800af94:	e002      	b.n	800af9c <UART_SetConfig+0x190c>
 800af96:	2302      	movs	r3, #2
 800af98:	e000      	b.n	800af9c <UART_SetConfig+0x190c>
 800af9a:	2301      	movs	r3, #1
 800af9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa0:	005a      	lsls	r2, r3, #1
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	085b      	lsrs	r3, r3, #1
 800afa8:	441a      	add	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afb6:	e1f6      	b.n	800b3a6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afb8:	f107 030c 	add.w	r3, r7, #12
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fc fe5f 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d044      	beq.n	800b056 <UART_SetConfig+0x19c6>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d03e      	beq.n	800b052 <UART_SetConfig+0x19c2>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d038      	beq.n	800b04e <UART_SetConfig+0x19be>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d032      	beq.n	800b04a <UART_SetConfig+0x19ba>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	2b04      	cmp	r3, #4
 800afea:	d02c      	beq.n	800b046 <UART_SetConfig+0x19b6>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff0:	2b05      	cmp	r3, #5
 800aff2:	d026      	beq.n	800b042 <UART_SetConfig+0x19b2>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	2b06      	cmp	r3, #6
 800affa:	d020      	beq.n	800b03e <UART_SetConfig+0x19ae>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	2b07      	cmp	r3, #7
 800b002:	d01a      	beq.n	800b03a <UART_SetConfig+0x19aa>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d014      	beq.n	800b036 <UART_SetConfig+0x19a6>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	2b09      	cmp	r3, #9
 800b012:	d00e      	beq.n	800b032 <UART_SetConfig+0x19a2>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	2b0a      	cmp	r3, #10
 800b01a:	d008      	beq.n	800b02e <UART_SetConfig+0x199e>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	2b0b      	cmp	r3, #11
 800b022:	d102      	bne.n	800b02a <UART_SetConfig+0x199a>
 800b024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b028:	e016      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b02a:	2301      	movs	r3, #1
 800b02c:	e014      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b02e:	2380      	movs	r3, #128	; 0x80
 800b030:	e012      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b032:	2340      	movs	r3, #64	; 0x40
 800b034:	e010      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b036:	2320      	movs	r3, #32
 800b038:	e00e      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b03a:	2310      	movs	r3, #16
 800b03c:	e00c      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b03e:	230c      	movs	r3, #12
 800b040:	e00a      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b042:	230a      	movs	r3, #10
 800b044:	e008      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b046:	2308      	movs	r3, #8
 800b048:	e006      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b04a:	2306      	movs	r3, #6
 800b04c:	e004      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b04e:	2304      	movs	r3, #4
 800b050:	e002      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b052:	2302      	movs	r3, #2
 800b054:	e000      	b.n	800b058 <UART_SetConfig+0x19c8>
 800b056:	2301      	movs	r3, #1
 800b058:	fbb2 f3f3 	udiv	r3, r2, r3
 800b05c:	005a      	lsls	r2, r3, #1
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	085b      	lsrs	r3, r3, #1
 800b064:	441a      	add	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b072:	e198      	b.n	800b3a6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b074:	4b87      	ldr	r3, [pc, #540]	; (800b294 <UART_SetConfig+0x1c04>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0320 	and.w	r3, r3, #32
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d05e      	beq.n	800b13e <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b080:	4b84      	ldr	r3, [pc, #528]	; (800b294 <UART_SetConfig+0x1c04>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	08db      	lsrs	r3, r3, #3
 800b086:	f003 0303 	and.w	r3, r3, #3
 800b08a:	4a83      	ldr	r2, [pc, #524]	; (800b298 <UART_SetConfig+0x1c08>)
 800b08c:	40da      	lsrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	2b00      	cmp	r3, #0
 800b094:	d044      	beq.n	800b120 <UART_SetConfig+0x1a90>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d03e      	beq.n	800b11c <UART_SetConfig+0x1a8c>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d038      	beq.n	800b118 <UART_SetConfig+0x1a88>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d032      	beq.n	800b114 <UART_SetConfig+0x1a84>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	2b04      	cmp	r3, #4
 800b0b4:	d02c      	beq.n	800b110 <UART_SetConfig+0x1a80>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	2b05      	cmp	r3, #5
 800b0bc:	d026      	beq.n	800b10c <UART_SetConfig+0x1a7c>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	2b06      	cmp	r3, #6
 800b0c4:	d020      	beq.n	800b108 <UART_SetConfig+0x1a78>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ca:	2b07      	cmp	r3, #7
 800b0cc:	d01a      	beq.n	800b104 <UART_SetConfig+0x1a74>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d2:	2b08      	cmp	r3, #8
 800b0d4:	d014      	beq.n	800b100 <UART_SetConfig+0x1a70>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	2b09      	cmp	r3, #9
 800b0dc:	d00e      	beq.n	800b0fc <UART_SetConfig+0x1a6c>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	2b0a      	cmp	r3, #10
 800b0e4:	d008      	beq.n	800b0f8 <UART_SetConfig+0x1a68>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	2b0b      	cmp	r3, #11
 800b0ec:	d102      	bne.n	800b0f4 <UART_SetConfig+0x1a64>
 800b0ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0f2:	e016      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e014      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b0f8:	2380      	movs	r3, #128	; 0x80
 800b0fa:	e012      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b0fc:	2340      	movs	r3, #64	; 0x40
 800b0fe:	e010      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b100:	2320      	movs	r3, #32
 800b102:	e00e      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b104:	2310      	movs	r3, #16
 800b106:	e00c      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b108:	230c      	movs	r3, #12
 800b10a:	e00a      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b10c:	230a      	movs	r3, #10
 800b10e:	e008      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b110:	2308      	movs	r3, #8
 800b112:	e006      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b114:	2306      	movs	r3, #6
 800b116:	e004      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b118:	2304      	movs	r3, #4
 800b11a:	e002      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b11c:	2302      	movs	r3, #2
 800b11e:	e000      	b.n	800b122 <UART_SetConfig+0x1a92>
 800b120:	2301      	movs	r3, #1
 800b122:	fbb2 f3f3 	udiv	r3, r2, r3
 800b126:	005a      	lsls	r2, r3, #1
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	085b      	lsrs	r3, r3, #1
 800b12e:	441a      	add	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	fbb2 f3f3 	udiv	r3, r2, r3
 800b138:	b29b      	uxth	r3, r3
 800b13a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b13c:	e133      	b.n	800b3a6 <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	2b00      	cmp	r3, #0
 800b144:	d043      	beq.n	800b1ce <UART_SetConfig+0x1b3e>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d03d      	beq.n	800b1ca <UART_SetConfig+0x1b3a>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b02      	cmp	r3, #2
 800b154:	d037      	beq.n	800b1c6 <UART_SetConfig+0x1b36>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d031      	beq.n	800b1c2 <UART_SetConfig+0x1b32>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	2b04      	cmp	r3, #4
 800b164:	d02b      	beq.n	800b1be <UART_SetConfig+0x1b2e>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b05      	cmp	r3, #5
 800b16c:	d025      	beq.n	800b1ba <UART_SetConfig+0x1b2a>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b06      	cmp	r3, #6
 800b174:	d01f      	beq.n	800b1b6 <UART_SetConfig+0x1b26>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	2b07      	cmp	r3, #7
 800b17c:	d019      	beq.n	800b1b2 <UART_SetConfig+0x1b22>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2b08      	cmp	r3, #8
 800b184:	d013      	beq.n	800b1ae <UART_SetConfig+0x1b1e>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b09      	cmp	r3, #9
 800b18c:	d00d      	beq.n	800b1aa <UART_SetConfig+0x1b1a>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	2b0a      	cmp	r3, #10
 800b194:	d007      	beq.n	800b1a6 <UART_SetConfig+0x1b16>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	2b0b      	cmp	r3, #11
 800b19c:	d101      	bne.n	800b1a2 <UART_SetConfig+0x1b12>
 800b19e:	4b3f      	ldr	r3, [pc, #252]	; (800b29c <UART_SetConfig+0x1c0c>)
 800b1a0:	e016      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1a2:	4b3f      	ldr	r3, [pc, #252]	; (800b2a0 <UART_SetConfig+0x1c10>)
 800b1a4:	e014      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1a6:	4b3f      	ldr	r3, [pc, #252]	; (800b2a4 <UART_SetConfig+0x1c14>)
 800b1a8:	e012      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1aa:	4b3f      	ldr	r3, [pc, #252]	; (800b2a8 <UART_SetConfig+0x1c18>)
 800b1ac:	e010      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1ae:	4b3f      	ldr	r3, [pc, #252]	; (800b2ac <UART_SetConfig+0x1c1c>)
 800b1b0:	e00e      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1b2:	4b3f      	ldr	r3, [pc, #252]	; (800b2b0 <UART_SetConfig+0x1c20>)
 800b1b4:	e00c      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1b6:	4b3f      	ldr	r3, [pc, #252]	; (800b2b4 <UART_SetConfig+0x1c24>)
 800b1b8:	e00a      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1ba:	4b3f      	ldr	r3, [pc, #252]	; (800b2b8 <UART_SetConfig+0x1c28>)
 800b1bc:	e008      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1be:	4b3f      	ldr	r3, [pc, #252]	; (800b2bc <UART_SetConfig+0x1c2c>)
 800b1c0:	e006      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1c2:	4b3f      	ldr	r3, [pc, #252]	; (800b2c0 <UART_SetConfig+0x1c30>)
 800b1c4:	e004      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1c6:	4b3f      	ldr	r3, [pc, #252]	; (800b2c4 <UART_SetConfig+0x1c34>)
 800b1c8:	e002      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1ca:	4b33      	ldr	r3, [pc, #204]	; (800b298 <UART_SetConfig+0x1c08>)
 800b1cc:	e000      	b.n	800b1d0 <UART_SetConfig+0x1b40>
 800b1ce:	4b34      	ldr	r3, [pc, #208]	; (800b2a0 <UART_SetConfig+0x1c10>)
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	6852      	ldr	r2, [r2, #4]
 800b1d4:	0852      	lsrs	r2, r2, #1
 800b1d6:	441a      	add	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1e4:	e0df      	b.n	800b3a6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d045      	beq.n	800b27a <UART_SetConfig+0x1bea>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d03f      	beq.n	800b276 <UART_SetConfig+0x1be6>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d039      	beq.n	800b272 <UART_SetConfig+0x1be2>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	2b03      	cmp	r3, #3
 800b204:	d033      	beq.n	800b26e <UART_SetConfig+0x1bde>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d02d      	beq.n	800b26a <UART_SetConfig+0x1bda>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	2b05      	cmp	r3, #5
 800b214:	d027      	beq.n	800b266 <UART_SetConfig+0x1bd6>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	2b06      	cmp	r3, #6
 800b21c:	d021      	beq.n	800b262 <UART_SetConfig+0x1bd2>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b222:	2b07      	cmp	r3, #7
 800b224:	d01b      	beq.n	800b25e <UART_SetConfig+0x1bce>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	2b08      	cmp	r3, #8
 800b22c:	d015      	beq.n	800b25a <UART_SetConfig+0x1bca>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	2b09      	cmp	r3, #9
 800b234:	d00f      	beq.n	800b256 <UART_SetConfig+0x1bc6>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	2b0a      	cmp	r3, #10
 800b23c:	d008      	beq.n	800b250 <UART_SetConfig+0x1bc0>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	2b0b      	cmp	r3, #11
 800b244:	d102      	bne.n	800b24c <UART_SetConfig+0x1bbc>
 800b246:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b24a:	e017      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b24c:	4b18      	ldr	r3, [pc, #96]	; (800b2b0 <UART_SetConfig+0x1c20>)
 800b24e:	e015      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b250:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b254:	e012      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b256:	4b1c      	ldr	r3, [pc, #112]	; (800b2c8 <UART_SetConfig+0x1c38>)
 800b258:	e010      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b25a:	4b1c      	ldr	r3, [pc, #112]	; (800b2cc <UART_SetConfig+0x1c3c>)
 800b25c:	e00e      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b25e:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <UART_SetConfig+0x1c0c>)
 800b260:	e00c      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b262:	4b1b      	ldr	r3, [pc, #108]	; (800b2d0 <UART_SetConfig+0x1c40>)
 800b264:	e00a      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b266:	4b1b      	ldr	r3, [pc, #108]	; (800b2d4 <UART_SetConfig+0x1c44>)
 800b268:	e008      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b26a:	4b0e      	ldr	r3, [pc, #56]	; (800b2a4 <UART_SetConfig+0x1c14>)
 800b26c:	e006      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b26e:	4b1a      	ldr	r3, [pc, #104]	; (800b2d8 <UART_SetConfig+0x1c48>)
 800b270:	e004      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b272:	4b0d      	ldr	r3, [pc, #52]	; (800b2a8 <UART_SetConfig+0x1c18>)
 800b274:	e002      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b276:	4b0d      	ldr	r3, [pc, #52]	; (800b2ac <UART_SetConfig+0x1c1c>)
 800b278:	e000      	b.n	800b27c <UART_SetConfig+0x1bec>
 800b27a:	4b0d      	ldr	r3, [pc, #52]	; (800b2b0 <UART_SetConfig+0x1c20>)
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	6852      	ldr	r2, [r2, #4]
 800b280:	0852      	lsrs	r2, r2, #1
 800b282:	441a      	add	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b290:	e089      	b.n	800b3a6 <UART_SetConfig+0x1d16>
 800b292:	bf00      	nop
 800b294:	58024400 	.word	0x58024400
 800b298:	03d09000 	.word	0x03d09000
 800b29c:	0007a120 	.word	0x0007a120
 800b2a0:	07a12000 	.word	0x07a12000
 800b2a4:	000f4240 	.word	0x000f4240
 800b2a8:	001e8480 	.word	0x001e8480
 800b2ac:	003d0900 	.word	0x003d0900
 800b2b0:	007a1200 	.word	0x007a1200
 800b2b4:	00a2c2aa 	.word	0x00a2c2aa
 800b2b8:	00c35000 	.word	0x00c35000
 800b2bc:	00f42400 	.word	0x00f42400
 800b2c0:	01458554 	.word	0x01458554
 800b2c4:	01e84800 	.word	0x01e84800
 800b2c8:	0001e848 	.word	0x0001e848
 800b2cc:	0003d090 	.word	0x0003d090
 800b2d0:	000a2c2a 	.word	0x000a2c2a
 800b2d4:	000c3500 	.word	0x000c3500
 800b2d8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d04f      	beq.n	800b384 <UART_SetConfig+0x1cf4>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d048      	beq.n	800b37e <UART_SetConfig+0x1cee>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d041      	beq.n	800b378 <UART_SetConfig+0x1ce8>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d03a      	beq.n	800b372 <UART_SetConfig+0x1ce2>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	2b04      	cmp	r3, #4
 800b302:	d033      	beq.n	800b36c <UART_SetConfig+0x1cdc>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b308:	2b05      	cmp	r3, #5
 800b30a:	d02c      	beq.n	800b366 <UART_SetConfig+0x1cd6>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	2b06      	cmp	r3, #6
 800b312:	d025      	beq.n	800b360 <UART_SetConfig+0x1cd0>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	2b07      	cmp	r3, #7
 800b31a:	d01e      	beq.n	800b35a <UART_SetConfig+0x1cca>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	2b08      	cmp	r3, #8
 800b322:	d017      	beq.n	800b354 <UART_SetConfig+0x1cc4>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b328:	2b09      	cmp	r3, #9
 800b32a:	d010      	beq.n	800b34e <UART_SetConfig+0x1cbe>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b330:	2b0a      	cmp	r3, #10
 800b332:	d009      	beq.n	800b348 <UART_SetConfig+0x1cb8>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b338:	2b0b      	cmp	r3, #11
 800b33a:	d102      	bne.n	800b342 <UART_SetConfig+0x1cb2>
 800b33c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b340:	e022      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b346:	e01f      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b34c:	e01c      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b34e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b352:	e019      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b354:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b358:	e016      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b35a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b35e:	e013      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b360:	f241 5354 	movw	r3, #5460	; 0x1554
 800b364:	e010      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b366:	f641 1398 	movw	r3, #6552	; 0x1998
 800b36a:	e00d      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b36c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b370:	e00a      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b372:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b376:	e007      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b37c:	e004      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b37e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b382:	e001      	b.n	800b388 <UART_SetConfig+0x1cf8>
 800b384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6852      	ldr	r2, [r2, #4]
 800b38c:	0852      	lsrs	r2, r2, #1
 800b38e:	441a      	add	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	fbb2 f3f3 	udiv	r3, r2, r3
 800b398:	b29b      	uxth	r3, r3
 800b39a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b39c:	e003      	b.n	800b3a6 <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b3a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a8:	2b0f      	cmp	r3, #15
 800b3aa:	d916      	bls.n	800b3da <UART_SetConfig+0x1d4a>
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3b2:	d212      	bcs.n	800b3da <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	f023 030f 	bic.w	r3, r3, #15
 800b3bc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c0:	085b      	lsrs	r3, r3, #1
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3d6:	60da      	str	r2, [r3, #12]
 800b3d8:	e3a3      	b.n	800bb22 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3e0:	e39f      	b.n	800bb22 <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 800b3e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3e6:	2b40      	cmp	r3, #64	; 0x40
 800b3e8:	f200 8388 	bhi.w	800bafc <UART_SetConfig+0x246c>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <UART_SetConfig+0x1d64>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b4f9 	.word	0x0800b4f9
 800b3f8:	0800b5af 	.word	0x0800b5af
 800b3fc:	0800bafd 	.word	0x0800bafd
 800b400:	0800bafd 	.word	0x0800bafd
 800b404:	0800b665 	.word	0x0800b665
 800b408:	0800bafd 	.word	0x0800bafd
 800b40c:	0800bafd 	.word	0x0800bafd
 800b410:	0800bafd 	.word	0x0800bafd
 800b414:	0800b71f 	.word	0x0800b71f
 800b418:	0800bafd 	.word	0x0800bafd
 800b41c:	0800bafd 	.word	0x0800bafd
 800b420:	0800bafd 	.word	0x0800bafd
 800b424:	0800bafd 	.word	0x0800bafd
 800b428:	0800bafd 	.word	0x0800bafd
 800b42c:	0800bafd 	.word	0x0800bafd
 800b430:	0800bafd 	.word	0x0800bafd
 800b434:	0800b7d9 	.word	0x0800b7d9
 800b438:	0800bafd 	.word	0x0800bafd
 800b43c:	0800bafd 	.word	0x0800bafd
 800b440:	0800bafd 	.word	0x0800bafd
 800b444:	0800bafd 	.word	0x0800bafd
 800b448:	0800bafd 	.word	0x0800bafd
 800b44c:	0800bafd 	.word	0x0800bafd
 800b450:	0800bafd 	.word	0x0800bafd
 800b454:	0800bafd 	.word	0x0800bafd
 800b458:	0800bafd 	.word	0x0800bafd
 800b45c:	0800bafd 	.word	0x0800bafd
 800b460:	0800bafd 	.word	0x0800bafd
 800b464:	0800bafd 	.word	0x0800bafd
 800b468:	0800bafd 	.word	0x0800bafd
 800b46c:	0800bafd 	.word	0x0800bafd
 800b470:	0800bafd 	.word	0x0800bafd
 800b474:	0800b949 	.word	0x0800b949
 800b478:	0800bafd 	.word	0x0800bafd
 800b47c:	0800bafd 	.word	0x0800bafd
 800b480:	0800bafd 	.word	0x0800bafd
 800b484:	0800bafd 	.word	0x0800bafd
 800b488:	0800bafd 	.word	0x0800bafd
 800b48c:	0800bafd 	.word	0x0800bafd
 800b490:	0800bafd 	.word	0x0800bafd
 800b494:	0800bafd 	.word	0x0800bafd
 800b498:	0800bafd 	.word	0x0800bafd
 800b49c:	0800bafd 	.word	0x0800bafd
 800b4a0:	0800bafd 	.word	0x0800bafd
 800b4a4:	0800bafd 	.word	0x0800bafd
 800b4a8:	0800bafd 	.word	0x0800bafd
 800b4ac:	0800bafd 	.word	0x0800bafd
 800b4b0:	0800bafd 	.word	0x0800bafd
 800b4b4:	0800bafd 	.word	0x0800bafd
 800b4b8:	0800bafd 	.word	0x0800bafd
 800b4bc:	0800bafd 	.word	0x0800bafd
 800b4c0:	0800bafd 	.word	0x0800bafd
 800b4c4:	0800bafd 	.word	0x0800bafd
 800b4c8:	0800bafd 	.word	0x0800bafd
 800b4cc:	0800bafd 	.word	0x0800bafd
 800b4d0:	0800bafd 	.word	0x0800bafd
 800b4d4:	0800bafd 	.word	0x0800bafd
 800b4d8:	0800bafd 	.word	0x0800bafd
 800b4dc:	0800bafd 	.word	0x0800bafd
 800b4e0:	0800bafd 	.word	0x0800bafd
 800b4e4:	0800bafd 	.word	0x0800bafd
 800b4e8:	0800bafd 	.word	0x0800bafd
 800b4ec:	0800bafd 	.word	0x0800bafd
 800b4f0:	0800bafd 	.word	0x0800bafd
 800b4f4:	0800ba3d 	.word	0x0800ba3d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4f8:	f7fb f892 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 800b4fc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	2b00      	cmp	r3, #0
 800b504:	d044      	beq.n	800b590 <UART_SetConfig+0x1f00>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d03e      	beq.n	800b58c <UART_SetConfig+0x1efc>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	2b02      	cmp	r3, #2
 800b514:	d038      	beq.n	800b588 <UART_SetConfig+0x1ef8>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d032      	beq.n	800b584 <UART_SetConfig+0x1ef4>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	2b04      	cmp	r3, #4
 800b524:	d02c      	beq.n	800b580 <UART_SetConfig+0x1ef0>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	d026      	beq.n	800b57c <UART_SetConfig+0x1eec>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	2b06      	cmp	r3, #6
 800b534:	d020      	beq.n	800b578 <UART_SetConfig+0x1ee8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	2b07      	cmp	r3, #7
 800b53c:	d01a      	beq.n	800b574 <UART_SetConfig+0x1ee4>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	2b08      	cmp	r3, #8
 800b544:	d014      	beq.n	800b570 <UART_SetConfig+0x1ee0>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	2b09      	cmp	r3, #9
 800b54c:	d00e      	beq.n	800b56c <UART_SetConfig+0x1edc>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	2b0a      	cmp	r3, #10
 800b554:	d008      	beq.n	800b568 <UART_SetConfig+0x1ed8>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55a:	2b0b      	cmp	r3, #11
 800b55c:	d102      	bne.n	800b564 <UART_SetConfig+0x1ed4>
 800b55e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b562:	e016      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b564:	2301      	movs	r3, #1
 800b566:	e014      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b568:	2380      	movs	r3, #128	; 0x80
 800b56a:	e012      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	e010      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b570:	2320      	movs	r3, #32
 800b572:	e00e      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b574:	2310      	movs	r3, #16
 800b576:	e00c      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b578:	230c      	movs	r3, #12
 800b57a:	e00a      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b57c:	230a      	movs	r3, #10
 800b57e:	e008      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b580:	2308      	movs	r3, #8
 800b582:	e006      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b584:	2306      	movs	r3, #6
 800b586:	e004      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b588:	2304      	movs	r3, #4
 800b58a:	e002      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b58c:	2302      	movs	r3, #2
 800b58e:	e000      	b.n	800b592 <UART_SetConfig+0x1f02>
 800b590:	2301      	movs	r3, #1
 800b592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b594:	fbb2 f2f3 	udiv	r2, r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	085b      	lsrs	r3, r3, #1
 800b59e:	441a      	add	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ac:	e2aa      	b.n	800bb04 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5ae:	f7fb f84d 	bl	800664c <HAL_RCC_GetPCLK2Freq>
 800b5b2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d044      	beq.n	800b646 <UART_SetConfig+0x1fb6>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d03e      	beq.n	800b642 <UART_SetConfig+0x1fb2>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d038      	beq.n	800b63e <UART_SetConfig+0x1fae>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d032      	beq.n	800b63a <UART_SetConfig+0x1faa>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	d02c      	beq.n	800b636 <UART_SetConfig+0x1fa6>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	2b05      	cmp	r3, #5
 800b5e2:	d026      	beq.n	800b632 <UART_SetConfig+0x1fa2>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	2b06      	cmp	r3, #6
 800b5ea:	d020      	beq.n	800b62e <UART_SetConfig+0x1f9e>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f0:	2b07      	cmp	r3, #7
 800b5f2:	d01a      	beq.n	800b62a <UART_SetConfig+0x1f9a>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d014      	beq.n	800b626 <UART_SetConfig+0x1f96>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	2b09      	cmp	r3, #9
 800b602:	d00e      	beq.n	800b622 <UART_SetConfig+0x1f92>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	2b0a      	cmp	r3, #10
 800b60a:	d008      	beq.n	800b61e <UART_SetConfig+0x1f8e>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b610:	2b0b      	cmp	r3, #11
 800b612:	d102      	bne.n	800b61a <UART_SetConfig+0x1f8a>
 800b614:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b618:	e016      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e014      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b61e:	2380      	movs	r3, #128	; 0x80
 800b620:	e012      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	e010      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b626:	2320      	movs	r3, #32
 800b628:	e00e      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b62a:	2310      	movs	r3, #16
 800b62c:	e00c      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b62e:	230c      	movs	r3, #12
 800b630:	e00a      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b632:	230a      	movs	r3, #10
 800b634:	e008      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b636:	2308      	movs	r3, #8
 800b638:	e006      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b63a:	2306      	movs	r3, #6
 800b63c:	e004      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b63e:	2304      	movs	r3, #4
 800b640:	e002      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b642:	2302      	movs	r3, #2
 800b644:	e000      	b.n	800b648 <UART_SetConfig+0x1fb8>
 800b646:	2301      	movs	r3, #1
 800b648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b64a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	085b      	lsrs	r3, r3, #1
 800b654:	441a      	add	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b662:	e24f      	b.n	800bb04 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b664:	f107 0318 	add.w	r3, r7, #24
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fc f9bd 	bl	80079e8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	2b00      	cmp	r3, #0
 800b676:	d044      	beq.n	800b702 <UART_SetConfig+0x2072>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d03e      	beq.n	800b6fe <UART_SetConfig+0x206e>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	2b02      	cmp	r3, #2
 800b686:	d038      	beq.n	800b6fa <UART_SetConfig+0x206a>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d032      	beq.n	800b6f6 <UART_SetConfig+0x2066>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b04      	cmp	r3, #4
 800b696:	d02c      	beq.n	800b6f2 <UART_SetConfig+0x2062>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	2b05      	cmp	r3, #5
 800b69e:	d026      	beq.n	800b6ee <UART_SetConfig+0x205e>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b06      	cmp	r3, #6
 800b6a6:	d020      	beq.n	800b6ea <UART_SetConfig+0x205a>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ac:	2b07      	cmp	r3, #7
 800b6ae:	d01a      	beq.n	800b6e6 <UART_SetConfig+0x2056>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2b08      	cmp	r3, #8
 800b6b6:	d014      	beq.n	800b6e2 <UART_SetConfig+0x2052>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	2b09      	cmp	r3, #9
 800b6be:	d00e      	beq.n	800b6de <UART_SetConfig+0x204e>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	2b0a      	cmp	r3, #10
 800b6c6:	d008      	beq.n	800b6da <UART_SetConfig+0x204a>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	2b0b      	cmp	r3, #11
 800b6ce:	d102      	bne.n	800b6d6 <UART_SetConfig+0x2046>
 800b6d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d4:	e016      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e014      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6da:	2380      	movs	r3, #128	; 0x80
 800b6dc:	e012      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6de:	2340      	movs	r3, #64	; 0x40
 800b6e0:	e010      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6e2:	2320      	movs	r3, #32
 800b6e4:	e00e      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6e6:	2310      	movs	r3, #16
 800b6e8:	e00c      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	e00a      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6ee:	230a      	movs	r3, #10
 800b6f0:	e008      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6f2:	2308      	movs	r3, #8
 800b6f4:	e006      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6f6:	2306      	movs	r3, #6
 800b6f8:	e004      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	e002      	b.n	800b704 <UART_SetConfig+0x2074>
 800b6fe:	2302      	movs	r3, #2
 800b700:	e000      	b.n	800b704 <UART_SetConfig+0x2074>
 800b702:	2301      	movs	r3, #1
 800b704:	fbb2 f2f3 	udiv	r2, r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	085b      	lsrs	r3, r3, #1
 800b70e:	441a      	add	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	fbb2 f3f3 	udiv	r3, r2, r3
 800b718:	b29b      	uxth	r3, r3
 800b71a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b71c:	e1f2      	b.n	800bb04 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b71e:	f107 030c 	add.w	r3, r7, #12
 800b722:	4618      	mov	r0, r3
 800b724:	f7fc faac 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d044      	beq.n	800b7bc <UART_SetConfig+0x212c>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b736:	2b01      	cmp	r3, #1
 800b738:	d03e      	beq.n	800b7b8 <UART_SetConfig+0x2128>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d038      	beq.n	800b7b4 <UART_SetConfig+0x2124>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	2b03      	cmp	r3, #3
 800b748:	d032      	beq.n	800b7b0 <UART_SetConfig+0x2120>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d02c      	beq.n	800b7ac <UART_SetConfig+0x211c>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	2b05      	cmp	r3, #5
 800b758:	d026      	beq.n	800b7a8 <UART_SetConfig+0x2118>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	2b06      	cmp	r3, #6
 800b760:	d020      	beq.n	800b7a4 <UART_SetConfig+0x2114>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b766:	2b07      	cmp	r3, #7
 800b768:	d01a      	beq.n	800b7a0 <UART_SetConfig+0x2110>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	2b08      	cmp	r3, #8
 800b770:	d014      	beq.n	800b79c <UART_SetConfig+0x210c>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	2b09      	cmp	r3, #9
 800b778:	d00e      	beq.n	800b798 <UART_SetConfig+0x2108>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77e:	2b0a      	cmp	r3, #10
 800b780:	d008      	beq.n	800b794 <UART_SetConfig+0x2104>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b786:	2b0b      	cmp	r3, #11
 800b788:	d102      	bne.n	800b790 <UART_SetConfig+0x2100>
 800b78a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b78e:	e016      	b.n	800b7be <UART_SetConfig+0x212e>
 800b790:	2301      	movs	r3, #1
 800b792:	e014      	b.n	800b7be <UART_SetConfig+0x212e>
 800b794:	2380      	movs	r3, #128	; 0x80
 800b796:	e012      	b.n	800b7be <UART_SetConfig+0x212e>
 800b798:	2340      	movs	r3, #64	; 0x40
 800b79a:	e010      	b.n	800b7be <UART_SetConfig+0x212e>
 800b79c:	2320      	movs	r3, #32
 800b79e:	e00e      	b.n	800b7be <UART_SetConfig+0x212e>
 800b7a0:	2310      	movs	r3, #16
 800b7a2:	e00c      	b.n	800b7be <UART_SetConfig+0x212e>
 800b7a4:	230c      	movs	r3, #12
 800b7a6:	e00a      	b.n	800b7be <UART_SetConfig+0x212e>
 800b7a8:	230a      	movs	r3, #10
 800b7aa:	e008      	b.n	800b7be <UART_SetConfig+0x212e>
 800b7ac:	2308      	movs	r3, #8
 800b7ae:	e006      	b.n	800b7be <UART_SetConfig+0x212e>
 800b7b0:	2306      	movs	r3, #6
 800b7b2:	e004      	b.n	800b7be <UART_SetConfig+0x212e>
 800b7b4:	2304      	movs	r3, #4
 800b7b6:	e002      	b.n	800b7be <UART_SetConfig+0x212e>
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	e000      	b.n	800b7be <UART_SetConfig+0x212e>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	441a      	add	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7d6:	e195      	b.n	800bb04 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7d8:	4b87      	ldr	r3, [pc, #540]	; (800b9f8 <UART_SetConfig+0x2368>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0320 	and.w	r3, r3, #32
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d05d      	beq.n	800b8a0 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7e4:	4b84      	ldr	r3, [pc, #528]	; (800b9f8 <UART_SetConfig+0x2368>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	08db      	lsrs	r3, r3, #3
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	4a83      	ldr	r2, [pc, #524]	; (800b9fc <UART_SetConfig+0x236c>)
 800b7f0:	40da      	lsrs	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d044      	beq.n	800b884 <UART_SetConfig+0x21f4>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d03e      	beq.n	800b880 <UART_SetConfig+0x21f0>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	2b02      	cmp	r3, #2
 800b808:	d038      	beq.n	800b87c <UART_SetConfig+0x21ec>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d032      	beq.n	800b878 <UART_SetConfig+0x21e8>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	2b04      	cmp	r3, #4
 800b818:	d02c      	beq.n	800b874 <UART_SetConfig+0x21e4>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	2b05      	cmp	r3, #5
 800b820:	d026      	beq.n	800b870 <UART_SetConfig+0x21e0>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	2b06      	cmp	r3, #6
 800b828:	d020      	beq.n	800b86c <UART_SetConfig+0x21dc>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	2b07      	cmp	r3, #7
 800b830:	d01a      	beq.n	800b868 <UART_SetConfig+0x21d8>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b836:	2b08      	cmp	r3, #8
 800b838:	d014      	beq.n	800b864 <UART_SetConfig+0x21d4>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	2b09      	cmp	r3, #9
 800b840:	d00e      	beq.n	800b860 <UART_SetConfig+0x21d0>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	2b0a      	cmp	r3, #10
 800b848:	d008      	beq.n	800b85c <UART_SetConfig+0x21cc>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84e:	2b0b      	cmp	r3, #11
 800b850:	d102      	bne.n	800b858 <UART_SetConfig+0x21c8>
 800b852:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b856:	e016      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b858:	2301      	movs	r3, #1
 800b85a:	e014      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b85c:	2380      	movs	r3, #128	; 0x80
 800b85e:	e012      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b860:	2340      	movs	r3, #64	; 0x40
 800b862:	e010      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b864:	2320      	movs	r3, #32
 800b866:	e00e      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b868:	2310      	movs	r3, #16
 800b86a:	e00c      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b86c:	230c      	movs	r3, #12
 800b86e:	e00a      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b870:	230a      	movs	r3, #10
 800b872:	e008      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b874:	2308      	movs	r3, #8
 800b876:	e006      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b878:	2306      	movs	r3, #6
 800b87a:	e004      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b87c:	2304      	movs	r3, #4
 800b87e:	e002      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b880:	2302      	movs	r3, #2
 800b882:	e000      	b.n	800b886 <UART_SetConfig+0x21f6>
 800b884:	2301      	movs	r3, #1
 800b886:	fbb2 f2f3 	udiv	r2, r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	085b      	lsrs	r3, r3, #1
 800b890:	441a      	add	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b89e:	e131      	b.n	800bb04 <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d043      	beq.n	800b930 <UART_SetConfig+0x22a0>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d03d      	beq.n	800b92c <UART_SetConfig+0x229c>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d037      	beq.n	800b928 <UART_SetConfig+0x2298>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d031      	beq.n	800b924 <UART_SetConfig+0x2294>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d02b      	beq.n	800b920 <UART_SetConfig+0x2290>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	2b05      	cmp	r3, #5
 800b8ce:	d025      	beq.n	800b91c <UART_SetConfig+0x228c>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2b06      	cmp	r3, #6
 800b8d6:	d01f      	beq.n	800b918 <UART_SetConfig+0x2288>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	2b07      	cmp	r3, #7
 800b8de:	d019      	beq.n	800b914 <UART_SetConfig+0x2284>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	d013      	beq.n	800b910 <UART_SetConfig+0x2280>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	d00d      	beq.n	800b90c <UART_SetConfig+0x227c>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	2b0a      	cmp	r3, #10
 800b8f6:	d007      	beq.n	800b908 <UART_SetConfig+0x2278>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	2b0b      	cmp	r3, #11
 800b8fe:	d101      	bne.n	800b904 <UART_SetConfig+0x2274>
 800b900:	4b3f      	ldr	r3, [pc, #252]	; (800ba00 <UART_SetConfig+0x2370>)
 800b902:	e016      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b904:	4b3d      	ldr	r3, [pc, #244]	; (800b9fc <UART_SetConfig+0x236c>)
 800b906:	e014      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b908:	4b3e      	ldr	r3, [pc, #248]	; (800ba04 <UART_SetConfig+0x2374>)
 800b90a:	e012      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b90c:	4b3e      	ldr	r3, [pc, #248]	; (800ba08 <UART_SetConfig+0x2378>)
 800b90e:	e010      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b910:	4b3e      	ldr	r3, [pc, #248]	; (800ba0c <UART_SetConfig+0x237c>)
 800b912:	e00e      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b914:	4b3e      	ldr	r3, [pc, #248]	; (800ba10 <UART_SetConfig+0x2380>)
 800b916:	e00c      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b918:	4b3e      	ldr	r3, [pc, #248]	; (800ba14 <UART_SetConfig+0x2384>)
 800b91a:	e00a      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b91c:	4b3e      	ldr	r3, [pc, #248]	; (800ba18 <UART_SetConfig+0x2388>)
 800b91e:	e008      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b920:	4b3e      	ldr	r3, [pc, #248]	; (800ba1c <UART_SetConfig+0x238c>)
 800b922:	e006      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b924:	4b3e      	ldr	r3, [pc, #248]	; (800ba20 <UART_SetConfig+0x2390>)
 800b926:	e004      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b928:	4b3e      	ldr	r3, [pc, #248]	; (800ba24 <UART_SetConfig+0x2394>)
 800b92a:	e002      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b92c:	4b3e      	ldr	r3, [pc, #248]	; (800ba28 <UART_SetConfig+0x2398>)
 800b92e:	e000      	b.n	800b932 <UART_SetConfig+0x22a2>
 800b930:	4b32      	ldr	r3, [pc, #200]	; (800b9fc <UART_SetConfig+0x236c>)
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	6852      	ldr	r2, [r2, #4]
 800b936:	0852      	lsrs	r2, r2, #1
 800b938:	441a      	add	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b942:	b29b      	uxth	r3, r3
 800b944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b946:	e0dd      	b.n	800bb04 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d046      	beq.n	800b9de <UART_SetConfig+0x234e>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	2b01      	cmp	r3, #1
 800b956:	d040      	beq.n	800b9da <UART_SetConfig+0x234a>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d03a      	beq.n	800b9d6 <UART_SetConfig+0x2346>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	2b03      	cmp	r3, #3
 800b966:	d034      	beq.n	800b9d2 <UART_SetConfig+0x2342>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d02e      	beq.n	800b9ce <UART_SetConfig+0x233e>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	2b05      	cmp	r3, #5
 800b976:	d028      	beq.n	800b9ca <UART_SetConfig+0x233a>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	2b06      	cmp	r3, #6
 800b97e:	d022      	beq.n	800b9c6 <UART_SetConfig+0x2336>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	2b07      	cmp	r3, #7
 800b986:	d01c      	beq.n	800b9c2 <UART_SetConfig+0x2332>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98c:	2b08      	cmp	r3, #8
 800b98e:	d016      	beq.n	800b9be <UART_SetConfig+0x232e>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b994:	2b09      	cmp	r3, #9
 800b996:	d00f      	beq.n	800b9b8 <UART_SetConfig+0x2328>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99c:	2b0a      	cmp	r3, #10
 800b99e:	d008      	beq.n	800b9b2 <UART_SetConfig+0x2322>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	2b0b      	cmp	r3, #11
 800b9a6:	d102      	bne.n	800b9ae <UART_SetConfig+0x231e>
 800b9a8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b9ac:	e018      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9ae:	4b18      	ldr	r3, [pc, #96]	; (800ba10 <UART_SetConfig+0x2380>)
 800b9b0:	e016      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b9b6:	e013      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b9bc:	e010      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9be:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <UART_SetConfig+0x239c>)
 800b9c0:	e00e      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <UART_SetConfig+0x2370>)
 800b9c4:	e00c      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9c6:	4b1a      	ldr	r3, [pc, #104]	; (800ba30 <UART_SetConfig+0x23a0>)
 800b9c8:	e00a      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9ca:	4b1a      	ldr	r3, [pc, #104]	; (800ba34 <UART_SetConfig+0x23a4>)
 800b9cc:	e008      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <UART_SetConfig+0x2374>)
 800b9d0:	e006      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9d2:	4b19      	ldr	r3, [pc, #100]	; (800ba38 <UART_SetConfig+0x23a8>)
 800b9d4:	e004      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <UART_SetConfig+0x2378>)
 800b9d8:	e002      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9da:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <UART_SetConfig+0x237c>)
 800b9dc:	e000      	b.n	800b9e0 <UART_SetConfig+0x2350>
 800b9de:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <UART_SetConfig+0x2380>)
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	6852      	ldr	r2, [r2, #4]
 800b9e4:	0852      	lsrs	r2, r2, #1
 800b9e6:	441a      	add	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9f4:	e086      	b.n	800bb04 <UART_SetConfig+0x2474>
 800b9f6:	bf00      	nop
 800b9f8:	58024400 	.word	0x58024400
 800b9fc:	03d09000 	.word	0x03d09000
 800ba00:	0003d090 	.word	0x0003d090
 800ba04:	0007a120 	.word	0x0007a120
 800ba08:	000f4240 	.word	0x000f4240
 800ba0c:	001e8480 	.word	0x001e8480
 800ba10:	003d0900 	.word	0x003d0900
 800ba14:	00516155 	.word	0x00516155
 800ba18:	0061a800 	.word	0x0061a800
 800ba1c:	007a1200 	.word	0x007a1200
 800ba20:	00a2c2aa 	.word	0x00a2c2aa
 800ba24:	00f42400 	.word	0x00f42400
 800ba28:	01e84800 	.word	0x01e84800
 800ba2c:	0001e848 	.word	0x0001e848
 800ba30:	00051615 	.word	0x00051615
 800ba34:	00061a80 	.word	0x00061a80
 800ba38:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d04e      	beq.n	800bae2 <UART_SetConfig+0x2452>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d047      	beq.n	800badc <UART_SetConfig+0x244c>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d040      	beq.n	800bad6 <UART_SetConfig+0x2446>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	d039      	beq.n	800bad0 <UART_SetConfig+0x2440>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	d032      	beq.n	800baca <UART_SetConfig+0x243a>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba68:	2b05      	cmp	r3, #5
 800ba6a:	d02b      	beq.n	800bac4 <UART_SetConfig+0x2434>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2b06      	cmp	r3, #6
 800ba72:	d024      	beq.n	800babe <UART_SetConfig+0x242e>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b07      	cmp	r3, #7
 800ba7a:	d01d      	beq.n	800bab8 <UART_SetConfig+0x2428>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b08      	cmp	r3, #8
 800ba82:	d016      	beq.n	800bab2 <UART_SetConfig+0x2422>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b09      	cmp	r3, #9
 800ba8a:	d00f      	beq.n	800baac <UART_SetConfig+0x241c>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b0a      	cmp	r3, #10
 800ba92:	d008      	beq.n	800baa6 <UART_SetConfig+0x2416>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	2b0b      	cmp	r3, #11
 800ba9a:	d101      	bne.n	800baa0 <UART_SetConfig+0x2410>
 800ba9c:	2380      	movs	r3, #128	; 0x80
 800ba9e:	e022      	b.n	800bae6 <UART_SetConfig+0x2456>
 800baa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baa4:	e01f      	b.n	800bae6 <UART_SetConfig+0x2456>
 800baa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baaa:	e01c      	b.n	800bae6 <UART_SetConfig+0x2456>
 800baac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bab0:	e019      	b.n	800bae6 <UART_SetConfig+0x2456>
 800bab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bab6:	e016      	b.n	800bae6 <UART_SetConfig+0x2456>
 800bab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800babc:	e013      	b.n	800bae6 <UART_SetConfig+0x2456>
 800babe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bac2:	e010      	b.n	800bae6 <UART_SetConfig+0x2456>
 800bac4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bac8:	e00d      	b.n	800bae6 <UART_SetConfig+0x2456>
 800baca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bace:	e00a      	b.n	800bae6 <UART_SetConfig+0x2456>
 800bad0:	f241 5355 	movw	r3, #5461	; 0x1555
 800bad4:	e007      	b.n	800bae6 <UART_SetConfig+0x2456>
 800bad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bada:	e004      	b.n	800bae6 <UART_SetConfig+0x2456>
 800badc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bae0:	e001      	b.n	800bae6 <UART_SetConfig+0x2456>
 800bae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	6852      	ldr	r2, [r2, #4]
 800baea:	0852      	lsrs	r2, r2, #1
 800baec:	441a      	add	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bafa:	e003      	b.n	800bb04 <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bb02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb06:	2b0f      	cmp	r3, #15
 800bb08:	d908      	bls.n	800bb1c <UART_SetConfig+0x248c>
 800bb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb10:	d204      	bcs.n	800bb1c <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb18:	60da      	str	r2, [r3, #12]
 800bb1a:	e002      	b.n	800bb22 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bb3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3740      	adds	r7, #64	; 0x40
 800bb46:	46bd      	mov	sp, r7
 800bb48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bb4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb58:	2bff      	cmp	r3, #255	; 0xff
 800bb5a:	d904      	bls.n	800bb66 <UART_AdvFeatureConfig+0x1a>
 800bb5c:	f640 4149 	movw	r1, #3145	; 0xc49
 800bb60:	4899      	ldr	r0, [pc, #612]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bb62:	f7f5 f95c 	bl	8000e1e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d018      	beq.n	800bba4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d009      	beq.n	800bb8e <UART_AdvFeatureConfig+0x42>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb82:	d004      	beq.n	800bb8e <UART_AdvFeatureConfig+0x42>
 800bb84:	f640 414e 	movw	r1, #3150	; 0xc4e
 800bb88:	488f      	ldr	r0, [pc, #572]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bb8a:	f7f5 f948 	bl	8000e1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba8:	f003 0302 	and.w	r3, r3, #2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d018      	beq.n	800bbe2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d009      	beq.n	800bbcc <UART_AdvFeatureConfig+0x80>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbc0:	d004      	beq.n	800bbcc <UART_AdvFeatureConfig+0x80>
 800bbc2:	f640 4155 	movw	r1, #3157	; 0xc55
 800bbc6:	4880      	ldr	r0, [pc, #512]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bbc8:	f7f5 f929 	bl	8000e1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	430a      	orrs	r2, r1
 800bbe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d018      	beq.n	800bc20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d009      	beq.n	800bc0a <UART_AdvFeatureConfig+0xbe>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bbfe:	d004      	beq.n	800bc0a <UART_AdvFeatureConfig+0xbe>
 800bc00:	f640 415c 	movw	r1, #3164	; 0xc5c
 800bc04:	4870      	ldr	r0, [pc, #448]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bc06:	f7f5 f90a 	bl	8000e1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc24:	f003 0308 	and.w	r3, r3, #8
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d018      	beq.n	800bc5e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d009      	beq.n	800bc48 <UART_AdvFeatureConfig+0xfc>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc3c:	d004      	beq.n	800bc48 <UART_AdvFeatureConfig+0xfc>
 800bc3e:	f640 4163 	movw	r1, #3171	; 0xc63
 800bc42:	4861      	ldr	r0, [pc, #388]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bc44:	f7f5 f8eb 	bl	8000e1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	430a      	orrs	r2, r1
 800bc5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc62:	f003 0310 	and.w	r3, r3, #16
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d018      	beq.n	800bc9c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d009      	beq.n	800bc86 <UART_AdvFeatureConfig+0x13a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc7a:	d004      	beq.n	800bc86 <UART_AdvFeatureConfig+0x13a>
 800bc7c:	f640 416a 	movw	r1, #3178	; 0xc6a
 800bc80:	4851      	ldr	r0, [pc, #324]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bc82:	f7f5 f8cc 	bl	8000e1e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	f003 0320 	and.w	r3, r3, #32
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d018      	beq.n	800bcda <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d009      	beq.n	800bcc4 <UART_AdvFeatureConfig+0x178>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcb8:	d004      	beq.n	800bcc4 <UART_AdvFeatureConfig+0x178>
 800bcba:	f640 4171 	movw	r1, #3185	; 0xc71
 800bcbe:	4842      	ldr	r0, [pc, #264]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bcc0:	f7f5 f8ad 	bl	8000e1e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f000 8082 	beq.w	800bdec <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a37      	ldr	r2, [pc, #220]	; (800bdcc <UART_AdvFeatureConfig+0x280>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d027      	beq.n	800bd42 <UART_AdvFeatureConfig+0x1f6>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a36      	ldr	r2, [pc, #216]	; (800bdd0 <UART_AdvFeatureConfig+0x284>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d022      	beq.n	800bd42 <UART_AdvFeatureConfig+0x1f6>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a34      	ldr	r2, [pc, #208]	; (800bdd4 <UART_AdvFeatureConfig+0x288>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d01d      	beq.n	800bd42 <UART_AdvFeatureConfig+0x1f6>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a33      	ldr	r2, [pc, #204]	; (800bdd8 <UART_AdvFeatureConfig+0x28c>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d018      	beq.n	800bd42 <UART_AdvFeatureConfig+0x1f6>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a31      	ldr	r2, [pc, #196]	; (800bddc <UART_AdvFeatureConfig+0x290>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d013      	beq.n	800bd42 <UART_AdvFeatureConfig+0x1f6>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a30      	ldr	r2, [pc, #192]	; (800bde0 <UART_AdvFeatureConfig+0x294>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d00e      	beq.n	800bd42 <UART_AdvFeatureConfig+0x1f6>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a2e      	ldr	r2, [pc, #184]	; (800bde4 <UART_AdvFeatureConfig+0x298>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d009      	beq.n	800bd42 <UART_AdvFeatureConfig+0x1f6>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a2d      	ldr	r2, [pc, #180]	; (800bde8 <UART_AdvFeatureConfig+0x29c>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d004      	beq.n	800bd42 <UART_AdvFeatureConfig+0x1f6>
 800bd38:	f640 4178 	movw	r1, #3192	; 0xc78
 800bd3c:	4822      	ldr	r0, [pc, #136]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bd3e:	f7f5 f86e 	bl	8000e1e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d009      	beq.n	800bd5e <UART_AdvFeatureConfig+0x212>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd52:	d004      	beq.n	800bd5e <UART_AdvFeatureConfig+0x212>
 800bd54:	f640 4179 	movw	r1, #3193	; 0xc79
 800bd58:	481b      	ldr	r0, [pc, #108]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bd5a:	f7f5 f860 	bl	8000e1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	430a      	orrs	r2, r1
 800bd72:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd7c:	d136      	bne.n	800bdec <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d013      	beq.n	800bdae <UART_AdvFeatureConfig+0x262>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd8e:	d00e      	beq.n	800bdae <UART_AdvFeatureConfig+0x262>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd98:	d009      	beq.n	800bdae <UART_AdvFeatureConfig+0x262>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bda2:	d004      	beq.n	800bdae <UART_AdvFeatureConfig+0x262>
 800bda4:	f640 417e 	movw	r1, #3198	; 0xc7e
 800bda8:	4807      	ldr	r0, [pc, #28]	; (800bdc8 <UART_AdvFeatureConfig+0x27c>)
 800bdaa:	f7f5 f838 	bl	8000e1e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	430a      	orrs	r2, r1
 800bdc2:	605a      	str	r2, [r3, #4]
 800bdc4:	e012      	b.n	800bdec <UART_AdvFeatureConfig+0x2a0>
 800bdc6:	bf00      	nop
 800bdc8:	0800c818 	.word	0x0800c818
 800bdcc:	40011000 	.word	0x40011000
 800bdd0:	40004400 	.word	0x40004400
 800bdd4:	40004800 	.word	0x40004800
 800bdd8:	40004c00 	.word	0x40004c00
 800bddc:	40005000 	.word	0x40005000
 800bde0:	40011400 	.word	0x40011400
 800bde4:	40007800 	.word	0x40007800
 800bde8:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d018      	beq.n	800be2a <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d009      	beq.n	800be14 <UART_AdvFeatureConfig+0x2c8>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800be08:	d004      	beq.n	800be14 <UART_AdvFeatureConfig+0x2c8>
 800be0a:	f640 4186 	movw	r1, #3206	; 0xc86
 800be0e:	4809      	ldr	r0, [pc, #36]	; (800be34 <UART_AdvFeatureConfig+0x2e8>)
 800be10:	f7f5 f805 	bl	8000e1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	430a      	orrs	r2, r1
 800be28:	605a      	str	r2, [r3, #4]
  }
}
 800be2a:	bf00      	nop
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	0800c818 	.word	0x0800c818

0800be38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af02      	add	r7, sp, #8
 800be3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800be48:	f7f5 fa9c 	bl	8001384 <HAL_GetTick>
 800be4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0308 	and.w	r3, r3, #8
 800be58:	2b08      	cmp	r3, #8
 800be5a:	d10e      	bne.n	800be7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 f82c 	bl	800bec8 <UART_WaitOnFlagUntilTimeout>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	e022      	b.n	800bec0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 0304 	and.w	r3, r3, #4
 800be84:	2b04      	cmp	r3, #4
 800be86:	d10e      	bne.n	800bea6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2200      	movs	r2, #0
 800be92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f816 	bl	800bec8 <UART_WaitOnFlagUntilTimeout>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bea2:	2303      	movs	r3, #3
 800bea4:	e00c      	b.n	800bec0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2220      	movs	r2, #32
 800beaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2220      	movs	r2, #32
 800beb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	603b      	str	r3, [r7, #0]
 800bed4:	4613      	mov	r3, r2
 800bed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bed8:	e062      	b.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee0:	d05e      	beq.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bee2:	f7f5 fa4f 	bl	8001384 <HAL_GetTick>
 800bee6:	4602      	mov	r2, r0
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d302      	bcc.n	800bef8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d11d      	bne.n	800bf34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bf06:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	689a      	ldr	r2, [r3, #8]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f022 0201 	bic.w	r2, r2, #1
 800bf16:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2220      	movs	r2, #32
 800bf1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2220      	movs	r2, #32
 800bf24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e045      	b.n	800bfc0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 0304 	and.w	r3, r3, #4
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d02e      	beq.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf50:	d126      	bne.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf5a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bf6a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	689a      	ldr	r2, [r3, #8]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0201 	bic.w	r2, r2, #1
 800bf7a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2220      	movs	r2, #32
 800bf88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e00f      	b.n	800bfc0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	69da      	ldr	r2, [r3, #28]
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	bf0c      	ite	eq
 800bfb0:	2301      	moveq	r3, #1
 800bfb2:	2300      	movne	r3, #0
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	79fb      	ldrb	r3, [r7, #7]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d08d      	beq.n	800beda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a2e      	ldr	r2, [pc, #184]	; (800c090 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d027      	beq.n	800c02a <HAL_UARTEx_DisableFifoMode+0x62>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a2d      	ldr	r2, [pc, #180]	; (800c094 <HAL_UARTEx_DisableFifoMode+0xcc>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d022      	beq.n	800c02a <HAL_UARTEx_DisableFifoMode+0x62>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a2b      	ldr	r2, [pc, #172]	; (800c098 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d01d      	beq.n	800c02a <HAL_UARTEx_DisableFifoMode+0x62>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a2a      	ldr	r2, [pc, #168]	; (800c09c <HAL_UARTEx_DisableFifoMode+0xd4>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d018      	beq.n	800c02a <HAL_UARTEx_DisableFifoMode+0x62>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a28      	ldr	r2, [pc, #160]	; (800c0a0 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d013      	beq.n	800c02a <HAL_UARTEx_DisableFifoMode+0x62>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a27      	ldr	r2, [pc, #156]	; (800c0a4 <HAL_UARTEx_DisableFifoMode+0xdc>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d00e      	beq.n	800c02a <HAL_UARTEx_DisableFifoMode+0x62>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a25      	ldr	r2, [pc, #148]	; (800c0a8 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d009      	beq.n	800c02a <HAL_UARTEx_DisableFifoMode+0x62>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a24      	ldr	r2, [pc, #144]	; (800c0ac <HAL_UARTEx_DisableFifoMode+0xe4>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d004      	beq.n	800c02a <HAL_UARTEx_DisableFifoMode+0x62>
 800c020:	f240 2111 	movw	r1, #529	; 0x211
 800c024:	4822      	ldr	r0, [pc, #136]	; (800c0b0 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800c026:	f7f4 fefa 	bl	8000e1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c030:	2b01      	cmp	r3, #1
 800c032:	d101      	bne.n	800c038 <HAL_UARTEx_DisableFifoMode+0x70>
 800c034:	2302      	movs	r3, #2
 800c036:	e027      	b.n	800c088 <HAL_UARTEx_DisableFifoMode+0xc0>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2224      	movs	r2, #36	; 0x24
 800c044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f022 0201 	bic.w	r2, r2, #1
 800c05e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c066:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2220      	movs	r2, #32
 800c07a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	40011000 	.word	0x40011000
 800c094:	40004400 	.word	0x40004400
 800c098:	40004800 	.word	0x40004800
 800c09c:	40004c00 	.word	0x40004c00
 800c0a0:	40005000 	.word	0x40005000
 800c0a4:	40011400 	.word	0x40011400
 800c0a8:	40007800 	.word	0x40007800
 800c0ac:	40007c00 	.word	0x40007c00
 800c0b0:	0800c854 	.word	0x0800c854

0800c0b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a40      	ldr	r2, [pc, #256]	; (800c1c4 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d027      	beq.n	800c118 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a3e      	ldr	r2, [pc, #248]	; (800c1c8 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d022      	beq.n	800c118 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a3d      	ldr	r2, [pc, #244]	; (800c1cc <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d01d      	beq.n	800c118 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a3b      	ldr	r2, [pc, #236]	; (800c1d0 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d018      	beq.n	800c118 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a3a      	ldr	r2, [pc, #232]	; (800c1d4 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d013      	beq.n	800c118 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a38      	ldr	r2, [pc, #224]	; (800c1d8 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d00e      	beq.n	800c118 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a37      	ldr	r2, [pc, #220]	; (800c1dc <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d009      	beq.n	800c118 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a35      	ldr	r2, [pc, #212]	; (800c1e0 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d004      	beq.n	800c118 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800c10e:	f240 213f 	movw	r1, #575	; 0x23f
 800c112:	4834      	ldr	r0, [pc, #208]	; (800c1e4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800c114:	f7f4 fe83 	bl	8000e1e <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d018      	beq.n	800c150 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c124:	d014      	beq.n	800c150 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12c:	d010      	beq.n	800c150 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c134:	d00c      	beq.n	800c150 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c13c:	d008      	beq.n	800c150 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800c144:	d004      	beq.n	800c150 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800c146:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c14a:	4826      	ldr	r0, [pc, #152]	; (800c1e4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800c14c:	f7f4 fe67 	bl	8000e1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c156:	2b01      	cmp	r3, #1
 800c158:	d101      	bne.n	800c15e <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800c15a:	2302      	movs	r3, #2
 800c15c:	e02d      	b.n	800c1ba <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2224      	movs	r2, #36	; 0x24
 800c16a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f022 0201 	bic.w	r2, r2, #1
 800c184:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f8be 	bl	800c31c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2220      	movs	r2, #32
 800c1ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	40011000 	.word	0x40011000
 800c1c8:	40004400 	.word	0x40004400
 800c1cc:	40004800 	.word	0x40004800
 800c1d0:	40004c00 	.word	0x40004c00
 800c1d4:	40005000 	.word	0x40005000
 800c1d8:	40011400 	.word	0x40011400
 800c1dc:	40007800 	.word	0x40007800
 800c1e0:	40007c00 	.word	0x40007c00
 800c1e4:	0800c854 	.word	0x0800c854

0800c1e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a40      	ldr	r2, [pc, #256]	; (800c2f8 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d027      	beq.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a3e      	ldr	r2, [pc, #248]	; (800c2fc <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d022      	beq.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a3d      	ldr	r2, [pc, #244]	; (800c300 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d01d      	beq.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a3b      	ldr	r2, [pc, #236]	; (800c304 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d018      	beq.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a3a      	ldr	r2, [pc, #232]	; (800c308 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d013      	beq.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a38      	ldr	r2, [pc, #224]	; (800c30c <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d00e      	beq.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a37      	ldr	r2, [pc, #220]	; (800c310 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d009      	beq.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a35      	ldr	r2, [pc, #212]	; (800c314 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d004      	beq.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c242:	f44f 711c 	mov.w	r1, #624	; 0x270
 800c246:	4834      	ldr	r0, [pc, #208]	; (800c318 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800c248:	f7f4 fde9 	bl	8000e1e <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d018      	beq.n	800c284 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c258:	d014      	beq.n	800c284 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c260:	d010      	beq.n	800c284 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800c268:	d00c      	beq.n	800c284 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c270:	d008      	beq.n	800c284 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800c278:	d004      	beq.n	800c284 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c27a:	f240 2171 	movw	r1, #625	; 0x271
 800c27e:	4826      	ldr	r0, [pc, #152]	; (800c318 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800c280:	f7f4 fdcd 	bl	8000e1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800c28e:	2302      	movs	r3, #2
 800c290:	e02d      	b.n	800c2ee <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2224      	movs	r2, #36	; 0x24
 800c29e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0201 	bic.w	r2, r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f824 	bl	800c31c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	40011000 	.word	0x40011000
 800c2fc:	40004400 	.word	0x40004400
 800c300:	40004800 	.word	0x40004800
 800c304:	40004c00 	.word	0x40004c00
 800c308:	40005000 	.word	0x40005000
 800c30c:	40011400 	.word	0x40011400
 800c310:	40007800 	.word	0x40007800
 800c314:	40007c00 	.word	0x40007c00
 800c318:	0800c854 	.word	0x0800c854

0800c31c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b089      	sub	sp, #36	; 0x24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c324:	4a2f      	ldr	r2, [pc, #188]	; (800c3e4 <UARTEx_SetNbDataToProcess+0xc8>)
 800c326:	f107 0314 	add.w	r3, r7, #20
 800c32a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c32e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c332:	4a2d      	ldr	r2, [pc, #180]	; (800c3e8 <UARTEx_SetNbDataToProcess+0xcc>)
 800c334:	f107 030c 	add.w	r3, r7, #12
 800c338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c33c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c344:	2b00      	cmp	r3, #0
 800c346:	d108      	bne.n	800c35a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c358:	e03d      	b.n	800c3d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c35a:	2308      	movs	r3, #8
 800c35c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c35e:	2308      	movs	r3, #8
 800c360:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	0e5b      	lsrs	r3, r3, #25
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	f003 0307 	and.w	r3, r3, #7
 800c370:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	0f5b      	lsrs	r3, r3, #29
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	f003 0307 	and.w	r3, r3, #7
 800c380:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c382:	7fbb      	ldrb	r3, [r7, #30]
 800c384:	7f3a      	ldrb	r2, [r7, #28]
 800c386:	f107 0120 	add.w	r1, r7, #32
 800c38a:	440a      	add	r2, r1
 800c38c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c390:	fb02 f303 	mul.w	r3, r2, r3
 800c394:	7f3a      	ldrb	r2, [r7, #28]
 800c396:	f107 0120 	add.w	r1, r7, #32
 800c39a:	440a      	add	r2, r1
 800c39c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c3a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c3ac:	7ffb      	ldrb	r3, [r7, #31]
 800c3ae:	7f7a      	ldrb	r2, [r7, #29]
 800c3b0:	f107 0120 	add.w	r1, r7, #32
 800c3b4:	440a      	add	r2, r1
 800c3b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c3ba:	fb02 f303 	mul.w	r3, r2, r3
 800c3be:	7f7a      	ldrb	r2, [r7, #29]
 800c3c0:	f107 0120 	add.w	r1, r7, #32
 800c3c4:	440a      	add	r2, r1
 800c3c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c3ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c3d6:	bf00      	nop
 800c3d8:	3724      	adds	r7, #36	; 0x24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	0800c890 	.word	0x0800c890
 800c3e8:	0800c898 	.word	0x0800c898

0800c3ec <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	af00      	add	r7, sp, #0
//	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
//	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);

// ================= SO: =================
	// WAKE PIN IN IRRELEVANT HERE SINCE ITS NOT CONNECTED TO MCU
HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c3f6:	4805      	ldr	r0, [pc, #20]	; (800c40c <init_chip_pins+0x20>)
 800c3f8:	f7f7 febc 	bl	8004174 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2120      	movs	r1, #32
 800c400:	4803      	ldr	r0, [pc, #12]	; (800c410 <init_chip_pins+0x24>)
 800c402:	f7f7 feb7 	bl	8004174 <HAL_GPIO_WritePin>


}
 800c406:	bf00      	nop
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	58020c00 	.word	0x58020c00
 800c410:	58020000 	.word	0x58020000

0800c414 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
 800c418:	4b03      	ldr	r3, [pc, #12]	; (800c428 <nm_bsp_init+0x14>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
 800c41e:	f7ff ffe5 	bl	800c3ec <init_chip_pins>
//	    delay_init();
//    }

//	system_interrupt_enable_global(); // TODO: SO: make sure INT_N is well defined

	return M2M_SUCCESS;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	bd80      	pop	{r7, pc}
 800c428:	2400002c 	.word	0x2400002c

0800c42c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	af00      	add	r7, sp, #0
//	nm_bsp_sleep(1);
//	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
//	nm_bsp_sleep(10);
//	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);

	HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 800c430:	2200      	movs	r2, #0
 800c432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c436:	480d      	ldr	r0, [pc, #52]	; (800c46c <nm_bsp_reset+0x40>)
 800c438:	f7f7 fe9c 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800c43c:	2200      	movs	r2, #0
 800c43e:	2120      	movs	r1, #32
 800c440:	480b      	ldr	r0, [pc, #44]	; (800c470 <nm_bsp_reset+0x44>)
 800c442:	f7f7 fe97 	bl	8004174 <HAL_GPIO_WritePin>
	nm_bsp_sleep(1);
 800c446:	2001      	movs	r0, #1
 800c448:	f000 f814 	bl	800c474 <nm_bsp_sleep>
	HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_SET);
 800c44c:	2201      	movs	r2, #1
 800c44e:	2120      	movs	r1, #32
 800c450:	4807      	ldr	r0, [pc, #28]	; (800c470 <nm_bsp_reset+0x44>)
 800c452:	f7f7 fe8f 	bl	8004174 <HAL_GPIO_WritePin>
	nm_bsp_sleep(10);
 800c456:	200a      	movs	r0, #10
 800c458:	f000 f80c 	bl	800c474 <nm_bsp_sleep>
	HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_SET);
 800c45c:	2201      	movs	r2, #1
 800c45e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c462:	4802      	ldr	r0, [pc, #8]	; (800c46c <nm_bsp_reset+0x40>)
 800c464:	f7f7 fe86 	bl	8004174 <HAL_GPIO_WritePin>
}
 800c468:	bf00      	nop
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	58020c00 	.word	0x58020c00
 800c470:	58020000 	.word	0x58020000

0800c474 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32TimeMsec);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f7f4 ff8d 	bl	800139c <HAL_Delay>
}
 800c482:	bf00      	nop
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
//	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
//			EXTINT_CALLBACK_TYPE_DETECT);
//	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
//			EXTINT_CALLBACK_TYPE_DETECT);

	gpfIsr = pfIsr;
 800c494:	4a1e      	ldr	r2, [pc, #120]	; (800c510 <nm_bsp_register_isr+0x84>)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6013      	str	r3, [r2, #0]
	EXTI_HandleTypeDef* phexti = &g_hexti;
 800c49a:	4b1e      	ldr	r3, [pc, #120]	; (800c514 <nm_bsp_register_isr+0x88>)
 800c49c:	617b      	str	r3, [r7, #20]
	phexti->Line = EXTI_LINE_13;
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	4a1d      	ldr	r2, [pc, #116]	; (800c518 <nm_bsp_register_isr+0x8c>)
 800c4a2:	601a      	str	r2, [r3, #0]
	phexti->PendingCallback = pfIsr;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	605a      	str	r2, [r3, #4]


	EXTI_ConfigTypeDef* pExtiConfig = &g_ExtiConfig;
 800c4aa:	4b1c      	ldr	r3, [pc, #112]	; (800c51c <nm_bsp_register_isr+0x90>)
 800c4ac:	613b      	str	r3, [r7, #16]
	pExtiConfig->GPIOSel 	= EXTI_GPIOD;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	2203      	movs	r2, #3
 800c4b2:	60da      	str	r2, [r3, #12]
	pExtiConfig->Line 		= phexti->Line;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	601a      	str	r2, [r3, #0]
	pExtiConfig->Mode 		= EXTI_MODE_INTERRUPT;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	605a      	str	r2, [r3, #4]
	pExtiConfig->Trigger	= EXTI_TRIGGER_FALLING;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2202      	movs	r2, #2
 800c4c6:	609a      	str	r2, [r3, #8]
	pExtiConfig->PendClearSource	= EXTI_D3_PENDCLR_SRC_NONE;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	611a      	str	r2, [r3, #16]

	HAL_StatusTypeDef result =  HAL_EXTI_SetConfigLine(phexti, pExtiConfig);
 800c4ce:	6939      	ldr	r1, [r7, #16]
 800c4d0:	6978      	ldr	r0, [r7, #20]
 800c4d2:	f7f7 f99f 	bl	8003814 <HAL_EXTI_SetConfigLine>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	73fb      	strb	r3, [r7, #15]
	assert_param(result != HAL_OK);
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d103      	bne.n	800c4e8 <nm_bsp_register_isr+0x5c>
 800c4e0:	21d1      	movs	r1, #209	; 0xd1
 800c4e2:	480f      	ldr	r0, [pc, #60]	; (800c520 <nm_bsp_register_isr+0x94>)
 800c4e4:	f7f4 fc9b 	bl	8000e1e <assert_failed>

	result = HAL_EXTI_RegisterCallback(phexti, HAL_EXTI_COMMON_CB_ID ,phexti->PendingCallback);
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	6978      	ldr	r0, [r7, #20]
 800c4f2:	f7f7 fb6f 	bl	8003bd4 <HAL_EXTI_RegisterCallback>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	73fb      	strb	r3, [r7, #15]
	assert_param(result != HAL_OK);
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d103      	bne.n	800c508 <nm_bsp_register_isr+0x7c>
 800c500:	21d4      	movs	r1, #212	; 0xd4
 800c502:	4807      	ldr	r0, [pc, #28]	; (800c520 <nm_bsp_register_isr+0x94>)
 800c504:	f7f4 fc8b 	bl	8000e1e <assert_failed>

}
 800c508:	bf00      	nop
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	2400002c 	.word	0x2400002c
 800c514:	24000030 	.word	0x24000030
 800c518:	1630000d 	.word	0x1630000d
 800c51c:	24000038 	.word	0x24000038
 800c520:	0800c8a0 	.word	0x0800c8a0

0800c524 <__libc_init_array>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4e0d      	ldr	r6, [pc, #52]	; (800c55c <__libc_init_array+0x38>)
 800c528:	4c0d      	ldr	r4, [pc, #52]	; (800c560 <__libc_init_array+0x3c>)
 800c52a:	1ba4      	subs	r4, r4, r6
 800c52c:	10a4      	asrs	r4, r4, #2
 800c52e:	2500      	movs	r5, #0
 800c530:	42a5      	cmp	r5, r4
 800c532:	d109      	bne.n	800c548 <__libc_init_array+0x24>
 800c534:	4e0b      	ldr	r6, [pc, #44]	; (800c564 <__libc_init_array+0x40>)
 800c536:	4c0c      	ldr	r4, [pc, #48]	; (800c568 <__libc_init_array+0x44>)
 800c538:	f000 f820 	bl	800c57c <_init>
 800c53c:	1ba4      	subs	r4, r4, r6
 800c53e:	10a4      	asrs	r4, r4, #2
 800c540:	2500      	movs	r5, #0
 800c542:	42a5      	cmp	r5, r4
 800c544:	d105      	bne.n	800c552 <__libc_init_array+0x2e>
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c54c:	4798      	blx	r3
 800c54e:	3501      	adds	r5, #1
 800c550:	e7ee      	b.n	800c530 <__libc_init_array+0xc>
 800c552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c556:	4798      	blx	r3
 800c558:	3501      	adds	r5, #1
 800c55a:	e7f2      	b.n	800c542 <__libc_init_array+0x1e>
 800c55c:	0800cb08 	.word	0x0800cb08
 800c560:	0800cb08 	.word	0x0800cb08
 800c564:	0800cb08 	.word	0x0800cb08
 800c568:	0800cb0c 	.word	0x0800cb0c

0800c56c <memset>:
 800c56c:	4402      	add	r2, r0
 800c56e:	4603      	mov	r3, r0
 800c570:	4293      	cmp	r3, r2
 800c572:	d100      	bne.n	800c576 <memset+0xa>
 800c574:	4770      	bx	lr
 800c576:	f803 1b01 	strb.w	r1, [r3], #1
 800c57a:	e7f9      	b.n	800c570 <memset+0x4>

0800c57c <_init>:
 800c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57e:	bf00      	nop
 800c580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c582:	bc08      	pop	{r3}
 800c584:	469e      	mov	lr, r3
 800c586:	4770      	bx	lr

0800c588 <_fini>:
 800c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58a:	bf00      	nop
 800c58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c58e:	bc08      	pop	{r3}
 800c590:	469e      	mov	lr, r3
 800c592:	4770      	bx	lr
