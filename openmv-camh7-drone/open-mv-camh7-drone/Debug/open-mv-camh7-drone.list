
open-mv-camh7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  08010990  08010990  00020990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114a8  080114a8  00030484  2**0
                  CONTENTS
  4 .ARM          00000008  080114a8  080114a8  000214a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114b0  080114b0  00030484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114b0  080114b0  000214b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080114b4  080114b4  000214b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  24000000  080114b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000974  24000484  0801193c  00030484  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000df8  0801193c  00030df8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030484  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038d29  00000000  00000000  000304b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000062b8  00000000  00000000  000691db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b30  00000000  00000000  0006f498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c8  00000000  00000000  00070fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003cdc3  00000000  00000000  00072990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fd8f  00000000  00000000  000af753  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016401b  00000000  00000000  000cf4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002334fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007560  00000000  00000000  00233578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000484 	.word	0x24000484
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010978 	.word	0x08010978

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000488 	.word	0x24000488
 80002dc:	08010978 	.word	0x08010978

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b972 	b.w	800069c <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	4688      	mov	r8, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14b      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4615      	mov	r5, r2
 80003e2:	d967      	bls.n	80004b4 <__udivmoddi4+0xe4>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b14a      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ea:	f1c2 0720 	rsb	r7, r2, #32
 80003ee:	fa01 f302 	lsl.w	r3, r1, r2
 80003f2:	fa20 f707 	lsr.w	r7, r0, r7
 80003f6:	4095      	lsls	r5, r2
 80003f8:	ea47 0803 	orr.w	r8, r7, r3
 80003fc:	4094      	lsls	r4, r2
 80003fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fbb8 f7fe 	udiv	r7, r8, lr
 8000408:	fa1f fc85 	uxth.w	ip, r5
 800040c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000410:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000414:	fb07 f10c 	mul.w	r1, r7, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x60>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000422:	f080 811b 	bcs.w	800065c <__udivmoddi4+0x28c>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 8118 	bls.w	800065c <__udivmoddi4+0x28c>
 800042c:	3f02      	subs	r7, #2
 800042e:	442b      	add	r3, r5
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000440:	fb00 fc0c 	mul.w	ip, r0, ip
 8000444:	45a4      	cmp	ip, r4
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x8c>
 8000448:	192c      	adds	r4, r5, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	f080 8107 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000452:	45a4      	cmp	ip, r4
 8000454:	f240 8104 	bls.w	8000660 <__udivmoddi4+0x290>
 8000458:	3802      	subs	r0, #2
 800045a:	442c      	add	r4, r5
 800045c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000460:	eba4 040c 	sub.w	r4, r4, ip
 8000464:	2700      	movs	r7, #0
 8000466:	b11e      	cbz	r6, 8000470 <__udivmoddi4+0xa0>
 8000468:	40d4      	lsrs	r4, r2
 800046a:	2300      	movs	r3, #0
 800046c:	e9c6 4300 	strd	r4, r3, [r6]
 8000470:	4639      	mov	r1, r7
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d909      	bls.n	800048e <__udivmoddi4+0xbe>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80eb 	beq.w	8000656 <__udivmoddi4+0x286>
 8000480:	2700      	movs	r7, #0
 8000482:	e9c6 0100 	strd	r0, r1, [r6]
 8000486:	4638      	mov	r0, r7
 8000488:	4639      	mov	r1, r7
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	fab3 f783 	clz	r7, r3
 8000492:	2f00      	cmp	r7, #0
 8000494:	d147      	bne.n	8000526 <__udivmoddi4+0x156>
 8000496:	428b      	cmp	r3, r1
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0xd0>
 800049a:	4282      	cmp	r2, r0
 800049c:	f200 80fa 	bhi.w	8000694 <__udivmoddi4+0x2c4>
 80004a0:	1a84      	subs	r4, r0, r2
 80004a2:	eb61 0303 	sbc.w	r3, r1, r3
 80004a6:	2001      	movs	r0, #1
 80004a8:	4698      	mov	r8, r3
 80004aa:	2e00      	cmp	r6, #0
 80004ac:	d0e0      	beq.n	8000470 <__udivmoddi4+0xa0>
 80004ae:	e9c6 4800 	strd	r4, r8, [r6]
 80004b2:	e7dd      	b.n	8000470 <__udivmoddi4+0xa0>
 80004b4:	b902      	cbnz	r2, 80004b8 <__udivmoddi4+0xe8>
 80004b6:	deff      	udf	#255	; 0xff
 80004b8:	fab2 f282 	clz	r2, r2
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f040 808f 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c2:	1b49      	subs	r1, r1, r5
 80004c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c8:	fa1f f885 	uxth.w	r8, r5
 80004cc:	2701      	movs	r7, #1
 80004ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80004d2:	0c23      	lsrs	r3, r4, #16
 80004d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004dc:	fb08 f10c 	mul.w	r1, r8, ip
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e4:	18eb      	adds	r3, r5, r3
 80004e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4299      	cmp	r1, r3
 80004ee:	f200 80cd 	bhi.w	800068c <__udivmoddi4+0x2bc>
 80004f2:	4684      	mov	ip, r0
 80004f4:	1a59      	subs	r1, r3, r1
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000500:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000504:	fb08 f800 	mul.w	r8, r8, r0
 8000508:	45a0      	cmp	r8, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x14c>
 800050c:	192c      	adds	r4, r5, r4
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x14a>
 8000514:	45a0      	cmp	r8, r4
 8000516:	f200 80b6 	bhi.w	8000686 <__udivmoddi4+0x2b6>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 0408 	sub.w	r4, r4, r8
 8000520:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000524:	e79f      	b.n	8000466 <__udivmoddi4+0x96>
 8000526:	f1c7 0c20 	rsb	ip, r7, #32
 800052a:	40bb      	lsls	r3, r7
 800052c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000530:	ea4e 0e03 	orr.w	lr, lr, r3
 8000534:	fa01 f407 	lsl.w	r4, r1, r7
 8000538:	fa20 f50c 	lsr.w	r5, r0, ip
 800053c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000540:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000544:	4325      	orrs	r5, r4
 8000546:	fbb3 f9f8 	udiv	r9, r3, r8
 800054a:	0c2c      	lsrs	r4, r5, #16
 800054c:	fb08 3319 	mls	r3, r8, r9, r3
 8000550:	fa1f fa8e 	uxth.w	sl, lr
 8000554:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000558:	fb09 f40a 	mul.w	r4, r9, sl
 800055c:	429c      	cmp	r4, r3
 800055e:	fa02 f207 	lsl.w	r2, r2, r7
 8000562:	fa00 f107 	lsl.w	r1, r0, r7
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1e 0303 	adds.w	r3, lr, r3
 800056c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000570:	f080 8087 	bcs.w	8000682 <__udivmoddi4+0x2b2>
 8000574:	429c      	cmp	r4, r3
 8000576:	f240 8084 	bls.w	8000682 <__udivmoddi4+0x2b2>
 800057a:	f1a9 0902 	sub.w	r9, r9, #2
 800057e:	4473      	add	r3, lr
 8000580:	1b1b      	subs	r3, r3, r4
 8000582:	b2ad      	uxth	r5, r5
 8000584:	fbb3 f0f8 	udiv	r0, r3, r8
 8000588:	fb08 3310 	mls	r3, r8, r0, r3
 800058c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000590:	fb00 fa0a 	mul.w	sl, r0, sl
 8000594:	45a2      	cmp	sl, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1e 0404 	adds.w	r4, lr, r4
 800059c:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a0:	d26b      	bcs.n	800067a <__udivmoddi4+0x2aa>
 80005a2:	45a2      	cmp	sl, r4
 80005a4:	d969      	bls.n	800067a <__udivmoddi4+0x2aa>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4474      	add	r4, lr
 80005aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ae:	fba0 8902 	umull	r8, r9, r0, r2
 80005b2:	eba4 040a 	sub.w	r4, r4, sl
 80005b6:	454c      	cmp	r4, r9
 80005b8:	46c2      	mov	sl, r8
 80005ba:	464b      	mov	r3, r9
 80005bc:	d354      	bcc.n	8000668 <__udivmoddi4+0x298>
 80005be:	d051      	beq.n	8000664 <__udivmoddi4+0x294>
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d069      	beq.n	8000698 <__udivmoddi4+0x2c8>
 80005c4:	ebb1 050a 	subs.w	r5, r1, sl
 80005c8:	eb64 0403 	sbc.w	r4, r4, r3
 80005cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005d0:	40fd      	lsrs	r5, r7
 80005d2:	40fc      	lsrs	r4, r7
 80005d4:	ea4c 0505 	orr.w	r5, ip, r5
 80005d8:	e9c6 5400 	strd	r5, r4, [r6]
 80005dc:	2700      	movs	r7, #0
 80005de:	e747      	b.n	8000470 <__udivmoddi4+0xa0>
 80005e0:	f1c2 0320 	rsb	r3, r2, #32
 80005e4:	fa20 f703 	lsr.w	r7, r0, r3
 80005e8:	4095      	lsls	r5, r2
 80005ea:	fa01 f002 	lsl.w	r0, r1, r2
 80005ee:	fa21 f303 	lsr.w	r3, r1, r3
 80005f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005f6:	4338      	orrs	r0, r7
 80005f8:	0c01      	lsrs	r1, r0, #16
 80005fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80005fe:	fa1f f885 	uxth.w	r8, r5
 8000602:	fb0e 3317 	mls	r3, lr, r7, r3
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb07 f308 	mul.w	r3, r7, r8
 800060e:	428b      	cmp	r3, r1
 8000610:	fa04 f402 	lsl.w	r4, r4, r2
 8000614:	d907      	bls.n	8000626 <__udivmoddi4+0x256>
 8000616:	1869      	adds	r1, r5, r1
 8000618:	f107 3cff 	add.w	ip, r7, #4294967295
 800061c:	d22f      	bcs.n	800067e <__udivmoddi4+0x2ae>
 800061e:	428b      	cmp	r3, r1
 8000620:	d92d      	bls.n	800067e <__udivmoddi4+0x2ae>
 8000622:	3f02      	subs	r7, #2
 8000624:	4429      	add	r1, r5
 8000626:	1acb      	subs	r3, r1, r3
 8000628:	b281      	uxth	r1, r0
 800062a:	fbb3 f0fe 	udiv	r0, r3, lr
 800062e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000632:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000636:	fb00 f308 	mul.w	r3, r0, r8
 800063a:	428b      	cmp	r3, r1
 800063c:	d907      	bls.n	800064e <__udivmoddi4+0x27e>
 800063e:	1869      	adds	r1, r5, r1
 8000640:	f100 3cff 	add.w	ip, r0, #4294967295
 8000644:	d217      	bcs.n	8000676 <__udivmoddi4+0x2a6>
 8000646:	428b      	cmp	r3, r1
 8000648:	d915      	bls.n	8000676 <__udivmoddi4+0x2a6>
 800064a:	3802      	subs	r0, #2
 800064c:	4429      	add	r1, r5
 800064e:	1ac9      	subs	r1, r1, r3
 8000650:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000654:	e73b      	b.n	80004ce <__udivmoddi4+0xfe>
 8000656:	4637      	mov	r7, r6
 8000658:	4630      	mov	r0, r6
 800065a:	e709      	b.n	8000470 <__udivmoddi4+0xa0>
 800065c:	4607      	mov	r7, r0
 800065e:	e6e7      	b.n	8000430 <__udivmoddi4+0x60>
 8000660:	4618      	mov	r0, r3
 8000662:	e6fb      	b.n	800045c <__udivmoddi4+0x8c>
 8000664:	4541      	cmp	r1, r8
 8000666:	d2ab      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 8000668:	ebb8 0a02 	subs.w	sl, r8, r2
 800066c:	eb69 020e 	sbc.w	r2, r9, lr
 8000670:	3801      	subs	r0, #1
 8000672:	4613      	mov	r3, r2
 8000674:	e7a4      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000676:	4660      	mov	r0, ip
 8000678:	e7e9      	b.n	800064e <__udivmoddi4+0x27e>
 800067a:	4618      	mov	r0, r3
 800067c:	e795      	b.n	80005aa <__udivmoddi4+0x1da>
 800067e:	4667      	mov	r7, ip
 8000680:	e7d1      	b.n	8000626 <__udivmoddi4+0x256>
 8000682:	4681      	mov	r9, r0
 8000684:	e77c      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000686:	3802      	subs	r0, #2
 8000688:	442c      	add	r4, r5
 800068a:	e747      	b.n	800051c <__udivmoddi4+0x14c>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	442b      	add	r3, r5
 8000692:	e72f      	b.n	80004f4 <__udivmoddi4+0x124>
 8000694:	4638      	mov	r0, r7
 8000696:	e708      	b.n	80004aa <__udivmoddi4+0xda>
 8000698:	4637      	mov	r7, r6
 800069a:	e6e9      	b.n	8000470 <__udivmoddi4+0xa0>

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_DCMI_Init+0x64>)
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <MX_DCMI_Init+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_DCMI_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_DCMI_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_DCMI_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_DCMI_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_DCMI_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_DCMI_Init+0x64>)
 80006ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ce:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_DCMI_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_DCMI_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_DCMI_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_DCMI_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_DCMI_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_DCMI_Init+0x64>)
 80006f0:	f001 fb0c 	bl	8001d0c <HAL_DCMI_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 80006fa:	f000 fcff 	bl	80010fc <Error_Handler>
  }

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	24000a68 	.word	0x24000a68
 8000708:	48020000 	.word	0x48020000

0800070c <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a65      	ldr	r2, [pc, #404]	; (80008c0 <HAL_DCMI_MspInit+0x1b4>)
 800072a:	4293      	cmp	r3, r2
 800072c:	f040 80c3 	bne.w	80008b6 <HAL_DCMI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000730:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 8000732:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000736:	4a63      	ldr	r2, [pc, #396]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000740:	4b60      	ldr	r3, [pc, #384]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 8000742:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	4a5b      	ldr	r2, [pc, #364]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075e:	4b59      	ldr	r3, [pc, #356]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	f003 0310 	and.w	r3, r3, #16
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b55      	ldr	r3, [pc, #340]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000772:	4a54      	ldr	r2, [pc, #336]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077c:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	4a4c      	ldr	r2, [pc, #304]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079a:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a8:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	4a45      	ldr	r2, [pc, #276]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b8:	4b42      	ldr	r3, [pc, #264]	; (80008c4 <HAL_DCMI_MspInit+0x1b8>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
 80007c6:	2373      	movs	r3, #115	; 0x73
 80007c8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007d6:	230d      	movs	r3, #13
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4839      	ldr	r0, [pc, #228]	; (80008c8 <HAL_DCMI_MspInit+0x1bc>)
 80007e2:	f003 fb63 	bl	8003eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007e6:	2350      	movs	r3, #80	; 0x50
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f6:	230d      	movs	r3, #13
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4832      	ldr	r0, [pc, #200]	; (80008cc <HAL_DCMI_MspInit+0x1c0>)
 8000802:	f003 fb53 	bl	8003eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000806:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000818:	230d      	movs	r3, #13
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	482b      	ldr	r0, [pc, #172]	; (80008d0 <HAL_DCMI_MspInit+0x1c4>)
 8000824:	f003 fb42 	bl	8003eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000828:	23c0      	movs	r3, #192	; 0xc0
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000838:	230d      	movs	r3, #13
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4824      	ldr	r0, [pc, #144]	; (80008d4 <HAL_DCMI_MspInit+0x1c8>)
 8000844:	f003 fb32 	bl	8003eac <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 800084a:	4a24      	ldr	r2, [pc, #144]	; (80008dc <HAL_DCMI_MspInit+0x1d0>)
 800084c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 8000850:	224b      	movs	r2, #75	; 0x4b
 8000852:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 8000862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000866:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 800086a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800086e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800088a:	4813      	ldr	r0, [pc, #76]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 800088c:	f001 fc28 	bl	80020e0 <HAL_DMA_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_DCMI_MspInit+0x18e>
    {
      Error_Handler();
 8000896:	f000 fc31 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 800089e:	649a      	str	r2, [r3, #72]	; 0x48
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <HAL_DCMI_MspInit+0x1cc>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	204e      	movs	r0, #78	; 0x4e
 80008ac:	f001 f9c8 	bl	8001c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80008b0:	204e      	movs	r0, #78	; 0x4e
 80008b2:	f001 f9ef 	bl	8001c94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	3730      	adds	r7, #48	; 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	48020000 	.word	0x48020000
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58021000 	.word	0x58021000
 80008cc:	58020000 	.word	0x58020000
 80008d0:	58020800 	.word	0x58020800
 80008d4:	58020400 	.word	0x58020400
 80008d8:	240009f0 	.word	0x240009f0
 80008dc:	40020010 	.word	0x40020010

080008e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_DMA_Init+0x3c>)
 80008e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_DMA_Init+0x3c>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_DMA_Init+0x3c>)
 80008f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	200b      	movs	r0, #11
 800090a:	f001 f999 	bl	8001c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800090e:	200b      	movs	r0, #11
 8000910:	f001 f9c0 	bl	8001c94 <HAL_NVIC_EnableIRQ>

}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	58024400 	.word	0x58024400

08000920 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <MX_GPIO_Init+0x154>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	4a4d      	ldr	r2, [pc, #308]	; (8000a74 <MX_GPIO_Init+0x154>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000946:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <MX_GPIO_Init+0x154>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <MX_GPIO_Init+0x154>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	4a46      	ldr	r2, [pc, #280]	; (8000a74 <MX_GPIO_Init+0x154>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000964:	4b43      	ldr	r3, [pc, #268]	; (8000a74 <MX_GPIO_Init+0x154>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b40      	ldr	r3, [pc, #256]	; (8000a74 <MX_GPIO_Init+0x154>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	4a3e      	ldr	r2, [pc, #248]	; (8000a74 <MX_GPIO_Init+0x154>)
 800097a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000982:	4b3c      	ldr	r3, [pc, #240]	; (8000a74 <MX_GPIO_Init+0x154>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <MX_GPIO_Init+0x154>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	4a37      	ldr	r2, [pc, #220]	; (8000a74 <MX_GPIO_Init+0x154>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <MX_GPIO_Init+0x154>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <MX_GPIO_Init+0x154>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x154>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <MX_GPIO_Init+0x154>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_GPIO_Init+0x154>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x154>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_GPIO_Init+0x154>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
//  HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE7 PE8 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8 
 80009ea:	f64f 738c 	movw	r3, #65420	; 0xff8c
 80009ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	481e      	ldr	r0, [pc, #120]	; (8000a78 <MX_GPIO_Init+0x158>)
 8000a00:	f003 fa54 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC3 
                           PC4 PC5 PC8 PC9 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
 8000a04:	f64e 3338 	movw	r3, #60216	; 0xeb38
 8000a08:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4818      	ldr	r0, [pc, #96]	; (8000a7c <MX_GPIO_Init+0x15c>)
 8000a1a:	f003 fa47 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000a1e:	f649 738f 	movw	r3, #40847	; 0x9f8f
 8000a22:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a24:	2303      	movs	r3, #3
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_GPIO_Init+0x160>)
 8000a34:	f003 fa3a 	bl	8003eac <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(WIFI_CHIP_EN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000a38:	f640 433f 	movw	r3, #3135	; 0xc3f
 8000a3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_GPIO_Init+0x164>)
 8000a4e:	f003 fa2d 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000a52:	f64c 739f 	movw	r3, #53151	; 0xcf9f
 8000a56:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <MX_GPIO_Init+0x168>)
 8000a68:	f003 fa20 	bl	8003eac <HAL_GPIO_Init>
//
//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	58024400 	.word	0x58024400
 8000a78:	58021000 	.word	0x58021000
 8000a7c:	58020800 	.word	0x58020800
 8000a80:	58020000 	.word	0x58020000
 8000a84:	58020400 	.word	0x58020400
 8000a88:	58020c00 	.word	0x58020c00

08000a8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <MX_I2C1_Init+0x78>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x7c>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ac8:	f003 fd14 	bl	80044f4 <HAL_I2C_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ad2:	f000 fb13 	bl	80010fc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ada:	f003 fe2d 	bl	8004738 <HAL_I2CEx_ConfigAnalogFilter>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ae4:	f000 fb0a 	bl	80010fc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000aec:	f003 fe9a 	bl	8004824 <HAL_I2CEx_ConfigDigitalFilter>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000af6:	f000 fb01 	bl	80010fc <Error_Handler>
  }

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	24000ab8 	.word	0x24000ab8
 8000b04:	40005400 	.word	0x40005400
 8000b08:	10707dbc 	.word	0x10707dbc

08000b0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12e      	bne.n	8000b8c <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_I2C_MspInit+0x8c>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <HAL_I2C_MspInit+0x8c>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_I2C_MspInit+0x8c>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_I2C_MspInit+0x90>)
 8000b6a:	f003 f99f 	bl	8003eac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_I2C_MspInit+0x8c>)
 8000b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b74:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x8c>)
 8000b76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_I2C_MspInit+0x8c>)
 8000b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	58020400 	.word	0x58020400

08000ba0 <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  hjpeg.Instance = JPEG;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_JPEG_Init+0x20>)
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <MX_JPEG_Init+0x24>)
 8000ba8:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_JPEG_Init+0x20>)
 8000bac:	f003 feae 	bl	800490c <HAL_JPEG_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000bb6:	f000 faa1 	bl	80010fc <Error_Handler>
  }

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	24000b04 	.word	0x24000b04
 8000bc4:	52003000 	.word	0x52003000

08000bc8 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_JPEG_MspInit+0x3c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d10e      	bne.n	8000bf8 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_JPEG_MspInit+0x40>)
 8000bdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000be0:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <HAL_JPEG_MspInit+0x40>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_JPEG_MspInit+0x40>)
 8000bec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	52003000 	.word	0x52003000
 8000c08:	58024400 	.word	0x58024400

08000c0c <LED_Init>:

/* ================
void LED_Init(void)
================ */
void LED_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000c20:	2307      	movs	r3, #7
 8000c22:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <LED_Init+0x3c>)
 8000c36:	f003 f939 	bl	8003eac <HAL_GPIO_Init>

	LED_SetState(eLedStates_all_off);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f806 	bl	8000c4c <LED_SetState>
}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58020800 	.word	0x58020800

08000c4c <LED_SetState>:

/* ================
void LED_SetState( eLedStates a_eLedStates)
================ */
void LED_SetState( eLedStates a_eLedStates)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	switch (a_eLedStates) {
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	f200 8093 	bhi.w	8000d84 <LED_SetState+0x138>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <LED_SetState+0x18>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c85 	.word	0x08000c85
 8000c68:	08000ca5 	.word	0x08000ca5
 8000c6c:	08000cc5 	.word	0x08000cc5
 8000c70:	08000d05 	.word	0x08000d05
 8000c74:	08000ce5 	.word	0x08000ce5
 8000c78:	08000d25 	.word	0x08000d25
 8000c7c:	08000d45 	.word	0x08000d45
 8000c80:	08000d65 	.word	0x08000d65
		case eLedStates_all_off:
		{
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2101      	movs	r1, #1
 8000c88:	4848      	ldr	r0, [pc, #288]	; (8000dac <LED_SetState+0x160>)
 8000c8a:	f003 fbe7 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2102      	movs	r1, #2
 8000c92:	4846      	ldr	r0, [pc, #280]	; (8000dac <LED_SetState+0x160>)
 8000c94:	f003 fbe2 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	4843      	ldr	r0, [pc, #268]	; (8000dac <LED_SetState+0x160>)
 8000c9e:	f003 fbdd 	bl	800445c <HAL_GPIO_WritePin>
		}
			break;
 8000ca2:	e07f      	b.n	8000da4 <LED_SetState+0x158>
		case eLedStates_red:
		{
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4840      	ldr	r0, [pc, #256]	; (8000dac <LED_SetState+0x160>)
 8000caa:	f003 fbd7 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	483e      	ldr	r0, [pc, #248]	; (8000dac <LED_SetState+0x160>)
 8000cb4:	f003 fbd2 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2104      	movs	r1, #4
 8000cbc:	483b      	ldr	r0, [pc, #236]	; (8000dac <LED_SetState+0x160>)
 8000cbe:	f003 fbcd 	bl	800445c <HAL_GPIO_WritePin>
		}
			break;
 8000cc2:	e06f      	b.n	8000da4 <LED_SetState+0x158>
		case eLedStates_green:
		{
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4838      	ldr	r0, [pc, #224]	; (8000dac <LED_SetState+0x160>)
 8000cca:	f003 fbc7 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4836      	ldr	r0, [pc, #216]	; (8000dac <LED_SetState+0x160>)
 8000cd4:	f003 fbc2 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2104      	movs	r1, #4
 8000cdc:	4833      	ldr	r0, [pc, #204]	; (8000dac <LED_SetState+0x160>)
 8000cde:	f003 fbbd 	bl	800445c <HAL_GPIO_WritePin>
		}
			break;
 8000ce2:	e05f      	b.n	8000da4 <LED_SetState+0x158>
		case eLedStates_blue:
		{
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4830      	ldr	r0, [pc, #192]	; (8000dac <LED_SetState+0x160>)
 8000cea:	f003 fbb7 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	482e      	ldr	r0, [pc, #184]	; (8000dac <LED_SetState+0x160>)
 8000cf4:	f003 fbb2 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	482b      	ldr	r0, [pc, #172]	; (8000dac <LED_SetState+0x160>)
 8000cfe:	f003 fbad 	bl	800445c <HAL_GPIO_WritePin>
		}
			break;
 8000d02:	e04f      	b.n	8000da4 <LED_SetState+0x158>
		case eLedStates_red_green:
		{
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	4828      	ldr	r0, [pc, #160]	; (8000dac <LED_SetState+0x160>)
 8000d0a:	f003 fba7 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2102      	movs	r1, #2
 8000d12:	4826      	ldr	r0, [pc, #152]	; (8000dac <LED_SetState+0x160>)
 8000d14:	f003 fba2 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	4823      	ldr	r0, [pc, #140]	; (8000dac <LED_SetState+0x160>)
 8000d1e:	f003 fb9d 	bl	800445c <HAL_GPIO_WritePin>
		}
			break;
 8000d22:	e03f      	b.n	8000da4 <LED_SetState+0x158>
		case eLedStates_red_blue:
		{
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	4820      	ldr	r0, [pc, #128]	; (8000dac <LED_SetState+0x160>)
 8000d2a:	f003 fb97 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2102      	movs	r1, #2
 8000d32:	481e      	ldr	r0, [pc, #120]	; (8000dac <LED_SetState+0x160>)
 8000d34:	f003 fb92 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	481b      	ldr	r0, [pc, #108]	; (8000dac <LED_SetState+0x160>)
 8000d3e:	f003 fb8d 	bl	800445c <HAL_GPIO_WritePin>
		}
			break;
 8000d42:	e02f      	b.n	8000da4 <LED_SetState+0x158>
		case eLedStates_blue_green:
		{
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2101      	movs	r1, #1
 8000d48:	4818      	ldr	r0, [pc, #96]	; (8000dac <LED_SetState+0x160>)
 8000d4a:	f003 fb87 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	4816      	ldr	r0, [pc, #88]	; (8000dac <LED_SetState+0x160>)
 8000d54:	f003 fb82 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <LED_SetState+0x160>)
 8000d5e:	f003 fb7d 	bl	800445c <HAL_GPIO_WritePin>
		}
			break;
 8000d62:	e01f      	b.n	8000da4 <LED_SetState+0x158>
		case eLedStates_all_on:
		{
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	4810      	ldr	r0, [pc, #64]	; (8000dac <LED_SetState+0x160>)
 8000d6a:	f003 fb77 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <LED_SetState+0x160>)
 8000d74:	f003 fb72 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LED_SetState+0x160>)
 8000d7e:	f003 fb6d 	bl	800445c <HAL_GPIO_WritePin>
		}
			break;
 8000d82:	e00f      	b.n	8000da4 <LED_SetState+0x158>
		default: // all off
			HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2101      	movs	r1, #1
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <LED_SetState+0x160>)
 8000d8a:	f003 fb67 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2102      	movs	r1, #2
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <LED_SetState+0x160>)
 8000d94:	f003 fb62 	bl	800445c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LED_SetState+0x160>)
 8000d9e:	f003 fb5d 	bl	800445c <HAL_GPIO_WritePin>
			break;
 8000da2:	bf00      	nop
	}
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58020800 	.word	0x58020800

08000db0 <LED_GetState>:

/* ================
eLedStates LED_GetState(void)
================ */
eLedStates LED_GetState(void)
{
 8000db0:	b598      	push	{r3, r4, r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	return (eLedStates)(RGB_TO_ENUM(HAL_GPIO_ReadPin(GPIOC, LED_R_Pin),\
 8000db4:	2101      	movs	r1, #1
 8000db6:	4812      	ldr	r0, [pc, #72]	; (8000e00 <LED_GetState+0x50>)
 8000db8:	f003 fb28 	bl	800440c <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	461c      	mov	r4, r3
 8000dca:	2102      	movs	r1, #2
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <LED_GetState+0x50>)
 8000dce:	f003 fb1d 	bl	800440c <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <LED_GetState+0x2c>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e000      	b.n	8000dde <LED_GetState+0x2e>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	4423      	add	r3, r4
 8000de0:	b2dc      	uxtb	r4, r3
 8000de2:	2104      	movs	r1, #4
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <LED_GetState+0x50>)
 8000de6:	f003 fb11 	bl	800440c <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <LED_GetState+0x44>
 8000df0:	2304      	movs	r3, #4
 8000df2:	e000      	b.n	8000df6 <LED_GetState+0x46>
 8000df4:	2300      	movs	r3, #0
 8000df6:	4423      	add	r3, r4
 8000df8:	b2db      	uxtb	r3, r3
									HAL_GPIO_ReadPin(GPIOC, LED_G_Pin),\
									HAL_GPIO_ReadPin(GPIOC, LED_B_Pin)));
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd98      	pop	{r3, r4, r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	58020800 	.word	0x58020800

08000e04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d013      	beq.n	8000e44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00b      	beq.n	8000e44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e2c:	e000      	b.n	8000e30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f9      	beq.n	8000e2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_write>:
 extern "C" {
#endif
#include <stdio.h>

 int _write(int file, char *ptr, int len)
 {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
   /* Implement your write code here, this is used by puts and printf for example */
   int i=0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
   for(i=0 ; i<len ; i++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e009      	b.n	8000e7c <_write+0x2a>
     ITM_SendChar((*ptr++));
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	60ba      	str	r2, [r7, #8]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffc7 	bl	8000e04 <ITM_SendChar>
   for(i=0 ; i<len ; i++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf1      	blt.n	8000e68 <_write+0x16>
   return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
 }
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
	HAL_Init();
 8000e92:	f000 fd07 	bl	80018a4 <HAL_Init>
	SystemClock_Config();
 8000e96:	f000 f813 	bl	8000ec0 <SystemClock_Config>

	/* Initialize the BSP. */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e9a:	f7ff fd41 	bl	8000920 <MX_GPIO_Init>
	MX_DCMI_Init();
 8000e9e:	f7ff fbff 	bl	80006a0 <MX_DCMI_Init>
	MX_I2C1_Init();
 8000ea2:	f7ff fdf3 	bl	8000a8c <MX_I2C1_Init>
	MX_JPEG_Init();
 8000ea6:	f7ff fe7b 	bl	8000ba0 <MX_JPEG_Init>
	MX_USART2_UART_Init();
 8000eaa:	f000 fa91 	bl	80013d0 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000eae:	f7ff fd17 	bl	80008e0 <MX_DMA_Init>
	LED_Init();
 8000eb2:	f7ff feab 	bl	8000c0c <LED_Init>

	WifiMngr_Init();
 8000eb6:	f000 fb21 	bl	80014fc <WifiMngr_Init>

	while (true)
	{
		WifiMngr_HandleEvents();
 8000eba:	f000 fb8f 	bl	80015dc <WifiMngr_HandleEvents>
 8000ebe:	e7fc      	b.n	8000eba <main+0x2c>

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0ce      	sub	sp, #312	; 0x138
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000eca:	224c      	movs	r2, #76	; 0x4c
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f00e fdb8 	bl	800fa44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed8:	2220      	movs	r2, #32
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00e fdb1 	bl	800fa44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	23bc      	movs	r3, #188	; 0xbc
 8000eea:	461a      	mov	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	f00e fda9 	bl	800fa44 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f004 face 	bl	8005494 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	4b68      	ldr	r3, [pc, #416]	; (80010a4 <SystemClock_Config+0x1e4>)
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	4a67      	ldr	r2, [pc, #412]	; (80010a4 <SystemClock_Config+0x1e4>)
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f0c:	4b65      	ldr	r3, [pc, #404]	; (80010a4 <SystemClock_Config+0x1e4>)
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	f003 0201 	and.w	r2, r3, #1
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <SystemClock_Config+0x1e8>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f22:	4a61      	ldr	r2, [pc, #388]	; (80010a8 <SystemClock_Config+0x1e8>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b5f      	ldr	r3, [pc, #380]	; (80010a8 <SystemClock_Config+0x1e8>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f3e:	bf00      	nop
 8000f40:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <SystemClock_Config+0x1e8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f4c:	d1f8      	bne.n	8000f40 <SystemClock_Config+0x80>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f60:	2302      	movs	r3, #2
 8000f62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLM = 32;//4;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLN = 129;//12;
 8000f72:	2381      	movs	r3, #129	; 0x81
 8000f74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLQ = 2;//4;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;//RCC_PLL1VCIRANGE_3;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 fabb 	bl	800551c <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000fac:	f000 f8a6 	bl	80010fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	233f      	movs	r3, #63	; 0x3f
 8000fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 ff78 	bl	8005edc <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000ff2:	f000 f883 	bl	80010fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SPI2
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	f241 020a 	movw	r2, #4106	; 0x100a
 8000ffe:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2200      	movs	r2, #0
 8001006:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	2200      	movs	r2, #0
 8001016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fc74 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x16e>
  {
    Error_Handler();
 800102a:	f000 f867 	bl	80010fc <Error_Handler>
  }
	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <SystemClock_Config+0x1ec>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <SystemClock_Config+0x1ec>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <SystemClock_Config+0x1ec>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	f003 0204 	and.w	r2, r3, #4
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	681b      	ldr	r3, [r3, #0]
	__GPIOA_CLK_ENABLE();
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <SystemClock_Config+0x1ec>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <SystemClock_Config+0x1ec>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <SystemClock_Config+0x1ec>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	681b      	ldr	r3, [r3, #0]
	__GPIOB_CLK_ENABLE();
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <SystemClock_Config+0x1ec>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <SystemClock_Config+0x1ec>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <SystemClock_Config+0x1ec>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0202 	and.w	r2, r3, #2
 8001090:	463b      	mov	r3, r7
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	463b      	mov	r3, r7
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	58000400 	.word	0x58000400
 80010a8:	58024800 	.word	0x58024800
 80010ac:	58024400 	.word	0x58024400

080010b0 <EXTI15_10_IRQHandler>:

///* USER CODE BEGIN 4 */
void EXTI15_10_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <EXTI15_10_IRQHandler+0x28>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <EXTI15_10_IRQHandler+0x18>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 80010c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c6:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 f9fa 	bl	80044c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58000080 	.word	0x58000080

080010dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CONF_WINC_SPI_INT_PIN)
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_EXTI_Callback+0x16>
    {
        isr();
 80010ee:	f00b fae9 	bl	800c6c4 <isr>
    }
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  printf("\r\n***Error_handler***\r\n");
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <Error_Handler+0x28>)
 8001102:	f00e fd2f 	bl	800fb64 <puts>
  while (true)
  {
	  HAL_Delay(500);
 8001106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800110a:	f000 fc59 	bl	80019c0 <HAL_Delay>
	  LED_SetState(eLedStates_red);
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff fd9c 	bl	8000c4c <LED_SetState>
	  HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f000 fc52 	bl	80019c0 <HAL_Delay>
	  LED_SetState(eLedStates_all_off);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fd95 	bl	8000c4c <LED_SetState>
	  HAL_Delay(500);
 8001122:	e7f0      	b.n	8001106 <Error_Handler+0xa>
 8001124:	08010990 	.word	0x08010990

08001128 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
  while (true)
 8001132:	e7fe      	b.n	8001132 <assert_failed+0xa>

08001134 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	if(hspi->Instance==SPI_WIFI)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_SPI_MspInit+0x20>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d102      	bne.n	800114c <HAL_SPI_MspInit+0x18>
	{
	    nm_bus_wifi_spi_init(hspi);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f00b f9ac 	bl	800c4a4 <nm_bus_wifi_spi_init>
//    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//
//  /* USER CODE BEGIN SPI2_MspInit 1 */
//
//  /* USER CODE END SPI2_MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40003800 	.word	0x40003800

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_MspInit+0x30>)
 8001160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x30>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x30>)
 8001170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	58024400 	.word	0x58024400

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 fbce 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DMA1_Stream0_IRQHandler+0x10>)
 80011ee:	f001 fcf7 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	240009f0 	.word	0x240009f0

080011fc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <DCMI_IRQHandler+0x10>)
 8001202:	f000 fea5 	bl	8001f50 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	24000a68 	.word	0x24000a68

08001210 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e00a      	b.n	8001238 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001222:	f3af 8000 	nop.w
 8001226:	4601      	mov	r1, r0
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	b2ca      	uxtb	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	dbf0      	blt.n	8001222 <_read+0x12>
	}

return len;
 8001240:	687b      	ldr	r3, [r7, #4]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_close>:
	}
	return len;
}

int _close(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	return -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001272:	605a      	str	r2, [r3, #4]
	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_isatty>:

int _isatty(int file)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	return 1;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x50>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x16>
		heap_end = &end;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <_sbrk+0x50>)
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <_sbrk+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <_sbrk+0x50>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <_sbrk+0x50>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	466a      	mov	r2, sp
 80012da:	4293      	cmp	r3, r2
 80012dc:	d907      	bls.n	80012ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012de:	f00e fb87 	bl	800f9f0 <__errno>
 80012e2:	4602      	mov	r2, r0
 80012e4:	230c      	movs	r3, #12
 80012e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	e006      	b.n	80012fc <_sbrk+0x48>
	}

	heap_end += incr;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <_sbrk+0x50>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a03      	ldr	r2, [pc, #12]	; (8001304 <_sbrk+0x50>)
 80012f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240004a0 	.word	0x240004a0
 8001308:	24000df8 	.word	0x24000df8

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <SystemInit+0xac>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <SystemInit+0xac>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <SystemInit+0xb0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <SystemInit+0xb0>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <SystemInit+0xb0>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <SystemInit+0xb0>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4921      	ldr	r1, [pc, #132]	; (80013bc <SystemInit+0xb0>)
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <SystemInit+0xb4>)
 800133a:	4013      	ands	r3, r2
 800133c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <SystemInit+0xb0>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <SystemInit+0xb0>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <SystemInit+0xb0>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <SystemInit+0xb0>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <SystemInit+0xb0>)
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <SystemInit+0xb0>)
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <SystemInit+0xb0>)
 8001364:	2200      	movs	r2, #0
 8001366:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <SystemInit+0xb0>)
 800136a:	2200      	movs	r2, #0
 800136c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <SystemInit+0xb0>)
 8001370:	2200      	movs	r2, #0
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <SystemInit+0xb0>)
 8001376:	2200      	movs	r2, #0
 8001378:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <SystemInit+0xb0>)
 800137c:	2200      	movs	r2, #0
 800137e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <SystemInit+0xb0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <SystemInit+0xb0>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <SystemInit+0xb0>)
 800138e:	2200      	movs	r2, #0
 8001390:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <SystemInit+0xb8>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <SystemInit+0xbc>)
 8001398:	4013      	ands	r3, r2
 800139a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800139e:	d202      	bcs.n	80013a6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SystemInit+0xc0>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SystemInit+0xac>)
 80013a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	58024400 	.word	0x58024400
 80013c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013c4:	5c001000 	.word	0x5c001000
 80013c8:	ffff0000 	.word	0xffff0000
 80013cc:	51008108 	.word	0x51008108

080013d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <MX_USART2_UART_Init+0x94>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_USART2_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_USART2_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_USART2_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001418:	4811      	ldr	r0, [pc, #68]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800141a:	f007 ffad 	bl	8009378 <HAL_UART_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001424:	f7ff fe6a 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800142c:	f00a fd86 	bl	800bf3c <HAL_UARTEx_SetTxFifoThreshold>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001436:	f7ff fe61 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143a:	2100      	movs	r1, #0
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800143e:	f00a fe17 	bl	800c070 <HAL_UARTEx_SetRxFifoThreshold>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001448:	f7ff fe58 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800144e:	f00a fcff 	bl	800be50 <HAL_UARTEx_DisableFifoMode>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001458:	f7ff fe50 	bl	80010fc <Error_Handler>
  }

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	24000b5c 	.word	0x24000b5c
 8001464:	40004400 	.word	0x40004400

08001468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <HAL_UART_MspInit+0x88>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d12d      	bne.n	80014e6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 800148c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 8001492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 800149c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014c6:	2360      	movs	r3, #96	; 0x60
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d6:	2307      	movs	r3, #7
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_UART_MspInit+0x90>)
 80014e2:	f002 fce3 	bl	8003eac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40004400 	.word	0x40004400
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58020c00 	.word	0x58020c00

080014fc <WifiMngr_Init>:

/* ================
int8_t WifiMngr_Init(void)
================ */
int8_t WifiMngr_Init(void)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	nm_bsp_init();
 8001502:	f00a fee5 	bl	800c2d0 <nm_bsp_init>

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2218      	movs	r2, #24
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f00e fa99 	bl	800fa44 <memset>

	/* ===== MAX PA GAIN ====== */ // SO: see if it changes something... ?
	m2m_wifi_set_tx_power(TX_PWR_HIGH);
 8001512:	2001      	movs	r0, #1
 8001514:	f00c f8f3 	bl	800d6fe <m2m_wifi_set_tx_power>

	/* =================  Initialize Wi-Fi driver with data and status callbacks. ================= */
	//param.pfAppWifiCb = wifi_cb;
	param.pfAppWifiCb = (tpfAppWifiCb)wifi_cb;
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <WifiMngr_Init+0xc8>)
 800151a:	607b      	str	r3, [r7, #4]
	ret = m2m_wifi_init(&param);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4618      	mov	r0, r3
 8001520:	f00c f836 	bl	800d590 <m2m_wifi_init>
 8001524:	4603      	mov	r3, r0
 8001526:	77fb      	strb	r3, [r7, #31]
	if (M2M_SUCCESS != ret)
 8001528:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <WifiMngr_Init+0x38>
	{
		Error_Handler();
 8001530:	f7ff fde4 	bl	80010fc <Error_Handler>
	}

	/* Initialize socket address structure. */
	g_stSockAdd.sin_family = AF_INET;
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <WifiMngr_Init+0xcc>)
 8001536:	2202      	movs	r2, #2
 8001538:	801a      	strh	r2, [r3, #0]
	g_stSockAdd.sin_port = _htons((MAIN_WIFI_M2M_SERVER_PORT));
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <WifiMngr_Init+0xcc>)
 800153c:	f640 221a 	movw	r2, #2586	; 0xa1a
 8001540:	805a      	strh	r2, [r3, #2]
	g_stSockAdd.sin_addr.s_addr = 0;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <WifiMngr_Init+0xcc>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
	/* Initialize Socket module */
	socketInit();
 8001548:	f00d fe7c 	bl	800f244 <socketInit>
	registerSocketCallback(socket_cb, NULL);
 800154c:	2100      	movs	r1, #0
 800154e:	481f      	ldr	r0, [pc, #124]	; (80015cc <WifiMngr_Init+0xd0>)
 8001550:	f00d fe98 	bl	800f284 <registerSocketCallback>

	/* Initialize AP mode parameters structure with SSID, channel and OPEN security type. */
	memset(&g_stAccPoint, 0x00, sizeof(tstrM2MAPConfig));
 8001554:	2288      	movs	r2, #136	; 0x88
 8001556:	2100      	movs	r1, #0
 8001558:	481d      	ldr	r0, [pc, #116]	; (80015d0 <WifiMngr_Init+0xd4>)
 800155a:	f00e fa73 	bl	800fa44 <memset>
	strcpy((char *)&g_stAccPoint.au8SSID, MAIN_WLAN_SSID);
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <WifiMngr_Init+0xd4>)
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <WifiMngr_Init+0xd8>)
 8001562:	4614      	mov	r4, r2
 8001564:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001566:	6020      	str	r0, [r4, #0]
 8001568:	6061      	str	r1, [r4, #4]
 800156a:	60a2      	str	r2, [r4, #8]
	g_stAccPoint.u8ListenChannel = MAIN_WLAN_CHANNEL;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <WifiMngr_Init+0xd4>)
 800156e:	2206      	movs	r2, #6
 8001570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	g_stAccPoint.u8SecType = MAIN_WLAN_AUTH;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <WifiMngr_Init+0xd4>)
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	g_stAccPoint.au8DHCPServerIP[0] = ATWINC_AP_IP_BYTE0;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <WifiMngr_Init+0xd4>)
 800157e:	22c0      	movs	r2, #192	; 0xc0
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	g_stAccPoint.au8DHCPServerIP[1] = ATWINC_AP_IP_BYTE1;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <WifiMngr_Init+0xd4>)
 8001586:	22a8      	movs	r2, #168	; 0xa8
 8001588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	g_stAccPoint.au8DHCPServerIP[2] = ATWINC_AP_IP_BYTE2;
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <WifiMngr_Init+0xd4>)
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	g_stAccPoint.au8DHCPServerIP[3] = ATWINC_AP_IP_BYTE3;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <WifiMngr_Init+0xd4>)
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	/* Bring up AP mode with parameters structure. */
	ret = m2m_wifi_enable_ap(&g_stAccPoint);
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <WifiMngr_Init+0xd4>)
 800159e:	f00c f88e 	bl	800d6be <m2m_wifi_enable_ap>
 80015a2:	4603      	mov	r3, r0
 80015a4:	77fb      	strb	r3, [r7, #31]
	if (M2M_SUCCESS != ret) {
 80015a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <WifiMngr_Init+0xbc>
		printf("main: m2m_wifi_enable_ap call error!\r\n");
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <WifiMngr_Init+0xdc>)
 80015b0:	f00e fad8 	bl	800fb64 <puts>
		Error_Handler();
 80015b4:	f7ff fda2 	bl	80010fc <Error_Handler>
	}
	return ret;
 80015b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3724      	adds	r7, #36	; 0x24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	08001665 	.word	0x08001665
 80015c8:	24000be8 	.word	0x24000be8
 80015cc:	080016a9 	.word	0x080016a9
 80015d0:	24000bf8 	.word	0x24000bf8
 80015d4:	080109a8 	.word	0x080109a8
 80015d8:	080109b4 	.word	0x080109b4

080015dc <WifiMngr_HandleEvents>:

/* ================
 void	WifiMngr_HandleEvents(void)
================ */
sint8	WifiMngr_HandleEvents(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
//	return m2m_wifi_handle_events(NULL);

	sint8 ret = m2m_wifi_handle_events(NULL);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f00c f858 	bl	800d698 <m2m_wifi_handle_events>
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]

	if (tcp_server_socket < 0) {
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <WifiMngr_HandleEvents+0x74>)
 80015ee:	f993 3000 	ldrsb.w	r3, [r3]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da19      	bge.n	800162a <WifiMngr_HandleEvents+0x4e>
		/* Open TCP server socket */
		if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
 80015f6:	2200      	movs	r2, #0
 80015f8:	2101      	movs	r1, #1
 80015fa:	2002      	movs	r0, #2
 80015fc:	f00d fe58 	bl	800f2b0 <socket>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <WifiMngr_HandleEvents+0x74>)
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <WifiMngr_HandleEvents+0x74>)
 800160a:	f993 3000 	ldrsb.w	r3, [r3]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da02      	bge.n	8001618 <WifiMngr_HandleEvents+0x3c>
//			printf("main: failed to create TCP server socket error!\r\n");
			return ret;
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	e017      	b.n	8001648 <WifiMngr_HandleEvents+0x6c>
		}

		/* Bind service*/
		bind(tcp_server_socket, (struct sockaddr *)&g_stSockAdd, sizeof(struct sockaddr_in));
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <WifiMngr_HandleEvents+0x74>)
 800161a:	f993 3000 	ldrsb.w	r3, [r3]
 800161e:	2210      	movs	r2, #16
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <WifiMngr_HandleEvents+0x78>)
 8001622:	4618      	mov	r0, r3
 8001624:	f00d ff02 	bl	800f42c <bind>
 8001628:	e00c      	b.n	8001644 <WifiMngr_HandleEvents+0x68>
	}
	else
	{
		if(g_IsSendPhaseBegin == true)
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <WifiMngr_HandleEvents+0x7c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <WifiMngr_HandleEvents+0x68>
		{
#ifdef CALC_TX_AVG_TIME
		WifiMngr_Calc();
#endif // CALC_TX_AVG_TIME
		send(tcp_client_socket, TstBuff, 1024, 0); // about 9-10 msec
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <WifiMngr_HandleEvents+0x80>)
 8001634:	f993 0000 	ldrsb.w	r0, [r3]
 8001638:	2300      	movs	r3, #0
 800163a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <WifiMngr_HandleEvents+0x84>)
 8001640:	f00d ffb8 	bl	800f5b4 <send>
		}
	}
	return ret;
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	24000410 	.word	0x24000410
 8001654:	24000be8 	.word	0x24000be8
 8001658:	240008a4 	.word	0x240008a4
 800165c:	24000411 	.word	0x24000411
 8001660:	24000010 	.word	0x24000010

08001664 <wifi_cb>:

/* ================
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
================ */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b2c      	cmp	r3, #44	; 0x2c
 8001674:	d002      	beq.n	800167c <wifi_cb+0x18>
 8001676:	2b32      	cmp	r3, #50	; 0x32
 8001678:	d00c      	beq.n	8001694 <wifi_cb+0x30>
//		uint8_t *pu8IPAddress = (uint8_t*)pvMsg;
	}
	break;

	default:
		break;
 800167a:	e010      	b.n	800169e <wifi_cb+0x3a>
		LED_SetState(eLedStates_red_green);
 800167c:	2003      	movs	r0, #3
 800167e:	f7ff fae5 	bl	8000c4c <LED_SetState>
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d106      	bne.n	800169c <wifi_cb+0x38>
			m2m_wifi_request_dhcp_client();
 800168e:	f00c f80e 	bl	800d6ae <m2m_wifi_request_dhcp_client>
	break;
 8001692:	e003      	b.n	800169c <wifi_cb+0x38>
		LED_SetState(eLedStates_all_on);
 8001694:	2007      	movs	r0, #7
 8001696:	f7ff fad9 	bl	8000c4c <LED_SetState>
	break;
 800169a:	e000      	b.n	800169e <wifi_cb+0x3a>
	break;
 800169c:	bf00      	nop
	}
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <socket_cb>:

/* ================
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
================ */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	603a      	str	r2, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	460b      	mov	r3, r1
 80016b6:	71bb      	strb	r3, [r7, #6]
	switch (u8Msg) {
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	2b06      	cmp	r3, #6
 80016be:	f200 80b3 	bhi.w	8001828 <socket_cb+0x180>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <socket_cb+0x20>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016e5 	.word	0x080016e5
 80016cc:	08001723 	.word	0x08001723
 80016d0:	08001829 	.word	0x08001829
 80016d4:	08001763 	.word	0x08001763
 80016d8:	08001829 	.word	0x08001829
 80016dc:	080017b5 	.word	0x080017b5
 80016e0:	08001811 	.word	0x08001811
	/* Socket bind */
	case SOCKET_MSG_BIND:
	{
		LED_SetState(eLedStates_red);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fab1 	bl	8000c4c <LED_SetState>
		tstrSocketBindMsg* pstrBind = (tstrSocketBindMsg*) pvMsg;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	60bb      	str	r3, [r7, #8]
		if (pstrBind && pstrBind->status == 0) {
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00c      	beq.n	800170e <socket_cb+0x66>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f993 3000 	ldrsb.w	r3, [r3]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <socket_cb+0x66>
			listen(tcp_server_socket, 0);
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <socket_cb+0x18c>)
 8001700:	f993 3000 	ldrsb.w	r3, [r3]
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f00d feee 	bl	800f4e8 <listen>
//			printf("socket_cb: bind error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
	break;
 800170c:	e08d      	b.n	800182a <socket_cb+0x182>
			close(tcp_server_socket);
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <socket_cb+0x18c>)
 8001710:	f993 3000 	ldrsb.w	r3, [r3]
 8001714:	4618      	mov	r0, r3
 8001716:	f00e f849 	bl	800f7ac <close>
			tcp_server_socket = -1;
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <socket_cb+0x18c>)
 800171c:	22ff      	movs	r2, #255	; 0xff
 800171e:	701a      	strb	r2, [r3, #0]
	break;
 8001720:	e083      	b.n	800182a <socket_cb+0x182>

	/* Socket listen */
	case SOCKET_MSG_LISTEN:
	{
		LED_SetState(eLedStates_green);
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff fa92 	bl	8000c4c <LED_SetState>
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	60fb      	str	r3, [r7, #12]
		if (pstrListen && pstrListen->status == 0) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00d      	beq.n	800174e <socket_cb+0xa6>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f993 3000 	ldrsb.w	r3, [r3]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d108      	bne.n	800174e <socket_cb+0xa6>
			accept(tcp_server_socket, NULL, NULL);
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <socket_cb+0x18c>)
 800173e:	f993 3000 	ldrsb.w	r3, [r3]
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f00d ff10 	bl	800f56c <accept>
		} else {
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
	break;
 800174c:	e06d      	b.n	800182a <socket_cb+0x182>
			close(tcp_server_socket);
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <socket_cb+0x18c>)
 8001750:	f993 3000 	ldrsb.w	r3, [r3]
 8001754:	4618      	mov	r0, r3
 8001756:	f00e f829 	bl	800f7ac <close>
			tcp_server_socket = -1;
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <socket_cb+0x18c>)
 800175c:	22ff      	movs	r2, #255	; 0xff
 800175e:	701a      	strb	r2, [r3, #0]
	break;
 8001760:	e063      	b.n	800182a <socket_cb+0x182>

	/* Connect accept */
	case SOCKET_MSG_ACCEPT:
	{
		LED_SetState(eLedStates_blue);
 8001762:	2004      	movs	r0, #4
 8001764:	f7ff fa72 	bl	8000c4c <LED_SetState>
		tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	613b      	str	r3, [r7, #16]
		if (pstrAccept) {
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d016      	beq.n	80017a0 <socket_cb+0xf8>
			accept(tcp_server_socket, NULL, NULL);
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <socket_cb+0x18c>)
 8001774:	f993 3000 	ldrsb.w	r3, [r3]
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f00d fef5 	bl	800f56c <accept>
			tcp_client_socket = pstrAccept->sock;
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f993 2000 	ldrsb.w	r2, [r3]
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <socket_cb+0x190>)
 800178a:	701a      	strb	r2, [r3, #0]
//			printf("socket_cb: Client socket is created.\r\n");
			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <socket_cb+0x190>)
 800178e:	f993 0000 	ldrsb.w	r0, [r3]
 8001792:	2300      	movs	r3, #0
 8001794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001798:	4928      	ldr	r1, [pc, #160]	; (800183c <socket_cb+0x194>)
 800179a:	f00d ff81 	bl	800f6a0 <recv>
//			printf("socket_cb: accept error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
	break;
 800179e:	e044      	b.n	800182a <socket_cb+0x182>
			close(tcp_server_socket);
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <socket_cb+0x18c>)
 80017a2:	f993 3000 	ldrsb.w	r3, [r3]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00e f800 	bl	800f7ac <close>
			tcp_server_socket = -1;
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <socket_cb+0x18c>)
 80017ae:	22ff      	movs	r2, #255	; 0xff
 80017b0:	701a      	strb	r2, [r3, #0]
	break;
 80017b2:	e03a      	b.n	800182a <socket_cb+0x182>

	/* Message receive */
	case SOCKET_MSG_RECV:
	{
		LED_SetState(eLedStates_red_green);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f7ff fa49 	bl	8000c4c <LED_SetState>

		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	617b      	str	r3, [r7, #20]
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d017      	beq.n	80017f4 <socket_cb+0x14c>
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	dd12      	ble.n	80017f4 <socket_cb+0x14c>
			if( strcmp(pstrRecv->pu8Buffer,g_Start_cmd) == 0)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	491b      	ldr	r1, [pc, #108]	; (8001840 <socket_cb+0x198>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fd83 	bl	80002e0 <strcmp>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d116      	bne.n	800180e <socket_cb+0x166>
			{
					send(tcp_client_socket, TstBuff, 1024, 0);
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <socket_cb+0x190>)
 80017e2:	f993 0000 	ldrsb.w	r0, [r3]
 80017e6:	2300      	movs	r3, #0
 80017e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ec:	4915      	ldr	r1, [pc, #84]	; (8001844 <socket_cb+0x19c>)
 80017ee:	f00d fee1 	bl	800f5b4 <send>
			if( strcmp(pstrRecv->pu8Buffer,g_Start_cmd) == 0)
 80017f2:	e00c      	b.n	800180e <socket_cb+0x166>
			}
		}
		else
		{
			printf("socket_cb: recv error!\r\n");
 80017f4:	4814      	ldr	r0, [pc, #80]	; (8001848 <socket_cb+0x1a0>)
 80017f6:	f00e f9b5 	bl	800fb64 <puts>
			close(tcp_server_socket);
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <socket_cb+0x18c>)
 80017fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001800:	4618      	mov	r0, r3
 8001802:	f00d ffd3 	bl	800f7ac <close>
			tcp_server_socket = -1;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <socket_cb+0x18c>)
 8001808:	22ff      	movs	r2, #255	; 0xff
 800180a:	701a      	strb	r2, [r3, #0]
		}
	}
	break;
 800180c:	e00d      	b.n	800182a <socket_cb+0x182>
 800180e:	e00c      	b.n	800182a <socket_cb+0x182>
	case SOCKET_MSG_SEND:
	{
		if( LED_GetState() != eLedStates_blue_green)
 8001810:	f7ff face 	bl	8000db0 <LED_GetState>
 8001814:	4603      	mov	r3, r0
 8001816:	2b06      	cmp	r3, #6
 8001818:	d002      	beq.n	8001820 <socket_cb+0x178>
		{
			LED_SetState(eLedStates_blue_green);
 800181a:	2006      	movs	r0, #6
 800181c:	f7ff fa16 	bl	8000c4c <LED_SetState>

		}

		g_IsSendPhaseBegin = true;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <socket_cb+0x1a4>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]
	}
	break;
 8001826:	e000      	b.n	800182a <socket_cb+0x182>
	default:
		break;
 8001828:	bf00      	nop
	}
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	24000410 	.word	0x24000410
 8001838:	24000411 	.word	0x24000411
 800183c:	240004a4 	.word	0x240004a4
 8001840:	24000008 	.word	0x24000008
 8001844:	24000010 	.word	0x24000010
 8001848:	080109dc 	.word	0x080109dc
 800184c:	240008a4 	.word	0x240008a4

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001854:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001856:	e003      	b.n	8001860 <LoopCopyDataInit>

08001858 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800185a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800185c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800185e:	3104      	adds	r1, #4

08001860 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001864:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001866:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001868:	d3f6      	bcc.n	8001858 <CopyDataInit>
  ldr  r2, =_sbss
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800186c:	e002      	b.n	8001874 <LoopFillZerobss>

0800186e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800186e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001870:	f842 3b04 	str.w	r3, [r2], #4

08001874 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001876:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001878:	d3f9      	bcc.n	800186e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800187a:	f7ff fd47 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f00e f8bd 	bl	800f9fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7ff fb04 	bl	8000e8e <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800188c:	080114b8 	.word	0x080114b8
  ldr  r0, =_sdata
 8001890:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001894:	24000484 	.word	0x24000484
  ldr  r2, =_sbss
 8001898:	24000484 	.word	0x24000484
  ldr  r3, = _ebss
 800189c:	24000df8 	.word	0x24000df8

080018a0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC3_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f9a9 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018ae:	f004 fe73 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 80018b2:	4601      	mov	r1, r0
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_Init+0x60>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_Init+0x64>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	fa21 f303 	lsr.w	r3, r1, r3
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_Init+0x68>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_Init+0x68>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_Init+0x60>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490b      	ldr	r1, [pc, #44]	; (8001908 <HAL_Init+0x64>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_Init+0x6c>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 f812 	bl	8001914 <HAL_InitTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e002      	b.n	8001900 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018fa:	f7ff fc2d 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	bd80      	pop	{r7, pc}
 8001904:	58024400 	.word	0x58024400
 8001908:	08011098 	.word	0x08011098
 800190c:	24000000 	.word	0x24000000
 8001910:	24000004 	.word	0x24000004

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_InitTick+0x60>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e021      	b.n	800196c <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_InitTick+0x64>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_InitTick+0x60>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f9d8 	bl	8001cf4 <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f000 f970 	bl	8001c40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x68>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	24000418 	.word	0x24000418
 8001978:	24000000 	.word	0x24000000
 800197c:	24000414 	.word	0x24000414

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	24000418 	.word	0x24000418
 80019a4:	24000c80 	.word	0x24000c80

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	24000c80 	.word	0x24000c80

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d005      	beq.n	80019e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_Delay+0x40>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e6:	bf00      	nop
 80019e8:	f7ff ffde 	bl	80019a8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d8f7      	bhi.n	80019e8 <HAL_Delay+0x28>
  {
  }
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24000418 	.word	0x24000418

08001a04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetREVID+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	5c001000 	.word	0x5c001000

08001a1c <__NVIC_SetPriorityGrouping>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <__NVIC_SetPriorityGrouping+0x40>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x40>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	05fa0000 	.word	0x05fa0000

08001a64 <__NVIC_GetPriorityGrouping>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_DisableIRQ>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db10      	blt.n	8001af0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4909      	ldr	r1, [pc, #36]	; (8001afc <__NVIC_DisableIRQ+0x40>)
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aec:	f3bf 8f6f 	isb	sy
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b07      	cmp	r3, #7
 8001c0c:	d00f      	beq.n	8001c2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d00c      	beq.n	8001c2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d009      	beq.n	8001c2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d006      	beq.n	8001c2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d003      	beq.n	8001c2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c26:	2192      	movs	r1, #146	; 0x92
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001c2a:	f7ff fa7d 	bl	8001128 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fef4 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	080109f4 	.word	0x080109f4

08001c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d903      	bls.n	8001c5c <HAL_NVIC_SetPriority+0x1c>
 8001c54:	21aa      	movs	r1, #170	; 0xaa
 8001c56:	480e      	ldr	r0, [pc, #56]	; (8001c90 <HAL_NVIC_SetPriority+0x50>)
 8001c58:	f7ff fa66 	bl	8001128 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	d903      	bls.n	8001c6a <HAL_NVIC_SetPriority+0x2a>
 8001c62:	21ab      	movs	r1, #171	; 0xab
 8001c64:	480a      	ldr	r0, [pc, #40]	; (8001c90 <HAL_NVIC_SetPriority+0x50>)
 8001c66:	f7ff fa5f 	bl	8001128 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6a:	f7ff fefb 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001c6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	6978      	ldr	r0, [r7, #20]
 8001c76:	f7ff ff6d 	bl	8001b54 <NVIC_EncodePriority>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff3c 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	080109f4 	.word	0x080109f4

08001c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da03      	bge.n	8001cae <HAL_NVIC_EnableIRQ+0x1a>
 8001ca6:	21be      	movs	r1, #190	; 0xbe
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <HAL_NVIC_EnableIRQ+0x2c>)
 8001caa:	f7ff fa3d 	bl	8001128 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fee4 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	080109f4 	.word	0x080109f4

08001cc4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da03      	bge.n	8001cde <HAL_NVIC_DisableIRQ+0x1a>
 8001cd6:	21ce      	movs	r1, #206	; 0xce
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_NVIC_DisableIRQ+0x2c>)
 8001cda:	f7ff fa25 	bl	8001128 <assert_failed>

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff feea 	bl	8001abc <__NVIC_DisableIRQ>
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	080109f4 	.word	0x080109f4

08001cf4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff5d 	bl	8001bbc <SysTick_Config>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e10e      	b.n	8001f3c <HAL_DCMI_Init+0x230>
  }

  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a88      	ldr	r2, [pc, #544]	; (8001f44 <HAL_DCMI_Init+0x238>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d003      	beq.n	8001d30 <HAL_DCMI_Init+0x24>
 8001d28:	21b6      	movs	r1, #182	; 0xb6
 8001d2a:	4887      	ldr	r0, [pc, #540]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001d2c:	f7ff f9fc 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_DCMI_Init+0x3c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d003      	beq.n	8001d48 <HAL_DCMI_Init+0x3c>
 8001d40:	21b7      	movs	r1, #183	; 0xb7
 8001d42:	4881      	ldr	r0, [pc, #516]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001d44:	f7ff f9f0 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_DCMI_Init+0x54>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b80      	cmp	r3, #128	; 0x80
 8001d56:	d003      	beq.n	8001d60 <HAL_DCMI_Init+0x54>
 8001d58:	21b8      	movs	r1, #184	; 0xb8
 8001d5a:	487b      	ldr	r0, [pc, #492]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001d5c:	f7ff f9e4 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_DCMI_Init+0x6c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d003      	beq.n	8001d78 <HAL_DCMI_Init+0x6c>
 8001d70:	21b9      	movs	r1, #185	; 0xb9
 8001d72:	4875      	ldr	r0, [pc, #468]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001d74:	f7ff f9d8 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_DCMI_Init+0x84>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d003      	beq.n	8001d90 <HAL_DCMI_Init+0x84>
 8001d88:	21ba      	movs	r1, #186	; 0xba
 8001d8a:	486f      	ldr	r0, [pc, #444]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001d8c:	f7ff f9cc 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00d      	beq.n	8001db4 <HAL_DCMI_Init+0xa8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da0:	d008      	beq.n	8001db4 <HAL_DCMI_Init+0xa8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001daa:	d003      	beq.n	8001db4 <HAL_DCMI_Init+0xa8>
 8001dac:	21bb      	movs	r1, #187	; 0xbb
 8001dae:	4866      	ldr	r0, [pc, #408]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001db0:	f7ff f9ba 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d012      	beq.n	8001de2 <HAL_DCMI_Init+0xd6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc4:	d00d      	beq.n	8001de2 <HAL_DCMI_Init+0xd6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dce:	d008      	beq.n	8001de2 <HAL_DCMI_Init+0xd6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001dd8:	d003      	beq.n	8001de2 <HAL_DCMI_Init+0xd6>
 8001dda:	21bc      	movs	r1, #188	; 0xbc
 8001ddc:	485a      	ldr	r0, [pc, #360]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001dde:	f7ff f9a3 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <HAL_DCMI_Init+0xee>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d003      	beq.n	8001dfa <HAL_DCMI_Init+0xee>
 8001df2:	21bd      	movs	r1, #189	; 0xbd
 8001df4:	4854      	ldr	r0, [pc, #336]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001df6:	f7ff f997 	bl	8001128 <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d012      	beq.n	8001e28 <HAL_DCMI_Init+0x11c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0a:	d00d      	beq.n	8001e28 <HAL_DCMI_Init+0x11c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e14:	d008      	beq.n	8001e28 <HAL_DCMI_Init+0x11c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e1e:	d003      	beq.n	8001e28 <HAL_DCMI_Init+0x11c>
 8001e20:	21bf      	movs	r1, #191	; 0xbf
 8001e22:	4849      	ldr	r0, [pc, #292]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001e24:	f7ff f980 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_DCMI_Init+0x136>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e38:	d003      	beq.n	8001e42 <HAL_DCMI_Init+0x136>
 8001e3a:	21c0      	movs	r1, #192	; 0xc0
 8001e3c:	4842      	ldr	r0, [pc, #264]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001e3e:	f7ff f973 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <HAL_DCMI_Init+0x150>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e52:	d003      	beq.n	8001e5c <HAL_DCMI_Init+0x150>
 8001e54:	21c1      	movs	r1, #193	; 0xc1
 8001e56:	483c      	ldr	r0, [pc, #240]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001e58:	f7ff f966 	bl	8001128 <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_DCMI_Init+0x16a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e6c:	d003      	beq.n	8001e76 <HAL_DCMI_Init+0x16a>
 8001e6e:	21c2      	movs	r1, #194	; 0xc2
 8001e70:	4835      	ldr	r0, [pc, #212]	; (8001f48 <HAL_DCMI_Init+0x23c>)
 8001e72:	f7ff f959 	bl	8001128 <assert_failed>
    /* Init the low level hardware */
    hdcmi->MspInitCallback(hdcmi);
  }

#else
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_DCMI_Init+0x17c>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fc42 	bl	800070c <HAL_DCMI_MspInit>
  }
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6819      	ldr	r1, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_DCMI_Init+0x240>)
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001eb4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001ec0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ecc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001ed8:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ee4:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d112      	bne.n	8001f1c <HAL_DCMI_Init+0x210>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7f1b      	ldrb	r3, [r3, #28]
 8001efa:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7f5b      	ldrb	r3, [r3, #29]
 8001f00:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001f02:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7f9b      	ldrb	r3, [r3, #30]
 8001f08:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7fdb      	ldrb	r3, [r3, #31]
 8001f12:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001f18:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001f1a:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 021e 	orr.w	r2, r2, #30
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	48020000 	.word	0x48020000
 8001f48:	08010a30 	.word	0x08010a30
 8001f4c:	ffe0f007 	.word	0xffe0f007

08001f50 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d016      	beq.n	8001f98 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f043 0202 	orr.w	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2204      	movs	r2, #4
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8a:	4a31      	ldr	r2, [pc, #196]	; (8002050 <HAL_DCMI_IRQHandler+0x100>)
 8001f8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fc8e 	bl	80028b4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2204      	movs	r2, #4
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <HAL_DCMI_IRQHandler+0x100>)
 8001fc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fc72 	bl	80028b4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2210      	movs	r2, #16
 8001fe0:	615a      	str	r2, [r3, #20]

    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f840 	bl	8002068 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	615a      	str	r2, [r3, #20]

    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f83e 	bl	800207c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01d      	beq.n	8002046 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b02      	cmp	r3, #2
 8002016:	d107      	bne.n	8002028 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 021e 	bic.w	r2, r2, #30
 8002026:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	615a      	str	r2, [r3, #20]

    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f825 	bl	8002090 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	080020a5 	.word	0x080020a5

08002054 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	60fb      	str	r3, [r7, #12]

  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d009      	beq.n	80020d0 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f7ff ffbf 	bl	8002054 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fc5e 	bl	80019a8 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e3d8      	b.n	80028aa <HAL_DMA_Init+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a96      	ldr	r2, [pc, #600]	; (8002358 <HAL_DMA_Init+0x278>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d076      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a95      	ldr	r2, [pc, #596]	; (800235c <HAL_DMA_Init+0x27c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d071      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a93      	ldr	r2, [pc, #588]	; (8002360 <HAL_DMA_Init+0x280>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d06c      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a92      	ldr	r2, [pc, #584]	; (8002364 <HAL_DMA_Init+0x284>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d067      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a90      	ldr	r2, [pc, #576]	; (8002368 <HAL_DMA_Init+0x288>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d062      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a8f      	ldr	r2, [pc, #572]	; (800236c <HAL_DMA_Init+0x28c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d05d      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a8d      	ldr	r2, [pc, #564]	; (8002370 <HAL_DMA_Init+0x290>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d058      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a8c      	ldr	r2, [pc, #560]	; (8002374 <HAL_DMA_Init+0x294>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d053      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a8a      	ldr	r2, [pc, #552]	; (8002378 <HAL_DMA_Init+0x298>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d04e      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a89      	ldr	r2, [pc, #548]	; (800237c <HAL_DMA_Init+0x29c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d049      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a87      	ldr	r2, [pc, #540]	; (8002380 <HAL_DMA_Init+0x2a0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d044      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a86      	ldr	r2, [pc, #536]	; (8002384 <HAL_DMA_Init+0x2a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d03f      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a84      	ldr	r2, [pc, #528]	; (8002388 <HAL_DMA_Init+0x2a8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d03a      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a83      	ldr	r2, [pc, #524]	; (800238c <HAL_DMA_Init+0x2ac>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d035      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a81      	ldr	r2, [pc, #516]	; (8002390 <HAL_DMA_Init+0x2b0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d030      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a80      	ldr	r2, [pc, #512]	; (8002394 <HAL_DMA_Init+0x2b4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d02b      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <HAL_DMA_Init+0x2b8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d026      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7d      	ldr	r2, [pc, #500]	; (800239c <HAL_DMA_Init+0x2bc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d021      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a7b      	ldr	r2, [pc, #492]	; (80023a0 <HAL_DMA_Init+0x2c0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01c      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7a      	ldr	r2, [pc, #488]	; (80023a4 <HAL_DMA_Init+0x2c4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d017      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a78      	ldr	r2, [pc, #480]	; (80023a8 <HAL_DMA_Init+0x2c8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d012      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a77      	ldr	r2, [pc, #476]	; (80023ac <HAL_DMA_Init+0x2cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00d      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a75      	ldr	r2, [pc, #468]	; (80023b0 <HAL_DMA_Init+0x2d0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a74      	ldr	r2, [pc, #464]	; (80023b4 <HAL_DMA_Init+0x2d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_Init+0x110>
 80021e8:	21d4      	movs	r1, #212	; 0xd4
 80021ea:	4873      	ldr	r0, [pc, #460]	; (80023b8 <HAL_DMA_Init+0x2d8>)
 80021ec:	f7fe ff9c 	bl	8001128 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00b      	beq.n	8002210 <HAL_DMA_Init+0x130>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d007      	beq.n	8002210 <HAL_DMA_Init+0x130>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b80      	cmp	r3, #128	; 0x80
 8002206:	d003      	beq.n	8002210 <HAL_DMA_Init+0x130>
 8002208:	21d5      	movs	r1, #213	; 0xd5
 800220a:	486b      	ldr	r0, [pc, #428]	; (80023b8 <HAL_DMA_Init+0x2d8>)
 800220c:	f7fe ff8c 	bl	8001128 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002218:	d007      	beq.n	800222a <HAL_DMA_Init+0x14a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_DMA_Init+0x14a>
 8002222:	21d6      	movs	r1, #214	; 0xd6
 8002224:	4864      	ldr	r0, [pc, #400]	; (80023b8 <HAL_DMA_Init+0x2d8>)
 8002226:	f7fe ff7f 	bl	8001128 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002232:	d007      	beq.n	8002244 <HAL_DMA_Init+0x164>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_DMA_Init+0x164>
 800223c:	21d7      	movs	r1, #215	; 0xd7
 800223e:	485e      	ldr	r0, [pc, #376]	; (80023b8 <HAL_DMA_Init+0x2d8>)
 8002240:	f7fe ff72 	bl	8001128 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_DMA_Init+0x188>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002254:	d008      	beq.n	8002268 <HAL_DMA_Init+0x188>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225e:	d003      	beq.n	8002268 <HAL_DMA_Init+0x188>
 8002260:	21d8      	movs	r1, #216	; 0xd8
 8002262:	4855      	ldr	r0, [pc, #340]	; (80023b8 <HAL_DMA_Init+0x2d8>)
 8002264:	f7fe ff60 	bl	8001128 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_DMA_Init+0x1ac>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002278:	d008      	beq.n	800228c <HAL_DMA_Init+0x1ac>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002282:	d003      	beq.n	800228c <HAL_DMA_Init+0x1ac>
 8002284:	21d9      	movs	r1, #217	; 0xd9
 8002286:	484c      	ldr	r0, [pc, #304]	; (80023b8 <HAL_DMA_Init+0x2d8>)
 8002288:	f7fe ff4e 	bl	8001128 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d016      	beq.n	80022c2 <HAL_DMA_Init+0x1e2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229c:	d011      	beq.n	80022c2 <HAL_DMA_Init+0x1e2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d00d      	beq.n	80022c2 <HAL_DMA_Init+0x1e2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022ae:	d008      	beq.n	80022c2 <HAL_DMA_Init+0x1e2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80022b8:	d003      	beq.n	80022c2 <HAL_DMA_Init+0x1e2>
 80022ba:	21da      	movs	r1, #218	; 0xda
 80022bc:	483e      	ldr	r0, [pc, #248]	; (80023b8 <HAL_DMA_Init+0x2d8>)
 80022be:	f7fe ff33 	bl	8001128 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <HAL_DMA_Init+0x210>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d2:	d00d      	beq.n	80022f0 <HAL_DMA_Init+0x210>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022dc:	d008      	beq.n	80022f0 <HAL_DMA_Init+0x210>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_Init+0x210>
 80022e8:	21db      	movs	r1, #219	; 0xdb
 80022ea:	4833      	ldr	r0, [pc, #204]	; (80023b8 <HAL_DMA_Init+0x2d8>)
 80022ec:	f7fe ff1c 	bl	8001128 <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_DMA_Init+0x278>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d07e      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_DMA_Init+0x27c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d079      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_DMA_Init+0x280>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d074      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_DMA_Init+0x284>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d06f      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <HAL_DMA_Init+0x288>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d06a      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_DMA_Init+0x28c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d065      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_DMA_Init+0x290>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d060      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_DMA_Init+0x294>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d05b      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0c      	ldr	r2, [pc, #48]	; (8002378 <HAL_DMA_Init+0x298>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d056      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_DMA_Init+0x29c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d051      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 8002354:	e032      	b.n	80023bc <HAL_DMA_Init+0x2dc>
 8002356:	bf00      	nop
 8002358:	40020010 	.word	0x40020010
 800235c:	40020028 	.word	0x40020028
 8002360:	40020040 	.word	0x40020040
 8002364:	40020058 	.word	0x40020058
 8002368:	40020070 	.word	0x40020070
 800236c:	40020088 	.word	0x40020088
 8002370:	400200a0 	.word	0x400200a0
 8002374:	400200b8 	.word	0x400200b8
 8002378:	40020410 	.word	0x40020410
 800237c:	40020428 	.word	0x40020428
 8002380:	40020440 	.word	0x40020440
 8002384:	40020458 	.word	0x40020458
 8002388:	40020470 	.word	0x40020470
 800238c:	40020488 	.word	0x40020488
 8002390:	400204a0 	.word	0x400204a0
 8002394:	400204b8 	.word	0x400204b8
 8002398:	58025408 	.word	0x58025408
 800239c:	5802541c 	.word	0x5802541c
 80023a0:	58025430 	.word	0x58025430
 80023a4:	58025444 	.word	0x58025444
 80023a8:	58025458 	.word	0x58025458
 80023ac:	5802546c 	.word	0x5802546c
 80023b0:	58025480 	.word	0x58025480
 80023b4:	58025494 	.word	0x58025494
 80023b8:	08010a6c 	.word	0x08010a6c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a7a      	ldr	r2, [pc, #488]	; (80025ac <HAL_DMA_Init+0x4cc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d018      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a79      	ldr	r2, [pc, #484]	; (80025b0 <HAL_DMA_Init+0x4d0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a77      	ldr	r2, [pc, #476]	; (80025b4 <HAL_DMA_Init+0x4d4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00e      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a76      	ldr	r2, [pc, #472]	; (80025b8 <HAL_DMA_Init+0x4d8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a74      	ldr	r2, [pc, #464]	; (80025bc <HAL_DMA_Init+0x4dc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_DMA_Init+0x318>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a73      	ldr	r2, [pc, #460]	; (80025c0 <HAL_DMA_Init+0x4e0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_DMA_Init+0x31c>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_DMA_Init+0x31e>
 80023fc:	2300      	movs	r3, #0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8167 	beq.w	80026d2 <HAL_DMA_Init+0x5f2>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b73      	cmp	r3, #115	; 0x73
 800240a:	d903      	bls.n	8002414 <HAL_DMA_Init+0x334>
 800240c:	21df      	movs	r1, #223	; 0xdf
 800240e:	486d      	ldr	r0, [pc, #436]	; (80025c4 <HAL_DMA_Init+0x4e4>)
 8002410:	f7fe fe8a 	bl	8001128 <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_DMA_Init+0x34c>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2b04      	cmp	r3, #4
 8002422:	d003      	beq.n	800242c <HAL_DMA_Init+0x34c>
 8002424:	21e0      	movs	r1, #224	; 0xe0
 8002426:	4867      	ldr	r0, [pc, #412]	; (80025c4 <HAL_DMA_Init+0x4e4>)
 8002428:	f7fe fe7e 	bl	8001128 <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b00      	cmp	r3, #0
 8002432:	d041      	beq.n	80024b8 <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00f      	beq.n	800245c <HAL_DMA_Init+0x37c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	2b01      	cmp	r3, #1
 8002442:	d00b      	beq.n	800245c <HAL_DMA_Init+0x37c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	2b02      	cmp	r3, #2
 800244a:	d007      	beq.n	800245c <HAL_DMA_Init+0x37c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	2b03      	cmp	r3, #3
 8002452:	d003      	beq.n	800245c <HAL_DMA_Init+0x37c>
 8002454:	21e5      	movs	r1, #229	; 0xe5
 8002456:	485b      	ldr	r0, [pc, #364]	; (80025c4 <HAL_DMA_Init+0x4e4>)
 8002458:	f7fe fe66 	bl	8001128 <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d012      	beq.n	800248a <HAL_DMA_Init+0x3aa>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800246c:	d00d      	beq.n	800248a <HAL_DMA_Init+0x3aa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002476:	d008      	beq.n	800248a <HAL_DMA_Init+0x3aa>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002480:	d003      	beq.n	800248a <HAL_DMA_Init+0x3aa>
 8002482:	21e6      	movs	r1, #230	; 0xe6
 8002484:	484f      	ldr	r0, [pc, #316]	; (80025c4 <HAL_DMA_Init+0x4e4>)
 8002486:	f7fe fe4f 	bl	8001128 <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	2b00      	cmp	r3, #0
 8002490:	d012      	beq.n	80024b8 <HAL_DMA_Init+0x3d8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800249a:	d00d      	beq.n	80024b8 <HAL_DMA_Init+0x3d8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a4:	d008      	beq.n	80024b8 <HAL_DMA_Init+0x3d8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_Init+0x3d8>
 80024b0:	21e7      	movs	r1, #231	; 0xe7
 80024b2:	4844      	ldr	r0, [pc, #272]	; (80025c4 <HAL_DMA_Init+0x4e4>)
 80024b4:	f7fe fe38 	bl	8001128 <assert_failed>
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a3e      	ldr	r2, [pc, #248]	; (80025c8 <HAL_DMA_Init+0x4e8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04a      	beq.n	8002568 <HAL_DMA_Init+0x488>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a3d      	ldr	r2, [pc, #244]	; (80025cc <HAL_DMA_Init+0x4ec>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d045      	beq.n	8002568 <HAL_DMA_Init+0x488>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <HAL_DMA_Init+0x4f0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d040      	beq.n	8002568 <HAL_DMA_Init+0x488>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <HAL_DMA_Init+0x4f4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d03b      	beq.n	8002568 <HAL_DMA_Init+0x488>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a38      	ldr	r2, [pc, #224]	; (80025d8 <HAL_DMA_Init+0x4f8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_DMA_Init+0x488>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a37      	ldr	r2, [pc, #220]	; (80025dc <HAL_DMA_Init+0x4fc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d031      	beq.n	8002568 <HAL_DMA_Init+0x488>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <HAL_DMA_Init+0x500>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02c      	beq.n	8002568 <HAL_DMA_Init+0x488>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a34      	ldr	r2, [pc, #208]	; (80025e4 <HAL_DMA_Init+0x504>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d027      	beq.n	8002568 <HAL_DMA_Init+0x488>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a32      	ldr	r2, [pc, #200]	; (80025e8 <HAL_DMA_Init+0x508>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d022      	beq.n	8002568 <HAL_DMA_Init+0x488>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a31      	ldr	r2, [pc, #196]	; (80025ec <HAL_DMA_Init+0x50c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d01d      	beq.n	8002568 <HAL_DMA_Init+0x488>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <HAL_DMA_Init+0x4cc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_DMA_Init+0x488>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_DMA_Init+0x4d0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_DMA_Init+0x488>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HAL_DMA_Init+0x4d4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_DMA_Init+0x488>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_DMA_Init+0x4d8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_DMA_Init+0x488>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a18      	ldr	r2, [pc, #96]	; (80025bc <HAL_DMA_Init+0x4dc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_DMA_Init+0x488>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_DMA_Init+0x4e0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d108      	bne.n	800257a <HAL_DMA_Init+0x49a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e007      	b.n	800258a <HAL_DMA_Init+0x4aa>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800258a:	e031      	b.n	80025f0 <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258c:	f7ff fa0c 	bl	80019a8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b05      	cmp	r3, #5
 8002598:	d92a      	bls.n	80025f0 <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2203      	movs	r2, #3
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e17e      	b.n	80028aa <HAL_DMA_Init+0x7ca>
 80025ac:	40020440 	.word	0x40020440
 80025b0:	40020458 	.word	0x40020458
 80025b4:	40020470 	.word	0x40020470
 80025b8:	40020488 	.word	0x40020488
 80025bc:	400204a0 	.word	0x400204a0
 80025c0:	400204b8 	.word	0x400204b8
 80025c4:	08010a6c 	.word	0x08010a6c
 80025c8:	40020010 	.word	0x40020010
 80025cc:	40020028 	.word	0x40020028
 80025d0:	40020040 	.word	0x40020040
 80025d4:	40020058 	.word	0x40020058
 80025d8:	40020070 	.word	0x40020070
 80025dc:	40020088 	.word	0x40020088
 80025e0:	400200a0 	.word	0x400200a0
 80025e4:	400200b8 	.word	0x400200b8
 80025e8:	40020410 	.word	0x40020410
 80025ec:	40020428 	.word	0x40020428
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1c6      	bne.n	800258c <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4b92      	ldr	r3, [pc, #584]	; (8002854 <HAL_DMA_Init+0x774>)
 800260a:	4013      	ands	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002616:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002622:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	2b04      	cmp	r3, #4
 8002642:	d107      	bne.n	8002654 <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4313      	orrs	r3, r2
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0307 	bic.w	r3, r3, #7
 800266a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	2b04      	cmp	r3, #4
 800267c:	d117      	bne.n	80026ae <HAL_DMA_Init+0x5ce>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <HAL_DMA_Init+0x5ce>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f001 fa81 	bl	8003b98 <DMA_CheckFifoParam>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_DMA_Init+0x5ce>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2240      	movs	r2, #64	; 0x40
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0fd      	b.n	80028aa <HAL_DMA_Init+0x7ca>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f001 f9bc 	bl	8003a34 <DMA_CalcBaseAndBitshift>
 80026bc:	4603      	mov	r3, r0
 80026be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	223f      	movs	r2, #63	; 0x3f
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	e095      	b.n	80027fe <HAL_DMA_Init+0x71e>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a60      	ldr	r2, [pc, #384]	; (8002858 <HAL_DMA_Init+0x778>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMA_Init+0x642>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a5e      	ldr	r2, [pc, #376]	; (800285c <HAL_DMA_Init+0x77c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_Init+0x642>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5d      	ldr	r2, [pc, #372]	; (8002860 <HAL_DMA_Init+0x780>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <HAL_DMA_Init+0x642>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_DMA_Init+0x784>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_DMA_Init+0x642>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5a      	ldr	r2, [pc, #360]	; (8002868 <HAL_DMA_Init+0x788>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <HAL_DMA_Init+0x642>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_DMA_Init+0x78c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_DMA_Init+0x642>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a57      	ldr	r2, [pc, #348]	; (8002870 <HAL_DMA_Init+0x790>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_DMA_Init+0x642>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a55      	ldr	r2, [pc, #340]	; (8002874 <HAL_DMA_Init+0x794>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_DMA_Init+0x646>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_DMA_Init+0x648>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05f      	beq.n	80027ec <HAL_DMA_Init+0x70c>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b11      	cmp	r3, #17
 8002732:	d904      	bls.n	800273e <HAL_DMA_Init+0x65e>
 8002734:	f240 1149 	movw	r1, #329	; 0x149
 8002738:	484f      	ldr	r0, [pc, #316]	; (8002878 <HAL_DMA_Init+0x798>)
 800273a:	f7fe fcf5 	bl	8001128 <assert_failed>

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4b48      	ldr	r3, [pc, #288]	; (800287c <HAL_DMA_Init+0x79c>)
 800275a:	4013      	ands	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d008      	beq.n	8002778 <HAL_DMA_Init+0x698>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b80      	cmp	r3, #128	; 0x80
 800276c:	d102      	bne.n	8002774 <HAL_DMA_Init+0x694>
 800276e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002772:	e002      	b.n	800277a <HAL_DMA_Init+0x69a>
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_DMA_Init+0x69a>
 8002778:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8002788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8002798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 80027a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 80027a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_DMA_Init+0x7a0>)
 80027c0:	4413      	add	r3, r2
 80027c2:	4a30      	ldr	r2, [pc, #192]	; (8002884 <HAL_DMA_Init+0x7a4>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	009a      	lsls	r2, r3, #2
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f001 f92f 	bl	8003a34 <DMA_CalcBaseAndBitshift>
 80027d6:	4603      	mov	r3, r0
 80027d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2201      	movs	r2, #1
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	e008      	b.n	80027fe <HAL_DMA_Init+0x71e>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2203      	movs	r2, #3
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e055      	b.n	80028aa <HAL_DMA_Init+0x7ca>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f001 fa46 	bl	8003c90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d102      	bne.n	8002812 <HAL_DMA_Init+0x732>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002826:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02b      	beq.n	8002888 <HAL_DMA_Init+0x7a8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d827      	bhi.n	8002888 <HAL_DMA_Init+0x7a8>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 fac3 	bl	8003dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	e023      	b.n	800289a <HAL_DMA_Init+0x7ba>
 8002852:	bf00      	nop
 8002854:	fe10803f 	.word	0xfe10803f
 8002858:	58025408 	.word	0x58025408
 800285c:	5802541c 	.word	0x5802541c
 8002860:	58025430 	.word	0x58025430
 8002864:	58025444 	.word	0x58025444
 8002868:	58025458 	.word	0x58025458
 800286c:	5802546c 	.word	0x5802546c
 8002870:	58025480 	.word	0x58025480
 8002874:	58025494 	.word	0x58025494
 8002878:	08010a6c 	.word	0x08010a6c
 800287c:	fffe000f 	.word	0xfffe000f
 8002880:	a7fdabf8 	.word	0xa7fdabf8
 8002884:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop

080028b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e188      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d004      	beq.n	80028dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e17d      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8c      	ldr	r2, [pc, #560]	; (8002b14 <HAL_DMA_Abort_IT+0x260>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04a      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a8b      	ldr	r2, [pc, #556]	; (8002b18 <HAL_DMA_Abort_IT+0x264>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d045      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a89      	ldr	r2, [pc, #548]	; (8002b1c <HAL_DMA_Abort_IT+0x268>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d040      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a88      	ldr	r2, [pc, #544]	; (8002b20 <HAL_DMA_Abort_IT+0x26c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d03b      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a86      	ldr	r2, [pc, #536]	; (8002b24 <HAL_DMA_Abort_IT+0x270>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d036      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a85      	ldr	r2, [pc, #532]	; (8002b28 <HAL_DMA_Abort_IT+0x274>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d031      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a83      	ldr	r2, [pc, #524]	; (8002b2c <HAL_DMA_Abort_IT+0x278>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02c      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a82      	ldr	r2, [pc, #520]	; (8002b30 <HAL_DMA_Abort_IT+0x27c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d027      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a80      	ldr	r2, [pc, #512]	; (8002b34 <HAL_DMA_Abort_IT+0x280>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d022      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a7f      	ldr	r2, [pc, #508]	; (8002b38 <HAL_DMA_Abort_IT+0x284>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d01d      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a7d      	ldr	r2, [pc, #500]	; (8002b3c <HAL_DMA_Abort_IT+0x288>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7c      	ldr	r2, [pc, #496]	; (8002b40 <HAL_DMA_Abort_IT+0x28c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a7a      	ldr	r2, [pc, #488]	; (8002b44 <HAL_DMA_Abort_IT+0x290>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a79      	ldr	r2, [pc, #484]	; (8002b48 <HAL_DMA_Abort_IT+0x294>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a77      	ldr	r2, [pc, #476]	; (8002b4c <HAL_DMA_Abort_IT+0x298>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a76      	ldr	r2, [pc, #472]	; (8002b50 <HAL_DMA_Abort_IT+0x29c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_DMA_Abort_IT+0xcc>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_DMA_Abort_IT+0xce>
 8002980:	2300      	movs	r3, #0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d065      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2204      	movs	r2, #4
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a60      	ldr	r2, [pc, #384]	; (8002b14 <HAL_DMA_Abort_IT+0x260>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04a      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_DMA_Abort_IT+0x264>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d045      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_DMA_Abort_IT+0x268>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5b      	ldr	r2, [pc, #364]	; (8002b20 <HAL_DMA_Abort_IT+0x26c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d03b      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <HAL_DMA_Abort_IT+0x270>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d036      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_DMA_Abort_IT+0x274>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d031      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a57      	ldr	r2, [pc, #348]	; (8002b2c <HAL_DMA_Abort_IT+0x278>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d02c      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a55      	ldr	r2, [pc, #340]	; (8002b30 <HAL_DMA_Abort_IT+0x27c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d027      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_DMA_Abort_IT+0x280>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a52      	ldr	r2, [pc, #328]	; (8002b38 <HAL_DMA_Abort_IT+0x284>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01d      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a51      	ldr	r2, [pc, #324]	; (8002b3c <HAL_DMA_Abort_IT+0x288>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a4f      	ldr	r2, [pc, #316]	; (8002b40 <HAL_DMA_Abort_IT+0x28c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a4e      	ldr	r2, [pc, #312]	; (8002b44 <HAL_DMA_Abort_IT+0x290>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <HAL_DMA_Abort_IT+0x294>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a4b      	ldr	r2, [pc, #300]	; (8002b4c <HAL_DMA_Abort_IT+0x298>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x17a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_DMA_Abort_IT+0x29c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <HAL_DMA_Abort_IT+0x18c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e0ca      	b.n	8002bd6 <HAL_DMA_Abort_IT+0x322>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e0c1      	b.n	8002bd6 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 020e 	bic.w	r2, r2, #14
 8002a60:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2b      	ldr	r2, [pc, #172]	; (8002b14 <HAL_DMA_Abort_IT+0x260>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d04a      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_DMA_Abort_IT+0x264>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d045      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <HAL_DMA_Abort_IT+0x268>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d040      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_DMA_Abort_IT+0x26c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d03b      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <HAL_DMA_Abort_IT+0x270>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d036      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <HAL_DMA_Abort_IT+0x274>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d031      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <HAL_DMA_Abort_IT+0x278>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d02c      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <HAL_DMA_Abort_IT+0x27c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d027      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <HAL_DMA_Abort_IT+0x280>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <HAL_DMA_Abort_IT+0x284>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01d      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <HAL_DMA_Abort_IT+0x288>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d018      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	; (8002b40 <HAL_DMA_Abort_IT+0x28c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <HAL_DMA_Abort_IT+0x290>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00e      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_DMA_Abort_IT+0x294>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_DMA_Abort_IT+0x298>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x24e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_DMA_Abort_IT+0x29c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d128      	bne.n	8002b54 <HAL_DMA_Abort_IT+0x2a0>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e027      	b.n	8002b64 <HAL_DMA_Abort_IT+0x2b0>
 8002b14:	40020010 	.word	0x40020010
 8002b18:	40020028 	.word	0x40020028
 8002b1c:	40020040 	.word	0x40020040
 8002b20:	40020058 	.word	0x40020058
 8002b24:	40020070 	.word	0x40020070
 8002b28:	40020088 	.word	0x40020088
 8002b2c:	400200a0 	.word	0x400200a0
 8002b30:	400200b8 	.word	0x400200b8
 8002b34:	40020410 	.word	0x40020410
 8002b38:	40020428 	.word	0x40020428
 8002b3c:	40020440 	.word	0x40020440
 8002b40:	40020458 	.word	0x40020458
 8002b44:	40020470 	.word	0x40020470
 8002b48:	40020488 	.word	0x40020488
 8002b4c:	400204a0 	.word	0x400204a0
 8002b50:	400204b8 	.word	0x400204b8
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2201      	movs	r2, #1
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b92:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00c      	beq.n	8002bb6 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002baa:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bb4:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bec:	4b67      	ldr	r3, [pc, #412]	; (8002d8c <HAL_DMA_IRQHandler+0x1ac>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a67      	ldr	r2, [pc, #412]	; (8002d90 <HAL_DMA_IRQHandler+0x1b0>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5f      	ldr	r2, [pc, #380]	; (8002d94 <HAL_DMA_IRQHandler+0x1b4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04a      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5d      	ldr	r2, [pc, #372]	; (8002d98 <HAL_DMA_IRQHandler+0x1b8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d045      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5c      	ldr	r2, [pc, #368]	; (8002d9c <HAL_DMA_IRQHandler+0x1bc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d040      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5a      	ldr	r2, [pc, #360]	; (8002da0 <HAL_DMA_IRQHandler+0x1c0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03b      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a59      	ldr	r2, [pc, #356]	; (8002da4 <HAL_DMA_IRQHandler+0x1c4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d036      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a57      	ldr	r2, [pc, #348]	; (8002da8 <HAL_DMA_IRQHandler+0x1c8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d031      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a56      	ldr	r2, [pc, #344]	; (8002dac <HAL_DMA_IRQHandler+0x1cc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d02c      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a54      	ldr	r2, [pc, #336]	; (8002db0 <HAL_DMA_IRQHandler+0x1d0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d027      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a53      	ldr	r2, [pc, #332]	; (8002db4 <HAL_DMA_IRQHandler+0x1d4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <HAL_DMA_IRQHandler+0x1d8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a50      	ldr	r2, [pc, #320]	; (8002dbc <HAL_DMA_IRQHandler+0x1dc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a4e      	ldr	r2, [pc, #312]	; (8002dc0 <HAL_DMA_IRQHandler+0x1e0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4d      	ldr	r2, [pc, #308]	; (8002dc4 <HAL_DMA_IRQHandler+0x1e4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a4b      	ldr	r2, [pc, #300]	; (8002dc8 <HAL_DMA_IRQHandler+0x1e8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_DMA_IRQHandler+0x1ec>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xd2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <HAL_DMA_IRQHandler+0x1f0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_DMA_IRQHandler+0xd6>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 842b 	beq.w	8003514 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80a2 	beq.w	8002e18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2e      	ldr	r2, [pc, #184]	; (8002d94 <HAL_DMA_IRQHandler+0x1b4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d04a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2d      	ldr	r2, [pc, #180]	; (8002d98 <HAL_DMA_IRQHandler+0x1b8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d045      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <HAL_DMA_IRQHandler+0x1bc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d040      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <HAL_DMA_IRQHandler+0x1c0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d03b      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <HAL_DMA_IRQHandler+0x1c4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d036      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <HAL_DMA_IRQHandler+0x1c8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a25      	ldr	r2, [pc, #148]	; (8002dac <HAL_DMA_IRQHandler+0x1cc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02c      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a24      	ldr	r2, [pc, #144]	; (8002db0 <HAL_DMA_IRQHandler+0x1d0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d027      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <HAL_DMA_IRQHandler+0x1d4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_DMA_IRQHandler+0x1d8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01d      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_DMA_IRQHandler+0x1dc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_DMA_IRQHandler+0x1e0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_DMA_IRQHandler+0x1e4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_DMA_IRQHandler+0x1e8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_DMA_IRQHandler+0x1ec>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x194>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d12f      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x1f4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	e02e      	b.n	8002de8 <HAL_DMA_IRQHandler+0x208>
 8002d8a:	bf00      	nop
 8002d8c:	24000000 	.word	0x24000000
 8002d90:	1b4e81b5 	.word	0x1b4e81b5
 8002d94:	40020010 	.word	0x40020010
 8002d98:	40020028 	.word	0x40020028
 8002d9c:	40020040 	.word	0x40020040
 8002da0:	40020058 	.word	0x40020058
 8002da4:	40020070 	.word	0x40020070
 8002da8:	40020088 	.word	0x40020088
 8002dac:	400200a0 	.word	0x400200a0
 8002db0:	400200b8 	.word	0x400200b8
 8002db4:	40020410 	.word	0x40020410
 8002db8:	40020428 	.word	0x40020428
 8002dbc:	40020440 	.word	0x40020440
 8002dc0:	40020458 	.word	0x40020458
 8002dc4:	40020470 	.word	0x40020470
 8002dc8:	40020488 	.word	0x40020488
 8002dcc:	400204a0 	.word	0x400204a0
 8002dd0:	400204b8 	.word	0x400204b8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2208      	movs	r2, #8
 8002e06:	409a      	lsls	r2, r3
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f043 0201 	orr.w	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d06e      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a69      	ldr	r2, [pc, #420]	; (8002fd8 <HAL_DMA_IRQHandler+0x3f8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04a      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a67      	ldr	r2, [pc, #412]	; (8002fdc <HAL_DMA_IRQHandler+0x3fc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d045      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a66      	ldr	r2, [pc, #408]	; (8002fe0 <HAL_DMA_IRQHandler+0x400>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d040      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a64      	ldr	r2, [pc, #400]	; (8002fe4 <HAL_DMA_IRQHandler+0x404>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03b      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a63      	ldr	r2, [pc, #396]	; (8002fe8 <HAL_DMA_IRQHandler+0x408>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d036      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a61      	ldr	r2, [pc, #388]	; (8002fec <HAL_DMA_IRQHandler+0x40c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a60      	ldr	r2, [pc, #384]	; (8002ff0 <HAL_DMA_IRQHandler+0x410>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d02c      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5e      	ldr	r2, [pc, #376]	; (8002ff4 <HAL_DMA_IRQHandler+0x414>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d027      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5d      	ldr	r2, [pc, #372]	; (8002ff8 <HAL_DMA_IRQHandler+0x418>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5b      	ldr	r2, [pc, #364]	; (8002ffc <HAL_DMA_IRQHandler+0x41c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a5a      	ldr	r2, [pc, #360]	; (8003000 <HAL_DMA_IRQHandler+0x420>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	; (8003004 <HAL_DMA_IRQHandler+0x424>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a57      	ldr	r2, [pc, #348]	; (8003008 <HAL_DMA_IRQHandler+0x428>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a55      	ldr	r2, [pc, #340]	; (800300c <HAL_DMA_IRQHandler+0x42c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a54      	ldr	r2, [pc, #336]	; (8003010 <HAL_DMA_IRQHandler+0x430>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2ee>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_DMA_IRQHandler+0x434>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x304>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e003      	b.n	8002eec <HAL_DMA_IRQHandler+0x30c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2201      	movs	r2, #1
 8002efa:	409a      	lsls	r2, r3
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	f043 0202 	orr.w	r2, r3, #2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2204      	movs	r2, #4
 8002f16:	409a      	lsls	r2, r3
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 808f 	beq.w	8003040 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2c      	ldr	r2, [pc, #176]	; (8002fd8 <HAL_DMA_IRQHandler+0x3f8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d04a      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <HAL_DMA_IRQHandler+0x3fc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d045      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <HAL_DMA_IRQHandler+0x400>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d040      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_DMA_IRQHandler+0x404>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d03b      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_DMA_IRQHandler+0x408>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d036      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a24      	ldr	r2, [pc, #144]	; (8002fec <HAL_DMA_IRQHandler+0x40c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d031      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <HAL_DMA_IRQHandler+0x410>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d02c      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <HAL_DMA_IRQHandler+0x414>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d027      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <HAL_DMA_IRQHandler+0x418>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_DMA_IRQHandler+0x41c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_DMA_IRQHandler+0x420>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_DMA_IRQHandler+0x424>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_DMA_IRQHandler+0x428>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_DMA_IRQHandler+0x42c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_DMA_IRQHandler+0x430>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x3e2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_DMA_IRQHandler+0x434>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12a      	bne.n	8003018 <HAL_DMA_IRQHandler+0x438>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e023      	b.n	8003020 <HAL_DMA_IRQHandler+0x440>
 8002fd8:	40020010 	.word	0x40020010
 8002fdc:	40020028 	.word	0x40020028
 8002fe0:	40020040 	.word	0x40020040
 8002fe4:	40020058 	.word	0x40020058
 8002fe8:	40020070 	.word	0x40020070
 8002fec:	40020088 	.word	0x40020088
 8002ff0:	400200a0 	.word	0x400200a0
 8002ff4:	400200b8 	.word	0x400200b8
 8002ff8:	40020410 	.word	0x40020410
 8002ffc:	40020428 	.word	0x40020428
 8003000:	40020440 	.word	0x40020440
 8003004:	40020458 	.word	0x40020458
 8003008:	40020470 	.word	0x40020470
 800300c:	40020488 	.word	0x40020488
 8003010:	400204a0 	.word	0x400204a0
 8003014:	400204b8 	.word	0x400204b8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00d      	beq.n	8003040 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	2204      	movs	r2, #4
 800302e:	409a      	lsls	r2, r3
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f043 0204 	orr.w	r2, r3, #4
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2210      	movs	r2, #16
 800304a:	409a      	lsls	r2, r3
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a6 	beq.w	80031a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a85      	ldr	r2, [pc, #532]	; (8003270 <HAL_DMA_IRQHandler+0x690>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04a      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a83      	ldr	r2, [pc, #524]	; (8003274 <HAL_DMA_IRQHandler+0x694>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d045      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a82      	ldr	r2, [pc, #520]	; (8003278 <HAL_DMA_IRQHandler+0x698>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d040      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a80      	ldr	r2, [pc, #512]	; (800327c <HAL_DMA_IRQHandler+0x69c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d03b      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7f      	ldr	r2, [pc, #508]	; (8003280 <HAL_DMA_IRQHandler+0x6a0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d036      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a7d      	ldr	r2, [pc, #500]	; (8003284 <HAL_DMA_IRQHandler+0x6a4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d031      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7c      	ldr	r2, [pc, #496]	; (8003288 <HAL_DMA_IRQHandler+0x6a8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d02c      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a7a      	ldr	r2, [pc, #488]	; (800328c <HAL_DMA_IRQHandler+0x6ac>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d027      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a79      	ldr	r2, [pc, #484]	; (8003290 <HAL_DMA_IRQHandler+0x6b0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d022      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a77      	ldr	r2, [pc, #476]	; (8003294 <HAL_DMA_IRQHandler+0x6b4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01d      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a76      	ldr	r2, [pc, #472]	; (8003298 <HAL_DMA_IRQHandler+0x6b8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d018      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a74      	ldr	r2, [pc, #464]	; (800329c <HAL_DMA_IRQHandler+0x6bc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a73      	ldr	r2, [pc, #460]	; (80032a0 <HAL_DMA_IRQHandler+0x6c0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00e      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a71      	ldr	r2, [pc, #452]	; (80032a4 <HAL_DMA_IRQHandler+0x6c4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d009      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a70      	ldr	r2, [pc, #448]	; (80032a8 <HAL_DMA_IRQHandler+0x6c8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x516>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_DMA_IRQHandler+0x6cc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10a      	bne.n	800310c <HAL_DMA_IRQHandler+0x52c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e009      	b.n	8003120 <HAL_DMA_IRQHandler+0x540>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d03e      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2210      	movs	r2, #16
 800312e:	409a      	lsls	r2, r3
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d018      	beq.n	8003174 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d108      	bne.n	8003162 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d024      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
 8003160:	e01f      	b.n	80031a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01b      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
 8003172:	e016      	b.n	80031a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0208 	bic.w	r2, r2, #8
 8003190:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2220      	movs	r2, #32
 80031ac:	409a      	lsls	r2, r3
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8110 	beq.w	80033d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <HAL_DMA_IRQHandler+0x690>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d04a      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <HAL_DMA_IRQHandler+0x694>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d045      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a29      	ldr	r2, [pc, #164]	; (8003278 <HAL_DMA_IRQHandler+0x698>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d040      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a28      	ldr	r2, [pc, #160]	; (800327c <HAL_DMA_IRQHandler+0x69c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d03b      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a26      	ldr	r2, [pc, #152]	; (8003280 <HAL_DMA_IRQHandler+0x6a0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d036      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_DMA_IRQHandler+0x6a4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d031      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a23      	ldr	r2, [pc, #140]	; (8003288 <HAL_DMA_IRQHandler+0x6a8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d02c      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_DMA_IRQHandler+0x6ac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d027      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a20      	ldr	r2, [pc, #128]	; (8003290 <HAL_DMA_IRQHandler+0x6b0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d022      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_DMA_IRQHandler+0x6b4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d01d      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_DMA_IRQHandler+0x6b8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d018      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1c      	ldr	r2, [pc, #112]	; (800329c <HAL_DMA_IRQHandler+0x6bc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <HAL_DMA_IRQHandler+0x6c0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00e      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_DMA_IRQHandler+0x6c4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_DMA_IRQHandler+0x6c8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_DMA_IRQHandler+0x678>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_DMA_IRQHandler+0x6cc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d12b      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x6d0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	e02a      	b.n	80032c4 <HAL_DMA_IRQHandler+0x6e4>
 800326e:	bf00      	nop
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8087 	beq.w	80033d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2220      	movs	r2, #32
 80032d4:	409a      	lsls	r2, r3
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d139      	bne.n	800335a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0216 	bic.w	r2, r2, #22
 80032f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003304:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_DMA_IRQHandler+0x736>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0208 	bic.w	r2, r2, #8
 8003324:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	223f      	movs	r2, #63	; 0x3f
 8003330:	409a      	lsls	r2, r3
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 834a 	beq.w	80039e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
          }
          return;
 8003358:	e344      	b.n	80039e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d018      	beq.n	800339a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02c      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
 8003386:	e027      	b.n	80033d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d023      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e01e      	b.n	80033d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10f      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0210 	bic.w	r2, r2, #16
 80033b6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8306 	beq.w	80039ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8088 	beq.w	8003500 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2204      	movs	r2, #4
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a7a      	ldr	r2, [pc, #488]	; (80035e8 <HAL_DMA_IRQHandler+0xa08>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d04a      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a79      	ldr	r2, [pc, #484]	; (80035ec <HAL_DMA_IRQHandler+0xa0c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d045      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a77      	ldr	r2, [pc, #476]	; (80035f0 <HAL_DMA_IRQHandler+0xa10>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d040      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a76      	ldr	r2, [pc, #472]	; (80035f4 <HAL_DMA_IRQHandler+0xa14>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d03b      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a74      	ldr	r2, [pc, #464]	; (80035f8 <HAL_DMA_IRQHandler+0xa18>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d036      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a73      	ldr	r2, [pc, #460]	; (80035fc <HAL_DMA_IRQHandler+0xa1c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d031      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a71      	ldr	r2, [pc, #452]	; (8003600 <HAL_DMA_IRQHandler+0xa20>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02c      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a70      	ldr	r2, [pc, #448]	; (8003604 <HAL_DMA_IRQHandler+0xa24>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d027      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6e      	ldr	r2, [pc, #440]	; (8003608 <HAL_DMA_IRQHandler+0xa28>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d022      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6d      	ldr	r2, [pc, #436]	; (800360c <HAL_DMA_IRQHandler+0xa2c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d01d      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6b      	ldr	r2, [pc, #428]	; (8003610 <HAL_DMA_IRQHandler+0xa30>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d018      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6a      	ldr	r2, [pc, #424]	; (8003614 <HAL_DMA_IRQHandler+0xa34>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d013      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a68      	ldr	r2, [pc, #416]	; (8003618 <HAL_DMA_IRQHandler+0xa38>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a67      	ldr	r2, [pc, #412]	; (800361c <HAL_DMA_IRQHandler+0xa3c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a65      	ldr	r2, [pc, #404]	; (8003620 <HAL_DMA_IRQHandler+0xa40>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_DMA_IRQHandler+0x8b8>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a64      	ldr	r2, [pc, #400]	; (8003624 <HAL_DMA_IRQHandler+0xa44>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d108      	bne.n	80034aa <HAL_DMA_IRQHandler+0x8ca>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e007      	b.n	80034ba <HAL_DMA_IRQHandler+0x8da>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3301      	adds	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d307      	bcc.n	80034d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f2      	bne.n	80034ba <HAL_DMA_IRQHandler+0x8da>
 80034d4:	e000      	b.n	80034d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80034d6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2203      	movs	r2, #3
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80034f6:	e003      	b.n	8003500 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8272 	beq.w	80039ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
 8003512:	e26c      	b.n	80039ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a43      	ldr	r2, [pc, #268]	; (8003628 <HAL_DMA_IRQHandler+0xa48>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d022      	beq.n	8003564 <HAL_DMA_IRQHandler+0x984>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a42      	ldr	r2, [pc, #264]	; (800362c <HAL_DMA_IRQHandler+0xa4c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d01d      	beq.n	8003564 <HAL_DMA_IRQHandler+0x984>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a40      	ldr	r2, [pc, #256]	; (8003630 <HAL_DMA_IRQHandler+0xa50>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d018      	beq.n	8003564 <HAL_DMA_IRQHandler+0x984>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a3f      	ldr	r2, [pc, #252]	; (8003634 <HAL_DMA_IRQHandler+0xa54>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <HAL_DMA_IRQHandler+0x984>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3d      	ldr	r2, [pc, #244]	; (8003638 <HAL_DMA_IRQHandler+0xa58>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_DMA_IRQHandler+0x984>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3c      	ldr	r2, [pc, #240]	; (800363c <HAL_DMA_IRQHandler+0xa5c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_DMA_IRQHandler+0x984>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3a      	ldr	r2, [pc, #232]	; (8003640 <HAL_DMA_IRQHandler+0xa60>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_DMA_IRQHandler+0x984>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a39      	ldr	r2, [pc, #228]	; (8003644 <HAL_DMA_IRQHandler+0xa64>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_DMA_IRQHandler+0x988>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_DMA_IRQHandler+0x98a>
 8003568:	2300      	movs	r3, #0
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 823f 	beq.w	80039ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2204      	movs	r2, #4
 8003582:	409a      	lsls	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80cd 	beq.w	8003728 <HAL_DMA_IRQHandler+0xb48>
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80c7 	beq.w	8003728 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2204      	movs	r2, #4
 80035a4:	409a      	lsls	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d049      	beq.n	8003648 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8210 	beq.w	80039e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d0:	e20a      	b.n	80039e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8206 	beq.w	80039e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035e4:	e200      	b.n	80039e8 <HAL_DMA_IRQHandler+0xe08>
 80035e6:	bf00      	nop
 80035e8:	40020010 	.word	0x40020010
 80035ec:	40020028 	.word	0x40020028
 80035f0:	40020040 	.word	0x40020040
 80035f4:	40020058 	.word	0x40020058
 80035f8:	40020070 	.word	0x40020070
 80035fc:	40020088 	.word	0x40020088
 8003600:	400200a0 	.word	0x400200a0
 8003604:	400200b8 	.word	0x400200b8
 8003608:	40020410 	.word	0x40020410
 800360c:	40020428 	.word	0x40020428
 8003610:	40020440 	.word	0x40020440
 8003614:	40020458 	.word	0x40020458
 8003618:	40020470 	.word	0x40020470
 800361c:	40020488 	.word	0x40020488
 8003620:	400204a0 	.word	0x400204a0
 8003624:	400204b8 	.word	0x400204b8
 8003628:	58025408 	.word	0x58025408
 800362c:	5802541c 	.word	0x5802541c
 8003630:	58025430 	.word	0x58025430
 8003634:	58025444 	.word	0x58025444
 8003638:	58025458 	.word	0x58025458
 800363c:	5802546c 	.word	0x5802546c
 8003640:	58025480 	.word	0x58025480
 8003644:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d160      	bne.n	8003714 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a8c      	ldr	r2, [pc, #560]	; (8003888 <HAL_DMA_IRQHandler+0xca8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d04a      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a8a      	ldr	r2, [pc, #552]	; (800388c <HAL_DMA_IRQHandler+0xcac>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d045      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a89      	ldr	r2, [pc, #548]	; (8003890 <HAL_DMA_IRQHandler+0xcb0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d040      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a87      	ldr	r2, [pc, #540]	; (8003894 <HAL_DMA_IRQHandler+0xcb4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d03b      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a86      	ldr	r2, [pc, #536]	; (8003898 <HAL_DMA_IRQHandler+0xcb8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d036      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a84      	ldr	r2, [pc, #528]	; (800389c <HAL_DMA_IRQHandler+0xcbc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d031      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a83      	ldr	r2, [pc, #524]	; (80038a0 <HAL_DMA_IRQHandler+0xcc0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d02c      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a81      	ldr	r2, [pc, #516]	; (80038a4 <HAL_DMA_IRQHandler+0xcc4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d027      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a80      	ldr	r2, [pc, #512]	; (80038a8 <HAL_DMA_IRQHandler+0xcc8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d022      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7e      	ldr	r2, [pc, #504]	; (80038ac <HAL_DMA_IRQHandler+0xccc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01d      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7d      	ldr	r2, [pc, #500]	; (80038b0 <HAL_DMA_IRQHandler+0xcd0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d018      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a7b      	ldr	r2, [pc, #492]	; (80038b4 <HAL_DMA_IRQHandler+0xcd4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7a      	ldr	r2, [pc, #488]	; (80038b8 <HAL_DMA_IRQHandler+0xcd8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00e      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a78      	ldr	r2, [pc, #480]	; (80038bc <HAL_DMA_IRQHandler+0xcdc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d009      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a77      	ldr	r2, [pc, #476]	; (80038c0 <HAL_DMA_IRQHandler+0xce0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d004      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xb12>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a75      	ldr	r2, [pc, #468]	; (80038c4 <HAL_DMA_IRQHandler+0xce4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d108      	bne.n	8003704 <HAL_DMA_IRQHandler+0xb24>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0208 	bic.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e007      	b.n	8003714 <HAL_DMA_IRQHandler+0xb34>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8165 	beq.w	80039e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003726:	e15f      	b.n	80039e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2202      	movs	r2, #2
 8003732:	409a      	lsls	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80c5 	beq.w	80038c8 <HAL_DMA_IRQHandler+0xce8>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80bf 	beq.w	80038c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	2202      	movs	r2, #2
 8003754:	409a      	lsls	r2, r3
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d018      	beq.n	8003796 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 813a 	beq.w	80039ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003780:	e134      	b.n	80039ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8130 	beq.w	80039ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003794:	e12a      	b.n	80039ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d168      	bne.n	8003872 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a38      	ldr	r2, [pc, #224]	; (8003888 <HAL_DMA_IRQHandler+0xca8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d04a      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a37      	ldr	r2, [pc, #220]	; (800388c <HAL_DMA_IRQHandler+0xcac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d045      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a35      	ldr	r2, [pc, #212]	; (8003890 <HAL_DMA_IRQHandler+0xcb0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d040      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a34      	ldr	r2, [pc, #208]	; (8003894 <HAL_DMA_IRQHandler+0xcb4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03b      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a32      	ldr	r2, [pc, #200]	; (8003898 <HAL_DMA_IRQHandler+0xcb8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d036      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a31      	ldr	r2, [pc, #196]	; (800389c <HAL_DMA_IRQHandler+0xcbc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d031      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2f      	ldr	r2, [pc, #188]	; (80038a0 <HAL_DMA_IRQHandler+0xcc0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02c      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <HAL_DMA_IRQHandler+0xcc4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d027      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <HAL_DMA_IRQHandler+0xcc8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <HAL_DMA_IRQHandler+0xccc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01d      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <HAL_DMA_IRQHandler+0xcd0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <HAL_DMA_IRQHandler+0xcd4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_DMA_IRQHandler+0xcd8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_DMA_IRQHandler+0xcdc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <HAL_DMA_IRQHandler+0xce0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc60>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_DMA_IRQHandler+0xce4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d108      	bne.n	8003852 <HAL_DMA_IRQHandler+0xc72>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0214 	bic.w	r2, r2, #20
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e007      	b.n	8003862 <HAL_DMA_IRQHandler+0xc82>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 020a 	bic.w	r2, r2, #10
 8003860:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80b8 	beq.w	80039ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003884:	e0b2      	b.n	80039ec <HAL_DMA_IRQHandler+0xe0c>
 8003886:	bf00      	nop
 8003888:	40020010 	.word	0x40020010
 800388c:	40020028 	.word	0x40020028
 8003890:	40020040 	.word	0x40020040
 8003894:	40020058 	.word	0x40020058
 8003898:	40020070 	.word	0x40020070
 800389c:	40020088 	.word	0x40020088
 80038a0:	400200a0 	.word	0x400200a0
 80038a4:	400200b8 	.word	0x400200b8
 80038a8:	40020410 	.word	0x40020410
 80038ac:	40020428 	.word	0x40020428
 80038b0:	40020440 	.word	0x40020440
 80038b4:	40020458 	.word	0x40020458
 80038b8:	40020470 	.word	0x40020470
 80038bc:	40020488 	.word	0x40020488
 80038c0:	400204a0 	.word	0x400204a0
 80038c4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2208      	movs	r2, #8
 80038d2:	409a      	lsls	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8088 	beq.w	80039ee <HAL_DMA_IRQHandler+0xe0e>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8082 	beq.w	80039ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a41      	ldr	r2, [pc, #260]	; (80039f4 <HAL_DMA_IRQHandler+0xe14>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d04a      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3f      	ldr	r2, [pc, #252]	; (80039f8 <HAL_DMA_IRQHandler+0xe18>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d045      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3e      	ldr	r2, [pc, #248]	; (80039fc <HAL_DMA_IRQHandler+0xe1c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d040      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3c      	ldr	r2, [pc, #240]	; (8003a00 <HAL_DMA_IRQHandler+0xe20>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d03b      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3b      	ldr	r2, [pc, #236]	; (8003a04 <HAL_DMA_IRQHandler+0xe24>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d036      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <HAL_DMA_IRQHandler+0xe28>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d031      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <HAL_DMA_IRQHandler+0xe2c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d02c      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a36      	ldr	r2, [pc, #216]	; (8003a10 <HAL_DMA_IRQHandler+0xe30>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d027      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <HAL_DMA_IRQHandler+0xe34>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d022      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a33      	ldr	r2, [pc, #204]	; (8003a18 <HAL_DMA_IRQHandler+0xe38>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01d      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a32      	ldr	r2, [pc, #200]	; (8003a1c <HAL_DMA_IRQHandler+0xe3c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d018      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a30      	ldr	r2, [pc, #192]	; (8003a20 <HAL_DMA_IRQHandler+0xe40>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2f      	ldr	r2, [pc, #188]	; (8003a24 <HAL_DMA_IRQHandler+0xe44>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2d      	ldr	r2, [pc, #180]	; (8003a28 <HAL_DMA_IRQHandler+0xe48>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <HAL_DMA_IRQHandler+0xe4c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_DMA_IRQHandler+0xdaa>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <HAL_DMA_IRQHandler+0xe50>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d108      	bne.n	800399c <HAL_DMA_IRQHandler+0xdbc>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 021c 	bic.w	r2, r2, #28
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e007      	b.n	80039ac <HAL_DMA_IRQHandler+0xdcc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 020e 	bic.w	r2, r2, #14
 80039aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	2201      	movs	r2, #1
 80039b6:	409a      	lsls	r2, r3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
 80039e2:	e004      	b.n	80039ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80039e4:	bf00      	nop
 80039e6:	e002      	b.n	80039ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e8:	bf00      	nop
 80039ea:	e000      	b.n	80039ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039ee:	3728      	adds	r7, #40	; 0x28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8

08003a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <DMA_CalcBaseAndBitshift+0x118>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d04a      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a41      	ldr	r2, [pc, #260]	; (8003b50 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d045      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3f      	ldr	r2, [pc, #252]	; (8003b54 <DMA_CalcBaseAndBitshift+0x120>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d040      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3e      	ldr	r2, [pc, #248]	; (8003b58 <DMA_CalcBaseAndBitshift+0x124>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d03b      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3c      	ldr	r2, [pc, #240]	; (8003b5c <DMA_CalcBaseAndBitshift+0x128>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d036      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <DMA_CalcBaseAndBitshift+0x12c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d031      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <DMA_CalcBaseAndBitshift+0x130>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02c      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <DMA_CalcBaseAndBitshift+0x134>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d027      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a36      	ldr	r2, [pc, #216]	; (8003b6c <DMA_CalcBaseAndBitshift+0x138>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01d      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <DMA_CalcBaseAndBitshift+0x140>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <DMA_CalcBaseAndBitshift+0x144>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <DMA_CalcBaseAndBitshift+0x148>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2d      	ldr	r2, [pc, #180]	; (8003b84 <DMA_CalcBaseAndBitshift+0x150>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <DMA_CalcBaseAndBitshift+0xa8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2c      	ldr	r2, [pc, #176]	; (8003b88 <DMA_CalcBaseAndBitshift+0x154>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <DMA_CalcBaseAndBitshift+0xac>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <DMA_CalcBaseAndBitshift+0xae>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d024      	beq.n	8003b30 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	3b10      	subs	r3, #16
 8003aee:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <DMA_CalcBaseAndBitshift+0x158>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b00:	5cd3      	ldrb	r3, [r2, r3]
 8003b02:	461a      	mov	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d908      	bls.n	8003b20 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <DMA_CalcBaseAndBitshift+0x160>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	1d1a      	adds	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8003b1e:	e00d      	b.n	8003b3c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <DMA_CalcBaseAndBitshift+0x160>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b2e:	e005      	b.n	8003b3c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40020010 	.word	0x40020010
 8003b50:	40020028 	.word	0x40020028
 8003b54:	40020040 	.word	0x40020040
 8003b58:	40020058 	.word	0x40020058
 8003b5c:	40020070 	.word	0x40020070
 8003b60:	40020088 	.word	0x40020088
 8003b64:	400200a0 	.word	0x400200a0
 8003b68:	400200b8 	.word	0x400200b8
 8003b6c:	40020410 	.word	0x40020410
 8003b70:	40020428 	.word	0x40020428
 8003b74:	40020440 	.word	0x40020440
 8003b78:	40020458 	.word	0x40020458
 8003b7c:	40020470 	.word	0x40020470
 8003b80:	40020488 	.word	0x40020488
 8003b84:	400204a0 	.word	0x400204a0
 8003b88:	400204b8 	.word	0x400204b8
 8003b8c:	aaaaaaab 	.word	0xaaaaaaab
 8003b90:	080110a8 	.word	0x080110a8
 8003b94:	fffffc00 	.word	0xfffffc00

08003b98 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d120      	bne.n	8003bee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d858      	bhi.n	8003c66 <DMA_CheckFifoParam+0xce>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <DMA_CheckFifoParam+0x24>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003bdf 	.word	0x08003bdf
 8003bc4:	08003bcd 	.word	0x08003bcd
 8003bc8:	08003c67 	.word	0x08003c67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d048      	beq.n	8003c6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bdc:	e045      	b.n	8003c6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003be6:	d142      	bne.n	8003c6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bec:	e03f      	b.n	8003c6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf6:	d123      	bne.n	8003c40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d838      	bhi.n	8003c72 <DMA_CheckFifoParam+0xda>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <DMA_CheckFifoParam+0x70>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c1f 	.word	0x08003c1f
 8003c10:	08003c19 	.word	0x08003c19
 8003c14:	08003c31 	.word	0x08003c31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c1c:	e030      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d025      	beq.n	8003c76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c2e:	e022      	b.n	8003c76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c38:	d11f      	bne.n	8003c7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c3e:	e01c      	b.n	8003c7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d902      	bls.n	8003c4e <DMA_CheckFifoParam+0xb6>
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d003      	beq.n	8003c54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c4c:	e018      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
        break;
 8003c52:	e015      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
    break;
 8003c64:	e00b      	b.n	8003c7e <DMA_CheckFifoParam+0xe6>
        break;
 8003c66:	bf00      	nop
 8003c68:	e00a      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e008      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e006      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
        break;
 8003c72:	bf00      	nop
 8003c74:	e004      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
        break;
 8003c76:	bf00      	nop
 8003c78:	e002      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
        break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
    break;
 8003c7e:	bf00      	nop
    }
  }

  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop

08003c90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a38      	ldr	r2, [pc, #224]	; (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d022      	beq.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a36      	ldr	r2, [pc, #216]	; (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01d      	beq.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a30      	ldr	r2, [pc, #192]	; (8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01a      	beq.n	8003d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	3b08      	subs	r3, #8
 8003d00:	4a28      	ldr	r2, [pc, #160]	; (8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a24      	ldr	r2, [pc, #144]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2201      	movs	r2, #1
 8003d26:	409a      	lsls	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d2c:	e024      	b.n	8003d78 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	3b10      	subs	r3, #16
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d806      	bhi.n	8003d56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d902      	bls.n	8003d56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3308      	adds	r3, #8
 8003d54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	461a      	mov	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2201      	movs	r2, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	58025408 	.word	0x58025408
 8003d88:	5802541c 	.word	0x5802541c
 8003d8c:	58025430 	.word	0x58025430
 8003d90:	58025444 	.word	0x58025444
 8003d94:	58025458 	.word	0x58025458
 8003d98:	5802546c 	.word	0x5802546c
 8003d9c:	58025480 	.word	0x58025480
 8003da0:	58025494 	.word	0x58025494
 8003da4:	cccccccd 	.word	0xcccccccd
 8003da8:	16009600 	.word	0x16009600
 8003dac:	58025880 	.word	0x58025880
 8003db0:	aaaaaaab 	.word	0xaaaaaaab
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	4002040f 	.word	0x4002040f
 8003dbc:	10008200 	.word	0x10008200
 8003dc0:	40020880 	.word	0x40020880

08003dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d04a      	beq.n	8003e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d847      	bhi.n	8003e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a25      	ldr	r2, [pc, #148]	; (8003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d022      	beq.n	8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a24      	ldr	r2, [pc, #144]	; (8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01d      	beq.n	8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1f      	ldr	r2, [pc, #124]	; (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d101      	bne.n	8003e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e34:	2300      	movs	r3, #0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e4c:	671a      	str	r2, [r3, #112]	; 0x70
 8003e4e:	e009      	b.n	8003e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a11      	ldr	r2, [pc, #68]	; (8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e62:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	2201      	movs	r2, #1
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	58025408 	.word	0x58025408
 8003e80:	5802541c 	.word	0x5802541c
 8003e84:	58025430 	.word	0x58025430
 8003e88:	58025444 	.word	0x58025444
 8003e8c:	58025458 	.word	0x58025458
 8003e90:	5802546c 	.word	0x5802546c
 8003e94:	58025480 	.word	0x58025480
 8003e98:	58025494 	.word	0x58025494
 8003e9c:	1600963f 	.word	0x1600963f
 8003ea0:	58025940 	.word	0x58025940
 8003ea4:	1000823f 	.word	0x1000823f
 8003ea8:	40020940 	.word	0x40020940

08003eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_GPIO_Init+0x12c>)
 8003ebc:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a46      	ldr	r2, [pc, #280]	; (8003fdc <HAL_GPIO_Init+0x130>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a45      	ldr	r2, [pc, #276]	; (8003fe0 <HAL_GPIO_Init+0x134>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d027      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a44      	ldr	r2, [pc, #272]	; (8003fe4 <HAL_GPIO_Init+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d023      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a43      	ldr	r2, [pc, #268]	; (8003fe8 <HAL_GPIO_Init+0x13c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01f      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a42      	ldr	r2, [pc, #264]	; (8003fec <HAL_GPIO_Init+0x140>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01b      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a41      	ldr	r2, [pc, #260]	; (8003ff0 <HAL_GPIO_Init+0x144>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d017      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a40      	ldr	r2, [pc, #256]	; (8003ff4 <HAL_GPIO_Init+0x148>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a3f      	ldr	r2, [pc, #252]	; (8003ff8 <HAL_GPIO_Init+0x14c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a3e      	ldr	r2, [pc, #248]	; (8003ffc <HAL_GPIO_Init+0x150>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a3d      	ldr	r2, [pc, #244]	; (8004000 <HAL_GPIO_Init+0x154>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a3c      	ldr	r2, [pc, #240]	; (8004004 <HAL_GPIO_Init+0x158>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_Init+0x72>
 8003f16:	21bb      	movs	r1, #187	; 0xbb
 8003f18:	483b      	ldr	r0, [pc, #236]	; (8004008 <HAL_GPIO_Init+0x15c>)
 8003f1a:	f7fd f905 	bl	8001128 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_GPIO_Init+0x88>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_GPIO_Init+0x160>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x90>
 8003f34:	21bc      	movs	r1, #188	; 0xbc
 8003f36:	4834      	ldr	r0, [pc, #208]	; (8004008 <HAL_GPIO_Init+0x15c>)
 8003f38:	f7fd f8f6 	bl	8001128 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d035      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d031      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b11      	cmp	r3, #17
 8003f52:	d02d      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d029      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b12      	cmp	r3, #18
 8003f62:	d025      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a29      	ldr	r2, [pc, #164]	; (8004010 <HAL_GPIO_Init+0x164>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d020      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a28      	ldr	r2, [pc, #160]	; (8004014 <HAL_GPIO_Init+0x168>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01b      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a26      	ldr	r2, [pc, #152]	; (8004018 <HAL_GPIO_Init+0x16c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d016      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4a25      	ldr	r2, [pc, #148]	; (800401c <HAL_GPIO_Init+0x170>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d011      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_GPIO_Init+0x174>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00c      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a22      	ldr	r2, [pc, #136]	; (8004024 <HAL_GPIO_Init+0x178>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d007      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x104>
 8003fa8:	21bd      	movs	r1, #189	; 0xbd
 8003faa:	4817      	ldr	r0, [pc, #92]	; (8004008 <HAL_GPIO_Init+0x15c>)
 8003fac:	f7fd f8bc 	bl	8001128 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 821a 	beq.w	80043ee <HAL_GPIO_Init+0x542>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	f000 8215 	beq.w	80043ee <HAL_GPIO_Init+0x542>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f000 8210 	beq.w	80043ee <HAL_GPIO_Init+0x542>
 8003fce:	21be      	movs	r1, #190	; 0xbe
 8003fd0:	480d      	ldr	r0, [pc, #52]	; (8004008 <HAL_GPIO_Init+0x15c>)
 8003fd2:	f7fd f8a9 	bl	8001128 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fd6:	e20a      	b.n	80043ee <HAL_GPIO_Init+0x542>
 8003fd8:	58000080 	.word	0x58000080
 8003fdc:	58020000 	.word	0x58020000
 8003fe0:	58020400 	.word	0x58020400
 8003fe4:	58020800 	.word	0x58020800
 8003fe8:	58020c00 	.word	0x58020c00
 8003fec:	58021000 	.word	0x58021000
 8003ff0:	58021400 	.word	0x58021400
 8003ff4:	58021800 	.word	0x58021800
 8003ff8:	58021c00 	.word	0x58021c00
 8003ffc:	58022000 	.word	0x58022000
 8004000:	58022400 	.word	0x58022400
 8004004:	58022800 	.word	0x58022800
 8004008:	08010aa4 	.word	0x08010aa4
 800400c:	ffff0000 	.word	0xffff0000
 8004010:	11110000 	.word	0x11110000
 8004014:	11210000 	.word	0x11210000
 8004018:	11310000 	.word	0x11310000
 800401c:	11120000 	.word	0x11120000
 8004020:	11220000 	.word	0x11220000
 8004024:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2101      	movs	r1, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 81d4 	beq.w	80043e8 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d003      	beq.n	8004050 <HAL_GPIO_Init+0x1a4>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b12      	cmp	r3, #18
 800404e:	d15b      	bne.n	8004108 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4aa2      	ldr	r2, [pc, #648]	; (80042dc <HAL_GPIO_Init+0x430>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d02b      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4aa1      	ldr	r2, [pc, #644]	; (80042e0 <HAL_GPIO_Init+0x434>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d027      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4aa0      	ldr	r2, [pc, #640]	; (80042e4 <HAL_GPIO_Init+0x438>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d023      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a9f      	ldr	r2, [pc, #636]	; (80042e8 <HAL_GPIO_Init+0x43c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d01f      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a9e      	ldr	r2, [pc, #632]	; (80042ec <HAL_GPIO_Init+0x440>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d01b      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a9d      	ldr	r2, [pc, #628]	; (80042f0 <HAL_GPIO_Init+0x444>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d017      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a9c      	ldr	r2, [pc, #624]	; (80042f4 <HAL_GPIO_Init+0x448>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a9b      	ldr	r2, [pc, #620]	; (80042f8 <HAL_GPIO_Init+0x44c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00f      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a9a      	ldr	r2, [pc, #616]	; (80042fc <HAL_GPIO_Init+0x450>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a99      	ldr	r2, [pc, #612]	; (8004300 <HAL_GPIO_Init+0x454>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a98      	ldr	r2, [pc, #608]	; (8004304 <HAL_GPIO_Init+0x458>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x204>
 80040a8:	21cd      	movs	r1, #205	; 0xcd
 80040aa:	4897      	ldr	r0, [pc, #604]	; (8004308 <HAL_GPIO_Init+0x45c>)
 80040ac:	f7fd f83c 	bl	8001128 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d903      	bls.n	80040c0 <HAL_GPIO_Init+0x214>
 80040b8:	21ce      	movs	r1, #206	; 0xce
 80040ba:	4893      	ldr	r0, [pc, #588]	; (8004308 <HAL_GPIO_Init+0x45c>)
 80040bc:	f7fd f834 	bl	8001128 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	2203      	movs	r2, #3
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d00b      	beq.n	800415c <HAL_GPIO_Init+0x2b0>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d007      	beq.n	800415c <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004150:	2b11      	cmp	r3, #17
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b12      	cmp	r3, #18
 800415a:	d144      	bne.n	80041e6 <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <HAL_GPIO_Init+0x2d8>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d00b      	beq.n	8004184 <HAL_GPIO_Init+0x2d8>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d007      	beq.n	8004184 <HAL_GPIO_Init+0x2d8>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x2d8>
 800417c:	21e2      	movs	r1, #226	; 0xe2
 800417e:	4862      	ldr	r0, [pc, #392]	; (8004308 <HAL_GPIO_Init+0x45c>)
 8004180:	f7fc ffd2 	bl	8001128 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ba:	2201      	movs	r2, #1
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0201 	and.w	r2, r3, #1
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	2203      	movs	r2, #3
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80e2 	beq.w	80043e8 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004224:	4b39      	ldr	r3, [pc, #228]	; (800430c <HAL_GPIO_Init+0x460>)
 8004226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800422a:	4a38      	ldr	r2, [pc, #224]	; (800430c <HAL_GPIO_Init+0x460>)
 800422c:	f043 0302 	orr.w	r3, r3, #2
 8004230:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <HAL_GPIO_Init+0x460>)
 8004236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004242:	4a33      	ldr	r2, [pc, #204]	; (8004310 <HAL_GPIO_Init+0x464>)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	089b      	lsrs	r3, r3, #2
 8004248:	3302      	adds	r3, #2
 800424a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	220f      	movs	r2, #15
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <HAL_GPIO_Init+0x430>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d054      	beq.n	8004318 <HAL_GPIO_Init+0x46c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_GPIO_Init+0x434>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d04e      	beq.n	8004314 <HAL_GPIO_Init+0x468>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a1a      	ldr	r2, [pc, #104]	; (80042e4 <HAL_GPIO_Init+0x438>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02b      	beq.n	80042d6 <HAL_GPIO_Init+0x42a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <HAL_GPIO_Init+0x43c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d025      	beq.n	80042d2 <HAL_GPIO_Init+0x426>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <HAL_GPIO_Init+0x440>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01f      	beq.n	80042ce <HAL_GPIO_Init+0x422>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <HAL_GPIO_Init+0x444>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d019      	beq.n	80042ca <HAL_GPIO_Init+0x41e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a16      	ldr	r2, [pc, #88]	; (80042f4 <HAL_GPIO_Init+0x448>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_GPIO_Init+0x41a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <HAL_GPIO_Init+0x44c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00d      	beq.n	80042c2 <HAL_GPIO_Init+0x416>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <HAL_GPIO_Init+0x450>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <HAL_GPIO_Init+0x412>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <HAL_GPIO_Init+0x454>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_GPIO_Init+0x40e>
 80042b6:	2309      	movs	r3, #9
 80042b8:	e02f      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042ba:	230a      	movs	r3, #10
 80042bc:	e02d      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042be:	2308      	movs	r3, #8
 80042c0:	e02b      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042c2:	2307      	movs	r3, #7
 80042c4:	e029      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042c6:	2306      	movs	r3, #6
 80042c8:	e027      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042ca:	2305      	movs	r3, #5
 80042cc:	e025      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042ce:	2304      	movs	r3, #4
 80042d0:	e023      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042d2:	2303      	movs	r3, #3
 80042d4:	e021      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e01f      	b.n	800431a <HAL_GPIO_Init+0x46e>
 80042da:	bf00      	nop
 80042dc:	58020000 	.word	0x58020000
 80042e0:	58020400 	.word	0x58020400
 80042e4:	58020800 	.word	0x58020800
 80042e8:	58020c00 	.word	0x58020c00
 80042ec:	58021000 	.word	0x58021000
 80042f0:	58021400 	.word	0x58021400
 80042f4:	58021800 	.word	0x58021800
 80042f8:	58021c00 	.word	0x58021c00
 80042fc:	58022000 	.word	0x58022000
 8004300:	58022400 	.word	0x58022400
 8004304:	58022800 	.word	0x58022800
 8004308:	08010aa4 	.word	0x08010aa4
 800430c:	58024400 	.word	0x58024400
 8004310:	58000400 	.word	0x58000400
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_GPIO_Init+0x46e>
 8004318:	2300      	movs	r3, #0
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	f002 0203 	and.w	r2, r2, #3
 8004320:	0092      	lsls	r2, r2, #2
 8004322:	4093      	lsls	r3, r2
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800432a:	4937      	ldr	r1, [pc, #220]	; (8004408 <HAL_GPIO_Init+0x55c>)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	3302      	adds	r3, #2
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f47f ae15 	bne.w	8004028 <HAL_GPIO_Init+0x17c>
  }
}
 80043fe:	bf00      	nop
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	58000400 	.word	0x58000400

0800440c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_GPIO_ReadPin+0x1c>
 800441e:	887a      	ldrh	r2, [r7, #2]
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_GPIO_ReadPin+0x48>)
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_GPIO_ReadPin+0x26>
 8004428:	f240 118d 	movw	r1, #397	; 0x18d
 800442c:	480a      	ldr	r0, [pc, #40]	; (8004458 <HAL_GPIO_ReadPin+0x4c>)
 800442e:	f7fc fe7b 	bl	8001128 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	887b      	ldrh	r3, [r7, #2]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	e001      	b.n	8004448 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	ffff0000 	.word	0xffff0000
 8004458:	08010aa4 	.word	0x08010aa4

0800445c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
 8004468:	4613      	mov	r3, r2
 800446a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800446c:	887b      	ldrh	r3, [r7, #2]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <HAL_GPIO_WritePin+0x20>
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_GPIO_WritePin+0x60>)
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <HAL_GPIO_WritePin+0x2a>
 800447c:	f240 11ad 	movw	r1, #429	; 0x1ad
 8004480:	480f      	ldr	r0, [pc, #60]	; (80044c0 <HAL_GPIO_WritePin+0x64>)
 8004482:	f7fc fe51 	bl	8001128 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004486:	787b      	ldrb	r3, [r7, #1]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <HAL_GPIO_WritePin+0x40>
 800448c:	787b      	ldrb	r3, [r7, #1]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d004      	beq.n	800449c <HAL_GPIO_WritePin+0x40>
 8004492:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004496:	480a      	ldr	r0, [pc, #40]	; (80044c0 <HAL_GPIO_WritePin+0x64>)
 8004498:	f7fc fe46 	bl	8001128 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800449c:	787b      	ldrb	r3, [r7, #1]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044a8:	e003      	b.n	80044b2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	041a      	lsls	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	619a      	str	r2, [r3, #24]
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	ffff0000 	.word	0xffff0000
 80044c0:	08010aa4 	.word	0x08010aa4

080044c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d006      	beq.n	80044e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044da:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc fdfa 	bl	80010dc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	58000080 	.word	0x58000080

080044f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e107      	b.n	8004716 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a85      	ldr	r2, [pc, #532]	; (8004720 <HAL_I2C_Init+0x22c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <HAL_I2C_Init+0x44>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a83      	ldr	r2, [pc, #524]	; (8004724 <HAL_I2C_Init+0x230>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00e      	beq.n	8004538 <HAL_I2C_Init+0x44>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a82      	ldr	r2, [pc, #520]	; (8004728 <HAL_I2C_Init+0x234>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_I2C_Init+0x44>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a80      	ldr	r2, [pc, #512]	; (800472c <HAL_I2C_Init+0x238>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_I2C_Init+0x44>
 800452e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004532:	487f      	ldr	r0, [pc, #508]	; (8004730 <HAL_I2C_Init+0x23c>)
 8004534:	f7fc fdf8 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	d304      	bcc.n	800454c <HAL_I2C_Init+0x58>
 8004542:	f240 11df 	movw	r1, #479	; 0x1df
 8004546:	487a      	ldr	r0, [pc, #488]	; (8004730 <HAL_I2C_Init+0x23c>)
 8004548:	f7fc fdee 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d008      	beq.n	8004566 <HAL_I2C_Init+0x72>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d004      	beq.n	8004566 <HAL_I2C_Init+0x72>
 800455c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004560:	4873      	ldr	r0, [pc, #460]	; (8004730 <HAL_I2C_Init+0x23c>)
 8004562:	f7fc fde1 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_I2C_Init+0x8e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004576:	d004      	beq.n	8004582 <HAL_I2C_Init+0x8e>
 8004578:	f240 11e1 	movw	r1, #481	; 0x1e1
 800457c:	486c      	ldr	r0, [pc, #432]	; (8004730 <HAL_I2C_Init+0x23c>)
 800457e:	f7fc fdd3 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2bff      	cmp	r3, #255	; 0xff
 8004588:	d904      	bls.n	8004594 <HAL_I2C_Init+0xa0>
 800458a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800458e:	4868      	ldr	r0, [pc, #416]	; (8004730 <HAL_I2C_Init+0x23c>)
 8004590:	f7fc fdca 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_I2C_Init+0xea>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d01c      	beq.n	80045de <HAL_I2C_Init+0xea>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d018      	beq.n	80045de <HAL_I2C_Init+0xea>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d014      	beq.n	80045de <HAL_I2C_Init+0xea>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d010      	beq.n	80045de <HAL_I2C_Init+0xea>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b05      	cmp	r3, #5
 80045c2:	d00c      	beq.n	80045de <HAL_I2C_Init+0xea>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b06      	cmp	r3, #6
 80045ca:	d008      	beq.n	80045de <HAL_I2C_Init+0xea>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b07      	cmp	r3, #7
 80045d2:	d004      	beq.n	80045de <HAL_I2C_Init+0xea>
 80045d4:	f240 11e3 	movw	r1, #483	; 0x1e3
 80045d8:	4855      	ldr	r0, [pc, #340]	; (8004730 <HAL_I2C_Init+0x23c>)
 80045da:	f7fc fda5 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_I2C_Init+0x106>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045ee:	d004      	beq.n	80045fa <HAL_I2C_Init+0x106>
 80045f0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80045f4:	484e      	ldr	r0, [pc, #312]	; (8004730 <HAL_I2C_Init+0x23c>)
 80045f6:	f7fc fd97 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_I2C_Init+0x122>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800460a:	d004      	beq.n	8004616 <HAL_I2C_Init+0x122>
 800460c:	f240 11e5 	movw	r1, #485	; 0x1e5
 8004610:	4847      	ldr	r0, [pc, #284]	; (8004730 <HAL_I2C_Init+0x23c>)
 8004612:	f7fc fd89 	bl	8001128 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fa6e 	bl	8000b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004654:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004664:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	e006      	b.n	800468c <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800468a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d104      	bne.n	800469e <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800469c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b22      	ldr	r3, [pc, #136]	; (8004734 <HAL_I2C_Init+0x240>)
 80046aa:	430b      	orrs	r3, r1
 80046ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	ea42 0103 	orr.w	r1, r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69d9      	ldr	r1, [r3, #28]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40005400 	.word	0x40005400
 8004724:	40005800 	.word	0x40005800
 8004728:	40005c00 	.word	0x40005c00
 800472c:	58001c00 	.word	0x58001c00
 8004730:	08010ae0 	.word	0x08010ae0
 8004734:	02008000 	.word	0x02008000

08004738 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a32      	ldr	r2, [pc, #200]	; (8004810 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d012      	beq.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a30      	ldr	r2, [pc, #192]	; (8004814 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00d      	beq.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2f      	ldr	r2, [pc, #188]	; (8004818 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d008      	beq.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2d      	ldr	r2, [pc, #180]	; (800481c <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d003      	beq.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	482c      	ldr	r0, [pc, #176]	; (8004820 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800476e:	f7fc fcdb 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d003      	beq.n	8004788 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004780:	2165      	movs	r1, #101	; 0x65
 8004782:	4827      	ldr	r0, [pc, #156]	; (8004820 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8004784:	f7fc fcd0 	bl	8001128 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b20      	cmp	r3, #32
 8004792:	d138      	bne.n	8004806 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800479e:	2302      	movs	r3, #2
 80047a0:	e032      	b.n	8004808 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	; 0x24
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6819      	ldr	r1, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	e000      	b.n	8004808 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004806:	2302      	movs	r3, #2
  }
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40005400 	.word	0x40005400
 8004814:	40005800 	.word	0x40005800
 8004818:	40005c00 	.word	0x40005c00
 800481c:	58001c00 	.word	0x58001c00
 8004820:	08010b18 	.word	0x08010b18

08004824 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a31      	ldr	r2, [pc, #196]	; (80048f8 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d012      	beq.n	800485e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00d      	beq.n	800485e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2e      	ldr	r2, [pc, #184]	; (8004900 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d008      	beq.n	800485e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2c      	ldr	r2, [pc, #176]	; (8004904 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d003      	beq.n	800485e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004856:	2192      	movs	r1, #146	; 0x92
 8004858:	482b      	ldr	r0, [pc, #172]	; (8004908 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800485a:	f7fc fc65 	bl	8001128 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b0f      	cmp	r3, #15
 8004862:	d903      	bls.n	800486c <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8004864:	2193      	movs	r1, #147	; 0x93
 8004866:	4828      	ldr	r0, [pc, #160]	; (8004908 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8004868:	f7fc fc5e 	bl	8001128 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b20      	cmp	r3, #32
 8004876:	d139      	bne.n	80048ec <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8004882:	2302      	movs	r3, #2
 8004884:	e033      	b.n	80048ee <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2224      	movs	r2, #36	; 0x24
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e000      	b.n	80048ee <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40005400 	.word	0x40005400
 80048fc:	40005800 	.word	0x40005800
 8004900:	40005c00 	.word	0x40005c00
 8004904:	58001c00 	.word	0x58001c00
 8004908:	08010b18 	.word	0x08010b18

0800490c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e070      	b.n	8004a00 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc f948 	bl	8000bc8 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800496e:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <HAL_JPEG_Init+0xfc>)
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_JPEG_Init+0x100>)
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fae9 	bl	8004f90 <JPEG_Set_HuffEnc_Mem>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e018      	b.n	8004a00 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049dc:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	08011250 	.word	0x08011250
 8004a0c:	08011290 	.word	0x08011290

08004a10 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b08b      	sub	sp, #44	; 0x2c
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	e020      	b.n	8004a6a <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8004a32:	6a3a      	ldr	r2, [r7, #32]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	4413      	add	r3, r2
 8004a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3c:	d90f      	bls.n	8004a5e <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e055      	b.n	8004aee <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3201      	adds	r2, #1
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
      p++;
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	3301      	adds	r3, #1
 8004a56:	623b      	str	r3, [r7, #32]
      i--;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ee      	bne.n	8004a42 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b0f      	cmp	r3, #15
 8004a6e:	d9db      	bls.n	8004a28 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	4413      	add	r3, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6a3a      	ldr	r2, [r7, #32]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	617b      	str	r3, [r7, #20]
  p = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8004a8e:	e027      	b.n	8004ae0 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	601a      	str	r2, [r3, #0]
      p++;
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	623b      	str	r3, [r7, #32]
      code++;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	4413      	add	r3, r2
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d0eb      	beq.n	8004a90 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b1f      	cmp	r3, #31
 8004abc:	d901      	bls.n	8004ac2 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e015      	b.n	8004aee <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d301      	bcc.n	8004ad4 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e00c      	b.n	8004aee <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
    si++;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3301      	adds	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1dd      	bne.n	8004aa8 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	372c      	adds	r7, #44	; 0x2c
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	6018      	str	r0, [r3, #0]
 8004b06:	463b      	mov	r3, r7
 8004b08:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004b0a:	1d3b      	adds	r3, r7, #4
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f107 0308 	add.w	r3, r7, #8
 8004b12:	f107 020c 	add.w	r2, r7, #12
 8004b16:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8004b1a:	f7ff ff79 	bl	8004a10 <JPEG_Bits_To_SizeCodes>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8004b24:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8004b2c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004b30:	e066      	b.n	8004c00 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8004b38:	e05a      	b.n	8004bf0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004b42:	4413      	add	r3, r2
 8004b44:	3310      	adds	r3, #16
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8004b4c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d103      	bne.n	8004b5c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 8004b54:	23a0      	movs	r3, #160	; 0xa0
 8004b56:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8004b5a:	e021      	b.n	8004ba0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004b5c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004b60:	2bf0      	cmp	r3, #240	; 0xf0
 8004b62:	d103      	bne.n	8004b6c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 8004b64:	23a1      	movs	r3, #161	; 0xa1
 8004b66:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8004b6a:	e019      	b.n	8004ba0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8004b6c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8004b7a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8004b86:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	461a      	mov	r2, r3
 8004b94:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004b98:	4413      	add	r3, r2
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004ba0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004ba4:	2ba1      	cmp	r3, #161	; 0xa1
 8004ba6:	d901      	bls.n	8004bac <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e029      	b.n	8004c00 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004bb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bb8:	463b      	mov	r3, r7
 8004bba:	6819      	ldr	r1, [r3, #0]
 8004bbc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004bc0:	3328      	adds	r3, #40	; 0x28
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004bc8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004bcc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004bd0:	4413      	add	r3, r2
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b2d9      	uxtb	r1, r3
 8004bd8:	463b      	mov	r3, r7
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004be0:	4413      	add	r3, r2
 8004be2:	460a      	mov	r2, r1
 8004be4:	701a      	strb	r2, [r3, #0]
      k++;
 8004be6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004bea:	3301      	adds	r3, #1
 8004bec:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d39d      	bcc.n	8004b3a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	6018      	str	r0, [r3, #0]
 8004c16:	463b      	mov	r3, r7
 8004c18:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004c22:	f107 0208 	add.w	r2, r7, #8
 8004c26:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8004c2a:	f7ff fef1 	bl	8004a10 <JPEG_Bits_To_SizeCodes>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8004c34:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8004c3c:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004c40:	e03b      	b.n	8004cba <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8004c48:	e030      	b.n	8004cac <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004c52:	4413      	add	r3, r2
 8004c54:	3310      	adds	r3, #16
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004c5c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004c60:	2b0b      	cmp	r3, #11
 8004c62:	d901      	bls.n	8004c68 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004c64:	2301      	movs	r3, #1
 8004c66:	e028      	b.n	8004cba <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004c68:	f107 0308 	add.w	r3, r7, #8
 8004c6c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004c70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c74:	463b      	mov	r3, r7
 8004c76:	6819      	ldr	r1, [r3, #0]
 8004c78:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004c84:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8004c88:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004c8c:	4413      	add	r3, r2
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b2d9      	uxtb	r1, r3
 8004c94:	463b      	mov	r3, r7
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004c9c:	4413      	add	r3, r2
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	701a      	strb	r2, [r3, #0]
      k++;
 8004ca2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004cac:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8004cb0:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d3c8      	bcc.n	8004c4a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b09a      	sub	sp, #104	; 0x68
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d106      	bne.n	8004cec <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004ce6:	3318      	adds	r3, #24
 8004ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cea:	e00f      	b.n	8004d0c <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d106      	bne.n	8004d08 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004d02:	3318      	adds	r3, #24
 8004d04:	663b      	str	r3, [r7, #96]	; 0x60
 8004d06:	e001      	b.n	8004d0c <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e05b      	b.n	8004dc4 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d057      	beq.n	8004dc2 <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004d12:	f107 0314 	add.w	r3, r7, #20
 8004d16:	4619      	mov	r1, r3
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f7ff ff76 	bl	8004c0a <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004d24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d30:	e048      	b.n	8004dc4 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 8004d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d34:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d38:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004d3c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d40:	3304      	adds	r3, #4
 8004d42:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d46:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004d4a:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8004d50:	e034      	b.n	8004dbc <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8004d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d54:	3b01      	subs	r3, #1
 8004d56:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d5a:	3b04      	subs	r3, #4
 8004d5c:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004d5e:	f107 0214 	add.w	r2, r7, #20
 8004d62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d64:	4413      	add	r3, r2
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d70:	3302      	adds	r3, #2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004d78:	440b      	add	r3, r1
 8004d7a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	4313      	orrs	r3, r2
 8004d82:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8004d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d86:	3b01      	subs	r3, #1
 8004d88:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004d8a:	f107 0214 	add.w	r2, r7, #20
 8004d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d90:	4413      	add	r3, r2
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004da4:	440b      	add	r3, r1
 8004da6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	4313      	orrs	r3, r2
 8004dae:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db2:	041a      	lsls	r2, r3, #16
 8004db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db6:	431a      	orrs	r2, r3
 8004db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dba:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d8c7      	bhi.n	8004d52 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3768      	adds	r7, #104	; 0x68
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	f107 030c 	add.w	r3, r7, #12
 8004dd8:	6018      	str	r0, [r3, #0]
 8004dda:	f107 0308 	add.w	r3, r7, #8
 8004dde:	6019      	str	r1, [r3, #0]
 8004de0:	1d3b      	adds	r3, r7, #4
 8004de2:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004de4:	f107 030c 	add.w	r3, r7, #12
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df0:	1d3a      	adds	r2, r7, #4
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d10a      	bne.n	8004e0e <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004df8:	f107 030c 	add.w	r3, r7, #12
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e08:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004e0c:	e016      	b.n	8004e3c <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004e0e:	f107 030c 	add.w	r3, r7, #12
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004e1a:	1d3a      	adds	r2, r7, #4
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d10a      	bne.n	8004e38 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004e22:	f107 030c 	add.w	r3, r7, #12
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004e2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e32:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004e36:	e001      	b.n	8004e3c <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e09c      	b.n	8004f76 <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8004e3c:	f107 0308 	add.w	r3, r7, #8
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8096 	beq.w	8004f74 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004e48:	f107 0214 	add.w	r2, r7, #20
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4611      	mov	r1, r2
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	f7ff fe51 	bl	8004afa <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8004e5e:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8004e66:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004e6a:	e084      	b.n	8004f76 <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004e6c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004e70:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004e7a:	e00e      	b.n	8004e9a <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8004e7c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004e80:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004e84:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004e86:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004e90:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004e94:	3301      	adds	r3, #1
 8004e96:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004e9a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d9ec      	bls.n	8004e7c <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8004ea2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004ea6:	4a36      	ldr	r2, [pc, #216]	; (8004f80 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8004ea8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004eaa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004eae:	3304      	adds	r3, #4
 8004eb0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8004eb4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004eb8:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <JPEG_Set_HuffAC_Mem+0x1b8>)
 8004eba:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004ebc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8004ec6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004eca:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <JPEG_Set_HuffAC_Mem+0x1bc>)
 8004ecc:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004ece:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004ed8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004edc:	4a2b      	ldr	r2, [pc, #172]	; (8004f8c <JPEG_Set_HuffAC_Mem+0x1c0>)
 8004ede:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004ee0:	23a2      	movs	r3, #162	; 0xa2
 8004ee2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8004ee6:	e041      	b.n	8004f6c <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8004ee8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004eec:	3b01      	subs	r3, #1
 8004eee:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8004ef2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004efc:	f107 0214 	add.w	r2, r7, #20
 8004f00:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004f04:	4413      	add	r3, r2
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004f0e:	f107 0114 	add.w	r1, r7, #20
 8004f12:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004f16:	3328      	adds	r3, #40	; 0x28
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004f26:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004f30:	f107 0214 	add.w	r2, r7, #20
 8004f34:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004f38:	4413      	add	r3, r2
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004f42:	f107 0114 	add.w	r1, r7, #20
 8004f46:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004f4a:	3328      	adds	r3, #40	; 0x28
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004f5a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8004f5e:	041a      	lsls	r2, r3, #16
 8004f60:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8004f64:	431a      	orrs	r2, r3
 8004f66:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004f6a:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004f6c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d8b9      	bhi.n	8004ee8 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	0fd10fd0 	.word	0x0fd10fd0
 8004f84:	0fd30fd2 	.word	0x0fd30fd2
 8004f88:	0fd50fd4 	.word	0x0fd50fd4
 8004f8c:	0fd70fd6 	.word	0x0fd70fd6

08004f90 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f84d 	bl	8005038 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	491f      	ldr	r1, [pc, #124]	; (8005028 <JPEG_Set_HuffEnc_Mem+0x98>)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ff0e 	bl	8004dcc <JPEG_Set_HuffAC_Mem>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	e030      	b.n	8005020 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4918      	ldr	r1, [pc, #96]	; (800502c <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fefe 	bl	8004dcc <JPEG_Set_HuffAC_Mem>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	e020      	b.n	8005020 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4911      	ldr	r1, [pc, #68]	; (8005030 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fe6a 	bl	8004cc4 <JPEG_Set_HuffDC_Mem>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	e010      	b.n	8005020 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8005006:	461a      	mov	r2, r3
 8005008:	490a      	ldr	r1, [pc, #40]	; (8005034 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fe5a 	bl	8004cc4 <JPEG_Set_HuffDC_Mem>
 8005010:	4603      	mov	r3, r0
 8005012:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	e000      	b.n	8005020 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	080110e8 	.word	0x080110e8
 800502c:	0801119c 	.word	0x0801119c
 8005030:	080110b0 	.word	0x080110b0
 8005034:	080110cc 	.word	0x080110cc

08005038 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8005038:	b480      	push	{r7}
 800503a:	b08b      	sub	sp, #44	; 0x2c
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8005040:	4b80      	ldr	r3, [pc, #512]	; (8005244 <JPEG_Set_Huff_DHTMem+0x20c>)
 8005042:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8005044:	4b80      	ldr	r3, [pc, #512]	; (8005248 <JPEG_Set_Huff_DHTMem+0x210>)
 8005046:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8005048:	4b80      	ldr	r3, [pc, #512]	; (800524c <JPEG_Set_Huff_DHTMem+0x214>)
 800504a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800504c:	4b80      	ldr	r3, [pc, #512]	; (8005250 <JPEG_Set_Huff_DHTMem+0x218>)
 800504e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005058:	330c      	adds	r3, #12
 800505a:	623b      	str	r3, [r7, #32]
  index = 16;
 800505c:	2310      	movs	r3, #16
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005060:	e01d      	b.n	800509e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	3b01      	subs	r3, #1
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	5cd3      	ldrb	r3, [r2, r3]
 800506a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	3b02      	subs	r3, #2
 8005070:	6979      	ldr	r1, [r7, #20]
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005076:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	3b03      	subs	r3, #3
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005082:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8005084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005086:	3a04      	subs	r2, #4
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800508c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	601a      	str	r2, [r3, #0]
    address--;
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	3b04      	subs	r3, #4
 8005096:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	3b04      	subs	r3, #4
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d8de      	bhi.n	8005062 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80050ac:	3318      	adds	r3, #24
 80050ae:	623b      	str	r3, [r7, #32]
  index = 12;
 80050b0:	230c      	movs	r3, #12
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050b4:	e021      	b.n	80050fa <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	3b01      	subs	r3, #1
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4413      	add	r3, r2
 80050be:	7c1b      	ldrb	r3, [r3, #16]
 80050c0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	3b02      	subs	r3, #2
 80050c6:	6979      	ldr	r1, [r7, #20]
 80050c8:	440b      	add	r3, r1
 80050ca:	7c1b      	ldrb	r3, [r3, #16]
 80050cc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80050ce:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	3b03      	subs	r3, #3
 80050d4:	6979      	ldr	r1, [r7, #20]
 80050d6:	440b      	add	r3, r1
 80050d8:	7c1b      	ldrb	r3, [r3, #16]
 80050da:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80050dc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	3a04      	subs	r2, #4
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	440a      	add	r2, r1
 80050e6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80050e8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	601a      	str	r2, [r3, #0]
    address--;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	3b04      	subs	r3, #4
 80050f2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	3b04      	subs	r3, #4
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d8da      	bhi.n	80050b6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005108:	3328      	adds	r3, #40	; 0x28
 800510a:	623b      	str	r3, [r7, #32]
  index = 16;
 800510c:	2310      	movs	r3, #16
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005110:	e01d      	b.n	800514e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	3b01      	subs	r3, #1
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	5cd3      	ldrb	r3, [r2, r3]
 800511a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	3b02      	subs	r3, #2
 8005120:	69f9      	ldr	r1, [r7, #28]
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005126:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	3b03      	subs	r3, #3
 800512c:	69f9      	ldr	r1, [r7, #28]
 800512e:	5ccb      	ldrb	r3, [r1, r3]
 8005130:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005132:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005136:	3a04      	subs	r2, #4
 8005138:	69f9      	ldr	r1, [r7, #28]
 800513a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800513c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	601a      	str	r2, [r3, #0]
    address--;
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	3b04      	subs	r3, #4
 8005146:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	3b04      	subs	r3, #4
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	2b03      	cmp	r3, #3
 8005152:	d8de      	bhi.n	8005112 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800515c:	33cc      	adds	r3, #204	; 0xcc
 800515e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b3b      	ldr	r3, [pc, #236]	; (8005254 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005166:	4013      	ands	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005170:	021a      	lsls	r2, r3, #8
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	3b04      	subs	r3, #4
 800518a:	623b      	str	r3, [r7, #32]
  index = 160;
 800518c:	23a0      	movs	r3, #160	; 0xa0
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005190:	e021      	b.n	80051d6 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	3b01      	subs	r3, #1
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	7c1b      	ldrb	r3, [r3, #16]
 800519c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	3b02      	subs	r3, #2
 80051a2:	69f9      	ldr	r1, [r7, #28]
 80051a4:	440b      	add	r3, r1
 80051a6:	7c1b      	ldrb	r3, [r3, #16]
 80051a8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80051aa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	3b03      	subs	r3, #3
 80051b0:	69f9      	ldr	r1, [r7, #28]
 80051b2:	440b      	add	r3, r1
 80051b4:	7c1b      	ldrb	r3, [r3, #16]
 80051b6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80051b8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	3a04      	subs	r2, #4
 80051be:	69f9      	ldr	r1, [r7, #28]
 80051c0:	440a      	add	r2, r1
 80051c2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80051c4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	601a      	str	r2, [r3, #0]
    address--;
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	3b04      	subs	r3, #4
 80051ce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	3b04      	subs	r3, #4
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d8da      	bhi.n	8005192 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80051e4:	33cc      	adds	r3, #204	; 0xcc
 80051e6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	061a      	lsls	r2, r3, #24
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005212:	33dc      	adds	r3, #220	; 0xdc
 8005214:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <JPEG_Set_Huff_DHTMem+0x21c>)
 800521c:	4013      	ands	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	7bdb      	ldrb	r3, [r3, #15]
 8005224:	021a      	lsls	r2, r3, #8
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	7b92      	ldrb	r2, [r2, #14]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	3b04      	subs	r3, #4
 800523c:	623b      	str	r3, [r7, #32]
  index = 12;
 800523e:	230c      	movs	r3, #12
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005242:	e027      	b.n	8005294 <JPEG_Set_Huff_DHTMem+0x25c>
 8005244:	080110e8 	.word	0x080110e8
 8005248:	0801119c 	.word	0x0801119c
 800524c:	080110b0 	.word	0x080110b0
 8005250:	080110cc 	.word	0x080110cc
 8005254:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	3301      	adds	r3, #1
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	5cd3      	ldrb	r3, [r2, r3]
 8005260:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005262:	6939      	ldr	r1, [r7, #16]
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	440b      	add	r3, r1
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800526c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	3b01      	subs	r3, #1
 8005272:	6939      	ldr	r1, [r7, #16]
 8005274:	5ccb      	ldrb	r3, [r1, r3]
 8005276:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005278:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800527a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527c:	3a02      	subs	r2, #2
 800527e:	6939      	ldr	r1, [r7, #16]
 8005280:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005282:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	601a      	str	r2, [r3, #0]
    address--;
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	3b04      	subs	r3, #4
 800528c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	3b04      	subs	r3, #4
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	2b03      	cmp	r3, #3
 8005298:	d8de      	bhi.n	8005258 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80052a2:	33dc      	adds	r3, #220	; 0xdc
 80052a4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	7c5b      	ldrb	r3, [r3, #17]
 80052b2:	061a      	lsls	r2, r3, #24
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	7c1b      	ldrb	r3, [r3, #16]
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80052d0:	33e8      	adds	r3, #232	; 0xe8
 80052d2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b6d      	ldr	r3, [pc, #436]	; (8005490 <JPEG_Set_Huff_DHTMem+0x458>)
 80052da:	4013      	ands	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	7edb      	ldrb	r3, [r3, #27]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	7e92      	ldrb	r2, [r2, #26]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  *address = value;
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	3b04      	subs	r3, #4
 80052fa:	623b      	str	r3, [r7, #32]
  index = 8;
 80052fc:	2308      	movs	r3, #8
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005300:	e021      	b.n	8005346 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	3301      	adds	r3, #1
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	7c1b      	ldrb	r3, [r3, #16]
 800530c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800530e:	6939      	ldr	r1, [r7, #16]
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	440b      	add	r3, r1
 8005314:	3310      	adds	r3, #16
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800531a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	3b01      	subs	r3, #1
 8005320:	6939      	ldr	r1, [r7, #16]
 8005322:	440b      	add	r3, r1
 8005324:	7c1b      	ldrb	r3, [r3, #16]
 8005326:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005328:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800532a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532c:	3a02      	subs	r2, #2
 800532e:	6939      	ldr	r1, [r7, #16]
 8005330:	440a      	add	r2, r1
 8005332:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005334:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	601a      	str	r2, [r3, #0]
    address--;
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	3b04      	subs	r3, #4
 800533e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	3b04      	subs	r3, #4
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2b03      	cmp	r3, #3
 800534a:	d8da      	bhi.n	8005302 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005354:	33e8      	adds	r3, #232	; 0xe8
 8005356:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	061a      	lsls	r2, r3, #24
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	431a      	orrs	r2, r3
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	041b      	lsls	r3, r3, #16
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005382:	33f8      	adds	r3, #248	; 0xf8
 8005384:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b41      	ldr	r3, [pc, #260]	; (8005490 <JPEG_Set_Huff_DHTMem+0x458>)
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	7bdb      	ldrb	r3, [r3, #15]
 8005394:	021a      	lsls	r2, r3, #8
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	7b92      	ldrb	r2, [r2, #14]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	3b04      	subs	r3, #4
 80053ac:	623b      	str	r3, [r7, #32]
  index = 12;
 80053ae:	230c      	movs	r3, #12
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80053b2:	e01d      	b.n	80053f0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	3301      	adds	r3, #1
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	440b      	add	r3, r1
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80053c8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	3b01      	subs	r3, #1
 80053ce:	69b9      	ldr	r1, [r7, #24]
 80053d0:	5ccb      	ldrb	r3, [r1, r3]
 80053d2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80053d4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	3a02      	subs	r2, #2
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80053de:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	601a      	str	r2, [r3, #0]
    address--;
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	3b04      	subs	r3, #4
 80053e8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	3b04      	subs	r3, #4
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d8de      	bhi.n	80053b4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80053fe:	33f8      	adds	r3, #248	; 0xf8
 8005400:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	7c5b      	ldrb	r3, [r3, #17]
 800540e:	061a      	lsls	r2, r3, #24
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	431a      	orrs	r2, r3
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	7c1b      	ldrb	r3, [r3, #16]
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800542c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8005430:	623b      	str	r3, [r7, #32]
  index = 160;
 8005432:	23a0      	movs	r3, #160	; 0xa0
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005436:	e021      	b.n	800547c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	3301      	adds	r3, #1
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4413      	add	r3, r2
 8005440:	7c1b      	ldrb	r3, [r3, #16]
 8005442:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005444:	69b9      	ldr	r1, [r7, #24]
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	440b      	add	r3, r1
 800544a:	3310      	adds	r3, #16
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005450:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	3b01      	subs	r3, #1
 8005456:	69b9      	ldr	r1, [r7, #24]
 8005458:	440b      	add	r3, r1
 800545a:	7c1b      	ldrb	r3, [r3, #16]
 800545c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800545e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005462:	3a02      	subs	r2, #2
 8005464:	69b9      	ldr	r1, [r7, #24]
 8005466:	440a      	add	r2, r1
 8005468:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800546a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	601a      	str	r2, [r3, #0]
    address--;
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	3b04      	subs	r3, #4
 8005474:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	3b04      	subs	r3, #4
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	2b03      	cmp	r3, #3
 8005480:	d8da      	bhi.n	8005438 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8005482:	bf00      	nop
 8005484:	372c      	adds	r7, #44	; 0x2c
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	ffff0000 	.word	0xffff0000

08005494 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d006      	beq.n	80054b0 <HAL_PWREx_ConfigSupply+0x1c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d003      	beq.n	80054b0 <HAL_PWREx_ConfigSupply+0x1c>
 80054a8:	21ef      	movs	r1, #239	; 0xef
 80054aa:	481a      	ldr	r0, [pc, #104]	; (8005514 <HAL_PWREx_ConfigSupply+0x80>)
 80054ac:	f7fb fe3c 	bl	8001128 <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_PWREx_ConfigSupply+0x84>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d008      	beq.n	80054ce <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054bc:	4b16      	ldr	r3, [pc, #88]	; (8005518 <HAL_PWREx_ConfigSupply+0x84>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d001      	beq.n	80054ce <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e01d      	b.n	800550a <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_PWREx_ConfigSupply+0x84>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f023 0207 	bic.w	r2, r3, #7
 80054d6:	4910      	ldr	r1, [pc, #64]	; (8005518 <HAL_PWREx_ConfigSupply+0x84>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054de:	f7fc fa63 	bl	80019a8 <HAL_GetTick>
 80054e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80054e4:	e009      	b.n	80054fa <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80054e6:	f7fc fa5f 	bl	80019a8 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f4:	d901      	bls.n	80054fa <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e007      	b.n	800550a <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <HAL_PWREx_ConfigSupply+0x84>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005506:	d1ee      	bne.n	80054e6 <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	08010b54 	.word	0x08010b54
 8005518:	58024800 	.word	0x58024800

0800551c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f000 bcc9 	b.w	8005ec2 <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d028      	beq.n	800558a <HAL_RCC_OscConfig+0x6e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d122      	bne.n	800558a <HAL_RCC_OscConfig+0x6e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d11c      	bne.n	800558a <HAL_RCC_OscConfig+0x6e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d116      	bne.n	800558a <HAL_RCC_OscConfig+0x6e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d110      	bne.n	800558a <HAL_RCC_OscConfig+0x6e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <HAL_RCC_OscConfig+0x6e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <HAL_RCC_OscConfig+0x6e>
 8005580:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8005584:	48a2      	ldr	r0, [pc, #648]	; (8005810 <HAL_RCC_OscConfig+0x2f4>)
 8005586:	f7fb fdcf 	bl	8001128 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 809d 	beq.w	80056d2 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00e      	beq.n	80055be <HAL_RCC_OscConfig+0xa2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d009      	beq.n	80055be <HAL_RCC_OscConfig+0xa2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b2:	d004      	beq.n	80055be <HAL_RCC_OscConfig+0xa2>
 80055b4:	f240 1175 	movw	r1, #373	; 0x175
 80055b8:	4895      	ldr	r0, [pc, #596]	; (8005810 <HAL_RCC_OscConfig+0x2f4>)
 80055ba:	f7fb fdb5 	bl	8001128 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055be:	4b95      	ldr	r3, [pc, #596]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055c8:	4b92      	ldr	r3, [pc, #584]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d007      	beq.n	80055e4 <HAL_RCC_OscConfig+0xc8>
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	2b18      	cmp	r3, #24
 80055d8:	d111      	bne.n	80055fe <HAL_RCC_OscConfig+0xe2>
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d10c      	bne.n	80055fe <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e4:	4b8b      	ldr	r3, [pc, #556]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d06f      	beq.n	80056d0 <HAL_RCC_OscConfig+0x1b4>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d16b      	bne.n	80056d0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f000 bc62 	b.w	8005ec2 <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005606:	d106      	bne.n	8005616 <HAL_RCC_OscConfig+0xfa>
 8005608:	4b82      	ldr	r3, [pc, #520]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a81      	ldr	r2, [pc, #516]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800560e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	e02e      	b.n	8005674 <HAL_RCC_OscConfig+0x158>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0x11c>
 800561e:	4b7d      	ldr	r3, [pc, #500]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a7c      	ldr	r2, [pc, #496]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b7a      	ldr	r3, [pc, #488]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a79      	ldr	r2, [pc, #484]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e01d      	b.n	8005674 <HAL_RCC_OscConfig+0x158>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x140>
 8005642:	4b74      	ldr	r3, [pc, #464]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a73      	ldr	r2, [pc, #460]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4b71      	ldr	r3, [pc, #452]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a70      	ldr	r2, [pc, #448]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e00b      	b.n	8005674 <HAL_RCC_OscConfig+0x158>
 800565c:	4b6d      	ldr	r3, [pc, #436]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6c      	ldr	r2, [pc, #432]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	4b6a      	ldr	r3, [pc, #424]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a69      	ldr	r2, [pc, #420]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800566e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d014      	beq.n	80056a6 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fc f994 	bl	80019a8 <HAL_GetTick>
 8005680:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005682:	e009      	b.n	8005698 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005684:	f7fc f990 	bl	80019a8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d902      	bls.n	8005698 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	f000 bc15 	b.w	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005698:	4b5e      	ldr	r3, [pc, #376]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ef      	beq.n	8005684 <HAL_RCC_OscConfig+0x168>
 80056a4:	e015      	b.n	80056d2 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fc f97f 	bl	80019a8 <HAL_GetTick>
 80056aa:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056ac:	e009      	b.n	80056c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ae:	f7fc f97b 	bl	80019a8 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b64      	cmp	r3, #100	; 0x64
 80056ba:	d902      	bls.n	80056c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	f000 bc00 	b.w	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056c2:	4b54      	ldr	r3, [pc, #336]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1ef      	bne.n	80056ae <HAL_RCC_OscConfig+0x192>
 80056ce:	e000      	b.n	80056d2 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80d8 	beq.w	8005890 <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d018      	beq.n	800571a <HAL_RCC_OscConfig+0x1fe>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d014      	beq.n	800571a <HAL_RCC_OscConfig+0x1fe>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d010      	beq.n	800571a <HAL_RCC_OscConfig+0x1fe>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b09      	cmp	r3, #9
 80056fe:	d00c      	beq.n	800571a <HAL_RCC_OscConfig+0x1fe>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b11      	cmp	r3, #17
 8005706:	d008      	beq.n	800571a <HAL_RCC_OscConfig+0x1fe>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b19      	cmp	r3, #25
 800570e:	d004      	beq.n	800571a <HAL_RCC_OscConfig+0x1fe>
 8005710:	f240 11a9 	movw	r1, #425	; 0x1a9
 8005714:	483e      	ldr	r0, [pc, #248]	; (8005810 <HAL_RCC_OscConfig+0x2f4>)
 8005716:	f7fb fd07 	bl	8001128 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b7f      	cmp	r3, #127	; 0x7f
 8005720:	d904      	bls.n	800572c <HAL_RCC_OscConfig+0x210>
 8005722:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005726:	483a      	ldr	r0, [pc, #232]	; (8005810 <HAL_RCC_OscConfig+0x2f4>)
 8005728:	f7fb fcfe 	bl	8001128 <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800572c:	4b39      	ldr	r3, [pc, #228]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005734:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005736:	4b37      	ldr	r3, [pc, #220]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_RCC_OscConfig+0x236>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b18      	cmp	r3, #24
 8005746:	d149      	bne.n	80057dc <HAL_RCC_OscConfig+0x2c0>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d144      	bne.n	80057dc <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005752:	4b30      	ldr	r3, [pc, #192]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_RCC_OscConfig+0x24e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e3ab      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800576a:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 0219 	bic.w	r2, r3, #25
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4927      	ldr	r1, [pc, #156]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005778:	4313      	orrs	r3, r2
 800577a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fc f914 	bl	80019a8 <HAL_GetTick>
 8005780:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005784:	f7fc f910 	bl	80019a8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e395      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a2:	f7fc f92f 	bl	8001a04 <HAL_GetREVID>
 80057a6:	4602      	mov	r2, r0
 80057a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d80a      	bhi.n	80057c6 <HAL_RCC_OscConfig+0x2aa>
 80057b0:	4b18      	ldr	r3, [pc, #96]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	031b      	lsls	r3, r3, #12
 80057be:	4915      	ldr	r1, [pc, #84]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c4:	e064      	b.n	8005890 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	061b      	lsls	r3, r3, #24
 80057d4:	490f      	ldr	r1, [pc, #60]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057da:	e059      	b.n	8005890 <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d03c      	beq.n	800585e <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f023 0219 	bic.w	r2, r3, #25
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4908      	ldr	r1, [pc, #32]	; (8005814 <HAL_RCC_OscConfig+0x2f8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f6:	f7fc f8d7 	bl	80019a8 <HAL_GetTick>
 80057fa:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057fc:	e00c      	b.n	8005818 <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057fe:	f7fc f8d3 	bl	80019a8 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d905      	bls.n	8005818 <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e358      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
 8005810:	08010b90 	.word	0x08010b90
 8005814:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005818:	4b95      	ldr	r3, [pc, #596]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ec      	beq.n	80057fe <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005824:	f7fc f8ee 	bl	8001a04 <HAL_GetREVID>
 8005828:	4602      	mov	r2, r0
 800582a:	f241 0303 	movw	r3, #4099	; 0x1003
 800582e:	429a      	cmp	r2, r3
 8005830:	d80a      	bhi.n	8005848 <HAL_RCC_OscConfig+0x32c>
 8005832:	4b8f      	ldr	r3, [pc, #572]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	031b      	lsls	r3, r3, #12
 8005840:	498b      	ldr	r1, [pc, #556]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005842:	4313      	orrs	r3, r2
 8005844:	604b      	str	r3, [r1, #4]
 8005846:	e023      	b.n	8005890 <HAL_RCC_OscConfig+0x374>
 8005848:	4b89      	ldr	r3, [pc, #548]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	4986      	ldr	r1, [pc, #536]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005858:	4313      	orrs	r3, r2
 800585a:	604b      	str	r3, [r1, #4]
 800585c:	e018      	b.n	8005890 <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800585e:	4b84      	ldr	r3, [pc, #528]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a83      	ldr	r2, [pc, #524]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fc f89d 	bl	80019a8 <HAL_GetTick>
 800586e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005872:	f7fc f899 	bl	80019a8 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e31e      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005884:	4b7a      	ldr	r3, [pc, #488]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f0      	bne.n	8005872 <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80a5 	beq.w	80059e8 <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_RCC_OscConfig+0x39c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d004      	beq.n	80058b8 <HAL_RCC_OscConfig+0x39c>
 80058ae:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 80058b2:	4870      	ldr	r0, [pc, #448]	; (8005a74 <HAL_RCC_OscConfig+0x558>)
 80058b4:	f7fb fc38 	bl	8001128 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	2b1f      	cmp	r3, #31
 80058be:	d904      	bls.n	80058ca <HAL_RCC_OscConfig+0x3ae>
 80058c0:	f240 11fb 	movw	r1, #507	; 0x1fb
 80058c4:	486b      	ldr	r0, [pc, #428]	; (8005a74 <HAL_RCC_OscConfig+0x558>)
 80058c6:	f7fb fc2f 	bl	8001128 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ca:	4b69      	ldr	r3, [pc, #420]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058d2:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058d4:	4b66      	ldr	r3, [pc, #408]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d007      	beq.n	80058f0 <HAL_RCC_OscConfig+0x3d4>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2b18      	cmp	r3, #24
 80058e4:	d12d      	bne.n	8005942 <HAL_RCC_OscConfig+0x426>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d128      	bne.n	8005942 <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058f0:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_OscConfig+0x3ec>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	2b80      	cmp	r3, #128	; 0x80
 8005902:	d001      	beq.n	8005908 <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e2dc      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005908:	f7fc f87c 	bl	8001a04 <HAL_GetREVID>
 800590c:	4602      	mov	r2, r0
 800590e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005912:	429a      	cmp	r2, r3
 8005914:	d80a      	bhi.n	800592c <HAL_RCC_OscConfig+0x410>
 8005916:	4b56      	ldr	r3, [pc, #344]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	069b      	lsls	r3, r3, #26
 8005924:	4952      	ldr	r1, [pc, #328]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005926:	4313      	orrs	r3, r2
 8005928:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800592a:	e05d      	b.n	80059e8 <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800592c:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	061b      	lsls	r3, r3, #24
 800593a:	494d      	ldr	r1, [pc, #308]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 800593c:	4313      	orrs	r3, r2
 800593e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005940:	e052      	b.n	80059e8 <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d035      	beq.n	80059b6 <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800594a:	4b49      	ldr	r3, [pc, #292]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a48      	ldr	r2, [pc, #288]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005956:	f7fc f827 	bl	80019a8 <HAL_GetTick>
 800595a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800595e:	f7fc f823 	bl	80019a8 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e2a8      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005970:	4b3f      	ldr	r3, [pc, #252]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800597c:	f7fc f842 	bl	8001a04 <HAL_GetREVID>
 8005980:	4602      	mov	r2, r0
 8005982:	f241 0303 	movw	r3, #4099	; 0x1003
 8005986:	429a      	cmp	r2, r3
 8005988:	d80a      	bhi.n	80059a0 <HAL_RCC_OscConfig+0x484>
 800598a:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	069b      	lsls	r3, r3, #26
 8005998:	4935      	ldr	r1, [pc, #212]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 800599a:	4313      	orrs	r3, r2
 800599c:	604b      	str	r3, [r1, #4]
 800599e:	e023      	b.n	80059e8 <HAL_RCC_OscConfig+0x4cc>
 80059a0:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	061b      	lsls	r3, r3, #24
 80059ae:	4930      	ldr	r1, [pc, #192]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60cb      	str	r3, [r1, #12]
 80059b4:	e018      	b.n	80059e8 <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059b6:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 80059bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fb fff1 	bl	80019a8 <HAL_GetTick>
 80059c6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059ca:	f7fb ffed 	bl	80019a8 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e272      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059dc:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f0      	bne.n	80059ca <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d047      	beq.n	8005a84 <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_RCC_OscConfig+0x4f2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d004      	beq.n	8005a0e <HAL_RCC_OscConfig+0x4f2>
 8005a04:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8005a08:	481a      	ldr	r0, [pc, #104]	; (8005a74 <HAL_RCC_OscConfig+0x558>)
 8005a0a:	f7fb fb8d 	bl	8001128 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d019      	beq.n	8005a4a <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1a:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a22:	f7fb ffc1 	bl	80019a8 <HAL_GetTick>
 8005a26:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a2a:	f7fb ffbd 	bl	80019a8 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e242      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x50e>
 8005a48:	e01c      	b.n	8005a84 <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <HAL_RCC_OscConfig+0x554>)
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fb ffa7 	bl	80019a8 <HAL_GetTick>
 8005a5a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a5c:	e00c      	b.n	8005a78 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a5e:	f7fb ffa3 	bl	80019a8 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d905      	bls.n	8005a78 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e228      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
 8005a70:	58024400 	.word	0x58024400
 8005a74:	08010b90 	.word	0x08010b90
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a78:	4b71      	ldr	r3, [pc, #452]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ec      	bne.n	8005a5e <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d043      	beq.n	8005b18 <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <HAL_RCC_OscConfig+0x58e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d004      	beq.n	8005aaa <HAL_RCC_OscConfig+0x58e>
 8005aa0:	f240 2167 	movw	r1, #615	; 0x267
 8005aa4:	4867      	ldr	r0, [pc, #412]	; (8005c44 <HAL_RCC_OscConfig+0x728>)
 8005aa6:	f7fb fb3f 	bl	8001128 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d019      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ab2:	4b63      	ldr	r3, [pc, #396]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a62      	ldr	r2, [pc, #392]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005abc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005abe:	f7fb ff73 	bl	80019a8 <HAL_GetTick>
 8005ac2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ac6:	f7fb ff6f 	bl	80019a8 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e1f4      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ad8:	4b59      	ldr	r3, [pc, #356]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x5aa>
 8005ae4:	e018      	b.n	8005b18 <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ae6:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a55      	ldr	r2, [pc, #340]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005af2:	f7fb ff59 	bl	80019a8 <HAL_GetTick>
 8005af6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005afa:	f7fb ff55 	bl	80019a8 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e1da      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b0c:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f0      	bne.n	8005afa <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8099 	beq.w	8005c58 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00c      	beq.n	8005b48 <HAL_RCC_OscConfig+0x62c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d008      	beq.n	8005b48 <HAL_RCC_OscConfig+0x62c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d004      	beq.n	8005b48 <HAL_RCC_OscConfig+0x62c>
 8005b3e:	f240 2191 	movw	r1, #657	; 0x291
 8005b42:	4840      	ldr	r0, [pc, #256]	; (8005c44 <HAL_RCC_OscConfig+0x728>)
 8005b44:	f7fb faf0 	bl	8001128 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b48:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <HAL_RCC_OscConfig+0x72c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3e      	ldr	r2, [pc, #248]	; (8005c48 <HAL_RCC_OscConfig+0x72c>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b54:	f7fb ff28 	bl	80019a8 <HAL_GetTick>
 8005b58:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b5c:	f7fb ff24 	bl	80019a8 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	; 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e1a9      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b6e:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCC_OscConfig+0x72c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d106      	bne.n	8005b90 <HAL_RCC_OscConfig+0x674>
 8005b82:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	4a2e      	ldr	r2, [pc, #184]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8e:	e02d      	b.n	8005bec <HAL_RCC_OscConfig+0x6d0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10c      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x696>
 8005b98:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9c:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005b9e:	f023 0301 	bic.w	r3, r3, #1
 8005ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba4:	4b26      	ldr	r3, [pc, #152]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4a25      	ldr	r2, [pc, #148]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005baa:	f023 0304 	bic.w	r3, r3, #4
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb0:	e01c      	b.n	8005bec <HAL_RCC_OscConfig+0x6d0>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x6b8>
 8005bba:	4b21      	ldr	r3, [pc, #132]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005bc0:	f043 0304 	orr.w	r3, r3, #4
 8005bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc6:	4b1e      	ldr	r3, [pc, #120]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd2:	e00b      	b.n	8005bec <HAL_RCC_OscConfig+0x6d0>
 8005bd4:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	6713      	str	r3, [r2, #112]	; 0x70
 8005be0:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005be6:	f023 0304 	bic.w	r3, r3, #4
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf4:	f7fb fed8 	bl	80019a8 <HAL_GetTick>
 8005bf8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bfc:	f7fb fed4 	bl	80019a8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e157      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_RCC_OscConfig+0x724>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0ee      	beq.n	8005bfc <HAL_RCC_OscConfig+0x6e0>
 8005c1e:	e01b      	b.n	8005c58 <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fb fec2 	bl	80019a8 <HAL_GetTick>
 8005c24:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c26:	e011      	b.n	8005c4c <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c28:	f7fb febe 	bl	80019a8 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d908      	bls.n	8005c4c <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e141      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
 8005c3e:	bf00      	nop
 8005c40:	58024400 	.word	0x58024400
 8005c44:	08010b90 	.word	0x08010b90
 8005c48:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c4c:	4b9f      	ldr	r3, [pc, #636]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e7      	bne.n	8005c28 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00c      	beq.n	8005c7a <HAL_RCC_OscConfig+0x75e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d008      	beq.n	8005c7a <HAL_RCC_OscConfig+0x75e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d004      	beq.n	8005c7a <HAL_RCC_OscConfig+0x75e>
 8005c70:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005c74:	4896      	ldr	r0, [pc, #600]	; (8005ed0 <HAL_RCC_OscConfig+0x9b4>)
 8005c76:	f7fb fa57 	bl	8001128 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 811e 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c84:	4b91      	ldr	r3, [pc, #580]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c8c:	2b18      	cmp	r3, #24
 8005c8e:	f000 8115 	beq.w	8005ebc <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	f040 80f6 	bne.w	8005e88 <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d010      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x7aa>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00c      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x7aa>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d008      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x7aa>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x7aa>
 8005cbc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005cc0:	4883      	ldr	r0, [pc, #524]	; (8005ed0 <HAL_RCC_OscConfig+0x9b4>)
 8005cc2:	f7fb fa31 	bl	8001128 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x7ba>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	2b3f      	cmp	r3, #63	; 0x3f
 8005cd4:	d904      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x7c4>
 8005cd6:	f240 21cd 	movw	r1, #717	; 0x2cd
 8005cda:	487d      	ldr	r0, [pc, #500]	; (8005ed0 <HAL_RCC_OscConfig+0x9b4>)
 8005cdc:	f7fb fa24 	bl	8001128 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d904      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x7d6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d904      	bls.n	8005cfc <HAL_RCC_OscConfig+0x7e0>
 8005cf2:	f240 21ce 	movw	r1, #718	; 0x2ce
 8005cf6:	4876      	ldr	r0, [pc, #472]	; (8005ed0 <HAL_RCC_OscConfig+0x9b4>)
 8005cf8:	f7fb fa16 	bl	8001128 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_RCC_OscConfig+0x7f0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d904      	bls.n	8005d16 <HAL_RCC_OscConfig+0x7fa>
 8005d0c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005d10:	486f      	ldr	r0, [pc, #444]	; (8005ed0 <HAL_RCC_OscConfig+0x9b4>)
 8005d12:	f7fb fa09 	bl	8001128 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_OscConfig+0x80a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	2b80      	cmp	r3, #128	; 0x80
 8005d24:	d904      	bls.n	8005d30 <HAL_RCC_OscConfig+0x814>
 8005d26:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8005d2a:	4869      	ldr	r0, [pc, #420]	; (8005ed0 <HAL_RCC_OscConfig+0x9b4>)
 8005d2c:	f7fb f9fc 	bl	8001128 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_RCC_OscConfig+0x824>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3c:	2b80      	cmp	r3, #128	; 0x80
 8005d3e:	d904      	bls.n	8005d4a <HAL_RCC_OscConfig+0x82e>
 8005d40:	f240 21d1 	movw	r1, #721	; 0x2d1
 8005d44:	4862      	ldr	r0, [pc, #392]	; (8005ed0 <HAL_RCC_OscConfig+0x9b4>)
 8005d46:	f7fb f9ef 	bl	8001128 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d52:	d304      	bcc.n	8005d5e <HAL_RCC_OscConfig+0x842>
 8005d54:	f240 21d2 	movw	r1, #722	; 0x2d2
 8005d58:	485d      	ldr	r0, [pc, #372]	; (8005ed0 <HAL_RCC_OscConfig+0x9b4>)
 8005d5a:	f7fb f9e5 	bl	8001128 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5e:	4b5b      	ldr	r3, [pc, #364]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5a      	ldr	r2, [pc, #360]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6a:	f7fb fe1d 	bl	80019a8 <HAL_GetTick>
 8005d6e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d72:	f7fb fe19 	bl	80019a8 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e09e      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d84:	4b51      	ldr	r3, [pc, #324]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1f0      	bne.n	8005d72 <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d90:	4b4e      	ldr	r3, [pc, #312]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d94:	4b4f      	ldr	r3, [pc, #316]	; (8005ed4 <HAL_RCC_OscConfig+0x9b8>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005da0:	0112      	lsls	r2, r2, #4
 8005da2:	430a      	orrs	r2, r1
 8005da4:	4949      	ldr	r1, [pc, #292]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	628b      	str	r3, [r1, #40]	; 0x28
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	3b01      	subs	r3, #1
 8005db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	3b01      	subs	r3, #1
 8005dba:	025b      	lsls	r3, r3, #9
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	061b      	lsls	r3, r3, #24
 8005dd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005dda:	493c      	ldr	r1, [pc, #240]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005de0:	4b3a      	ldr	r3, [pc, #232]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	4a39      	ldr	r2, [pc, #228]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005dec:	4b37      	ldr	r3, [pc, #220]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df0:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <HAL_RCC_OscConfig+0x9bc>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005df8:	00d2      	lsls	r2, r2, #3
 8005dfa:	4934      	ldr	r1, [pc, #208]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e00:	4b32      	ldr	r3, [pc, #200]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	f023 020c 	bic.w	r2, r3, #12
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	492f      	ldr	r1, [pc, #188]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e12:	4b2e      	ldr	r3, [pc, #184]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	f023 0202 	bic.w	r2, r3, #2
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1e:	492b      	ldr	r1, [pc, #172]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e24:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	4a28      	ldr	r2, [pc, #160]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e30:	4b26      	ldr	r3, [pc, #152]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	4a25      	ldr	r2, [pc, #148]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e3c:	4b23      	ldr	r3, [pc, #140]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005e48:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e54:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1c      	ldr	r2, [pc, #112]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fb fda2 	bl	80019a8 <HAL_GetTick>
 8005e64:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e68:	f7fb fd9e 	bl	80019a8 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e023      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e7a:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x94c>
 8005e86:	e01b      	b.n	8005ec0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e88:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a0f      	ldr	r2, [pc, #60]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fb fd88 	bl	80019a8 <HAL_GetTick>
 8005e98:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e9c:	f7fb fd84 	bl	80019a8 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e009      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <HAL_RCC_OscConfig+0x9b0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x980>
 8005eba:	e001      	b.n	8005ec0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3728      	adds	r7, #40	; 0x28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	08010b90 	.word	0x08010b90
 8005ed4:	fffffc0c 	.word	0xfffffc0c
 8005ed8:	ffff0007 	.word	0xffff0007

08005edc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e345      	b.n	800657c <HAL_RCC_ClockConfig+0x6a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x24>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b3f      	cmp	r3, #63	; 0x3f
 8005efe:	d904      	bls.n	8005f0a <HAL_RCC_ClockConfig+0x2e>
 8005f00:	f240 3152 	movw	r1, #850	; 0x352
 8005f04:	4827      	ldr	r0, [pc, #156]	; (8005fa4 <HAL_RCC_ClockConfig+0xc8>)
 8005f06:	f7fb f90f 	bl	8001128 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d031      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d02e      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d02b      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d028      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d025      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	d022      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d01f      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b07      	cmp	r3, #7
 8005f38:	d01c      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d019      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b09      	cmp	r3, #9
 8005f44:	d016      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b0a      	cmp	r3, #10
 8005f4a:	d013      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b0b      	cmp	r3, #11
 8005f50:	d010      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	d00d      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b0d      	cmp	r3, #13
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b0e      	cmp	r3, #14
 8005f62:	d007      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b0f      	cmp	r3, #15
 8005f68:	d004      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x98>
 8005f6a:	f240 3153 	movw	r1, #851	; 0x353
 8005f6e:	480d      	ldr	r0, [pc, #52]	; (8005fa4 <HAL_RCC_ClockConfig+0xc8>)
 8005f70:	f7fb f8da 	bl	8001128 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <HAL_RCC_ClockConfig+0xcc>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d914      	bls.n	8005fac <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_ClockConfig+0xcc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 020f 	bic.w	r2, r3, #15
 8005f8a:	4907      	ldr	r1, [pc, #28]	; (8005fa8 <HAL_RCC_ClockConfig+0xcc>)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <HAL_RCC_ClockConfig+0xcc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e2eb      	b.n	800657c <HAL_RCC_ClockConfig+0x6a0>
 8005fa4:	08010b90 	.word	0x08010b90
 8005fa8:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d029      	beq.n	800600c <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	4b9a      	ldr	r3, [pc, #616]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d921      	bls.n	800600c <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d014      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x11e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d010      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x11e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b50      	cmp	r3, #80	; 0x50
 8005fde:	d00c      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x11e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b60      	cmp	r3, #96	; 0x60
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x11e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d004      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x11e>
 8005ff0:	f240 316e 	movw	r1, #878	; 0x36e
 8005ff4:	488d      	ldr	r0, [pc, #564]	; (800622c <HAL_RCC_ClockConfig+0x350>)
 8005ff6:	f7fb f897 	bl	8001128 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ffa:	4b8b      	ldr	r3, [pc, #556]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	4988      	ldr	r1, [pc, #544]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 8006008:	4313      	orrs	r3, r2
 800600a:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d029      	beq.n	800606c <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	4b82      	ldr	r3, [pc, #520]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006024:	429a      	cmp	r2, r3
 8006026:	d921      	bls.n	800606c <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d014      	beq.n	800605a <HAL_RCC_ClockConfig+0x17e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d010      	beq.n	800605a <HAL_RCC_ClockConfig+0x17e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	2b50      	cmp	r3, #80	; 0x50
 800603e:	d00c      	beq.n	800605a <HAL_RCC_ClockConfig+0x17e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	2b60      	cmp	r3, #96	; 0x60
 8006046:	d008      	beq.n	800605a <HAL_RCC_ClockConfig+0x17e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b70      	cmp	r3, #112	; 0x70
 800604e:	d004      	beq.n	800605a <HAL_RCC_ClockConfig+0x17e>
 8006050:	f44f 715e 	mov.w	r1, #888	; 0x378
 8006054:	4875      	ldr	r0, [pc, #468]	; (800622c <HAL_RCC_ClockConfig+0x350>)
 8006056:	f7fb f867 	bl	8001128 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800605a:	4b73      	ldr	r3, [pc, #460]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	4970      	ldr	r1, [pc, #448]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 8006068:	4313      	orrs	r3, r2
 800606a:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	d02d      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006084:	429a      	cmp	r2, r3
 8006086:	d925      	bls.n	80060d4 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d018      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x1e6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006098:	d013      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x1e6>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80060a2:	d00e      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x1e6>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060ac:	d009      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x1e6>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b6:	d004      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x1e6>
 80060b8:	f240 3182 	movw	r1, #898	; 0x382
 80060bc:	485b      	ldr	r0, [pc, #364]	; (800622c <HAL_RCC_ClockConfig+0x350>)
 80060be:	f7fb f833 	bl	8001128 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060c2:	4b59      	ldr	r3, [pc, #356]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	4956      	ldr	r1, [pc, #344]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d029      	beq.n	8006134 <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69da      	ldr	r2, [r3, #28]
 80060e4:	4b50      	ldr	r3, [pc, #320]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d921      	bls.n	8006134 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d014      	beq.n	8006122 <HAL_RCC_ClockConfig+0x246>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d010      	beq.n	8006122 <HAL_RCC_ClockConfig+0x246>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	2b50      	cmp	r3, #80	; 0x50
 8006106:	d00c      	beq.n	8006122 <HAL_RCC_ClockConfig+0x246>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	2b60      	cmp	r3, #96	; 0x60
 800610e:	d008      	beq.n	8006122 <HAL_RCC_ClockConfig+0x246>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	2b70      	cmp	r3, #112	; 0x70
 8006116:	d004      	beq.n	8006122 <HAL_RCC_ClockConfig+0x246>
 8006118:	f44f 7163 	mov.w	r1, #908	; 0x38c
 800611c:	4843      	ldr	r0, [pc, #268]	; (800622c <HAL_RCC_ClockConfig+0x350>)
 800611e:	f7fb f803 	bl	8001128 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006122:	4b41      	ldr	r3, [pc, #260]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	493e      	ldr	r1, [pc, #248]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d039      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	4b38      	ldr	r3, [pc, #224]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	429a      	cmp	r2, r3
 800614e:	d931      	bls.n	80061b4 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d024      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b08      	cmp	r3, #8
 800615e:	d020      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b09      	cmp	r3, #9
 8006166:	d01c      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b0a      	cmp	r3, #10
 800616e:	d018      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	2b0b      	cmp	r3, #11
 8006176:	d014      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d010      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2b0d      	cmp	r3, #13
 8006186:	d00c      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b0e      	cmp	r3, #14
 800618e:	d008      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b0f      	cmp	r3, #15
 8006196:	d004      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2c6>
 8006198:	f240 3197 	movw	r1, #919	; 0x397
 800619c:	4823      	ldr	r0, [pc, #140]	; (800622c <HAL_RCC_ClockConfig+0x350>)
 800619e:	f7fa ffc3 	bl	8001128 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a2:	4b21      	ldr	r3, [pc, #132]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f023 020f 	bic.w	r2, r3, #15
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	491e      	ldr	r1, [pc, #120]	; (8006228 <HAL_RCC_ClockConfig+0x34c>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80a2 	beq.w	8006306 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d032      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d2:	d02d      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80061dc:	d028      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80061e6:	d023      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80061f0:	d01e      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061fa:	d019      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8006204:	d014      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800620e:	d00f      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006218:	d00a      	beq.n	8006230 <HAL_RCC_ClockConfig+0x354>
 800621a:	f240 319f 	movw	r1, #927	; 0x39f
 800621e:	4803      	ldr	r0, [pc, #12]	; (800622c <HAL_RCC_ClockConfig+0x350>)
 8006220:	f7fa ff82 	bl	8001128 <assert_failed>
 8006224:	e004      	b.n	8006230 <HAL_RCC_ClockConfig+0x354>
 8006226:	bf00      	nop
 8006228:	58024400 	.word	0x58024400
 800622c:	08010b90 	.word	0x08010b90
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d010      	beq.n	800625a <HAL_RCC_ClockConfig+0x37e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00c      	beq.n	800625a <HAL_RCC_ClockConfig+0x37e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d008      	beq.n	800625a <HAL_RCC_ClockConfig+0x37e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b03      	cmp	r3, #3
 800624e:	d004      	beq.n	800625a <HAL_RCC_ClockConfig+0x37e>
 8006250:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8006254:	4858      	ldr	r0, [pc, #352]	; (80063b8 <HAL_RCC_ClockConfig+0x4dc>)
 8006256:	f7fa ff67 	bl	8001128 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800625a:	4b58      	ldr	r3, [pc, #352]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	4955      	ldr	r1, [pc, #340]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 8006268:	4313      	orrs	r3, r2
 800626a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d107      	bne.n	8006284 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006274:	4b51      	ldr	r3, [pc, #324]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d121      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e17b      	b.n	800657c <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b03      	cmp	r3, #3
 800628a:	d107      	bne.n	800629c <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800628c:	4b4b      	ldr	r3, [pc, #300]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d115      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e16f      	b.n	800657c <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d107      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062a4:	4b45      	ldr	r3, [pc, #276]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e163      	b.n	800657c <HAL_RCC_ClockConfig+0x6a0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062b4:	4b41      	ldr	r3, [pc, #260]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e15b      	b.n	800657c <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062c4:	4b3d      	ldr	r3, [pc, #244]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f023 0207 	bic.w	r2, r3, #7
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	493a      	ldr	r1, [pc, #232]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d6:	f7fb fb67 	bl	80019a8 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062dc:	e00a      	b.n	80062f4 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062de:	f7fb fb63 	bl	80019a8 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e143      	b.n	800657c <HAL_RCC_ClockConfig+0x6a0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f4:	4b31      	ldr	r3, [pc, #196]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	429a      	cmp	r2, r3
 8006304:	d1eb      	bne.n	80062de <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d039      	beq.n	8006386 <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	429a      	cmp	r2, r3
 8006320:	d231      	bcs.n	8006386 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d024      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2b08      	cmp	r3, #8
 8006330:	d020      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b09      	cmp	r3, #9
 8006338:	d01c      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	2b0a      	cmp	r3, #10
 8006340:	d018      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b0b      	cmp	r3, #11
 8006348:	d014      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b0c      	cmp	r3, #12
 8006350:	d010      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b0d      	cmp	r3, #13
 8006358:	d00c      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b0e      	cmp	r3, #14
 8006360:	d008      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d004      	beq.n	8006374 <HAL_RCC_ClockConfig+0x498>
 800636a:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 800636e:	4812      	ldr	r0, [pc, #72]	; (80063b8 <HAL_RCC_ClockConfig+0x4dc>)
 8006370:	f7fa feda 	bl	8001128 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006374:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f023 020f 	bic.w	r2, r3, #15
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	490e      	ldr	r1, [pc, #56]	; (80063bc <HAL_RCC_ClockConfig+0x4e0>)
 8006382:	4313      	orrs	r3, r2
 8006384:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <HAL_RCC_ClockConfig+0x4e4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d217      	bcs.n	80063c4 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <HAL_RCC_ClockConfig+0x4e4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f023 020f 	bic.w	r2, r3, #15
 800639c:	4908      	ldr	r1, [pc, #32]	; (80063c0 <HAL_RCC_ClockConfig+0x4e4>)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_RCC_ClockConfig+0x4e4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d008      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0e2      	b.n	800657c <HAL_RCC_ClockConfig+0x6a0>
 80063b6:	bf00      	nop
 80063b8:	08010b90 	.word	0x08010b90
 80063bc:	58024400 	.word	0x58024400
 80063c0:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d029      	beq.n	8006424 <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	4b6b      	ldr	r3, [pc, #428]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063dc:	429a      	cmp	r2, r3
 80063de:	d221      	bcs.n	8006424 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d014      	beq.n	8006412 <HAL_RCC_ClockConfig+0x536>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d010      	beq.n	8006412 <HAL_RCC_ClockConfig+0x536>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b50      	cmp	r3, #80	; 0x50
 80063f6:	d00c      	beq.n	8006412 <HAL_RCC_ClockConfig+0x536>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b60      	cmp	r3, #96	; 0x60
 80063fe:	d008      	beq.n	8006412 <HAL_RCC_ClockConfig+0x536>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b70      	cmp	r3, #112	; 0x70
 8006406:	d004      	beq.n	8006412 <HAL_RCC_ClockConfig+0x536>
 8006408:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 800640c:	485e      	ldr	r0, [pc, #376]	; (8006588 <HAL_RCC_ClockConfig+0x6ac>)
 800640e:	f7fa fe8b 	bl	8001128 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006412:	4b5c      	ldr	r3, [pc, #368]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	4959      	ldr	r1, [pc, #356]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 8006420:	4313      	orrs	r3, r2
 8006422:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b00      	cmp	r3, #0
 800642e:	d029      	beq.n	8006484 <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	4b53      	ldr	r3, [pc, #332]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800643c:	429a      	cmp	r2, r3
 800643e:	d221      	bcs.n	8006484 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d014      	beq.n	8006472 <HAL_RCC_ClockConfig+0x596>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	d010      	beq.n	8006472 <HAL_RCC_ClockConfig+0x596>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	2b50      	cmp	r3, #80	; 0x50
 8006456:	d00c      	beq.n	8006472 <HAL_RCC_ClockConfig+0x596>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	2b60      	cmp	r3, #96	; 0x60
 800645e:	d008      	beq.n	8006472 <HAL_RCC_ClockConfig+0x596>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	2b70      	cmp	r3, #112	; 0x70
 8006466:	d004      	beq.n	8006472 <HAL_RCC_ClockConfig+0x596>
 8006468:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800646c:	4846      	ldr	r0, [pc, #280]	; (8006588 <HAL_RCC_ClockConfig+0x6ac>)
 800646e:	f7fa fe5b 	bl	8001128 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006472:	4b44      	ldr	r3, [pc, #272]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	4941      	ldr	r1, [pc, #260]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 8006480:	4313      	orrs	r3, r2
 8006482:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d02d      	beq.n	80064ec <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	4b3b      	ldr	r3, [pc, #236]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800649c:	429a      	cmp	r2, r3
 800649e:	d225      	bcs.n	80064ec <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d018      	beq.n	80064da <HAL_RCC_ClockConfig+0x5fe>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b0:	d013      	beq.n	80064da <HAL_RCC_ClockConfig+0x5fe>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80064ba:	d00e      	beq.n	80064da <HAL_RCC_ClockConfig+0x5fe>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064c4:	d009      	beq.n	80064da <HAL_RCC_ClockConfig+0x5fe>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064ce:	d004      	beq.n	80064da <HAL_RCC_ClockConfig+0x5fe>
 80064d0:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80064d4:	482c      	ldr	r0, [pc, #176]	; (8006588 <HAL_RCC_ClockConfig+0x6ac>)
 80064d6:	f7fa fe27 	bl	8001128 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064da:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	4927      	ldr	r1, [pc, #156]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d029      	beq.n	800654c <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	4b21      	ldr	r3, [pc, #132]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006504:	429a      	cmp	r2, r3
 8006506:	d221      	bcs.n	800654c <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d014      	beq.n	800653a <HAL_RCC_ClockConfig+0x65e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d010      	beq.n	800653a <HAL_RCC_ClockConfig+0x65e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b50      	cmp	r3, #80	; 0x50
 800651e:	d00c      	beq.n	800653a <HAL_RCC_ClockConfig+0x65e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	2b60      	cmp	r3, #96	; 0x60
 8006526:	d008      	beq.n	800653a <HAL_RCC_ClockConfig+0x65e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	2b70      	cmp	r3, #112	; 0x70
 800652e:	d004      	beq.n	800653a <HAL_RCC_ClockConfig+0x65e>
 8006530:	f240 4112 	movw	r1, #1042	; 0x412
 8006534:	4814      	ldr	r0, [pc, #80]	; (8006588 <HAL_RCC_ClockConfig+0x6ac>)
 8006536:	f7fa fdf7 	bl	8001128 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	490f      	ldr	r1, [pc, #60]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 8006548:	4313      	orrs	r3, r2
 800654a:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800654c:	f000 f824 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 8006550:	4601      	mov	r1, r0
 8006552:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <HAL_RCC_ClockConfig+0x6a8>)
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	0a1b      	lsrs	r3, r3, #8
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	4a0b      	ldr	r2, [pc, #44]	; (800658c <HAL_RCC_ClockConfig+0x6b0>)
 800655e:	5cd3      	ldrb	r3, [r2, r3]
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	fa21 f303 	lsr.w	r3, r1, r3
 8006568:	4a09      	ldr	r2, [pc, #36]	; (8006590 <HAL_RCC_ClockConfig+0x6b4>)
 800656a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <HAL_RCC_ClockConfig+0x6b8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f7fb f9cf 	bl	8001914 <HAL_InitTick>
 8006576:	4603      	mov	r3, r0
 8006578:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800657a:	7afb      	ldrb	r3, [r7, #11]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	58024400 	.word	0x58024400
 8006588:	08010b90 	.word	0x08010b90
 800658c:	08011098 	.word	0x08011098
 8006590:	24000000 	.word	0x24000000
 8006594:	24000414 	.word	0x24000414

08006598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	; 0x24
 800659c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800659e:	4baf      	ldr	r3, [pc, #700]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065a6:	2b18      	cmp	r3, #24
 80065a8:	f200 814e 	bhi.w	8006848 <HAL_RCC_GetSysClockFreq+0x2b0>
 80065ac:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80065ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b2:	bf00      	nop
 80065b4:	08006619 	.word	0x08006619
 80065b8:	08006849 	.word	0x08006849
 80065bc:	08006849 	.word	0x08006849
 80065c0:	08006849 	.word	0x08006849
 80065c4:	08006849 	.word	0x08006849
 80065c8:	08006849 	.word	0x08006849
 80065cc:	08006849 	.word	0x08006849
 80065d0:	08006849 	.word	0x08006849
 80065d4:	0800663f 	.word	0x0800663f
 80065d8:	08006849 	.word	0x08006849
 80065dc:	08006849 	.word	0x08006849
 80065e0:	08006849 	.word	0x08006849
 80065e4:	08006849 	.word	0x08006849
 80065e8:	08006849 	.word	0x08006849
 80065ec:	08006849 	.word	0x08006849
 80065f0:	08006849 	.word	0x08006849
 80065f4:	08006645 	.word	0x08006645
 80065f8:	08006849 	.word	0x08006849
 80065fc:	08006849 	.word	0x08006849
 8006600:	08006849 	.word	0x08006849
 8006604:	08006849 	.word	0x08006849
 8006608:	08006849 	.word	0x08006849
 800660c:	08006849 	.word	0x08006849
 8006610:	08006849 	.word	0x08006849
 8006614:	0800664b 	.word	0x0800664b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006618:	4b90      	ldr	r3, [pc, #576]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006624:	4b8d      	ldr	r3, [pc, #564]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	08db      	lsrs	r3, r3, #3
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	4a8c      	ldr	r2, [pc, #560]	; (8006860 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
 8006634:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006636:	e10a      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006638:	4b89      	ldr	r3, [pc, #548]	; (8006860 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800663a:	61bb      	str	r3, [r7, #24]
    break;
 800663c:	e107      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800663e:	4b89      	ldr	r3, [pc, #548]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006640:	61bb      	str	r3, [r7, #24]
    break;
 8006642:	e104      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006644:	4b88      	ldr	r3, [pc, #544]	; (8006868 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006646:	61bb      	str	r3, [r7, #24]
    break;
 8006648:	e101      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800664a:	4b84      	ldr	r3, [pc, #528]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006654:	4b81      	ldr	r3, [pc, #516]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	091b      	lsrs	r3, r3, #4
 800665a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006660:	4b7e      	ldr	r3, [pc, #504]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800666a:	4b7c      	ldr	r3, [pc, #496]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	08db      	lsrs	r3, r3, #3
 8006670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006682:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80da 	beq.w	8006842 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d05a      	beq.n	800674a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006694:	2b01      	cmp	r3, #1
 8006696:	d302      	bcc.n	800669e <HAL_RCC_GetSysClockFreq+0x106>
 8006698:	2b02      	cmp	r3, #2
 800669a:	d078      	beq.n	800678e <HAL_RCC_GetSysClockFreq+0x1f6>
 800669c:	e099      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800669e:	4b6f      	ldr	r3, [pc, #444]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02d      	beq.n	8006706 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066aa:	4b6c      	ldr	r3, [pc, #432]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	08db      	lsrs	r3, r3, #3
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	4a6a      	ldr	r2, [pc, #424]	; (8006860 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80066b6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d4:	4b61      	ldr	r3, [pc, #388]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066dc:	ee07 3a90 	vmov	s15, r3
 80066e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80066e8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800686c <HAL_RCC_GetSysClockFreq+0x2d4>
 80066ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006700:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006704:	e087      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006710:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006870 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006718:	4b50      	ldr	r3, [pc, #320]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006728:	ed97 6a02 	vldr	s12, [r7, #8]
 800672c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800686c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006744:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006748:	e065      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006754:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006874 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675c:	4b3f      	ldr	r3, [pc, #252]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006770:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800686c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006788:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800678c:	e043      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	ee07 3a90 	vmov	s15, r3
 8006794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006798:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006878 <HAL_RCC_GetSysClockFreq+0x2e0>
 800679c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a0:	4b2e      	ldr	r3, [pc, #184]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80067b4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800686c <HAL_RCC_GetSysClockFreq+0x2d4>
 80067b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067d0:	e021      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006874 <HAL_RCC_GetSysClockFreq+0x2dc>
 80067e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e4:	4b1d      	ldr	r3, [pc, #116]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80067f8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800686c <HAL_RCC_GetSysClockFreq+0x2d4>
 80067fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006810:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006814:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006816:	4b11      	ldr	r3, [pc, #68]	; (800685c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	0a5b      	lsrs	r3, r3, #9
 800681c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006820:	3301      	adds	r3, #1
 8006822:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800682e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800683a:	ee17 3a90 	vmov	r3, s15
 800683e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006840:	e005      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
    break;
 8006846:	e002      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800684a:	61bb      	str	r3, [r7, #24]
    break;
 800684c:	bf00      	nop
  }

  return sysclockfreq;
 800684e:	69bb      	ldr	r3, [r7, #24]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3724      	adds	r7, #36	; 0x24
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	58024400 	.word	0x58024400
 8006860:	03d09000 	.word	0x03d09000
 8006864:	003d0900 	.word	0x003d0900
 8006868:	00b71b00 	.word	0x00b71b00
 800686c:	46000000 	.word	0x46000000
 8006870:	4c742400 	.word	0x4c742400
 8006874:	4a742400 	.word	0x4a742400
 8006878:	4b371b00 	.word	0x4b371b00

0800687c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006880:	f001 fc94 	bl	80081ac <HAL_RCCEx_GetD1SysClockFreq>
 8006884:	4601      	mov	r1, r0
 8006886:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	4a07      	ldr	r2, [pc, #28]	; (80068ac <HAL_RCC_GetHCLKFreq+0x30>)
 8006890:	5cd3      	ldrb	r3, [r2, r3]
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	fa21 f303 	lsr.w	r3, r1, r3
 800689a:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x34>)
 800689c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800689e:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x34>)
 80068a0:	681b      	ldr	r3, [r3, #0]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	58024400 	.word	0x58024400
 80068ac:	08011098 	.word	0x08011098
 80068b0:	24000004 	.word	0x24000004

080068b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068b8:	f7ff ffe0 	bl	800687c <HAL_RCC_GetHCLKFreq>
 80068bc:	4601      	mov	r1, r0
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	091b      	lsrs	r3, r3, #4
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	4a04      	ldr	r2, [pc, #16]	; (80068dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80068ca:	5cd3      	ldrb	r3, [r2, r3]
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	58024400 	.word	0x58024400
 80068dc:	08011098 	.word	0x08011098

080068e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068e4:	f7ff ffca 	bl	800687c <HAL_RCC_GetHCLKFreq>
 80068e8:	4601      	mov	r1, r0
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	4a04      	ldr	r2, [pc, #16]	; (8006908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068f6:	5cd3      	ldrb	r3, [r2, r3]
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006900:	4618      	mov	r0, r3
 8006902:	bd80      	pop	{r7, pc}
 8006904:	58024400 	.word	0x58024400
 8006908:	08011098 	.word	0x08011098

0800690c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006914:	2300      	movs	r3, #0
 8006916:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006918:	2300      	movs	r3, #0
 800691a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d03d      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800692c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006930:	d013      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006936:	d802      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800693c:	e01f      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800693e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006942:	d013      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006944:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006948:	d01c      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800694a:	e018      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800694c:	4baf      	ldr	r3, [pc, #700]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	4aae      	ldr	r2, [pc, #696]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006958:	e015      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3304      	adds	r3, #4
 800695e:	2102      	movs	r1, #2
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fc3f 	bl	80081e4 <RCCEx_PLL2_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800696a:	e00c      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3324      	adds	r3, #36	; 0x24
 8006970:	2102      	movs	r1, #2
 8006972:	4618      	mov	r0, r3
 8006974:	f001 fd58 	bl	8008428 <RCCEx_PLL3_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800697c:	e003      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	75fb      	strb	r3, [r7, #23]
      break;
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800698c:	4b9f      	ldr	r3, [pc, #636]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800698e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006998:	499c      	ldr	r1, [pc, #624]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800699a:	4313      	orrs	r3, r2
 800699c:	650b      	str	r3, [r1, #80]	; 0x50
 800699e:	e001      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d03d      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d826      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069d5 	.word	0x080069d5
 80069c4:	080069e3 	.word	0x080069e3
 80069c8:	080069f5 	.word	0x080069f5
 80069cc:	08006a0d 	.word	0x08006a0d
 80069d0:	08006a0d 	.word	0x08006a0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d4:	4b8d      	ldr	r3, [pc, #564]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a8c      	ldr	r2, [pc, #560]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069e0:	e015      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3304      	adds	r3, #4
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 fbfb 	bl	80081e4 <RCCEx_PLL2_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069f2:	e00c      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 fd14 	bl	8008428 <RCCEx_PLL3_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a04:	e003      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0a:	e000      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a14:	4b7d      	ldr	r3, [pc, #500]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a18:	f023 0207 	bic.w	r2, r3, #7
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	497a      	ldr	r1, [pc, #488]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	650b      	str	r3, [r1, #80]	; 0x50
 8006a26:	e001      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d03e      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3c:	2b80      	cmp	r3, #128	; 0x80
 8006a3e:	d01c      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006a40:	2b80      	cmp	r3, #128	; 0x80
 8006a42:	d804      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d00d      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006a4c:	e01e      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a50:	d01f      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a56:	d01e      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a58:	e018      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a5a:	4b6c      	ldr	r3, [pc, #432]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	4a6b      	ldr	r2, [pc, #428]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a66:	e017      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 fbb8 	bl	80081e4 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a78:	e00e      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3324      	adds	r3, #36	; 0x24
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 fcd1 	bl	8008428 <RCCEx_PLL3_Config>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a8a:	e005      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a90:	e002      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006a92:	bf00      	nop
 8006a94:	e000      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a9e:	4b5b      	ldr	r3, [pc, #364]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	4958      	ldr	r1, [pc, #352]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	650b      	str	r3, [r1, #80]	; 0x50
 8006ab0:	e001      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d044      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006acc:	d01f      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad2:	d805      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006adc:	d00e      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006ade:	e01f      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006ae0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ae4:	d01f      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aea:	d01e      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006aec:	e018      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aee:	4b47      	ldr	r3, [pc, #284]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	4a46      	ldr	r2, [pc, #280]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006afa:	e017      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	2100      	movs	r1, #0
 8006b02:	4618      	mov	r0, r3
 8006b04:	f001 fb6e 	bl	80081e4 <RCCEx_PLL2_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b0c:	e00e      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3324      	adds	r3, #36	; 0x24
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fc87 	bl	8008428 <RCCEx_PLL3_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b1e:	e005      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	75fb      	strb	r3, [r7, #23]
      break;
 8006b24:	e002      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006b26:	bf00      	nop
 8006b28:	e000      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b32:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b40:	4932      	ldr	r1, [pc, #200]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	658b      	str	r3, [r1, #88]	; 0x58
 8006b46:	e001      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d044      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b62:	d01f      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b68:	d805      	bhi.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006b6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b72:	d00e      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006b74:	e01f      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006b76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b7a:	d01f      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b80:	d01e      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006b82:	e018      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b84:	4b21      	ldr	r3, [pc, #132]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	4a20      	ldr	r2, [pc, #128]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b90:	e017      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3304      	adds	r3, #4
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f001 fb23 	bl	80081e4 <RCCEx_PLL2_Config>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ba2:	e00e      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3324      	adds	r3, #36	; 0x24
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 fc3c 	bl	8008428 <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006bb4:	e005      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006bc8:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bd6:	490d      	ldr	r1, [pc, #52]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	658b      	str	r3, [r1, #88]	; 0x58
 8006bdc:	e001      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d035      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d00c      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006bf6:	2b10      	cmp	r3, #16
 8006bf8:	d802      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01b      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006bfe:	e017      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d00c      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d018      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006c08:	e012      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006c0a:	bf00      	nop
 8006c0c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c10:	4baf      	ldr	r3, [pc, #700]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4aae      	ldr	r2, [pc, #696]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c1c:	e00e      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	2102      	movs	r1, #2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fadd 	bl	80081e4 <RCCEx_PLL2_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c2e:	e005      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	75fb      	strb	r3, [r7, #23]
      break;
 8006c34:	e002      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c42:	4ba3      	ldr	r3, [pc, #652]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4e:	49a0      	ldr	r1, [pc, #640]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c54:	e001      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d042      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c6e:	d01f      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c74:	d805      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7e:	d00e      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006c80:	e01f      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006c82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c86:	d01f      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c8c:	d01e      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006c8e:	e018      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c90:	4b8f      	ldr	r3, [pc, #572]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	4a8e      	ldr	r2, [pc, #568]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c9c:	e017      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 fa9d 	bl	80081e4 <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cae:	e00e      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3324      	adds	r3, #36	; 0x24
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fbb6 	bl	8008428 <RCCEx_PLL3_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cc0:	e005      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc6:	e002      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006cc8:	bf00      	nop
 8006cca:	e000      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006cd4:	4b7e      	ldr	r3, [pc, #504]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce0:	497b      	ldr	r1, [pc, #492]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8006ce6:	e001      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d042      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d00:	d01b      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d06:	d805      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d022      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d10:	d00a      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006d12:	e01b      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d18:	d01d      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d1e:	d01c      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d24:	d01b      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006d26:	e011      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fa58 	bl	80081e4 <RCCEx_PLL2_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d38:	e012      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3324      	adds	r3, #36	; 0x24
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fb71 	bl	8008428 <RCCEx_PLL3_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d4a:	e009      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d50:	e006      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006d52:	bf00      	nop
 8006d54:	e004      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006d56:	bf00      	nop
 8006d58:	e002      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006d5a:	bf00      	nop
 8006d5c:	e000      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d66:	4b5a      	ldr	r3, [pc, #360]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d72:	4957      	ldr	r1, [pc, #348]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	650b      	str	r3, [r1, #80]	; 0x50
 8006d78:	e001      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d044      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d94:	d01b      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9a:	d805      	bhi.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d022      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da4:	d00a      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006da6:	e01b      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dac:	d01d      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006db2:	d01c      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006db4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006db8:	d01b      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006dba:	e011      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 fa0e 	bl	80081e4 <RCCEx_PLL2_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006dcc:	e012      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3324      	adds	r3, #36	; 0x24
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 fb27 	bl	8008428 <RCCEx_PLL3_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006dde:	e009      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
      break;
 8006de4:	e006      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006de6:	bf00      	nop
 8006de8:	e004      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006dfa:	4b35      	ldr	r3, [pc, #212]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e08:	4931      	ldr	r1, [pc, #196]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	658b      	str	r3, [r1, #88]	; 0x58
 8006e0e:	e001      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02d      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e28:	d005      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e2e:	d009      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d013      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006e34:	e00f      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e36:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	4a25      	ldr	r2, [pc, #148]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e42:	e00c      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3304      	adds	r3, #4
 8006e48:	2101      	movs	r1, #1
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 f9ca 	bl	80081e4 <RCCEx_PLL2_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e54:	e003      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5a:	e000      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d109      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e64:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e70:	4917      	ldr	r1, [pc, #92]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	650b      	str	r3, [r1, #80]	; 0x50
 8006e76:	e001      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d037      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d81b      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ed5 	.word	0x08006ed5
 8006e9c:	08006ea9 	.word	0x08006ea9
 8006ea0:	08006eb7 	.word	0x08006eb7
 8006ea4:	08006ed5 	.word	0x08006ed5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006eb4:	e00f      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2102      	movs	r1, #2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 f991 	bl	80081e4 <RCCEx_PLL2_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ec6:	e006      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ecc:	e003      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006ece:	bf00      	nop
 8006ed0:	58024400 	.word	0x58024400
      break;
 8006ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee0:	f023 0203 	bic.w	r2, r3, #3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee8:	4901      	ldr	r1, [pc, #4]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006eee:	e003      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8006ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 829b 	beq.w	800743c <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f10:	f000 81a9 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f1e:	f000 81a2 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f28:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8006f2c:	f000 819b 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f36:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8006f3a:	f000 8194 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f44:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8006f48:	f000 818d 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f52:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8006f56:	f000 8186 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f60:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8006f64:	f000 817f 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6e:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8006f72:	f000 8178 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f7c:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8006f80:	f000 8171 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f8a:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8006f8e:	f000 816a 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f98:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8006f9c:	f000 8163 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fa6:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8006faa:	f000 815c 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fb4:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8006fb8:	f000 8155 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fc2:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8006fc6:	f000 814e 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fd0:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8006fd4:	f000 8147 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fde:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8006fe2:	f000 8140 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fec:	4aa8      	ldr	r2, [pc, #672]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	f000 8139 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ffa:	4aa6      	ldr	r2, [pc, #664]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	f000 8132 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007008:	4aa3      	ldr	r2, [pc, #652]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	f000 812b 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007016:	4aa1      	ldr	r2, [pc, #644]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8007018:	4293      	cmp	r3, r2
 800701a:	f000 8124 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007024:	4a9e      	ldr	r2, [pc, #632]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007026:	4293      	cmp	r3, r2
 8007028:	f000 811d 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007032:	4a9c      	ldr	r2, [pc, #624]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8007034:	4293      	cmp	r3, r2
 8007036:	f000 8116 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007040:	4a99      	ldr	r2, [pc, #612]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	f000 810f 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800704e:	4a97      	ldr	r2, [pc, #604]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	f000 8108 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800705c:	4a94      	ldr	r2, [pc, #592]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	f000 8101 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800706a:	4a92      	ldr	r2, [pc, #584]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	f000 80fa 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007078:	4a8f      	ldr	r2, [pc, #572]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800707a:	4293      	cmp	r3, r2
 800707c:	f000 80f3 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007086:	4a8d      	ldr	r2, [pc, #564]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	f000 80ec 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007094:	4a8a      	ldr	r2, [pc, #552]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	f000 80e5 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070a2:	4a88      	ldr	r2, [pc, #544]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	f000 80de 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070b0:	4a85      	ldr	r2, [pc, #532]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	f000 80d7 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070be:	4a83      	ldr	r2, [pc, #524]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	f000 80d0 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070cc:	4a80      	ldr	r2, [pc, #512]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	f000 80c9 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070da:	4a7e      	ldr	r2, [pc, #504]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	f000 80c2 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070e8:	4a7b      	ldr	r2, [pc, #492]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	f000 80bb 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070f6:	4a79      	ldr	r2, [pc, #484]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	f000 80b4 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007104:	4a76      	ldr	r2, [pc, #472]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	f000 80ad 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007112:	4a74      	ldr	r2, [pc, #464]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	f000 80a6 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007120:	4a71      	ldr	r2, [pc, #452]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8007122:	4293      	cmp	r3, r2
 8007124:	f000 809f 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800712e:	4a6f      	ldr	r2, [pc, #444]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	f000 8098 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800713c:	4a6c      	ldr	r2, [pc, #432]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	f000 8091 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800714a:	4a6a      	ldr	r2, [pc, #424]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	f000 808a 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007158:	4a67      	ldr	r2, [pc, #412]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800715a:	4293      	cmp	r3, r2
 800715c:	f000 8083 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007166:	4a65      	ldr	r2, [pc, #404]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d07c      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007172:	4a63      	ldr	r2, [pc, #396]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d076      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800717e:	4a61      	ldr	r2, [pc, #388]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d070      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800718a:	4a5f      	ldr	r2, [pc, #380]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d06a      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007196:	4a5d      	ldr	r2, [pc, #372]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d064      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071a2:	4a5b      	ldr	r2, [pc, #364]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d05e      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ae:	4a59      	ldr	r2, [pc, #356]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d058      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ba:	4a57      	ldr	r2, [pc, #348]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d052      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071c6:	4a55      	ldr	r2, [pc, #340]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d04c      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071d2:	4a53      	ldr	r2, [pc, #332]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d046      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071de:	4a51      	ldr	r2, [pc, #324]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d040      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ea:	4a4f      	ldr	r2, [pc, #316]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d03a      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071f6:	4a4d      	ldr	r2, [pc, #308]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d034      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007202:	4a4b      	ldr	r2, [pc, #300]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d02e      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800720e:	4a49      	ldr	r2, [pc, #292]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d028      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800721a:	4a47      	ldr	r2, [pc, #284]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d022      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007226:	4a45      	ldr	r2, [pc, #276]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d01c      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007232:	4a43      	ldr	r2, [pc, #268]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d016      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800723e:	4a41      	ldr	r2, [pc, #260]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d010      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800724a:	4a3f      	ldr	r2, [pc, #252]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00a      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007256:	4a3d      	ldr	r2, [pc, #244]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d004      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800725c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007260:	483b      	ldr	r0, [pc, #236]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8007262:	f7f9 ff61 	bl	8001128 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007266:	4b3b      	ldr	r3, [pc, #236]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a3a      	ldr	r2, [pc, #232]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 800726c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007272:	f7fa fb99 	bl	80019a8 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007278:	e06e      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727a:	f7fa fb95 	bl	80019a8 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b64      	cmp	r3, #100	; 0x64
 8007286:	d967      	bls.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	75fb      	strb	r3, [r7, #23]
        break;
 800728c:	e06a      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800728e:	bf00      	nop
 8007290:	00010300 	.word	0x00010300
 8007294:	00011300 	.word	0x00011300
 8007298:	00012300 	.word	0x00012300
 800729c:	00013300 	.word	0x00013300
 80072a0:	00014300 	.word	0x00014300
 80072a4:	00015300 	.word	0x00015300
 80072a8:	00016300 	.word	0x00016300
 80072ac:	00017300 	.word	0x00017300
 80072b0:	00018300 	.word	0x00018300
 80072b4:	00019300 	.word	0x00019300
 80072b8:	0001a300 	.word	0x0001a300
 80072bc:	0001b300 	.word	0x0001b300
 80072c0:	0001c300 	.word	0x0001c300
 80072c4:	0001d300 	.word	0x0001d300
 80072c8:	0001e300 	.word	0x0001e300
 80072cc:	0001f300 	.word	0x0001f300
 80072d0:	00020300 	.word	0x00020300
 80072d4:	00021300 	.word	0x00021300
 80072d8:	00022300 	.word	0x00022300
 80072dc:	00023300 	.word	0x00023300
 80072e0:	00024300 	.word	0x00024300
 80072e4:	00025300 	.word	0x00025300
 80072e8:	00026300 	.word	0x00026300
 80072ec:	00027300 	.word	0x00027300
 80072f0:	00028300 	.word	0x00028300
 80072f4:	00029300 	.word	0x00029300
 80072f8:	0002a300 	.word	0x0002a300
 80072fc:	0002b300 	.word	0x0002b300
 8007300:	0002c300 	.word	0x0002c300
 8007304:	0002d300 	.word	0x0002d300
 8007308:	0002e300 	.word	0x0002e300
 800730c:	0002f300 	.word	0x0002f300
 8007310:	00030300 	.word	0x00030300
 8007314:	00031300 	.word	0x00031300
 8007318:	00032300 	.word	0x00032300
 800731c:	00033300 	.word	0x00033300
 8007320:	00034300 	.word	0x00034300
 8007324:	00035300 	.word	0x00035300
 8007328:	00036300 	.word	0x00036300
 800732c:	00037300 	.word	0x00037300
 8007330:	00038300 	.word	0x00038300
 8007334:	00039300 	.word	0x00039300
 8007338:	0003a300 	.word	0x0003a300
 800733c:	0003b300 	.word	0x0003b300
 8007340:	0003c300 	.word	0x0003c300
 8007344:	0003d300 	.word	0x0003d300
 8007348:	0003e300 	.word	0x0003e300
 800734c:	0003f300 	.word	0x0003f300
 8007350:	08010bc8 	.word	0x08010bc8
 8007354:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007358:	4bb9      	ldr	r3, [pc, #740]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d08a      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d166      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800736a:	4bb6      	ldr	r3, [pc, #728]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800736c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007374:	4053      	eors	r3, r2
 8007376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737a:	2b00      	cmp	r3, #0
 800737c:	d013      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800737e:	4bb1      	ldr	r3, [pc, #708]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007386:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007388:	4bae      	ldr	r3, [pc, #696]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	4aad      	ldr	r2, [pc, #692]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800738e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007392:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007394:	4bab      	ldr	r3, [pc, #684]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007398:	4aaa      	ldr	r2, [pc, #680]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800739a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800739e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073a0:	4aa8      	ldr	r2, [pc, #672]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b0:	d115      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b2:	f7fa faf9 	bl	80019a8 <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073b8:	e00b      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ba:	f7fa faf5 	bl	80019a8 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d902      	bls.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	75fb      	strb	r3, [r7, #23]
            break;
 80073d0:	e005      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073d2:	4b9c      	ldr	r3, [pc, #624]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0ed      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 80073de:	7dfb      	ldrb	r3, [r7, #23]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d126      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f2:	d10d      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 80073f4:	4b93      	ldr	r3, [pc, #588]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007402:	0919      	lsrs	r1, r3, #4
 8007404:	4b90      	ldr	r3, [pc, #576]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007406:	400b      	ands	r3, r1
 8007408:	498e      	ldr	r1, [pc, #568]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800740a:	4313      	orrs	r3, r2
 800740c:	610b      	str	r3, [r1, #16]
 800740e:	e005      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8007410:	4b8c      	ldr	r3, [pc, #560]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	4a8b      	ldr	r2, [pc, #556]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007416:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800741a:	6113      	str	r3, [r2, #16]
 800741c:	4b89      	ldr	r3, [pc, #548]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800741e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800742a:	4986      	ldr	r1, [pc, #536]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800742c:	4313      	orrs	r3, r2
 800742e:	670b      	str	r3, [r1, #112]	; 0x70
 8007430:	e004      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	75bb      	strb	r3, [r7, #22]
 8007436:	e001      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	d07e      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800744c:	2b28      	cmp	r3, #40	; 0x28
 800744e:	d867      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	08007527 	.word	0x08007527
 800745c:	08007521 	.word	0x08007521
 8007460:	08007521 	.word	0x08007521
 8007464:	08007521 	.word	0x08007521
 8007468:	08007521 	.word	0x08007521
 800746c:	08007521 	.word	0x08007521
 8007470:	08007521 	.word	0x08007521
 8007474:	08007521 	.word	0x08007521
 8007478:	080074fd 	.word	0x080074fd
 800747c:	08007521 	.word	0x08007521
 8007480:	08007521 	.word	0x08007521
 8007484:	08007521 	.word	0x08007521
 8007488:	08007521 	.word	0x08007521
 800748c:	08007521 	.word	0x08007521
 8007490:	08007521 	.word	0x08007521
 8007494:	08007521 	.word	0x08007521
 8007498:	0800750f 	.word	0x0800750f
 800749c:	08007521 	.word	0x08007521
 80074a0:	08007521 	.word	0x08007521
 80074a4:	08007521 	.word	0x08007521
 80074a8:	08007521 	.word	0x08007521
 80074ac:	08007521 	.word	0x08007521
 80074b0:	08007521 	.word	0x08007521
 80074b4:	08007521 	.word	0x08007521
 80074b8:	08007527 	.word	0x08007527
 80074bc:	08007521 	.word	0x08007521
 80074c0:	08007521 	.word	0x08007521
 80074c4:	08007521 	.word	0x08007521
 80074c8:	08007521 	.word	0x08007521
 80074cc:	08007521 	.word	0x08007521
 80074d0:	08007521 	.word	0x08007521
 80074d4:	08007521 	.word	0x08007521
 80074d8:	08007527 	.word	0x08007527
 80074dc:	08007521 	.word	0x08007521
 80074e0:	08007521 	.word	0x08007521
 80074e4:	08007521 	.word	0x08007521
 80074e8:	08007521 	.word	0x08007521
 80074ec:	08007521 	.word	0x08007521
 80074f0:	08007521 	.word	0x08007521
 80074f4:	08007521 	.word	0x08007521
 80074f8:	08007527 	.word	0x08007527
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	2101      	movs	r1, #1
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fe6e 	bl	80081e4 <RCCEx_PLL2_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800750c:	e00c      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3324      	adds	r3, #36	; 0x24
 8007512:	2101      	movs	r1, #1
 8007514:	4618      	mov	r0, r3
 8007516:	f000 ff87 	bl	8008428 <RCCEx_PLL3_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800751e:	e003      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	75fb      	strb	r3, [r7, #23]
      break;
 8007524:	e000      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8007526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800752e:	4b45      	ldr	r3, [pc, #276]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007532:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800753a:	4942      	ldr	r1, [pc, #264]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800753c:	4313      	orrs	r3, r2
 800753e:	654b      	str	r3, [r1, #84]	; 0x54
 8007540:	e001      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d037      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007556:	2b05      	cmp	r3, #5
 8007558:	d820      	bhi.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xc90>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	080075a3 	.word	0x080075a3
 8007564:	08007579 	.word	0x08007579
 8007568:	0800758b 	.word	0x0800758b
 800756c:	080075a3 	.word	0x080075a3
 8007570:	080075a3 	.word	0x080075a3
 8007574:	080075a3 	.word	0x080075a3
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	2101      	movs	r1, #1
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fe30 	bl	80081e4 <RCCEx_PLL2_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007588:	e00c      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3324      	adds	r3, #36	; 0x24
 800758e:	2101      	movs	r1, #1
 8007590:	4618      	mov	r0, r3
 8007592:	f000 ff49 	bl	8008428 <RCCEx_PLL3_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800759a:	e003      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	75fb      	strb	r3, [r7, #23]
      break;
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 80075a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075aa:	4b26      	ldr	r3, [pc, #152]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	f023 0207 	bic.w	r2, r3, #7
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b6:	4923      	ldr	r1, [pc, #140]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	654b      	str	r3, [r1, #84]	; 0x54
 80075bc:	e001      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d040      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d821      	bhi.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	08007623 	.word	0x08007623
 80075e4:	080075f9 	.word	0x080075f9
 80075e8:	0800760b 	.word	0x0800760b
 80075ec:	08007623 	.word	0x08007623
 80075f0:	08007623 	.word	0x08007623
 80075f4:	08007623 	.word	0x08007623
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3304      	adds	r3, #4
 80075fc:	2101      	movs	r1, #1
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fdf0 	bl	80081e4 <RCCEx_PLL2_Config>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007608:	e00c      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3324      	adds	r3, #36	; 0x24
 800760e:	2101      	movs	r1, #1
 8007610:	4618      	mov	r0, r3
 8007612:	f000 ff09 	bl	8008428 <RCCEx_PLL3_Config>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800761a:	e003      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]
      break;
 8007620:	e000      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8007622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d110      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800762a:	4b06      	ldr	r3, [pc, #24]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800762c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762e:	f023 0207 	bic.w	r2, r3, #7
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007638:	4902      	ldr	r1, [pc, #8]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800763a:	4313      	orrs	r3, r2
 800763c:	658b      	str	r3, [r1, #88]	; 0x58
 800763e:	e007      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007640:	58024800 	.word	0x58024800
 8007644:	58024400 	.word	0x58024400
 8007648:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d044      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007666:	d01b      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8007668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800766c:	d805      	bhi.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d022      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8007672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007676:	d00a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007678:	e01b      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767e:	d01d      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8007680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007684:	d01c      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800768a:	d01b      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 800768c:	e011      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3304      	adds	r3, #4
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fda5 	bl	80081e4 <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800769e:	e012      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3324      	adds	r3, #36	; 0x24
 80076a4:	2102      	movs	r1, #2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 febe 	bl	8008428 <RCCEx_PLL3_Config>
 80076ac:	4603      	mov	r3, r0
 80076ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076b0:	e009      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	75fb      	strb	r3, [r7, #23]
      break;
 80076b6:	e006      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80076b8:	bf00      	nop
 80076ba:	e004      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80076bc:	bf00      	nop
 80076be:	e002      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80076c0:	bf00      	nop
 80076c2:	e000      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80076c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076cc:	4bb7      	ldr	r3, [pc, #732]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076da:	49b4      	ldr	r1, [pc, #720]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	654b      	str	r3, [r1, #84]	; 0x54
 80076e0:	e001      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d044      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076fc:	d01b      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 80076fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007702:	d805      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d022      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8007708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770c:	d00a      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800770e:	e01b      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8007710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007714:	d01d      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xe46>
 8007716:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800771a:	d01c      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 800771c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007720:	d01b      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 8007722:	e011      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fd5a 	bl	80081e4 <RCCEx_PLL2_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007734:	e012      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3324      	adds	r3, #36	; 0x24
 800773a:	2102      	movs	r1, #2
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fe73 	bl	8008428 <RCCEx_PLL3_Config>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007746:	e009      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	75fb      	strb	r3, [r7, #23]
      break;
 800774c:	e006      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800774e:	bf00      	nop
 8007750:	e004      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8007752:	bf00      	nop
 8007754:	e002      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8007756:	bf00      	nop
 8007758:	e000      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800775a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007762:	4b92      	ldr	r3, [pc, #584]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007770:	498e      	ldr	r1, [pc, #568]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007772:	4313      	orrs	r3, r2
 8007774:	658b      	str	r3, [r1, #88]	; 0x58
 8007776:	e001      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007784:	2b00      	cmp	r3, #0
 8007786:	d044      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800778e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007792:	d01b      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8007794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007798:	d805      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d022      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a2:	d00a      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xeae>
 80077a4:	e01b      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xed2>
 80077a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077aa:	d01d      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80077ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077b0:	d01c      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xee0>
 80077b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077b6:	d01b      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 80077b8:	e011      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3304      	adds	r3, #4
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fd0f 	bl	80081e4 <RCCEx_PLL2_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80077ca:	e012      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3324      	adds	r3, #36	; 0x24
 80077d0:	2102      	movs	r1, #2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fe28 	bl	8008428 <RCCEx_PLL3_Config>
 80077d8:	4603      	mov	r3, r0
 80077da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80077dc:	e009      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
      break;
 80077e2:	e006      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80077e4:	bf00      	nop
 80077e6:	e004      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80077e8:	bf00      	nop
 80077ea:	e002      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80077ec:	bf00      	nop
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80077f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077f8:	4b6c      	ldr	r3, [pc, #432]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80077fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007806:	4969      	ldr	r1, [pc, #420]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007808:	4313      	orrs	r3, r2
 800780a:	658b      	str	r3, [r1, #88]	; 0x58
 800780c:	e001      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d037      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007828:	d015      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007834:	d00f      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007846:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800784a:	d004      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800784c:	f240 413a 	movw	r1, #1082	; 0x43a
 8007850:	4857      	ldr	r0, [pc, #348]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8007852:	f7f9 fc69 	bl	8001128 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007860:	d10b      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3324      	adds	r3, #36	; 0x24
 8007866:	2102      	movs	r1, #2
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fddd 	bl	8008428 <RCCEx_PLL3_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00c      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	75bb      	strb	r3, [r7, #22]
 8007878:	e009      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800787a:	4b4c      	ldr	r3, [pc, #304]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007888:	4948      	ldr	r1, [pc, #288]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800788a:	4313      	orrs	r3, r2
 800788c:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0310 	and.w	r3, r3, #16
 8007896:	2b00      	cmp	r3, #0
 8007898:	d037      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a4:	d015      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078b0:	d00f      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078c6:	d004      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80078c8:	f240 414f 	movw	r1, #1103	; 0x44f
 80078cc:	4838      	ldr	r0, [pc, #224]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 80078ce:	f7f9 fc2b 	bl	8001128 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078dc:	d10b      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3324      	adds	r3, #36	; 0x24
 80078e2:	2102      	movs	r1, #2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fd9f 	bl	8008428 <RCCEx_PLL3_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00c      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	75bb      	strb	r3, [r7, #22]
 80078f4:	e009      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078f6:	4b2d      	ldr	r3, [pc, #180]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80078f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007904:	4929      	ldr	r1, [pc, #164]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007906:	4313      	orrs	r3, r2
 8007908:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d030      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007920:	d00d      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x1032>
 8007922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007926:	d016      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x104a>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d111      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3304      	adds	r3, #4
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fc56 	bl	80081e4 <RCCEx_PLL2_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800793c:	e00c      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3324      	adds	r3, #36	; 0x24
 8007942:	2102      	movs	r1, #2
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fd6f 	bl	8008428 <RCCEx_PLL3_Config>
 800794a:	4603      	mov	r3, r0
 800794c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800794e:	e003      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	75fb      	strb	r3, [r7, #23]
      break;
 8007954:	e000      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 8007956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10a      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007962:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800796c:	490f      	ldr	r1, [pc, #60]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800796e:	4313      	orrs	r3, r2
 8007970:	658b      	str	r3, [r1, #88]	; 0x58
 8007972:	e001      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d034      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800798a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800798e:	d011      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8007990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007994:	d01a      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800799a:	d114      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799c:	4b03      	ldr	r3, [pc, #12]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4a02      	ldr	r2, [pc, #8]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80079a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80079a8:	e011      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 80079aa:	bf00      	nop
 80079ac:	58024400 	.word	0x58024400
 80079b0:	08010bc8 	.word	0x08010bc8

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3324      	adds	r3, #36	; 0x24
 80079b8:	2101      	movs	r1, #1
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fd34 	bl	8008428 <RCCEx_PLL3_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80079c4:	e003      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
      break;
 80079ca:	e000      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 80079cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079d4:	4b9c      	ldr	r3, [pc, #624]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e2:	4999      	ldr	r1, [pc, #612]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	654b      	str	r3, [r1, #84]	; 0x54
 80079e8:	e001      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d037      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0a:	d004      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8007a0c:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8007a10:	488e      	ldr	r0, [pc, #568]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007a12:	f7f9 fb89 	bl	8001128 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a22:	d007      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007a24:	e00f      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a26:	4b88      	ldr	r3, [pc, #544]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	4a87      	ldr	r2, [pc, #540]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a32:	e00b      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	2102      	movs	r1, #2
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fbd2 	bl	80081e4 <RCCEx_PLL2_Config>
 8007a40:	4603      	mov	r3, r0
 8007a42:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a44:	e002      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	75fb      	strb	r3, [r7, #23]
      break;
 8007a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a52:	4b7d      	ldr	r3, [pc, #500]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5e:	497a      	ldr	r1, [pc, #488]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a64:	e001      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3324      	adds	r3, #36	; 0x24
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fcd3 	bl	8008428 <RCCEx_PLL3_Config>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02f      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa0:	d00c      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 8007aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa6:	d802      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d011      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8007aac:	e00d      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x11be>
 8007aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab2:	d00f      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab8:	d00e      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 8007aba:	e006      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007abc:	4b62      	ldr	r3, [pc, #392]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	4a61      	ldr	r2, [pc, #388]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007ac8:	e007      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ace:	e004      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007ad0:	bf00      	nop
 8007ad2:	e002      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ae0:	4b59      	ldr	r3, [pc, #356]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aec:	4956      	ldr	r1, [pc, #344]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	654b      	str	r3, [r1, #84]	; 0x54
 8007af2:	e001      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d016      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d009      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b14:	d004      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8007b16:	f240 5116 	movw	r1, #1302	; 0x516
 8007b1a:	484c      	ldr	r0, [pc, #304]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007b1c:	f7f9 fb04 	bl	8001128 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b20:	4b49      	ldr	r3, [pc, #292]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2c:	4946      	ldr	r1, [pc, #280]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d019      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x1252>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b52:	d004      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x1252>
 8007b54:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8007b58:	483c      	ldr	r0, [pc, #240]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007b5a:	f7f9 fae5 	bl	8001128 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b5e:	4b3a      	ldr	r3, [pc, #232]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b6c:	4936      	ldr	r1, [pc, #216]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d016      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x128e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b8e:	d004      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x128e>
 8007b90:	f240 512a 	movw	r1, #1322	; 0x52a
 8007b94:	482d      	ldr	r0, [pc, #180]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007b96:	f7f9 fac7 	bl	8001128 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b9a:	4b2b      	ldr	r3, [pc, #172]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba6:	4928      	ldr	r1, [pc, #160]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01d      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bcc:	d004      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8007bce:	f240 5134 	movw	r1, #1332	; 0x534
 8007bd2:	481e      	ldr	r0, [pc, #120]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007bd4:	f7f9 faa8 	bl	8001128 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bd8:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	4a1a      	ldr	r2, [pc, #104]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007be2:	6113      	str	r3, [r2, #16]
 8007be4:	4b18      	ldr	r3, [pc, #96]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bee:	4916      	ldr	r1, [pc, #88]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da1b      	bge.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00e      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c0c:	d009      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c16:	d004      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007c18:	f240 513e 	movw	r1, #1342	; 0x53e
 8007c1c:	480b      	ldr	r0, [pc, #44]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007c1e:	f7f9 fa83 	bl	8001128 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2e:	4906      	ldr	r1, [pc, #24]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007c34:	7dbb      	ldrb	r3, [r7, #22]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	08010bc8 	.word	0x08010bc8

08007c50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c54:	f7fe fe12 	bl	800687c <HAL_RCC_GetHCLKFreq>
 8007c58:	4601      	mov	r1, r0
 8007c5a:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	091b      	lsrs	r3, r3, #4
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c66:	5cd3      	ldrb	r3, [r2, r3]
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	58024400 	.word	0x58024400
 8007c78:	08011098 	.word	0x08011098

08007c7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b089      	sub	sp, #36	; 0x24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c84:	4b9d      	ldr	r3, [pc, #628]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8007c8e:	4b9b      	ldr	r3, [pc, #620]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	0b1b      	lsrs	r3, r3, #12
 8007c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c98:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8007c9a:	4b98      	ldr	r3, [pc, #608]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007ca4:	4b95      	ldr	r3, [pc, #596]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca8:	08db      	lsrs	r3, r3, #3
 8007caa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	fb02 f303 	mul.w	r3, r2, r3
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 810a 	beq.w	8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d05a      	beq.n	8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d302      	bcc.n	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d078      	beq.n	8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8007cd6:	e099      	b.n	8007e0c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cd8:	4b88      	ldr	r3, [pc, #544]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02d      	beq.n	8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ce4:	4b85      	ldr	r3, [pc, #532]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	08db      	lsrs	r3, r3, #3
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	4a84      	ldr	r2, [pc, #528]	; (8007f00 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0e:	4b7b      	ldr	r3, [pc, #492]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d3e:	e087      	b.n	8007e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f08 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d52:	4b6a      	ldr	r3, [pc, #424]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d82:	e065      	b.n	8007e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d96:	4b59      	ldr	r3, [pc, #356]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007daa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dc6:	e043      	b.n	8007e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dda:	4b48      	ldr	r3, [pc, #288]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e0a:	e021      	b.n	8007e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1e:	4b37      	ldr	r3, [pc, #220]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007e50:	4b2a      	ldr	r3, [pc, #168]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	0a5b      	lsrs	r3, r3, #9
 8007e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e76:	ee17 2a90 	vmov	r2, s15
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007e7e:	4b1f      	ldr	r3, [pc, #124]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	0c1b      	lsrs	r3, r3, #16
 8007e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e88:	ee07 3a90 	vmov	s15, r3
 8007e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea4:	ee17 2a90 	vmov	r2, s15
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007eac:	4b13      	ldr	r3, [pc, #76]	; (8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	0e1b      	lsrs	r3, r3, #24
 8007eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed2:	ee17 2a90 	vmov	r2, s15
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007eda:	e008      	b.n	8007eee <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	609a      	str	r2, [r3, #8]
}
 8007eee:	bf00      	nop
 8007ef0:	3724      	adds	r7, #36	; 0x24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	58024400 	.word	0x58024400
 8007f00:	03d09000 	.word	0x03d09000
 8007f04:	46000000 	.word	0x46000000
 8007f08:	4c742400 	.word	0x4c742400
 8007f0c:	4a742400 	.word	0x4a742400
 8007f10:	4b371b00 	.word	0x4b371b00

08007f14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b089      	sub	sp, #36	; 0x24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f1c:	4b9d      	ldr	r3, [pc, #628]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007f26:	4b9b      	ldr	r3, [pc, #620]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	0d1b      	lsrs	r3, r3, #20
 8007f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f30:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8007f32:	4b98      	ldr	r3, [pc, #608]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007f3c:	4b95      	ldr	r3, [pc, #596]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f40:	08db      	lsrs	r3, r3, #3
 8007f42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	ee07 3a90 	vmov	s15, r3
 8007f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f54:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 810a 	beq.w	8008174 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d05a      	beq.n	800801c <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d302      	bcc.n	8007f70 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d078      	beq.n	8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8007f6e:	e099      	b.n	80080a4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f70:	4b88      	ldr	r3, [pc, #544]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d02d      	beq.n	8007fd8 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f7c:	4b85      	ldr	r3, [pc, #532]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	08db      	lsrs	r3, r3, #3
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	4a84      	ldr	r2, [pc, #528]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa6:	4b7b      	ldr	r3, [pc, #492]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fd6:	e087      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fea:	4b6a      	ldr	r3, [pc, #424]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800800e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800801a:	e065      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008026:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800802a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802e:	4b59      	ldr	r3, [pc, #356]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008042:	eddf 5a56 	vldr	s11, [pc, #344]	; 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800805e:	e043      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800806e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008072:	4b48      	ldr	r3, [pc, #288]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008082:	ed97 6a03 	vldr	s12, [r7, #12]
 8008086:	eddf 5a45 	vldr	s11, [pc, #276]	; 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800808a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800808e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080a2:	e021      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80080b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080b6:	4b37      	ldr	r3, [pc, #220]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80080ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80080e8:	4b2a      	ldr	r3, [pc, #168]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	0a5b      	lsrs	r3, r3, #9
 80080ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008102:	edd7 6a07 	vldr	s13, [r7, #28]
 8008106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800810a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810e:	ee17 2a90 	vmov	r2, s15
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008116:	4b1f      	ldr	r3, [pc, #124]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008120:	ee07 3a90 	vmov	s15, r3
 8008124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800812c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008130:	edd7 6a07 	vldr	s13, [r7, #28]
 8008134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800813c:	ee17 2a90 	vmov	r2, s15
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008144:	4b13      	ldr	r3, [pc, #76]	; (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	0e1b      	lsrs	r3, r3, #24
 800814a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800815a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800815e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800816a:	ee17 2a90 	vmov	r2, s15
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008172:	e008      	b.n	8008186 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	609a      	str	r2, [r3, #8]
}
 8008186:	bf00      	nop
 8008188:	3724      	adds	r7, #36	; 0x24
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	58024400 	.word	0x58024400
 8008198:	03d09000 	.word	0x03d09000
 800819c:	46000000 	.word	0x46000000
 80081a0:	4c742400 	.word	0x4c742400
 80081a4:	4a742400 	.word	0x4a742400
 80081a8:	4b371b00 	.word	0x4b371b00

080081ac <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80081b0:	f7fe f9f2 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 80081b4:	4601      	mov	r1, r0
 80081b6:	4b08      	ldr	r3, [pc, #32]	; (80081d8 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	0a1b      	lsrs	r3, r3, #8
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	4a06      	ldr	r2, [pc, #24]	; (80081dc <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80081c2:	5cd3      	ldrb	r3, [r2, r3]
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	fa21 f303 	lsr.w	r3, r1, r3
 80081cc:	4a04      	ldr	r2, [pc, #16]	; (80081e0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80081ce:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80081d0:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80081d2:	681b      	ldr	r3, [r3, #0]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	58024400 	.word	0x58024400
 80081dc:	08011098 	.word	0x08011098
 80081e0:	24000000 	.word	0x24000000

080081e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <RCCEx_PLL2_Config+0x1e>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b3f      	cmp	r3, #63	; 0x3f
 8008200:	d904      	bls.n	800820c <RCCEx_PLL2_Config+0x28>
 8008202:	f640 2186 	movw	r1, #2694	; 0xa86
 8008206:	4885      	ldr	r0, [pc, #532]	; (800841c <RCCEx_PLL2_Config+0x238>)
 8008208:	f7f8 ff8e 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b03      	cmp	r3, #3
 8008212:	d904      	bls.n	800821e <RCCEx_PLL2_Config+0x3a>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800821c:	d904      	bls.n	8008228 <RCCEx_PLL2_Config+0x44>
 800821e:	f640 2187 	movw	r1, #2695	; 0xa87
 8008222:	487e      	ldr	r0, [pc, #504]	; (800841c <RCCEx_PLL2_Config+0x238>)
 8008224:	f7f8 ff80 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <RCCEx_PLL2_Config+0x54>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b80      	cmp	r3, #128	; 0x80
 8008236:	d904      	bls.n	8008242 <RCCEx_PLL2_Config+0x5e>
 8008238:	f640 2188 	movw	r1, #2696	; 0xa88
 800823c:	4877      	ldr	r0, [pc, #476]	; (800841c <RCCEx_PLL2_Config+0x238>)
 800823e:	f7f8 ff73 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <RCCEx_PLL2_Config+0x6e>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b80      	cmp	r3, #128	; 0x80
 8008250:	d904      	bls.n	800825c <RCCEx_PLL2_Config+0x78>
 8008252:	f640 2189 	movw	r1, #2697	; 0xa89
 8008256:	4871      	ldr	r0, [pc, #452]	; (800841c <RCCEx_PLL2_Config+0x238>)
 8008258:	f7f8 ff66 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <RCCEx_PLL2_Config+0x88>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b80      	cmp	r3, #128	; 0x80
 800826a:	d904      	bls.n	8008276 <RCCEx_PLL2_Config+0x92>
 800826c:	f640 218a 	movw	r1, #2698	; 0xa8a
 8008270:	486a      	ldr	r0, [pc, #424]	; (800841c <RCCEx_PLL2_Config+0x238>)
 8008272:	f7f8 ff59 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d010      	beq.n	80082a0 <RCCEx_PLL2_Config+0xbc>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	2b40      	cmp	r3, #64	; 0x40
 8008284:	d00c      	beq.n	80082a0 <RCCEx_PLL2_Config+0xbc>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	2b80      	cmp	r3, #128	; 0x80
 800828c:	d008      	beq.n	80082a0 <RCCEx_PLL2_Config+0xbc>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	2bc0      	cmp	r3, #192	; 0xc0
 8008294:	d004      	beq.n	80082a0 <RCCEx_PLL2_Config+0xbc>
 8008296:	f640 218b 	movw	r1, #2699	; 0xa8b
 800829a:	4860      	ldr	r0, [pc, #384]	; (800841c <RCCEx_PLL2_Config+0x238>)
 800829c:	f7f8 ff44 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d008      	beq.n	80082ba <RCCEx_PLL2_Config+0xd6>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d004      	beq.n	80082ba <RCCEx_PLL2_Config+0xd6>
 80082b0:	f640 218c 	movw	r1, #2700	; 0xa8c
 80082b4:	4859      	ldr	r0, [pc, #356]	; (800841c <RCCEx_PLL2_Config+0x238>)
 80082b6:	f7f8 ff37 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c2:	d304      	bcc.n	80082ce <RCCEx_PLL2_Config+0xea>
 80082c4:	f640 218d 	movw	r1, #2701	; 0xa8d
 80082c8:	4854      	ldr	r0, [pc, #336]	; (800841c <RCCEx_PLL2_Config+0x238>)
 80082ca:	f7f8 ff2d 	bl	8001128 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082ce:	4b54      	ldr	r3, [pc, #336]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d101      	bne.n	80082de <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e099      	b.n	8008412 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082de:	4b50      	ldr	r3, [pc, #320]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a4f      	ldr	r2, [pc, #316]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80082e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ea:	f7f9 fb5d 	bl	80019a8 <HAL_GetTick>
 80082ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082f0:	e008      	b.n	8008304 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082f2:	f7f9 fb59 	bl	80019a8 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d901      	bls.n	8008304 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e086      	b.n	8008412 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008304:	4b46      	ldr	r3, [pc, #280]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f0      	bne.n	80082f2 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008310:	4b43      	ldr	r3, [pc, #268]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	031b      	lsls	r3, r3, #12
 800831e:	4940      	ldr	r1, [pc, #256]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 8008320:	4313      	orrs	r3, r2
 8008322:	628b      	str	r3, [r1, #40]	; 0x28
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	3b01      	subs	r3, #1
 800832a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	3b01      	subs	r3, #1
 8008334:	025b      	lsls	r3, r3, #9
 8008336:	b29b      	uxth	r3, r3
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	3b01      	subs	r3, #1
 8008340:	041b      	lsls	r3, r3, #16
 8008342:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	3b01      	subs	r3, #1
 800834e:	061b      	lsls	r3, r3, #24
 8008350:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008354:	4932      	ldr	r1, [pc, #200]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 8008356:	4313      	orrs	r3, r2
 8008358:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800835a:	4b31      	ldr	r3, [pc, #196]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	492e      	ldr	r1, [pc, #184]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 8008368:	4313      	orrs	r3, r2
 800836a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800836c:	4b2c      	ldr	r3, [pc, #176]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	f023 0220 	bic.w	r2, r3, #32
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	4929      	ldr	r1, [pc, #164]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 800837a:	4313      	orrs	r3, r2
 800837c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800837e:	4b28      	ldr	r3, [pc, #160]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	4a27      	ldr	r2, [pc, #156]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 8008384:	f023 0310 	bic.w	r3, r3, #16
 8008388:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800838a:	4b25      	ldr	r3, [pc, #148]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 800838c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800838e:	4b25      	ldr	r3, [pc, #148]	; (8008424 <RCCEx_PLL2_Config+0x240>)
 8008390:	4013      	ands	r3, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	69d2      	ldr	r2, [r2, #28]
 8008396:	00d2      	lsls	r2, r2, #3
 8008398:	4921      	ldr	r1, [pc, #132]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800839e:	4b20      	ldr	r3, [pc, #128]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	4a1f      	ldr	r2, [pc, #124]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083a4:	f043 0310 	orr.w	r3, r3, #16
 80083a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d106      	bne.n	80083be <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083b0:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	4a1a      	ldr	r2, [pc, #104]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083bc:	e00f      	b.n	80083de <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d106      	bne.n	80083d2 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083c4:	4b16      	ldr	r3, [pc, #88]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	4a15      	ldr	r2, [pc, #84]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083d0:	e005      	b.n	80083de <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083d2:	4b13      	ldr	r3, [pc, #76]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	4a12      	ldr	r2, [pc, #72]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083de:	4b10      	ldr	r3, [pc, #64]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a0f      	ldr	r2, [pc, #60]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 80083e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ea:	f7f9 fadd 	bl	80019a8 <HAL_GetTick>
 80083ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083f0:	e008      	b.n	8008404 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80083f2:	f7f9 fad9 	bl	80019a8 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e006      	b.n	8008412 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <RCCEx_PLL2_Config+0x23c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	08010bc8 	.word	0x08010bc8
 8008420:	58024400 	.word	0x58024400
 8008424:	ffff0007 	.word	0xffff0007

08008428 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <RCCEx_PLL3_Config+0x1e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b3f      	cmp	r3, #63	; 0x3f
 8008444:	d904      	bls.n	8008450 <RCCEx_PLL3_Config+0x28>
 8008446:	f640 21ee 	movw	r1, #2798	; 0xaee
 800844a:	4887      	ldr	r0, [pc, #540]	; (8008668 <RCCEx_PLL3_Config+0x240>)
 800844c:	f7f8 fe6c 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d904      	bls.n	8008462 <RCCEx_PLL3_Config+0x3a>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008460:	d904      	bls.n	800846c <RCCEx_PLL3_Config+0x44>
 8008462:	f640 21ef 	movw	r1, #2799	; 0xaef
 8008466:	4880      	ldr	r0, [pc, #512]	; (8008668 <RCCEx_PLL3_Config+0x240>)
 8008468:	f7f8 fe5e 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <RCCEx_PLL3_Config+0x54>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	2b80      	cmp	r3, #128	; 0x80
 800847a:	d904      	bls.n	8008486 <RCCEx_PLL3_Config+0x5e>
 800847c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8008480:	4879      	ldr	r0, [pc, #484]	; (8008668 <RCCEx_PLL3_Config+0x240>)
 8008482:	f7f8 fe51 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <RCCEx_PLL3_Config+0x6e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	2b80      	cmp	r3, #128	; 0x80
 8008494:	d904      	bls.n	80084a0 <RCCEx_PLL3_Config+0x78>
 8008496:	f640 21f1 	movw	r1, #2801	; 0xaf1
 800849a:	4873      	ldr	r0, [pc, #460]	; (8008668 <RCCEx_PLL3_Config+0x240>)
 800849c:	f7f8 fe44 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <RCCEx_PLL3_Config+0x88>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b80      	cmp	r3, #128	; 0x80
 80084ae:	d904      	bls.n	80084ba <RCCEx_PLL3_Config+0x92>
 80084b0:	f640 21f2 	movw	r1, #2802	; 0xaf2
 80084b4:	486c      	ldr	r0, [pc, #432]	; (8008668 <RCCEx_PLL3_Config+0x240>)
 80084b6:	f7f8 fe37 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d013      	beq.n	80084ea <RCCEx_PLL3_Config+0xc2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ca:	d00e      	beq.n	80084ea <RCCEx_PLL3_Config+0xc2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d4:	d009      	beq.n	80084ea <RCCEx_PLL3_Config+0xc2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084de:	d004      	beq.n	80084ea <RCCEx_PLL3_Config+0xc2>
 80084e0:	f640 21f3 	movw	r1, #2803	; 0xaf3
 80084e4:	4860      	ldr	r0, [pc, #384]	; (8008668 <RCCEx_PLL3_Config+0x240>)
 80084e6:	f7f8 fe1f 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <RCCEx_PLL3_Config+0xde>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084fa:	d004      	beq.n	8008506 <RCCEx_PLL3_Config+0xde>
 80084fc:	f640 21f4 	movw	r1, #2804	; 0xaf4
 8008500:	4859      	ldr	r0, [pc, #356]	; (8008668 <RCCEx_PLL3_Config+0x240>)
 8008502:	f7f8 fe11 	bl	8001128 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850e:	d304      	bcc.n	800851a <RCCEx_PLL3_Config+0xf2>
 8008510:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8008514:	4854      	ldr	r0, [pc, #336]	; (8008668 <RCCEx_PLL3_Config+0x240>)
 8008516:	f7f8 fe07 	bl	8001128 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800851a:	4b54      	ldr	r3, [pc, #336]	; (800866c <RCCEx_PLL3_Config+0x244>)
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	2b03      	cmp	r3, #3
 8008524:	d101      	bne.n	800852a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e099      	b.n	800865e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800852a:	4b50      	ldr	r3, [pc, #320]	; (800866c <RCCEx_PLL3_Config+0x244>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a4f      	ldr	r2, [pc, #316]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008536:	f7f9 fa37 	bl	80019a8 <HAL_GetTick>
 800853a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800853c:	e008      	b.n	8008550 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800853e:	f7f9 fa33 	bl	80019a8 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b02      	cmp	r3, #2
 800854a:	d901      	bls.n	8008550 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e086      	b.n	800865e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008550:	4b46      	ldr	r3, [pc, #280]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1f0      	bne.n	800853e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800855c:	4b43      	ldr	r3, [pc, #268]	; (800866c <RCCEx_PLL3_Config+0x244>)
 800855e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008560:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	051b      	lsls	r3, r3, #20
 800856a:	4940      	ldr	r1, [pc, #256]	; (800866c <RCCEx_PLL3_Config+0x244>)
 800856c:	4313      	orrs	r3, r2
 800856e:	628b      	str	r3, [r1, #40]	; 0x28
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	3b01      	subs	r3, #1
 8008576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	3b01      	subs	r3, #1
 8008580:	025b      	lsls	r3, r3, #9
 8008582:	b29b      	uxth	r3, r3
 8008584:	431a      	orrs	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	3b01      	subs	r3, #1
 800858c:	041b      	lsls	r3, r3, #16
 800858e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008592:	431a      	orrs	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	3b01      	subs	r3, #1
 800859a:	061b      	lsls	r3, r3, #24
 800859c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085a0:	4932      	ldr	r1, [pc, #200]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085a6:	4b31      	ldr	r3, [pc, #196]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	492e      	ldr	r1, [pc, #184]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085b8:	4b2c      	ldr	r3, [pc, #176]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	4929      	ldr	r1, [pc, #164]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085ca:	4b28      	ldr	r3, [pc, #160]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	4a27      	ldr	r2, [pc, #156]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80085d6:	4b25      	ldr	r3, [pc, #148]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085da:	4b25      	ldr	r3, [pc, #148]	; (8008670 <RCCEx_PLL3_Config+0x248>)
 80085dc:	4013      	ands	r3, r2
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	69d2      	ldr	r2, [r2, #28]
 80085e2:	00d2      	lsls	r2, r2, #3
 80085e4:	4921      	ldr	r1, [pc, #132]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80085ea:	4b20      	ldr	r3, [pc, #128]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ee:	4a1f      	ldr	r2, [pc, #124]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d106      	bne.n	800860a <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085fc:	4b1b      	ldr	r3, [pc, #108]	; (800866c <RCCEx_PLL3_Config+0x244>)
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	4a1a      	ldr	r2, [pc, #104]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008608:	e00f      	b.n	800862a <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d106      	bne.n	800861e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008610:	4b16      	ldr	r3, [pc, #88]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	4a15      	ldr	r2, [pc, #84]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800861a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800861c:	e005      	b.n	800862a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800861e:	4b13      	ldr	r3, [pc, #76]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	4a12      	ldr	r2, [pc, #72]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800862a:	4b10      	ldr	r3, [pc, #64]	; (800866c <RCCEx_PLL3_Config+0x244>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a0f      	ldr	r2, [pc, #60]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008636:	f7f9 f9b7 	bl	80019a8 <HAL_GetTick>
 800863a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800863c:	e008      	b.n	8008650 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800863e:	f7f9 f9b3 	bl	80019a8 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d901      	bls.n	8008650 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e006      	b.n	800865e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <RCCEx_PLL3_Config+0x244>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d0f0      	beq.n	800863e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	08010bc8 	.word	0x08010bc8
 800866c:	58024400 	.word	0x58024400
 8008670:	ffff0007 	.word	0xffff0007

08008674 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e285      	b.n	8008b96 <HAL_SPI_Init+0x522>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a96      	ldr	r2, [pc, #600]	; (80088e8 <HAL_SPI_Init+0x274>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d01c      	beq.n	80086ce <HAL_SPI_Init+0x5a>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a94      	ldr	r2, [pc, #592]	; (80088ec <HAL_SPI_Init+0x278>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d017      	beq.n	80086ce <HAL_SPI_Init+0x5a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a93      	ldr	r2, [pc, #588]	; (80088f0 <HAL_SPI_Init+0x27c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d012      	beq.n	80086ce <HAL_SPI_Init+0x5a>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a91      	ldr	r2, [pc, #580]	; (80088f4 <HAL_SPI_Init+0x280>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d00d      	beq.n	80086ce <HAL_SPI_Init+0x5a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a90      	ldr	r2, [pc, #576]	; (80088f8 <HAL_SPI_Init+0x284>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d008      	beq.n	80086ce <HAL_SPI_Init+0x5a>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a8e      	ldr	r2, [pc, #568]	; (80088fc <HAL_SPI_Init+0x288>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d003      	beq.n	80086ce <HAL_SPI_Init+0x5a>
 80086c6:	21f7      	movs	r1, #247	; 0xf7
 80086c8:	488d      	ldr	r0, [pc, #564]	; (8008900 <HAL_SPI_Init+0x28c>)
 80086ca:	f7f8 fd2d 	bl	8001128 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d008      	beq.n	80086e8 <HAL_SPI_Init+0x74>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086de:	d003      	beq.n	80086e8 <HAL_SPI_Init+0x74>
 80086e0:	21f8      	movs	r1, #248	; 0xf8
 80086e2:	4887      	ldr	r0, [pc, #540]	; (8008900 <HAL_SPI_Init+0x28c>)
 80086e4:	f7f8 fd20 	bl	8001128 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d012      	beq.n	8008716 <HAL_SPI_Init+0xa2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086f8:	d00d      	beq.n	8008716 <HAL_SPI_Init+0xa2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008702:	d008      	beq.n	8008716 <HAL_SPI_Init+0xa2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800870c:	d003      	beq.n	8008716 <HAL_SPI_Init+0xa2>
 800870e:	21f9      	movs	r1, #249	; 0xf9
 8008710:	487b      	ldr	r0, [pc, #492]	; (8008900 <HAL_SPI_Init+0x28c>)
 8008712:	f7f8 fd09 	bl	8001128 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	2b1f      	cmp	r3, #31
 800871c:	d077      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	2b1e      	cmp	r3, #30
 8008724:	d073      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b1d      	cmp	r3, #29
 800872c:	d06f      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b1c      	cmp	r3, #28
 8008734:	d06b      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b1b      	cmp	r3, #27
 800873c:	d067      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b1a      	cmp	r3, #26
 8008744:	d063      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b19      	cmp	r3, #25
 800874c:	d05f      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	2b18      	cmp	r3, #24
 8008754:	d05b      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	2b17      	cmp	r3, #23
 800875c:	d057      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2b16      	cmp	r3, #22
 8008764:	d053      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	2b15      	cmp	r3, #21
 800876c:	d04f      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	2b14      	cmp	r3, #20
 8008774:	d04b      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b13      	cmp	r3, #19
 800877c:	d047      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	2b15      	cmp	r3, #21
 8008784:	d043      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	2b12      	cmp	r3, #18
 800878c:	d03f      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	2b11      	cmp	r3, #17
 8008794:	d03b      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	2b10      	cmp	r3, #16
 800879c:	d037      	beq.n	800880e <HAL_SPI_Init+0x19a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	2b0f      	cmp	r3, #15
 80087a4:	d033      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	2b0e      	cmp	r3, #14
 80087ac:	d02f      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	2b0d      	cmp	r3, #13
 80087b4:	d02b      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	2b0c      	cmp	r3, #12
 80087bc:	d027      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	2b0b      	cmp	r3, #11
 80087c4:	d023      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	2b0a      	cmp	r3, #10
 80087cc:	d01f      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	2b09      	cmp	r3, #9
 80087d4:	d01b      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	2b08      	cmp	r3, #8
 80087dc:	d017      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	2b07      	cmp	r3, #7
 80087e4:	d013      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	2b06      	cmp	r3, #6
 80087ec:	d00f      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	2b05      	cmp	r3, #5
 80087f4:	d00b      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d007      	beq.n	800880e <HAL_SPI_Init+0x19a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	2b03      	cmp	r3, #3
 8008804:	d003      	beq.n	800880e <HAL_SPI_Init+0x19a>
 8008806:	21fa      	movs	r1, #250	; 0xfa
 8008808:	483d      	ldr	r0, [pc, #244]	; (8008900 <HAL_SPI_Init+0x28c>)
 800880a:	f7f8 fc8d 	bl	8001128 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d047      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	2b20      	cmp	r3, #32
 800881c:	d043      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008822:	2b40      	cmp	r3, #64	; 0x40
 8008824:	d03f      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	2b60      	cmp	r3, #96	; 0x60
 800882c:	d03b      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008832:	2b80      	cmp	r3, #128	; 0x80
 8008834:	d037      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883a:	2ba0      	cmp	r3, #160	; 0xa0
 800883c:	d033      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008842:	2bc0      	cmp	r3, #192	; 0xc0
 8008844:	d02f      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884a:	2be0      	cmp	r3, #224	; 0xe0
 800884c:	d02b      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008856:	d026      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8008860:	d021      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008866:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800886a:	d01c      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008870:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8008874:	d017      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800887e:	d012      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008884:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8008888:	d00d      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8008892:	d008      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008898:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800889c:	d003      	beq.n	80088a6 <HAL_SPI_Init+0x232>
 800889e:	21fb      	movs	r1, #251	; 0xfb
 80088a0:	4817      	ldr	r0, [pc, #92]	; (8008900 <HAL_SPI_Init+0x28c>)
 80088a2:	f7f8 fc41 	bl	8001128 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088ae:	d00c      	beq.n	80088ca <HAL_SPI_Init+0x256>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <HAL_SPI_Init+0x256>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088c0:	d003      	beq.n	80088ca <HAL_SPI_Init+0x256>
 80088c2:	21fc      	movs	r1, #252	; 0xfc
 80088c4:	480e      	ldr	r0, [pc, #56]	; (8008900 <HAL_SPI_Init+0x28c>)
 80088c6:	f7f8 fc2f 	bl	8001128 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d2:	d017      	beq.n	8008904 <HAL_SPI_Init+0x290>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d013      	beq.n	8008904 <HAL_SPI_Init+0x290>
 80088dc:	21fd      	movs	r1, #253	; 0xfd
 80088de:	4808      	ldr	r0, [pc, #32]	; (8008900 <HAL_SPI_Init+0x28c>)
 80088e0:	f7f8 fc22 	bl	8001128 <assert_failed>
 80088e4:	e00e      	b.n	8008904 <HAL_SPI_Init+0x290>
 80088e6:	bf00      	nop
 80088e8:	40013000 	.word	0x40013000
 80088ec:	40003800 	.word	0x40003800
 80088f0:	40003c00 	.word	0x40003c00
 80088f4:	40013400 	.word	0x40013400
 80088f8:	40015000 	.word	0x40015000
 80088fc:	58001400 	.word	0x58001400
 8008900:	08010c04 	.word	0x08010c04
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d026      	beq.n	800895a <HAL_SPI_Init+0x2e6>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008914:	d021      	beq.n	800895a <HAL_SPI_Init+0x2e6>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800891e:	d01c      	beq.n	800895a <HAL_SPI_Init+0x2e6>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008928:	d017      	beq.n	800895a <HAL_SPI_Init+0x2e6>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008932:	d012      	beq.n	800895a <HAL_SPI_Init+0x2e6>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800893c:	d00d      	beq.n	800895a <HAL_SPI_Init+0x2e6>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008946:	d008      	beq.n	800895a <HAL_SPI_Init+0x2e6>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 8008950:	d003      	beq.n	800895a <HAL_SPI_Init+0x2e6>
 8008952:	21fe      	movs	r1, #254	; 0xfe
 8008954:	4892      	ldr	r0, [pc, #584]	; (8008ba0 <HAL_SPI_Init+0x52c>)
 8008956:	f7f8 fbe7 	bl	8001128 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d008      	beq.n	8008974 <HAL_SPI_Init+0x300>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800896a:	d003      	beq.n	8008974 <HAL_SPI_Init+0x300>
 800896c:	21ff      	movs	r1, #255	; 0xff
 800896e:	488c      	ldr	r0, [pc, #560]	; (8008ba0 <HAL_SPI_Init+0x52c>)
 8008970:	f7f8 fbda 	bl	8001128 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	2b00      	cmp	r3, #0
 800897a:	d009      	beq.n	8008990 <HAL_SPI_Init+0x31c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008984:	d004      	beq.n	8008990 <HAL_SPI_Init+0x31c>
 8008986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800898a:	4885      	ldr	r0, [pc, #532]	; (8008ba0 <HAL_SPI_Init+0x52c>)
 800898c:	f7f8 fbcc 	bl	8001128 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d11b      	bne.n	80089d0 <HAL_SPI_Init+0x35c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d009      	beq.n	80089b4 <HAL_SPI_Init+0x340>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a8:	d004      	beq.n	80089b4 <HAL_SPI_Init+0x340>
 80089aa:	f240 1103 	movw	r1, #259	; 0x103
 80089ae:	487c      	ldr	r0, [pc, #496]	; (8008ba0 <HAL_SPI_Init+0x52c>)
 80089b0:	f7f8 fbba 	bl	8001128 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d009      	beq.n	80089d0 <HAL_SPI_Init+0x35c>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089c4:	d004      	beq.n	80089d0 <HAL_SPI_Init+0x35c>
 80089c6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80089ca:	4875      	ldr	r0, [pc, #468]	; (8008ba0 <HAL_SPI_Init+0x52c>)
 80089cc:	f7f8 fbac 	bl	8001128 <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a72      	ldr	r2, [pc, #456]	; (8008ba4 <HAL_SPI_Init+0x530>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00f      	beq.n	8008a00 <HAL_SPI_Init+0x38c>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a70      	ldr	r2, [pc, #448]	; (8008ba8 <HAL_SPI_Init+0x534>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00a      	beq.n	8008a00 <HAL_SPI_Init+0x38c>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a6f      	ldr	r2, [pc, #444]	; (8008bac <HAL_SPI_Init+0x538>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d005      	beq.n	8008a00 <HAL_SPI_Init+0x38c>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	2b0f      	cmp	r3, #15
 80089fa:	d901      	bls.n	8008a00 <HAL_SPI_Init+0x38c>
  {
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e0ca      	b.n	8008b96 <HAL_SPI_Init+0x522>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fc9d 	bl	8009340 <SPI_GetPacketSize>
 8008a06:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a65      	ldr	r2, [pc, #404]	; (8008ba4 <HAL_SPI_Init+0x530>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00c      	beq.n	8008a2c <HAL_SPI_Init+0x3b8>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a64      	ldr	r2, [pc, #400]	; (8008ba8 <HAL_SPI_Init+0x534>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d007      	beq.n	8008a2c <HAL_SPI_Init+0x3b8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a62      	ldr	r2, [pc, #392]	; (8008bac <HAL_SPI_Init+0x538>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d002      	beq.n	8008a2c <HAL_SPI_Init+0x3b8>
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d811      	bhi.n	8008a50 <HAL_SPI_Init+0x3dc>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a30:	4a5c      	ldr	r2, [pc, #368]	; (8008ba4 <HAL_SPI_Init+0x530>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d009      	beq.n	8008a4a <HAL_SPI_Init+0x3d6>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a5b      	ldr	r2, [pc, #364]	; (8008ba8 <HAL_SPI_Init+0x534>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d004      	beq.n	8008a4a <HAL_SPI_Init+0x3d6>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a59      	ldr	r2, [pc, #356]	; (8008bac <HAL_SPI_Init+0x538>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d104      	bne.n	8008a54 <HAL_SPI_Init+0x3e0>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b10      	cmp	r3, #16
 8008a4e:	d901      	bls.n	8008a54 <HAL_SPI_Init+0x3e0>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e0a0      	b.n	8008b96 <HAL_SPI_Init+0x522>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <HAL_SPI_Init+0x3fa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7f8 fb63 	bl	8001134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0201 	bic.w	r2, r2, #1
 8008a84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a8e:	d110      	bne.n	8008ab2 <HAL_SPI_Init+0x43e>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a98:	d10b      	bne.n	8008ab2 <HAL_SPI_Init+0x43e>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d107      	bne.n	8008ab2 <HAL_SPI_Init+0x43e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ab0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69da      	ldr	r2, [r3, #28]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	431a      	orrs	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac4:	ea42 0103 	orr.w	r1, r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b12:	ea42 0103 	orr.w	r1, r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d113      	bne.n	8008b52 <HAL_SPI_Init+0x4de>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0201 	bic.w	r2, r2, #1
 8008b60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <HAL_SPI_Init+0x510>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	08010c04 	.word	0x08010c04
 8008ba4:	40013000 	.word	0x40013000
 8008ba8:	40003800 	.word	0x40003800
 8008bac:	40003c00 	.word	0x40003c00

08008bb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08c      	sub	sp, #48	; 0x30
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t   tmp_mode;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <HAL_SPI_TransmitReceive+0x26>
 8008bcc:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8008bd0:	489a      	ldr	r0, [pc, #616]	; (8008e3c <HAL_SPI_TransmitReceive+0x28c>)
 8008bd2:	f7f8 faa9 	bl	8001128 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_SPI_TransmitReceive+0x34>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e2da      	b.n	800919a <HAL_SPI_TransmitReceive+0x5ea>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bec:	f7f8 fedc 	bl	80019a8 <HAL_GetTick>
 8008bf0:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008bf2:	887b      	ldrh	r3, [r7, #2]
 8008bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8008bf6:	887b      	ldrh	r3, [r7, #2]
 8008bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
  tmp_state           = hspi->State;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c00:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c08:	7efb      	ldrb	r3, [r7, #27]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d014      	beq.n	8008c38 <HAL_SPI_TransmitReceive+0x88>
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c14:	d106      	bne.n	8008c24 <HAL_SPI_TransmitReceive+0x74>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <HAL_SPI_TransmitReceive+0x74>
 8008c1e:	7efb      	ldrb	r3, [r7, #27]
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d009      	beq.n	8008c38 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 8008c24:	2302      	movs	r3, #2
 8008c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c36:	e2b0      	b.n	800919a <HAL_SPI_TransmitReceive+0x5ea>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_SPI_TransmitReceive+0x9a>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <HAL_SPI_TransmitReceive+0x9a>
 8008c44:	887b      	ldrh	r3, [r7, #2]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c5c:	e29d      	b.n	800919a <HAL_SPI_TransmitReceive+0x5ea>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d003      	beq.n	8008c72 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2205      	movs	r2, #5
 8008c6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	887a      	ldrh	r2, [r7, #2]
 8008c84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	887a      	ldrh	r2, [r7, #2]
 8008c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	887a      	ldrh	r2, [r7, #2]
 8008c9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	887a      	ldrh	r2, [r7, #2]
 8008ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	4b61      	ldr	r3, [pc, #388]	; (8008e40 <HAL_SPI_TransmitReceive+0x290>)
 8008cba:	4013      	ands	r3, r2
 8008cbc:	8879      	ldrh	r1, [r7, #2]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f042 0201 	orr.w	r2, r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cde:	d107      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2b0f      	cmp	r3, #15
 8008cf6:	d970      	bls.n	8008dda <HAL_SPI_TransmitReceive+0x22a>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008cf8:	e044      	b.n	8008d84 <HAL_SPI_TransmitReceive+0x1d4>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d11a      	bne.n	8008d3e <HAL_SPI_TransmitReceive+0x18e>
 8008d08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d017      	beq.n	8008d3e <HAL_SPI_TransmitReceive+0x18e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6812      	ldr	r2, [r2, #0]
 8008d18:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1e:	1d1a      	adds	r2, r3, #4
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	695a      	ldr	r2, [r3, #20]
 8008d44:	f248 0308 	movw	r3, #32776	; 0x8008
 8008d48:	4013      	ands	r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01a      	beq.n	8008d84 <HAL_SPI_TransmitReceive+0x1d4>
 8008d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d017      	beq.n	8008d84 <HAL_SPI_TransmitReceive+0x1d4>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d5e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	3b01      	subs	r3, #1
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d82:	84bb      	strh	r3, [r7, #36]	; 0x24
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1b7      	bne.n	8008cfa <HAL_SPI_TransmitReceive+0x14a>
 8008d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1b4      	bne.n	8008cfa <HAL_SPI_TransmitReceive+0x14a>
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d90:	f7f8 fe0a 	bl	80019a8 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d803      	bhi.n	8008da8 <HAL_SPI_TransmitReceive+0x1f8>
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d103      	bne.n	8008db0 <HAL_SPI_TransmitReceive+0x200>
 8008da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f040 81ce 	bne.w	800914c <HAL_SPI_TransmitReceive+0x59c>
    {
      /* Call standard close procedure with error check */
      SPI_CloseTransfer(hspi);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 f9f7 	bl	80091a4 <SPI_CloseTransfer>

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      hspi->State = HAL_SPI_STATE_READY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e1df      	b.n	800919a <HAL_SPI_TransmitReceive+0x5ea>
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2b07      	cmp	r3, #7
 8008de0:	f240 81ac 	bls.w	800913c <HAL_SPI_TransmitReceive+0x58c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008de4:	e0b0      	b.n	8008f48 <HAL_SPI_TransmitReceive+0x398>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d140      	bne.n	8008e76 <HAL_SPI_TransmitReceive+0x2c6>
 8008df4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d03d      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x2c6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008dfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d921      	bls.n	8008e44 <HAL_SPI_TransmitReceive+0x294>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d01d      	beq.n	8008e44 <HAL_SPI_TransmitReceive+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e18:	1d1a      	adds	r2, r3, #4
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b02      	subs	r3, #2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008e38:	e01d      	b.n	8008e76 <HAL_SPI_TransmitReceive+0x2c6>
 8008e3a:	bf00      	nop
 8008e3c:	08010c04 	.word	0x08010c04
 8008e40:	ffff0000 	.word	0xffff0000
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3320      	adds	r3, #32
 8008e4e:	8812      	ldrh	r2, [r2, #0]
 8008e50:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e56:	1c9a      	adds	r2, r3, #2
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e74:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d03d      	beq.n	8008f00 <HAL_SPI_TransmitReceive+0x350>
 8008e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d03a      	beq.n	8008f00 <HAL_SPI_TransmitReceive+0x350>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d018      	beq.n	8008eca <HAL_SPI_TransmitReceive+0x31a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ea2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea8:	1d1a      	adds	r2, r3, #4
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b02      	subs	r3, #2
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008ec8:	e01a      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x350>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ed6:	8812      	ldrh	r2, [r2, #0]
 8008ed8:	b292      	uxth	r2, r2
 8008eda:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ee0:	1c9a      	adds	r2, r3, #2
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008efe:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f00:	f7f8 fd52 	bl	80019a8 <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d803      	bhi.n	8008f18 <HAL_SPI_TransmitReceive+0x368>
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d102      	bne.n	8008f1e <HAL_SPI_TransmitReceive+0x36e>
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d114      	bne.n	8008f48 <HAL_SPI_TransmitReceive+0x398>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 f940 	bl	80091a4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e128      	b.n	800919a <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f47f af4b 	bne.w	8008de6 <HAL_SPI_TransmitReceive+0x236>
 8008f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f47f af47 	bne.w	8008de6 <HAL_SPI_TransmitReceive+0x236>
 8008f58:	e0f8      	b.n	800914c <HAL_SPI_TransmitReceive+0x59c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d15c      	bne.n	8009022 <HAL_SPI_TransmitReceive+0x472>
 8008f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d059      	beq.n	8009022 <HAL_SPI_TransmitReceive+0x472>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d91c      	bls.n	8008fae <HAL_SPI_TransmitReceive+0x3fe>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f78:	2b40      	cmp	r3, #64	; 0x40
 8008f7a:	d918      	bls.n	8008fae <HAL_SPI_TransmitReceive+0x3fe>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6812      	ldr	r2, [r2, #0]
 8008f86:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8c:	1d1a      	adds	r2, r3, #4
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b04      	subs	r3, #4
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008faa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008fac:	e039      	b.n	8009022 <HAL_SPI_TransmitReceive+0x472>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d91d      	bls.n	8008ff0 <HAL_SPI_TransmitReceive+0x440>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d019      	beq.n	8008ff0 <HAL_SPI_TransmitReceive+0x440>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3320      	adds	r3, #32
 8008fc6:	8812      	ldrh	r2, [r2, #0]
 8008fc8:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fce:	1c9a      	adds	r2, r3, #2
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	3b02      	subs	r3, #2
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008fee:	e018      	b.n	8009022 <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3320      	adds	r3, #32
 8008ffa:	7812      	ldrb	r2, [r2, #0]
 8008ffc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800900e:	b29b      	uxth	r3, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009020:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d061      	beq.n	80090f4 <HAL_SPI_TransmitReceive+0x544>
 8009030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	d05e      	beq.n	80090f4 <HAL_SPI_TransmitReceive+0x544>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d018      	beq.n	8009076 <HAL_SPI_TransmitReceive+0x4c6>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800904c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800904e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009054:	1d1a      	adds	r2, r3, #4
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b04      	subs	r3, #4
 8009064:	b29a      	uxth	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009072:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009074:	e03e      	b.n	80090f4 <HAL_SPI_TransmitReceive+0x544>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009084:	d91b      	bls.n	80090be <HAL_SPI_TransmitReceive+0x50e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009092:	8812      	ldrh	r2, [r2, #0]
 8009094:	b292      	uxth	r2, r2
 8009096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909c:	1c9a      	adds	r2, r3, #2
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b02      	subs	r3, #2
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80090bc:	e01a      	b.n	80090f4 <HAL_SPI_TransmitReceive+0x544>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ca:	7812      	ldrb	r2, [r2, #0]
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090f2:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090f4:	f7f8 fc58 	bl	80019a8 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009100:	429a      	cmp	r2, r3
 8009102:	d803      	bhi.n	800910c <HAL_SPI_TransmitReceive+0x55c>
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d102      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x562>
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	2b00      	cmp	r3, #0
 8009110:	d114      	bne.n	800913c <HAL_SPI_TransmitReceive+0x58c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 f846 	bl	80091a4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e02e      	b.n	800919a <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800913c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800913e:	2b00      	cmp	r3, #0
 8009140:	f47f af0b 	bne.w	8008f5a <HAL_SPI_TransmitReceive+0x3aa>
 8009144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009146:	2b00      	cmp	r3, #0
 8009148:	f47f af07 	bne.w	8008f5a <HAL_SPI_TransmitReceive+0x3aa>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	2200      	movs	r2, #0
 8009154:	2108      	movs	r1, #8
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f8c4 	bl	80092e4 <SPI_WaitOnFlagUntilTimeout>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d007      	beq.n	8009172 <HAL_SPI_TransmitReceive+0x5c2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009168:	f043 0220 	orr.w	r2, r3, #32
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 f816 	bl	80091a4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <HAL_SPI_TransmitReceive+0x5e6>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e001      	b.n	800919a <HAL_SPI_TransmitReceive+0x5ea>
  }
  return errorcode;
 8009196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800919a:	4618      	mov	r0, r3
 800919c:	3728      	adds	r7, #40	; 0x28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop

080091a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0208 	orr.w	r2, r2, #8
 80091c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0210 	orr.w	r2, r2, #16
 80091d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 0201 	bic.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6919      	ldr	r1, [r3, #16]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b3c      	ldr	r3, [pc, #240]	; (80092e0 <SPI_CloseTransfer+0x13c>)
 80091f0:	400b      	ands	r3, r1
 80091f2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009202:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b04      	cmp	r3, #4
 800920e:	d014      	beq.n	800923a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00f      	beq.n	800923a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	699a      	ldr	r2, [r3, #24]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0220 	orr.w	r2, r2, #32
 8009238:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b03      	cmp	r3, #3
 8009244:	d014      	beq.n	8009270 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00f      	beq.n	8009270 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009256:	f043 0204 	orr.w	r2, r3, #4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	699a      	ldr	r2, [r3, #24]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800926e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00f      	beq.n	800929a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009280:	f043 0201 	orr.w	r2, r3, #1
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009298:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00f      	beq.n	80092c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092aa:	f043 0208 	orr.w	r2, r3, #8
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699a      	ldr	r2, [r3, #24]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80092d4:	bf00      	nop
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	fffffc90 	.word	0xfffffc90

080092e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	4613      	mov	r3, r2
 80092f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80092f4:	e010      	b.n	8009318 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092f6:	f7f8 fb57 	bl	80019a8 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	429a      	cmp	r2, r3
 8009304:	d803      	bhi.n	800930e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d102      	bne.n	8009314 <SPI_WaitOnFlagUntilTimeout+0x30>
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e00f      	b.n	8009338 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	695a      	ldr	r2, [r3, #20]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	4013      	ands	r3, r2
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	429a      	cmp	r2, r3
 8009326:	bf0c      	ite	eq
 8009328:	2301      	moveq	r3, #1
 800932a:	2300      	movne	r3, #0
 800932c:	b2db      	uxtb	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	429a      	cmp	r2, r3
 8009334:	d0df      	beq.n	80092f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934c:	095b      	lsrs	r3, r3, #5
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	3301      	adds	r3, #1
 8009358:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	3307      	adds	r3, #7
 800935e:	08db      	lsrs	r3, r3, #3
 8009360:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	fb02 f303 	mul.w	r3, r2, r3
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
	...

08009378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e0ab      	b.n	80094e2 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d032      	beq.n	80093f8 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a55      	ldr	r2, [pc, #340]	; (80094ec <HAL_UART_Init+0x174>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d05f      	beq.n	800945c <HAL_UART_Init+0xe4>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a53      	ldr	r2, [pc, #332]	; (80094f0 <HAL_UART_Init+0x178>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d05a      	beq.n	800945c <HAL_UART_Init+0xe4>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a52      	ldr	r2, [pc, #328]	; (80094f4 <HAL_UART_Init+0x17c>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d055      	beq.n	800945c <HAL_UART_Init+0xe4>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a50      	ldr	r2, [pc, #320]	; (80094f8 <HAL_UART_Init+0x180>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d050      	beq.n	800945c <HAL_UART_Init+0xe4>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a4f      	ldr	r2, [pc, #316]	; (80094fc <HAL_UART_Init+0x184>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d04b      	beq.n	800945c <HAL_UART_Init+0xe4>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a4d      	ldr	r2, [pc, #308]	; (8009500 <HAL_UART_Init+0x188>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d046      	beq.n	800945c <HAL_UART_Init+0xe4>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a4c      	ldr	r2, [pc, #304]	; (8009504 <HAL_UART_Init+0x18c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d041      	beq.n	800945c <HAL_UART_Init+0xe4>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a4a      	ldr	r2, [pc, #296]	; (8009508 <HAL_UART_Init+0x190>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d03c      	beq.n	800945c <HAL_UART_Init+0xe4>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a49      	ldr	r2, [pc, #292]	; (800950c <HAL_UART_Init+0x194>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d037      	beq.n	800945c <HAL_UART_Init+0xe4>
 80093ec:	f44f 7199 	mov.w	r1, #306	; 0x132
 80093f0:	4847      	ldr	r0, [pc, #284]	; (8009510 <HAL_UART_Init+0x198>)
 80093f2:	f7f7 fe99 	bl	8001128 <assert_failed>
 80093f6:	e031      	b.n	800945c <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a3b      	ldr	r2, [pc, #236]	; (80094ec <HAL_UART_Init+0x174>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d02c      	beq.n	800945c <HAL_UART_Init+0xe4>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a3a      	ldr	r2, [pc, #232]	; (80094f0 <HAL_UART_Init+0x178>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d027      	beq.n	800945c <HAL_UART_Init+0xe4>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a38      	ldr	r2, [pc, #224]	; (80094f4 <HAL_UART_Init+0x17c>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d022      	beq.n	800945c <HAL_UART_Init+0xe4>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a37      	ldr	r2, [pc, #220]	; (80094f8 <HAL_UART_Init+0x180>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d01d      	beq.n	800945c <HAL_UART_Init+0xe4>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a35      	ldr	r2, [pc, #212]	; (80094fc <HAL_UART_Init+0x184>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d018      	beq.n	800945c <HAL_UART_Init+0xe4>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a34      	ldr	r2, [pc, #208]	; (8009500 <HAL_UART_Init+0x188>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <HAL_UART_Init+0xe4>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a32      	ldr	r2, [pc, #200]	; (8009504 <HAL_UART_Init+0x18c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00e      	beq.n	800945c <HAL_UART_Init+0xe4>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a31      	ldr	r2, [pc, #196]	; (8009508 <HAL_UART_Init+0x190>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d009      	beq.n	800945c <HAL_UART_Init+0xe4>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a2f      	ldr	r2, [pc, #188]	; (800950c <HAL_UART_Init+0x194>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_UART_Init+0xe4>
 8009452:	f240 1137 	movw	r1, #311	; 0x137
 8009456:	482e      	ldr	r0, [pc, #184]	; (8009510 <HAL_UART_Init+0x198>)
 8009458:	f7f7 fe66 	bl	8001128 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009462:	2b00      	cmp	r3, #0
 8009464:	d106      	bne.n	8009474 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7f7 fffa 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2224      	movs	r2, #36	; 0x24
 8009478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0201 	bic.w	r2, r2, #1
 800948a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f843 	bl	8009518 <UART_SetConfig>
 8009492:	4603      	mov	r3, r0
 8009494:	2b01      	cmp	r3, #1
 8009496:	d101      	bne.n	800949c <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e022      	b.n	80094e2 <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f002 fa95 	bl	800b9d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f042 0201 	orr.w	r2, r2, #1
 80094d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f002 fbf0 	bl	800bcc0 <UART_CheckIdleState>
 80094e0:	4603      	mov	r3, r0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	40011000 	.word	0x40011000
 80094f0:	40004400 	.word	0x40004400
 80094f4:	40004800 	.word	0x40004800
 80094f8:	40004c00 	.word	0x40004c00
 80094fc:	40005000 	.word	0x40005000
 8009500:	40011400 	.word	0x40011400
 8009504:	40007800 	.word	0x40007800
 8009508:	40007c00 	.word	0x40007c00
 800950c:	58000c00 	.word	0x58000c00
 8009510:	08010c3c 	.word	0x08010c3c
 8009514:	00000000 	.word	0x00000000

08009518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009518:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800951c:	b090      	sub	sp, #64	; 0x40
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009522:	2300      	movs	r3, #0
 8009524:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800952c:	2300      	movs	r3, #0
 800952e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	4a17      	ldr	r2, [pc, #92]	; (8009594 <UART_SetConfig+0x7c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d904      	bls.n	8009544 <UART_SetConfig+0x2c>
 800953a:	f640 3134 	movw	r1, #2868	; 0xb34
 800953e:	4816      	ldr	r0, [pc, #88]	; (8009598 <UART_SetConfig+0x80>)
 8009540:	f7f7 fdf2 	bl	8001128 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800954c:	d00d      	beq.n	800956a <UART_SetConfig+0x52>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <UART_SetConfig+0x52>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955e:	d004      	beq.n	800956a <UART_SetConfig+0x52>
 8009560:	f640 3135 	movw	r1, #2869	; 0xb35
 8009564:	480c      	ldr	r0, [pc, #48]	; (8009598 <UART_SetConfig+0x80>)
 8009566:	f7f7 fddf 	bl	8001128 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a0b      	ldr	r2, [pc, #44]	; (800959c <UART_SetConfig+0x84>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d115      	bne.n	80095a0 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d037      	beq.n	80095ec <UART_SetConfig+0xd4>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009584:	d032      	beq.n	80095ec <UART_SetConfig+0xd4>
 8009586:	f640 3138 	movw	r1, #2872	; 0xb38
 800958a:	4803      	ldr	r0, [pc, #12]	; (8009598 <UART_SetConfig+0x80>)
 800958c:	f7f7 fdcc 	bl	8001128 <assert_failed>
 8009590:	e02c      	b.n	80095ec <UART_SetConfig+0xd4>
 8009592:	bf00      	nop
 8009594:	00bebc20 	.word	0x00bebc20
 8009598:	08010c3c 	.word	0x08010c3c
 800959c:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a8:	d012      	beq.n	80095d0 <UART_SetConfig+0xb8>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00e      	beq.n	80095d0 <UART_SetConfig+0xb8>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095ba:	d009      	beq.n	80095d0 <UART_SetConfig+0xb8>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095c4:	d004      	beq.n	80095d0 <UART_SetConfig+0xb8>
 80095c6:	f640 313c 	movw	r1, #2876	; 0xb3c
 80095ca:	48aa      	ldr	r0, [pc, #680]	; (8009874 <UART_SetConfig+0x35c>)
 80095cc:	f7f7 fdac 	bl	8001128 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <UART_SetConfig+0xd4>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095e0:	d004      	beq.n	80095ec <UART_SetConfig+0xd4>
 80095e2:	f640 313d 	movw	r1, #2877	; 0xb3d
 80095e6:	48a3      	ldr	r0, [pc, #652]	; (8009874 <UART_SetConfig+0x35c>)
 80095e8:	f7f7 fd9e 	bl	8001128 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00e      	beq.n	8009612 <UART_SetConfig+0xfa>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095fc:	d009      	beq.n	8009612 <UART_SetConfig+0xfa>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009606:	d004      	beq.n	8009612 <UART_SetConfig+0xfa>
 8009608:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 800960c:	4899      	ldr	r0, [pc, #612]	; (8009874 <UART_SetConfig+0x35c>)
 800960e:	f7f7 fd8b 	bl	8001128 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	f023 030c 	bic.w	r3, r3, #12
 800961a:	2b00      	cmp	r3, #0
 800961c:	d103      	bne.n	8009626 <UART_SetConfig+0x10e>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <UART_SetConfig+0x118>
 8009626:	f640 3141 	movw	r1, #2881	; 0xb41
 800962a:	4892      	ldr	r0, [pc, #584]	; (8009874 <UART_SetConfig+0x35c>)
 800962c:	f7f7 fd7c 	bl	8001128 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d013      	beq.n	8009660 <UART_SetConfig+0x148>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009640:	d00e      	beq.n	8009660 <UART_SetConfig+0x148>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800964a:	d009      	beq.n	8009660 <UART_SetConfig+0x148>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009654:	d004      	beq.n	8009660 <UART_SetConfig+0x148>
 8009656:	f640 3142 	movw	r1, #2882	; 0xb42
 800965a:	4886      	ldr	r0, [pc, #536]	; (8009874 <UART_SetConfig+0x35c>)
 800965c:	f7f7 fd64 	bl	8001128 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d009      	beq.n	800967c <UART_SetConfig+0x164>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009670:	d004      	beq.n	800967c <UART_SetConfig+0x164>
 8009672:	f640 3143 	movw	r1, #2883	; 0xb43
 8009676:	487f      	ldr	r0, [pc, #508]	; (8009874 <UART_SetConfig+0x35c>)
 8009678:	f7f7 fd56 	bl	8001128 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	2b00      	cmp	r3, #0
 8009682:	d030      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	2b01      	cmp	r3, #1
 800968a:	d02c      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	2b02      	cmp	r3, #2
 8009692:	d028      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	2b03      	cmp	r3, #3
 800969a:	d024      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d020      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	2b05      	cmp	r3, #5
 80096aa:	d01c      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b0:	2b06      	cmp	r3, #6
 80096b2:	d018      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	2b07      	cmp	r3, #7
 80096ba:	d014      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d010      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c8:	2b09      	cmp	r3, #9
 80096ca:	d00c      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	2b0a      	cmp	r3, #10
 80096d2:	d008      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	2b0b      	cmp	r3, #11
 80096da:	d004      	beq.n	80096e6 <UART_SetConfig+0x1ce>
 80096dc:	f640 3144 	movw	r1, #2884	; 0xb44
 80096e0:	4864      	ldr	r0, [pc, #400]	; (8009874 <UART_SetConfig+0x35c>)
 80096e2:	f7f7 fd21 	bl	8001128 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	431a      	orrs	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009704:	4313      	orrs	r3, r2
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b5a      	ldr	r3, [pc, #360]	; (8009878 <UART_SetConfig+0x360>)
 8009710:	4013      	ands	r3, r2
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	6812      	ldr	r2, [r2, #0]
 8009716:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009718:	430b      	orrs	r3, r1
 800971a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a4f      	ldr	r2, [pc, #316]	; (800987c <UART_SetConfig+0x364>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d004      	beq.n	800974c <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009748:	4313      	orrs	r3, r2
 800974a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689a      	ldr	r2, [r3, #8]
 8009752:	4b4b      	ldr	r3, [pc, #300]	; (8009880 <UART_SetConfig+0x368>)
 8009754:	4013      	ands	r3, r2
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800975c:	430b      	orrs	r3, r1
 800975e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	f023 010f 	bic.w	r1, r3, #15
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a42      	ldr	r2, [pc, #264]	; (8009884 <UART_SetConfig+0x36c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	f040 8085 	bne.w	800988c <UART_SetConfig+0x374>
 8009782:	4b41      	ldr	r3, [pc, #260]	; (8009888 <UART_SetConfig+0x370>)
 8009784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800978a:	2b28      	cmp	r3, #40	; 0x28
 800978c:	d86c      	bhi.n	8009868 <UART_SetConfig+0x350>
 800978e:	a201      	add	r2, pc, #4	; (adr r2, 8009794 <UART_SetConfig+0x27c>)
 8009790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009794:	08009839 	.word	0x08009839
 8009798:	08009869 	.word	0x08009869
 800979c:	08009869 	.word	0x08009869
 80097a0:	08009869 	.word	0x08009869
 80097a4:	08009869 	.word	0x08009869
 80097a8:	08009869 	.word	0x08009869
 80097ac:	08009869 	.word	0x08009869
 80097b0:	08009869 	.word	0x08009869
 80097b4:	08009841 	.word	0x08009841
 80097b8:	08009869 	.word	0x08009869
 80097bc:	08009869 	.word	0x08009869
 80097c0:	08009869 	.word	0x08009869
 80097c4:	08009869 	.word	0x08009869
 80097c8:	08009869 	.word	0x08009869
 80097cc:	08009869 	.word	0x08009869
 80097d0:	08009869 	.word	0x08009869
 80097d4:	08009849 	.word	0x08009849
 80097d8:	08009869 	.word	0x08009869
 80097dc:	08009869 	.word	0x08009869
 80097e0:	08009869 	.word	0x08009869
 80097e4:	08009869 	.word	0x08009869
 80097e8:	08009869 	.word	0x08009869
 80097ec:	08009869 	.word	0x08009869
 80097f0:	08009869 	.word	0x08009869
 80097f4:	08009851 	.word	0x08009851
 80097f8:	08009869 	.word	0x08009869
 80097fc:	08009869 	.word	0x08009869
 8009800:	08009869 	.word	0x08009869
 8009804:	08009869 	.word	0x08009869
 8009808:	08009869 	.word	0x08009869
 800980c:	08009869 	.word	0x08009869
 8009810:	08009869 	.word	0x08009869
 8009814:	08009859 	.word	0x08009859
 8009818:	08009869 	.word	0x08009869
 800981c:	08009869 	.word	0x08009869
 8009820:	08009869 	.word	0x08009869
 8009824:	08009869 	.word	0x08009869
 8009828:	08009869 	.word	0x08009869
 800982c:	08009869 	.word	0x08009869
 8009830:	08009869 	.word	0x08009869
 8009834:	08009861 	.word	0x08009861
 8009838:	2301      	movs	r3, #1
 800983a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800983e:	e23b      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009846:	e237      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800984e:	e233      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009856:	e22f      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009858:	2320      	movs	r3, #32
 800985a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800985e:	e22b      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009866:	e227      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009868:	2380      	movs	r3, #128	; 0x80
 800986a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800986e:	bf00      	nop
 8009870:	e222      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009872:	bf00      	nop
 8009874:	08010c3c 	.word	0x08010c3c
 8009878:	cfff69f3 	.word	0xcfff69f3
 800987c:	58000c00 	.word	0x58000c00
 8009880:	11fff4ff 	.word	0x11fff4ff
 8009884:	40011000 	.word	0x40011000
 8009888:	58024400 	.word	0x58024400
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4ac9      	ldr	r2, [pc, #804]	; (8009bb8 <UART_SetConfig+0x6a0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d131      	bne.n	80098fa <UART_SetConfig+0x3e2>
 8009896:	4bc9      	ldr	r3, [pc, #804]	; (8009bbc <UART_SetConfig+0x6a4>)
 8009898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989a:	f003 0307 	and.w	r3, r3, #7
 800989e:	2b05      	cmp	r3, #5
 80098a0:	d826      	bhi.n	80098f0 <UART_SetConfig+0x3d8>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <UART_SetConfig+0x390>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	080098c1 	.word	0x080098c1
 80098ac:	080098c9 	.word	0x080098c9
 80098b0:	080098d1 	.word	0x080098d1
 80098b4:	080098d9 	.word	0x080098d9
 80098b8:	080098e1 	.word	0x080098e1
 80098bc:	080098e9 	.word	0x080098e9
 80098c0:	2300      	movs	r3, #0
 80098c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098c6:	e1f7      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80098c8:	2304      	movs	r3, #4
 80098ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ce:	e1f3      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80098d0:	2308      	movs	r3, #8
 80098d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098d6:	e1ef      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80098d8:	2310      	movs	r3, #16
 80098da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098de:	e1eb      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80098e0:	2320      	movs	r3, #32
 80098e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098e6:	e1e7      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80098e8:	2340      	movs	r3, #64	; 0x40
 80098ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ee:	e1e3      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80098f0:	2380      	movs	r3, #128	; 0x80
 80098f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098f6:	bf00      	nop
 80098f8:	e1de      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4ab0      	ldr	r2, [pc, #704]	; (8009bc0 <UART_SetConfig+0x6a8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d132      	bne.n	800996a <UART_SetConfig+0x452>
 8009904:	4bad      	ldr	r3, [pc, #692]	; (8009bbc <UART_SetConfig+0x6a4>)
 8009906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009908:	f003 0307 	and.w	r3, r3, #7
 800990c:	2b05      	cmp	r3, #5
 800990e:	d827      	bhi.n	8009960 <UART_SetConfig+0x448>
 8009910:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <UART_SetConfig+0x400>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	08009931 	.word	0x08009931
 800991c:	08009939 	.word	0x08009939
 8009920:	08009941 	.word	0x08009941
 8009924:	08009949 	.word	0x08009949
 8009928:	08009951 	.word	0x08009951
 800992c:	08009959 	.word	0x08009959
 8009930:	2300      	movs	r3, #0
 8009932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009936:	e1bf      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009938:	2304      	movs	r3, #4
 800993a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800993e:	e1bb      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009940:	2308      	movs	r3, #8
 8009942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009946:	e1b7      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009948:	2310      	movs	r3, #16
 800994a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800994e:	e1b3      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009950:	2320      	movs	r3, #32
 8009952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009956:	e1af      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009958:	2340      	movs	r3, #64	; 0x40
 800995a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800995e:	e1ab      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009960:	2380      	movs	r3, #128	; 0x80
 8009962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009966:	bf00      	nop
 8009968:	e1a6      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a95      	ldr	r2, [pc, #596]	; (8009bc4 <UART_SetConfig+0x6ac>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d132      	bne.n	80099da <UART_SetConfig+0x4c2>
 8009974:	4b91      	ldr	r3, [pc, #580]	; (8009bbc <UART_SetConfig+0x6a4>)
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	f003 0307 	and.w	r3, r3, #7
 800997c:	2b05      	cmp	r3, #5
 800997e:	d827      	bhi.n	80099d0 <UART_SetConfig+0x4b8>
 8009980:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <UART_SetConfig+0x470>)
 8009982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009986:	bf00      	nop
 8009988:	080099a1 	.word	0x080099a1
 800998c:	080099a9 	.word	0x080099a9
 8009990:	080099b1 	.word	0x080099b1
 8009994:	080099b9 	.word	0x080099b9
 8009998:	080099c1 	.word	0x080099c1
 800999c:	080099c9 	.word	0x080099c9
 80099a0:	2300      	movs	r3, #0
 80099a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099a6:	e187      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80099a8:	2304      	movs	r3, #4
 80099aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ae:	e183      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80099b0:	2308      	movs	r3, #8
 80099b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099b6:	e17f      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80099b8:	2310      	movs	r3, #16
 80099ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099be:	e17b      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80099c0:	2320      	movs	r3, #32
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	e177      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80099c8:	2340      	movs	r3, #64	; 0x40
 80099ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ce:	e173      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80099d0:	2380      	movs	r3, #128	; 0x80
 80099d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099d6:	bf00      	nop
 80099d8:	e16e      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a7a      	ldr	r2, [pc, #488]	; (8009bc8 <UART_SetConfig+0x6b0>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d132      	bne.n	8009a4a <UART_SetConfig+0x532>
 80099e4:	4b75      	ldr	r3, [pc, #468]	; (8009bbc <UART_SetConfig+0x6a4>)
 80099e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	2b05      	cmp	r3, #5
 80099ee:	d827      	bhi.n	8009a40 <UART_SetConfig+0x528>
 80099f0:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <UART_SetConfig+0x4e0>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a11 	.word	0x08009a11
 80099fc:	08009a19 	.word	0x08009a19
 8009a00:	08009a21 	.word	0x08009a21
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a31 	.word	0x08009a31
 8009a0c:	08009a39 	.word	0x08009a39
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a16:	e14f      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009a18:	2304      	movs	r3, #4
 8009a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a1e:	e14b      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009a20:	2308      	movs	r3, #8
 8009a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a26:	e147      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009a28:	2310      	movs	r3, #16
 8009a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a2e:	e143      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009a30:	2320      	movs	r3, #32
 8009a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a36:	e13f      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009a38:	2340      	movs	r3, #64	; 0x40
 8009a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a3e:	e13b      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009a40:	2380      	movs	r3, #128	; 0x80
 8009a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a46:	bf00      	nop
 8009a48:	e136      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a5f      	ldr	r2, [pc, #380]	; (8009bcc <UART_SetConfig+0x6b4>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d178      	bne.n	8009b46 <UART_SetConfig+0x62e>
 8009a54:	4b59      	ldr	r3, [pc, #356]	; (8009bbc <UART_SetConfig+0x6a4>)
 8009a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a5c:	2b28      	cmp	r3, #40	; 0x28
 8009a5e:	d86d      	bhi.n	8009b3c <UART_SetConfig+0x624>
 8009a60:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <UART_SetConfig+0x550>)
 8009a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a66:	bf00      	nop
 8009a68:	08009b0d 	.word	0x08009b0d
 8009a6c:	08009b3d 	.word	0x08009b3d
 8009a70:	08009b3d 	.word	0x08009b3d
 8009a74:	08009b3d 	.word	0x08009b3d
 8009a78:	08009b3d 	.word	0x08009b3d
 8009a7c:	08009b3d 	.word	0x08009b3d
 8009a80:	08009b3d 	.word	0x08009b3d
 8009a84:	08009b3d 	.word	0x08009b3d
 8009a88:	08009b15 	.word	0x08009b15
 8009a8c:	08009b3d 	.word	0x08009b3d
 8009a90:	08009b3d 	.word	0x08009b3d
 8009a94:	08009b3d 	.word	0x08009b3d
 8009a98:	08009b3d 	.word	0x08009b3d
 8009a9c:	08009b3d 	.word	0x08009b3d
 8009aa0:	08009b3d 	.word	0x08009b3d
 8009aa4:	08009b3d 	.word	0x08009b3d
 8009aa8:	08009b1d 	.word	0x08009b1d
 8009aac:	08009b3d 	.word	0x08009b3d
 8009ab0:	08009b3d 	.word	0x08009b3d
 8009ab4:	08009b3d 	.word	0x08009b3d
 8009ab8:	08009b3d 	.word	0x08009b3d
 8009abc:	08009b3d 	.word	0x08009b3d
 8009ac0:	08009b3d 	.word	0x08009b3d
 8009ac4:	08009b3d 	.word	0x08009b3d
 8009ac8:	08009b25 	.word	0x08009b25
 8009acc:	08009b3d 	.word	0x08009b3d
 8009ad0:	08009b3d 	.word	0x08009b3d
 8009ad4:	08009b3d 	.word	0x08009b3d
 8009ad8:	08009b3d 	.word	0x08009b3d
 8009adc:	08009b3d 	.word	0x08009b3d
 8009ae0:	08009b3d 	.word	0x08009b3d
 8009ae4:	08009b3d 	.word	0x08009b3d
 8009ae8:	08009b2d 	.word	0x08009b2d
 8009aec:	08009b3d 	.word	0x08009b3d
 8009af0:	08009b3d 	.word	0x08009b3d
 8009af4:	08009b3d 	.word	0x08009b3d
 8009af8:	08009b3d 	.word	0x08009b3d
 8009afc:	08009b3d 	.word	0x08009b3d
 8009b00:	08009b3d 	.word	0x08009b3d
 8009b04:	08009b3d 	.word	0x08009b3d
 8009b08:	08009b35 	.word	0x08009b35
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b12:	e0d1      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b14:	2304      	movs	r3, #4
 8009b16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b1a:	e0cd      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b22:	e0c9      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b24:	2310      	movs	r3, #16
 8009b26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b2a:	e0c5      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b2c:	2320      	movs	r3, #32
 8009b2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b32:	e0c1      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b34:	2340      	movs	r3, #64	; 0x40
 8009b36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b3a:	e0bd      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b3c:	2380      	movs	r3, #128	; 0x80
 8009b3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b42:	bf00      	nop
 8009b44:	e0b8      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a21      	ldr	r2, [pc, #132]	; (8009bd0 <UART_SetConfig+0x6b8>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d141      	bne.n	8009bd4 <UART_SetConfig+0x6bc>
 8009b50:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <UART_SetConfig+0x6a4>)
 8009b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	2b05      	cmp	r3, #5
 8009b5a:	d827      	bhi.n	8009bac <UART_SetConfig+0x694>
 8009b5c:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <UART_SetConfig+0x64c>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009b7d 	.word	0x08009b7d
 8009b68:	08009b85 	.word	0x08009b85
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b95 	.word	0x08009b95
 8009b74:	08009b9d 	.word	0x08009b9d
 8009b78:	08009ba5 	.word	0x08009ba5
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b82:	e099      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b84:	2304      	movs	r3, #4
 8009b86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b8a:	e095      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b8c:	2308      	movs	r3, #8
 8009b8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b92:	e091      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b94:	2310      	movs	r3, #16
 8009b96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b9a:	e08d      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ba2:	e089      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009ba4:	2340      	movs	r3, #64	; 0x40
 8009ba6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009baa:	e085      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009bac:	2380      	movs	r3, #128	; 0x80
 8009bae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bb2:	bf00      	nop
 8009bb4:	e080      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009bb6:	bf00      	nop
 8009bb8:	40004400 	.word	0x40004400
 8009bbc:	58024400 	.word	0x58024400
 8009bc0:	40004800 	.word	0x40004800
 8009bc4:	40004c00 	.word	0x40004c00
 8009bc8:	40005000 	.word	0x40005000
 8009bcc:	40011400 	.word	0x40011400
 8009bd0:	40007800 	.word	0x40007800
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a98      	ldr	r2, [pc, #608]	; (8009e3c <UART_SetConfig+0x924>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d131      	bne.n	8009c42 <UART_SetConfig+0x72a>
 8009bde:	4b98      	ldr	r3, [pc, #608]	; (8009e40 <UART_SetConfig+0x928>)
 8009be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	2b05      	cmp	r3, #5
 8009be8:	d826      	bhi.n	8009c38 <UART_SetConfig+0x720>
 8009bea:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <UART_SetConfig+0x6d8>)
 8009bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf0:	08009c09 	.word	0x08009c09
 8009bf4:	08009c11 	.word	0x08009c11
 8009bf8:	08009c19 	.word	0x08009c19
 8009bfc:	08009c21 	.word	0x08009c21
 8009c00:	08009c29 	.word	0x08009c29
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c0e:	e053      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c10:	2304      	movs	r3, #4
 8009c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c16:	e04f      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c18:	2308      	movs	r3, #8
 8009c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c1e:	e04b      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c20:	2310      	movs	r3, #16
 8009c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c26:	e047      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c28:	2320      	movs	r3, #32
 8009c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c2e:	e043      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c30:	2340      	movs	r3, #64	; 0x40
 8009c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c36:	e03f      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c38:	2380      	movs	r3, #128	; 0x80
 8009c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c3e:	bf00      	nop
 8009c40:	e03a      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a7f      	ldr	r2, [pc, #508]	; (8009e44 <UART_SetConfig+0x92c>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d132      	bne.n	8009cb2 <UART_SetConfig+0x79a>
 8009c4c:	4b7c      	ldr	r3, [pc, #496]	; (8009e40 <UART_SetConfig+0x928>)
 8009c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	2b05      	cmp	r3, #5
 8009c56:	d827      	bhi.n	8009ca8 <UART_SetConfig+0x790>
 8009c58:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <UART_SetConfig+0x748>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009c79 	.word	0x08009c79
 8009c64:	08009c81 	.word	0x08009c81
 8009c68:	08009c89 	.word	0x08009c89
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009c99 	.word	0x08009c99
 8009c74:	08009ca1 	.word	0x08009ca1
 8009c78:	2302      	movs	r3, #2
 8009c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c7e:	e01b      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c80:	2304      	movs	r3, #4
 8009c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c86:	e017      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c88:	2308      	movs	r3, #8
 8009c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c8e:	e013      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c90:	2310      	movs	r3, #16
 8009c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c96:	e00f      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009c98:	2320      	movs	r3, #32
 8009c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c9e:	e00b      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009ca0:	2340      	movs	r3, #64	; 0x40
 8009ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ca6:	e007      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009ca8:	2380      	movs	r3, #128	; 0x80
 8009caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cae:	bf00      	nop
 8009cb0:	e002      	b.n	8009cb8 <UART_SetConfig+0x7a0>
 8009cb2:	2380      	movs	r3, #128	; 0x80
 8009cb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a61      	ldr	r2, [pc, #388]	; (8009e44 <UART_SetConfig+0x92c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	f040 86f3 	bne.w	800aaaa <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cc4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	f000 80bd 	beq.w	8009e48 <UART_SetConfig+0x930>
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	dc04      	bgt.n	8009cdc <UART_SetConfig+0x7c4>
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d00c      	beq.n	8009cf0 <UART_SetConfig+0x7d8>
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	d05b      	beq.n	8009d92 <UART_SetConfig+0x87a>
 8009cda:	e276      	b.n	800a1ca <UART_SetConfig+0xcb2>
 8009cdc:	2b20      	cmp	r3, #32
 8009cde:	f000 81ad 	beq.w	800a03c <UART_SetConfig+0xb24>
 8009ce2:	2b40      	cmp	r3, #64	; 0x40
 8009ce4:	f000 821a 	beq.w	800a11c <UART_SetConfig+0xc04>
 8009ce8:	2b10      	cmp	r3, #16
 8009cea:	f000 8101 	beq.w	8009ef0 <UART_SetConfig+0x9d8>
 8009cee:	e26c      	b.n	800a1ca <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009cf0:	f7fd ffae 	bl	8007c50 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d044      	beq.n	8009d88 <UART_SetConfig+0x870>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d03e      	beq.n	8009d84 <UART_SetConfig+0x86c>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d038      	beq.n	8009d80 <UART_SetConfig+0x868>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d032      	beq.n	8009d7c <UART_SetConfig+0x864>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d02c      	beq.n	8009d78 <UART_SetConfig+0x860>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	2b05      	cmp	r3, #5
 8009d24:	d026      	beq.n	8009d74 <UART_SetConfig+0x85c>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2a:	2b06      	cmp	r3, #6
 8009d2c:	d020      	beq.n	8009d70 <UART_SetConfig+0x858>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d32:	2b07      	cmp	r3, #7
 8009d34:	d01a      	beq.n	8009d6c <UART_SetConfig+0x854>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3a:	2b08      	cmp	r3, #8
 8009d3c:	d014      	beq.n	8009d68 <UART_SetConfig+0x850>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d42:	2b09      	cmp	r3, #9
 8009d44:	d00e      	beq.n	8009d64 <UART_SetConfig+0x84c>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4a:	2b0a      	cmp	r3, #10
 8009d4c:	d008      	beq.n	8009d60 <UART_SetConfig+0x848>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	2b0b      	cmp	r3, #11
 8009d54:	d102      	bne.n	8009d5c <UART_SetConfig+0x844>
 8009d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d5a:	e016      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e014      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d60:	2380      	movs	r3, #128	; 0x80
 8009d62:	e012      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d64:	2340      	movs	r3, #64	; 0x40
 8009d66:	e010      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d68:	2320      	movs	r3, #32
 8009d6a:	e00e      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	e00c      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d70:	230c      	movs	r3, #12
 8009d72:	e00a      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d74:	230a      	movs	r3, #10
 8009d76:	e008      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	e006      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d7c:	2306      	movs	r3, #6
 8009d7e:	e004      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d80:	2304      	movs	r3, #4
 8009d82:	e002      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e000      	b.n	8009d8a <UART_SetConfig+0x872>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d90:	e21f      	b.n	800a1d2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d92:	f107 0318 	add.w	r3, r7, #24
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fd ff70 	bl	8007c7c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d044      	beq.n	8009e30 <UART_SetConfig+0x918>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d03e      	beq.n	8009e2c <UART_SetConfig+0x914>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d038      	beq.n	8009e28 <UART_SetConfig+0x910>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d032      	beq.n	8009e24 <UART_SetConfig+0x90c>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	d02c      	beq.n	8009e20 <UART_SetConfig+0x908>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	2b05      	cmp	r3, #5
 8009dcc:	d026      	beq.n	8009e1c <UART_SetConfig+0x904>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	2b06      	cmp	r3, #6
 8009dd4:	d020      	beq.n	8009e18 <UART_SetConfig+0x900>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dda:	2b07      	cmp	r3, #7
 8009ddc:	d01a      	beq.n	8009e14 <UART_SetConfig+0x8fc>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	2b08      	cmp	r3, #8
 8009de4:	d014      	beq.n	8009e10 <UART_SetConfig+0x8f8>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	2b09      	cmp	r3, #9
 8009dec:	d00e      	beq.n	8009e0c <UART_SetConfig+0x8f4>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	2b0a      	cmp	r3, #10
 8009df4:	d008      	beq.n	8009e08 <UART_SetConfig+0x8f0>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	2b0b      	cmp	r3, #11
 8009dfc:	d102      	bne.n	8009e04 <UART_SetConfig+0x8ec>
 8009dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e02:	e016      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e014      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e08:	2380      	movs	r3, #128	; 0x80
 8009e0a:	e012      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e0c:	2340      	movs	r3, #64	; 0x40
 8009e0e:	e010      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e10:	2320      	movs	r3, #32
 8009e12:	e00e      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e14:	2310      	movs	r3, #16
 8009e16:	e00c      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e18:	230c      	movs	r3, #12
 8009e1a:	e00a      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e1c:	230a      	movs	r3, #10
 8009e1e:	e008      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e20:	2308      	movs	r3, #8
 8009e22:	e006      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e24:	2306      	movs	r3, #6
 8009e26:	e004      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e28:	2304      	movs	r3, #4
 8009e2a:	e002      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e000      	b.n	8009e32 <UART_SetConfig+0x91a>
 8009e30:	2301      	movs	r3, #1
 8009e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e38:	e1cb      	b.n	800a1d2 <UART_SetConfig+0xcba>
 8009e3a:	bf00      	nop
 8009e3c:	40007c00 	.word	0x40007c00
 8009e40:	58024400 	.word	0x58024400
 8009e44:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e48:	f107 030c 	add.w	r3, r7, #12
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe f861 	bl	8007f14 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d044      	beq.n	8009ee6 <UART_SetConfig+0x9ce>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d03e      	beq.n	8009ee2 <UART_SetConfig+0x9ca>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d038      	beq.n	8009ede <UART_SetConfig+0x9c6>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d032      	beq.n	8009eda <UART_SetConfig+0x9c2>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d02c      	beq.n	8009ed6 <UART_SetConfig+0x9be>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2b05      	cmp	r3, #5
 8009e82:	d026      	beq.n	8009ed2 <UART_SetConfig+0x9ba>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	2b06      	cmp	r3, #6
 8009e8a:	d020      	beq.n	8009ece <UART_SetConfig+0x9b6>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	d01a      	beq.n	8009eca <UART_SetConfig+0x9b2>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d014      	beq.n	8009ec6 <UART_SetConfig+0x9ae>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	2b09      	cmp	r3, #9
 8009ea2:	d00e      	beq.n	8009ec2 <UART_SetConfig+0x9aa>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	2b0a      	cmp	r3, #10
 8009eaa:	d008      	beq.n	8009ebe <UART_SetConfig+0x9a6>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	2b0b      	cmp	r3, #11
 8009eb2:	d102      	bne.n	8009eba <UART_SetConfig+0x9a2>
 8009eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eb8:	e016      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e014      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ebe:	2380      	movs	r3, #128	; 0x80
 8009ec0:	e012      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ec2:	2340      	movs	r3, #64	; 0x40
 8009ec4:	e010      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ec6:	2320      	movs	r3, #32
 8009ec8:	e00e      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009eca:	2310      	movs	r3, #16
 8009ecc:	e00c      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ece:	230c      	movs	r3, #12
 8009ed0:	e00a      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ed2:	230a      	movs	r3, #10
 8009ed4:	e008      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	e006      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009eda:	2306      	movs	r3, #6
 8009edc:	e004      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ede:	2304      	movs	r3, #4
 8009ee0:	e002      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e000      	b.n	8009ee8 <UART_SetConfig+0x9d0>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eee:	e170      	b.n	800a1d2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef0:	4b79      	ldr	r3, [pc, #484]	; (800a0d8 <UART_SetConfig+0xbc0>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0320 	and.w	r3, r3, #32
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d054      	beq.n	8009fa6 <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009efc:	4b76      	ldr	r3, [pc, #472]	; (800a0d8 <UART_SetConfig+0xbc0>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	08db      	lsrs	r3, r3, #3
 8009f02:	f003 0303 	and.w	r3, r3, #3
 8009f06:	4a75      	ldr	r2, [pc, #468]	; (800a0dc <UART_SetConfig+0xbc4>)
 8009f08:	40da      	lsrs	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d044      	beq.n	8009f9c <UART_SetConfig+0xa84>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d03e      	beq.n	8009f98 <UART_SetConfig+0xa80>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d038      	beq.n	8009f94 <UART_SetConfig+0xa7c>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d032      	beq.n	8009f90 <UART_SetConfig+0xa78>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d02c      	beq.n	8009f8c <UART_SetConfig+0xa74>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	2b05      	cmp	r3, #5
 8009f38:	d026      	beq.n	8009f88 <UART_SetConfig+0xa70>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	2b06      	cmp	r3, #6
 8009f40:	d020      	beq.n	8009f84 <UART_SetConfig+0xa6c>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	2b07      	cmp	r3, #7
 8009f48:	d01a      	beq.n	8009f80 <UART_SetConfig+0xa68>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2b08      	cmp	r3, #8
 8009f50:	d014      	beq.n	8009f7c <UART_SetConfig+0xa64>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b09      	cmp	r3, #9
 8009f58:	d00e      	beq.n	8009f78 <UART_SetConfig+0xa60>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b0a      	cmp	r3, #10
 8009f60:	d008      	beq.n	8009f74 <UART_SetConfig+0xa5c>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	2b0b      	cmp	r3, #11
 8009f68:	d102      	bne.n	8009f70 <UART_SetConfig+0xa58>
 8009f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f6e:	e016      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e014      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	e012      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f78:	2340      	movs	r3, #64	; 0x40
 8009f7a:	e010      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f7c:	2320      	movs	r3, #32
 8009f7e:	e00e      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f80:	2310      	movs	r3, #16
 8009f82:	e00c      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f84:	230c      	movs	r3, #12
 8009f86:	e00a      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f88:	230a      	movs	r3, #10
 8009f8a:	e008      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	e006      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f90:	2306      	movs	r3, #6
 8009f92:	e004      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f94:	2304      	movs	r3, #4
 8009f96:	e002      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e000      	b.n	8009f9e <UART_SetConfig+0xa86>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009fa4:	e115      	b.n	800a1d2 <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d043      	beq.n	800a036 <UART_SetConfig+0xb1e>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d03d      	beq.n	800a032 <UART_SetConfig+0xb1a>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d037      	beq.n	800a02e <UART_SetConfig+0xb16>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d031      	beq.n	800a02a <UART_SetConfig+0xb12>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d02b      	beq.n	800a026 <UART_SetConfig+0xb0e>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	2b05      	cmp	r3, #5
 8009fd4:	d025      	beq.n	800a022 <UART_SetConfig+0xb0a>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	2b06      	cmp	r3, #6
 8009fdc:	d01f      	beq.n	800a01e <UART_SetConfig+0xb06>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	2b07      	cmp	r3, #7
 8009fe4:	d019      	beq.n	800a01a <UART_SetConfig+0xb02>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fea:	2b08      	cmp	r3, #8
 8009fec:	d013      	beq.n	800a016 <UART_SetConfig+0xafe>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	2b09      	cmp	r3, #9
 8009ff4:	d00d      	beq.n	800a012 <UART_SetConfig+0xafa>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffa:	2b0a      	cmp	r3, #10
 8009ffc:	d007      	beq.n	800a00e <UART_SetConfig+0xaf6>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	2b0b      	cmp	r3, #11
 800a004:	d101      	bne.n	800a00a <UART_SetConfig+0xaf2>
 800a006:	4b36      	ldr	r3, [pc, #216]	; (800a0e0 <UART_SetConfig+0xbc8>)
 800a008:	e016      	b.n	800a038 <UART_SetConfig+0xb20>
 800a00a:	4b34      	ldr	r3, [pc, #208]	; (800a0dc <UART_SetConfig+0xbc4>)
 800a00c:	e014      	b.n	800a038 <UART_SetConfig+0xb20>
 800a00e:	4b35      	ldr	r3, [pc, #212]	; (800a0e4 <UART_SetConfig+0xbcc>)
 800a010:	e012      	b.n	800a038 <UART_SetConfig+0xb20>
 800a012:	4b35      	ldr	r3, [pc, #212]	; (800a0e8 <UART_SetConfig+0xbd0>)
 800a014:	e010      	b.n	800a038 <UART_SetConfig+0xb20>
 800a016:	4b35      	ldr	r3, [pc, #212]	; (800a0ec <UART_SetConfig+0xbd4>)
 800a018:	e00e      	b.n	800a038 <UART_SetConfig+0xb20>
 800a01a:	4b35      	ldr	r3, [pc, #212]	; (800a0f0 <UART_SetConfig+0xbd8>)
 800a01c:	e00c      	b.n	800a038 <UART_SetConfig+0xb20>
 800a01e:	4b35      	ldr	r3, [pc, #212]	; (800a0f4 <UART_SetConfig+0xbdc>)
 800a020:	e00a      	b.n	800a038 <UART_SetConfig+0xb20>
 800a022:	4b35      	ldr	r3, [pc, #212]	; (800a0f8 <UART_SetConfig+0xbe0>)
 800a024:	e008      	b.n	800a038 <UART_SetConfig+0xb20>
 800a026:	4b35      	ldr	r3, [pc, #212]	; (800a0fc <UART_SetConfig+0xbe4>)
 800a028:	e006      	b.n	800a038 <UART_SetConfig+0xb20>
 800a02a:	4b35      	ldr	r3, [pc, #212]	; (800a100 <UART_SetConfig+0xbe8>)
 800a02c:	e004      	b.n	800a038 <UART_SetConfig+0xb20>
 800a02e:	4b35      	ldr	r3, [pc, #212]	; (800a104 <UART_SetConfig+0xbec>)
 800a030:	e002      	b.n	800a038 <UART_SetConfig+0xb20>
 800a032:	4b35      	ldr	r3, [pc, #212]	; (800a108 <UART_SetConfig+0xbf0>)
 800a034:	e000      	b.n	800a038 <UART_SetConfig+0xb20>
 800a036:	4b29      	ldr	r3, [pc, #164]	; (800a0dc <UART_SetConfig+0xbc4>)
 800a038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a03a:	e0ca      	b.n	800a1d2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b00      	cmp	r3, #0
 800a042:	d046      	beq.n	800a0d2 <UART_SetConfig+0xbba>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d040      	beq.n	800a0ce <UART_SetConfig+0xbb6>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	2b02      	cmp	r3, #2
 800a052:	d03a      	beq.n	800a0ca <UART_SetConfig+0xbb2>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d034      	beq.n	800a0c6 <UART_SetConfig+0xbae>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b04      	cmp	r3, #4
 800a062:	d02e      	beq.n	800a0c2 <UART_SetConfig+0xbaa>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	2b05      	cmp	r3, #5
 800a06a:	d028      	beq.n	800a0be <UART_SetConfig+0xba6>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b06      	cmp	r3, #6
 800a072:	d022      	beq.n	800a0ba <UART_SetConfig+0xba2>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2b07      	cmp	r3, #7
 800a07a:	d01c      	beq.n	800a0b6 <UART_SetConfig+0xb9e>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	2b08      	cmp	r3, #8
 800a082:	d016      	beq.n	800a0b2 <UART_SetConfig+0xb9a>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	2b09      	cmp	r3, #9
 800a08a:	d00f      	beq.n	800a0ac <UART_SetConfig+0xb94>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	2b0a      	cmp	r3, #10
 800a092:	d008      	beq.n	800a0a6 <UART_SetConfig+0xb8e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2b0b      	cmp	r3, #11
 800a09a:	d102      	bne.n	800a0a2 <UART_SetConfig+0xb8a>
 800a09c:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a0a0:	e018      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0a2:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <UART_SetConfig+0xbd8>)
 800a0a4:	e016      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0a6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a0aa:	e013      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a0b0:	e010      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0b2:	4b16      	ldr	r3, [pc, #88]	; (800a10c <UART_SetConfig+0xbf4>)
 800a0b4:	e00e      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0b6:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <UART_SetConfig+0xbc8>)
 800a0b8:	e00c      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0ba:	4b15      	ldr	r3, [pc, #84]	; (800a110 <UART_SetConfig+0xbf8>)
 800a0bc:	e00a      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0be:	4b15      	ldr	r3, [pc, #84]	; (800a114 <UART_SetConfig+0xbfc>)
 800a0c0:	e008      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0c2:	4b08      	ldr	r3, [pc, #32]	; (800a0e4 <UART_SetConfig+0xbcc>)
 800a0c4:	e006      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <UART_SetConfig+0xc00>)
 800a0c8:	e004      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0ca:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <UART_SetConfig+0xbd0>)
 800a0cc:	e002      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0ce:	4b07      	ldr	r3, [pc, #28]	; (800a0ec <UART_SetConfig+0xbd4>)
 800a0d0:	e000      	b.n	800a0d4 <UART_SetConfig+0xbbc>
 800a0d2:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <UART_SetConfig+0xbd8>)
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d6:	e07c      	b.n	800a1d2 <UART_SetConfig+0xcba>
 800a0d8:	58024400 	.word	0x58024400
 800a0dc:	03d09000 	.word	0x03d09000
 800a0e0:	0003d090 	.word	0x0003d090
 800a0e4:	0007a120 	.word	0x0007a120
 800a0e8:	000f4240 	.word	0x000f4240
 800a0ec:	001e8480 	.word	0x001e8480
 800a0f0:	003d0900 	.word	0x003d0900
 800a0f4:	00516155 	.word	0x00516155
 800a0f8:	0061a800 	.word	0x0061a800
 800a0fc:	007a1200 	.word	0x007a1200
 800a100:	00a2c2aa 	.word	0x00a2c2aa
 800a104:	00f42400 	.word	0x00f42400
 800a108:	01e84800 	.word	0x01e84800
 800a10c:	0001e848 	.word	0x0001e848
 800a110:	00051615 	.word	0x00051615
 800a114:	00061a80 	.word	0x00061a80
 800a118:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	d04e      	beq.n	800a1c2 <UART_SetConfig+0xcaa>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d047      	beq.n	800a1bc <UART_SetConfig+0xca4>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	2b02      	cmp	r3, #2
 800a132:	d040      	beq.n	800a1b6 <UART_SetConfig+0xc9e>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d039      	beq.n	800a1b0 <UART_SetConfig+0xc98>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b04      	cmp	r3, #4
 800a142:	d032      	beq.n	800a1aa <UART_SetConfig+0xc92>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	2b05      	cmp	r3, #5
 800a14a:	d02b      	beq.n	800a1a4 <UART_SetConfig+0xc8c>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	2b06      	cmp	r3, #6
 800a152:	d024      	beq.n	800a19e <UART_SetConfig+0xc86>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	2b07      	cmp	r3, #7
 800a15a:	d01d      	beq.n	800a198 <UART_SetConfig+0xc80>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2b08      	cmp	r3, #8
 800a162:	d016      	beq.n	800a192 <UART_SetConfig+0xc7a>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	2b09      	cmp	r3, #9
 800a16a:	d00f      	beq.n	800a18c <UART_SetConfig+0xc74>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	2b0a      	cmp	r3, #10
 800a172:	d008      	beq.n	800a186 <UART_SetConfig+0xc6e>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a178:	2b0b      	cmp	r3, #11
 800a17a:	d101      	bne.n	800a180 <UART_SetConfig+0xc68>
 800a17c:	2380      	movs	r3, #128	; 0x80
 800a17e:	e022      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a184:	e01f      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a18a:	e01c      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a18c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a190:	e019      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a196:	e016      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a19c:	e013      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a19e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a1a2:	e010      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a1a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a1a8:	e00d      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a1aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1ae:	e00a      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a1b0:	f241 5355 	movw	r3, #5461	; 0x1555
 800a1b4:	e007      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a1b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1ba:	e004      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a1bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1c0:	e001      	b.n	800a1c6 <UART_SetConfig+0xcae>
 800a1c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1c8:	e003      	b.n	800a1d2 <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a1d0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f001 83e8 	beq.w	800b9aa <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d305      	bcc.n	800a1f6 <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d904      	bls.n	800a200 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1fc:	f001 bbd5 	b.w	800b9aa <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 800a200:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a204:	2b08      	cmp	r3, #8
 800a206:	f000 8154 	beq.w	800a4b2 <UART_SetConfig+0xf9a>
 800a20a:	2b08      	cmp	r3, #8
 800a20c:	dc06      	bgt.n	800a21c <UART_SetConfig+0xd04>
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d00f      	beq.n	800a232 <UART_SetConfig+0xd1a>
 800a212:	2b04      	cmp	r3, #4
 800a214:	f000 80ac 	beq.w	800a370 <UART_SetConfig+0xe58>
 800a218:	f000 bc30 	b.w	800aa7c <UART_SetConfig+0x1564>
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	f000 832d 	beq.w	800a87c <UART_SetConfig+0x1364>
 800a222:	2b40      	cmp	r3, #64	; 0x40
 800a224:	f000 83a5 	beq.w	800a972 <UART_SetConfig+0x145a>
 800a228:	2b10      	cmp	r3, #16
 800a22a:	f000 81e3 	beq.w	800a5f4 <UART_SetConfig+0x10dc>
 800a22e:	f000 bc25 	b.w	800aa7c <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a232:	f7fd fd0d 	bl	8007c50 <HAL_RCCEx_GetD3PCLK1Freq>
 800a236:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	4618      	mov	r0, r3
 800a23c:	f04f 0100 	mov.w	r1, #0
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d067      	beq.n	800a318 <UART_SetConfig+0xe00>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d05e      	beq.n	800a30e <UART_SetConfig+0xdf6>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	2b02      	cmp	r3, #2
 800a256:	d055      	beq.n	800a304 <UART_SetConfig+0xdec>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d04c      	beq.n	800a2fa <UART_SetConfig+0xde2>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	2b04      	cmp	r3, #4
 800a266:	d043      	beq.n	800a2f0 <UART_SetConfig+0xdd8>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	2b05      	cmp	r3, #5
 800a26e:	d03a      	beq.n	800a2e6 <UART_SetConfig+0xdce>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2b06      	cmp	r3, #6
 800a276:	d031      	beq.n	800a2dc <UART_SetConfig+0xdc4>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	2b07      	cmp	r3, #7
 800a27e:	d028      	beq.n	800a2d2 <UART_SetConfig+0xdba>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	2b08      	cmp	r3, #8
 800a286:	d01f      	beq.n	800a2c8 <UART_SetConfig+0xdb0>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	d016      	beq.n	800a2be <UART_SetConfig+0xda6>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b0a      	cmp	r3, #10
 800a296:	d00d      	beq.n	800a2b4 <UART_SetConfig+0xd9c>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b0b      	cmp	r3, #11
 800a29e:	d104      	bne.n	800a2aa <UART_SetConfig+0xd92>
 800a2a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2a4:	f04f 0400 	mov.w	r4, #0
 800a2a8:	e03a      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2aa:	f04f 0301 	mov.w	r3, #1
 800a2ae:	f04f 0400 	mov.w	r4, #0
 800a2b2:	e035      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a2b8:	f04f 0400 	mov.w	r4, #0
 800a2bc:	e030      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2be:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a2c2:	f04f 0400 	mov.w	r4, #0
 800a2c6:	e02b      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2c8:	f04f 0320 	mov.w	r3, #32
 800a2cc:	f04f 0400 	mov.w	r4, #0
 800a2d0:	e026      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2d2:	f04f 0310 	mov.w	r3, #16
 800a2d6:	f04f 0400 	mov.w	r4, #0
 800a2da:	e021      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2dc:	f04f 030c 	mov.w	r3, #12
 800a2e0:	f04f 0400 	mov.w	r4, #0
 800a2e4:	e01c      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2e6:	f04f 030a 	mov.w	r3, #10
 800a2ea:	f04f 0400 	mov.w	r4, #0
 800a2ee:	e017      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2f0:	f04f 0308 	mov.w	r3, #8
 800a2f4:	f04f 0400 	mov.w	r4, #0
 800a2f8:	e012      	b.n	800a320 <UART_SetConfig+0xe08>
 800a2fa:	f04f 0306 	mov.w	r3, #6
 800a2fe:	f04f 0400 	mov.w	r4, #0
 800a302:	e00d      	b.n	800a320 <UART_SetConfig+0xe08>
 800a304:	f04f 0304 	mov.w	r3, #4
 800a308:	f04f 0400 	mov.w	r4, #0
 800a30c:	e008      	b.n	800a320 <UART_SetConfig+0xe08>
 800a30e:	f04f 0302 	mov.w	r3, #2
 800a312:	f04f 0400 	mov.w	r4, #0
 800a316:	e003      	b.n	800a320 <UART_SetConfig+0xe08>
 800a318:	f04f 0301 	mov.w	r3, #1
 800a31c:	f04f 0400 	mov.w	r4, #0
 800a320:	461a      	mov	r2, r3
 800a322:	4623      	mov	r3, r4
 800a324:	f7f6 f83c 	bl	80003a0 <__aeabi_uldivmod>
 800a328:	4603      	mov	r3, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	4619      	mov	r1, r3
 800a32e:	4622      	mov	r2, r4
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	f04f 0400 	mov.w	r4, #0
 800a338:	0214      	lsls	r4, r2, #8
 800a33a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a33e:	020b      	lsls	r3, r1, #8
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6852      	ldr	r2, [r2, #4]
 800a344:	0852      	lsrs	r2, r2, #1
 800a346:	4611      	mov	r1, r2
 800a348:	f04f 0200 	mov.w	r2, #0
 800a34c:	eb13 0b01 	adds.w	fp, r3, r1
 800a350:	eb44 0c02 	adc.w	ip, r4, r2
 800a354:	4658      	mov	r0, fp
 800a356:	4661      	mov	r1, ip
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f04f 0400 	mov.w	r4, #0
 800a360:	461a      	mov	r2, r3
 800a362:	4623      	mov	r3, r4
 800a364:	f7f6 f81c 	bl	80003a0 <__aeabi_uldivmod>
 800a368:	4603      	mov	r3, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a36e:	e389      	b.n	800aa84 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a370:	f107 0318 	add.w	r3, r7, #24
 800a374:	4618      	mov	r0, r3
 800a376:	f7fd fc81 	bl	8007c7c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f04f 0100 	mov.w	r1, #0
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d067      	beq.n	800a45a <UART_SetConfig+0xf42>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d05e      	beq.n	800a450 <UART_SetConfig+0xf38>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	2b02      	cmp	r3, #2
 800a398:	d055      	beq.n	800a446 <UART_SetConfig+0xf2e>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d04c      	beq.n	800a43c <UART_SetConfig+0xf24>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d043      	beq.n	800a432 <UART_SetConfig+0xf1a>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	2b05      	cmp	r3, #5
 800a3b0:	d03a      	beq.n	800a428 <UART_SetConfig+0xf10>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	2b06      	cmp	r3, #6
 800a3b8:	d031      	beq.n	800a41e <UART_SetConfig+0xf06>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	2b07      	cmp	r3, #7
 800a3c0:	d028      	beq.n	800a414 <UART_SetConfig+0xefc>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	2b08      	cmp	r3, #8
 800a3c8:	d01f      	beq.n	800a40a <UART_SetConfig+0xef2>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d016      	beq.n	800a400 <UART_SetConfig+0xee8>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	2b0a      	cmp	r3, #10
 800a3d8:	d00d      	beq.n	800a3f6 <UART_SetConfig+0xede>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	2b0b      	cmp	r3, #11
 800a3e0:	d104      	bne.n	800a3ec <UART_SetConfig+0xed4>
 800a3e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3e6:	f04f 0400 	mov.w	r4, #0
 800a3ea:	e03a      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a3ec:	f04f 0301 	mov.w	r3, #1
 800a3f0:	f04f 0400 	mov.w	r4, #0
 800a3f4:	e035      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a3f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a3fa:	f04f 0400 	mov.w	r4, #0
 800a3fe:	e030      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a400:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a404:	f04f 0400 	mov.w	r4, #0
 800a408:	e02b      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a40a:	f04f 0320 	mov.w	r3, #32
 800a40e:	f04f 0400 	mov.w	r4, #0
 800a412:	e026      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a414:	f04f 0310 	mov.w	r3, #16
 800a418:	f04f 0400 	mov.w	r4, #0
 800a41c:	e021      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a41e:	f04f 030c 	mov.w	r3, #12
 800a422:	f04f 0400 	mov.w	r4, #0
 800a426:	e01c      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a428:	f04f 030a 	mov.w	r3, #10
 800a42c:	f04f 0400 	mov.w	r4, #0
 800a430:	e017      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a432:	f04f 0308 	mov.w	r3, #8
 800a436:	f04f 0400 	mov.w	r4, #0
 800a43a:	e012      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a43c:	f04f 0306 	mov.w	r3, #6
 800a440:	f04f 0400 	mov.w	r4, #0
 800a444:	e00d      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a446:	f04f 0304 	mov.w	r3, #4
 800a44a:	f04f 0400 	mov.w	r4, #0
 800a44e:	e008      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a450:	f04f 0302 	mov.w	r3, #2
 800a454:	f04f 0400 	mov.w	r4, #0
 800a458:	e003      	b.n	800a462 <UART_SetConfig+0xf4a>
 800a45a:	f04f 0301 	mov.w	r3, #1
 800a45e:	f04f 0400 	mov.w	r4, #0
 800a462:	461a      	mov	r2, r3
 800a464:	4623      	mov	r3, r4
 800a466:	f7f5 ff9b 	bl	80003a0 <__aeabi_uldivmod>
 800a46a:	4603      	mov	r3, r0
 800a46c:	460c      	mov	r4, r1
 800a46e:	4619      	mov	r1, r3
 800a470:	4622      	mov	r2, r4
 800a472:	f04f 0300 	mov.w	r3, #0
 800a476:	f04f 0400 	mov.w	r4, #0
 800a47a:	0214      	lsls	r4, r2, #8
 800a47c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a480:	020b      	lsls	r3, r1, #8
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	6852      	ldr	r2, [r2, #4]
 800a486:	0852      	lsrs	r2, r2, #1
 800a488:	4611      	mov	r1, r2
 800a48a:	f04f 0200 	mov.w	r2, #0
 800a48e:	eb13 0b01 	adds.w	fp, r3, r1
 800a492:	eb44 0c02 	adc.w	ip, r4, r2
 800a496:	4658      	mov	r0, fp
 800a498:	4661      	mov	r1, ip
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f04f 0400 	mov.w	r4, #0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	4623      	mov	r3, r4
 800a4a6:	f7f5 ff7b 	bl	80003a0 <__aeabi_uldivmod>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4b0:	e2e8      	b.n	800aa84 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b2:	f107 030c 	add.w	r3, r7, #12
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fd fd2c 	bl	8007f14 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f04f 0100 	mov.w	r1, #0
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d067      	beq.n	800a59c <UART_SetConfig+0x1084>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d05e      	beq.n	800a592 <UART_SetConfig+0x107a>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d055      	beq.n	800a588 <UART_SetConfig+0x1070>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d04c      	beq.n	800a57e <UART_SetConfig+0x1066>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d043      	beq.n	800a574 <UART_SetConfig+0x105c>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	2b05      	cmp	r3, #5
 800a4f2:	d03a      	beq.n	800a56a <UART_SetConfig+0x1052>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	2b06      	cmp	r3, #6
 800a4fa:	d031      	beq.n	800a560 <UART_SetConfig+0x1048>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	2b07      	cmp	r3, #7
 800a502:	d028      	beq.n	800a556 <UART_SetConfig+0x103e>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	2b08      	cmp	r3, #8
 800a50a:	d01f      	beq.n	800a54c <UART_SetConfig+0x1034>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a510:	2b09      	cmp	r3, #9
 800a512:	d016      	beq.n	800a542 <UART_SetConfig+0x102a>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	2b0a      	cmp	r3, #10
 800a51a:	d00d      	beq.n	800a538 <UART_SetConfig+0x1020>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	2b0b      	cmp	r3, #11
 800a522:	d104      	bne.n	800a52e <UART_SetConfig+0x1016>
 800a524:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a528:	f04f 0400 	mov.w	r4, #0
 800a52c:	e03a      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a52e:	f04f 0301 	mov.w	r3, #1
 800a532:	f04f 0400 	mov.w	r4, #0
 800a536:	e035      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a538:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a53c:	f04f 0400 	mov.w	r4, #0
 800a540:	e030      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a542:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a546:	f04f 0400 	mov.w	r4, #0
 800a54a:	e02b      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a54c:	f04f 0320 	mov.w	r3, #32
 800a550:	f04f 0400 	mov.w	r4, #0
 800a554:	e026      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a556:	f04f 0310 	mov.w	r3, #16
 800a55a:	f04f 0400 	mov.w	r4, #0
 800a55e:	e021      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a560:	f04f 030c 	mov.w	r3, #12
 800a564:	f04f 0400 	mov.w	r4, #0
 800a568:	e01c      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a56a:	f04f 030a 	mov.w	r3, #10
 800a56e:	f04f 0400 	mov.w	r4, #0
 800a572:	e017      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a574:	f04f 0308 	mov.w	r3, #8
 800a578:	f04f 0400 	mov.w	r4, #0
 800a57c:	e012      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a57e:	f04f 0306 	mov.w	r3, #6
 800a582:	f04f 0400 	mov.w	r4, #0
 800a586:	e00d      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a588:	f04f 0304 	mov.w	r3, #4
 800a58c:	f04f 0400 	mov.w	r4, #0
 800a590:	e008      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a592:	f04f 0302 	mov.w	r3, #2
 800a596:	f04f 0400 	mov.w	r4, #0
 800a59a:	e003      	b.n	800a5a4 <UART_SetConfig+0x108c>
 800a59c:	f04f 0301 	mov.w	r3, #1
 800a5a0:	f04f 0400 	mov.w	r4, #0
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	4623      	mov	r3, r4
 800a5a8:	f7f5 fefa 	bl	80003a0 <__aeabi_uldivmod>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	f04f 0300 	mov.w	r3, #0
 800a5b8:	f04f 0400 	mov.w	r4, #0
 800a5bc:	0214      	lsls	r4, r2, #8
 800a5be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a5c2:	020b      	lsls	r3, r1, #8
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6852      	ldr	r2, [r2, #4]
 800a5c8:	0852      	lsrs	r2, r2, #1
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	f04f 0200 	mov.w	r2, #0
 800a5d0:	eb13 0b01 	adds.w	fp, r3, r1
 800a5d4:	eb44 0c02 	adc.w	ip, r4, r2
 800a5d8:	4658      	mov	r0, fp
 800a5da:	4661      	mov	r1, ip
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f04f 0400 	mov.w	r4, #0
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	4623      	mov	r3, r4
 800a5e8:	f7f5 feda 	bl	80003a0 <__aeabi_uldivmod>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a5f2:	e247      	b.n	800aa84 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5f4:	4b96      	ldr	r3, [pc, #600]	; (800a850 <UART_SetConfig+0x1338>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80a3 	beq.w	800a748 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a602:	4b93      	ldr	r3, [pc, #588]	; (800a850 <UART_SetConfig+0x1338>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	08db      	lsrs	r3, r3, #3
 800a608:	f003 0303 	and.w	r3, r3, #3
 800a60c:	4a91      	ldr	r2, [pc, #580]	; (800a854 <UART_SetConfig+0x133c>)
 800a60e:	fa22 f303 	lsr.w	r3, r2, r3
 800a612:	4618      	mov	r0, r3
 800a614:	f04f 0100 	mov.w	r1, #0
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d067      	beq.n	800a6f0 <UART_SetConfig+0x11d8>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	2b01      	cmp	r3, #1
 800a626:	d05e      	beq.n	800a6e6 <UART_SetConfig+0x11ce>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d055      	beq.n	800a6dc <UART_SetConfig+0x11c4>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	2b03      	cmp	r3, #3
 800a636:	d04c      	beq.n	800a6d2 <UART_SetConfig+0x11ba>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d043      	beq.n	800a6c8 <UART_SetConfig+0x11b0>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a644:	2b05      	cmp	r3, #5
 800a646:	d03a      	beq.n	800a6be <UART_SetConfig+0x11a6>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	2b06      	cmp	r3, #6
 800a64e:	d031      	beq.n	800a6b4 <UART_SetConfig+0x119c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a654:	2b07      	cmp	r3, #7
 800a656:	d028      	beq.n	800a6aa <UART_SetConfig+0x1192>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d01f      	beq.n	800a6a0 <UART_SetConfig+0x1188>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	2b09      	cmp	r3, #9
 800a666:	d016      	beq.n	800a696 <UART_SetConfig+0x117e>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	2b0a      	cmp	r3, #10
 800a66e:	d00d      	beq.n	800a68c <UART_SetConfig+0x1174>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	2b0b      	cmp	r3, #11
 800a676:	d104      	bne.n	800a682 <UART_SetConfig+0x116a>
 800a678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a67c:	f04f 0400 	mov.w	r4, #0
 800a680:	e03a      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a682:	f04f 0301 	mov.w	r3, #1
 800a686:	f04f 0400 	mov.w	r4, #0
 800a68a:	e035      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a68c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a690:	f04f 0400 	mov.w	r4, #0
 800a694:	e030      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a696:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a69a:	f04f 0400 	mov.w	r4, #0
 800a69e:	e02b      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6a0:	f04f 0320 	mov.w	r3, #32
 800a6a4:	f04f 0400 	mov.w	r4, #0
 800a6a8:	e026      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6aa:	f04f 0310 	mov.w	r3, #16
 800a6ae:	f04f 0400 	mov.w	r4, #0
 800a6b2:	e021      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6b4:	f04f 030c 	mov.w	r3, #12
 800a6b8:	f04f 0400 	mov.w	r4, #0
 800a6bc:	e01c      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6be:	f04f 030a 	mov.w	r3, #10
 800a6c2:	f04f 0400 	mov.w	r4, #0
 800a6c6:	e017      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6c8:	f04f 0308 	mov.w	r3, #8
 800a6cc:	f04f 0400 	mov.w	r4, #0
 800a6d0:	e012      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6d2:	f04f 0306 	mov.w	r3, #6
 800a6d6:	f04f 0400 	mov.w	r4, #0
 800a6da:	e00d      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6dc:	f04f 0304 	mov.w	r3, #4
 800a6e0:	f04f 0400 	mov.w	r4, #0
 800a6e4:	e008      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6e6:	f04f 0302 	mov.w	r3, #2
 800a6ea:	f04f 0400 	mov.w	r4, #0
 800a6ee:	e003      	b.n	800a6f8 <UART_SetConfig+0x11e0>
 800a6f0:	f04f 0301 	mov.w	r3, #1
 800a6f4:	f04f 0400 	mov.w	r4, #0
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4623      	mov	r3, r4
 800a6fc:	f7f5 fe50 	bl	80003a0 <__aeabi_uldivmod>
 800a700:	4603      	mov	r3, r0
 800a702:	460c      	mov	r4, r1
 800a704:	4619      	mov	r1, r3
 800a706:	4622      	mov	r2, r4
 800a708:	f04f 0300 	mov.w	r3, #0
 800a70c:	f04f 0400 	mov.w	r4, #0
 800a710:	0214      	lsls	r4, r2, #8
 800a712:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a716:	020b      	lsls	r3, r1, #8
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	6852      	ldr	r2, [r2, #4]
 800a71c:	0852      	lsrs	r2, r2, #1
 800a71e:	4611      	mov	r1, r2
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	eb13 0b01 	adds.w	fp, r3, r1
 800a728:	eb44 0c02 	adc.w	ip, r4, r2
 800a72c:	4658      	mov	r0, fp
 800a72e:	4661      	mov	r1, ip
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	f04f 0400 	mov.w	r4, #0
 800a738:	461a      	mov	r2, r3
 800a73a:	4623      	mov	r3, r4
 800a73c:	f7f5 fe30 	bl	80003a0 <__aeabi_uldivmod>
 800a740:	4603      	mov	r3, r0
 800a742:	460c      	mov	r4, r1
 800a744:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a746:	e19d      	b.n	800aa84 <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d05b      	beq.n	800a808 <UART_SetConfig+0x12f0>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b01      	cmp	r3, #1
 800a756:	d053      	beq.n	800a800 <UART_SetConfig+0x12e8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d04b      	beq.n	800a7f8 <UART_SetConfig+0x12e0>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b03      	cmp	r3, #3
 800a766:	d043      	beq.n	800a7f0 <UART_SetConfig+0x12d8>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d03b      	beq.n	800a7e8 <UART_SetConfig+0x12d0>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b05      	cmp	r3, #5
 800a776:	d033      	beq.n	800a7e0 <UART_SetConfig+0x12c8>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b06      	cmp	r3, #6
 800a77e:	d02b      	beq.n	800a7d8 <UART_SetConfig+0x12c0>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b07      	cmp	r3, #7
 800a786:	d023      	beq.n	800a7d0 <UART_SetConfig+0x12b8>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b08      	cmp	r3, #8
 800a78e:	d01b      	beq.n	800a7c8 <UART_SetConfig+0x12b0>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b09      	cmp	r3, #9
 800a796:	d013      	beq.n	800a7c0 <UART_SetConfig+0x12a8>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b0a      	cmp	r3, #10
 800a79e:	d00b      	beq.n	800a7b8 <UART_SetConfig+0x12a0>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b0b      	cmp	r3, #11
 800a7a6:	d103      	bne.n	800a7b0 <UART_SetConfig+0x1298>
 800a7a8:	4b2a      	ldr	r3, [pc, #168]	; (800a854 <UART_SetConfig+0x133c>)
 800a7aa:	f04f 0400 	mov.w	r4, #0
 800a7ae:	e02e      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7b0:	4b29      	ldr	r3, [pc, #164]	; (800a858 <UART_SetConfig+0x1340>)
 800a7b2:	f04f 0403 	mov.w	r4, #3
 800a7b6:	e02a      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7b8:	4b28      	ldr	r3, [pc, #160]	; (800a85c <UART_SetConfig+0x1344>)
 800a7ba:	f04f 0400 	mov.w	r4, #0
 800a7be:	e026      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7c0:	4b27      	ldr	r3, [pc, #156]	; (800a860 <UART_SetConfig+0x1348>)
 800a7c2:	f04f 0400 	mov.w	r4, #0
 800a7c6:	e022      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7c8:	4b26      	ldr	r3, [pc, #152]	; (800a864 <UART_SetConfig+0x134c>)
 800a7ca:	f04f 0400 	mov.w	r4, #0
 800a7ce:	e01e      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7d0:	4b25      	ldr	r3, [pc, #148]	; (800a868 <UART_SetConfig+0x1350>)
 800a7d2:	f04f 0400 	mov.w	r4, #0
 800a7d6:	e01a      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7d8:	a419      	add	r4, pc, #100	; (adr r4, 800a840 <UART_SetConfig+0x1328>)
 800a7da:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a7de:	e016      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7e0:	4b22      	ldr	r3, [pc, #136]	; (800a86c <UART_SetConfig+0x1354>)
 800a7e2:	f04f 0400 	mov.w	r4, #0
 800a7e6:	e012      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7e8:	4b21      	ldr	r3, [pc, #132]	; (800a870 <UART_SetConfig+0x1358>)
 800a7ea:	f04f 0400 	mov.w	r4, #0
 800a7ee:	e00e      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7f0:	a415      	add	r4, pc, #84	; (adr r4, 800a848 <UART_SetConfig+0x1330>)
 800a7f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a7f6:	e00a      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a7f8:	4b1e      	ldr	r3, [pc, #120]	; (800a874 <UART_SetConfig+0x135c>)
 800a7fa:	f04f 0400 	mov.w	r4, #0
 800a7fe:	e006      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a800:	4b1d      	ldr	r3, [pc, #116]	; (800a878 <UART_SetConfig+0x1360>)
 800a802:	f04f 0401 	mov.w	r4, #1
 800a806:	e002      	b.n	800a80e <UART_SetConfig+0x12f6>
 800a808:	4b13      	ldr	r3, [pc, #76]	; (800a858 <UART_SetConfig+0x1340>)
 800a80a:	f04f 0403 	mov.w	r4, #3
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	6852      	ldr	r2, [r2, #4]
 800a812:	0852      	lsrs	r2, r2, #1
 800a814:	4611      	mov	r1, r2
 800a816:	f04f 0200 	mov.w	r2, #0
 800a81a:	eb13 0b01 	adds.w	fp, r3, r1
 800a81e:	eb44 0c02 	adc.w	ip, r4, r2
 800a822:	4658      	mov	r0, fp
 800a824:	4661      	mov	r1, ip
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f04f 0400 	mov.w	r4, #0
 800a82e:	461a      	mov	r2, r3
 800a830:	4623      	mov	r3, r4
 800a832:	f7f5 fdb5 	bl	80003a0 <__aeabi_uldivmod>
 800a836:	4603      	mov	r3, r0
 800a838:	460c      	mov	r4, r1
 800a83a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a83c:	e122      	b.n	800aa84 <UART_SetConfig+0x156c>
 800a83e:	bf00      	nop
 800a840:	51615500 	.word	0x51615500
 800a844:	00000000 	.word	0x00000000
 800a848:	a2c2aa00 	.word	0xa2c2aa00
 800a84c:	00000000 	.word	0x00000000
 800a850:	58024400 	.word	0x58024400
 800a854:	03d09000 	.word	0x03d09000
 800a858:	d0900000 	.word	0xd0900000
 800a85c:	07a12000 	.word	0x07a12000
 800a860:	0f424000 	.word	0x0f424000
 800a864:	1e848000 	.word	0x1e848000
 800a868:	3d090000 	.word	0x3d090000
 800a86c:	61a80000 	.word	0x61a80000
 800a870:	7a120000 	.word	0x7a120000
 800a874:	f4240000 	.word	0xf4240000
 800a878:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	d05b      	beq.n	800a93c <UART_SetConfig+0x1424>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d053      	beq.n	800a934 <UART_SetConfig+0x141c>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	2b02      	cmp	r3, #2
 800a892:	d04b      	beq.n	800a92c <UART_SetConfig+0x1414>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d043      	beq.n	800a924 <UART_SetConfig+0x140c>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	2b04      	cmp	r3, #4
 800a8a2:	d03b      	beq.n	800a91c <UART_SetConfig+0x1404>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a8:	2b05      	cmp	r3, #5
 800a8aa:	d033      	beq.n	800a914 <UART_SetConfig+0x13fc>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	2b06      	cmp	r3, #6
 800a8b2:	d02b      	beq.n	800a90c <UART_SetConfig+0x13f4>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	2b07      	cmp	r3, #7
 800a8ba:	d023      	beq.n	800a904 <UART_SetConfig+0x13ec>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2b08      	cmp	r3, #8
 800a8c2:	d01b      	beq.n	800a8fc <UART_SetConfig+0x13e4>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	2b09      	cmp	r3, #9
 800a8ca:	d013      	beq.n	800a8f4 <UART_SetConfig+0x13dc>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b0a      	cmp	r3, #10
 800a8d2:	d00b      	beq.n	800a8ec <UART_SetConfig+0x13d4>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2b0b      	cmp	r3, #11
 800a8da:	d103      	bne.n	800a8e4 <UART_SetConfig+0x13cc>
 800a8dc:	4bc0      	ldr	r3, [pc, #768]	; (800abe0 <UART_SetConfig+0x16c8>)
 800a8de:	f04f 0400 	mov.w	r4, #0
 800a8e2:	e02e      	b.n	800a942 <UART_SetConfig+0x142a>
 800a8e4:	4bbf      	ldr	r3, [pc, #764]	; (800abe4 <UART_SetConfig+0x16cc>)
 800a8e6:	f04f 0400 	mov.w	r4, #0
 800a8ea:	e02a      	b.n	800a942 <UART_SetConfig+0x142a>
 800a8ec:	4bbe      	ldr	r3, [pc, #760]	; (800abe8 <UART_SetConfig+0x16d0>)
 800a8ee:	f04f 0400 	mov.w	r4, #0
 800a8f2:	e026      	b.n	800a942 <UART_SetConfig+0x142a>
 800a8f4:	4bbd      	ldr	r3, [pc, #756]	; (800abec <UART_SetConfig+0x16d4>)
 800a8f6:	f04f 0400 	mov.w	r4, #0
 800a8fa:	e022      	b.n	800a942 <UART_SetConfig+0x142a>
 800a8fc:	4bbc      	ldr	r3, [pc, #752]	; (800abf0 <UART_SetConfig+0x16d8>)
 800a8fe:	f04f 0400 	mov.w	r4, #0
 800a902:	e01e      	b.n	800a942 <UART_SetConfig+0x142a>
 800a904:	4bbb      	ldr	r3, [pc, #748]	; (800abf4 <UART_SetConfig+0x16dc>)
 800a906:	f04f 0400 	mov.w	r4, #0
 800a90a:	e01a      	b.n	800a942 <UART_SetConfig+0x142a>
 800a90c:	a4b0      	add	r4, pc, #704	; (adr r4, 800abd0 <UART_SetConfig+0x16b8>)
 800a90e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a912:	e016      	b.n	800a942 <UART_SetConfig+0x142a>
 800a914:	4bb8      	ldr	r3, [pc, #736]	; (800abf8 <UART_SetConfig+0x16e0>)
 800a916:	f04f 0400 	mov.w	r4, #0
 800a91a:	e012      	b.n	800a942 <UART_SetConfig+0x142a>
 800a91c:	4bb7      	ldr	r3, [pc, #732]	; (800abfc <UART_SetConfig+0x16e4>)
 800a91e:	f04f 0400 	mov.w	r4, #0
 800a922:	e00e      	b.n	800a942 <UART_SetConfig+0x142a>
 800a924:	a4ac      	add	r4, pc, #688	; (adr r4, 800abd8 <UART_SetConfig+0x16c0>)
 800a926:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a92a:	e00a      	b.n	800a942 <UART_SetConfig+0x142a>
 800a92c:	4bb4      	ldr	r3, [pc, #720]	; (800ac00 <UART_SetConfig+0x16e8>)
 800a92e:	f04f 0400 	mov.w	r4, #0
 800a932:	e006      	b.n	800a942 <UART_SetConfig+0x142a>
 800a934:	4bb3      	ldr	r3, [pc, #716]	; (800ac04 <UART_SetConfig+0x16ec>)
 800a936:	f04f 0400 	mov.w	r4, #0
 800a93a:	e002      	b.n	800a942 <UART_SetConfig+0x142a>
 800a93c:	4ba9      	ldr	r3, [pc, #676]	; (800abe4 <UART_SetConfig+0x16cc>)
 800a93e:	f04f 0400 	mov.w	r4, #0
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6852      	ldr	r2, [r2, #4]
 800a946:	0852      	lsrs	r2, r2, #1
 800a948:	4611      	mov	r1, r2
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	eb13 0b01 	adds.w	fp, r3, r1
 800a952:	eb44 0c02 	adc.w	ip, r4, r2
 800a956:	4658      	mov	r0, fp
 800a958:	4661      	mov	r1, ip
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	f04f 0400 	mov.w	r4, #0
 800a962:	461a      	mov	r2, r3
 800a964:	4623      	mov	r3, r4
 800a966:	f7f5 fd1b 	bl	80003a0 <__aeabi_uldivmod>
 800a96a:	4603      	mov	r3, r0
 800a96c:	460c      	mov	r4, r1
 800a96e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a970:	e088      	b.n	800aa84 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	2b00      	cmp	r3, #0
 800a978:	d064      	beq.n	800aa44 <UART_SetConfig+0x152c>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d05b      	beq.n	800aa3a <UART_SetConfig+0x1522>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	2b02      	cmp	r3, #2
 800a988:	d052      	beq.n	800aa30 <UART_SetConfig+0x1518>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d04a      	beq.n	800aa28 <UART_SetConfig+0x1510>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b04      	cmp	r3, #4
 800a998:	d041      	beq.n	800aa1e <UART_SetConfig+0x1506>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	2b05      	cmp	r3, #5
 800a9a0:	d039      	beq.n	800aa16 <UART_SetConfig+0x14fe>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	2b06      	cmp	r3, #6
 800a9a8:	d031      	beq.n	800aa0e <UART_SetConfig+0x14f6>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	2b07      	cmp	r3, #7
 800a9b0:	d028      	beq.n	800aa04 <UART_SetConfig+0x14ec>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	2b08      	cmp	r3, #8
 800a9b8:	d01f      	beq.n	800a9fa <UART_SetConfig+0x14e2>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9be:	2b09      	cmp	r3, #9
 800a9c0:	d016      	beq.n	800a9f0 <UART_SetConfig+0x14d8>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c6:	2b0a      	cmp	r3, #10
 800a9c8:	d00d      	beq.n	800a9e6 <UART_SetConfig+0x14ce>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	2b0b      	cmp	r3, #11
 800a9d0:	d104      	bne.n	800a9dc <UART_SetConfig+0x14c4>
 800a9d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9d6:	f04f 0400 	mov.w	r4, #0
 800a9da:	e037      	b.n	800aa4c <UART_SetConfig+0x1534>
 800a9dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a9e0:	f04f 0400 	mov.w	r4, #0
 800a9e4:	e032      	b.n	800aa4c <UART_SetConfig+0x1534>
 800a9e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a9ea:	f04f 0400 	mov.w	r4, #0
 800a9ee:	e02d      	b.n	800aa4c <UART_SetConfig+0x1534>
 800a9f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a9f4:	f04f 0400 	mov.w	r4, #0
 800a9f8:	e028      	b.n	800aa4c <UART_SetConfig+0x1534>
 800a9fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a9fe:	f04f 0400 	mov.w	r4, #0
 800aa02:	e023      	b.n	800aa4c <UART_SetConfig+0x1534>
 800aa04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa08:	f04f 0400 	mov.w	r4, #0
 800aa0c:	e01e      	b.n	800aa4c <UART_SetConfig+0x1534>
 800aa0e:	4b7e      	ldr	r3, [pc, #504]	; (800ac08 <UART_SetConfig+0x16f0>)
 800aa10:	f04f 0400 	mov.w	r4, #0
 800aa14:	e01a      	b.n	800aa4c <UART_SetConfig+0x1534>
 800aa16:	4b7d      	ldr	r3, [pc, #500]	; (800ac0c <UART_SetConfig+0x16f4>)
 800aa18:	f04f 0400 	mov.w	r4, #0
 800aa1c:	e016      	b.n	800aa4c <UART_SetConfig+0x1534>
 800aa1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aa22:	f04f 0400 	mov.w	r4, #0
 800aa26:	e011      	b.n	800aa4c <UART_SetConfig+0x1534>
 800aa28:	4b79      	ldr	r3, [pc, #484]	; (800ac10 <UART_SetConfig+0x16f8>)
 800aa2a:	f04f 0400 	mov.w	r4, #0
 800aa2e:	e00d      	b.n	800aa4c <UART_SetConfig+0x1534>
 800aa30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa34:	f04f 0400 	mov.w	r4, #0
 800aa38:	e008      	b.n	800aa4c <UART_SetConfig+0x1534>
 800aa3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa3e:	f04f 0400 	mov.w	r4, #0
 800aa42:	e003      	b.n	800aa4c <UART_SetConfig+0x1534>
 800aa44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aa48:	f04f 0400 	mov.w	r4, #0
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6852      	ldr	r2, [r2, #4]
 800aa50:	0852      	lsrs	r2, r2, #1
 800aa52:	4611      	mov	r1, r2
 800aa54:	f04f 0200 	mov.w	r2, #0
 800aa58:	eb13 0b01 	adds.w	fp, r3, r1
 800aa5c:	eb44 0c02 	adc.w	ip, r4, r2
 800aa60:	4658      	mov	r0, fp
 800aa62:	4661      	mov	r1, ip
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	f04f 0400 	mov.w	r4, #0
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	4623      	mov	r3, r4
 800aa70:	f7f5 fc96 	bl	80003a0 <__aeabi_uldivmod>
 800aa74:	4603      	mov	r3, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aa7a:	e003      	b.n	800aa84 <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800aa82:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa8a:	d309      	bcc.n	800aaa0 <UART_SetConfig+0x1588>
 800aa8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa92:	d205      	bcs.n	800aaa0 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa9a:	60da      	str	r2, [r3, #12]
 800aa9c:	f000 bf85 	b.w	800b9aa <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaa6:	f000 bf80 	b.w	800b9aa <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aab2:	f040 83da 	bne.w	800b26a <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 800aab6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aaba:	2b40      	cmp	r3, #64	; 0x40
 800aabc:	f200 83b3 	bhi.w	800b226 <UART_SetConfig+0x1d0e>
 800aac0:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <UART_SetConfig+0x15b0>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800ac15 	.word	0x0800ac15
 800aacc:	0800accd 	.word	0x0800accd
 800aad0:	0800b227 	.word	0x0800b227
 800aad4:	0800b227 	.word	0x0800b227
 800aad8:	0800ad85 	.word	0x0800ad85
 800aadc:	0800b227 	.word	0x0800b227
 800aae0:	0800b227 	.word	0x0800b227
 800aae4:	0800b227 	.word	0x0800b227
 800aae8:	0800ae41 	.word	0x0800ae41
 800aaec:	0800b227 	.word	0x0800b227
 800aaf0:	0800b227 	.word	0x0800b227
 800aaf4:	0800b227 	.word	0x0800b227
 800aaf8:	0800b227 	.word	0x0800b227
 800aafc:	0800b227 	.word	0x0800b227
 800ab00:	0800b227 	.word	0x0800b227
 800ab04:	0800b227 	.word	0x0800b227
 800ab08:	0800aefd 	.word	0x0800aefd
 800ab0c:	0800b227 	.word	0x0800b227
 800ab10:	0800b227 	.word	0x0800b227
 800ab14:	0800b227 	.word	0x0800b227
 800ab18:	0800b227 	.word	0x0800b227
 800ab1c:	0800b227 	.word	0x0800b227
 800ab20:	0800b227 	.word	0x0800b227
 800ab24:	0800b227 	.word	0x0800b227
 800ab28:	0800b227 	.word	0x0800b227
 800ab2c:	0800b227 	.word	0x0800b227
 800ab30:	0800b227 	.word	0x0800b227
 800ab34:	0800b227 	.word	0x0800b227
 800ab38:	0800b227 	.word	0x0800b227
 800ab3c:	0800b227 	.word	0x0800b227
 800ab40:	0800b227 	.word	0x0800b227
 800ab44:	0800b227 	.word	0x0800b227
 800ab48:	0800b06f 	.word	0x0800b06f
 800ab4c:	0800b227 	.word	0x0800b227
 800ab50:	0800b227 	.word	0x0800b227
 800ab54:	0800b227 	.word	0x0800b227
 800ab58:	0800b227 	.word	0x0800b227
 800ab5c:	0800b227 	.word	0x0800b227
 800ab60:	0800b227 	.word	0x0800b227
 800ab64:	0800b227 	.word	0x0800b227
 800ab68:	0800b227 	.word	0x0800b227
 800ab6c:	0800b227 	.word	0x0800b227
 800ab70:	0800b227 	.word	0x0800b227
 800ab74:	0800b227 	.word	0x0800b227
 800ab78:	0800b227 	.word	0x0800b227
 800ab7c:	0800b227 	.word	0x0800b227
 800ab80:	0800b227 	.word	0x0800b227
 800ab84:	0800b227 	.word	0x0800b227
 800ab88:	0800b227 	.word	0x0800b227
 800ab8c:	0800b227 	.word	0x0800b227
 800ab90:	0800b227 	.word	0x0800b227
 800ab94:	0800b227 	.word	0x0800b227
 800ab98:	0800b227 	.word	0x0800b227
 800ab9c:	0800b227 	.word	0x0800b227
 800aba0:	0800b227 	.word	0x0800b227
 800aba4:	0800b227 	.word	0x0800b227
 800aba8:	0800b227 	.word	0x0800b227
 800abac:	0800b227 	.word	0x0800b227
 800abb0:	0800b227 	.word	0x0800b227
 800abb4:	0800b227 	.word	0x0800b227
 800abb8:	0800b227 	.word	0x0800b227
 800abbc:	0800b227 	.word	0x0800b227
 800abc0:	0800b227 	.word	0x0800b227
 800abc4:	0800b227 	.word	0x0800b227
 800abc8:	0800b165 	.word	0x0800b165
 800abcc:	f3af 8000 	nop.w
 800abd0:	05161500 	.word	0x05161500
 800abd4:	00000000 	.word	0x00000000
 800abd8:	0a2c2a00 	.word	0x0a2c2a00
 800abdc:	00000000 	.word	0x00000000
 800abe0:	003d0900 	.word	0x003d0900
 800abe4:	3d090000 	.word	0x3d090000
 800abe8:	007a1200 	.word	0x007a1200
 800abec:	00f42400 	.word	0x00f42400
 800abf0:	01e84800 	.word	0x01e84800
 800abf4:	03d09000 	.word	0x03d09000
 800abf8:	061a8000 	.word	0x061a8000
 800abfc:	07a12000 	.word	0x07a12000
 800ac00:	0f424000 	.word	0x0f424000
 800ac04:	1e848000 	.word	0x1e848000
 800ac08:	000aaa00 	.word	0x000aaa00
 800ac0c:	000ccc00 	.word	0x000ccc00
 800ac10:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac14:	f7fb fe4e 	bl	80068b4 <HAL_RCC_GetPCLK1Freq>
 800ac18:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d044      	beq.n	800acac <UART_SetConfig+0x1794>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d03e      	beq.n	800aca8 <UART_SetConfig+0x1790>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d038      	beq.n	800aca4 <UART_SetConfig+0x178c>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d032      	beq.n	800aca0 <UART_SetConfig+0x1788>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d02c      	beq.n	800ac9c <UART_SetConfig+0x1784>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	2b05      	cmp	r3, #5
 800ac48:	d026      	beq.n	800ac98 <UART_SetConfig+0x1780>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4e:	2b06      	cmp	r3, #6
 800ac50:	d020      	beq.n	800ac94 <UART_SetConfig+0x177c>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	2b07      	cmp	r3, #7
 800ac58:	d01a      	beq.n	800ac90 <UART_SetConfig+0x1778>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5e:	2b08      	cmp	r3, #8
 800ac60:	d014      	beq.n	800ac8c <UART_SetConfig+0x1774>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	2b09      	cmp	r3, #9
 800ac68:	d00e      	beq.n	800ac88 <UART_SetConfig+0x1770>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	2b0a      	cmp	r3, #10
 800ac70:	d008      	beq.n	800ac84 <UART_SetConfig+0x176c>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	2b0b      	cmp	r3, #11
 800ac78:	d102      	bne.n	800ac80 <UART_SetConfig+0x1768>
 800ac7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac7e:	e016      	b.n	800acae <UART_SetConfig+0x1796>
 800ac80:	2301      	movs	r3, #1
 800ac82:	e014      	b.n	800acae <UART_SetConfig+0x1796>
 800ac84:	2380      	movs	r3, #128	; 0x80
 800ac86:	e012      	b.n	800acae <UART_SetConfig+0x1796>
 800ac88:	2340      	movs	r3, #64	; 0x40
 800ac8a:	e010      	b.n	800acae <UART_SetConfig+0x1796>
 800ac8c:	2320      	movs	r3, #32
 800ac8e:	e00e      	b.n	800acae <UART_SetConfig+0x1796>
 800ac90:	2310      	movs	r3, #16
 800ac92:	e00c      	b.n	800acae <UART_SetConfig+0x1796>
 800ac94:	230c      	movs	r3, #12
 800ac96:	e00a      	b.n	800acae <UART_SetConfig+0x1796>
 800ac98:	230a      	movs	r3, #10
 800ac9a:	e008      	b.n	800acae <UART_SetConfig+0x1796>
 800ac9c:	2308      	movs	r3, #8
 800ac9e:	e006      	b.n	800acae <UART_SetConfig+0x1796>
 800aca0:	2306      	movs	r3, #6
 800aca2:	e004      	b.n	800acae <UART_SetConfig+0x1796>
 800aca4:	2304      	movs	r3, #4
 800aca6:	e002      	b.n	800acae <UART_SetConfig+0x1796>
 800aca8:	2302      	movs	r3, #2
 800acaa:	e000      	b.n	800acae <UART_SetConfig+0x1796>
 800acac:	2301      	movs	r3, #1
 800acae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb4:	005a      	lsls	r2, r3, #1
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	085b      	lsrs	r3, r3, #1
 800acbc:	441a      	add	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acca:	e2b0      	b.n	800b22e <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800accc:	f7fb fe08 	bl	80068e0 <HAL_RCC_GetPCLK2Freq>
 800acd0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d044      	beq.n	800ad64 <UART_SetConfig+0x184c>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d03e      	beq.n	800ad60 <UART_SetConfig+0x1848>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d038      	beq.n	800ad5c <UART_SetConfig+0x1844>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d032      	beq.n	800ad58 <UART_SetConfig+0x1840>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	d02c      	beq.n	800ad54 <UART_SetConfig+0x183c>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d026      	beq.n	800ad50 <UART_SetConfig+0x1838>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad06:	2b06      	cmp	r3, #6
 800ad08:	d020      	beq.n	800ad4c <UART_SetConfig+0x1834>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	2b07      	cmp	r3, #7
 800ad10:	d01a      	beq.n	800ad48 <UART_SetConfig+0x1830>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	2b08      	cmp	r3, #8
 800ad18:	d014      	beq.n	800ad44 <UART_SetConfig+0x182c>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	2b09      	cmp	r3, #9
 800ad20:	d00e      	beq.n	800ad40 <UART_SetConfig+0x1828>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad26:	2b0a      	cmp	r3, #10
 800ad28:	d008      	beq.n	800ad3c <UART_SetConfig+0x1824>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	2b0b      	cmp	r3, #11
 800ad30:	d102      	bne.n	800ad38 <UART_SetConfig+0x1820>
 800ad32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad36:	e016      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e014      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad3c:	2380      	movs	r3, #128	; 0x80
 800ad3e:	e012      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad40:	2340      	movs	r3, #64	; 0x40
 800ad42:	e010      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad44:	2320      	movs	r3, #32
 800ad46:	e00e      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad48:	2310      	movs	r3, #16
 800ad4a:	e00c      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	e00a      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad50:	230a      	movs	r3, #10
 800ad52:	e008      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad54:	2308      	movs	r3, #8
 800ad56:	e006      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad58:	2306      	movs	r3, #6
 800ad5a:	e004      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad5c:	2304      	movs	r3, #4
 800ad5e:	e002      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad60:	2302      	movs	r3, #2
 800ad62:	e000      	b.n	800ad66 <UART_SetConfig+0x184e>
 800ad64:	2301      	movs	r3, #1
 800ad66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6c:	005a      	lsls	r2, r3, #1
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	085b      	lsrs	r3, r3, #1
 800ad74:	441a      	add	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad82:	e254      	b.n	800b22e <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad84:	f107 0318 	add.w	r3, r7, #24
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fc ff77 	bl	8007c7c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d044      	beq.n	800ae22 <UART_SetConfig+0x190a>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d03e      	beq.n	800ae1e <UART_SetConfig+0x1906>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d038      	beq.n	800ae1a <UART_SetConfig+0x1902>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adac:	2b03      	cmp	r3, #3
 800adae:	d032      	beq.n	800ae16 <UART_SetConfig+0x18fe>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	2b04      	cmp	r3, #4
 800adb6:	d02c      	beq.n	800ae12 <UART_SetConfig+0x18fa>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	2b05      	cmp	r3, #5
 800adbe:	d026      	beq.n	800ae0e <UART_SetConfig+0x18f6>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	2b06      	cmp	r3, #6
 800adc6:	d020      	beq.n	800ae0a <UART_SetConfig+0x18f2>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	2b07      	cmp	r3, #7
 800adce:	d01a      	beq.n	800ae06 <UART_SetConfig+0x18ee>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	2b08      	cmp	r3, #8
 800add6:	d014      	beq.n	800ae02 <UART_SetConfig+0x18ea>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	2b09      	cmp	r3, #9
 800adde:	d00e      	beq.n	800adfe <UART_SetConfig+0x18e6>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade4:	2b0a      	cmp	r3, #10
 800ade6:	d008      	beq.n	800adfa <UART_SetConfig+0x18e2>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	2b0b      	cmp	r3, #11
 800adee:	d102      	bne.n	800adf6 <UART_SetConfig+0x18de>
 800adf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf4:	e016      	b.n	800ae24 <UART_SetConfig+0x190c>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e014      	b.n	800ae24 <UART_SetConfig+0x190c>
 800adfa:	2380      	movs	r3, #128	; 0x80
 800adfc:	e012      	b.n	800ae24 <UART_SetConfig+0x190c>
 800adfe:	2340      	movs	r3, #64	; 0x40
 800ae00:	e010      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae02:	2320      	movs	r3, #32
 800ae04:	e00e      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae06:	2310      	movs	r3, #16
 800ae08:	e00c      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	e00a      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae0e:	230a      	movs	r3, #10
 800ae10:	e008      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae12:	2308      	movs	r3, #8
 800ae14:	e006      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae16:	2306      	movs	r3, #6
 800ae18:	e004      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae1a:	2304      	movs	r3, #4
 800ae1c:	e002      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e000      	b.n	800ae24 <UART_SetConfig+0x190c>
 800ae22:	2301      	movs	r3, #1
 800ae24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae28:	005a      	lsls	r2, r3, #1
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	085b      	lsrs	r3, r3, #1
 800ae30:	441a      	add	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae3e:	e1f6      	b.n	800b22e <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae40:	f107 030c 	add.w	r3, r7, #12
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fd f865 	bl	8007f14 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d044      	beq.n	800aede <UART_SetConfig+0x19c6>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d03e      	beq.n	800aeda <UART_SetConfig+0x19c2>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d038      	beq.n	800aed6 <UART_SetConfig+0x19be>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	2b03      	cmp	r3, #3
 800ae6a:	d032      	beq.n	800aed2 <UART_SetConfig+0x19ba>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae70:	2b04      	cmp	r3, #4
 800ae72:	d02c      	beq.n	800aece <UART_SetConfig+0x19b6>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae78:	2b05      	cmp	r3, #5
 800ae7a:	d026      	beq.n	800aeca <UART_SetConfig+0x19b2>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	2b06      	cmp	r3, #6
 800ae82:	d020      	beq.n	800aec6 <UART_SetConfig+0x19ae>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae88:	2b07      	cmp	r3, #7
 800ae8a:	d01a      	beq.n	800aec2 <UART_SetConfig+0x19aa>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d014      	beq.n	800aebe <UART_SetConfig+0x19a6>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae98:	2b09      	cmp	r3, #9
 800ae9a:	d00e      	beq.n	800aeba <UART_SetConfig+0x19a2>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	2b0a      	cmp	r3, #10
 800aea2:	d008      	beq.n	800aeb6 <UART_SetConfig+0x199e>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea8:	2b0b      	cmp	r3, #11
 800aeaa:	d102      	bne.n	800aeb2 <UART_SetConfig+0x199a>
 800aeac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeb0:	e016      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e014      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aeb6:	2380      	movs	r3, #128	; 0x80
 800aeb8:	e012      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aeba:	2340      	movs	r3, #64	; 0x40
 800aebc:	e010      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aebe:	2320      	movs	r3, #32
 800aec0:	e00e      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aec2:	2310      	movs	r3, #16
 800aec4:	e00c      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aec6:	230c      	movs	r3, #12
 800aec8:	e00a      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aeca:	230a      	movs	r3, #10
 800aecc:	e008      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aece:	2308      	movs	r3, #8
 800aed0:	e006      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aed2:	2306      	movs	r3, #6
 800aed4:	e004      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aed6:	2304      	movs	r3, #4
 800aed8:	e002      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aeda:	2302      	movs	r3, #2
 800aedc:	e000      	b.n	800aee0 <UART_SetConfig+0x19c8>
 800aede:	2301      	movs	r3, #1
 800aee0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee4:	005a      	lsls	r2, r3, #1
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	085b      	lsrs	r3, r3, #1
 800aeec:	441a      	add	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aefa:	e198      	b.n	800b22e <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aefc:	4b87      	ldr	r3, [pc, #540]	; (800b11c <UART_SetConfig+0x1c04>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0320 	and.w	r3, r3, #32
 800af04:	2b00      	cmp	r3, #0
 800af06:	d05e      	beq.n	800afc6 <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af08:	4b84      	ldr	r3, [pc, #528]	; (800b11c <UART_SetConfig+0x1c04>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	08db      	lsrs	r3, r3, #3
 800af0e:	f003 0303 	and.w	r3, r3, #3
 800af12:	4a83      	ldr	r2, [pc, #524]	; (800b120 <UART_SetConfig+0x1c08>)
 800af14:	40da      	lsrs	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d044      	beq.n	800afa8 <UART_SetConfig+0x1a90>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af22:	2b01      	cmp	r3, #1
 800af24:	d03e      	beq.n	800afa4 <UART_SetConfig+0x1a8c>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d038      	beq.n	800afa0 <UART_SetConfig+0x1a88>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	2b03      	cmp	r3, #3
 800af34:	d032      	beq.n	800af9c <UART_SetConfig+0x1a84>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d02c      	beq.n	800af98 <UART_SetConfig+0x1a80>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af42:	2b05      	cmp	r3, #5
 800af44:	d026      	beq.n	800af94 <UART_SetConfig+0x1a7c>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4a:	2b06      	cmp	r3, #6
 800af4c:	d020      	beq.n	800af90 <UART_SetConfig+0x1a78>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af52:	2b07      	cmp	r3, #7
 800af54:	d01a      	beq.n	800af8c <UART_SetConfig+0x1a74>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	2b08      	cmp	r3, #8
 800af5c:	d014      	beq.n	800af88 <UART_SetConfig+0x1a70>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af62:	2b09      	cmp	r3, #9
 800af64:	d00e      	beq.n	800af84 <UART_SetConfig+0x1a6c>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6a:	2b0a      	cmp	r3, #10
 800af6c:	d008      	beq.n	800af80 <UART_SetConfig+0x1a68>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	2b0b      	cmp	r3, #11
 800af74:	d102      	bne.n	800af7c <UART_SetConfig+0x1a64>
 800af76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af7a:	e016      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af7c:	2301      	movs	r3, #1
 800af7e:	e014      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af80:	2380      	movs	r3, #128	; 0x80
 800af82:	e012      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af84:	2340      	movs	r3, #64	; 0x40
 800af86:	e010      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af88:	2320      	movs	r3, #32
 800af8a:	e00e      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af8c:	2310      	movs	r3, #16
 800af8e:	e00c      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af90:	230c      	movs	r3, #12
 800af92:	e00a      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af94:	230a      	movs	r3, #10
 800af96:	e008      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af98:	2308      	movs	r3, #8
 800af9a:	e006      	b.n	800afaa <UART_SetConfig+0x1a92>
 800af9c:	2306      	movs	r3, #6
 800af9e:	e004      	b.n	800afaa <UART_SetConfig+0x1a92>
 800afa0:	2304      	movs	r3, #4
 800afa2:	e002      	b.n	800afaa <UART_SetConfig+0x1a92>
 800afa4:	2302      	movs	r3, #2
 800afa6:	e000      	b.n	800afaa <UART_SetConfig+0x1a92>
 800afa8:	2301      	movs	r3, #1
 800afaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800afae:	005a      	lsls	r2, r3, #1
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	085b      	lsrs	r3, r3, #1
 800afb6:	441a      	add	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800afc4:	e133      	b.n	800b22e <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d043      	beq.n	800b056 <UART_SetConfig+0x1b3e>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d03d      	beq.n	800b052 <UART_SetConfig+0x1b3a>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d037      	beq.n	800b04e <UART_SetConfig+0x1b36>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d031      	beq.n	800b04a <UART_SetConfig+0x1b32>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	2b04      	cmp	r3, #4
 800afec:	d02b      	beq.n	800b046 <UART_SetConfig+0x1b2e>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff2:	2b05      	cmp	r3, #5
 800aff4:	d025      	beq.n	800b042 <UART_SetConfig+0x1b2a>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	2b06      	cmp	r3, #6
 800affc:	d01f      	beq.n	800b03e <UART_SetConfig+0x1b26>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	2b07      	cmp	r3, #7
 800b004:	d019      	beq.n	800b03a <UART_SetConfig+0x1b22>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d013      	beq.n	800b036 <UART_SetConfig+0x1b1e>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	2b09      	cmp	r3, #9
 800b014:	d00d      	beq.n	800b032 <UART_SetConfig+0x1b1a>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01a:	2b0a      	cmp	r3, #10
 800b01c:	d007      	beq.n	800b02e <UART_SetConfig+0x1b16>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b022:	2b0b      	cmp	r3, #11
 800b024:	d101      	bne.n	800b02a <UART_SetConfig+0x1b12>
 800b026:	4b3f      	ldr	r3, [pc, #252]	; (800b124 <UART_SetConfig+0x1c0c>)
 800b028:	e016      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b02a:	4b3f      	ldr	r3, [pc, #252]	; (800b128 <UART_SetConfig+0x1c10>)
 800b02c:	e014      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b02e:	4b3f      	ldr	r3, [pc, #252]	; (800b12c <UART_SetConfig+0x1c14>)
 800b030:	e012      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b032:	4b3f      	ldr	r3, [pc, #252]	; (800b130 <UART_SetConfig+0x1c18>)
 800b034:	e010      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b036:	4b3f      	ldr	r3, [pc, #252]	; (800b134 <UART_SetConfig+0x1c1c>)
 800b038:	e00e      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b03a:	4b3f      	ldr	r3, [pc, #252]	; (800b138 <UART_SetConfig+0x1c20>)
 800b03c:	e00c      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b03e:	4b3f      	ldr	r3, [pc, #252]	; (800b13c <UART_SetConfig+0x1c24>)
 800b040:	e00a      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b042:	4b3f      	ldr	r3, [pc, #252]	; (800b140 <UART_SetConfig+0x1c28>)
 800b044:	e008      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b046:	4b3f      	ldr	r3, [pc, #252]	; (800b144 <UART_SetConfig+0x1c2c>)
 800b048:	e006      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b04a:	4b3f      	ldr	r3, [pc, #252]	; (800b148 <UART_SetConfig+0x1c30>)
 800b04c:	e004      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b04e:	4b3f      	ldr	r3, [pc, #252]	; (800b14c <UART_SetConfig+0x1c34>)
 800b050:	e002      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b052:	4b33      	ldr	r3, [pc, #204]	; (800b120 <UART_SetConfig+0x1c08>)
 800b054:	e000      	b.n	800b058 <UART_SetConfig+0x1b40>
 800b056:	4b34      	ldr	r3, [pc, #208]	; (800b128 <UART_SetConfig+0x1c10>)
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	6852      	ldr	r2, [r2, #4]
 800b05c:	0852      	lsrs	r2, r2, #1
 800b05e:	441a      	add	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	fbb2 f3f3 	udiv	r3, r2, r3
 800b068:	b29b      	uxth	r3, r3
 800b06a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b06c:	e0df      	b.n	800b22e <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	2b00      	cmp	r3, #0
 800b074:	d045      	beq.n	800b102 <UART_SetConfig+0x1bea>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d03f      	beq.n	800b0fe <UART_SetConfig+0x1be6>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	2b02      	cmp	r3, #2
 800b084:	d039      	beq.n	800b0fa <UART_SetConfig+0x1be2>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d033      	beq.n	800b0f6 <UART_SetConfig+0x1bde>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	2b04      	cmp	r3, #4
 800b094:	d02d      	beq.n	800b0f2 <UART_SetConfig+0x1bda>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	2b05      	cmp	r3, #5
 800b09c:	d027      	beq.n	800b0ee <UART_SetConfig+0x1bd6>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	2b06      	cmp	r3, #6
 800b0a4:	d021      	beq.n	800b0ea <UART_SetConfig+0x1bd2>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	2b07      	cmp	r3, #7
 800b0ac:	d01b      	beq.n	800b0e6 <UART_SetConfig+0x1bce>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	2b08      	cmp	r3, #8
 800b0b4:	d015      	beq.n	800b0e2 <UART_SetConfig+0x1bca>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	2b09      	cmp	r3, #9
 800b0bc:	d00f      	beq.n	800b0de <UART_SetConfig+0x1bc6>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	2b0a      	cmp	r3, #10
 800b0c4:	d008      	beq.n	800b0d8 <UART_SetConfig+0x1bc0>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ca:	2b0b      	cmp	r3, #11
 800b0cc:	d102      	bne.n	800b0d4 <UART_SetConfig+0x1bbc>
 800b0ce:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b0d2:	e017      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0d4:	4b18      	ldr	r3, [pc, #96]	; (800b138 <UART_SetConfig+0x1c20>)
 800b0d6:	e015      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b0dc:	e012      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0de:	4b1c      	ldr	r3, [pc, #112]	; (800b150 <UART_SetConfig+0x1c38>)
 800b0e0:	e010      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0e2:	4b1c      	ldr	r3, [pc, #112]	; (800b154 <UART_SetConfig+0x1c3c>)
 800b0e4:	e00e      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0e6:	4b0f      	ldr	r3, [pc, #60]	; (800b124 <UART_SetConfig+0x1c0c>)
 800b0e8:	e00c      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0ea:	4b1b      	ldr	r3, [pc, #108]	; (800b158 <UART_SetConfig+0x1c40>)
 800b0ec:	e00a      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0ee:	4b1b      	ldr	r3, [pc, #108]	; (800b15c <UART_SetConfig+0x1c44>)
 800b0f0:	e008      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <UART_SetConfig+0x1c14>)
 800b0f4:	e006      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0f6:	4b1a      	ldr	r3, [pc, #104]	; (800b160 <UART_SetConfig+0x1c48>)
 800b0f8:	e004      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0fa:	4b0d      	ldr	r3, [pc, #52]	; (800b130 <UART_SetConfig+0x1c18>)
 800b0fc:	e002      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <UART_SetConfig+0x1c1c>)
 800b100:	e000      	b.n	800b104 <UART_SetConfig+0x1bec>
 800b102:	4b0d      	ldr	r3, [pc, #52]	; (800b138 <UART_SetConfig+0x1c20>)
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	6852      	ldr	r2, [r2, #4]
 800b108:	0852      	lsrs	r2, r2, #1
 800b10a:	441a      	add	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	fbb2 f3f3 	udiv	r3, r2, r3
 800b114:	b29b      	uxth	r3, r3
 800b116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b118:	e089      	b.n	800b22e <UART_SetConfig+0x1d16>
 800b11a:	bf00      	nop
 800b11c:	58024400 	.word	0x58024400
 800b120:	03d09000 	.word	0x03d09000
 800b124:	0007a120 	.word	0x0007a120
 800b128:	07a12000 	.word	0x07a12000
 800b12c:	000f4240 	.word	0x000f4240
 800b130:	001e8480 	.word	0x001e8480
 800b134:	003d0900 	.word	0x003d0900
 800b138:	007a1200 	.word	0x007a1200
 800b13c:	00a2c2aa 	.word	0x00a2c2aa
 800b140:	00c35000 	.word	0x00c35000
 800b144:	00f42400 	.word	0x00f42400
 800b148:	01458554 	.word	0x01458554
 800b14c:	01e84800 	.word	0x01e84800
 800b150:	0001e848 	.word	0x0001e848
 800b154:	0003d090 	.word	0x0003d090
 800b158:	000a2c2a 	.word	0x000a2c2a
 800b15c:	000c3500 	.word	0x000c3500
 800b160:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d04f      	beq.n	800b20c <UART_SetConfig+0x1cf4>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	2b01      	cmp	r3, #1
 800b172:	d048      	beq.n	800b206 <UART_SetConfig+0x1cee>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d041      	beq.n	800b200 <UART_SetConfig+0x1ce8>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	2b03      	cmp	r3, #3
 800b182:	d03a      	beq.n	800b1fa <UART_SetConfig+0x1ce2>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d033      	beq.n	800b1f4 <UART_SetConfig+0x1cdc>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b190:	2b05      	cmp	r3, #5
 800b192:	d02c      	beq.n	800b1ee <UART_SetConfig+0x1cd6>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	2b06      	cmp	r3, #6
 800b19a:	d025      	beq.n	800b1e8 <UART_SetConfig+0x1cd0>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	2b07      	cmp	r3, #7
 800b1a2:	d01e      	beq.n	800b1e2 <UART_SetConfig+0x1cca>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	2b08      	cmp	r3, #8
 800b1aa:	d017      	beq.n	800b1dc <UART_SetConfig+0x1cc4>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	2b09      	cmp	r3, #9
 800b1b2:	d010      	beq.n	800b1d6 <UART_SetConfig+0x1cbe>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	2b0a      	cmp	r3, #10
 800b1ba:	d009      	beq.n	800b1d0 <UART_SetConfig+0x1cb8>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	2b0b      	cmp	r3, #11
 800b1c2:	d102      	bne.n	800b1ca <UART_SetConfig+0x1cb2>
 800b1c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1c8:	e022      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b1ce:	e01f      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1d4:	e01c      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1da:	e019      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1e0:	e016      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1e6:	e013      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1e8:	f241 5354 	movw	r3, #5460	; 0x1554
 800b1ec:	e010      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1ee:	f641 1398 	movw	r3, #6552	; 0x1998
 800b1f2:	e00d      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1f8:	e00a      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b1fa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b1fe:	e007      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b204:	e004      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b20a:	e001      	b.n	800b210 <UART_SetConfig+0x1cf8>
 800b20c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	6852      	ldr	r2, [r2, #4]
 800b214:	0852      	lsrs	r2, r2, #1
 800b216:	441a      	add	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b220:	b29b      	uxth	r3, r3
 800b222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b224:	e003      	b.n	800b22e <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b22c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b230:	2b0f      	cmp	r3, #15
 800b232:	d916      	bls.n	800b262 <UART_SetConfig+0x1d4a>
 800b234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b23a:	d212      	bcs.n	800b262 <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f023 030f 	bic.w	r3, r3, #15
 800b244:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b248:	085b      	lsrs	r3, r3, #1
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	f003 0307 	and.w	r3, r3, #7
 800b250:	b29a      	uxth	r2, r3
 800b252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b254:	4313      	orrs	r3, r2
 800b256:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b25e:	60da      	str	r2, [r3, #12]
 800b260:	e3a3      	b.n	800b9aa <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b268:	e39f      	b.n	800b9aa <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 800b26a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b26e:	2b40      	cmp	r3, #64	; 0x40
 800b270:	f200 8388 	bhi.w	800b984 <UART_SetConfig+0x246c>
 800b274:	a201      	add	r2, pc, #4	; (adr r2, 800b27c <UART_SetConfig+0x1d64>)
 800b276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27a:	bf00      	nop
 800b27c:	0800b381 	.word	0x0800b381
 800b280:	0800b437 	.word	0x0800b437
 800b284:	0800b985 	.word	0x0800b985
 800b288:	0800b985 	.word	0x0800b985
 800b28c:	0800b4ed 	.word	0x0800b4ed
 800b290:	0800b985 	.word	0x0800b985
 800b294:	0800b985 	.word	0x0800b985
 800b298:	0800b985 	.word	0x0800b985
 800b29c:	0800b5a7 	.word	0x0800b5a7
 800b2a0:	0800b985 	.word	0x0800b985
 800b2a4:	0800b985 	.word	0x0800b985
 800b2a8:	0800b985 	.word	0x0800b985
 800b2ac:	0800b985 	.word	0x0800b985
 800b2b0:	0800b985 	.word	0x0800b985
 800b2b4:	0800b985 	.word	0x0800b985
 800b2b8:	0800b985 	.word	0x0800b985
 800b2bc:	0800b661 	.word	0x0800b661
 800b2c0:	0800b985 	.word	0x0800b985
 800b2c4:	0800b985 	.word	0x0800b985
 800b2c8:	0800b985 	.word	0x0800b985
 800b2cc:	0800b985 	.word	0x0800b985
 800b2d0:	0800b985 	.word	0x0800b985
 800b2d4:	0800b985 	.word	0x0800b985
 800b2d8:	0800b985 	.word	0x0800b985
 800b2dc:	0800b985 	.word	0x0800b985
 800b2e0:	0800b985 	.word	0x0800b985
 800b2e4:	0800b985 	.word	0x0800b985
 800b2e8:	0800b985 	.word	0x0800b985
 800b2ec:	0800b985 	.word	0x0800b985
 800b2f0:	0800b985 	.word	0x0800b985
 800b2f4:	0800b985 	.word	0x0800b985
 800b2f8:	0800b985 	.word	0x0800b985
 800b2fc:	0800b7d1 	.word	0x0800b7d1
 800b300:	0800b985 	.word	0x0800b985
 800b304:	0800b985 	.word	0x0800b985
 800b308:	0800b985 	.word	0x0800b985
 800b30c:	0800b985 	.word	0x0800b985
 800b310:	0800b985 	.word	0x0800b985
 800b314:	0800b985 	.word	0x0800b985
 800b318:	0800b985 	.word	0x0800b985
 800b31c:	0800b985 	.word	0x0800b985
 800b320:	0800b985 	.word	0x0800b985
 800b324:	0800b985 	.word	0x0800b985
 800b328:	0800b985 	.word	0x0800b985
 800b32c:	0800b985 	.word	0x0800b985
 800b330:	0800b985 	.word	0x0800b985
 800b334:	0800b985 	.word	0x0800b985
 800b338:	0800b985 	.word	0x0800b985
 800b33c:	0800b985 	.word	0x0800b985
 800b340:	0800b985 	.word	0x0800b985
 800b344:	0800b985 	.word	0x0800b985
 800b348:	0800b985 	.word	0x0800b985
 800b34c:	0800b985 	.word	0x0800b985
 800b350:	0800b985 	.word	0x0800b985
 800b354:	0800b985 	.word	0x0800b985
 800b358:	0800b985 	.word	0x0800b985
 800b35c:	0800b985 	.word	0x0800b985
 800b360:	0800b985 	.word	0x0800b985
 800b364:	0800b985 	.word	0x0800b985
 800b368:	0800b985 	.word	0x0800b985
 800b36c:	0800b985 	.word	0x0800b985
 800b370:	0800b985 	.word	0x0800b985
 800b374:	0800b985 	.word	0x0800b985
 800b378:	0800b985 	.word	0x0800b985
 800b37c:	0800b8c5 	.word	0x0800b8c5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b380:	f7fb fa98 	bl	80068b4 <HAL_RCC_GetPCLK1Freq>
 800b384:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d044      	beq.n	800b418 <UART_SetConfig+0x1f00>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b392:	2b01      	cmp	r3, #1
 800b394:	d03e      	beq.n	800b414 <UART_SetConfig+0x1efc>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d038      	beq.n	800b410 <UART_SetConfig+0x1ef8>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d032      	beq.n	800b40c <UART_SetConfig+0x1ef4>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3aa:	2b04      	cmp	r3, #4
 800b3ac:	d02c      	beq.n	800b408 <UART_SetConfig+0x1ef0>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b2:	2b05      	cmp	r3, #5
 800b3b4:	d026      	beq.n	800b404 <UART_SetConfig+0x1eec>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	2b06      	cmp	r3, #6
 800b3bc:	d020      	beq.n	800b400 <UART_SetConfig+0x1ee8>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	2b07      	cmp	r3, #7
 800b3c4:	d01a      	beq.n	800b3fc <UART_SetConfig+0x1ee4>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ca:	2b08      	cmp	r3, #8
 800b3cc:	d014      	beq.n	800b3f8 <UART_SetConfig+0x1ee0>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d2:	2b09      	cmp	r3, #9
 800b3d4:	d00e      	beq.n	800b3f4 <UART_SetConfig+0x1edc>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	2b0a      	cmp	r3, #10
 800b3dc:	d008      	beq.n	800b3f0 <UART_SetConfig+0x1ed8>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e2:	2b0b      	cmp	r3, #11
 800b3e4:	d102      	bne.n	800b3ec <UART_SetConfig+0x1ed4>
 800b3e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3ea:	e016      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e014      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b3f0:	2380      	movs	r3, #128	; 0x80
 800b3f2:	e012      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b3f4:	2340      	movs	r3, #64	; 0x40
 800b3f6:	e010      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b3f8:	2320      	movs	r3, #32
 800b3fa:	e00e      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b3fc:	2310      	movs	r3, #16
 800b3fe:	e00c      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b400:	230c      	movs	r3, #12
 800b402:	e00a      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b404:	230a      	movs	r3, #10
 800b406:	e008      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b408:	2308      	movs	r3, #8
 800b40a:	e006      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b40c:	2306      	movs	r3, #6
 800b40e:	e004      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b410:	2304      	movs	r3, #4
 800b412:	e002      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b414:	2302      	movs	r3, #2
 800b416:	e000      	b.n	800b41a <UART_SetConfig+0x1f02>
 800b418:	2301      	movs	r3, #1
 800b41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b41c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	085b      	lsrs	r3, r3, #1
 800b426:	441a      	add	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b430:	b29b      	uxth	r3, r3
 800b432:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b434:	e2aa      	b.n	800b98c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b436:	f7fb fa53 	bl	80068e0 <HAL_RCC_GetPCLK2Freq>
 800b43a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b440:	2b00      	cmp	r3, #0
 800b442:	d044      	beq.n	800b4ce <UART_SetConfig+0x1fb6>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d03e      	beq.n	800b4ca <UART_SetConfig+0x1fb2>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b450:	2b02      	cmp	r3, #2
 800b452:	d038      	beq.n	800b4c6 <UART_SetConfig+0x1fae>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b458:	2b03      	cmp	r3, #3
 800b45a:	d032      	beq.n	800b4c2 <UART_SetConfig+0x1faa>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b460:	2b04      	cmp	r3, #4
 800b462:	d02c      	beq.n	800b4be <UART_SetConfig+0x1fa6>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	2b05      	cmp	r3, #5
 800b46a:	d026      	beq.n	800b4ba <UART_SetConfig+0x1fa2>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	2b06      	cmp	r3, #6
 800b472:	d020      	beq.n	800b4b6 <UART_SetConfig+0x1f9e>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b478:	2b07      	cmp	r3, #7
 800b47a:	d01a      	beq.n	800b4b2 <UART_SetConfig+0x1f9a>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	2b08      	cmp	r3, #8
 800b482:	d014      	beq.n	800b4ae <UART_SetConfig+0x1f96>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	2b09      	cmp	r3, #9
 800b48a:	d00e      	beq.n	800b4aa <UART_SetConfig+0x1f92>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	2b0a      	cmp	r3, #10
 800b492:	d008      	beq.n	800b4a6 <UART_SetConfig+0x1f8e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	2b0b      	cmp	r3, #11
 800b49a:	d102      	bne.n	800b4a2 <UART_SetConfig+0x1f8a>
 800b49c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4a0:	e016      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e014      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4a6:	2380      	movs	r3, #128	; 0x80
 800b4a8:	e012      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4aa:	2340      	movs	r3, #64	; 0x40
 800b4ac:	e010      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4ae:	2320      	movs	r3, #32
 800b4b0:	e00e      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4b2:	2310      	movs	r3, #16
 800b4b4:	e00c      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4b6:	230c      	movs	r3, #12
 800b4b8:	e00a      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4ba:	230a      	movs	r3, #10
 800b4bc:	e008      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4be:	2308      	movs	r3, #8
 800b4c0:	e006      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4c2:	2306      	movs	r3, #6
 800b4c4:	e004      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4c6:	2304      	movs	r3, #4
 800b4c8:	e002      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	e000      	b.n	800b4d0 <UART_SetConfig+0x1fb8>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d2:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	085b      	lsrs	r3, r3, #1
 800b4dc:	441a      	add	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4ea:	e24f      	b.n	800b98c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4ec:	f107 0318 	add.w	r3, r7, #24
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fc fbc3 	bl	8007c7c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4f6:	69fa      	ldr	r2, [r7, #28]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d044      	beq.n	800b58a <UART_SetConfig+0x2072>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b504:	2b01      	cmp	r3, #1
 800b506:	d03e      	beq.n	800b586 <UART_SetConfig+0x206e>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d038      	beq.n	800b582 <UART_SetConfig+0x206a>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b514:	2b03      	cmp	r3, #3
 800b516:	d032      	beq.n	800b57e <UART_SetConfig+0x2066>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51c:	2b04      	cmp	r3, #4
 800b51e:	d02c      	beq.n	800b57a <UART_SetConfig+0x2062>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	2b05      	cmp	r3, #5
 800b526:	d026      	beq.n	800b576 <UART_SetConfig+0x205e>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	2b06      	cmp	r3, #6
 800b52e:	d020      	beq.n	800b572 <UART_SetConfig+0x205a>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	2b07      	cmp	r3, #7
 800b536:	d01a      	beq.n	800b56e <UART_SetConfig+0x2056>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	2b08      	cmp	r3, #8
 800b53e:	d014      	beq.n	800b56a <UART_SetConfig+0x2052>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	2b09      	cmp	r3, #9
 800b546:	d00e      	beq.n	800b566 <UART_SetConfig+0x204e>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	2b0a      	cmp	r3, #10
 800b54e:	d008      	beq.n	800b562 <UART_SetConfig+0x204a>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b554:	2b0b      	cmp	r3, #11
 800b556:	d102      	bne.n	800b55e <UART_SetConfig+0x2046>
 800b558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b55c:	e016      	b.n	800b58c <UART_SetConfig+0x2074>
 800b55e:	2301      	movs	r3, #1
 800b560:	e014      	b.n	800b58c <UART_SetConfig+0x2074>
 800b562:	2380      	movs	r3, #128	; 0x80
 800b564:	e012      	b.n	800b58c <UART_SetConfig+0x2074>
 800b566:	2340      	movs	r3, #64	; 0x40
 800b568:	e010      	b.n	800b58c <UART_SetConfig+0x2074>
 800b56a:	2320      	movs	r3, #32
 800b56c:	e00e      	b.n	800b58c <UART_SetConfig+0x2074>
 800b56e:	2310      	movs	r3, #16
 800b570:	e00c      	b.n	800b58c <UART_SetConfig+0x2074>
 800b572:	230c      	movs	r3, #12
 800b574:	e00a      	b.n	800b58c <UART_SetConfig+0x2074>
 800b576:	230a      	movs	r3, #10
 800b578:	e008      	b.n	800b58c <UART_SetConfig+0x2074>
 800b57a:	2308      	movs	r3, #8
 800b57c:	e006      	b.n	800b58c <UART_SetConfig+0x2074>
 800b57e:	2306      	movs	r3, #6
 800b580:	e004      	b.n	800b58c <UART_SetConfig+0x2074>
 800b582:	2304      	movs	r3, #4
 800b584:	e002      	b.n	800b58c <UART_SetConfig+0x2074>
 800b586:	2302      	movs	r3, #2
 800b588:	e000      	b.n	800b58c <UART_SetConfig+0x2074>
 800b58a:	2301      	movs	r3, #1
 800b58c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	085b      	lsrs	r3, r3, #1
 800b596:	441a      	add	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5a4:	e1f2      	b.n	800b98c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a6:	f107 030c 	add.w	r3, r7, #12
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fc fcb2 	bl	8007f14 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d044      	beq.n	800b644 <UART_SetConfig+0x212c>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d03e      	beq.n	800b640 <UART_SetConfig+0x2128>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d038      	beq.n	800b63c <UART_SetConfig+0x2124>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d032      	beq.n	800b638 <UART_SetConfig+0x2120>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d02c      	beq.n	800b634 <UART_SetConfig+0x211c>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	2b05      	cmp	r3, #5
 800b5e0:	d026      	beq.n	800b630 <UART_SetConfig+0x2118>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	2b06      	cmp	r3, #6
 800b5e8:	d020      	beq.n	800b62c <UART_SetConfig+0x2114>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	2b07      	cmp	r3, #7
 800b5f0:	d01a      	beq.n	800b628 <UART_SetConfig+0x2110>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	2b08      	cmp	r3, #8
 800b5f8:	d014      	beq.n	800b624 <UART_SetConfig+0x210c>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	2b09      	cmp	r3, #9
 800b600:	d00e      	beq.n	800b620 <UART_SetConfig+0x2108>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b606:	2b0a      	cmp	r3, #10
 800b608:	d008      	beq.n	800b61c <UART_SetConfig+0x2104>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	2b0b      	cmp	r3, #11
 800b610:	d102      	bne.n	800b618 <UART_SetConfig+0x2100>
 800b612:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b616:	e016      	b.n	800b646 <UART_SetConfig+0x212e>
 800b618:	2301      	movs	r3, #1
 800b61a:	e014      	b.n	800b646 <UART_SetConfig+0x212e>
 800b61c:	2380      	movs	r3, #128	; 0x80
 800b61e:	e012      	b.n	800b646 <UART_SetConfig+0x212e>
 800b620:	2340      	movs	r3, #64	; 0x40
 800b622:	e010      	b.n	800b646 <UART_SetConfig+0x212e>
 800b624:	2320      	movs	r3, #32
 800b626:	e00e      	b.n	800b646 <UART_SetConfig+0x212e>
 800b628:	2310      	movs	r3, #16
 800b62a:	e00c      	b.n	800b646 <UART_SetConfig+0x212e>
 800b62c:	230c      	movs	r3, #12
 800b62e:	e00a      	b.n	800b646 <UART_SetConfig+0x212e>
 800b630:	230a      	movs	r3, #10
 800b632:	e008      	b.n	800b646 <UART_SetConfig+0x212e>
 800b634:	2308      	movs	r3, #8
 800b636:	e006      	b.n	800b646 <UART_SetConfig+0x212e>
 800b638:	2306      	movs	r3, #6
 800b63a:	e004      	b.n	800b646 <UART_SetConfig+0x212e>
 800b63c:	2304      	movs	r3, #4
 800b63e:	e002      	b.n	800b646 <UART_SetConfig+0x212e>
 800b640:	2302      	movs	r3, #2
 800b642:	e000      	b.n	800b646 <UART_SetConfig+0x212e>
 800b644:	2301      	movs	r3, #1
 800b646:	fbb2 f2f3 	udiv	r2, r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	085b      	lsrs	r3, r3, #1
 800b650:	441a      	add	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b65e:	e195      	b.n	800b98c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b660:	4b87      	ldr	r3, [pc, #540]	; (800b880 <UART_SetConfig+0x2368>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0320 	and.w	r3, r3, #32
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d05d      	beq.n	800b728 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66c:	4b84      	ldr	r3, [pc, #528]	; (800b880 <UART_SetConfig+0x2368>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	08db      	lsrs	r3, r3, #3
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	4a83      	ldr	r2, [pc, #524]	; (800b884 <UART_SetConfig+0x236c>)
 800b678:	40da      	lsrs	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d044      	beq.n	800b70c <UART_SetConfig+0x21f4>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b686:	2b01      	cmp	r3, #1
 800b688:	d03e      	beq.n	800b708 <UART_SetConfig+0x21f0>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d038      	beq.n	800b704 <UART_SetConfig+0x21ec>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	2b03      	cmp	r3, #3
 800b698:	d032      	beq.n	800b700 <UART_SetConfig+0x21e8>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d02c      	beq.n	800b6fc <UART_SetConfig+0x21e4>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	2b05      	cmp	r3, #5
 800b6a8:	d026      	beq.n	800b6f8 <UART_SetConfig+0x21e0>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	2b06      	cmp	r3, #6
 800b6b0:	d020      	beq.n	800b6f4 <UART_SetConfig+0x21dc>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	2b07      	cmp	r3, #7
 800b6b8:	d01a      	beq.n	800b6f0 <UART_SetConfig+0x21d8>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	2b08      	cmp	r3, #8
 800b6c0:	d014      	beq.n	800b6ec <UART_SetConfig+0x21d4>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	2b09      	cmp	r3, #9
 800b6c8:	d00e      	beq.n	800b6e8 <UART_SetConfig+0x21d0>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ce:	2b0a      	cmp	r3, #10
 800b6d0:	d008      	beq.n	800b6e4 <UART_SetConfig+0x21cc>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d6:	2b0b      	cmp	r3, #11
 800b6d8:	d102      	bne.n	800b6e0 <UART_SetConfig+0x21c8>
 800b6da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6de:	e016      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e014      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b6e4:	2380      	movs	r3, #128	; 0x80
 800b6e6:	e012      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b6e8:	2340      	movs	r3, #64	; 0x40
 800b6ea:	e010      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b6ec:	2320      	movs	r3, #32
 800b6ee:	e00e      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b6f0:	2310      	movs	r3, #16
 800b6f2:	e00c      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b6f4:	230c      	movs	r3, #12
 800b6f6:	e00a      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b6f8:	230a      	movs	r3, #10
 800b6fa:	e008      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	e006      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b700:	2306      	movs	r3, #6
 800b702:	e004      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b704:	2304      	movs	r3, #4
 800b706:	e002      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b708:	2302      	movs	r3, #2
 800b70a:	e000      	b.n	800b70e <UART_SetConfig+0x21f6>
 800b70c:	2301      	movs	r3, #1
 800b70e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	085b      	lsrs	r3, r3, #1
 800b718:	441a      	add	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b722:	b29b      	uxth	r3, r3
 800b724:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b726:	e131      	b.n	800b98c <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d043      	beq.n	800b7b8 <UART_SetConfig+0x22a0>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b734:	2b01      	cmp	r3, #1
 800b736:	d03d      	beq.n	800b7b4 <UART_SetConfig+0x229c>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d037      	beq.n	800b7b0 <UART_SetConfig+0x2298>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b744:	2b03      	cmp	r3, #3
 800b746:	d031      	beq.n	800b7ac <UART_SetConfig+0x2294>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	2b04      	cmp	r3, #4
 800b74e:	d02b      	beq.n	800b7a8 <UART_SetConfig+0x2290>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	2b05      	cmp	r3, #5
 800b756:	d025      	beq.n	800b7a4 <UART_SetConfig+0x228c>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	2b06      	cmp	r3, #6
 800b75e:	d01f      	beq.n	800b7a0 <UART_SetConfig+0x2288>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b764:	2b07      	cmp	r3, #7
 800b766:	d019      	beq.n	800b79c <UART_SetConfig+0x2284>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d013      	beq.n	800b798 <UART_SetConfig+0x2280>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b774:	2b09      	cmp	r3, #9
 800b776:	d00d      	beq.n	800b794 <UART_SetConfig+0x227c>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	2b0a      	cmp	r3, #10
 800b77e:	d007      	beq.n	800b790 <UART_SetConfig+0x2278>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	2b0b      	cmp	r3, #11
 800b786:	d101      	bne.n	800b78c <UART_SetConfig+0x2274>
 800b788:	4b3f      	ldr	r3, [pc, #252]	; (800b888 <UART_SetConfig+0x2370>)
 800b78a:	e016      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b78c:	4b3d      	ldr	r3, [pc, #244]	; (800b884 <UART_SetConfig+0x236c>)
 800b78e:	e014      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b790:	4b3e      	ldr	r3, [pc, #248]	; (800b88c <UART_SetConfig+0x2374>)
 800b792:	e012      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b794:	4b3e      	ldr	r3, [pc, #248]	; (800b890 <UART_SetConfig+0x2378>)
 800b796:	e010      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b798:	4b3e      	ldr	r3, [pc, #248]	; (800b894 <UART_SetConfig+0x237c>)
 800b79a:	e00e      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b79c:	4b3e      	ldr	r3, [pc, #248]	; (800b898 <UART_SetConfig+0x2380>)
 800b79e:	e00c      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b7a0:	4b3e      	ldr	r3, [pc, #248]	; (800b89c <UART_SetConfig+0x2384>)
 800b7a2:	e00a      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b7a4:	4b3e      	ldr	r3, [pc, #248]	; (800b8a0 <UART_SetConfig+0x2388>)
 800b7a6:	e008      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b7a8:	4b3e      	ldr	r3, [pc, #248]	; (800b8a4 <UART_SetConfig+0x238c>)
 800b7aa:	e006      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b7ac:	4b3e      	ldr	r3, [pc, #248]	; (800b8a8 <UART_SetConfig+0x2390>)
 800b7ae:	e004      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b7b0:	4b3e      	ldr	r3, [pc, #248]	; (800b8ac <UART_SetConfig+0x2394>)
 800b7b2:	e002      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b7b4:	4b3e      	ldr	r3, [pc, #248]	; (800b8b0 <UART_SetConfig+0x2398>)
 800b7b6:	e000      	b.n	800b7ba <UART_SetConfig+0x22a2>
 800b7b8:	4b32      	ldr	r3, [pc, #200]	; (800b884 <UART_SetConfig+0x236c>)
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	6852      	ldr	r2, [r2, #4]
 800b7be:	0852      	lsrs	r2, r2, #1
 800b7c0:	441a      	add	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7ce:	e0dd      	b.n	800b98c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d046      	beq.n	800b866 <UART_SetConfig+0x234e>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d040      	beq.n	800b862 <UART_SetConfig+0x234a>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d03a      	beq.n	800b85e <UART_SetConfig+0x2346>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d034      	beq.n	800b85a <UART_SetConfig+0x2342>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f4:	2b04      	cmp	r3, #4
 800b7f6:	d02e      	beq.n	800b856 <UART_SetConfig+0x233e>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	2b05      	cmp	r3, #5
 800b7fe:	d028      	beq.n	800b852 <UART_SetConfig+0x233a>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b804:	2b06      	cmp	r3, #6
 800b806:	d022      	beq.n	800b84e <UART_SetConfig+0x2336>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80c:	2b07      	cmp	r3, #7
 800b80e:	d01c      	beq.n	800b84a <UART_SetConfig+0x2332>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	2b08      	cmp	r3, #8
 800b816:	d016      	beq.n	800b846 <UART_SetConfig+0x232e>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	2b09      	cmp	r3, #9
 800b81e:	d00f      	beq.n	800b840 <UART_SetConfig+0x2328>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b824:	2b0a      	cmp	r3, #10
 800b826:	d008      	beq.n	800b83a <UART_SetConfig+0x2322>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	2b0b      	cmp	r3, #11
 800b82e:	d102      	bne.n	800b836 <UART_SetConfig+0x231e>
 800b830:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b834:	e018      	b.n	800b868 <UART_SetConfig+0x2350>
 800b836:	4b18      	ldr	r3, [pc, #96]	; (800b898 <UART_SetConfig+0x2380>)
 800b838:	e016      	b.n	800b868 <UART_SetConfig+0x2350>
 800b83a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b83e:	e013      	b.n	800b868 <UART_SetConfig+0x2350>
 800b840:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b844:	e010      	b.n	800b868 <UART_SetConfig+0x2350>
 800b846:	4b1b      	ldr	r3, [pc, #108]	; (800b8b4 <UART_SetConfig+0x239c>)
 800b848:	e00e      	b.n	800b868 <UART_SetConfig+0x2350>
 800b84a:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <UART_SetConfig+0x2370>)
 800b84c:	e00c      	b.n	800b868 <UART_SetConfig+0x2350>
 800b84e:	4b1a      	ldr	r3, [pc, #104]	; (800b8b8 <UART_SetConfig+0x23a0>)
 800b850:	e00a      	b.n	800b868 <UART_SetConfig+0x2350>
 800b852:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <UART_SetConfig+0x23a4>)
 800b854:	e008      	b.n	800b868 <UART_SetConfig+0x2350>
 800b856:	4b0d      	ldr	r3, [pc, #52]	; (800b88c <UART_SetConfig+0x2374>)
 800b858:	e006      	b.n	800b868 <UART_SetConfig+0x2350>
 800b85a:	4b19      	ldr	r3, [pc, #100]	; (800b8c0 <UART_SetConfig+0x23a8>)
 800b85c:	e004      	b.n	800b868 <UART_SetConfig+0x2350>
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <UART_SetConfig+0x2378>)
 800b860:	e002      	b.n	800b868 <UART_SetConfig+0x2350>
 800b862:	4b0c      	ldr	r3, [pc, #48]	; (800b894 <UART_SetConfig+0x237c>)
 800b864:	e000      	b.n	800b868 <UART_SetConfig+0x2350>
 800b866:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <UART_SetConfig+0x2380>)
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	6852      	ldr	r2, [r2, #4]
 800b86c:	0852      	lsrs	r2, r2, #1
 800b86e:	441a      	add	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	fbb2 f3f3 	udiv	r3, r2, r3
 800b878:	b29b      	uxth	r3, r3
 800b87a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b87c:	e086      	b.n	800b98c <UART_SetConfig+0x2474>
 800b87e:	bf00      	nop
 800b880:	58024400 	.word	0x58024400
 800b884:	03d09000 	.word	0x03d09000
 800b888:	0003d090 	.word	0x0003d090
 800b88c:	0007a120 	.word	0x0007a120
 800b890:	000f4240 	.word	0x000f4240
 800b894:	001e8480 	.word	0x001e8480
 800b898:	003d0900 	.word	0x003d0900
 800b89c:	00516155 	.word	0x00516155
 800b8a0:	0061a800 	.word	0x0061a800
 800b8a4:	007a1200 	.word	0x007a1200
 800b8a8:	00a2c2aa 	.word	0x00a2c2aa
 800b8ac:	00f42400 	.word	0x00f42400
 800b8b0:	01e84800 	.word	0x01e84800
 800b8b4:	0001e848 	.word	0x0001e848
 800b8b8:	00051615 	.word	0x00051615
 800b8bc:	00061a80 	.word	0x00061a80
 800b8c0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d04e      	beq.n	800b96a <UART_SetConfig+0x2452>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d047      	beq.n	800b964 <UART_SetConfig+0x244c>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d040      	beq.n	800b95e <UART_SetConfig+0x2446>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e0:	2b03      	cmp	r3, #3
 800b8e2:	d039      	beq.n	800b958 <UART_SetConfig+0x2440>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	2b04      	cmp	r3, #4
 800b8ea:	d032      	beq.n	800b952 <UART_SetConfig+0x243a>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f0:	2b05      	cmp	r3, #5
 800b8f2:	d02b      	beq.n	800b94c <UART_SetConfig+0x2434>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	2b06      	cmp	r3, #6
 800b8fa:	d024      	beq.n	800b946 <UART_SetConfig+0x242e>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b900:	2b07      	cmp	r3, #7
 800b902:	d01d      	beq.n	800b940 <UART_SetConfig+0x2428>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	2b08      	cmp	r3, #8
 800b90a:	d016      	beq.n	800b93a <UART_SetConfig+0x2422>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b910:	2b09      	cmp	r3, #9
 800b912:	d00f      	beq.n	800b934 <UART_SetConfig+0x241c>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	2b0a      	cmp	r3, #10
 800b91a:	d008      	beq.n	800b92e <UART_SetConfig+0x2416>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	2b0b      	cmp	r3, #11
 800b922:	d101      	bne.n	800b928 <UART_SetConfig+0x2410>
 800b924:	2380      	movs	r3, #128	; 0x80
 800b926:	e022      	b.n	800b96e <UART_SetConfig+0x2456>
 800b928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b92c:	e01f      	b.n	800b96e <UART_SetConfig+0x2456>
 800b92e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b932:	e01c      	b.n	800b96e <UART_SetConfig+0x2456>
 800b934:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b938:	e019      	b.n	800b96e <UART_SetConfig+0x2456>
 800b93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b93e:	e016      	b.n	800b96e <UART_SetConfig+0x2456>
 800b940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b944:	e013      	b.n	800b96e <UART_SetConfig+0x2456>
 800b946:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b94a:	e010      	b.n	800b96e <UART_SetConfig+0x2456>
 800b94c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b950:	e00d      	b.n	800b96e <UART_SetConfig+0x2456>
 800b952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b956:	e00a      	b.n	800b96e <UART_SetConfig+0x2456>
 800b958:	f241 5355 	movw	r3, #5461	; 0x1555
 800b95c:	e007      	b.n	800b96e <UART_SetConfig+0x2456>
 800b95e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b962:	e004      	b.n	800b96e <UART_SetConfig+0x2456>
 800b964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b968:	e001      	b.n	800b96e <UART_SetConfig+0x2456>
 800b96a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	6852      	ldr	r2, [r2, #4]
 800b972:	0852      	lsrs	r2, r2, #1
 800b974:	441a      	add	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97e:	b29b      	uxth	r3, r3
 800b980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b982:	e003      	b.n	800b98c <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b98a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98e:	2b0f      	cmp	r3, #15
 800b990:	d908      	bls.n	800b9a4 <UART_SetConfig+0x248c>
 800b992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b998:	d204      	bcs.n	800b9a4 <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9a0:	60da      	str	r2, [r3, #12]
 800b9a2:	e002      	b.n	800b9aa <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b9c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3740      	adds	r7, #64	; 0x40
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b9d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e0:	2bff      	cmp	r3, #255	; 0xff
 800b9e2:	d904      	bls.n	800b9ee <UART_AdvFeatureConfig+0x1a>
 800b9e4:	f640 4149 	movw	r1, #3145	; 0xc49
 800b9e8:	4899      	ldr	r0, [pc, #612]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800b9ea:	f7f5 fb9d 	bl	8001128 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f2:	f003 0301 	and.w	r3, r3, #1
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d018      	beq.n	800ba2c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d009      	beq.n	800ba16 <UART_AdvFeatureConfig+0x42>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba0a:	d004      	beq.n	800ba16 <UART_AdvFeatureConfig+0x42>
 800ba0c:	f640 414e 	movw	r1, #3150	; 0xc4e
 800ba10:	488f      	ldr	r0, [pc, #572]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800ba12:	f7f5 fb89 	bl	8001128 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba30:	f003 0302 	and.w	r3, r3, #2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d018      	beq.n	800ba6a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d009      	beq.n	800ba54 <UART_AdvFeatureConfig+0x80>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba48:	d004      	beq.n	800ba54 <UART_AdvFeatureConfig+0x80>
 800ba4a:	f640 4155 	movw	r1, #3157	; 0xc55
 800ba4e:	4880      	ldr	r0, [pc, #512]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800ba50:	f7f5 fb6a 	bl	8001128 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	430a      	orrs	r2, r1
 800ba68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6e:	f003 0304 	and.w	r3, r3, #4
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d018      	beq.n	800baa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d009      	beq.n	800ba92 <UART_AdvFeatureConfig+0xbe>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba86:	d004      	beq.n	800ba92 <UART_AdvFeatureConfig+0xbe>
 800ba88:	f640 415c 	movw	r1, #3164	; 0xc5c
 800ba8c:	4870      	ldr	r0, [pc, #448]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800ba8e:	f7f5 fb4b 	bl	8001128 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	430a      	orrs	r2, r1
 800baa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d018      	beq.n	800bae6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d009      	beq.n	800bad0 <UART_AdvFeatureConfig+0xfc>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bac4:	d004      	beq.n	800bad0 <UART_AdvFeatureConfig+0xfc>
 800bac6:	f640 4163 	movw	r1, #3171	; 0xc63
 800baca:	4861      	ldr	r0, [pc, #388]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800bacc:	f7f5 fb2c 	bl	8001128 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	430a      	orrs	r2, r1
 800bae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baea:	f003 0310 	and.w	r3, r3, #16
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d018      	beq.n	800bb24 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <UART_AdvFeatureConfig+0x13a>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb02:	d004      	beq.n	800bb0e <UART_AdvFeatureConfig+0x13a>
 800bb04:	f640 416a 	movw	r1, #3178	; 0xc6a
 800bb08:	4851      	ldr	r0, [pc, #324]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800bb0a:	f7f5 fb0d 	bl	8001128 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	430a      	orrs	r2, r1
 800bb22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb28:	f003 0320 	and.w	r3, r3, #32
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d018      	beq.n	800bb62 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d009      	beq.n	800bb4c <UART_AdvFeatureConfig+0x178>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb40:	d004      	beq.n	800bb4c <UART_AdvFeatureConfig+0x178>
 800bb42:	f640 4171 	movw	r1, #3185	; 0xc71
 800bb46:	4842      	ldr	r0, [pc, #264]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800bb48:	f7f5 faee 	bl	8001128 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f000 8082 	beq.w	800bc74 <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a37      	ldr	r2, [pc, #220]	; (800bc54 <UART_AdvFeatureConfig+0x280>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d027      	beq.n	800bbca <UART_AdvFeatureConfig+0x1f6>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a36      	ldr	r2, [pc, #216]	; (800bc58 <UART_AdvFeatureConfig+0x284>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d022      	beq.n	800bbca <UART_AdvFeatureConfig+0x1f6>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a34      	ldr	r2, [pc, #208]	; (800bc5c <UART_AdvFeatureConfig+0x288>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d01d      	beq.n	800bbca <UART_AdvFeatureConfig+0x1f6>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a33      	ldr	r2, [pc, #204]	; (800bc60 <UART_AdvFeatureConfig+0x28c>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d018      	beq.n	800bbca <UART_AdvFeatureConfig+0x1f6>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a31      	ldr	r2, [pc, #196]	; (800bc64 <UART_AdvFeatureConfig+0x290>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d013      	beq.n	800bbca <UART_AdvFeatureConfig+0x1f6>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a30      	ldr	r2, [pc, #192]	; (800bc68 <UART_AdvFeatureConfig+0x294>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d00e      	beq.n	800bbca <UART_AdvFeatureConfig+0x1f6>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a2e      	ldr	r2, [pc, #184]	; (800bc6c <UART_AdvFeatureConfig+0x298>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d009      	beq.n	800bbca <UART_AdvFeatureConfig+0x1f6>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a2d      	ldr	r2, [pc, #180]	; (800bc70 <UART_AdvFeatureConfig+0x29c>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d004      	beq.n	800bbca <UART_AdvFeatureConfig+0x1f6>
 800bbc0:	f640 4178 	movw	r1, #3192	; 0xc78
 800bbc4:	4822      	ldr	r0, [pc, #136]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800bbc6:	f7f5 faaf 	bl	8001128 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d009      	beq.n	800bbe6 <UART_AdvFeatureConfig+0x212>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbda:	d004      	beq.n	800bbe6 <UART_AdvFeatureConfig+0x212>
 800bbdc:	f640 4179 	movw	r1, #3193	; 0xc79
 800bbe0:	481b      	ldr	r0, [pc, #108]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800bbe2:	f7f5 faa1 	bl	8001128 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc04:	d136      	bne.n	800bc74 <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d013      	beq.n	800bc36 <UART_AdvFeatureConfig+0x262>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc16:	d00e      	beq.n	800bc36 <UART_AdvFeatureConfig+0x262>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc20:	d009      	beq.n	800bc36 <UART_AdvFeatureConfig+0x262>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc2a:	d004      	beq.n	800bc36 <UART_AdvFeatureConfig+0x262>
 800bc2c:	f640 417e 	movw	r1, #3198	; 0xc7e
 800bc30:	4807      	ldr	r0, [pc, #28]	; (800bc50 <UART_AdvFeatureConfig+0x27c>)
 800bc32:	f7f5 fa79 	bl	8001128 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	430a      	orrs	r2, r1
 800bc4a:	605a      	str	r2, [r3, #4]
 800bc4c:	e012      	b.n	800bc74 <UART_AdvFeatureConfig+0x2a0>
 800bc4e:	bf00      	nop
 800bc50:	08010c3c 	.word	0x08010c3c
 800bc54:	40011000 	.word	0x40011000
 800bc58:	40004400 	.word	0x40004400
 800bc5c:	40004800 	.word	0x40004800
 800bc60:	40004c00 	.word	0x40004c00
 800bc64:	40005000 	.word	0x40005000
 800bc68:	40011400 	.word	0x40011400
 800bc6c:	40007800 	.word	0x40007800
 800bc70:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d018      	beq.n	800bcb2 <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d009      	beq.n	800bc9c <UART_AdvFeatureConfig+0x2c8>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bc90:	d004      	beq.n	800bc9c <UART_AdvFeatureConfig+0x2c8>
 800bc92:	f640 4186 	movw	r1, #3206	; 0xc86
 800bc96:	4809      	ldr	r0, [pc, #36]	; (800bcbc <UART_AdvFeatureConfig+0x2e8>)
 800bc98:	f7f5 fa46 	bl	8001128 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	605a      	str	r2, [r3, #4]
  }
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	08010c3c 	.word	0x08010c3c

0800bcc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af02      	add	r7, sp, #8
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bcd0:	f7f5 fe6a 	bl	80019a8 <HAL_GetTick>
 800bcd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b08      	cmp	r3, #8
 800bce2:	d10e      	bne.n	800bd02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f82c 	bl	800bd50 <UART_WaitOnFlagUntilTimeout>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e022      	b.n	800bd48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0304 	and.w	r3, r3, #4
 800bd0c:	2b04      	cmp	r3, #4
 800bd0e:	d10e      	bne.n	800bd2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f816 	bl	800bd50 <UART_WaitOnFlagUntilTimeout>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e00c      	b.n	800bd48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2220      	movs	r2, #32
 800bd32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2220      	movs	r2, #32
 800bd3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd60:	e062      	b.n	800be28 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd68:	d05e      	beq.n	800be28 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd6a:	f7f5 fe1d 	bl	80019a8 <HAL_GetTick>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d302      	bcc.n	800bd80 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d11d      	bne.n	800bdbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689a      	ldr	r2, [r3, #8]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0201 	bic.w	r2, r2, #1
 800bd9e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2220      	movs	r2, #32
 800bda4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2220      	movs	r2, #32
 800bdac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	e045      	b.n	800be48 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 0304 	and.w	r3, r3, #4
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d02e      	beq.n	800be28 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	69db      	ldr	r3, [r3, #28]
 800bdd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdd8:	d126      	bne.n	800be28 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bde2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdf2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689a      	ldr	r2, [r3, #8]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0201 	bic.w	r2, r2, #1
 800be02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2220      	movs	r2, #32
 800be08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2220      	movs	r2, #32
 800be10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2220      	movs	r2, #32
 800be18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e00f      	b.n	800be48 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	69da      	ldr	r2, [r3, #28]
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	4013      	ands	r3, r2
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	429a      	cmp	r2, r3
 800be36:	bf0c      	ite	eq
 800be38:	2301      	moveq	r3, #1
 800be3a:	2300      	movne	r3, #0
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	461a      	mov	r2, r3
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	429a      	cmp	r2, r3
 800be44:	d08d      	beq.n	800bd62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a2e      	ldr	r2, [pc, #184]	; (800bf18 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d027      	beq.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x62>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a2d      	ldr	r2, [pc, #180]	; (800bf1c <HAL_UARTEx_DisableFifoMode+0xcc>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d022      	beq.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x62>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a2b      	ldr	r2, [pc, #172]	; (800bf20 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d01d      	beq.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x62>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a2a      	ldr	r2, [pc, #168]	; (800bf24 <HAL_UARTEx_DisableFifoMode+0xd4>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d018      	beq.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x62>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a28      	ldr	r2, [pc, #160]	; (800bf28 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d013      	beq.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x62>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a27      	ldr	r2, [pc, #156]	; (800bf2c <HAL_UARTEx_DisableFifoMode+0xdc>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d00e      	beq.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x62>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a25      	ldr	r2, [pc, #148]	; (800bf30 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d009      	beq.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x62>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a24      	ldr	r2, [pc, #144]	; (800bf34 <HAL_UARTEx_DisableFifoMode+0xe4>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d004      	beq.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x62>
 800bea8:	f240 2111 	movw	r1, #529	; 0x211
 800beac:	4822      	ldr	r0, [pc, #136]	; (800bf38 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800beae:	f7f5 f93b 	bl	8001128 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d101      	bne.n	800bec0 <HAL_UARTEx_DisableFifoMode+0x70>
 800bebc:	2302      	movs	r3, #2
 800bebe:	e027      	b.n	800bf10 <HAL_UARTEx_DisableFifoMode+0xc0>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2224      	movs	r2, #36	; 0x24
 800becc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f022 0201 	bic.w	r2, r2, #1
 800bee6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800beee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2220      	movs	r2, #32
 800bf02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	40011000 	.word	0x40011000
 800bf1c:	40004400 	.word	0x40004400
 800bf20:	40004800 	.word	0x40004800
 800bf24:	40004c00 	.word	0x40004c00
 800bf28:	40005000 	.word	0x40005000
 800bf2c:	40011400 	.word	0x40011400
 800bf30:	40007800 	.word	0x40007800
 800bf34:	40007c00 	.word	0x40007c00
 800bf38:	08010c78 	.word	0x08010c78

0800bf3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a40      	ldr	r2, [pc, #256]	; (800c04c <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d027      	beq.n	800bfa0 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a3e      	ldr	r2, [pc, #248]	; (800c050 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d022      	beq.n	800bfa0 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a3d      	ldr	r2, [pc, #244]	; (800c054 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d01d      	beq.n	800bfa0 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a3b      	ldr	r2, [pc, #236]	; (800c058 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d018      	beq.n	800bfa0 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a3a      	ldr	r2, [pc, #232]	; (800c05c <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d013      	beq.n	800bfa0 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a38      	ldr	r2, [pc, #224]	; (800c060 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d00e      	beq.n	800bfa0 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a37      	ldr	r2, [pc, #220]	; (800c064 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d009      	beq.n	800bfa0 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a35      	ldr	r2, [pc, #212]	; (800c068 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d004      	beq.n	800bfa0 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bf96:	f240 213f 	movw	r1, #575	; 0x23f
 800bf9a:	4834      	ldr	r0, [pc, #208]	; (800c06c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800bf9c:	f7f5 f8c4 	bl	8001128 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d018      	beq.n	800bfd8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfac:	d014      	beq.n	800bfd8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfb4:	d010      	beq.n	800bfd8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bfbc:	d00c      	beq.n	800bfd8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfc4:	d008      	beq.n	800bfd8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800bfcc:	d004      	beq.n	800bfd8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bfce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfd2:	4826      	ldr	r0, [pc, #152]	; (800c06c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800bfd4:	f7f5 f8a8 	bl	8001128 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d101      	bne.n	800bfe6 <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	e02d      	b.n	800c042 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2224      	movs	r2, #36	; 0x24
 800bff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f022 0201 	bic.w	r2, r2, #1
 800c00c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	683a      	ldr	r2, [r7, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f8be 	bl	800c1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2220      	movs	r2, #32
 800c034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	40011000 	.word	0x40011000
 800c050:	40004400 	.word	0x40004400
 800c054:	40004800 	.word	0x40004800
 800c058:	40004c00 	.word	0x40004c00
 800c05c:	40005000 	.word	0x40005000
 800c060:	40011400 	.word	0x40011400
 800c064:	40007800 	.word	0x40007800
 800c068:	40007c00 	.word	0x40007c00
 800c06c:	08010c78 	.word	0x08010c78

0800c070 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a40      	ldr	r2, [pc, #256]	; (800c180 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d027      	beq.n	800c0d4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a3e      	ldr	r2, [pc, #248]	; (800c184 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d022      	beq.n	800c0d4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a3d      	ldr	r2, [pc, #244]	; (800c188 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d01d      	beq.n	800c0d4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a3b      	ldr	r2, [pc, #236]	; (800c18c <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d018      	beq.n	800c0d4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a3a      	ldr	r2, [pc, #232]	; (800c190 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d013      	beq.n	800c0d4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a38      	ldr	r2, [pc, #224]	; (800c194 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d00e      	beq.n	800c0d4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a37      	ldr	r2, [pc, #220]	; (800c198 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d009      	beq.n	800c0d4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a35      	ldr	r2, [pc, #212]	; (800c19c <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d004      	beq.n	800c0d4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800c0ca:	f44f 711c 	mov.w	r1, #624	; 0x270
 800c0ce:	4834      	ldr	r0, [pc, #208]	; (800c1a0 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800c0d0:	f7f5 f82a 	bl	8001128 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d018      	beq.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0e0:	d014      	beq.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0e8:	d010      	beq.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800c0f0:	d00c      	beq.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0f8:	d008      	beq.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800c100:	d004      	beq.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800c102:	f240 2171 	movw	r1, #625	; 0x271
 800c106:	4826      	ldr	r0, [pc, #152]	; (800c1a0 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800c108:	f7f5 f80e 	bl	8001128 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c112:	2b01      	cmp	r3, #1
 800c114:	d101      	bne.n	800c11a <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800c116:	2302      	movs	r3, #2
 800c118:	e02d      	b.n	800c176 <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2224      	movs	r2, #36	; 0x24
 800c126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f022 0201 	bic.w	r2, r2, #1
 800c140:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	430a      	orrs	r2, r1
 800c154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f824 	bl	800c1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2220      	movs	r2, #32
 800c168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	40011000 	.word	0x40011000
 800c184:	40004400 	.word	0x40004400
 800c188:	40004800 	.word	0x40004800
 800c18c:	40004c00 	.word	0x40004c00
 800c190:	40005000 	.word	0x40005000
 800c194:	40011400 	.word	0x40011400
 800c198:	40007800 	.word	0x40007800
 800c19c:	40007c00 	.word	0x40007c00
 800c1a0:	08010c78 	.word	0x08010c78

0800c1a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b089      	sub	sp, #36	; 0x24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c1ac:	4a2f      	ldr	r2, [pc, #188]	; (800c26c <UARTEx_SetNbDataToProcess+0xc8>)
 800c1ae:	f107 0314 	add.w	r3, r7, #20
 800c1b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1b6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c1ba:	4a2d      	ldr	r2, [pc, #180]	; (800c270 <UARTEx_SetNbDataToProcess+0xcc>)
 800c1bc:	f107 030c 	add.w	r3, r7, #12
 800c1c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1c4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d108      	bne.n	800c1e2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c1e0:	e03d      	b.n	800c25e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c1e2:	2308      	movs	r3, #8
 800c1e4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c1e6:	2308      	movs	r3, #8
 800c1e8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	0e5b      	lsrs	r3, r3, #25
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 0307 	and.w	r3, r3, #7
 800c1f8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	0f5b      	lsrs	r3, r3, #29
 800c202:	b2db      	uxtb	r3, r3
 800c204:	f003 0307 	and.w	r3, r3, #7
 800c208:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c20a:	7fbb      	ldrb	r3, [r7, #30]
 800c20c:	7f3a      	ldrb	r2, [r7, #28]
 800c20e:	f107 0120 	add.w	r1, r7, #32
 800c212:	440a      	add	r2, r1
 800c214:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c218:	fb02 f303 	mul.w	r3, r2, r3
 800c21c:	7f3a      	ldrb	r2, [r7, #28]
 800c21e:	f107 0120 	add.w	r1, r7, #32
 800c222:	440a      	add	r2, r1
 800c224:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c228:	fb93 f3f2 	sdiv	r3, r3, r2
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c234:	7ffb      	ldrb	r3, [r7, #31]
 800c236:	7f7a      	ldrb	r2, [r7, #29]
 800c238:	f107 0120 	add.w	r1, r7, #32
 800c23c:	440a      	add	r2, r1
 800c23e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c242:	fb02 f303 	mul.w	r3, r2, r3
 800c246:	7f7a      	ldrb	r2, [r7, #29]
 800c248:	f107 0120 	add.w	r1, r7, #32
 800c24c:	440a      	add	r2, r1
 800c24e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c252:	fb93 f3f2 	sdiv	r3, r3, r2
 800c256:	b29a      	uxth	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c25e:	bf00      	nop
 800c260:	3724      	adds	r7, #36	; 0x24
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	08010cb4 	.word	0x08010cb4
 800c270:	08010cbc 	.word	0x08010cbc

0800c274 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 800c27a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c27e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800c280:	2301      	movs	r3, #1
 800c282:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 800c284:	2300      	movs	r3, #0
 800c286:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c288:	2300      	movs	r3, #0
 800c28a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_PORT_RESET, &GPIO_InitStruct);
 800c290:	1d3b      	adds	r3, r7, #4
 800c292:	4619      	mov	r1, r3
 800c294:	480c      	ldr	r0, [pc, #48]	; (800c2c8 <init_chip_pins+0x54>)
 800c296:	f7f7 fe09 	bl	8003eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 800c29a:	2320      	movs	r3, #32
 800c29c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(CONF_WINC_PORT_CHIP_ENABLE, &GPIO_InitStruct);
 800c29e:	1d3b      	adds	r3, r7, #4
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	480a      	ldr	r0, [pc, #40]	; (800c2cc <init_chip_pins+0x58>)
 800c2a4:	f7f7 fe02 	bl	8003eac <HAL_GPIO_Init>

    
    /* Set INIT value */
// SO: seems irrelevant for my implementation   HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
// SO: seems irrelevant for my implementation   HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
    HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2120      	movs	r1, #32
 800c2ac:	4807      	ldr	r0, [pc, #28]	; (800c2cc <init_chip_pins+0x58>)
 800c2ae:	f7f8 f8d5 	bl	800445c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c2b8:	4803      	ldr	r0, [pc, #12]	; (800c2c8 <init_chip_pins+0x54>)
 800c2ba:	f7f8 f8cf 	bl	800445c <HAL_GPIO_WritePin>

}
 800c2be:	bf00      	nop
 800c2c0:	3718      	adds	r7, #24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	58020c00 	.word	0x58020c00
 800c2cc:	58020000 	.word	0x58020000

0800c2d0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 800c2d4:	f7ff ffce 	bl	800c274 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800c2d8:	f000 f804 	bl	800c2e4 <nm_bsp_reset>

	return M2M_SUCCESS;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	bd80      	pop	{r7, pc}
	...

0800c2e4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
//    HAL_Delay(100);

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
	HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	2120      	movs	r1, #32
 800c2ec:	4808      	ldr	r0, [pc, #32]	; (800c310 <nm_bsp_reset+0x2c>)
 800c2ee:	f7f8 f8b5 	bl	800445c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c2f2:	2064      	movs	r0, #100	; 0x64
 800c2f4:	f7f5 fb64 	bl	80019c0 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c2fe:	4805      	ldr	r0, [pc, #20]	; (800c314 <nm_bsp_reset+0x30>)
 800c300:	f7f8 f8ac 	bl	800445c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c304:	2064      	movs	r0, #100	; 0x64
 800c306:	f7f5 fb5b 	bl	80019c0 <HAL_Delay>

}
 800c30a:	bf00      	nop
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	58020000 	.word	0x58020000
 800c314:	58020c00 	.word	0x58020c00

0800c318 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7f5 fb4d 	bl	80019c0 <HAL_Delay>
}
 800c326:	bf00      	nop
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

//     __GPIOC_CLK_ENABLE(); // --
    __GPIOD_CLK_ENABLE(); // ++
 800c338:	4b13      	ldr	r3, [pc, #76]	; (800c388 <nm_bsp_register_isr+0x58>)
 800c33a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c33e:	4a12      	ldr	r2, [pc, #72]	; (800c388 <nm_bsp_register_isr+0x58>)
 800c340:	f043 0308 	orr.w	r3, r3, #8
 800c344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c348:	4b0f      	ldr	r3, [pc, #60]	; (800c388 <nm_bsp_register_isr+0x58>)
 800c34a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c34e:	f003 0308 	and.w	r3, r3, #8
 800c352:	60bb      	str	r3, [r7, #8]
 800c354:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 800c356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c35a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800c35c:	4b0b      	ldr	r3, [pc, #44]	; (800c38c <nm_bsp_register_isr+0x5c>)
 800c35e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800c360:	2300      	movs	r3, #0
 800c362:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_SPI_INT_PORT, &GPIO_InitStruct);
 800c364:	f107 030c 	add.w	r3, r7, #12
 800c368:	4619      	mov	r1, r3
 800c36a:	4809      	ldr	r0, [pc, #36]	; (800c390 <nm_bsp_register_isr+0x60>)
 800c36c:	f7f7 fd9e 	bl	8003eac <HAL_GPIO_Init>

    /* EXTI 12 (PD12) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 800c370:	2200      	movs	r2, #0
 800c372:	2100      	movs	r1, #0
 800c374:	2028      	movs	r0, #40	; 0x28
 800c376:	f7f5 fc63 	bl	8001c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 800c37a:	2028      	movs	r0, #40	; 0x28
 800c37c:	f7f5 fc8a 	bl	8001c94 <HAL_NVIC_EnableIRQ>
//	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
//	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
//	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
//#endif

}
 800c380:	bf00      	nop
 800c382:	3720      	adds	r7, #32
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	58024400 	.word	0x58024400
 800c38c:	11210000 	.word	0x11210000
 800c390:	58020c00 	.word	0x58020c00

0800c394 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d108      	bne.n	800c3b6 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0); // TODO: see why here it's 0x01 while in the beginning it was 0x00
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	2028      	movs	r0, #40	; 0x28
 800c3aa:	f7f5 fc49 	bl	8001c40 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800c3ae:	2028      	movs	r0, #40	; 0x28
 800c3b0:	f7f5 fc70 	bl	8001c94 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 800c3b4:	e002      	b.n	800c3bc <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800c3b6:	2028      	movs	r0, #40	; 0x28
 800c3b8:	f7f5 fc84 	bl	8001cc4 <HAL_NVIC_DisableIRQ>
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	71fb      	strb	r3, [r7, #7]
    if (select)
 800c3ce:	79fb      	ldrb	r3, [r7, #7]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d006      	beq.n	800c3e2 <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c3da:	4807      	ldr	r0, [pc, #28]	; (800c3f8 <spi_select_slave+0x34>)
 800c3dc:	f7f8 f83e 	bl	800445c <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 800c3e0:	e005      	b.n	800c3ee <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c3e8:	4803      	ldr	r0, [pc, #12]	; (800c3f8 <spi_select_slave+0x34>)
 800c3ea:	f7f8 f837 	bl	800445c <HAL_GPIO_WritePin>
}
 800c3ee:	bf00      	nop
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	58020400 	.word	0x58020400

0800c3fc <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b088      	sub	sp, #32
 800c400:	af02      	add	r7, sp, #8
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	4613      	mov	r3, r2
 800c408:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
   if(u16Sz > NM_BUS_DUMMY_BUFF_SIZE)
 800c40a:	88fb      	ldrh	r3, [r7, #6]
 800c40c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c410:	d901      	bls.n	800c416 <spi_rw+0x1a>
   {
	   M2M_ERR("%s:size is too big. error (%d)\n",__FUNCTION__,status);
	   return HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	e03e      	b.n	800c494 <spi_rw+0x98>
   }

    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800c416:	2001      	movs	r0, #1
 800c418:	f7ff ffd4 	bl	800c3c4 <spi_select_slave>

    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10c      	bne.n	800c43c <spi_rw+0x40>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,SPI_TIMEOUT_MSEC);
 800c422:	88fa      	ldrh	r2, [r7, #6]
 800c424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	4613      	mov	r3, r2
 800c42c:	68ba      	ldr	r2, [r7, #8]
 800c42e:	491b      	ldr	r1, [pc, #108]	; (800c49c <spi_rw+0xa0>)
 800c430:	481b      	ldr	r0, [pc, #108]	; (800c4a0 <spi_rw+0xa4>)
 800c432:	f7fc fbbd 	bl	8008bb0 <HAL_SPI_TransmitReceive>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]
 800c43a:	e021      	b.n	800c480 <spi_rw+0x84>
    }
    else if(pu8Miso == NULL)
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d112      	bne.n	800c468 <spi_rw+0x6c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,SPI_TIMEOUT_MSEC);
 800c442:	88fa      	ldrh	r2, [r7, #6]
 800c444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	4613      	mov	r3, r2
 800c44c:	4a13      	ldr	r2, [pc, #76]	; (800c49c <spi_rw+0xa0>)
 800c44e:	68f9      	ldr	r1, [r7, #12]
 800c450:	4813      	ldr	r0, [pc, #76]	; (800c4a0 <spi_rw+0xa4>)
 800c452:	f7fc fbad 	bl	8008bb0 <HAL_SPI_TransmitReceive>
 800c456:	4603      	mov	r3, r0
 800c458:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	461a      	mov	r2, r3
 800c45e:	2100      	movs	r1, #0
 800c460:	480e      	ldr	r0, [pc, #56]	; (800c49c <spi_rw+0xa0>)
 800c462:	f003 faef 	bl	800fa44 <memset>
 800c466:	e00b      	b.n	800c480 <spi_rw+0x84>
    }
    else
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,SPI_TIMEOUT_MSEC);
 800c468:	88fa      	ldrh	r2, [r7, #6]
 800c46a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	4613      	mov	r3, r2
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	68f9      	ldr	r1, [r7, #12]
 800c476:	480a      	ldr	r0, [pc, #40]	; (800c4a0 <spi_rw+0xa4>)
 800c478:	f7fc fb9a 	bl	8008bb0 <HAL_SPI_TransmitReceive>
 800c47c:	4603      	mov	r3, r0
 800c47e:	75fb      	strb	r3, [r7, #23]
    }

    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 800c480:	7dfb      	ldrb	r3, [r7, #23]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <spi_rw+0x90>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
        return status;
 800c486:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c48a:	e003      	b.n	800c494 <spi_rw+0x98>
    }

  	spi_select_slave(false);
 800c48c:	2000      	movs	r0, #0
 800c48e:	f7ff ff99 	bl	800c3c4 <spi_select_slave>

	return M2M_SUCCESS;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3718      	adds	r7, #24
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	240008a8 	.word	0x240008a8
 800c4a0:	24000c84 	.word	0x24000c84

0800c4a4 <nm_bus_wifi_spi_init>:
#endif
#endif //CONF_WINC_USE_SPI

void nm_bus_wifi_spi_init(SPI_HandleTypeDef *hspi)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b088      	sub	sp, #32
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* Peripheral clock enable */
    SPI_WIFI_CLK_ENABLE(); // __HAL_RCC_SPI2_CLK_ENABLE()
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <nm_bus_wifi_spi_init+0x80>)
 800c4ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4b2:	4a1c      	ldr	r2, [pc, #112]	; (800c524 <nm_bus_wifi_spi_init+0x80>)
 800c4b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c4bc:	4b19      	ldr	r3, [pc, #100]	; (800c524 <nm_bus_wifi_spi_init+0x80>)
 800c4be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4c6:	60bb      	str	r3, [r7, #8]
 800c4c8:	68bb      	ldr	r3, [r7, #8]

    /* Configure GPIO pin : PA4 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = SPI_WIFI_CS_PIN;
 800c4ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = 0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_CS_GPIO_PORT, &GPIO_InitStruct);
 800c4e0:	f107 030c 	add.w	r3, r7, #12
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	4810      	ldr	r0, [pc, #64]	; (800c528 <nm_bus_wifi_spi_init+0x84>)
 800c4e8:	f7f7 fce0 	bl	8003eac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c4f2:	480d      	ldr	r0, [pc, #52]	; (800c528 <nm_bus_wifi_spi_init+0x84>)
 800c4f4:	f7f7 ffb2 	bl	800445c <HAL_GPIO_WritePin>
    /**SPIx GPIO Configuration
    PB13     ------> SPI_WIFI_SCK
    PB14     ------> SPI_WIFI_MISO
    PB15     ------> SPI_WIFI_MOSI
    */
    GPIO_InitStruct.Pin = SPI_WIFI_SCK_PIN|SPI_WIFI_MISO_PIN|SPI_WIFI_MOSI_PIN;
 800c4f8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800c4fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4fe:	2302      	movs	r3, #2
 800c500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c502:	2302      	movs	r3, #2
 800c504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c506:	2303      	movs	r3, #3
 800c508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = SPI2_WIFI_AF;
 800c50a:	2305      	movs	r3, #5
 800c50c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800c50e:	f107 030c 	add.w	r3, r7, #12
 800c512:	4619      	mov	r1, r3
 800c514:	4804      	ldr	r0, [pc, #16]	; (800c528 <nm_bus_wifi_spi_init+0x84>)
 800c516:	f7f7 fcc9 	bl	8003eac <HAL_GPIO_Init>

}
 800c51a:	bf00      	nop
 800c51c:	3720      	adds	r7, #32
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	58024400 	.word	0x58024400
 800c528:	58020400 	.word	0x58020400

0800c52c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 800c534:	2300      	movs	r3, #0
 800c536:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 800c538:	4b20      	ldr	r3, [pc, #128]	; (800c5bc <nm_bus_init+0x90>)
 800c53a:	4a21      	ldr	r2, [pc, #132]	; (800c5c0 <nm_bus_init+0x94>)
 800c53c:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800c53e:	4b1f      	ldr	r3, [pc, #124]	; (800c5bc <nm_bus_init+0x90>)
 800c540:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800c544:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 800c546:	4b1d      	ldr	r3, [pc, #116]	; (800c5bc <nm_bus_init+0x90>)
 800c548:	2200      	movs	r2, #0
 800c54a:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 800c54c:	4b1b      	ldr	r3, [pc, #108]	; (800c5bc <nm_bus_init+0x90>)
 800c54e:	2207      	movs	r2, #7
 800c550:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 800c552:	4b1a      	ldr	r3, [pc, #104]	; (800c5bc <nm_bus_init+0x90>)
 800c554:	2200      	movs	r2, #0
 800c556:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 800c558:	4b18      	ldr	r3, [pc, #96]	; (800c5bc <nm_bus_init+0x90>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 800c55e:	4b17      	ldr	r3, [pc, #92]	; (800c5bc <nm_bus_init+0x90>)
 800c560:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c564:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c566:	4b15      	ldr	r3, [pc, #84]	; (800c5bc <nm_bus_init+0x90>)
 800c568:	2200      	movs	r2, #0
 800c56a:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 800c56c:	4b13      	ldr	r3, [pc, #76]	; (800c5bc <nm_bus_init+0x90>)
 800c56e:	2200      	movs	r2, #0
 800c570:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 800c572:	4b12      	ldr	r3, [pc, #72]	; (800c5bc <nm_bus_init+0x90>)
 800c574:	2200      	movs	r2, #0
 800c576:	625a      	str	r2, [r3, #36]	; 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800c578:	4b10      	ldr	r3, [pc, #64]	; (800c5bc <nm_bus_init+0x90>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	629a      	str	r2, [r3, #40]	; 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 800c57e:	4b0f      	ldr	r3, [pc, #60]	; (800c5bc <nm_bus_init+0x90>)
 800c580:	220a      	movs	r2, #10
 800c582:	62da      	str	r2, [r3, #44]	; 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 800c584:	480d      	ldr	r0, [pc, #52]	; (800c5bc <nm_bus_init+0x90>)
 800c586:	f7fc f875 	bl	8008674 <HAL_SPI_Init>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
	}

	//SO: remove SPI lines internal pull-ups
	m2m_periph_pullup_ctrl(M2M_PERIPH_PULLUP_DIS_SD_DAT2_SPI_RXD, 0);
 800c58a:	2100      	movs	r1, #0
 800c58c:	2080      	movs	r0, #128	; 0x80
 800c58e:	f000 fddb 	bl	800d148 <m2m_periph_pullup_ctrl>
	m2m_periph_pullup_ctrl(M2M_PERIPH_PULLUP_DIS_SD_DAT1_SPI_SSN, 0);
 800c592:	2100      	movs	r1, #0
 800c594:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c598:	f000 fdd6 	bl	800d148 <m2m_periph_pullup_ctrl>
	m2m_periph_pullup_ctrl(M2M_PERIPH_PULLUP_DIS_SD_CMD_SPI_SCK, 0);
 800c59c:	2100      	movs	r1, #0
 800c59e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c5a2:	f000 fdd1 	bl	800d148 <m2m_periph_pullup_ctrl>
	m2m_periph_pullup_ctrl(M2M_PERIPH_PULLUP_DIS_SD_DAT0_SPI_TXD, 0);
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c5ac:	f000 fdcc 	bl	800d148 <m2m_periph_pullup_ctrl>

	return result;
 800c5b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	24000c84 	.word	0x24000c84
 800c5c0:	40003800 	.word	0x40003800

0800c5c4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
 800c5d4:	79fb      	ldrb	r3, [r7, #7]
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d10d      	bne.n	800c5f6 <nm_bus_ioctl+0x32>
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	6818      	ldr	r0, [r3, #0]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	6859      	ldr	r1, [r3, #4]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	891b      	ldrh	r3, [r3, #8]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f7ff ff06 	bl	800c3fc <spi_rw>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c5f4:	e002      	b.n	800c5fc <nm_bus_ioctl+0x38>
		default:
			s8Ret = -1;
 800c5f6:	23ff      	movs	r3, #255	; 0xff
 800c5f8:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("invalide ioclt cmd\n");
			break;
 800c5fa:	bf00      	nop
	}

	return s8Ret;
 800c5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 800c608:	b480      	push	{r7}
 800c60a:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d010      	beq.n	800c64c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	781a      	ldrb	r2, [r3, #0]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	701a      	strb	r2, [r3, #0]
		pDst++;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3301      	adds	r3, #1
 800c636:	60fb      	str	r3, [r7, #12]
		pSrc++;
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	3301      	adds	r3, #1
 800c63c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	3b01      	subs	r3, #1
 800c642:	607b      	str	r3, [r7, #4]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1ef      	bne.n	800c62a <m2m_memcpy+0x12>
 800c64a:	e000      	b.n	800c64e <m2m_memcpy+0x36>
	if(sz == 0) return;
 800c64c:	bf00      	nop
}
 800c64e:	3714      	adds	r7, #20
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	460b      	mov	r3, r1
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00c      	beq.n	800c686 <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	7afa      	ldrb	r2, [r7, #11]
 800c670:	701a      	strb	r2, [r3, #0]
		pBuf++;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3301      	adds	r3, #1
 800c676:	60fb      	str	r3, [r7, #12]
	}while(--sz);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	607b      	str	r3, [r7, #4]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1f3      	bne.n	800c66c <m2m_memset+0x14>
 800c684:	e000      	b.n	800c688 <m2m_memset+0x30>
	if(sz == 0) return;
 800c686:	bf00      	nop
}
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
 800c69e:	e005      	b.n	800c6ac <m2m_strlen+0x1a>
	{
		u16StrLen ++;
 800c6a0:	89fb      	ldrh	r3, [r7, #14]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	81fb      	strh	r3, [r7, #14]
		pcStr++;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	607b      	str	r3, [r7, #4]
	while(*pcStr)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1f5      	bne.n	800c6a0 <m2m_strlen+0xe>
	}
	return u16StrLen;
 800c6b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
	...

0800c6c4 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

void isr(void)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 800c6c8:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <isr+0x1c>)
 800c6ca:	78db      	ldrb	r3, [r3, #3]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	4b03      	ldr	r3, [pc, #12]	; (800c6e0 <isr+0x1c>)
 800c6d4:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 800c6d6:	bf00      	nop
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	24000d0c 	.word	0x24000d0c

0800c6e4 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 800c6ee:	4b14      	ldr	r3, [pc, #80]	; (800c740 <hif_set_rx_done+0x5c>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 800c6f4:	2001      	movs	r0, #1
 800c6f6:	f7ff fe4d 	bl	800c394 <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800c6fa:	463b      	mov	r3, r7
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	f241 0070 	movw	r0, #4208	; 0x1070
 800c702:	f001 fb5b 	bl	800ddbc <nm_read_reg_with_ret>
 800c706:	4603      	mov	r3, r0
 800c708:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800c70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10f      	bne.n	800c732 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	f043 0302 	orr.w	r3, r3, #2
 800c718:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	4619      	mov	r1, r3
 800c71e:	f241 0070 	movw	r0, #4208	; 0x1070
 800c722:	f001 fb59 	bl	800ddd8 <nm_write_reg>
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800c72a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c72e:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 800c730:	e000      	b.n	800c734 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 800c732:	bf00      	nop
	return ret;
 800c734:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 800c738:	4618      	mov	r0, r3
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	24000d0c 	.word	0x24000d0c

0800c744 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	603a      	str	r2, [r7, #0]
 800c74e:	71fb      	strb	r3, [r7, #7]
 800c750:	460b      	mov	r3, r1
 800c752:	80bb      	strh	r3, [r7, #4]


}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c766:	2300      	movs	r3, #0
 800c768:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800c76a:	4b14      	ldr	r3, [pc, #80]	; (800c7bc <hif_chip_wake+0x5c>)
 800c76c:	789b      	ldrb	r3, [r3, #2]
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 800c774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c778:	e01c      	b.n	800c7b4 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800c77a:	4b10      	ldr	r3, [pc, #64]	; (800c7bc <hif_chip_wake+0x5c>)
 800c77c:	785b      	ldrb	r3, [r3, #1]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10c      	bne.n	800c79e <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800c784:	4b0d      	ldr	r3, [pc, #52]	; (800c7bc <hif_chip_wake+0x5c>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d007      	beq.n	800c79e <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 800c78e:	f001 f927 	bl	800d9e0 <chip_wake>
 800c792:	4603      	mov	r3, r0
 800c794:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d107      	bne.n	800c7ae <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 800c79e:	4b07      	ldr	r3, [pc, #28]	; (800c7bc <hif_chip_wake+0x5c>)
 800c7a0:	785b      	ldrb	r3, [r3, #1]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	4b04      	ldr	r3, [pc, #16]	; (800c7bc <hif_chip_wake+0x5c>)
 800c7aa:	705a      	strb	r2, [r3, #1]
 800c7ac:	e000      	b.n	800c7b0 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 800c7ae:	bf00      	nop
ERR1:
	return ret;
 800c7b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	24000d0c 	.word	0x24000d0c

0800c7c0 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 800c7c4:	4b08      	ldr	r3, [pc, #32]	; (800c7e8 <hif_chip_sleep_sc+0x28>)
 800c7c6:	785b      	ldrb	r3, [r3, #1]
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d006      	beq.n	800c7dc <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 800c7ce:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <hif_chip_sleep_sc+0x28>)
 800c7d0:	785b      	ldrb	r3, [r3, #1]
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	4b03      	ldr	r3, [pc, #12]	; (800c7e8 <hif_chip_sleep_sc+0x28>)
 800c7da:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	24000d0c 	.word	0x24000d0c

0800c7ec <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 800c7f6:	4b12      	ldr	r3, [pc, #72]	; (800c840 <hif_chip_sleep+0x54>)
 800c7f8:	785b      	ldrb	r3, [r3, #1]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d006      	beq.n	800c80e <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 800c800:	4b0f      	ldr	r3, [pc, #60]	; (800c840 <hif_chip_sleep+0x54>)
 800c802:	785b      	ldrb	r3, [r3, #1]
 800c804:	b2db      	uxtb	r3, r3
 800c806:	3b01      	subs	r3, #1
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	4b0d      	ldr	r3, [pc, #52]	; (800c840 <hif_chip_sleep+0x54>)
 800c80c:	705a      	strb	r2, [r3, #1]
	}

	if(gstrHifCxt.u8ChipSleep == 0)
 800c80e:	4b0c      	ldr	r3, [pc, #48]	; (800c840 <hif_chip_sleep+0x54>)
 800c810:	785b      	ldrb	r3, [r3, #1]
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b00      	cmp	r3, #0
 800c816:	d10c      	bne.n	800c832 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800c818:	4b09      	ldr	r3, [pc, #36]	; (800c840 <hif_chip_sleep+0x54>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d007      	beq.n	800c832 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 800c822:	f001 f879 	bl	800d918 <chip_sleep>
 800c826:	4603      	mov	r3, r0
 800c828:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	e000      	b.n	800c834 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 800c832:	bf00      	nop
	return ret;
 800c834:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	24000d0c 	.word	0x24000d0c

0800c844 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 800c84c:	2228      	movs	r2, #40	; 0x28
 800c84e:	2100      	movs	r1, #0
 800c850:	4807      	ldr	r0, [pc, #28]	; (800c870 <hif_init+0x2c>)
 800c852:	f7ff ff01 	bl	800c658 <m2m_memset>
	nm_bsp_register_isr(isr);
 800c856:	4807      	ldr	r0, [pc, #28]	; (800c874 <hif_init+0x30>)
 800c858:	f7ff fd6a 	bl	800c330 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 800c85c:	4906      	ldr	r1, [pc, #24]	; (800c878 <hif_init+0x34>)
 800c85e:	2003      	movs	r0, #3
 800c860:	f000 fc18 	bl	800d094 <hif_register_cb>
	return M2M_SUCCESS;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	24000d0c 	.word	0x24000d0c
 800c874:	0800c6c5 	.word	0x0800c6c5
 800c878:	0800c745 	.word	0x0800c745

0800c87c <hif_send>:
				Packet buffer size (including the HIF header).
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b088      	sub	sp, #32
 800c880:	af00      	add	r7, sp, #0
 800c882:	603a      	str	r2, [r7, #0]
 800c884:	461a      	mov	r2, r3
 800c886:	4603      	mov	r3, r0
 800c888:	71fb      	strb	r3, [r7, #7]
 800c88a:	460b      	mov	r3, r1
 800c88c:	71bb      	strb	r3, [r7, #6]
 800c88e:	4613      	mov	r3, r2
 800c890:	80bb      	strh	r3, [r7, #4]
    /* temp is 16 bit variable used to read a volatile memory location to
       pass to function/macro, which is not using volatile variable.
       it is done due to IAR warning.
    */
    uint16  temp;
	sint8	ret = M2M_ERR_SEND;
 800c892:	23ff      	movs	r3, #255	; 0xff
 800c894:	77fb      	strb	r3, [r7, #31]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 800c896:	79bb      	ldrb	r3, [r7, #6]
 800c898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 800c8a0:	79fb      	ldrb	r3, [r7, #7]
 800c8a2:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 800c8a4:	2308      	movs	r3, #8
 800c8a6:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d009      	beq.n	800c8c2 <hif_send+0x46>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 800c8ae:	8b7b      	ldrh	r3, [r7, #26]
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800c8b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8b6:	440b      	add	r3, r1
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	4413      	add	r3, r2
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	837b      	strh	r3, [r7, #26]
 800c8c0:	e005      	b.n	800c8ce <hif_send+0x52>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 800c8c2:	8b7b      	ldrh	r3, [r7, #26]
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	88bb      	ldrh	r3, [r7, #4]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	837b      	strh	r3, [r7, #26]
	}

	ret = hif_chip_wake();   // neglectable 0msec
 800c8ce:	f7ff ff47 	bl	800c760 <hif_chip_wake>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 800c8d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f040 80e9 	bne.w	800cab2 <hif_send+0x236>
	{
		volatile uint32 reg, dma_addr = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	81fb      	strh	r3, [r7, #14]

//#define OPTIMIZE_BUS
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	617b      	str	r3, [r7, #20]
        temp = (uint16)strHif.u16Length;
 800c8ec:	8b7b      	ldrh	r3, [r7, #26]
 800c8ee:	83bb      	strh	r3, [r7, #28]
		reg |= (uint32)u8Gid;
 800c8f0:	79fa      	ldrb	r2, [r7, #7]
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 800c8f8:	79bb      	ldrb	r3, [r7, #6]
 800c8fa:	021a      	lsls	r2, r3, #8
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)temp<<16);
 800c902:	8bbb      	ldrh	r3, [r7, #28]
 800c904:	041a      	lsls	r2, r3, #16
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	4313      	orrs	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	4619      	mov	r1, r3
 800c910:	f241 008c 	movw	r0, #4236	; 0x108c
 800c914:	f001 fa60 	bl	800ddd8 <nm_write_reg>
 800c918:	4603      	mov	r3, r0
 800c91a:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800c91c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f040 80da 	bne.w	800cada <hif_send+0x25e>

		reg = 0UL;
 800c926:	2300      	movs	r3, #0
 800c928:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f043 0302 	orr.w	r3, r3, #2
 800c930:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	4619      	mov	r1, r3
 800c936:	f241 0078 	movw	r0, #4216	; 0x1078
 800c93a:	f001 fa4d 	bl	800ddd8 <nm_write_reg>
 800c93e:	4603      	mov	r3, r0
 800c940:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800c942:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c946:	2b00      	cmp	r3, #0
 800c948:	f040 80c9 	bne.w	800cade <hif_send+0x262>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	613b      	str	r3, [r7, #16]
		for(cnt = 0; cnt < 1000; cnt ++)
 800c950:	2300      	movs	r3, #0
 800c952:	81fb      	strh	r3, [r7, #14]
 800c954:	e03b      	b.n	800c9ce <hif_send+0x152>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 800c956:	f107 0314 	add.w	r3, r7, #20
 800c95a:	4619      	mov	r1, r3
 800c95c:	f241 0078 	movw	r0, #4216	; 0x1078
 800c960:	f001 fa2c 	bl	800ddbc <nm_read_reg_with_ret>
 800c964:	4603      	mov	r3, r0
 800c966:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 800c968:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d134      	bne.n	800c9da <hif_send+0x15e>
			/*
			 * If it takes too long to get a response, the slow down to
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 800c970:	89fb      	ldrh	r3, [r7, #14]
 800c972:	b29b      	uxth	r3, r3
 800c974:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c978:	d310      	bcc.n	800c99c <hif_send+0x120>
				if(cnt < 501) {
 800c97a:	89fb      	ldrh	r3, [r7, #14]
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c982:	d808      	bhi.n	800c996 <hif_send+0x11a>
					M2M_INFO("Slowing down...\n");
 800c984:	485d      	ldr	r0, [pc, #372]	; (800cafc <hif_send+0x280>)
 800c986:	f003 f865 	bl	800fa54 <iprintf>
 800c98a:	485d      	ldr	r0, [pc, #372]	; (800cb00 <hif_send+0x284>)
 800c98c:	f003 f8ea 	bl	800fb64 <puts>
 800c990:	200d      	movs	r0, #13
 800c992:	f003 f877 	bl	800fa84 <putchar>
				}
				nm_bsp_sleep(1);
 800c996:	2001      	movs	r0, #1
 800c998:	f7ff fcbe 	bl	800c318 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	f003 0302 	and.w	r3, r3, #2
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d10e      	bne.n	800c9c4 <hif_send+0x148>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 800c9a6:	f107 0310 	add.w	r3, r7, #16
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	4855      	ldr	r0, [pc, #340]	; (800cb04 <hif_send+0x288>)
 800c9ae:	f001 fa05 	bl	800ddbc <nm_read_reg_with_ret>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 800c9b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00f      	beq.n	800c9de <hif_send+0x162>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	613b      	str	r3, [r7, #16]
					goto ERR1;
 800c9c2:	e093      	b.n	800caec <hif_send+0x270>
		for(cnt = 0; cnt < 1000; cnt ++)
 800c9c4:	89fb      	ldrh	r3, [r7, #14]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	81fb      	strh	r3, [r7, #14]
 800c9ce:	89fb      	ldrh	r3, [r7, #14]
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9d6:	d3be      	bcc.n	800c956 <hif_send+0xda>
 800c9d8:	e002      	b.n	800c9e0 <hif_send+0x164>
			if(ret != M2M_SUCCESS) break;
 800c9da:	bf00      	nop
 800c9dc:	e000      	b.n	800c9e0 <hif_send+0x164>
				}
				/*in case of success break */
                break;
 800c9de:	bf00      	nop
			}
		}
// 395-432 ~ 9 msec
		if (dma_addr != 0)
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d055      	beq.n	800ca92 <hif_send+0x216>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 800c9ea:	8b7b      	ldrh	r3, [r7, #26]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	f107 0118 	add.w	r1, r7, #24
 800c9f6:	2208      	movs	r2, #8
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f001 fa69 	bl	800ded0 <nm_write_block>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800ca02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d16b      	bne.n	800cae2 <hif_send+0x266>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00f      	beq.n	800ca36 <hif_send+0x1ba>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	88ba      	ldrh	r2, [r7, #4]
 800ca1a:	6839      	ldr	r1, [r7, #0]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f001 fa57 	bl	800ded0 <nm_write_block>
 800ca22:	4603      	mov	r3, r0
 800ca24:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800ca26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d15b      	bne.n	800cae6 <hif_send+0x26a>
				u32CurrAddr += u16CtrlBufSize;
 800ca2e:	88ba      	ldrh	r2, [r7, #4]
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	4413      	add	r3, r2
 800ca34:	60bb      	str	r3, [r7, #8]
			}
			// 395-413 ~ 1 msec
			if(pu8DataBuf != NULL)
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d016      	beq.n	800ca6a <hif_send+0x1ee>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 800ca3c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ca3e:	88bb      	ldrh	r3, [r7, #4]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	461a      	mov	r2, r3
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	4413      	add	r3, r2
 800ca48:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ca4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca50:	4618      	mov	r0, r3
 800ca52:	f001 fa3d 	bl	800ded0 <nm_write_block>
 800ca56:	4603      	mov	r3, r0
 800ca58:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800ca5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d143      	bne.n	800caea <hif_send+0x26e>
				u32CurrAddr += u16DataSize;
 800ca62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	4413      	add	r3, r2
 800ca68:	60bb      	str	r3, [r7, #8]
			}
			reg = dma_addr << 2;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	f043 0302 	orr.w	r3, r3, #2
 800ca76:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg); // ~ approx. 1 msec
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	f241 006c 	movw	r0, #4204	; 0x106c
 800ca80:	f001 f9aa 	bl	800ddd8 <nm_write_reg>
 800ca84:	4603      	mov	r3, r0
 800ca86:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800ca88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d01d      	beq.n	800cacc <hif_send+0x250>
 800ca90:	e02c      	b.n	800caec <hif_send+0x270>
		}
		else
		{
			ret = hif_chip_sleep();
 800ca92:	f7ff feab 	bl	800c7ec <hif_chip_sleep>
 800ca96:	4603      	mov	r3, r0
 800ca98:	77fb      	strb	r3, [r7, #31]
			M2M_PRINT("Failed to alloc rx size %d\r\n",ret);
 800ca9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca9e:	4619      	mov	r1, r3
 800caa0:	4819      	ldr	r0, [pc, #100]	; (800cb08 <hif_send+0x28c>)
 800caa2:	f002 ffd7 	bl	800fa54 <iprintf>
 800caa6:	200d      	movs	r0, #13
 800caa8:	f002 ffec 	bl	800fa84 <putchar>
			ret = M2M_ERR_MEM_ALLOC;
 800caac:	23fd      	movs	r3, #253	; 0xfd
 800caae:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 800cab0:	e01e      	b.n	800caf0 <hif_send+0x274>
		}
	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
 800cab2:	f240 12a3 	movw	r2, #419	; 0x1a3
 800cab6:	4915      	ldr	r1, [pc, #84]	; (800cb0c <hif_send+0x290>)
 800cab8:	4815      	ldr	r0, [pc, #84]	; (800cb10 <hif_send+0x294>)
 800caba:	f002 ffcb 	bl	800fa54 <iprintf>
 800cabe:	4815      	ldr	r0, [pc, #84]	; (800cb14 <hif_send+0x298>)
 800cac0:	f003 f850 	bl	800fb64 <puts>
 800cac4:	200d      	movs	r0, #13
 800cac6:	f002 ffdd 	bl	800fa84 <putchar>
		goto ERR2;
 800caca:	e011      	b.n	800caf0 <hif_send+0x274>
	}

	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 800cacc:	f7ff fe8e 	bl	800c7ec <hif_chip_sleep>
 800cad0:	4603      	mov	r3, r0
 800cad2:	77fb      	strb	r3, [r7, #31]
	return ret;
 800cad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cad8:	e00c      	b.n	800caf4 <hif_send+0x278>
		if(M2M_SUCCESS != ret) goto ERR1;
 800cada:	bf00      	nop
 800cadc:	e006      	b.n	800caec <hif_send+0x270>
		if(M2M_SUCCESS != ret) goto ERR1;
 800cade:	bf00      	nop
 800cae0:	e004      	b.n	800caec <hif_send+0x270>
			if(M2M_SUCCESS != ret) goto ERR1;
 800cae2:	bf00      	nop
 800cae4:	e002      	b.n	800caec <hif_send+0x270>
				if(M2M_SUCCESS != ret) goto ERR1;
 800cae6:	bf00      	nop
 800cae8:	e000      	b.n	800caec <hif_send+0x270>
				if(M2M_SUCCESS != ret) goto ERR1;
 800caea:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 800caec:	f7ff fe68 	bl	800c7c0 <hif_chip_sleep_sc>
ERR2:
	/*logical error*/
	return ret;
 800caf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3720      	adds	r7, #32
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	08010cc4 	.word	0x08010cc4
 800cb00:	08010cd0 	.word	0x08010cd0
 800cb04:	00150400 	.word	0x00150400
 800cb08:	08010ce0 	.word	0x08010ce0
 800cb0c:	080112d0 	.word	0x080112d0
 800cb10:	08010d00 	.word	0x08010d00
 800cb14:	08010d14 	.word	0x08010d14

0800cb18 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af02      	add	r7, sp, #8
    uint16 temp;
	sint8 ret = M2M_SUCCESS;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	75fb      	strb	r3, [r7, #23]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 800cb22:	f107 030c 	add.w	r3, r7, #12
 800cb26:	4619      	mov	r1, r3
 800cb28:	f241 0070 	movw	r0, #4208	; 0x1070
 800cb2c:	f001 f946 	bl	800ddbc <nm_read_reg_with_ret>
 800cb30:	4603      	mov	r3, r0
 800cb32:	75fb      	strb	r3, [r7, #23]
	if(M2M_SUCCESS == ret)
 800cb34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f040 81b8 	bne.w	800ceae <hif_isr+0x396>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f000 81a1 	beq.w	800ce8c <hif_isr+0x374>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	f7ff fc22 	bl	800c394 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f023 0301 	bic.w	r3, r3, #1
 800cb56:	60fb      	str	r3, [r7, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	f241 0070 	movw	r0, #4208	; 0x1070
 800cb60:	f001 f93a 	bl	800ddd8 <nm_write_reg>
 800cb64:	4603      	mov	r3, r0
 800cb66:	75fb      	strb	r3, [r7, #23]
			if(ret != M2M_SUCCESS)goto ERR1;
 800cb68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f040 81ab 	bne.w	800cec8 <hif_isr+0x3b0>
			gstrHifCxt.u8HifRXDone = 1;
 800cb72:	4ba3      	ldr	r3, [pc, #652]	; (800ce00 <hif_isr+0x2e8>)
 800cb74:	2201      	movs	r2, #1
 800cb76:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	089b      	lsrs	r3, r3, #2
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb82:	82bb      	strh	r3, [r7, #20]
			if (size > 0) {
 800cb84:	8abb      	ldrh	r3, [r7, #20]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 8171 	beq.w	800ce6e <hif_isr+0x356>
				uint32 address = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	607b      	str	r3, [r7, #4]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 800cb90:	1d3b      	adds	r3, r7, #4
 800cb92:	4619      	mov	r1, r3
 800cb94:	f241 0084 	movw	r0, #4228	; 0x1084
 800cb98:	f001 f910 	bl	800ddbc <nm_read_reg_with_ret>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	75fb      	strb	r3, [r7, #23]
				if(M2M_SUCCESS != ret)
 800cba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00f      	beq.n	800cbc8 <hif_isr+0xb0>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
 800cba8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800cbac:	4995      	ldr	r1, [pc, #596]	; (800ce04 <hif_isr+0x2ec>)
 800cbae:	4896      	ldr	r0, [pc, #600]	; (800ce08 <hif_isr+0x2f0>)
 800cbb0:	f002 ff50 	bl	800fa54 <iprintf>
 800cbb4:	4895      	ldr	r0, [pc, #596]	; (800ce0c <hif_isr+0x2f4>)
 800cbb6:	f002 ffd5 	bl	800fb64 <puts>
 800cbba:	200d      	movs	r0, #13
 800cbbc:	f002 ff62 	bl	800fa84 <putchar>
					nm_bsp_interrupt_ctrl(1);
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f7ff fbe7 	bl	800c394 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800cbc6:	e180      	b.n	800ceca <hif_isr+0x3b2>
				}
				gstrHifCxt.u32RxAddr = address;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a8d      	ldr	r2, [pc, #564]	; (800ce00 <hif_isr+0x2e8>)
 800cbcc:	6053      	str	r3, [r2, #4]
				gstrHifCxt.u32RxSize = size;
 800cbce:	8abb      	ldrh	r3, [r7, #20]
 800cbd0:	4a8b      	ldr	r2, [pc, #556]	; (800ce00 <hif_isr+0x2e8>)
 800cbd2:	6093      	str	r3, [r2, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f107 0108 	add.w	r1, r7, #8
 800cbda:	2204      	movs	r2, #4
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f001 f91b 	bl	800de18 <nm_read_block>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	75fb      	strb	r3, [r7, #23]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 800cbe6:	897b      	ldrh	r3, [r7, #10]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	817b      	strh	r3, [r7, #10]
				if(M2M_SUCCESS != ret)
 800cbec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00f      	beq.n	800cc14 <hif_isr+0xfc>
				{
					M2M_ERR("(hif) address bus fail\n");
 800cbf4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cbf8:	4982      	ldr	r1, [pc, #520]	; (800ce04 <hif_isr+0x2ec>)
 800cbfa:	4883      	ldr	r0, [pc, #524]	; (800ce08 <hif_isr+0x2f0>)
 800cbfc:	f002 ff2a 	bl	800fa54 <iprintf>
 800cc00:	4883      	ldr	r0, [pc, #524]	; (800ce10 <hif_isr+0x2f8>)
 800cc02:	f002 ffaf 	bl	800fb64 <puts>
 800cc06:	200d      	movs	r0, #13
 800cc08:	f002 ff3c 	bl	800fa84 <putchar>
					nm_bsp_interrupt_ctrl(1);
 800cc0c:	2001      	movs	r0, #1
 800cc0e:	f7ff fbc1 	bl	800c394 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800cc12:	e15a      	b.n	800ceca <hif_isr+0x3b2>
				}
				if(strHif.u16Length != size)
 800cc14:	897b      	ldrh	r3, [r7, #10]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	8aba      	ldrh	r2, [r7, #20]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d022      	beq.n	800cc64 <hif_isr+0x14c>
				{
					if((size - strHif.u16Length) > 4)
 800cc1e:	8abb      	ldrh	r3, [r7, #20]
 800cc20:	897a      	ldrh	r2, [r7, #10]
 800cc22:	b292      	uxth	r2, r2
 800cc24:	1a9b      	subs	r3, r3, r2
 800cc26:	2b04      	cmp	r3, #4
 800cc28:	dd1c      	ble.n	800cc64 <hif_isr+0x14c>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
 800cc2a:	f240 12e9 	movw	r2, #489	; 0x1e9
 800cc2e:	4975      	ldr	r1, [pc, #468]	; (800ce04 <hif_isr+0x2ec>)
 800cc30:	4875      	ldr	r0, [pc, #468]	; (800ce08 <hif_isr+0x2f0>)
 800cc32:	f002 ff0f 	bl	800fa54 <iprintf>
 800cc36:	8ab9      	ldrh	r1, [r7, #20]
 800cc38:	897b      	ldrh	r3, [r7, #10]
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	7a3b      	ldrb	r3, [r7, #8]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	4618      	mov	r0, r3
 800cc44:	7a7b      	ldrb	r3, [r7, #9]
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	4871      	ldr	r0, [pc, #452]	; (800ce14 <hif_isr+0x2fc>)
 800cc4e:	f002 ff01 	bl	800fa54 <iprintf>
 800cc52:	200d      	movs	r0, #13
 800cc54:	f002 ff16 	bl	800fa84 <putchar>
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
 800cc58:	2001      	movs	r0, #1
 800cc5a:	f7ff fb9b 	bl	800c394 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
 800cc5e:	23fa      	movs	r3, #250	; 0xfa
 800cc60:	75fb      	strb	r3, [r7, #23]
						goto ERR1;
 800cc62:	e132      	b.n	800ceca <hif_isr+0x3b2>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 800cc64:	7a3b      	ldrb	r3, [r7, #8]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d11d      	bne.n	800cca8 <hif_isr+0x190>
				{
					if(gstrHifCxt.pfWifiCb)
 800cc6c:	4b64      	ldr	r3, [pc, #400]	; (800ce00 <hif_isr+0x2e8>)
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00c      	beq.n	800cc8e <hif_isr+0x176>
                    {
                        temp = (uint16)strHif.u16Length;
 800cc74:	897b      	ldrh	r3, [r7, #10]
 800cc76:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800cc78:	4b61      	ldr	r3, [pc, #388]	; (800ce00 <hif_isr+0x2e8>)
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	7a7a      	ldrb	r2, [r7, #9]
 800cc7e:	b2d0      	uxtb	r0, r2
 800cc80:	8a7a      	ldrh	r2, [r7, #18]
 800cc82:	3a08      	subs	r2, #8
 800cc84:	b291      	uxth	r1, r2
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	3208      	adds	r2, #8
 800cc8a:	4798      	blx	r3
 800cc8c:	e0d0      	b.n	800ce30 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("WIFI callback is not registered\n");
 800cc8e:	f240 12f9 	movw	r2, #505	; 0x1f9
 800cc92:	495c      	ldr	r1, [pc, #368]	; (800ce04 <hif_isr+0x2ec>)
 800cc94:	485c      	ldr	r0, [pc, #368]	; (800ce08 <hif_isr+0x2f0>)
 800cc96:	f002 fedd 	bl	800fa54 <iprintf>
 800cc9a:	485f      	ldr	r0, [pc, #380]	; (800ce18 <hif_isr+0x300>)
 800cc9c:	f002 ff62 	bl	800fb64 <puts>
 800cca0:	200d      	movs	r0, #13
 800cca2:	f002 feef 	bl	800fa84 <putchar>
 800cca6:	e0c3      	b.n	800ce30 <hif_isr+0x318>
					}

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 800cca8:	7a3b      	ldrb	r3, [r7, #8]
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d11d      	bne.n	800ccec <hif_isr+0x1d4>
				{
					if(gstrHifCxt.pfIpCb)
 800ccb0:	4b53      	ldr	r3, [pc, #332]	; (800ce00 <hif_isr+0x2e8>)
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00c      	beq.n	800ccd2 <hif_isr+0x1ba>
					{
                        temp = (uint16)strHif.u16Length;
 800ccb8:	897b      	ldrh	r3, [r7, #10]
 800ccba:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800ccbc:	4b50      	ldr	r3, [pc, #320]	; (800ce00 <hif_isr+0x2e8>)
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	7a7a      	ldrb	r2, [r7, #9]
 800ccc2:	b2d0      	uxtb	r0, r2
 800ccc4:	8a7a      	ldrh	r2, [r7, #18]
 800ccc6:	3a08      	subs	r2, #8
 800ccc8:	b291      	uxth	r1, r2
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	3208      	adds	r2, #8
 800ccce:	4798      	blx	r3
 800ccd0:	e0ae      	b.n	800ce30 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Scoket callback is not registered\n");
 800ccd2:	f240 2206 	movw	r2, #518	; 0x206
 800ccd6:	494b      	ldr	r1, [pc, #300]	; (800ce04 <hif_isr+0x2ec>)
 800ccd8:	484b      	ldr	r0, [pc, #300]	; (800ce08 <hif_isr+0x2f0>)
 800ccda:	f002 febb 	bl	800fa54 <iprintf>
 800ccde:	484f      	ldr	r0, [pc, #316]	; (800ce1c <hif_isr+0x304>)
 800cce0:	f002 ff40 	bl	800fb64 <puts>
 800cce4:	200d      	movs	r0, #13
 800cce6:	f002 fecd 	bl	800fa84 <putchar>
 800ccea:	e0a1      	b.n	800ce30 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 800ccec:	7a3b      	ldrb	r3, [r7, #8]
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b04      	cmp	r3, #4
 800ccf2:	d11d      	bne.n	800cd30 <hif_isr+0x218>
				{
					if(gstrHifCxt.pfOtaCb)
 800ccf4:	4b42      	ldr	r3, [pc, #264]	; (800ce00 <hif_isr+0x2e8>)
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00c      	beq.n	800cd16 <hif_isr+0x1fe>
					{
                            temp = (uint16)strHif.u16Length;
 800ccfc:	897b      	ldrh	r3, [r7, #10]
 800ccfe:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800cd00:	4b3f      	ldr	r3, [pc, #252]	; (800ce00 <hif_isr+0x2e8>)
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	7a7a      	ldrb	r2, [r7, #9]
 800cd06:	b2d0      	uxtb	r0, r2
 800cd08:	8a7a      	ldrh	r2, [r7, #18]
 800cd0a:	3a08      	subs	r2, #8
 800cd0c:	b291      	uxth	r1, r2
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	3208      	adds	r2, #8
 800cd12:	4798      	blx	r3
 800cd14:	e08c      	b.n	800ce30 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Ota callback is not registered\n");
 800cd16:	f240 2212 	movw	r2, #530	; 0x212
 800cd1a:	493a      	ldr	r1, [pc, #232]	; (800ce04 <hif_isr+0x2ec>)
 800cd1c:	483a      	ldr	r0, [pc, #232]	; (800ce08 <hif_isr+0x2f0>)
 800cd1e:	f002 fe99 	bl	800fa54 <iprintf>
 800cd22:	483f      	ldr	r0, [pc, #252]	; (800ce20 <hif_isr+0x308>)
 800cd24:	f002 ff1e 	bl	800fb64 <puts>
 800cd28:	200d      	movs	r0, #13
 800cd2a:	f002 feab 	bl	800fa84 <putchar>
 800cd2e:	e07f      	b.n	800ce30 <hif_isr+0x318>
                    }
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 800cd30:	7a3b      	ldrb	r3, [r7, #8]
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	2b06      	cmp	r3, #6
 800cd36:	d11d      	bne.n	800cd74 <hif_isr+0x25c>
				{
					if(gstrHifCxt.pfCryptoCb)
 800cd38:	4b31      	ldr	r3, [pc, #196]	; (800ce00 <hif_isr+0x2e8>)
 800cd3a:	6a1b      	ldr	r3, [r3, #32]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00c      	beq.n	800cd5a <hif_isr+0x242>
					{
                        temp = (uint16)strHif.u16Length;
 800cd40:	897b      	ldrh	r3, [r7, #10]
 800cd42:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800cd44:	4b2e      	ldr	r3, [pc, #184]	; (800ce00 <hif_isr+0x2e8>)
 800cd46:	6a1b      	ldr	r3, [r3, #32]
 800cd48:	7a7a      	ldrb	r2, [r7, #9]
 800cd4a:	b2d0      	uxtb	r0, r2
 800cd4c:	8a7a      	ldrh	r2, [r7, #18]
 800cd4e:	3a08      	subs	r2, #8
 800cd50:	b291      	uxth	r1, r2
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	3208      	adds	r2, #8
 800cd56:	4798      	blx	r3
 800cd58:	e06a      	b.n	800ce30 <hif_isr+0x318>
                    }
					else
					{
						M2M_ERR("Crypto callback is not registered\n");
 800cd5a:	f240 221e 	movw	r2, #542	; 0x21e
 800cd5e:	4929      	ldr	r1, [pc, #164]	; (800ce04 <hif_isr+0x2ec>)
 800cd60:	4829      	ldr	r0, [pc, #164]	; (800ce08 <hif_isr+0x2f0>)
 800cd62:	f002 fe77 	bl	800fa54 <iprintf>
 800cd66:	482f      	ldr	r0, [pc, #188]	; (800ce24 <hif_isr+0x30c>)
 800cd68:	f002 fefc 	bl	800fb64 <puts>
 800cd6c:	200d      	movs	r0, #13
 800cd6e:	f002 fe89 	bl	800fa84 <putchar>
 800cd72:	e05d      	b.n	800ce30 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 800cd74:	7a3b      	ldrb	r3, [r7, #8]
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b07      	cmp	r3, #7
 800cd7a:	d11d      	bne.n	800cdb8 <hif_isr+0x2a0>
				{
					if(gstrHifCxt.pfSigmaCb)
 800cd7c:	4b20      	ldr	r3, [pc, #128]	; (800ce00 <hif_isr+0x2e8>)
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00c      	beq.n	800cd9e <hif_isr+0x286>
					{
                        temp = (uint16)strHif.u16Length;
 800cd84:	897b      	ldrh	r3, [r7, #10]
 800cd86:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800cd88:	4b1d      	ldr	r3, [pc, #116]	; (800ce00 <hif_isr+0x2e8>)
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	7a7a      	ldrb	r2, [r7, #9]
 800cd8e:	b2d0      	uxtb	r0, r2
 800cd90:	8a7a      	ldrh	r2, [r7, #18]
 800cd92:	3a08      	subs	r2, #8
 800cd94:	b291      	uxth	r1, r2
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	3208      	adds	r2, #8
 800cd9a:	4798      	blx	r3
 800cd9c:	e048      	b.n	800ce30 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Sigma callback is not registered\n");
 800cd9e:	f240 222a 	movw	r2, #554	; 0x22a
 800cda2:	4918      	ldr	r1, [pc, #96]	; (800ce04 <hif_isr+0x2ec>)
 800cda4:	4818      	ldr	r0, [pc, #96]	; (800ce08 <hif_isr+0x2f0>)
 800cda6:	f002 fe55 	bl	800fa54 <iprintf>
 800cdaa:	481f      	ldr	r0, [pc, #124]	; (800ce28 <hif_isr+0x310>)
 800cdac:	f002 feda 	bl	800fb64 <puts>
 800cdb0:	200d      	movs	r0, #13
 800cdb2:	f002 fe67 	bl	800fa84 <putchar>
 800cdb6:	e03b      	b.n	800ce30 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 800cdb8:	7a3b      	ldrb	r3, [r7, #8]
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b05      	cmp	r3, #5
 800cdbe:	d110      	bne.n	800cde2 <hif_isr+0x2ca>
				{
				    if(gstrHifCxt.pfSslCb)
 800cdc0:	4b0f      	ldr	r3, [pc, #60]	; (800ce00 <hif_isr+0x2e8>)
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d033      	beq.n	800ce30 <hif_isr+0x318>
					{
					    temp = (uint16)strHif.u16Length;
 800cdc8:	897b      	ldrh	r3, [r7, #10]
 800cdca:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800cdcc:	4b0c      	ldr	r3, [pc, #48]	; (800ce00 <hif_isr+0x2e8>)
 800cdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd0:	7a7a      	ldrb	r2, [r7, #9]
 800cdd2:	b2d0      	uxtb	r0, r2
 800cdd4:	8a7a      	ldrh	r2, [r7, #18]
 800cdd6:	3a08      	subs	r2, #8
 800cdd8:	b291      	uxth	r1, r2
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	3208      	adds	r2, #8
 800cdde:	4798      	blx	r3
 800cde0:	e026      	b.n	800ce30 <hif_isr+0x318>
					}
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
 800cde2:	f240 2237 	movw	r2, #567	; 0x237
 800cde6:	4907      	ldr	r1, [pc, #28]	; (800ce04 <hif_isr+0x2ec>)
 800cde8:	4807      	ldr	r0, [pc, #28]	; (800ce08 <hif_isr+0x2f0>)
 800cdea:	f002 fe33 	bl	800fa54 <iprintf>
 800cdee:	480f      	ldr	r0, [pc, #60]	; (800ce2c <hif_isr+0x314>)
 800cdf0:	f002 feb8 	bl	800fb64 <puts>
 800cdf4:	200d      	movs	r0, #13
 800cdf6:	f002 fe45 	bl	800fa84 <putchar>
					ret = M2M_ERR_BUS_FAIL;
 800cdfa:	23fa      	movs	r3, #250	; 0xfa
 800cdfc:	75fb      	strb	r3, [r7, #23]
					goto ERR1;
 800cdfe:	e064      	b.n	800ceca <hif_isr+0x3b2>
 800ce00:	24000d0c 	.word	0x24000d0c
 800ce04:	080112dc 	.word	0x080112dc
 800ce08:	08010d00 	.word	0x08010d00
 800ce0c:	08010d30 	.word	0x08010d30
 800ce10:	08010d54 	.word	0x08010d54
 800ce14:	08010d6c 	.word	0x08010d6c
 800ce18:	08010dac 	.word	0x08010dac
 800ce1c:	08010dcc 	.word	0x08010dcc
 800ce20:	08010df0 	.word	0x08010df0
 800ce24:	08010e10 	.word	0x08010e10
 800ce28:	08010e34 	.word	0x08010e34
 800ce2c:	08010e58 	.word	0x08010e58
				}
				if(gstrHifCxt.u8HifRXDone)
 800ce30:	4b29      	ldr	r3, [pc, #164]	; (800ced8 <hif_isr+0x3c0>)
 800ce32:	789b      	ldrb	r3, [r3, #2]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d047      	beq.n	800ceca <hif_isr+0x3b2>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
 800ce3a:	f240 223d 	movw	r2, #573	; 0x23d
 800ce3e:	4927      	ldr	r1, [pc, #156]	; (800cedc <hif_isr+0x3c4>)
 800ce40:	4827      	ldr	r0, [pc, #156]	; (800cee0 <hif_isr+0x3c8>)
 800ce42:	f002 fe07 	bl	800fa54 <iprintf>
 800ce46:	7a3b      	ldrb	r3, [r7, #8]
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	7a7b      	ldrb	r3, [r7, #9]
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	461a      	mov	r2, r3
 800ce52:	4824      	ldr	r0, [pc, #144]	; (800cee4 <hif_isr+0x3cc>)
 800ce54:	f002 fdfe 	bl	800fa54 <iprintf>
 800ce58:	200d      	movs	r0, #13
 800ce5a:	f002 fe13 	bl	800fa84 <putchar>
					ret = hif_set_rx_done();
 800ce5e:	f7ff fc41 	bl	800c6e4 <hif_set_rx_done>
 800ce62:	4603      	mov	r3, r0
 800ce64:	75fb      	strb	r3, [r7, #23]
					if(ret != M2M_SUCCESS) goto ERR1;
 800ce66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	e02d      	b.n	800ceca <hif_isr+0x3b2>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
 800ce6e:	f44f 7211 	mov.w	r2, #580	; 0x244
 800ce72:	491a      	ldr	r1, [pc, #104]	; (800cedc <hif_isr+0x3c4>)
 800ce74:	481a      	ldr	r0, [pc, #104]	; (800cee0 <hif_isr+0x3c8>)
 800ce76:	f002 fded 	bl	800fa54 <iprintf>
 800ce7a:	481b      	ldr	r0, [pc, #108]	; (800cee8 <hif_isr+0x3d0>)
 800ce7c:	f002 fe72 	bl	800fb64 <puts>
 800ce80:	200d      	movs	r0, #13
 800ce82:	f002 fdff 	bl	800fa84 <putchar>
				ret = M2M_ERR_RCV;
 800ce86:	23fe      	movs	r3, #254	; 0xfe
 800ce88:	75fb      	strb	r3, [r7, #23]
				goto ERR1;
 800ce8a:	e01e      	b.n	800ceca <hif_isr+0x3b2>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
 800ce8c:	f44f 7213 	mov.w	r2, #588	; 0x24c
 800ce90:	4912      	ldr	r1, [pc, #72]	; (800cedc <hif_isr+0x3c4>)
 800ce92:	4813      	ldr	r0, [pc, #76]	; (800cee0 <hif_isr+0x3c8>)
 800ce94:	f002 fdde 	bl	800fa54 <iprintf>
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4813      	ldr	r0, [pc, #76]	; (800ceec <hif_isr+0x3d4>)
 800ce9e:	f002 fdd9 	bl	800fa54 <iprintf>
 800cea2:	200d      	movs	r0, #13
 800cea4:	f002 fdee 	bl	800fa84 <putchar>
			ret = M2M_ERR_FAIL;
 800cea8:	23f4      	movs	r3, #244	; 0xf4
 800ceaa:	75fb      	strb	r3, [r7, #23]
			goto ERR1;
 800ceac:	e00d      	b.n	800ceca <hif_isr+0x3b2>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
 800ceae:	f240 2255 	movw	r2, #597	; 0x255
 800ceb2:	490a      	ldr	r1, [pc, #40]	; (800cedc <hif_isr+0x3c4>)
 800ceb4:	480a      	ldr	r0, [pc, #40]	; (800cee0 <hif_isr+0x3c8>)
 800ceb6:	f002 fdcd 	bl	800fa54 <iprintf>
 800ceba:	480d      	ldr	r0, [pc, #52]	; (800cef0 <hif_isr+0x3d8>)
 800cebc:	f002 fe52 	bl	800fb64 <puts>
 800cec0:	200d      	movs	r0, #13
 800cec2:	f002 fddf 	bl	800fa84 <putchar>
		goto ERR1;
 800cec6:	e000      	b.n	800ceca <hif_isr+0x3b2>
			if(ret != M2M_SUCCESS)goto ERR1;
 800cec8:	bf00      	nop
	}

ERR1:
	return ret;
 800ceca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	24000d0c 	.word	0x24000d0c
 800cedc:	080112dc 	.word	0x080112dc
 800cee0:	08010d00 	.word	0x08010d00
 800cee4:	08010e70 	.word	0x08010e70
 800cee8:	08010e9c 	.word	0x08010e9c
 800ceec:	08010eb0 	.word	0x08010eb0
 800cef0:	08010ecc 	.word	0x08010ecc

0800cef4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800cefa:	2300      	movs	r3, #0
 800cefc:	71fb      	strb	r3, [r7, #7]
	while (gstrHifCxt.u8Interrupt) {
 800cefe:	e01f      	b.n	800cf40 <hif_handle_isr+0x4c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
 800cf00:	4b15      	ldr	r3, [pc, #84]	; (800cf58 <hif_handle_isr+0x64>)
 800cf02:	78db      	ldrb	r3, [r3, #3]
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	3b01      	subs	r3, #1
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	4b13      	ldr	r3, [pc, #76]	; (800cf58 <hif_handle_isr+0x64>)
 800cf0c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
 800cf0e:	f7ff fe03 	bl	800cb18 <hif_isr>
 800cf12:	4603      	mov	r3, r0
 800cf14:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 800cf16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d100      	bne.n	800cf20 <hif_handle_isr+0x2c>
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
 800cf1e:	e00f      	b.n	800cf40 <hif_handle_isr+0x4c>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
 800cf20:	f240 2272 	movw	r2, #626	; 0x272
 800cf24:	490d      	ldr	r1, [pc, #52]	; (800cf5c <hif_handle_isr+0x68>)
 800cf26:	480e      	ldr	r0, [pc, #56]	; (800cf60 <hif_handle_isr+0x6c>)
 800cf28:	f002 fd94 	bl	800fa54 <iprintf>
 800cf2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf30:	4619      	mov	r1, r3
 800cf32:	480c      	ldr	r0, [pc, #48]	; (800cf64 <hif_handle_isr+0x70>)
 800cf34:	f002 fd8e 	bl	800fa54 <iprintf>
 800cf38:	200d      	movs	r0, #13
 800cf3a:	f002 fda3 	bl	800fa84 <putchar>
			ret = hif_isr();
 800cf3e:	e7e6      	b.n	800cf0e <hif_handle_isr+0x1a>
	while (gstrHifCxt.u8Interrupt) {
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <hif_handle_isr+0x64>)
 800cf42:	78db      	ldrb	r3, [r3, #3]
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1da      	bne.n	800cf00 <hif_handle_isr+0xc>
			}
		}
	}

	return ret;
 800cf4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	24000d0c 	.word	0x24000d0c
 800cf5c:	080112e4 	.word	0x080112e4
 800cf60:	08010d00 	.word	0x08010d00
 800cf64:	08010ef0 	.word	0x08010ef0

0800cf68 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	4611      	mov	r1, r2
 800cf74:	461a      	mov	r2, r3
 800cf76:	460b      	mov	r3, r1
 800cf78:	80fb      	strh	r3, [r7, #6]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d005      	beq.n	800cf94 <hif_receive+0x2c>
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d002      	beq.n	800cf94 <hif_receive+0x2c>
 800cf8e:	88fb      	ldrh	r3, [r7, #6]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d116      	bne.n	800cfc2 <hif_receive+0x5a>
	{
		if(isDone)
 800cf94:	797b      	ldrb	r3, [r7, #5]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d004      	beq.n	800cfa4 <hif_receive+0x3c>
		{
			/* set RX done */
			ret = hif_set_rx_done();
 800cf9a:	f7ff fba3 	bl	800c6e4 <hif_set_rx_done>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800cfa2:	e065      	b.n	800d070 <hif_receive+0x108>
			ret = M2M_ERR_FAIL;
 800cfa4:	23f4      	movs	r3, #244	; 0xf4
 800cfa6:	75fb      	strb	r3, [r7, #23]
			M2M_ERR(" hif_receive: Invalid argument\n");
 800cfa8:	f240 2293 	movw	r2, #659	; 0x293
 800cfac:	4933      	ldr	r1, [pc, #204]	; (800d07c <hif_receive+0x114>)
 800cfae:	4834      	ldr	r0, [pc, #208]	; (800d080 <hif_receive+0x118>)
 800cfb0:	f002 fd50 	bl	800fa54 <iprintf>
 800cfb4:	4833      	ldr	r0, [pc, #204]	; (800d084 <hif_receive+0x11c>)
 800cfb6:	f002 fdd5 	bl	800fb64 <puts>
 800cfba:	200d      	movs	r0, #13
 800cfbc:	f002 fd62 	bl	800fa84 <putchar>
		goto ERR1;
 800cfc0:	e056      	b.n	800d070 <hif_receive+0x108>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800cfc2:	88fa      	ldrh	r2, [r7, #6]
 800cfc4:	4b30      	ldr	r3, [pc, #192]	; (800d088 <hif_receive+0x120>)
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d912      	bls.n	800cff2 <hif_receive+0x8a>
	{
		ret = M2M_ERR_FAIL;
 800cfcc:	23f4      	movs	r3, #244	; 0xf4
 800cfce:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
 800cfd0:	f240 229b 	movw	r2, #667	; 0x29b
 800cfd4:	4929      	ldr	r1, [pc, #164]	; (800d07c <hif_receive+0x114>)
 800cfd6:	482a      	ldr	r0, [pc, #168]	; (800d080 <hif_receive+0x118>)
 800cfd8:	f002 fd3c 	bl	800fa54 <iprintf>
 800cfdc:	88f9      	ldrh	r1, [r7, #6]
 800cfde:	4b2a      	ldr	r3, [pc, #168]	; (800d088 <hif_receive+0x120>)
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	4829      	ldr	r0, [pc, #164]	; (800d08c <hif_receive+0x124>)
 800cfe6:	f002 fd35 	bl	800fa54 <iprintf>
 800cfea:	200d      	movs	r0, #13
 800cfec:	f002 fd4a 	bl	800fa84 <putchar>
		goto ERR1;
 800cff0:	e03e      	b.n	800d070 <hif_receive+0x108>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 800cff2:	4b25      	ldr	r3, [pc, #148]	; (800d088 <hif_receive+0x120>)
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d309      	bcc.n	800d010 <hif_receive+0xa8>
 800cffc:	88fa      	ldrh	r2, [r7, #6]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	441a      	add	r2, r3
 800d002:	4b21      	ldr	r3, [pc, #132]	; (800d088 <hif_receive+0x120>)
 800d004:	6859      	ldr	r1, [r3, #4]
 800d006:	4b20      	ldr	r3, [pc, #128]	; (800d088 <hif_receive+0x120>)
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	440b      	add	r3, r1
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d90e      	bls.n	800d02e <hif_receive+0xc6>
	{
		ret = M2M_ERR_FAIL;
 800d010:	23f4      	movs	r3, #244	; 0xf4
 800d012:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
 800d014:	f240 22a1 	movw	r2, #673	; 0x2a1
 800d018:	4918      	ldr	r1, [pc, #96]	; (800d07c <hif_receive+0x114>)
 800d01a:	4819      	ldr	r0, [pc, #100]	; (800d080 <hif_receive+0x118>)
 800d01c:	f002 fd1a 	bl	800fa54 <iprintf>
 800d020:	481b      	ldr	r0, [pc, #108]	; (800d090 <hif_receive+0x128>)
 800d022:	f002 fd9f 	bl	800fb64 <puts>
 800d026:	200d      	movs	r0, #13
 800d028:	f002 fd2c 	bl	800fa84 <putchar>
		goto ERR1;
 800d02c:	e020      	b.n	800d070 <hif_receive+0x108>
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800d02e:	88fb      	ldrh	r3, [r7, #6]
 800d030:	461a      	mov	r2, r3
 800d032:	68b9      	ldr	r1, [r7, #8]
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f000 feef 	bl	800de18 <nm_read_block>
 800d03a:	4603      	mov	r3, r0
 800d03c:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d03e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d111      	bne.n	800d06a <hif_receive+0x102>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800d046:	4b10      	ldr	r3, [pc, #64]	; (800d088 <hif_receive+0x120>)
 800d048:	685a      	ldr	r2, [r3, #4]
 800d04a:	4b0f      	ldr	r3, [pc, #60]	; (800d088 <hif_receive+0x120>)
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	441a      	add	r2, r3
 800d050:	88f9      	ldrh	r1, [r7, #6]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	440b      	add	r3, r1
 800d056:	429a      	cmp	r2, r3
 800d058:	d002      	beq.n	800d060 <hif_receive+0xf8>
 800d05a:	797b      	ldrb	r3, [r7, #5]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d006      	beq.n	800d06e <hif_receive+0x106>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800d060:	f7ff fb40 	bl	800c6e4 <hif_set_rx_done>
 800d064:	4603      	mov	r3, r0
 800d066:	75fb      	strb	r3, [r7, #23]
 800d068:	e002      	b.n	800d070 <hif_receive+0x108>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d06a:	bf00      	nop
 800d06c:	e000      	b.n	800d070 <hif_receive+0x108>
	}

ERR1:
 800d06e:	bf00      	nop
	return ret;
 800d070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	080112f4 	.word	0x080112f4
 800d080:	08010d00 	.word	0x08010d00
 800d084:	08010f20 	.word	0x08010f20
 800d088:	24000d0c 	.word	0x24000d0c
 800d08c:	08010f40 	.word	0x08010f40
 800d090:	08010f88 	.word	0x08010f88

0800d094 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	6039      	str	r1, [r7, #0]
 800d09e:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	2b06      	cmp	r3, #6
 800d0aa:	d82d      	bhi.n	800d108 <hif_register_cb+0x74>
 800d0ac:	a201      	add	r2, pc, #4	; (adr r2, 800d0b4 <hif_register_cb+0x20>)
 800d0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b2:	bf00      	nop
 800d0b4:	0800d0d9 	.word	0x0800d0d9
 800d0b8:	0800d0d1 	.word	0x0800d0d1
 800d0bc:	0800d0e9 	.word	0x0800d0e9
 800d0c0:	0800d0e1 	.word	0x0800d0e1
 800d0c4:	0800d101 	.word	0x0800d101
 800d0c8:	0800d0f1 	.word	0x0800d0f1
 800d0cc:	0800d0f9 	.word	0x0800d0f9
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800d0d0:	4a19      	ldr	r2, [pc, #100]	; (800d138 <hif_register_cb+0xa4>)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	6113      	str	r3, [r2, #16]
			break;
 800d0d6:	e028      	b.n	800d12a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800d0d8:	4a17      	ldr	r2, [pc, #92]	; (800d138 <hif_register_cb+0xa4>)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	60d3      	str	r3, [r2, #12]
			break;
 800d0de:	e024      	b.n	800d12a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800d0e0:	4a15      	ldr	r2, [pc, #84]	; (800d138 <hif_register_cb+0xa4>)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	6153      	str	r3, [r2, #20]
			break;
 800d0e6:	e020      	b.n	800d12a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800d0e8:	4a13      	ldr	r2, [pc, #76]	; (800d138 <hif_register_cb+0xa4>)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	61d3      	str	r3, [r2, #28]
			break;
 800d0ee:	e01c      	b.n	800d12a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800d0f0:	4a11      	ldr	r2, [pc, #68]	; (800d138 <hif_register_cb+0xa4>)
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	6213      	str	r3, [r2, #32]
			break;
 800d0f6:	e018      	b.n	800d12a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800d0f8:	4a0f      	ldr	r2, [pc, #60]	; (800d138 <hif_register_cb+0xa4>)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	6193      	str	r3, [r2, #24]
			break;
 800d0fe:	e014      	b.n	800d12a <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800d100:	4a0d      	ldr	r2, [pc, #52]	; (800d138 <hif_register_cb+0xa4>)
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 800d106:	e010      	b.n	800d12a <hif_register_cb+0x96>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
 800d108:	f240 22d9 	movw	r2, #729	; 0x2d9
 800d10c:	490b      	ldr	r1, [pc, #44]	; (800d13c <hif_register_cb+0xa8>)
 800d10e:	480c      	ldr	r0, [pc, #48]	; (800d140 <hif_register_cb+0xac>)
 800d110:	f002 fca0 	bl	800fa54 <iprintf>
 800d114:	79fb      	ldrb	r3, [r7, #7]
 800d116:	4619      	mov	r1, r3
 800d118:	480a      	ldr	r0, [pc, #40]	; (800d144 <hif_register_cb+0xb0>)
 800d11a:	f002 fc9b 	bl	800fa54 <iprintf>
 800d11e:	200d      	movs	r0, #13
 800d120:	f002 fcb0 	bl	800fa84 <putchar>
			ret = M2M_ERR_FAIL;
 800d124:	23f4      	movs	r3, #244	; 0xf4
 800d126:	73fb      	strb	r3, [r7, #15]
			break;
 800d128:	bf00      	nop
	}
	return ret;
 800d12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	24000d0c 	.word	0x24000d0c
 800d13c:	08011300 	.word	0x08011300
 800d140:	08010d00 	.word	0x08010d00
 800d144:	08010fcc 	.word	0x08010fcc

0800d148 <m2m_periph_pullup_ctrl>:
	return M2M_SUCCESS;
}


sint8 m2m_periph_pullup_ctrl(uint32 pinmask, uint8 enable)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	70fb      	strb	r3, [r7, #3]
	return pullup_ctrl(pinmask, enable);
 800d154:	78fb      	ldrb	r3, [r7, #3]
 800d156:	4619      	mov	r1, r3
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fdc1 	bl	800dce0 <pullup_ctrl>
 800d15e:	4603      	mov	r3, r0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b0aa      	sub	sp, #168	; 0xa8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	603a      	str	r2, [r7, #0]
 800d172:	71fb      	strb	r3, [r7, #7]
 800d174:	460b      	mov	r3, r1
 800d176:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800d178:	79fb      	ldrb	r3, [r7, #7]
 800d17a:	2b2c      	cmp	r3, #44	; 0x2c
 800d17c:	d117      	bne.n	800d1ae <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800d17e:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800d182:	2300      	movs	r3, #0
 800d184:	2204      	movs	r2, #4
 800d186:	6838      	ldr	r0, [r7, #0]
 800d188:	f7ff feee 	bl	800cf68 <hif_receive>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f040 8162 	bne.w	800d458 <m2m_wifi_cb+0x2f0>
		{
			if (gpfAppWifiCb)
 800d194:	4bb2      	ldr	r3, [pc, #712]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f000 815d 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800d19e:	4bb0      	ldr	r3, [pc, #704]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	202c      	movs	r0, #44	; 0x2c
 800d1aa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
 800d1ac:	e154      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800d1ae:	79fb      	ldrb	r3, [r7, #7]
 800d1b0:	2b1b      	cmp	r3, #27
 800d1b2:	d117      	bne.n	800d1e4 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800d1b4:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	2208      	movs	r2, #8
 800d1bc:	6838      	ldr	r0, [r7, #0]
 800d1be:	f7ff fed3 	bl	800cf68 <hif_receive>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f040 8147 	bne.w	800d458 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d1ca:	4ba5      	ldr	r3, [pc, #660]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f000 8142 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800d1d4:	4ba2      	ldr	r3, [pc, #648]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800d1dc:	4611      	mov	r1, r2
 800d1de:	201b      	movs	r0, #27
 800d1e0:	4798      	blx	r3
}
 800d1e2:	e139      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800d1e4:	79fb      	ldrb	r3, [r7, #7]
 800d1e6:	2b06      	cmp	r3, #6
 800d1e8:	d117      	bne.n	800d21a <m2m_wifi_cb+0xb2>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800d1ea:	f107 0108 	add.w	r1, r7, #8
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	2230      	movs	r2, #48	; 0x30
 800d1f2:	6838      	ldr	r0, [r7, #0]
 800d1f4:	f7ff feb8 	bl	800cf68 <hif_receive>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f040 812c 	bne.w	800d458 <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800d200:	4b97      	ldr	r3, [pc, #604]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 8127 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800d20a:	4b95      	ldr	r3, [pc, #596]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f107 0208 	add.w	r2, r7, #8
 800d212:	4611      	mov	r1, r2
 800d214:	2006      	movs	r0, #6
 800d216:	4798      	blx	r3
}
 800d218:	e11e      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800d21a:	79fb      	ldrb	r3, [r7, #7]
 800d21c:	2b0e      	cmp	r3, #14
 800d21e:	f000 811b 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800d222:	79fb      	ldrb	r3, [r7, #7]
 800d224:	2b32      	cmp	r3, #50	; 0x32
 800d226:	d117      	bne.n	800d258 <m2m_wifi_cb+0xf0>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800d228:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800d22c:	2300      	movs	r3, #0
 800d22e:	2214      	movs	r2, #20
 800d230:	6838      	ldr	r0, [r7, #0]
 800d232:	f7ff fe99 	bl	800cf68 <hif_receive>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f040 810d 	bne.w	800d458 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d23e:	4b88      	ldr	r3, [pc, #544]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 8108 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800d248:	4b85      	ldr	r3, [pc, #532]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d250:	4611      	mov	r1, r2
 800d252:	2032      	movs	r0, #50	; 0x32
 800d254:	4798      	blx	r3
}
 800d256:	e0ff      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	2b2f      	cmp	r3, #47	; 0x2f
 800d25c:	d11e      	bne.n	800d29c <m2m_wifi_cb+0x134>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
 800d25e:	f107 0308 	add.w	r3, r7, #8
 800d262:	2264      	movs	r2, #100	; 0x64
 800d264:	2100      	movs	r1, #0
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff f9f6 	bl	800c658 <m2m_memset>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800d26c:	f107 0108 	add.w	r1, r7, #8
 800d270:	2300      	movs	r3, #0
 800d272:	2264      	movs	r2, #100	; 0x64
 800d274:	6838      	ldr	r0, [r7, #0]
 800d276:	f7ff fe77 	bl	800cf68 <hif_receive>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f040 80eb 	bne.w	800d458 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d282:	4b77      	ldr	r3, [pc, #476]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 80e6 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800d28c:	4b74      	ldr	r3, [pc, #464]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f107 0208 	add.w	r2, r7, #8
 800d294:	4611      	mov	r1, r2
 800d296:	202f      	movs	r0, #47	; 0x2f
 800d298:	4798      	blx	r3
}
 800d29a:	e0dd      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800d29c:	79fb      	ldrb	r3, [r7, #7]
 800d29e:	2b34      	cmp	r3, #52	; 0x34
 800d2a0:	d115      	bne.n	800d2ce <m2m_wifi_cb+0x166>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800d2a2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	2204      	movs	r2, #4
 800d2aa:	6838      	ldr	r0, [r7, #0]
 800d2ac:	f7ff fe5c 	bl	800cf68 <hif_receive>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f040 80d0 	bne.w	800d458 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d2b8:	4b69      	ldr	r3, [pc, #420]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 80cb 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800d2c2:	4b67      	ldr	r3, [pc, #412]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	2034      	movs	r0, #52	; 0x34
 800d2ca:	4798      	blx	r3
}
 800d2cc:	e0c4      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	2b11      	cmp	r3, #17
 800d2d2:	d11e      	bne.n	800d312 <m2m_wifi_cb+0x1aa>
		gu8scanInProgress = 0;
 800d2d4:	4b63      	ldr	r3, [pc, #396]	; (800d464 <m2m_wifi_cb+0x2fc>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800d2da:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d2de:	2300      	movs	r3, #0
 800d2e0:	2204      	movs	r2, #4
 800d2e2:	6838      	ldr	r0, [r7, #0]
 800d2e4:	f7ff fe40 	bl	800cf68 <hif_receive>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f040 80b4 	bne.w	800d458 <m2m_wifi_cb+0x2f0>
			gu8ChNum = strState.u8NumofCh;
 800d2f0:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800d2f4:	4b5c      	ldr	r3, [pc, #368]	; (800d468 <m2m_wifi_cb+0x300>)
 800d2f6:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
 800d2f8:	4b59      	ldr	r3, [pc, #356]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f000 80ab 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800d302:	4b57      	ldr	r3, [pc, #348]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d30a:	4611      	mov	r1, r2
 800d30c:	2011      	movs	r0, #17
 800d30e:	4798      	blx	r3
}
 800d310:	e0a2      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800d312:	79fb      	ldrb	r3, [r7, #7]
 800d314:	2b13      	cmp	r3, #19
 800d316:	d117      	bne.n	800d348 <m2m_wifi_cb+0x1e0>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800d318:	f107 0108 	add.w	r1, r7, #8
 800d31c:	2300      	movs	r3, #0
 800d31e:	222c      	movs	r2, #44	; 0x2c
 800d320:	6838      	ldr	r0, [r7, #0]
 800d322:	f7ff fe21 	bl	800cf68 <hif_receive>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f040 8095 	bne.w	800d458 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d32e:	4b4c      	ldr	r3, [pc, #304]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 8090 	beq.w	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800d338:	4b49      	ldr	r3, [pc, #292]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f107 0208 	add.w	r2, r7, #8
 800d340:	4611      	mov	r1, r2
 800d342:	2013      	movs	r0, #19
 800d344:	4798      	blx	r3
}
 800d346:	e087      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	2b04      	cmp	r3, #4
 800d34c:	d115      	bne.n	800d37a <m2m_wifi_cb+0x212>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800d34e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800d352:	2300      	movs	r3, #0
 800d354:	2204      	movs	r2, #4
 800d356:	6838      	ldr	r0, [r7, #0]
 800d358:	f7ff fe06 	bl	800cf68 <hif_receive>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d17a      	bne.n	800d458 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d362:	4b3f      	ldr	r3, [pc, #252]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d076      	beq.n	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800d36a:	4b3d      	ldr	r3, [pc, #244]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800d372:	4611      	mov	r1, r2
 800d374:	2004      	movs	r0, #4
 800d376:	4798      	blx	r3
}
 800d378:	e06e      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800d37a:	79fb      	ldrb	r3, [r7, #7]
 800d37c:	2b65      	cmp	r3, #101	; 0x65
 800d37e:	d115      	bne.n	800d3ac <m2m_wifi_cb+0x244>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800d380:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800d384:	2300      	movs	r3, #0
 800d386:	2204      	movs	r2, #4
 800d388:	6838      	ldr	r0, [r7, #0]
 800d38a:	f7ff fded 	bl	800cf68 <hif_receive>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d161      	bne.n	800d458 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d394:	4b32      	ldr	r3, [pc, #200]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d05d      	beq.n	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800d39c:	4b30      	ldr	r3, [pc, #192]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800d3a4:	4611      	mov	r1, r2
 800d3a6:	2065      	movs	r0, #101	; 0x65
 800d3a8:	4798      	blx	r3
}
 800d3aa:	e055      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	2b09      	cmp	r3, #9
 800d3b0:	d115      	bne.n	800d3de <m2m_wifi_cb+0x276>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800d3b2:	f107 0108 	add.w	r1, r7, #8
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	2264      	movs	r2, #100	; 0x64
 800d3ba:	6838      	ldr	r0, [r7, #0]
 800d3bc:	f7ff fdd4 	bl	800cf68 <hif_receive>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d148      	bne.n	800d458 <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800d3c6:	4b26      	ldr	r3, [pc, #152]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d044      	beq.n	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800d3ce:	4b24      	ldr	r3, [pc, #144]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f107 0208 	add.w	r2, r7, #8
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	2009      	movs	r0, #9
 800d3da:	4798      	blx	r3
}
 800d3dc:	e03c      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800d3de:	79fb      	ldrb	r3, [r7, #7]
 800d3e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3e2:	d115      	bne.n	800d410 <m2m_wifi_cb+0x2a8>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800d3e4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	2204      	movs	r2, #4
 800d3ec:	6838      	ldr	r0, [r7, #0]
 800d3ee:	f7ff fdbb 	bl	800cf68 <hif_receive>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d12f      	bne.n	800d458 <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800d3f8:	4b19      	ldr	r3, [pc, #100]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d02b      	beq.n	800d458 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800d400:	4b17      	ldr	r3, [pc, #92]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800d408:	4611      	mov	r1, r2
 800d40a:	202a      	movs	r0, #42	; 0x2a
 800d40c:	4798      	blx	r3
}
 800d40e:	e023      	b.n	800d458 <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800d410:	79fb      	ldrb	r3, [r7, #7]
 800d412:	2b20      	cmp	r3, #32
 800d414:	d120      	bne.n	800d458 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800d416:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800d41a:	2300      	movs	r3, #0
 800d41c:	2208      	movs	r2, #8
 800d41e:	6838      	ldr	r0, [r7, #0]
 800d420:	f7ff fda2 	bl	800cf68 <hif_receive>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d116      	bne.n	800d458 <m2m_wifi_cb+0x2f0>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	f103 0008 	add.w	r0, r3, #8
 800d430:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d432:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800d436:	2301      	movs	r3, #1
 800d438:	f7ff fd96 	bl	800cf68 <hif_receive>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10a      	bne.n	800d458 <m2m_wifi_cb+0x2f0>
				if(gpfAppWifiCb)
 800d442:	4b07      	ldr	r3, [pc, #28]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d006      	beq.n	800d458 <m2m_wifi_cb+0x2f0>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 800d44a:	4b05      	ldr	r3, [pc, #20]	; (800d460 <m2m_wifi_cb+0x2f8>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d452:	4611      	mov	r1, r2
 800d454:	2020      	movs	r0, #32
 800d456:	4798      	blx	r3
}
 800d458:	bf00      	nop
 800d45a:	37a8      	adds	r7, #168	; 0xa8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	240009d8 	.word	0x240009d8
 800d464:	240009d5 	.word	0x240009d5
 800d468:	240009d4 	.word	0x240009d4

0800d46c <m2m_validate_ap_parameters>:
_EXIT0:
	return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
 800d474:	2300      	movs	r3, #0
 800d476:	73fb      	strb	r3, [r7, #15]
	/* Check for incoming pointer */
	if(pstrM2MAPConfig == NULL)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d102      	bne.n	800d484 <m2m_validate_ap_parameters+0x18>
	{
		M2M_ERR("INVALID POINTER\n");
		s8Ret = M2M_ERR_FAIL;
 800d47e:	23f4      	movs	r3, #244	; 0xf4
 800d480:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800d482:	e07e      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
	}
	/* Check for SSID */
	if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) >= M2M_MAX_SSID_LEN))
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4618      	mov	r0, r3
 800d488:	f7ff f903 	bl	800c692 <m2m_strlen>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d006      	beq.n	800d4a0 <m2m_validate_ap_parameters+0x34>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff f8fc 	bl	800c692 <m2m_strlen>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b20      	cmp	r3, #32
 800d49e:	d902      	bls.n	800d4a6 <m2m_validate_ap_parameters+0x3a>
	{
		M2M_ERR("INVALID SSID\n");
		s8Ret = M2M_ERR_FAIL;
 800d4a0:	23f4      	movs	r3, #244	; 0xf4
 800d4a2:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800d4a4:	e06d      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
	}
	/* Check for Channel */
	if(pstrM2MAPConfig->u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPConfig->u8ListenChannel < M2M_WIFI_CH_1)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d4ac:	2b0e      	cmp	r3, #14
 800d4ae:	d804      	bhi.n	800d4ba <m2m_validate_ap_parameters+0x4e>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d102      	bne.n	800d4c0 <m2m_validate_ap_parameters+0x54>
	{
		M2M_ERR("INVALID CH\n");
		s8Ret = M2M_ERR_FAIL;
 800d4ba:	23f4      	movs	r3, #244	; 0xf4
 800d4bc:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800d4be:	e060      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
	}
	/* Check for DHCP Server IP address */
	if(!(pstrM2MAPConfig->au8DHCPServerIP[0] || pstrM2MAPConfig->au8DHCPServerIP[1]))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10c      	bne.n	800d4e4 <m2m_validate_ap_parameters+0x78>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d107      	bne.n	800d4e4 <m2m_validate_ap_parameters+0x78>
	{
		if(!(pstrM2MAPConfig->au8DHCPServerIP[2]))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d102      	bne.n	800d4e4 <m2m_validate_ap_parameters+0x78>
		{
			M2M_ERR("INVALID DHCP SERVER IP\n");
			s8Ret = M2M_ERR_FAIL;
 800d4de:	23f4      	movs	r3, #244	; 0xf4
 800d4e0:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800d4e2:	e04e      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
		}
	}
	/* Check for Security */
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d048      	beq.n	800d580 <m2m_validate_ap_parameters+0x114>
	{
		goto ERR1;
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WEP)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4f4:	2b03      	cmp	r3, #3
 800d4f6:	d12c      	bne.n	800d552 <m2m_validate_ap_parameters+0xe6>
	{
		/* Check for WEP Key index */
		if((pstrM2MAPConfig->u8KeyIndx <= 0) || (pstrM2MAPConfig->u8KeyIndx > WEP_KEY_MAX_INDEX))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d004      	beq.n	800d50c <m2m_validate_ap_parameters+0xa0>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d508:	2b04      	cmp	r3, #4
 800d50a:	d902      	bls.n	800d512 <m2m_validate_ap_parameters+0xa6>
		{
			M2M_ERR("INVALID KEY INDEX\n");
			s8Ret = M2M_ERR_FAIL;
 800d50c:	23f4      	movs	r3, #244	; 0xf4
 800d50e:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800d510:	e037      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
		}
		/* Check for WEP Key size */
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d518:	2b0a      	cmp	r3, #10
 800d51a:	d007      	beq.n	800d52c <m2m_validate_ap_parameters+0xc0>
			(pstrM2MAPConfig->u8KeySz != WEP_104_KEY_STRING_SIZE)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
 800d522:	2b1a      	cmp	r3, #26
 800d524:	d002      	beq.n	800d52c <m2m_validate_ap_parameters+0xc0>
		)
		{
			M2M_ERR("INVALID KEY STRING SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 800d526:	23f4      	movs	r3, #244	; 0xf4
 800d528:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800d52a:	e02a      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
		}

		if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	3324      	adds	r3, #36	; 0x24
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff f8ae 	bl	800c692 <m2m_strlen>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d007      	beq.n	800d54c <m2m_validate_ap_parameters+0xe0>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	3324      	adds	r3, #36	; 0x24
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff f8a6 	bl	800c692 <m2m_strlen>
 800d546:	4603      	mov	r3, r0
 800d548:	2b1a      	cmp	r3, #26
 800d54a:	d91a      	bls.n	800d582 <m2m_validate_ap_parameters+0x116>
		{
			M2M_ERR("INVALID KEY SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 800d54c:	23f4      	movs	r3, #244	; 0xf4
 800d54e:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800d550:	e017      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
		}
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WPA_PSK)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d10e      	bne.n	800d57a <m2m_validate_ap_parameters+0x10e>
	{
		/* Check for WPA Key size */
		if(	((pstrM2MAPConfig->u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPConfig->u8KeySz + 1) > M2M_MAX_PSK_LEN))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d562:	3301      	adds	r3, #1
 800d564:	2b08      	cmp	r3, #8
 800d566:	dd05      	ble.n	800d574 <m2m_validate_ap_parameters+0x108>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d56e:	3301      	adds	r3, #1
 800d570:	2b41      	cmp	r3, #65	; 0x41
 800d572:	dd06      	ble.n	800d582 <m2m_validate_ap_parameters+0x116>
		{
			M2M_ERR("INVALID WPA KEY SIZE\n");
			s8Ret = M2M_ERR_FAIL;
 800d574:	23f4      	movs	r3, #244	; 0xf4
 800d576:	73fb      	strb	r3, [r7, #15]
			goto ERR1;
 800d578:	e003      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
		}
	}
	else
	{
		M2M_ERR("INVALID AUTHENTICATION MODE\n");
		s8Ret = M2M_ERR_FAIL;
 800d57a:	23f4      	movs	r3, #244	; 0xf4
 800d57c:	73fb      	strb	r3, [r7, #15]
		goto ERR1;
 800d57e:	e000      	b.n	800d582 <m2m_validate_ap_parameters+0x116>
		goto ERR1;
 800d580:	bf00      	nop
	}

ERR1:
	return s8Ret;
 800d582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
	...

0800d590 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_IND_CRL | (uint8)M2M_REQ_DATA_PKT), NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b090      	sub	sp, #64	; 0x40
 800d594:	af02      	add	r7, sp, #8
 800d596:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
 800d598:	2300      	movs	r3, #0
 800d59a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	72fb      	strb	r3, [r7, #11]

	if(param == NULL) {
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d103      	bne.n	800d5b0 <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
 800d5a8:	23f4      	movs	r3, #244	; 0xf4
 800d5aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		goto _EXIT0;
 800d5ae:	e059      	b.n	800d664 <m2m_wifi_init+0xd4>
	}

	gpfAppWifiCb = param->pfAppWifiCb;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a2e      	ldr	r2, [pc, #184]	; (800d670 <m2m_wifi_init+0xe0>)
 800d5b6:	6013      	str	r3, [r2, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
 800d5b8:	4b2e      	ldr	r3, [pc, #184]	; (800d674 <m2m_wifi_init+0xe4>)
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
 800d5be:	f107 030b 	add.w	r3, r7, #11
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 fd6e 	bl	800e0a4 <nm_drv_init>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800d5ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d145      	bne.n	800d662 <m2m_wifi_init+0xd2>
	/* Initialize host interface module */
	ret = hif_init(NULL);
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	f7ff f934 	bl	800c844 <hif_init>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800d5e2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d136      	bne.n	800d658 <m2m_wifi_init+0xc8>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
 800d5ea:	4923      	ldr	r1, [pc, #140]	; (800d678 <m2m_wifi_init+0xe8>)
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	f7ff fd51 	bl	800d094 <hif_register_cb>

	ret = nm_get_firmware_full_info(&strtmp);
 800d5f2:	f107 030c 	add.w	r3, r7, #12
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 fcb4 	bl	800df64 <nm_get_firmware_full_info>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	printf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 800d602:	7c3b      	ldrb	r3, [r7, #16]
 800d604:	4619      	mov	r1, r3
 800d606:	7c7b      	ldrb	r3, [r7, #17]
 800d608:	461a      	mov	r2, r3
 800d60a:	7cbb      	ldrb	r3, [r7, #18]
 800d60c:	4618      	mov	r0, r3
 800d60e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d610:	9300      	str	r3, [sp, #0]
 800d612:	4603      	mov	r3, r0
 800d614:	4819      	ldr	r0, [pc, #100]	; (800d67c <m2m_wifi_init+0xec>)
 800d616:	f002 fa1d 	bl	800fa54 <iprintf>
	printf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 800d61a:	f107 030c 	add.w	r3, r7, #12
 800d61e:	f103 0216 	add.w	r2, r3, #22
 800d622:	f107 030c 	add.w	r3, r7, #12
 800d626:	330a      	adds	r3, #10
 800d628:	4619      	mov	r1, r3
 800d62a:	4815      	ldr	r0, [pc, #84]	; (800d680 <m2m_wifi_init+0xf0>)
 800d62c:	f002 fa12 	bl	800fa54 <iprintf>
	printf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 800d630:	7cfb      	ldrb	r3, [r7, #19]
 800d632:	4619      	mov	r1, r3
 800d634:	7d3b      	ldrb	r3, [r7, #20]
 800d636:	461a      	mov	r2, r3
 800d638:	7d7b      	ldrb	r3, [r7, #21]
 800d63a:	4812      	ldr	r0, [pc, #72]	; (800d684 <m2m_wifi_init+0xf4>)
 800d63c:	f002 fa0a 	bl	800fa54 <iprintf>
	printf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800d640:	2304      	movs	r3, #4
 800d642:	2205      	movs	r2, #5
 800d644:	2113      	movs	r1, #19
 800d646:	4810      	ldr	r0, [pc, #64]	; (800d688 <m2m_wifi_init+0xf8>)
 800d648:	f002 fa04 	bl	800fa54 <iprintf>
	printf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 800d64c:	4a0f      	ldr	r2, [pc, #60]	; (800d68c <m2m_wifi_init+0xfc>)
 800d64e:	4910      	ldr	r1, [pc, #64]	; (800d690 <m2m_wifi_init+0x100>)
 800d650:	4810      	ldr	r0, [pc, #64]	; (800d694 <m2m_wifi_init+0x104>)
 800d652:	f002 f9ff 	bl	800fa54 <iprintf>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmware Version\n");
	}

	goto _EXIT0;
 800d656:	e005      	b.n	800d664 <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800d658:	bf00      	nop

_EXIT1:
	nm_drv_deinit(NULL);
 800d65a:	2000      	movs	r0, #0
 800d65c:	f000 fd84 	bl	800e168 <nm_drv_deinit>
 800d660:	e000      	b.n	800d664 <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800d662:	bf00      	nop
_EXIT0:
	return ret;
 800d664:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3738      	adds	r7, #56	; 0x38
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	240009d8 	.word	0x240009d8
 800d674:	240009d5 	.word	0x240009d5
 800d678:	0800d169 	.word	0x0800d169
 800d67c:	08010fd8 	.word	0x08010fd8
 800d680:	08011000 	.word	0x08011000
 800d684:	0801101c 	.word	0x0801101c
 800d688:	08011040 	.word	0x08011040
 800d68c:	08011058 	.word	0x08011058
 800d690:	08011064 	.word	0x08011064
 800d694:	08011070 	.word	0x08011070

0800d698 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
 800d6a0:	f7ff fc28 	bl	800cef4 <hif_handle_isr>
 800d6a4:	4603      	mov	r3, r0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
 800d6ae:	b480      	push	{r7}
 800d6b0:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr

0800d6be <m2m_wifi_enable_ap>:
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_P2P, NULL, 0, NULL, 0, 0);
	return ret;
}
sint8 m2m_wifi_enable_ap(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b088      	sub	sp, #32
 800d6c2:	af04      	add	r7, sp, #16
 800d6c4:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_ERR_FAIL;
 800d6c6:	23f4      	movs	r3, #244	; 0xf4
 800d6c8:	73fb      	strb	r3, [r7, #15]
	if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrM2MAPConfig))
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7ff fece 	bl	800d46c <m2m_validate_ap_parameters>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10d      	bne.n	800d6f2 <m2m_wifi_enable_ap+0x34>
	{
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_AP, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig), NULL, 0, 0);
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	9302      	str	r3, [sp, #8]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	2300      	movs	r3, #0
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	2388      	movs	r3, #136	; 0x88
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	2146      	movs	r1, #70	; 0x46
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	f7ff f8c7 	bl	800c87c <hif_send>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800d6f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <m2m_wifi_set_tx_power>:
@sa			tenuM2mTxPwrLevel
@pre		m2m_wifi_init
@warning
*/
sint8 m2m_wifi_set_tx_power(uint8 u8TxPwrLevel)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b088      	sub	sp, #32
 800d702:	af04      	add	r7, sp, #16
 800d704:	4603      	mov	r3, r0
 800d706:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800d708:	2300      	movs	r3, #0
 800d70a:	73fb      	strb	r3, [r7, #15]
	tstrM2mTxPwrLevel strM2mTxPwrLevel;
	strM2mTxPwrLevel.u8TxPwrLevel = u8TxPwrLevel;
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	723b      	strb	r3, [r7, #8]
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_TX_POWER, (uint8*)&strM2mTxPwrLevel,sizeof(tstrM2mTxPwrLevel), NULL, 0, 0);
 800d710:	f107 0208 	add.w	r2, r7, #8
 800d714:	2300      	movs	r3, #0
 800d716:	9302      	str	r3, [sp, #8]
 800d718:	2300      	movs	r3, #0
 800d71a:	9301      	str	r3, [sp, #4]
 800d71c:	2300      	movs	r3, #0
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	2304      	movs	r3, #4
 800d722:	2117      	movs	r1, #23
 800d724:	2001      	movs	r0, #1
 800d726:	f7ff f8a9 	bl	800c87c <hif_send>
 800d72a:	4603      	mov	r3, r0
 800d72c:	73fb      	strb	r3, [r7, #15]
	return ret;
 800d72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b086      	sub	sp, #24
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800d742:	2300      	movs	r3, #0
 800d744:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d750:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800d752:	6939      	ldr	r1, [r7, #16]
 800d754:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 800d758:	f000 fb3e 	bl	800ddd8 <nm_write_reg>
		if(val32 != 0) {
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d013      	beq.n	800d78a <chip_apply_conf+0x50>
			uint32 reg = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800d766:	f107 030c 	add.w	r3, r7, #12
 800d76a:	4619      	mov	r1, r3
 800d76c:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 800d770:	f000 fb24 	bl	800ddbc <nm_read_reg_with_ret>
 800d774:	4603      	mov	r3, r0
 800d776:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800d778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1e8      	bne.n	800d752 <chip_apply_conf+0x18>
				if(reg == val32)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	693a      	ldr	r2, [r7, #16]
 800d784:	429a      	cmp	r2, r3
 800d786:	d002      	beq.n	800d78e <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800d788:	e7e3      	b.n	800d752 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800d78a:	bf00      	nop
 800d78c:	e000      	b.n	800d790 <chip_apply_conf+0x56>
					break;
 800d78e:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800d7a8:	463b      	mov	r3, r7
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	f241 4008 	movw	r0, #5128	; 0x1408
 800d7b0:	f000 fb04 	bl	800ddbc <nm_read_reg_with_ret>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d7b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d12b      	bne.n	800d818 <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7c6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	f241 4008 	movw	r0, #5128	; 0x1408
 800d7d0:	f000 fb02 	bl	800ddd8 <nm_write_reg>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d7d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d11d      	bne.n	800d81c <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800d7e0:	463b      	mov	r3, r7
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800d7e8:	f000 fae8 	bl	800ddbc <nm_read_reg_with_ret>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d7f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d113      	bne.n	800d820 <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7fe:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	4619      	mov	r1, r3
 800d804:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800d808:	f000 fae6 	bl	800ddd8 <nm_write_reg>
 800d80c:	4603      	mov	r3, r0
 800d80e:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d814:	2b00      	cmp	r3, #0
ERR1:
 800d816:	e004      	b.n	800d822 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d818:	bf00      	nop
 800d81a:	e002      	b.n	800d822 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d81c:	bf00      	nop
 800d81e:	e000      	b.n	800d822 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d820:	bf00      	nop
	return ret;
 800d822:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
	...

0800d830 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800d836:	4b31      	ldr	r3, [pc, #196]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d157      	bne.n	800d8ee <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800d83e:	492f      	ldr	r1, [pc, #188]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d840:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d844:	f000 faba 	bl	800ddbc <nm_read_reg_with_ret>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <nmi_get_chipid+0x28>
			chipid = 0;
 800d84e:	4b2b      	ldr	r3, [pc, #172]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d850:	2200      	movs	r2, #0
 800d852:	601a      	str	r2, [r3, #0]
			return 0;
 800d854:	2300      	movs	r3, #0
 800d856:	e04c      	b.n	800d8f2 <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800d858:	1d3b      	adds	r3, r7, #4
 800d85a:	4619      	mov	r1, r3
 800d85c:	f241 30f4 	movw	r0, #5108	; 0x13f4
 800d860:	f000 faac 	bl	800ddbc <nm_read_reg_with_ret>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d004      	beq.n	800d874 <nmi_get_chipid+0x44>
			chipid = 0;
 800d86a:	4b24      	ldr	r3, [pc, #144]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	601a      	str	r2, [r3, #0]
			return 0;
 800d870:	2300      	movs	r3, #0
 800d872:	e03e      	b.n	800d8f2 <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800d874:	4b21      	ldr	r3, [pc, #132]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a21      	ldr	r2, [pc, #132]	; (800d900 <nmi_get_chipid+0xd0>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d106      	bne.n	800d88c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d028      	beq.n	800d8d6 <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800d884:	4b1d      	ldr	r3, [pc, #116]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d886:	4a1f      	ldr	r2, [pc, #124]	; (800d904 <nmi_get_chipid+0xd4>)
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	e024      	b.n	800d8d6 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800d88c:	4b1b      	ldr	r3, [pc, #108]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a1d      	ldr	r2, [pc, #116]	; (800d908 <nmi_get_chipid+0xd8>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d10d      	bne.n	800d8b2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d01c      	beq.n	800d8d6 <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b04      	cmp	r3, #4
 800d8a0:	d103      	bne.n	800d8aa <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800d8a2:	4b16      	ldr	r3, [pc, #88]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8a4:	4a19      	ldr	r2, [pc, #100]	; (800d90c <nmi_get_chipid+0xdc>)
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	e015      	b.n	800d8d6 <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800d8aa:	4b14      	ldr	r3, [pc, #80]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8ac:	4a18      	ldr	r2, [pc, #96]	; (800d910 <nmi_get_chipid+0xe0>)
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	e011      	b.n	800d8d6 <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800d8b2:	4b12      	ldr	r3, [pc, #72]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a17      	ldr	r2, [pc, #92]	; (800d914 <nmi_get_chipid+0xe4>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d10c      	bne.n	800d8d6 <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800d8bc:	490f      	ldr	r1, [pc, #60]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8be:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 800d8c2:	f000 fa7b 	bl	800ddbc <nm_read_reg_with_ret>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d004      	beq.n	800d8d6 <nmi_get_chipid+0xa6>
			chipid = 0;
 800d8cc:	4b0b      	ldr	r3, [pc, #44]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	601a      	str	r2, [r3, #0]
			return 0;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	e00d      	b.n	800d8f2 <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800d8d6:	4b09      	ldr	r3, [pc, #36]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d8de:	4a07      	ldr	r2, [pc, #28]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8e0:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800d8e2:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800d8ea:	4a04      	ldr	r2, [pc, #16]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8ec:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800d8ee:	4b03      	ldr	r3, [pc, #12]	; (800d8fc <nmi_get_chipid+0xcc>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	240009dc 	.word	0x240009dc
 800d900:	001002a0 	.word	0x001002a0
 800d904:	001002a1 	.word	0x001002a1
 800d908:	001002b0 	.word	0x001002b0
 800d90c:	001002b1 	.word	0x001002b1
 800d910:	001002b2 	.word	0x001002b2
 800d914:	001000f0 	.word	0x001000f0

0800d918 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800d91e:	2300      	movs	r3, #0
 800d920:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800d922:	463b      	mov	r3, r7
 800d924:	4619      	mov	r1, r3
 800d926:	2010      	movs	r0, #16
 800d928:	f000 fa48 	bl	800ddbc <nm_read_reg_with_ret>
 800d92c:	4603      	mov	r3, r0
 800d92e:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800d930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d144      	bne.n	800d9c2 <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	f003 0301 	and.w	r3, r3, #1
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d000      	beq.n	800d944 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800d942:	e7ee      	b.n	800d922 <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800d944:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800d946:	463b      	mov	r3, r7
 800d948:	4619      	mov	r1, r3
 800d94a:	2001      	movs	r0, #1
 800d94c:	f000 fa36 	bl	800ddbc <nm_read_reg_with_ret>
 800d950:	4603      	mov	r3, r0
 800d952:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d134      	bne.n	800d9c6 <chip_sleep+0xae>
	if(reg & NBIT1)
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	f003 0302 	and.w	r3, r3, #2
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00e      	beq.n	800d984 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	f023 0302 	bic.w	r3, r3, #2
 800d96c:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	4619      	mov	r1, r3
 800d972:	2001      	movs	r0, #1
 800d974:	f000 fa30 	bl	800ddd8 <nm_write_reg>
 800d978:	4603      	mov	r3, r0
 800d97a:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800d97c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d122      	bne.n	800d9ca <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800d984:	463b      	mov	r3, r7
 800d986:	4619      	mov	r1, r3
 800d988:	200b      	movs	r0, #11
 800d98a:	f000 fa17 	bl	800ddbc <nm_read_reg_with_ret>
 800d98e:	4603      	mov	r3, r0
 800d990:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d119      	bne.n	800d9ce <chip_sleep+0xb6>
	if(reg & NBIT0)
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	f003 0301 	and.w	r3, r3, #1
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d016      	beq.n	800d9d2 <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	f023 0301 	bic.w	r3, r3, #1
 800d9aa:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	200b      	movs	r0, #11
 800d9b2:	f000 fa11 	bl	800ddd8 <nm_write_reg>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800d9ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9be:	2b00      	cmp	r3, #0
	}

ERR1:
 800d9c0:	e007      	b.n	800d9d2 <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800d9c2:	bf00      	nop
 800d9c4:	e006      	b.n	800d9d4 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d9c6:	bf00      	nop
 800d9c8:	e004      	b.n	800d9d4 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800d9ca:	bf00      	nop
 800d9cc:	e002      	b.n	800d9d4 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d9ce:	bf00      	nop
 800d9d0:	e000      	b.n	800d9d4 <chip_sleep+0xbc>
ERR1:
 800d9d2:	bf00      	nop
	return ret;
 800d9d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <chip_wake>:
sint8 chip_wake(void)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	607b      	str	r3, [r7, #4]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	603b      	str	r3, [r7, #0]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800d9f6:	1d3b      	adds	r3, r7, #4
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	200b      	movs	r0, #11
 800d9fc:	f000 f9de 	bl	800ddbc <nm_read_reg_with_ret>
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800da04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d14e      	bne.n	800daaa <chip_wake+0xca>

	if(!(reg & NBIT0))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	d10c      	bne.n	800da30 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f043 0301 	orr.w	r3, r3, #1
 800da1c:	4619      	mov	r1, r3
 800da1e:	200b      	movs	r0, #11
 800da20:	f000 f9da 	bl	800ddd8 <nm_write_reg>
 800da24:	4603      	mov	r3, r0
 800da26:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800da28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d13e      	bne.n	800daae <chip_wake+0xce>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800da30:	1d3b      	adds	r3, r7, #4
 800da32:	4619      	mov	r1, r3
 800da34:	2001      	movs	r0, #1
 800da36:	f000 f9c1 	bl	800ddbc <nm_read_reg_with_ret>
 800da3a:	4603      	mov	r3, r0
 800da3c:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800da3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d135      	bne.n	800dab2 <chip_wake+0xd2>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f003 0302 	and.w	r3, r3, #2
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10c      	bne.n	800da6a <chip_wake+0x8a>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f043 0302 	orr.w	r3, r3, #2
 800da56:	4619      	mov	r1, r3
 800da58:	2001      	movs	r0, #1
 800da5a:	f000 f9bd 	bl	800ddd8 <nm_write_reg>
 800da5e:	4603      	mov	r3, r0
 800da60:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800da62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d125      	bne.n	800dab6 <chip_wake+0xd6>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800da6a:	463b      	mov	r3, r7
 800da6c:	4619      	mov	r1, r3
 800da6e:	200f      	movs	r0, #15
 800da70:	f000 f9a4 	bl	800ddbc <nm_read_reg_with_ret>
 800da74:	4603      	mov	r3, r0
 800da76:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800da78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d11c      	bne.n	800daba <chip_wake+0xda>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	f003 0304 	and.w	r3, r3, #4
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10b      	bne.n	800daa2 <chip_wake+0xc2>
			break;
		}
		nm_bsp_sleep(2);
 800da8a:	2002      	movs	r0, #2
 800da8c:	f7fe fc44 	bl	800c318 <nm_bsp_sleep>
		trials++;
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	3301      	adds	r3, #1
 800da94:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b04      	cmp	r3, #4
 800da9a:	d9e6      	bls.n	800da6a <chip_wake+0x8a>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 800da9c:	23fc      	movs	r3, #252	; 0xfc
 800da9e:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800daa0:	e00c      	b.n	800dabc <chip_wake+0xdc>
			break;
 800daa2:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800daa4:	f000 f96f 	bl	800dd86 <nm_bus_reset>
 800daa8:	e008      	b.n	800dabc <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800daaa:	bf00      	nop
 800daac:	e006      	b.n	800dabc <chip_wake+0xdc>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800daae:	bf00      	nop
 800dab0:	e004      	b.n	800dabc <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800dab2:	bf00      	nop
 800dab4:	e002      	b.n	800dabc <chip_wake+0xdc>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800dab6:	bf00      	nop
 800dab8:	e000      	b.n	800dabc <chip_wake+0xdc>
			goto _WAKE_EXIT;
 800daba:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800dabc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af00      	add	r7, sp, #0
 800dace:	4603      	mov	r3, r0
 800dad0:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800dad2:	2300      	movs	r3, #0
 800dad4:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800dad6:	2300      	movs	r3, #0
 800dad8:	61bb      	str	r3, [r7, #24]
 800dada:	2300      	movs	r3, #0
 800dadc:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800dae2:	4b3f      	ldr	r3, [pc, #252]	; (800dbe0 <wait_for_bootrom+0x118>)
 800dae4:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800daea:	f241 0014 	movw	r0, #4116	; 0x1014
 800daee:	f000 f959 	bl	800dda4 <nm_read_reg>
 800daf2:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	db03      	blt.n	800db02 <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800dafa:	2001      	movs	r0, #1
 800dafc:	f7fe fc0c 	bl	800c318 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800db00:	e7f3      	b.n	800daea <wait_for_bootrom+0x22>
			break;
 800db02:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800db04:	4837      	ldr	r0, [pc, #220]	; (800dbe4 <wait_for_bootrom+0x11c>)
 800db06:	f000 f94d 	bl	800dda4 <nm_read_reg>
 800db0a:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d119      	bne.n	800db4e <wait_for_bootrom+0x86>
	{
		reg = 0;
 800db1a:	2300      	movs	r3, #0
 800db1c:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800db1e:	e012      	b.n	800db46 <wait_for_bootrom+0x7e>
		{
			nm_bsp_sleep(1);
 800db20:	2001      	movs	r0, #1
 800db22:	f7fe fbf9 	bl	800c318 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800db26:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 800db2a:	f000 f93b 	bl	800dda4 <nm_read_reg>
 800db2e:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	3301      	adds	r3, #1
 800db34:	617b      	str	r3, [r7, #20]
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	f644 6220 	movw	r2, #20000	; 0x4e20
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d902      	bls.n	800db46 <wait_for_bootrom+0x7e>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 800db40:	23fb      	movs	r3, #251	; 0xfb
 800db42:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800db44:	e045      	b.n	800dbd2 <wait_for_bootrom+0x10a>
		while(reg != M2M_FINISH_BOOT_ROM)
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	4a27      	ldr	r2, [pc, #156]	; (800dbe8 <wait_for_bootrom+0x120>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d1e8      	bne.n	800db20 <wait_for_bootrom+0x58>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800db4e:	79fb      	ldrb	r3, [r7, #7]
 800db50:	2b02      	cmp	r3, #2
 800db52:	d10a      	bne.n	800db6a <wait_for_bootrom+0xa2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800db54:	4925      	ldr	r1, [pc, #148]	; (800dbec <wait_for_bootrom+0x124>)
 800db56:	4826      	ldr	r0, [pc, #152]	; (800dbf0 <wait_for_bootrom+0x128>)
 800db58:	f000 f93e 	bl	800ddd8 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800db5c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800db60:	f241 008c 	movw	r0, #4236	; 0x108c
 800db64:	f000 f938 	bl	800ddd8 <nm_write_reg>
 800db68:	e01c      	b.n	800dba4 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800db6a:	79fb      	ldrb	r3, [r7, #7]
 800db6c:	2b03      	cmp	r3, #3
 800db6e:	d109      	bne.n	800db84 <wait_for_bootrom+0xbc>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800db70:	491e      	ldr	r1, [pc, #120]	; (800dbec <wait_for_bootrom+0x124>)
 800db72:	481f      	ldr	r0, [pc, #124]	; (800dbf0 <wait_for_bootrom+0x128>)
 800db74:	f000 f930 	bl	800ddd8 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800db78:	2100      	movs	r1, #0
 800db7a:	f241 008c 	movw	r0, #4236	; 0x108c
 800db7e:	f000 f92b 	bl	800ddd8 <nm_write_reg>
 800db82:	e00f      	b.n	800dba4 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	2b04      	cmp	r3, #4
 800db88:	d107      	bne.n	800db9a <wait_for_bootrom+0xd2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800db8a:	2380      	movs	r3, #128	; 0x80
 800db8c:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800db8e:	68f9      	ldr	r1, [r7, #12]
 800db90:	f241 008c 	movw	r0, #4236	; 0x108c
 800db94:	f000 f920 	bl	800ddd8 <nm_write_reg>
 800db98:	e004      	b.n	800dba4 <wait_for_bootrom+0xdc>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800db9a:	68f9      	ldr	r1, [r7, #12]
 800db9c:	f241 008c 	movw	r0, #4236	; 0x108c
 800dba0:	f000 f91a 	bl	800ddd8 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800dba4:	f7ff fe44 	bl	800d830 <nmi_get_chipid>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbae:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 800dbb2:	d306      	bcc.n	800dbc2 <wait_for_bootrom+0xfa>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	f043 0302 	orr.w	r3, r3, #2
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7ff fdbd 	bl	800d73a <chip_apply_conf>
 800dbc0:	e002      	b.n	800dbc8 <wait_for_bootrom+0x100>
	} else {
		chip_apply_conf(u32GpReg1);
 800dbc2:	6938      	ldr	r0, [r7, #16]
 800dbc4:	f7ff fdb9 	bl	800d73a <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800dbc8:	490a      	ldr	r1, [pc, #40]	; (800dbf4 <wait_for_bootrom+0x12c>)
 800dbca:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 800dbce:	f000 f903 	bl	800ddd8 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800dbd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3720      	adds	r7, #32
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	13541354 	.word	0x13541354
 800dbe4:	000207bc 	.word	0x000207bc
 800dbe8:	10add09e 	.word	0x10add09e
 800dbec:	3c1cd57d 	.word	0x3c1cd57d
 800dbf0:	000207ac 	.word	0x000207ac
 800dbf4:	ef522f61 	.word	0xef522f61

0800dbf8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b088      	sub	sp, #32
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800dc02:	2300      	movs	r3, #0
 800dc04:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	61bb      	str	r3, [r7, #24]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800dc0e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800dc12:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800dc14:	f241 038c 	movw	r3, #4236	; 0x108c
 800dc18:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800dc1a:	4b1a      	ldr	r3, [pc, #104]	; (800dc84 <wait_for_firmware_start+0x8c>)
 800dc1c:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d002      	beq.n	800dc2a <wait_for_firmware_start+0x32>
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d116      	bne.n	800dc58 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 800dc2a:	4b17      	ldr	r3, [pc, #92]	; (800dc88 <wait_for_firmware_start+0x90>)
 800dc2c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800dc2e:	4b17      	ldr	r3, [pc, #92]	; (800dc8c <wait_for_firmware_start+0x94>)
 800dc30:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800dc32:	e011      	b.n	800dc58 <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800dc34:	2002      	movs	r0, #2
 800dc36:	f7fe fb6f 	bl	800c318 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f000 f8b1 	bl	800dda4 <nm_read_reg>
 800dc42:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	3301      	adds	r3, #1
 800dc48:	617b      	str	r3, [r7, #20]
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d302      	bcc.n	800dc58 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800dc52:	23fb      	movs	r3, #251	; 0xfb
 800dc54:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800dc56:	e00e      	b.n	800dc76 <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	69ba      	ldr	r2, [r7, #24]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d1e9      	bne.n	800dc34 <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	4a08      	ldr	r2, [pc, #32]	; (800dc84 <wait_for_firmware_start+0x8c>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d105      	bne.n	800dc74 <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800dc68:	2100      	movs	r1, #0
 800dc6a:	f241 008c 	movw	r0, #4236	; 0x108c
 800dc6e:	f000 f8b3 	bl	800ddd8 <nm_write_reg>
 800dc72:	e000      	b.n	800dc76 <wait_for_firmware_start+0x7e>
	}
ERR:
 800dc74:	bf00      	nop
	return ret;
 800dc76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3720      	adds	r7, #32
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	02532636 	.word	0x02532636
 800dc88:	000207ac 	.word	0x000207ac
 800dc8c:	d75dc1c3 	.word	0xd75dc1c3

0800dc90 <chip_deinit>:

sint8 chip_deinit(void)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800dc96:	2300      	movs	r3, #0
 800dc98:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800dc9a:	463b      	mov	r3, r7
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800dca2:	f000 f88b 	bl	800ddbc <nm_read_reg_with_ret>
 800dca6:	4603      	mov	r3, r0
 800dca8:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800dcaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10f      	bne.n	800dcd2 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dcb8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800dcc2:	f000 f889 	bl	800ddd8 <nm_write_reg>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800dcca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcce:	2b00      	cmp	r3, #0
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
 800dcd0:	e000      	b.n	800dcd4 <chip_deinit+0x44>
		goto ERR1;
 800dcd2:	bf00      	nop
	return ret;
 800dcd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <pullup_ctrl>:
_EXIT:
	return ret;
}

sint8 pullup_ctrl(uint32 pinmask, uint8 enable)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70fb      	strb	r3, [r7, #3]
	sint8 s8Ret;
	uint32 val32;
	s8Ret = nm_read_reg_with_ret(0x142c, &val32);
 800dcec:	f107 0308 	add.w	r3, r7, #8
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	f241 402c 	movw	r0, #5164	; 0x142c
 800dcf6:	f000 f861 	bl	800ddbc <nm_read_reg_with_ret>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73fb      	strb	r3, [r7, #15]
	if(s8Ret != M2M_SUCCESS) {
 800dcfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d118      	bne.n	800dd38 <pullup_ctrl+0x58>
		M2M_ERR("[pullup_ctrl]: failed to read\n");
		goto _EXIT;
	}
	if(enable) {
 800dd06:	78fb      	ldrb	r3, [r7, #3]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d005      	beq.n	800dd18 <pullup_ctrl+0x38>
		val32 &= ~pinmask;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	43da      	mvns	r2, r3
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	4013      	ands	r3, r2
 800dd14:	60bb      	str	r3, [r7, #8]
 800dd16:	e003      	b.n	800dd20 <pullup_ctrl+0x40>
		} else {
		val32 |= pinmask;
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	60bb      	str	r3, [r7, #8]
	}
	s8Ret = nm_write_reg(0x142c, val32);
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	4619      	mov	r1, r3
 800dd24:	f241 402c 	movw	r0, #5164	; 0x142c
 800dd28:	f000 f856 	bl	800ddd8 <nm_write_reg>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	73fb      	strb	r3, [r7, #15]
	if(s8Ret  != M2M_SUCCESS) {
 800dd30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd34:	2b00      	cmp	r3, #0
		M2M_ERR("[pullup_ctrl]: failed to write\n");
		goto _EXIT;
	}
_EXIT:
 800dd36:	e000      	b.n	800dd3a <pullup_ctrl+0x5a>
		goto _EXIT;
 800dd38:	bf00      	nop
	return s8Ret;
 800dd3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b084      	sub	sp, #16
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f7fe fbea 	bl	800c52c <nm_bus_init>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	73fb      	strb	r3, [r7, #15]
	return ret;
 800dd5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800dd72:	f7fe fc49 	bl	800c608 <nm_bus_deinit>
 800dd76:	4603      	mov	r3, r0
 800dd78:	71fb      	strb	r3, [r7, #7]

	return ret;
 800dd7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b082      	sub	sp, #8
 800dd8a:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
    ret = nm_spi_reset();
 800dd90:	f000 fea8 	bl	800eae4 <nm_spi_reset>
 800dd94:	4603      	mov	r3, r0
 800dd96:	71fb      	strb	r3, [r7, #7]
	return ret;
 800dd98:	f997 3007 	ldrsb.w	r3, [r7, #7]
#elif defined (CONF_WINC_USE_I2C)
#else
#error "Plesae define bus usage"
	return ret;
#endif
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 ff09 	bl	800ebc4 <nm_spi_read_reg>
 800ddb2:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800ddc6:	6839      	ldr	r1, [r7, #0]
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 ff0a 	bl	800ebe2 <nm_spi_read_reg_with_ret>
 800ddce:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 ff16 	bl	800ec16 <nm_spi_write_reg>
 800ddea:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	4613      	mov	r3, r2
 800de00:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800de02:	88fb      	ldrh	r3, [r7, #6]
 800de04:	461a      	mov	r2, r3
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f000 ff1e 	bl	800ec4a <nm_spi_read_block>
 800de0e:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800de10:	4618      	mov	r0, r3
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800de24:	4b20      	ldr	r3, [pc, #128]	; (800dea8 <nm_read_block+0x90>)
 800de26:	881b      	ldrh	r3, [r3, #0]
 800de28:	3b08      	subs	r3, #8
 800de2a:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800de2c:	2300      	movs	r3, #0
 800de2e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800de30:	2300      	movs	r3, #0
 800de32:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800de34:	8a3b      	ldrh	r3, [r7, #16]
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d80f      	bhi.n	800de5c <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	4413      	add	r3, r2
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	b292      	uxth	r2, r2
 800de46:	4619      	mov	r1, r3
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f7ff ffd3 	bl	800ddf4 <p_nm_read_block>
 800de4e:	4603      	mov	r3, r0
 800de50:	b2da      	uxtb	r2, r3
 800de52:	7cfb      	ldrb	r3, [r7, #19]
 800de54:	4413      	add	r3, r2
 800de56:	b2db      	uxtb	r3, r3
 800de58:	74fb      	strb	r3, [r7, #19]
			break;
 800de5a:	e01f      	b.n	800de9c <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	4413      	add	r3, r2
 800de62:	8a3a      	ldrh	r2, [r7, #16]
 800de64:	4619      	mov	r1, r3
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f7ff ffc4 	bl	800ddf4 <p_nm_read_block>
 800de6c:	4603      	mov	r3, r0
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	7cfb      	ldrb	r3, [r7, #19]
 800de72:	4413      	add	r3, r2
 800de74:	b2db      	uxtb	r3, r3
 800de76:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800de78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10c      	bne.n	800de9a <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800de80:	8a3b      	ldrh	r3, [r7, #16]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800de88:	8a3b      	ldrh	r3, [r7, #16]
 800de8a:	697a      	ldr	r2, [r7, #20]
 800de8c:	4413      	add	r3, r2
 800de8e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800de90:	8a3b      	ldrh	r3, [r7, #16]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	4413      	add	r3, r2
 800de96:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800de98:	e7cc      	b.n	800de34 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800de9a:	bf00      	nop
		}
	}

	return s8Ret;
 800de9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	2400041c 	.word	0x2400041c

0800deac <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	4613      	mov	r3, r2
 800deb8:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800deba:	88fb      	ldrh	r3, [r7, #6]
 800debc:	461a      	mov	r2, r3
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f000 fee0 	bl	800ec86 <nm_spi_write_block>
 800dec6:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800dedc:	4b20      	ldr	r3, [pc, #128]	; (800df60 <nm_write_block+0x90>)
 800dede:	881b      	ldrh	r3, [r3, #0]
 800dee0:	3b08      	subs	r3, #8
 800dee2:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800dee4:	2300      	movs	r3, #0
 800dee6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800dee8:	2300      	movs	r3, #0
 800deea:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800deec:	8a3b      	ldrh	r3, [r7, #16]
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	429a      	cmp	r2, r3
 800def2:	d80f      	bhi.n	800df14 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	4413      	add	r3, r2
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	b292      	uxth	r2, r2
 800defe:	4619      	mov	r1, r3
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f7ff ffd3 	bl	800deac <p_nm_write_block>
 800df06:	4603      	mov	r3, r0
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	7cfb      	ldrb	r3, [r7, #19]
 800df0c:	4413      	add	r3, r2
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	74fb      	strb	r3, [r7, #19]
			break;
 800df12:	e01f      	b.n	800df54 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800df14:	68ba      	ldr	r2, [r7, #8]
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	4413      	add	r3, r2
 800df1a:	8a3a      	ldrh	r2, [r7, #16]
 800df1c:	4619      	mov	r1, r3
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f7ff ffc4 	bl	800deac <p_nm_write_block>
 800df24:	4603      	mov	r3, r0
 800df26:	b2da      	uxtb	r2, r3
 800df28:	7cfb      	ldrb	r3, [r7, #19]
 800df2a:	4413      	add	r3, r2
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800df30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10c      	bne.n	800df52 <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800df38:	8a3b      	ldrh	r3, [r7, #16]
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800df40:	8a3b      	ldrh	r3, [r7, #16]
 800df42:	697a      	ldr	r2, [r7, #20]
 800df44:	4413      	add	r3, r2
 800df46:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800df48:	8a3b      	ldrh	r3, [r7, #16]
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	4413      	add	r3, r2
 800df4e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800df50:	e7cc      	b.n	800deec <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800df52:	bf00      	nop
		}
	}

	return s8Ret;
 800df54:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3718      	adds	r7, #24
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	2400041c 	.word	0x2400041c

0800df64 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b088      	sub	sp, #32
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800df6c:	2300      	movs	r3, #0
 800df6e:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800df70:	2300      	movs	r3, #0
 800df72:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800df74:	f107 030c 	add.w	r3, r7, #12
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 8086 	beq.w	800e092 <nm_get_firmware_full_info+0x12e>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800df86:	2228      	movs	r2, #40	; 0x28
 800df88:	2100      	movs	r1, #0
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7fe fb64 	bl	800c658 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800df90:	f107 0314 	add.w	r3, r7, #20
 800df94:	4619      	mov	r1, r3
 800df96:	4842      	ldr	r0, [pc, #264]	; (800e0a0 <nm_get_firmware_full_info+0x13c>)
 800df98:	f7ff ff10 	bl	800ddbc <nm_read_reg_with_ret>
 800df9c:	4603      	mov	r3, r0
 800df9e:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800dfa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d174      	bne.n	800e092 <nm_get_firmware_full_info+0x12e>
		{
			if(reg != 0)
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d06e      	beq.n	800e08c <nm_get_firmware_full_info+0x128>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800dfb4:	f107 010c 	add.w	r1, r7, #12
 800dfb8:	2208      	movs	r2, #8
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff ff2c 	bl	800de18 <nm_read_block>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800dfc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d163      	bne.n	800e094 <nm_get_firmware_full_info+0x130>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d054      	beq.n	800e086 <nm_get_firmware_full_info+0x122>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800dfe2:	2228      	movs	r2, #40	; 0x28
 800dfe4:	6879      	ldr	r1, [r7, #4]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7ff ff16 	bl	800de18 <nm_read_block>
 800dfec:	4603      	mov	r3, r0
 800dfee:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800dff0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d14d      	bne.n	800e094 <nm_get_firmware_full_info+0x130>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	791b      	ldrb	r3, [r3, #4]
 800dffc:	021b      	lsls	r3, r3, #8
 800dffe:	b21a      	sxth	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	795b      	ldrb	r3, [r3, #5]
 800e004:	011b      	lsls	r3, r3, #4
 800e006:	b21b      	sxth	r3, r3
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	b21b      	sxth	r3, r3
 800e00c:	4313      	orrs	r3, r2
 800e00e:	b21a      	sxth	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	799b      	ldrb	r3, [r3, #6]
 800e014:	b21b      	sxth	r3, r3
 800e016:	f003 030f 	and.w	r3, r3, #15
 800e01a:	b21b      	sxth	r3, r3
 800e01c:	4313      	orrs	r3, r2
 800e01e:	b21b      	sxth	r3, r3
 800e020:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800e022:	f241 3354 	movw	r3, #4948	; 0x1354
 800e026:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	79db      	ldrb	r3, [r3, #7]
 800e02c:	021b      	lsls	r3, r3, #8
 800e02e:	b21a      	sxth	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	7a1b      	ldrb	r3, [r3, #8]
 800e034:	011b      	lsls	r3, r3, #4
 800e036:	b21b      	sxth	r3, r3
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	b21b      	sxth	r3, r3
 800e03c:	4313      	orrs	r3, r2
 800e03e:	b21a      	sxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	7a5b      	ldrb	r3, [r3, #9]
 800e044:	b21b      	sxth	r3, r3
 800e046:	f003 030f 	and.w	r3, r3, #15
 800e04a:	b21b      	sxth	r3, r3
 800e04c:	4313      	orrs	r3, r2
 800e04e:	b21b      	sxth	r3, r3
 800e050:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800e052:	8bbb      	ldrh	r3, [r7, #28]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <nm_get_firmware_full_info+0x100>
 800e058:	8b3b      	ldrh	r3, [r7, #24]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d002      	beq.n	800e064 <nm_get_firmware_full_info+0x100>
 800e05e:	8b3b      	ldrh	r3, [r7, #24]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d102      	bne.n	800e06a <nm_get_firmware_full_info+0x106>
								ret = M2M_ERR_FAIL;
 800e064:	23f4      	movs	r3, #244	; 0xf4
 800e066:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800e068:	e014      	b.n	800e094 <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800e06a:	8b7a      	ldrh	r2, [r7, #26]
 800e06c:	8b3b      	ldrh	r3, [r7, #24]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d202      	bcs.n	800e078 <nm_get_firmware_full_info+0x114>
								/*The current driver version should be larger or equal
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800e072:	23f3      	movs	r3, #243	; 0xf3
 800e074:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800e076:	e00d      	b.n	800e094 <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver >  curr_firm_ver) {
 800e078:	8b7a      	ldrh	r2, [r7, #26]
 800e07a:	8bbb      	ldrh	r3, [r7, #28]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d909      	bls.n	800e094 <nm_get_firmware_full_info+0x130>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 800e080:	23f3      	movs	r3, #243	; 0xf3
 800e082:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800e084:	e006      	b.n	800e094 <nm_get_firmware_full_info+0x130>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800e086:	23f4      	movs	r3, #244	; 0xf4
 800e088:	77fb      	strb	r3, [r7, #31]
 800e08a:	e003      	b.n	800e094 <nm_get_firmware_full_info+0x130>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800e08c:	23f4      	movs	r3, #244	; 0xf4
 800e08e:	77fb      	strb	r3, [r7, #31]
 800e090:	e000      	b.n	800e094 <nm_get_firmware_full_info+0x130>
			}
		}
	}
EXIT:
 800e092:	bf00      	nop
	return ret;
 800e094:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3720      	adds	r7, #32
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	000c0008 	.word	0x000c0008

0800e0a4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode;

	if(NULL != arg) {
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00b      	beq.n	800e0ce <nm_drv_init+0x2a>
		u8Mode = *((uint8 *)arg);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800e0bc:	7bbb      	ldrb	r3, [r7, #14]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d002      	beq.n	800e0c8 <nm_drv_init+0x24>
 800e0c2:	7bbb      	ldrb	r3, [r7, #14]
 800e0c4:	2b04      	cmp	r3, #4
 800e0c6:	d904      	bls.n	800e0d2 <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	73bb      	strb	r3, [r7, #14]
 800e0cc:	e001      	b.n	800e0d2 <nm_drv_init+0x2e>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	73bb      	strb	r3, [r7, #14]
	}

	ret = nm_bus_iface_init(NULL);
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	f7ff fe37 	bl	800dd46 <nm_bus_iface_init>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e0dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d135      	bne.n	800e150 <nm_drv_init+0xac>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	printf("Chip ID %lx\n", nmi_get_chipid());
 800e0e4:	f7ff fba4 	bl	800d830 <nmi_get_chipid>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	481d      	ldr	r0, [pc, #116]	; (800e164 <nm_drv_init+0xc0>)
 800e0ee:	f001 fcb1 	bl	800fa54 <iprintf>
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
 800e0f2:	f000 fd09 	bl	800eb08 <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
 800e0f6:	7bbb      	ldrb	r3, [r7, #14]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7ff fce5 	bl	800dac8 <wait_for_bootrom>
 800e0fe:	4603      	mov	r3, r0
 800e100:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d11a      	bne.n	800e140 <nm_drv_init+0x9c>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800e10a:	7bbb      	ldrb	r3, [r7, #14]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7ff fd73 	bl	800dbf8 <wait_for_firmware_start>
 800e112:	4603      	mov	r3, r0
 800e114:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d112      	bne.n	800e144 <nm_drv_init+0xa0>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800e11e:	7bbb      	ldrb	r3, [r7, #14]
 800e120:	2b02      	cmp	r3, #2
 800e122:	d017      	beq.n	800e154 <nm_drv_init+0xb0>
 800e124:	7bbb      	ldrb	r3, [r7, #14]
 800e126:	2b03      	cmp	r3, #3
 800e128:	d014      	beq.n	800e154 <nm_drv_init+0xb0>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800e12a:	f7ff fb36 	bl	800d79a <enable_interrupts>
 800e12e:	4603      	mov	r3, r0
 800e130:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d106      	bne.n	800e148 <nm_drv_init+0xa4>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
 800e13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e13e:	e00c      	b.n	800e15a <nm_drv_init+0xb6>
		goto ERR2;
 800e140:	bf00      	nop
 800e142:	e002      	b.n	800e14a <nm_drv_init+0xa6>
		goto ERR2;
 800e144:	bf00      	nop
 800e146:	e000      	b.n	800e14a <nm_drv_init+0xa6>
		goto ERR2;
 800e148:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800e14a:	f7ff fe0d 	bl	800dd68 <nm_bus_iface_deinit>
 800e14e:	e002      	b.n	800e156 <nm_drv_init+0xb2>
		goto ERR1;
 800e150:	bf00      	nop
 800e152:	e000      	b.n	800e156 <nm_drv_init+0xb2>
ERR1:
 800e154:	bf00      	nop
	return ret;
 800e156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	08011088 	.word	0x08011088

0800e168 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800e170:	f7ff fd8e 	bl	800dc90 <chip_deinit>
 800e174:	4603      	mov	r3, r0
 800e176:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d113      	bne.n	800e1a8 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800e180:	2000      	movs	r0, #0
 800e182:	f001 fbe7 	bl	800f954 <spi_flash_enable>
 800e186:	4603      	mov	r3, r0
 800e188:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10c      	bne.n	800e1ac <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
 800e192:	f7ff fde9 	bl	800dd68 <nm_bus_iface_deinit>
 800e196:	4603      	mov	r3, r0
 800e198:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d106      	bne.n	800e1b0 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800e1a2:	f000 fd01 	bl	800eba8 <nm_spi_deinit>
 800e1a6:	e004      	b.n	800e1b2 <nm_drv_deinit+0x4a>
		goto ERR1;
 800e1a8:	bf00      	nop
 800e1aa:	e002      	b.n	800e1b2 <nm_drv_deinit+0x4a>
		goto ERR1;
 800e1ac:	bf00      	nop
 800e1ae:	e000      	b.n	800e1b2 <nm_drv_deinit+0x4a>
		goto ERR1;
 800e1b0:	bf00      	nop
#endif

ERR1:
	return ret;
 800e1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b086      	sub	sp, #24
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800e1d2:	887b      	ldrh	r3, [r7, #2]
 800e1d4:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800e1d6:	f107 030c 	add.w	r3, r7, #12
 800e1da:	4619      	mov	r1, r3
 800e1dc:	2003      	movs	r0, #3
 800e1de:	f7fe f9f1 	bl	800c5c4 <nm_bus_ioctl>
 800e1e2:	4603      	mov	r3, r0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3718      	adds	r7, #24
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800e200:	887b      	ldrh	r3, [r7, #2]
 800e202:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800e204:	f107 030c 	add.w	r3, r7, #12
 800e208:	4619      	mov	r1, r3
 800e20a:	2003      	movs	r0, #3
 800e20c:	f7fe f9da 	bl	800c5c4 <nm_bus_ioctl>
 800e210:	4603      	mov	r3, r0
}
 800e212:	4618      	mov	r0, r3
 800e214:	3718      	adds	r7, #24
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
	...

0800e21c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	460a      	mov	r2, r1
 800e226:	71fb      	strb	r3, [r7, #7]
 800e228:	4613      	mov	r3, r2
 800e22a:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	005a      	lsls	r2, r3, #1
 800e230:	79bb      	ldrb	r3, [r7, #6]
 800e232:	4053      	eors	r3, r2
 800e234:	4a03      	ldr	r2, [pc, #12]	; (800e244 <crc7_byte+0x28>)
 800e236:	5cd3      	ldrb	r3, [r2, r3]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr
 800e244:	08011310 	.word	0x08011310

0800e248 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	4603      	mov	r3, r0
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800e256:	e00a      	b.n	800e26e <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	1c5a      	adds	r2, r3, #1
 800e25c:	60ba      	str	r2, [r7, #8]
 800e25e:	781a      	ldrb	r2, [r3, #0]
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	4611      	mov	r1, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f7ff ffd9 	bl	800e21c <crc7_byte>
 800e26a:	4603      	mov	r3, r0
 800e26c:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	1e5a      	subs	r2, r3, #1
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1ef      	bne.n	800e258 <crc7+0x10>
	return crc;
 800e278:	7bfb      	ldrb	r3, [r7, #15]
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3710      	adds	r7, #16
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
	...

0800e284 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b088      	sub	sp, #32
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60b9      	str	r1, [r7, #8]
 800e28c:	607a      	str	r2, [r7, #4]
 800e28e:	603b      	str	r3, [r7, #0]
 800e290:	4603      	mov	r3, r0
 800e292:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800e294:	2305      	movs	r3, #5
 800e296:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800e298:	2301      	movs	r3, #1
 800e29a:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
 800e2a2:	3bc1      	subs	r3, #193	; 0xc1
 800e2a4:	2b0e      	cmp	r3, #14
 800e2a6:	f200 80cc 	bhi.w	800e442 <spi_cmd+0x1be>
 800e2aa:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <spi_cmd+0x2c>)
 800e2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b0:	0800e369 	.word	0x0800e369
 800e2b4:	0800e369 	.word	0x0800e369
 800e2b8:	0800e3c5 	.word	0x0800e3c5
 800e2bc:	0800e309 	.word	0x0800e309
 800e2c0:	0800e333 	.word	0x0800e333
 800e2c4:	0800e345 	.word	0x0800e345
 800e2c8:	0800e393 	.word	0x0800e393
 800e2cc:	0800e393 	.word	0x0800e393
 800e2d0:	0800e409 	.word	0x0800e409
 800e2d4:	0800e2ed 	.word	0x0800e2ed
 800e2d8:	0800e443 	.word	0x0800e443
 800e2dc:	0800e443 	.word	0x0800e443
 800e2e0:	0800e443 	.word	0x0800e443
 800e2e4:	0800e443 	.word	0x0800e443
 800e2e8:	0800e357 	.word	0x0800e357
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	0c1b      	lsrs	r3, r3, #16
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	0a1b      	lsrs	r3, r3, #8
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e302:	2305      	movs	r3, #5
 800e304:	77fb      	strb	r3, [r7, #31]
		break;
 800e306:	e09f      	b.n	800e448 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	0a1b      	lsrs	r3, r3, #8
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800e310:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e314:	2b00      	cmp	r3, #0
 800e316:	d004      	beq.n	800e322 <spi_cmd+0x9e>
 800e318:	7d7b      	ldrb	r3, [r7, #21]
 800e31a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	b2db      	uxtb	r3, r3
 800e326:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e328:	2300      	movs	r3, #0
 800e32a:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e32c:	2305      	movs	r3, #5
 800e32e:	77fb      	strb	r3, [r7, #31]
		break;
 800e330:	e08a      	b.n	800e448 <spi_cmd+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800e332:	2300      	movs	r3, #0
 800e334:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800e336:	2300      	movs	r3, #0
 800e338:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e33a:	2300      	movs	r3, #0
 800e33c:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e33e:	2305      	movs	r3, #5
 800e340:	77fb      	strb	r3, [r7, #31]
		break;
 800e342:	e081      	b.n	800e448 <spi_cmd+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800e344:	2300      	movs	r3, #0
 800e346:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800e348:	2300      	movs	r3, #0
 800e34a:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e34c:	2300      	movs	r3, #0
 800e34e:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e350:	2305      	movs	r3, #5
 800e352:	77fb      	strb	r3, [r7, #31]
		break;
 800e354:	e078      	b.n	800e448 <spi_cmd+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800e356:	23ff      	movs	r3, #255	; 0xff
 800e358:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800e35a:	23ff      	movs	r3, #255	; 0xff
 800e35c:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800e35e:	23ff      	movs	r3, #255	; 0xff
 800e360:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e362:	2305      	movs	r3, #5
 800e364:	77fb      	strb	r3, [r7, #31]
		break;
 800e366:	e06f      	b.n	800e448 <spi_cmd+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	0c1b      	lsrs	r3, r3, #16
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	0a1b      	lsrs	r3, r3, #8
 800e374:	b2db      	uxtb	r3, r3
 800e376:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	0a1b      	lsrs	r3, r3, #8
 800e382:	b2db      	uxtb	r3, r3
 800e384:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	767b      	strb	r3, [r7, #25]
		len = 7;
 800e38c:	2307      	movs	r3, #7
 800e38e:	77fb      	strb	r3, [r7, #31]
		break;
 800e390:	e05a      	b.n	800e448 <spi_cmd+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	0c1b      	lsrs	r3, r3, #16
 800e396:	b2db      	uxtb	r3, r3
 800e398:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	0a1b      	lsrs	r3, r3, #8
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	0c1b      	lsrs	r3, r3, #16
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	0a1b      	lsrs	r3, r3, #8
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800e3be:	2308      	movs	r3, #8
 800e3c0:	77fb      	strb	r3, [r7, #31]
		break;
 800e3c2:	e041      	b.n	800e448 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	0a1b      	lsrs	r3, r3, #8
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800e3cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d004      	beq.n	800e3de <spi_cmd+0x15a>
 800e3d4:	7d7b      	ldrb	r3, [r7, #21]
 800e3d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	0e1b      	lsrs	r3, r3, #24
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	0c1b      	lsrs	r3, r3, #16
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	0a1b      	lsrs	r3, r3, #8
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800e402:	2308      	movs	r3, #8
 800e404:	77fb      	strb	r3, [r7, #31]
		break;
 800e406:	e01f      	b.n	800e448 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	0c1b      	lsrs	r3, r3, #16
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	0a1b      	lsrs	r3, r3, #8
 800e414:	b2db      	uxtb	r3, r3
 800e416:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	0e1b      	lsrs	r3, r3, #24
 800e422:	b2db      	uxtb	r3, r3
 800e424:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	0c1b      	lsrs	r3, r3, #16
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	0a1b      	lsrs	r3, r3, #8
 800e432:	b2db      	uxtb	r3, r3
 800e434:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800e43c:	2309      	movs	r3, #9
 800e43e:	77fb      	strb	r3, [r7, #31]
		break;
 800e440:	e002      	b.n	800e448 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800e442:	2300      	movs	r3, #0
 800e444:	77bb      	strb	r3, [r7, #30]
		break;
 800e446:	bf00      	nop
	}

	if (result) {
 800e448:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d028      	beq.n	800e4a2 <spi_cmd+0x21e>
		if (!gu8Crc_off)
 800e450:	4b17      	ldr	r3, [pc, #92]	; (800e4b0 <spi_cmd+0x22c>)
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d114      	bne.n	800e482 <spi_cmd+0x1fe>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800e458:	7ffb      	ldrb	r3, [r7, #31]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	461a      	mov	r2, r3
 800e45e:	f107 0314 	add.w	r3, r7, #20
 800e462:	4619      	mov	r1, r3
 800e464:	207f      	movs	r0, #127	; 0x7f
 800e466:	f7ff feef 	bl	800e248 <crc7>
 800e46a:	4603      	mov	r3, r0
 800e46c:	461a      	mov	r2, r3
 800e46e:	7ffb      	ldrb	r3, [r7, #31]
 800e470:	3b01      	subs	r3, #1
 800e472:	0052      	lsls	r2, r2, #1
 800e474:	b2d2      	uxtb	r2, r2
 800e476:	f107 0120 	add.w	r1, r7, #32
 800e47a:	440b      	add	r3, r1
 800e47c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800e480:	e002      	b.n	800e488 <spi_cmd+0x204>
		else
			len-=1;
 800e482:	7ffb      	ldrb	r3, [r7, #31]
 800e484:	3b01      	subs	r3, #1
 800e486:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800e488:	7ffb      	ldrb	r3, [r7, #31]
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	f107 0314 	add.w	r3, r7, #20
 800e490:	4611      	mov	r1, r2
 800e492:	4618      	mov	r0, r3
 800e494:	f7ff feaa 	bl	800e1ec <nmi_spi_write>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d001      	beq.n	800e4a2 <spi_cmd+0x21e>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800e4a2:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3720      	adds	r7, #32
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	240009e0 	.word	0x240009e0

0800e4b4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800e4c2:	4b19      	ldr	r3, [pc, #100]	; (800e528 <spi_data_rsp+0x74>)
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d102      	bne.n	800e4d0 <spi_data_rsp+0x1c>
		len = 2;
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	73fb      	strb	r3, [r7, #15]
 800e4ce:	e001      	b.n	800e4d4 <spi_data_rsp+0x20>
	else
		len = 3;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	f107 0308 	add.w	r3, r7, #8
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7ff fe6d 	bl	800e1be <nmi_spi_read>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d002      	beq.n	800e4f0 <spi_data_rsp+0x3c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800e4ee:	e015      	b.n	800e51c <spi_data_rsp+0x68>
	}

	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	f107 0210 	add.w	r2, r7, #16
 800e4f8:	4413      	add	r3, r2
 800e4fa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d108      	bne.n	800e514 <spi_data_rsp+0x60>
 800e502:	7bfb      	ldrb	r3, [r7, #15]
 800e504:	3b02      	subs	r3, #2
 800e506:	f107 0210 	add.w	r2, r7, #16
 800e50a:	4413      	add	r3, r2
 800e50c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800e510:	2bc3      	cmp	r3, #195	; 0xc3
 800e512:	d002      	beq.n	800e51a <spi_data_rsp+0x66>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
 800e514:	2300      	movs	r3, #0
 800e516:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800e518:	e000      	b.n	800e51c <spi_data_rsp+0x68>
	}
_fail_:
 800e51a:	bf00      	nop

	return result;
 800e51c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	240009e0 	.word	0x240009e0

0800e52c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	4603      	mov	r3, r0
 800e534:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800e536:	2301      	movs	r3, #1
 800e538:	73fb      	strb	r3, [r7, #15]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
 800e53a:	79fb      	ldrb	r3, [r7, #7]
 800e53c:	2bcf      	cmp	r3, #207	; 0xcf
 800e53e:	d005      	beq.n	800e54c <spi_cmd_rsp+0x20>
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	2bc5      	cmp	r3, #197	; 0xc5
 800e544:	d002      	beq.n	800e54c <spi_cmd_rsp+0x20>
		 (cmd == CMD_TERMINATE) ||
 800e546:	79fb      	ldrb	r3, [r7, #7]
 800e548:	2bc6      	cmp	r3, #198	; 0xc6
 800e54a:	d10b      	bne.n	800e564 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e54c:	f107 030d 	add.w	r3, r7, #13
 800e550:	2101      	movs	r1, #1
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff fe33 	bl	800e1be <nmi_spi_read>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d002      	beq.n	800e564 <spi_cmd_rsp+0x38>
			result = N_FAIL;
 800e55e:	2300      	movs	r3, #0
 800e560:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e562:	e033      	b.n	800e5cc <spi_cmd_rsp+0xa0>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800e564:	230a      	movs	r3, #10
 800e566:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e568:	f107 030d 	add.w	r3, r7, #13
 800e56c:	2101      	movs	r1, #1
 800e56e:	4618      	mov	r0, r3
 800e570:	f7ff fe25 	bl	800e1be <nmi_spi_read>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d002      	beq.n	800e580 <spi_cmd_rsp+0x54>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800e57a:	2300      	movs	r3, #0
 800e57c:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e57e:	e025      	b.n	800e5cc <spi_cmd_rsp+0xa0>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800e580:	7b7b      	ldrb	r3, [r7, #13]
 800e582:	79fa      	ldrb	r2, [r7, #7]
 800e584:	429a      	cmp	r2, r3
 800e586:	d007      	beq.n	800e598 <spi_cmd_rsp+0x6c>
 800e588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e58c:	b2da      	uxtb	r2, r3
 800e58e:	3a01      	subs	r2, #1
 800e590:	b2d2      	uxtb	r2, r2
 800e592:	73ba      	strb	r2, [r7, #14]
 800e594:	2b00      	cmp	r3, #0
 800e596:	dce7      	bgt.n	800e568 <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800e598:	230a      	movs	r3, #10
 800e59a:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e59c:	f107 030d 	add.w	r3, r7, #13
 800e5a0:	2101      	movs	r1, #1
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7ff fe0b 	bl	800e1be <nmi_spi_read>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d002      	beq.n	800e5b4 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e5b2:	e00b      	b.n	800e5cc <spi_cmd_rsp+0xa0>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800e5b4:	7b7b      	ldrb	r3, [r7, #13]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d007      	beq.n	800e5ca <spi_cmd_rsp+0x9e>
 800e5ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	3a01      	subs	r2, #1
 800e5c2:	b2d2      	uxtb	r2, r2
 800e5c4:	73ba      	strb	r2, [r7, #14]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	dce8      	bgt.n	800e59c <spi_cmd_rsp+0x70>

_fail_:
 800e5ca:	bf00      	nop

	return result;
 800e5cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	807b      	strh	r3, [r7, #2]
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800e5f0:	887b      	ldrh	r3, [r7, #2]
 800e5f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5f6:	d802      	bhi.n	800e5fe <spi_data_read+0x26>
			nbytes = sz;
 800e5f8:	887b      	ldrh	r3, [r7, #2]
 800e5fa:	827b      	strh	r3, [r7, #18]
 800e5fc:	e002      	b.n	800e604 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800e5fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e602:	827b      	strh	r3, [r7, #18]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800e604:	230a      	movs	r3, #10
 800e606:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e608:	f107 030b 	add.w	r3, r7, #11
 800e60c:	2101      	movs	r1, #1
 800e60e:	4618      	mov	r0, r3
 800e610:	f7ff fdd5 	bl	800e1be <nmi_spi_read>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d002      	beq.n	800e620 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	747b      	strb	r3, [r7, #17]
				break;
 800e61e:	e010      	b.n	800e642 <spi_data_read+0x6a>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
 800e620:	7afb      	ldrb	r3, [r7, #11]
 800e622:	091b      	lsrs	r3, r3, #4
 800e624:	b2db      	uxtb	r3, r3
 800e626:	f003 030f 	and.w	r3, r3, #15
 800e62a:	2b0f      	cmp	r3, #15
 800e62c:	d008      	beq.n	800e640 <spi_data_read+0x68>
				break;
		} while (retry--);
 800e62e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e632:	b29a      	uxth	r2, r3
 800e634:	3a01      	subs	r2, #1
 800e636:	b292      	uxth	r2, r2
 800e638:	82fa      	strh	r2, [r7, #22]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1e4      	bne.n	800e608 <spi_data_read+0x30>
 800e63e:	e000      	b.n	800e642 <spi_data_read+0x6a>
				break;
 800e640:	bf00      	nop

		if (result == N_FAIL)
 800e642:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d035      	beq.n	800e6b6 <spi_data_read+0xde>
			break;

		if (retry <= 0) {
 800e64a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	dc02      	bgt.n	800e658 <spi_data_read+0x80>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 800e652:	2300      	movs	r3, #0
 800e654:	747b      	strb	r3, [r7, #17]
			break;
 800e656:	e02f      	b.n	800e6b8 <spi_data_read+0xe0>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800e658:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	4413      	add	r3, r2
 800e660:	8a7a      	ldrh	r2, [r7, #18]
 800e662:	4611      	mov	r1, r2
 800e664:	4618      	mov	r0, r3
 800e666:	f7ff fdaa 	bl	800e1be <nmi_spi_read>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <spi_data_read+0x9e>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 800e670:	2300      	movs	r3, #0
 800e672:	747b      	strb	r3, [r7, #17]
			break;
 800e674:	e020      	b.n	800e6b8 <spi_data_read+0xe0>
		}
		if(!clockless)
 800e676:	787b      	ldrb	r3, [r7, #1]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10f      	bne.n	800e69c <spi_data_read+0xc4>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800e67c:	4b11      	ldr	r3, [pc, #68]	; (800e6c4 <spi_data_read+0xec>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10b      	bne.n	800e69c <spi_data_read+0xc4>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800e684:	f107 030c 	add.w	r3, r7, #12
 800e688:	2102      	movs	r1, #2
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7ff fd97 	bl	800e1be <nmi_spi_read>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <spi_data_read+0xc4>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 800e696:	2300      	movs	r3, #0
 800e698:	747b      	strb	r3, [r7, #17]
					break;
 800e69a:	e00d      	b.n	800e6b8 <spi_data_read+0xe0>
				}
			}
		}
		ix += nbytes;
 800e69c:	8aba      	ldrh	r2, [r7, #20]
 800e69e:	8a7b      	ldrh	r3, [r7, #18]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800e6a6:	8a7b      	ldrh	r3, [r7, #18]
 800e6a8:	887a      	ldrh	r2, [r7, #2]
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800e6ae:	887b      	ldrh	r3, [r7, #2]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d19d      	bne.n	800e5f0 <spi_data_read+0x18>
 800e6b4:	e000      	b.n	800e6b8 <spi_data_read+0xe0>
			break;
 800e6b6:	bf00      	nop

	return result;
 800e6b8:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	240009e0 	.word	0x240009e0

0800e6c8 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	807b      	strh	r3, [r7, #2]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800e6d8:	2300      	movs	r3, #0
 800e6da:	81bb      	strh	r3, [r7, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	82fb      	strh	r3, [r7, #22]
	do {
		if (sz <= DATA_PKT_SZ)
 800e6e0:	887b      	ldrh	r3, [r7, #2]
 800e6e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6e6:	d802      	bhi.n	800e6ee <spi_data_write+0x26>
			nbytes = sz;
 800e6e8:	887b      	ldrh	r3, [r7, #2]
 800e6ea:	82bb      	strh	r3, [r7, #20]
 800e6ec:	e002      	b.n	800e6f4 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800e6ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e6f2:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800e6f4:	23f0      	movs	r3, #240	; 0xf0
 800e6f6:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800e6f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d109      	bne.n	800e714 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800e700:	887b      	ldrh	r3, [r7, #2]
 800e702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e706:	d802      	bhi.n	800e70e <spi_data_write+0x46>
				order = 0x3;
 800e708:	2303      	movs	r3, #3
 800e70a:	74bb      	strb	r3, [r7, #18]
 800e70c:	e00b      	b.n	800e726 <spi_data_write+0x5e>
			else
				order = 0x1;
 800e70e:	2301      	movs	r3, #1
 800e710:	74bb      	strb	r3, [r7, #18]
 800e712:	e008      	b.n	800e726 <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800e714:	887b      	ldrh	r3, [r7, #2]
 800e716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e71a:	d802      	bhi.n	800e722 <spi_data_write+0x5a>
				order = 0x3;
 800e71c:	2303      	movs	r3, #3
 800e71e:	74bb      	strb	r3, [r7, #18]
 800e720:	e001      	b.n	800e726 <spi_data_write+0x5e>
			else
				order = 0x2;
 800e722:	2302      	movs	r3, #2
 800e724:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800e726:	7c7a      	ldrb	r2, [r7, #17]
 800e728:	7cbb      	ldrb	r3, [r7, #18]
 800e72a:	4313      	orrs	r3, r2
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800e730:	f107 0311 	add.w	r3, r7, #17
 800e734:	2101      	movs	r1, #1
 800e736:	4618      	mov	r0, r3
 800e738:	f7ff fd58 	bl	800e1ec <nmi_spi_write>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d002      	beq.n	800e748 <spi_data_write+0x80>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
 800e742:	2300      	movs	r3, #0
 800e744:	74fb      	strb	r3, [r7, #19]
			break;
 800e746:	e02a      	b.n	800e79e <spi_data_write+0xd6>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800e748:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	4413      	add	r3, r2
 800e750:	8aba      	ldrh	r2, [r7, #20]
 800e752:	4611      	mov	r1, r2
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff fd49 	bl	800e1ec <nmi_spi_write>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <spi_data_write+0x9e>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
 800e760:	2300      	movs	r3, #0
 800e762:	74fb      	strb	r3, [r7, #19]
			break;
 800e764:	e01b      	b.n	800e79e <spi_data_write+0xd6>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800e766:	4b11      	ldr	r3, [pc, #68]	; (800e7ac <spi_data_write+0xe4>)
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10b      	bne.n	800e786 <spi_data_write+0xbe>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800e76e:	f107 030c 	add.w	r3, r7, #12
 800e772:	2102      	movs	r1, #2
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff fd39 	bl	800e1ec <nmi_spi_write>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d002      	beq.n	800e786 <spi_data_write+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
 800e780:	2300      	movs	r3, #0
 800e782:	74fb      	strb	r3, [r7, #19]
				break;
 800e784:	e00b      	b.n	800e79e <spi_data_write+0xd6>
			}
		}

		ix += nbytes;
 800e786:	8afa      	ldrh	r2, [r7, #22]
 800e788:	8abb      	ldrh	r3, [r7, #20]
 800e78a:	4413      	add	r3, r2
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800e790:	887a      	ldrh	r2, [r7, #2]
 800e792:	8abb      	ldrh	r3, [r7, #20]
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800e798:	887b      	ldrh	r3, [r7, #2]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1a0      	bne.n	800e6e0 <spi_data_write+0x18>


	return result;
 800e79e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3718      	adds	r7, #24
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	240009e0 	.word	0x240009e0

0800e7b0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af02      	add	r7, sp, #8
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800e7ba:	230a      	movs	r3, #10
 800e7bc:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800e7c2:	23c9      	movs	r3, #201	; 0xc9
 800e7c4:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	733b      	strb	r3, [r7, #12]

_RETRY_:
	if (addr <= 0x30)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b30      	cmp	r3, #48	; 0x30
 800e7ce:	d804      	bhi.n	800e7da <spi_write_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800e7d0:	23c3      	movs	r3, #195	; 0xc3
 800e7d2:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	733b      	strb	r3, [r7, #12]
 800e7d8:	e003      	b.n	800e7e2 <spi_write_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
 800e7da:	23c9      	movs	r3, #201	; 0xc9
 800e7dc:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800e7e2:	7b78      	ldrb	r0, [r7, #13]
 800e7e4:	7b3b      	ldrb	r3, [r7, #12]
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	2304      	movs	r3, #4
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	6879      	ldr	r1, [r7, #4]
 800e7ee:	f7ff fd49 	bl	800e284 <spi_cmd>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e7f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d109      	bne.n	800e812 <spi_write_reg+0x62>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e7fe:	7b7b      	ldrb	r3, [r7, #13]
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff fe93 	bl	800e52c <spi_cmd_rsp>
 800e806:	4603      	mov	r3, r0
 800e808:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e80a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e80e:	2b01      	cmp	r3, #1
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
		goto _FAIL_;
	}

#endif
_FAIL_:
 800e810:	e000      	b.n	800e814 <spi_write_reg+0x64>
		goto _FAIL_;
 800e812:	bf00      	nop
	if(result != N_OK)
 800e814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d017      	beq.n	800e84c <spi_write_reg+0x9c>
	{
		nm_bsp_sleep(1);
 800e81c:	2001      	movs	r0, #1
 800e81e:	f7fd fd7b 	bl	800c318 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e822:	2300      	movs	r3, #0
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	2300      	movs	r3, #0
 800e828:	2200      	movs	r2, #0
 800e82a:	2100      	movs	r1, #0
 800e82c:	20cf      	movs	r0, #207	; 0xcf
 800e82e:	f7ff fd29 	bl	800e284 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e832:	20cf      	movs	r0, #207	; 0xcf
 800e834:	f7ff fe7a 	bl	800e52c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 800e838:	2001      	movs	r0, #1
 800e83a:	f7fd fd6d 	bl	800c318 <nm_bsp_sleep>
		retry--;
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
 800e840:	3b01      	subs	r3, #1
 800e842:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e844:	7bfb      	ldrb	r3, [r7, #15]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d000      	beq.n	800e84c <spi_write_reg+0x9c>
 800e84a:	e7be      	b.n	800e7ca <spi_write_reg+0x1a>
	}

	return result;
 800e84c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b088      	sub	sp, #32
 800e85c:	af02      	add	r7, sp, #8
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	4613      	mov	r3, r2
 800e864:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800e866:	230a      	movs	r3, #10
 800e868:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800e86a:	23c7      	movs	r3, #199	; 0xc7
 800e86c:	757b      	strb	r3, [r7, #21]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800e86e:	88fb      	ldrh	r3, [r7, #6]
 800e870:	2b01      	cmp	r3, #1
 800e872:	d101      	bne.n	800e878 <nm_spi_write+0x20>
		size = 2;
 800e874:	2302      	movs	r3, #2
 800e876:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800e878:	88fa      	ldrh	r2, [r7, #6]
 800e87a:	7d78      	ldrb	r0, [r7, #21]
 800e87c:	2300      	movs	r3, #0
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	4613      	mov	r3, r2
 800e882:	2200      	movs	r2, #0
 800e884:	68f9      	ldr	r1, [r7, #12]
 800e886:	f7ff fcfd 	bl	800e284 <spi_cmd>
 800e88a:	4603      	mov	r3, r0
 800e88c:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e88e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e892:	2b01      	cmp	r3, #1
 800e894:	d11e      	bne.n	800e8d4 <nm_spi_write+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e896:	7d7b      	ldrb	r3, [r7, #21]
 800e898:	4618      	mov	r0, r3
 800e89a:	f7ff fe47 	bl	800e52c <spi_cmd_rsp>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e8a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d116      	bne.n	800e8d8 <nm_spi_write+0x80>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800e8aa:	88fb      	ldrh	r3, [r7, #6]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	68b8      	ldr	r0, [r7, #8]
 800e8b0:	f7ff ff0a 	bl	800e6c8 <spi_data_write>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e8b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d10d      	bne.n	800e8dc <nm_spi_write+0x84>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800e8c0:	7d7b      	ldrb	r3, [r7, #21]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7ff fdf6 	bl	800e4b4 <spi_data_rsp>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e8cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8d0:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}

_FAIL_:
 800e8d2:	e004      	b.n	800e8de <nm_spi_write+0x86>
		goto _FAIL_;
 800e8d4:	bf00      	nop
 800e8d6:	e002      	b.n	800e8de <nm_spi_write+0x86>
		goto _FAIL_;
 800e8d8:	bf00      	nop
 800e8da:	e000      	b.n	800e8de <nm_spi_write+0x86>
		goto _FAIL_;
 800e8dc:	bf00      	nop
	if(result != N_OK)
 800e8de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d017      	beq.n	800e916 <nm_spi_write+0xbe>
	{
		nm_bsp_sleep(1);
 800e8e6:	2001      	movs	r0, #1
 800e8e8:	f7fd fd16 	bl	800c318 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	20cf      	movs	r0, #207	; 0xcf
 800e8f8:	f7ff fcc4 	bl	800e284 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e8fc:	20cf      	movs	r0, #207	; 0xcf
 800e8fe:	f7ff fe15 	bl	800e52c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800e902:	2001      	movs	r0, #1
 800e904:	f7fd fd08 	bl	800c318 <nm_bsp_sleep>
		retry--;
 800e908:	7dbb      	ldrb	r3, [r7, #22]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800e90e:	7dbb      	ldrb	r3, [r7, #22]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d000      	beq.n	800e916 <nm_spi_write+0xbe>
 800e914:	e7ab      	b.n	800e86e <nm_spi_write+0x16>
	}


	return result;
 800e916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3718      	adds	r7, #24
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b086      	sub	sp, #24
 800e926:	af02      	add	r7, sp, #8
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800e92c:	230a      	movs	r3, #10
 800e92e:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800e930:	2301      	movs	r3, #1
 800e932:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_READ;
 800e934:	23ca      	movs	r3, #202	; 0xca
 800e936:	737b      	strb	r3, [r7, #13]
	uint8 tmp[4];
	uint8 clockless = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	733b      	strb	r3, [r7, #12]

_RETRY_:

	if (addr <= 0xff)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2bff      	cmp	r3, #255	; 0xff
 800e940:	d804      	bhi.n	800e94c <spi_read_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800e942:	23c4      	movs	r3, #196	; 0xc4
 800e944:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800e946:	2301      	movs	r3, #1
 800e948:	733b      	strb	r3, [r7, #12]
 800e94a:	e003      	b.n	800e954 <spi_read_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
 800e94c:	23ca      	movs	r3, #202	; 0xca
 800e94e:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 800e950:	2300      	movs	r3, #0
 800e952:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800e954:	7b78      	ldrb	r0, [r7, #13]
 800e956:	7b3b      	ldrb	r3, [r7, #12]
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	2304      	movs	r3, #4
 800e95c:	2200      	movs	r2, #0
 800e95e:	6879      	ldr	r1, [r7, #4]
 800e960:	f7ff fc90 	bl	800e284 <spi_cmd>
 800e964:	4603      	mov	r3, r0
 800e966:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d124      	bne.n	800e9ba <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e970:	7b7b      	ldrb	r3, [r7, #13]
 800e972:	4618      	mov	r0, r3
 800e974:	f7ff fdda 	bl	800e52c <spi_cmd_rsp>
 800e978:	4603      	mov	r3, r0
 800e97a:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e97c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e980:	2b01      	cmp	r3, #1
 800e982:	d11c      	bne.n	800e9be <spi_read_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800e984:	7b3a      	ldrb	r2, [r7, #12]
 800e986:	f107 0308 	add.w	r3, r7, #8
 800e98a:	2104      	movs	r1, #4
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff fe23 	bl	800e5d8 <spi_data_read>
 800e992:	4603      	mov	r3, r0
 800e994:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	d111      	bne.n	800e9c2 <spi_read_reg+0xa0>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
 800e99e:	7a3b      	ldrb	r3, [r7, #8]
 800e9a0:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800e9a2:	7a7b      	ldrb	r3, [r7, #9]
 800e9a4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800e9a6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800e9a8:	7abb      	ldrb	r3, [r7, #10]
 800e9aa:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800e9ac:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800e9ae:	7afb      	ldrb	r3, [r7, #11]
 800e9b0:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800e9b2:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	601a      	str	r2, [r3, #0]
 800e9b8:	e004      	b.n	800e9c4 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e9ba:	bf00      	nop
 800e9bc:	e002      	b.n	800e9c4 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e9be:	bf00      	nop
 800e9c0:	e000      	b.n	800e9c4 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e9c2:	bf00      	nop

_FAIL_:
	if(result != N_OK)
 800e9c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d017      	beq.n	800e9fc <spi_read_reg+0xda>
	{

		nm_bsp_sleep(1);
 800e9cc:	2001      	movs	r0, #1
 800e9ce:	f7fd fca3 	bl	800c318 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2100      	movs	r1, #0
 800e9dc:	20cf      	movs	r0, #207	; 0xcf
 800e9de:	f7ff fc51 	bl	800e284 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e9e2:	20cf      	movs	r0, #207	; 0xcf
 800e9e4:	f7ff fda2 	bl	800e52c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 800e9e8:	2001      	movs	r0, #1
 800e9ea:	f7fd fc95 	bl	800c318 <nm_bsp_sleep>
		retry--;
 800e9ee:	7bfb      	ldrb	r3, [r7, #15]
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e9f4:	7bfb      	ldrb	r3, [r7, #15]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d000      	beq.n	800e9fc <spi_read_reg+0xda>
 800e9fa:	e79f      	b.n	800e93c <spi_read_reg+0x1a>
	}

	return result;
 800e9fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b088      	sub	sp, #32
 800ea0c:	af02      	add	r7, sp, #8
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	4613      	mov	r3, r2
 800ea14:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800ea16:	23c8      	movs	r3, #200	; 0xc8
 800ea18:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800ea1a:	230a      	movs	r3, #10
 800ea1c:	75bb      	strb	r3, [r7, #22]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	757b      	strb	r3, [r7, #21]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
 800ea22:	88fb      	ldrh	r3, [r7, #6]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d103      	bne.n	800ea30 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800ea28:	2302      	movs	r3, #2
 800ea2a:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800ea30:	88fa      	ldrh	r2, [r7, #6]
 800ea32:	7d38      	ldrb	r0, [r7, #20]
 800ea34:	2300      	movs	r3, #0
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	4613      	mov	r3, r2
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	68f9      	ldr	r1, [r7, #12]
 800ea3e:	f7ff fc21 	bl	800e284 <spi_cmd>
 800ea42:	4603      	mov	r3, r0
 800ea44:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800ea46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d125      	bne.n	800ea9a <nm_spi_read+0x92>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800ea4e:	7d3b      	ldrb	r3, [r7, #20]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7ff fd6b 	bl	800e52c <spi_cmd_rsp>
 800ea56:	4603      	mov	r3, r0
 800ea58:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800ea5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d11d      	bne.n	800ea9e <nm_spi_read+0x96>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800ea62:	7d7b      	ldrb	r3, [r7, #21]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00c      	beq.n	800ea82 <nm_spi_read+0x7a>
	{
		result = spi_data_read(tmp, size,0);
 800ea68:	88f9      	ldrh	r1, [r7, #6]
 800ea6a:	f107 0310 	add.w	r3, r7, #16
 800ea6e:	2200      	movs	r2, #0
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7ff fdb1 	bl	800e5d8 <spi_data_read>
 800ea76:	4603      	mov	r3, r0
 800ea78:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800ea7a:	7c3a      	ldrb	r2, [r7, #16]
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	701a      	strb	r2, [r3, #0]
 800ea80:	e007      	b.n	800ea92 <nm_spi_read+0x8a>
	}
	else
		result = spi_data_read(buf, size,0);
 800ea82:	88fb      	ldrh	r3, [r7, #6]
 800ea84:	2200      	movs	r2, #0
 800ea86:	4619      	mov	r1, r3
 800ea88:	68b8      	ldr	r0, [r7, #8]
 800ea8a:	f7ff fda5 	bl	800e5d8 <spi_data_read>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800ea92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea96:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
		goto _FAIL_;
	}
#endif

_FAIL_:
 800ea98:	e002      	b.n	800eaa0 <nm_spi_read+0x98>
		goto _FAIL_;
 800ea9a:	bf00      	nop
 800ea9c:	e000      	b.n	800eaa0 <nm_spi_read+0x98>
		goto _FAIL_;
 800ea9e:	bf00      	nop
	if(result != N_OK)
 800eaa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d017      	beq.n	800ead8 <nm_spi_read+0xd0>
	{
		nm_bsp_sleep(1);
 800eaa8:	2001      	movs	r0, #1
 800eaaa:	f7fd fc35 	bl	800c318 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800eaae:	2300      	movs	r3, #0
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	2300      	movs	r3, #0
 800eab4:	2200      	movs	r2, #0
 800eab6:	2100      	movs	r1, #0
 800eab8:	20cf      	movs	r0, #207	; 0xcf
 800eaba:	f7ff fbe3 	bl	800e284 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800eabe:	20cf      	movs	r0, #207	; 0xcf
 800eac0:	f7ff fd34 	bl	800e52c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800eac4:	2001      	movs	r0, #1
 800eac6:	f7fd fc27 	bl	800c318 <nm_bsp_sleep>
		retry--;
 800eaca:	7dbb      	ldrb	r3, [r7, #22]
 800eacc:	3b01      	subs	r3, #1
 800eace:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800ead0:	7dbb      	ldrb	r3, [r7, #22]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d000      	beq.n	800ead8 <nm_spi_read+0xd0>
 800ead6:	e7a4      	b.n	800ea22 <nm_spi_read+0x1a>
	}

	return result;
 800ead8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3718      	adds	r7, #24
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800eaea:	2300      	movs	r3, #0
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	2300      	movs	r3, #0
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	20cf      	movs	r0, #207	; 0xcf
 800eaf6:	f7ff fbc5 	bl	800e284 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 800eafa:	20cf      	movs	r0, #207	; 0xcf
 800eafc:	f7ff fd16 	bl	800e52c <spi_cmd_rsp>
	return M2M_SUCCESS;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	603b      	str	r3, [r7, #0]


	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800eb12:	4b24      	ldr	r3, [pc, #144]	; (800eba4 <nm_spi_init+0x9c>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 800eb18:	463b      	mov	r3, r7
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	f64e 0024 	movw	r0, #59428	; 0xe824
 800eb20:	f7ff feff 	bl	800e922 <spi_read_reg>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10d      	bne.n	800eb46 <nm_spi_init+0x3e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800eb2a:	4b1e      	ldr	r3, [pc, #120]	; (800eba4 <nm_spi_init+0x9c>)
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 800eb30:	463b      	mov	r3, r7
 800eb32:	4619      	mov	r1, r3
 800eb34:	f64e 0024 	movw	r0, #59428	; 0xe824
 800eb38:	f7ff fef3 	bl	800e922 <spi_read_reg>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d101      	bne.n	800eb46 <nm_spi_init+0x3e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	e02a      	b.n	800eb9c <nm_spi_init+0x94>
		}
	}
	if(gu8Crc_off == 0)
 800eb46:	4b17      	ldr	r3, [pc, #92]	; (800eba4 <nm_spi_init+0x9c>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d119      	bne.n	800eb82 <nm_spi_init+0x7a>
	{
		reg &= ~0xc;	/* disable crc checking */
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	f023 030c 	bic.w	r3, r3, #12
 800eb54:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb5c:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800eb64:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	f64e 0024 	movw	r0, #59428	; 0xe824
 800eb6e:	f7ff fe1f 	bl	800e7b0 <spi_write_reg>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d101      	bne.n	800eb7c <nm_spi_init+0x74>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	e00f      	b.n	800eb9c <nm_spi_init+0x94>
		}
		gu8Crc_off = 1;
 800eb7c:	4b09      	ldr	r3, [pc, #36]	; (800eba4 <nm_spi_init+0x9c>)
 800eb7e:	2201      	movs	r2, #1
 800eb80:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
 800eb82:	1d3b      	adds	r3, r7, #4
 800eb84:	4619      	mov	r1, r3
 800eb86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800eb8a:	f7ff feca 	bl	800e922 <spi_read_reg>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d102      	bne.n	800eb9a <nm_spi_init+0x92>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
 800eb94:	f06f 0305 	mvn.w	r3, #5
 800eb98:	e000      	b.n	800eb9c <nm_spi_init+0x94>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	//spi_init_pkt_sz();


	return M2M_SUCCESS;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	240009e0 	.word	0x240009e0

0800eba8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800ebac:	4b04      	ldr	r3, [pc, #16]	; (800ebc0 <nm_spi_deinit+0x18>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800ebb2:	2300      	movs	r3, #0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	240009e0 	.word	0x240009e0

0800ebc4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
 800ebcc:	f107 030c 	add.w	r3, r7, #12
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7ff fea5 	bl	800e922 <spi_read_reg>

	return u32Val;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
 800ebea:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7ff fe97 	bl	800e922 <spi_read_reg>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800ebf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d102      	bne.n	800ec06 <nm_spi_read_reg_with_ret+0x24>
 800ec00:	2300      	movs	r3, #0
 800ec02:	73fb      	strb	r3, [r7, #15]
 800ec04:	e001      	b.n	800ec0a <nm_spi_read_reg_with_ret+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800ec06:	23fa      	movs	r3, #250	; 0xfa
 800ec08:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800ec0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b084      	sub	sp, #16
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
 800ec1e:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
 800ec20:	6839      	ldr	r1, [r7, #0]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff fdc4 	bl	800e7b0 <spi_write_reg>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800ec2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d102      	bne.n	800ec3a <nm_spi_write_reg+0x24>
 800ec34:	2300      	movs	r3, #0
 800ec36:	73fb      	strb	r3, [r7, #15]
 800ec38:	e001      	b.n	800ec3e <nm_spi_write_reg+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800ec3a:	23fa      	movs	r3, #250	; 0xfa
 800ec3c:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800ec3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b086      	sub	sp, #24
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	60f8      	str	r0, [r7, #12]
 800ec52:	60b9      	str	r1, [r7, #8]
 800ec54:	4613      	mov	r3, r2
 800ec56:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800ec58:	88fb      	ldrh	r3, [r7, #6]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	68b9      	ldr	r1, [r7, #8]
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f7ff fed2 	bl	800ea08 <nm_spi_read>
 800ec64:	4603      	mov	r3, r0
 800ec66:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800ec68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d102      	bne.n	800ec76 <nm_spi_read_block+0x2c>
 800ec70:	2300      	movs	r3, #0
 800ec72:	75fb      	strb	r3, [r7, #23]
 800ec74:	e001      	b.n	800ec7a <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800ec76:	23fa      	movs	r3, #250	; 0xfa
 800ec78:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800ec7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3718      	adds	r7, #24
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b086      	sub	sp, #24
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	60f8      	str	r0, [r7, #12]
 800ec8e:	60b9      	str	r1, [r7, #8]
 800ec90:	4613      	mov	r3, r2
 800ec92:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800ec94:	88fb      	ldrh	r3, [r7, #6]
 800ec96:	461a      	mov	r2, r3
 800ec98:	68b9      	ldr	r1, [r7, #8]
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f7ff fddc 	bl	800e858 <nm_spi_write>
 800eca0:	4603      	mov	r3, r0
 800eca2:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800eca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d102      	bne.n	800ecb2 <nm_spi_write_block+0x2c>
 800ecac:	2300      	movs	r3, #0
 800ecae:	75fb      	strb	r3, [r7, #23]
 800ecb0:	e001      	b.n	800ecb6 <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800ecb2:	23fa      	movs	r3, #250	; 0xfa
 800ecb4:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800ecb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3718      	adds	r7, #24
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b088      	sub	sp, #32
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60b9      	str	r1, [r7, #8]
 800eccc:	607b      	str	r3, [r7, #4]
 800ecce:	4603      	mov	r3, r0
 800ecd0:	73fb      	strb	r3, [r7, #15]
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	73bb      	strb	r3, [r7, #14]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
 800ecd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f000 808d 	beq.w	800edf8 <Socket_ReadSocketData+0x134>
 800ecde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ece2:	4a47      	ldr	r2, [pc, #284]	; (800ee00 <Socket_ReadSocketData+0x13c>)
 800ece4:	011b      	lsls	r3, r3, #4
 800ece6:	4413      	add	r3, r2
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 8084 	beq.w	800edf8 <Socket_ReadSocketData+0x134>
 800ecf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecf4:	4a42      	ldr	r2, [pc, #264]	; (800ee00 <Socket_ReadSocketData+0x13c>)
 800ecf6:	011b      	lsls	r3, r3, #4
 800ecf8:	4413      	add	r3, r2
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d079      	beq.n	800edf8 <Socket_ReadSocketData+0x134>
 800ed04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed08:	4a3d      	ldr	r2, [pc, #244]	; (800ee00 <Socket_ReadSocketData+0x13c>)
 800ed0a:	011b      	lsls	r3, r3, #4
 800ed0c:	4413      	add	r3, r2
 800ed0e:	330a      	adds	r3, #10
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d16f      	bne.n	800edf8 <Socket_ReadSocketData+0x134>
	{
		uint32	u32Address = u32StartAddress;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ed20:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
 800ed22:	2301      	movs	r3, #1
 800ed24:	767b      	strb	r3, [r7, #25]
			u16Read = u16ReadCount;
 800ed26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed28:	837b      	strh	r3, [r7, #26]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
 800ed2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed2e:	4a34      	ldr	r2, [pc, #208]	; (800ee00 <Socket_ReadSocketData+0x13c>)
 800ed30:	011b      	lsls	r3, r3, #4
 800ed32:	4413      	add	r3, r2
 800ed34:	3304      	adds	r3, #4
 800ed36:	881b      	ldrh	r3, [r3, #0]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	8b7a      	ldrh	r2, [r7, #26]
 800ed3c:	1ad3      	subs	r3, r2, r3
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	82fb      	strh	r3, [r7, #22]
			if(s16Diff > 0)
 800ed42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	dd09      	ble.n	800ed5e <Socket_ReadSocketData+0x9a>
			{
				u8SetRxDone = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	767b      	strb	r3, [r7, #25]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
 800ed4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed52:	4a2b      	ldr	r2, [pc, #172]	; (800ee00 <Socket_ReadSocketData+0x13c>)
 800ed54:	011b      	lsls	r3, r3, #4
 800ed56:	4413      	add	r3, r2
 800ed58:	3304      	adds	r3, #4
 800ed5a:	881b      	ldrh	r3, [r3, #0]
 800ed5c:	837b      	strh	r3, [r7, #26]
			}

			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
 800ed5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed62:	4a27      	ldr	r2, [pc, #156]	; (800ee00 <Socket_ReadSocketData+0x13c>)
 800ed64:	011b      	lsls	r3, r3, #4
 800ed66:	4413      	add	r3, r2
 800ed68:	6819      	ldr	r1, [r3, #0]
 800ed6a:	7e7b      	ldrb	r3, [r7, #25]
 800ed6c:	8b7a      	ldrh	r2, [r7, #26]
 800ed6e:	69f8      	ldr	r0, [r7, #28]
 800ed70:	f7fe f8fa 	bl	800cf68 <hif_receive>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d13d      	bne.n	800edf6 <Socket_ReadSocketData+0x132>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
 800ed7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed7e:	4a20      	ldr	r2, [pc, #128]	; (800ee00 <Socket_ReadSocketData+0x13c>)
 800ed80:	011b      	lsls	r3, r3, #4
 800ed82:	4413      	add	r3, r2
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
 800ed8a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	88da      	ldrh	r2, [r3, #6]
 800ed96:	8b7b      	ldrh	r3, [r7, #26]
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
 800eda0:	4b18      	ldr	r3, [pc, #96]	; (800ee04 <Socket_ReadSocketData+0x140>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d006      	beq.n	800edb6 <Socket_ReadSocketData+0xf2>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
 800eda8:	4b16      	ldr	r3, [pc, #88]	; (800ee04 <Socket_ReadSocketData+0x140>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	7bb9      	ldrb	r1, [r7, #14]
 800edae:	f997 000f 	ldrsb.w	r0, [r7, #15]
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	4798      	blx	r3

				u16ReadCount -= u16Read;
 800edb6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800edb8:	8b7b      	ldrh	r3, [r7, #26]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	853b      	strh	r3, [r7, #40]	; 0x28
				u32Address += u16Read;
 800edbe:	8b7b      	ldrh	r3, [r7, #26]
 800edc0:	69fa      	ldr	r2, [r7, #28]
 800edc2:	4413      	add	r3, r2
 800edc4:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
 800edc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edca:	4a0d      	ldr	r2, [pc, #52]	; (800ee00 <Socket_ReadSocketData+0x13c>)
 800edcc:	011b      	lsls	r3, r3, #4
 800edce:	4413      	add	r3, r2
 800edd0:	330a      	adds	r3, #10
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d109      	bne.n	800edee <Socket_ReadSocketData+0x12a>
 800edda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d006      	beq.n	800edee <Socket_ReadSocketData+0x12a>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 800ede0:	2301      	movs	r3, #1
 800ede2:	2200      	movs	r2, #0
 800ede4:	2100      	movs	r1, #0
 800ede6:	2000      	movs	r0, #0
 800ede8:	f7fe f8be 	bl	800cf68 <hif_receive>
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
 800edec:	e004      	b.n	800edf8 <Socket_ReadSocketData+0x134>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
 800edee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d196      	bne.n	800ed22 <Socket_ReadSocketData+0x5e>
	}
}
 800edf4:	e000      	b.n	800edf8 <Socket_ReadSocketData+0x134>
				break;
 800edf6:	bf00      	nop
}
 800edf8:	bf00      	nop
 800edfa:	3720      	adds	r7, #32
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	24000d38 	.word	0x24000d38
 800ee04:	24000de8 	.word	0x24000de8

0800ee08 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b0ba      	sub	sp, #232	; 0xe8
 800ee0c:	af02      	add	r7, sp, #8
 800ee0e:	4603      	mov	r3, r0
 800ee10:	603a      	str	r2, [r7, #0]
 800ee12:	71fb      	strb	r3, [r7, #7]
 800ee14:	460b      	mov	r3, r1
 800ee16:	80bb      	strh	r3, [r7, #4]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
 800ee18:	79fb      	ldrb	r3, [r7, #7]
 800ee1a:	2b41      	cmp	r3, #65	; 0x41
 800ee1c:	d002      	beq.n	800ee24 <m2m_ip_cb+0x1c>
 800ee1e:	79fb      	ldrb	r3, [r7, #7]
 800ee20:	2b54      	cmp	r3, #84	; 0x54
 800ee22:	d11c      	bne.n	800ee5e <m2m_ip_cb+0x56>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
 800ee24:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800ee28:	2300      	movs	r3, #0
 800ee2a:	2204      	movs	r2, #4
 800ee2c:	6838      	ldr	r0, [r7, #0]
 800ee2e:	f7fe f89b 	bl	800cf68 <hif_receive>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	f040 81f3 	bne.w	800f220 <m2m_ip_cb+0x418>
		{
			strBind.status = strBindReply.s8Status;
 800ee3a:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
 800ee3e:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			if(gpfAppSocketCb)
 800ee42:	4bc2      	ldr	r3, [pc, #776]	; (800f14c <m2m_ip_cb+0x344>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f000 81ea 	beq.w	800f220 <m2m_ip_cb+0x418>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
 800ee4c:	4bbf      	ldr	r3, [pc, #764]	; (800f14c <m2m_ip_cb+0x344>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f997 00cc 	ldrsb.w	r0, [r7, #204]	; 0xcc
 800ee54:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800ee58:	2101      	movs	r1, #1
 800ee5a:	4798      	blx	r3
	{
 800ee5c:	e1e0      	b.n	800f220 <m2m_ip_cb+0x418>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	2b42      	cmp	r3, #66	; 0x42
 800ee62:	d11c      	bne.n	800ee9e <m2m_ip_cb+0x96>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
 800ee64:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800ee68:	2300      	movs	r3, #0
 800ee6a:	2204      	movs	r2, #4
 800ee6c:	6838      	ldr	r0, [r7, #0]
 800ee6e:	f7fe f87b 	bl	800cf68 <hif_receive>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f040 81da 	bne.w	800f22e <m2m_ip_cb+0x426>
		{
			strListen.status = strListenReply.s8Status;
 800ee7a:	f997 30c5 	ldrsb.w	r3, [r7, #197]	; 0xc5
 800ee7e:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			if(gpfAppSocketCb)
 800ee82:	4bb2      	ldr	r3, [pc, #712]	; (800f14c <m2m_ip_cb+0x344>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	f000 81d1 	beq.w	800f22e <m2m_ip_cb+0x426>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
 800ee8c:	4baf      	ldr	r3, [pc, #700]	; (800f14c <m2m_ip_cb+0x344>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f997 00c4 	ldrsb.w	r0, [r7, #196]	; 0xc4
 800ee94:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800ee98:	2102      	movs	r1, #2
 800ee9a:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
 800ee9c:	e1c7      	b.n	800f22e <m2m_ip_cb+0x426>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	2b43      	cmp	r3, #67	; 0x43
 800eea2:	d170      	bne.n	800ef86 <m2m_ip_cb+0x17e>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
 800eea4:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800eea8:	2300      	movs	r3, #0
 800eeaa:	220c      	movs	r2, #12
 800eeac:	6838      	ldr	r0, [r7, #0]
 800eeae:	f7fe f85b 	bl	800cf68 <hif_receive>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f040 81ba 	bne.w	800f22e <m2m_ip_cb+0x426>
			if(strAcceptReply.sConnectedSock >= 0)
 800eeba:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	db44      	blt.n	800ef4c <m2m_ip_cb+0x144>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
 800eec2:	f997 30bc 	ldrsb.w	r3, [r7, #188]	; 0xbc
 800eec6:	f997 20bd 	ldrsb.w	r2, [r7, #189]	; 0xbd
 800eeca:	4610      	mov	r0, r2
 800eecc:	4aa0      	ldr	r2, [pc, #640]	; (800f150 <m2m_ip_cb+0x348>)
 800eece:	011b      	lsls	r3, r3, #4
 800eed0:	4413      	add	r3, r2
 800eed2:	330b      	adds	r3, #11
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	b2d9      	uxtb	r1, r3
 800eed8:	4a9d      	ldr	r2, [pc, #628]	; (800f150 <m2m_ip_cb+0x348>)
 800eeda:	0103      	lsls	r3, r0, #4
 800eedc:	4413      	add	r3, r2
 800eede:	330b      	adds	r3, #11
 800eee0:	460a      	mov	r2, r1
 800eee2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
 800eee4:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 800eee8:	4a99      	ldr	r2, [pc, #612]	; (800f150 <m2m_ip_cb+0x348>)
 800eeea:	011b      	lsls	r3, r3, #4
 800eeec:	4413      	add	r3, r2
 800eeee:	330a      	adds	r3, #10
 800eef0:	2201      	movs	r2, #1
 800eef2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 800eef4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800eef8:	f997 20bd 	ldrsb.w	r2, [r7, #189]	; 0xbd
 800eefc:	4610      	mov	r0, r2
 800eefe:	3b08      	subs	r3, #8
 800ef00:	b299      	uxth	r1, r3
 800ef02:	4a93      	ldr	r2, [pc, #588]	; (800f150 <m2m_ip_cb+0x348>)
 800ef04:	0103      	lsls	r3, r0, #4
 800ef06:	4413      	add	r3, r2
 800ef08:	3308      	adds	r3, #8
 800ef0a:	460a      	mov	r2, r1
 800ef0c:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
 800ef0e:	4b91      	ldr	r3, [pc, #580]	; (800f154 <m2m_ip_cb+0x34c>)
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	3301      	adds	r3, #1
 800ef16:	b29a      	uxth	r2, r3
 800ef18:	4b8e      	ldr	r3, [pc, #568]	; (800f154 <m2m_ip_cb+0x34c>)
 800ef1a:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
 800ef1c:	4b8d      	ldr	r3, [pc, #564]	; (800f154 <m2m_ip_cb+0x34c>)
 800ef1e:	881b      	ldrh	r3, [r3, #0]
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d106      	bne.n	800ef34 <m2m_ip_cb+0x12c>
					++gu16SessionID;
 800ef26:	4b8b      	ldr	r3, [pc, #556]	; (800f154 <m2m_ip_cb+0x34c>)
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	4b88      	ldr	r3, [pc, #544]	; (800f154 <m2m_ip_cb+0x34c>)
 800ef32:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
 800ef34:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 800ef38:	4618      	mov	r0, r3
 800ef3a:	4b86      	ldr	r3, [pc, #536]	; (800f154 <m2m_ip_cb+0x34c>)
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	b299      	uxth	r1, r3
 800ef40:	4a83      	ldr	r2, [pc, #524]	; (800f150 <m2m_ip_cb+0x348>)
 800ef42:	0103      	lsls	r3, r0, #4
 800ef44:	4413      	add	r3, r2
 800ef46:	3306      	adds	r3, #6
 800ef48:	460a      	mov	r2, r1
 800ef4a:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
 800ef4c:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 800ef50:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
			strAccept.strAddr.sin_family		= AF_INET;
 800ef54:	2302      	movs	r3, #2
 800ef56:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
 800ef5a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ef5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
 800ef62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			if(gpfAppSocketCb)
 800ef6a:	4b78      	ldr	r3, [pc, #480]	; (800f14c <m2m_ip_cb+0x344>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f000 815d 	beq.w	800f22e <m2m_ip_cb+0x426>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
 800ef74:	4b75      	ldr	r3, [pc, #468]	; (800f14c <m2m_ip_cb+0x344>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f997 00bc 	ldrsb.w	r0, [r7, #188]	; 0xbc
 800ef7c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800ef80:	2104      	movs	r1, #4
 800ef82:	4798      	blx	r3
}
 800ef84:	e153      	b.n	800f22e <m2m_ip_cb+0x426>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	2b44      	cmp	r3, #68	; 0x44
 800ef8a:	d002      	beq.n	800ef92 <m2m_ip_cb+0x18a>
 800ef8c:	79fb      	ldrb	r3, [r7, #7]
 800ef8e:	2b4b      	cmp	r3, #75	; 0x4b
 800ef90:	d131      	bne.n	800eff6 <m2m_ip_cb+0x1ee>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
 800ef92:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800ef96:	2300      	movs	r3, #0
 800ef98:	2204      	movs	r2, #4
 800ef9a:	6838      	ldr	r0, [r7, #0]
 800ef9c:	f7fd ffe4 	bl	800cf68 <hif_receive>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f040 813e 	bne.w	800f224 <m2m_ip_cb+0x41c>
			strConnMsg.sock		= strConnectReply.sock;
 800efa8:	f997 309c 	ldrsb.w	r3, [r7, #156]	; 0x9c
 800efac:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			strConnMsg.s8Error	= strConnectReply.s8Error;
 800efb0:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 800efb4:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
 800efb8:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10c      	bne.n	800efda <m2m_ip_cb+0x1d2>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 800efc0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800efc4:	f997 209c 	ldrsb.w	r2, [r7, #156]	; 0x9c
 800efc8:	4610      	mov	r0, r2
 800efca:	3b08      	subs	r3, #8
 800efcc:	b299      	uxth	r1, r3
 800efce:	4a60      	ldr	r2, [pc, #384]	; (800f150 <m2m_ip_cb+0x348>)
 800efd0:	0103      	lsls	r3, r0, #4
 800efd2:	4413      	add	r3, r2
 800efd4:	3308      	adds	r3, #8
 800efd6:	460a      	mov	r2, r1
 800efd8:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
 800efda:	4b5c      	ldr	r3, [pc, #368]	; (800f14c <m2m_ip_cb+0x344>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f000 8120 	beq.w	800f224 <m2m_ip_cb+0x41c>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
 800efe4:	4b59      	ldr	r3, [pc, #356]	; (800f14c <m2m_ip_cb+0x344>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f997 009c 	ldrsb.w	r0, [r7, #156]	; 0x9c
 800efec:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800eff0:	2105      	movs	r1, #5
 800eff2:	4798      	blx	r3
	{
 800eff4:	e116      	b.n	800f224 <m2m_ip_cb+0x41c>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
 800eff6:	79fb      	ldrb	r3, [r7, #7]
 800eff8:	2b4a      	cmp	r3, #74	; 0x4a
 800effa:	d117      	bne.n	800f02c <m2m_ip_cb+0x224>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
 800effc:	f107 010c 	add.w	r1, r7, #12
 800f000:	2300      	movs	r3, #0
 800f002:	2244      	movs	r2, #68	; 0x44
 800f004:	6838      	ldr	r0, [r7, #0]
 800f006:	f7fd ffaf 	bl	800cf68 <hif_receive>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	f040 810e 	bne.w	800f22e <m2m_ip_cb+0x426>
			if(gpfAppResolveCb)
 800f012:	4b51      	ldr	r3, [pc, #324]	; (800f158 <m2m_ip_cb+0x350>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f000 8109 	beq.w	800f22e <m2m_ip_cb+0x426>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
 800f01c:	4b4e      	ldr	r3, [pc, #312]	; (800f158 <m2m_ip_cb+0x350>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f022:	f107 020c 	add.w	r2, r7, #12
 800f026:	4610      	mov	r0, r2
 800f028:	4798      	blx	r3
}
 800f02a:	e100      	b.n	800f22e <m2m_ip_cb+0x426>
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
 800f02c:	79fb      	ldrb	r3, [r7, #7]
 800f02e:	2b46      	cmp	r3, #70	; 0x46
 800f030:	d006      	beq.n	800f040 <m2m_ip_cb+0x238>
 800f032:	79fb      	ldrb	r3, [r7, #7]
 800f034:	2b48      	cmp	r3, #72	; 0x48
 800f036:	d003      	beq.n	800f040 <m2m_ip_cb+0x238>
 800f038:	79fb      	ldrb	r3, [r7, #7]
 800f03a:	2b4d      	cmp	r3, #77	; 0x4d
 800f03c:	f040 808e 	bne.w	800f15c <m2m_ip_cb+0x354>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
 800f040:	2306      	movs	r3, #6
 800f042:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		if(u8OpCode == SOCKET_CMD_RECVFROM)
 800f046:	79fb      	ldrb	r3, [r7, #7]
 800f048:	2b48      	cmp	r3, #72	; 0x48
 800f04a:	d102      	bne.n	800f052 <m2m_ip_cb+0x24a>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
 800f04c:	2309      	movs	r3, #9
 800f04e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		u16ReadSize = sizeof(tstrRecvReply);
 800f052:	2310      	movs	r3, #16
 800f054:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
 800f058:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 800f05c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800f060:	2300      	movs	r3, #0
 800f062:	6838      	ldr	r0, [r7, #0]
 800f064:	f7fd ff80 	bl	800cf68 <hif_receive>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f040 80dc 	bne.w	800f228 <m2m_ip_cb+0x420>
			uint16 u16SessionID = 0;
 800f070:	2300      	movs	r3, #0
 800f072:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			sock			= strRecvReply.sock;
 800f076:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800f07a:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			u16SessionID = strRecvReply.u16SessionID;
 800f07e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f082:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			gastrSockets[sock].bIsRecvPending = 0;
 800f086:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 800f08a:	4a31      	ldr	r2, [pc, #196]	; (800f150 <m2m_ip_cb+0x348>)
 800f08c:	011b      	lsls	r3, r3, #4
 800f08e:	4413      	add	r3, r2
 800f090:	330c      	adds	r3, #12
 800f092:	2200      	movs	r2, #0
 800f094:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
 800f096:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800f09a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
 800f09e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f0a2:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
 800f0a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f0aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
 800f0ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0b2:	67fb      	str	r3, [r7, #124]	; 0x7c
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 800f0b4:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 800f0b8:	4a25      	ldr	r2, [pc, #148]	; (800f150 <m2m_ip_cb+0x348>)
 800f0ba:	011b      	lsls	r3, r3, #4
 800f0bc:	4413      	add	r3, r2
 800f0be:	3306      	adds	r3, #6
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d133      	bne.n	800f134 <m2m_ip_cb+0x32c>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
 800f0cc:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	dd1a      	ble.n	800f10a <m2m_ip_cb+0x302>
 800f0d4:	f9b7 20d2 	ldrsh.w	r2, [r7, #210]	; 0xd2
 800f0d8:	88bb      	ldrh	r3, [r7, #4]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	da15      	bge.n	800f10a <m2m_ip_cb+0x302>
					u32Address += u16DataOffset;
 800f0de:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800f0e2:	683a      	ldr	r2, [r7, #0]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
 800f0e8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800f0ec:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
 800f0f0:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 800f0f4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800f0f8:	f997 00d5 	ldrsb.w	r0, [r7, #213]	; 0xd5
 800f0fc:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	f7ff fdde 	bl	800ecc4 <Socket_ReadSocketData>
	{
 800f108:	e08e      	b.n	800f228 <m2m_ip_cb+0x420>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
 800f10a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800f10e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
					strRecvMsg.pu8Buffer		= NULL;
 800f112:	2300      	movs	r3, #0
 800f114:	673b      	str	r3, [r7, #112]	; 0x70
					if(gpfAppSocketCb)
 800f116:	4b0d      	ldr	r3, [pc, #52]	; (800f14c <m2m_ip_cb+0x344>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f000 8084 	beq.w	800f228 <m2m_ip_cb+0x420>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
 800f120:	4b0a      	ldr	r3, [pc, #40]	; (800f14c <m2m_ip_cb+0x344>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800f128:	f897 10df 	ldrb.w	r1, [r7, #223]	; 0xdf
 800f12c:	f997 00d5 	ldrsb.w	r0, [r7, #213]	; 0xd5
 800f130:	4798      	blx	r3
	{
 800f132:	e079      	b.n	800f228 <m2m_ip_cb+0x420>
				if(u16ReadSize < u16BufferSize)
 800f134:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 800f138:	88bb      	ldrh	r3, [r7, #4]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d274      	bcs.n	800f228 <m2m_ip_cb+0x420>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 800f13e:	2301      	movs	r3, #1
 800f140:	2200      	movs	r2, #0
 800f142:	2100      	movs	r1, #0
 800f144:	2000      	movs	r0, #0
 800f146:	f7fd ff0f 	bl	800cf68 <hif_receive>
	{
 800f14a:	e06d      	b.n	800f228 <m2m_ip_cb+0x420>
 800f14c:	24000de8 	.word	0x24000de8
 800f150:	24000d38 	.word	0x24000d38
 800f154:	240009e2 	.word	0x240009e2
 800f158:	24000df0 	.word	0x24000df0
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	2b45      	cmp	r3, #69	; 0x45
 800f160:	d005      	beq.n	800f16e <m2m_ip_cb+0x366>
 800f162:	79fb      	ldrb	r3, [r7, #7]
 800f164:	2b47      	cmp	r3, #71	; 0x47
 800f166:	d002      	beq.n	800f16e <m2m_ip_cb+0x366>
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	2b4c      	cmp	r3, #76	; 0x4c
 800f16c:	d13b      	bne.n	800f1e6 <m2m_ip_cb+0x3de>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
 800f16e:	2307      	movs	r3, #7
 800f170:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
		if(u8OpCode == SOCKET_CMD_SENDTO)
 800f174:	79fb      	ldrb	r3, [r7, #7]
 800f176:	2b47      	cmp	r3, #71	; 0x47
 800f178:	d102      	bne.n	800f180 <m2m_ip_cb+0x378>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
 800f17a:	2308      	movs	r3, #8
 800f17c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
 800f180:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800f184:	2300      	movs	r3, #0
 800f186:	2208      	movs	r2, #8
 800f188:	6838      	ldr	r0, [r7, #0]
 800f18a:	f7fd feed 	bl	800cf68 <hif_receive>
 800f18e:	4603      	mov	r3, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	d14b      	bne.n	800f22c <m2m_ip_cb+0x424>
			uint16 u16SessionID = 0;
 800f194:	2300      	movs	r3, #0
 800f196:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			sock = strReply.sock;
 800f19a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800f19e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
			u16SessionID = strReply.u16SessionID;
 800f1a2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800f1a6:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
 800f1aa:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800f1ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 800f1b2:	f997 30db 	ldrsb.w	r3, [r7, #219]	; 0xdb
 800f1b6:	4a20      	ldr	r2, [pc, #128]	; (800f238 <m2m_ip_cb+0x430>)
 800f1b8:	011b      	lsls	r3, r3, #4
 800f1ba:	4413      	add	r3, r2
 800f1bc:	3306      	adds	r3, #6
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d130      	bne.n	800f22c <m2m_ip_cb+0x424>
				if(gpfAppSocketCb)
 800f1ca:	4b1c      	ldr	r3, [pc, #112]	; (800f23c <m2m_ip_cb+0x434>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d02c      	beq.n	800f22c <m2m_ip_cb+0x424>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
 800f1d2:	4b1a      	ldr	r3, [pc, #104]	; (800f23c <m2m_ip_cb+0x434>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 800f1da:	f897 10de 	ldrb.w	r1, [r7, #222]	; 0xde
 800f1de:	f997 00db 	ldrsb.w	r0, [r7, #219]	; 0xdb
 800f1e2:	4798      	blx	r3
	{
 800f1e4:	e022      	b.n	800f22c <m2m_ip_cb+0x424>
	else if(u8OpCode == SOCKET_CMD_PING)
 800f1e6:	79fb      	ldrb	r3, [r7, #7]
 800f1e8:	2b52      	cmp	r3, #82	; 0x52
 800f1ea:	d120      	bne.n	800f22e <m2m_ip_cb+0x426>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
 800f1ec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	2214      	movs	r2, #20
 800f1f4:	6838      	ldr	r0, [r7, #0]
 800f1f6:	f7fd feb7 	bl	800cf68 <hif_receive>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d116      	bne.n	800f22e <m2m_ip_cb+0x426>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
 800f200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f202:	461a      	mov	r2, r3
 800f204:	4b0e      	ldr	r3, [pc, #56]	; (800f240 <m2m_ip_cb+0x438>)
 800f206:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
 800f208:	4b0d      	ldr	r3, [pc, #52]	; (800f240 <m2m_ip_cb+0x438>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00e      	beq.n	800f22e <m2m_ip_cb+0x426>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
 800f210:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <m2m_ip_cb+0x438>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f218:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f21c:	4798      	blx	r3
}
 800f21e:	e006      	b.n	800f22e <m2m_ip_cb+0x426>
	{
 800f220:	bf00      	nop
 800f222:	e004      	b.n	800f22e <m2m_ip_cb+0x426>
	{
 800f224:	bf00      	nop
 800f226:	e002      	b.n	800f22e <m2m_ip_cb+0x426>
	{
 800f228:	bf00      	nop
 800f22a:	e000      	b.n	800f22e <m2m_ip_cb+0x426>
	{
 800f22c:	bf00      	nop
}
 800f22e:	bf00      	nop
 800f230:	37e0      	adds	r7, #224	; 0xe0
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	24000d38 	.word	0x24000d38
 800f23c:	24000de8 	.word	0x24000de8
 800f240:	24000dec 	.word	0x24000dec

0800f244 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
 800f248:	4b0a      	ldr	r3, [pc, #40]	; (800f274 <socketInit+0x30>)
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10e      	bne.n	800f270 <socketInit+0x2c>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 800f252:	22b0      	movs	r2, #176	; 0xb0
 800f254:	2100      	movs	r1, #0
 800f256:	4808      	ldr	r0, [pc, #32]	; (800f278 <socketInit+0x34>)
 800f258:	f7fd f9fe 	bl	800c658 <m2m_memset>
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
 800f25c:	4907      	ldr	r1, [pc, #28]	; (800f27c <socketInit+0x38>)
 800f25e:	2002      	movs	r0, #2
 800f260:	f7fd ff18 	bl	800d094 <hif_register_cb>
		gbSocketInit	= 1;
 800f264:	4b03      	ldr	r3, [pc, #12]	; (800f274 <socketInit+0x30>)
 800f266:	2201      	movs	r2, #1
 800f268:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
 800f26a:	4b05      	ldr	r3, [pc, #20]	; (800f280 <socketInit+0x3c>)
 800f26c:	2200      	movs	r2, #0
 800f26e:	801a      	strh	r2, [r3, #0]
	}
}
 800f270:	bf00      	nop
 800f272:	bd80      	pop	{r7, pc}
 800f274:	240009e4 	.word	0x240009e4
 800f278:	24000d38 	.word	0x24000d38
 800f27c:	0800ee09 	.word	0x0800ee09
 800f280:	240009e2 	.word	0x240009e2

0800f284 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
 800f28e:	4a06      	ldr	r2, [pc, #24]	; (800f2a8 <registerSocketCallback+0x24>)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb = pfAppResolveCb;
 800f294:	4a05      	ldr	r2, [pc, #20]	; (800f2ac <registerSocketCallback+0x28>)
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	6013      	str	r3, [r2, #0]
}
 800f29a:	bf00      	nop
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	24000de8 	.word	0x24000de8
 800f2ac:	24000df0 	.word	0x24000df0

0800f2b0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b08c      	sub	sp, #48	; 0x30
 800f2b4:	af04      	add	r7, sp, #16
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	80fb      	strh	r3, [r7, #6]
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	717b      	strb	r3, [r7, #5]
 800f2be:	4613      	mov	r3, r2
 800f2c0:	713b      	strb	r3, [r7, #4]
	SOCKET					sock = -1;
 800f2c2:	23ff      	movs	r3, #255	; 0xff
 800f2c4:	77fb      	strb	r3, [r7, #31]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
 800f2c6:	88fb      	ldrh	r3, [r7, #6]
 800f2c8:	2b02      	cmp	r3, #2
 800f2ca:	f040 809c 	bne.w	800f406 <socket+0x156>
	{
		if(u8Type == SOCK_STREAM)
 800f2ce:	797b      	ldrb	r3, [r7, #5]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d12d      	bne.n	800f330 <socket+0x80>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	77bb      	strb	r3, [r7, #30]
 800f2d8:	e026      	b.n	800f328 <socket+0x78>
			{
				u8SockID	= u8NextTcpSock;
 800f2da:	4b4e      	ldr	r3, [pc, #312]	; (800f414 <socket+0x164>)
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	74fb      	strb	r3, [r7, #19]
				pstrSock	= &gastrSockets[u8NextTcpSock];
 800f2e0:	4b4c      	ldr	r3, [pc, #304]	; (800f414 <socket+0x164>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	011b      	lsls	r3, r3, #4
 800f2e8:	4a4b      	ldr	r2, [pc, #300]	; (800f418 <socket+0x168>)
 800f2ea:	4413      	add	r3, r2
 800f2ec:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
 800f2ee:	4b49      	ldr	r3, [pc, #292]	; (800f414 <socket+0x164>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	1c5a      	adds	r2, r3, #1
 800f2f6:	4b49      	ldr	r3, [pc, #292]	; (800f41c <socket+0x16c>)
 800f2f8:	fb83 1302 	smull	r1, r3, r3, r2
 800f2fc:	4413      	add	r3, r2
 800f2fe:	1099      	asrs	r1, r3, #2
 800f300:	17d3      	asrs	r3, r2, #31
 800f302:	1ac9      	subs	r1, r1, r3
 800f304:	460b      	mov	r3, r1
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	1a5b      	subs	r3, r3, r1
 800f30a:	1ad1      	subs	r1, r2, r3
 800f30c:	b2ca      	uxtb	r2, r1
 800f30e:	4b41      	ldr	r3, [pc, #260]	; (800f414 <socket+0x164>)
 800f310:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	7a9b      	ldrb	r3, [r3, #10]
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d102      	bne.n	800f322 <socket+0x72>
				{
					sock = (SOCKET)u8SockID;
 800f31c:	7cfb      	ldrb	r3, [r7, #19]
 800f31e:	77fb      	strb	r3, [r7, #31]
					break;
 800f320:	e036      	b.n	800f390 <socket+0xe0>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800f322:	7fbb      	ldrb	r3, [r7, #30]
 800f324:	3301      	adds	r3, #1
 800f326:	77bb      	strb	r3, [r7, #30]
 800f328:	7fbb      	ldrb	r3, [r7, #30]
 800f32a:	2b06      	cmp	r3, #6
 800f32c:	d9d5      	bls.n	800f2da <socket+0x2a>
 800f32e:	e02f      	b.n	800f390 <socket+0xe0>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
 800f330:	797b      	ldrb	r3, [r7, #5]
 800f332:	2b02      	cmp	r3, #2
 800f334:	d12c      	bne.n	800f390 <socket+0xe0>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
 800f336:	4b3a      	ldr	r3, [pc, #232]	; (800f420 <socket+0x170>)
 800f338:	617b      	str	r3, [r7, #20]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800f33a:	2300      	movs	r3, #0
 800f33c:	77bb      	strb	r3, [r7, #30]
 800f33e:	e024      	b.n	800f38a <socket+0xda>
			{
				u8SockID		= u8NextUdpSock;
 800f340:	4b38      	ldr	r3, [pc, #224]	; (800f424 <socket+0x174>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	74fb      	strb	r3, [r7, #19]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
 800f346:	4b37      	ldr	r3, [pc, #220]	; (800f424 <socket+0x174>)
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	011b      	lsls	r3, r3, #4
 800f34e:	697a      	ldr	r2, [r7, #20]
 800f350:	4413      	add	r3, r2
 800f352:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
 800f354:	4b33      	ldr	r3, [pc, #204]	; (800f424 <socket+0x174>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	3301      	adds	r3, #1
 800f35c:	425a      	negs	r2, r3
 800f35e:	f003 0303 	and.w	r3, r3, #3
 800f362:	f002 0203 	and.w	r2, r2, #3
 800f366:	bf58      	it	pl
 800f368:	4253      	negpl	r3, r2
 800f36a:	b2da      	uxtb	r2, r3
 800f36c:	4b2d      	ldr	r3, [pc, #180]	; (800f424 <socket+0x174>)
 800f36e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	7a9b      	ldrb	r3, [r3, #10]
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d104      	bne.n	800f384 <socket+0xd4>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
 800f37a:	7cfb      	ldrb	r3, [r7, #19]
 800f37c:	3307      	adds	r3, #7
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	77fb      	strb	r3, [r7, #31]
					break;
 800f382:	e005      	b.n	800f390 <socket+0xe0>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800f384:	7fbb      	ldrb	r3, [r7, #30]
 800f386:	3301      	adds	r3, #1
 800f388:	77bb      	strb	r3, [r7, #30]
 800f38a:	7fbb      	ldrb	r3, [r7, #30]
 800f38c:	2b03      	cmp	r3, #3
 800f38e:	d9d7      	bls.n	800f340 <socket+0x90>
				}
			}
		}

		if(sock >= 0)
 800f390:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f394:	2b00      	cmp	r3, #0
 800f396:	db36      	blt.n	800f406 <socket+0x156>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 800f398:	2210      	movs	r2, #16
 800f39a:	2100      	movs	r1, #0
 800f39c:	69b8      	ldr	r0, [r7, #24]
 800f39e:	f7fd f95b 	bl	800c658 <m2m_memset>
			pstrSock->bIsUsed = 1;
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
 800f3a8:	4b1f      	ldr	r3, [pc, #124]	; (800f428 <socket+0x178>)
 800f3aa:	881b      	ldrh	r3, [r3, #0]
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	4b1d      	ldr	r3, [pc, #116]	; (800f428 <socket+0x178>)
 800f3b4:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
 800f3b6:	4b1c      	ldr	r3, [pc, #112]	; (800f428 <socket+0x178>)
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d106      	bne.n	800f3ce <socket+0x11e>
				++gu16SessionID;
 800f3c0:	4b19      	ldr	r3, [pc, #100]	; (800f428 <socket+0x178>)
 800f3c2:	881b      	ldrh	r3, [r3, #0]
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	4b17      	ldr	r3, [pc, #92]	; (800f428 <socket+0x178>)
 800f3cc:	801a      	strh	r2, [r3, #0]

			pstrSock->u16SessionID = gu16SessionID;
 800f3ce:	4b16      	ldr	r3, [pc, #88]	; (800f428 <socket+0x178>)
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );

			if(u8Flags & SOCKET_FLAGS_SSL)
 800f3d8:	793b      	ldrb	r3, [r7, #4]
 800f3da:	f003 0301 	and.w	r3, r3, #1
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d011      	beq.n	800f406 <socket+0x156>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
 800f3e2:	7ffb      	ldrb	r3, [r7, #31]
 800f3e4:	733b      	strb	r3, [r7, #12]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	2221      	movs	r2, #33	; 0x21
 800f3ea:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
 800f3ec:	f107 020c 	add.w	r2, r7, #12
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	9302      	str	r3, [sp, #8]
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	2304      	movs	r3, #4
 800f3fe:	2150      	movs	r1, #80	; 0x50
 800f400:	2002      	movs	r0, #2
 800f402:	f7fd fa3b 	bl	800c87c <hif_send>
			}
		}
	}
	return sock;
 800f406:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3720      	adds	r7, #32
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	240009e5 	.word	0x240009e5
 800f418:	24000d38 	.word	0x24000d38
 800f41c:	92492493 	.word	0x92492493
 800f420:	24000da8 	.word	0x24000da8
 800f424:	240009e6 	.word	0x240009e6
 800f428:	240009e2 	.word	0x240009e2

0800f42c <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b08a      	sub	sp, #40	; 0x28
 800f430:	af04      	add	r7, sp, #16
 800f432:	4603      	mov	r3, r0
 800f434:	6039      	str	r1, [r7, #0]
 800f436:	71fb      	strb	r3, [r7, #7]
 800f438:	4613      	mov	r3, r2
 800f43a:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f43c:	23fa      	movs	r3, #250	; 0xfa
 800f43e:	75fb      	strb	r3, [r7, #23]
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d047      	beq.n	800f4d6 <bind+0xaa>
 800f446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	db43      	blt.n	800f4d6 <bind+0xaa>
 800f44e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f452:	4a24      	ldr	r2, [pc, #144]	; (800f4e4 <bind+0xb8>)
 800f454:	011b      	lsls	r3, r3, #4
 800f456:	4413      	add	r3, r2
 800f458:	330a      	adds	r3, #10
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d139      	bne.n	800f4d6 <bind+0xaa>
 800f462:	79bb      	ldrb	r3, [r7, #6]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d036      	beq.n	800f4d6 <bind+0xaa>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
 800f468:	2341      	movs	r3, #65	; 0x41
 800f46a:	75bb      	strb	r3, [r7, #22]
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f46c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f470:	4a1c      	ldr	r2, [pc, #112]	; (800f4e4 <bind+0xb8>)
 800f472:	011b      	lsls	r3, r3, #4
 800f474:	4413      	add	r3, r2
 800f476:	330b      	adds	r3, #11
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	f003 0301 	and.w	r3, r3, #1
 800f480:	2b00      	cmp	r3, #0
 800f482:	d001      	beq.n	800f488 <bind+0x5c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
 800f484:	2354      	movs	r3, #84	; 0x54
 800f486:	75bb      	strb	r3, [r7, #22]
		}

		/* Build the bind request. */
		strBind.sock = sock;
 800f488:	79fb      	ldrb	r3, [r7, #7]
 800f48a:	743b      	strb	r3, [r7, #16]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 800f48c:	f107 0308 	add.w	r3, r7, #8
 800f490:	2208      	movs	r2, #8
 800f492:	6839      	ldr	r1, [r7, #0]
 800f494:	4618      	mov	r0, r3
 800f496:	f7fd f8bf 	bl	800c618 <m2m_memcpy>
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f49e:	4a11      	ldr	r2, [pc, #68]	; (800f4e4 <bind+0xb8>)
 800f4a0:	011b      	lsls	r3, r3, #4
 800f4a2:	4413      	add	r3, r2
 800f4a4:	3306      	adds	r3, #6
 800f4a6:	881b      	ldrh	r3, [r3, #0]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	827b      	strh	r3, [r7, #18]

		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
 800f4ac:	f107 0208 	add.w	r2, r7, #8
 800f4b0:	7db9      	ldrb	r1, [r7, #22]
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	9302      	str	r3, [sp, #8]
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	9301      	str	r3, [sp, #4]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	230c      	movs	r3, #12
 800f4c0:	2002      	movs	r0, #2
 800f4c2:	f7fd f9db 	bl	800c87c <hif_send>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	75fb      	strb	r3, [r7, #23]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800f4ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d001      	beq.n	800f4d6 <bind+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
 800f4d2:	23f7      	movs	r3, #247	; 0xf7
 800f4d4:	75fb      	strb	r3, [r7, #23]
		}
	}
	return s8Ret;
 800f4d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3718      	adds	r7, #24
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	24000d38 	.word	0x24000d38

0800f4e8 <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b088      	sub	sp, #32
 800f4ec:	af04      	add	r7, sp, #16
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	460a      	mov	r2, r1
 800f4f2:	71fb      	strb	r3, [r7, #7]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f4f8:	23fa      	movs	r3, #250	; 0xfa
 800f4fa:	73fb      	strb	r3, [r7, #15]

	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 800f4fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f500:	2b00      	cmp	r3, #0
 800f502:	db2b      	blt.n	800f55c <listen+0x74>
 800f504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f508:	4a17      	ldr	r2, [pc, #92]	; (800f568 <listen+0x80>)
 800f50a:	011b      	lsls	r3, r3, #4
 800f50c:	4413      	add	r3, r2
 800f50e:	330a      	adds	r3, #10
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	b2db      	uxtb	r3, r3
 800f514:	2b01      	cmp	r3, #1
 800f516:	d121      	bne.n	800f55c <listen+0x74>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
 800f518:	79fb      	ldrb	r3, [r7, #7]
 800f51a:	723b      	strb	r3, [r7, #8]
		strListen.u8BackLog = backlog;
 800f51c:	79bb      	ldrb	r3, [r7, #6]
 800f51e:	727b      	strb	r3, [r7, #9]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f524:	4a10      	ldr	r2, [pc, #64]	; (800f568 <listen+0x80>)
 800f526:	011b      	lsls	r3, r3, #4
 800f528:	4413      	add	r3, r2
 800f52a:	3306      	adds	r3, #6
 800f52c:	881b      	ldrh	r3, [r3, #0]
 800f52e:	b29b      	uxth	r3, r3
 800f530:	817b      	strh	r3, [r7, #10]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
 800f532:	f107 0208 	add.w	r2, r7, #8
 800f536:	2300      	movs	r3, #0
 800f538:	9302      	str	r3, [sp, #8]
 800f53a:	2300      	movs	r3, #0
 800f53c:	9301      	str	r3, [sp, #4]
 800f53e:	2300      	movs	r3, #0
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	2304      	movs	r3, #4
 800f544:	2142      	movs	r1, #66	; 0x42
 800f546:	2002      	movs	r0, #2
 800f548:	f7fd f998 	bl	800c87c <hif_send>
 800f54c:	4603      	mov	r3, r0
 800f54e:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800f550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <listen+0x74>
		{
			s8Ret = SOCK_ERR_INVALID;
 800f558:	23f7      	movs	r3, #247	; 0xf7
 800f55a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return s8Ret;
 800f55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3710      	adds	r7, #16
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	24000d38 	.word	0x24000d38

0800f56c <accept>:

Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b087      	sub	sp, #28
 800f570:	af00      	add	r7, sp, #0
 800f572:	4603      	mov	r3, r0
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
 800f578:	73fb      	strb	r3, [r7, #15]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f57a:	23fa      	movs	r3, #250	; 0xfa
 800f57c:	75fb      	strb	r3, [r7, #23]

	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
 800f57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f582:	2b00      	cmp	r3, #0
 800f584:	db0b      	blt.n	800f59e <accept+0x32>
 800f586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f58a:	4a09      	ldr	r2, [pc, #36]	; (800f5b0 <accept+0x44>)
 800f58c:	011b      	lsls	r3, r3, #4
 800f58e:	4413      	add	r3, r2
 800f590:	330a      	adds	r3, #10
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	b2db      	uxtb	r3, r3
 800f596:	2b01      	cmp	r3, #1
 800f598:	d101      	bne.n	800f59e <accept+0x32>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
 800f59a:	2300      	movs	r3, #0
 800f59c:	75fb      	strb	r3, [r7, #23]
	}
	return s8Ret;
 800f59e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	371c      	adds	r7, #28
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	24000d38 	.word	0x24000d38

0800f5b4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b08e      	sub	sp, #56	; 0x38
 800f5b8:	af04      	add	r7, sp, #16
 800f5ba:	60b9      	str	r1, [r7, #8]
 800f5bc:	4611      	mov	r1, r2
 800f5be:	461a      	mov	r2, r3
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	73fb      	strb	r3, [r7, #15]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	81bb      	strh	r3, [r7, #12]
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	80fb      	strh	r3, [r7, #6]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 800f5cc:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800f5d0:	84fb      	strh	r3, [r7, #38]	; 0x26

	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 800f5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	db59      	blt.n	800f68e <send+0xda>
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d056      	beq.n	800f68e <send+0xda>
 800f5e0:	89bb      	ldrh	r3, [r7, #12]
 800f5e2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f5e6:	d852      	bhi.n	800f68e <send+0xda>
 800f5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5ec:	4a2b      	ldr	r2, [pc, #172]	; (800f69c <send+0xe8>)
 800f5ee:	011b      	lsls	r3, r3, #4
 800f5f0:	4413      	add	r3, r2
 800f5f2:	330a      	adds	r3, #10
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d148      	bne.n	800f68e <send+0xda>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
 800f5fc:	2345      	movs	r3, #69	; 0x45
 800f5fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
 800f602:	2350      	movs	r3, #80	; 0x50
 800f604:	84bb      	strh	r3, [r7, #36]	; 0x24

		strSend.sock			= sock;
 800f606:	7bfb      	ldrb	r3, [r7, #15]
 800f608:	743b      	strb	r3, [r7, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
 800f60a:	89bb      	ldrh	r3, [r7, #12]
 800f60c:	827b      	strh	r3, [r7, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
 800f60e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f612:	4a22      	ldr	r2, [pc, #136]	; (800f69c <send+0xe8>)
 800f614:	011b      	lsls	r3, r3, #4
 800f616:	4413      	add	r3, r2
 800f618:	3306      	adds	r3, #6
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	83bb      	strh	r3, [r7, #28]

		if(sock >= TCP_SOCK_MAX)
 800f620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f624:	2b06      	cmp	r3, #6
 800f626:	dd01      	ble.n	800f62c <send+0x78>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
 800f628:	2344      	movs	r3, #68	; 0x44
 800f62a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f62c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f630:	4a1a      	ldr	r2, [pc, #104]	; (800f69c <send+0xe8>)
 800f632:	011b      	lsls	r3, r3, #4
 800f634:	4413      	add	r3, r2
 800f636:	330b      	adds	r3, #11
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	f003 0301 	and.w	r3, r3, #1
 800f640:	2b00      	cmp	r3, #0
 800f642:	d00a      	beq.n	800f65a <send+0xa6>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
 800f644:	234c      	movs	r3, #76	; 0x4c
 800f646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
 800f64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f64e:	4a13      	ldr	r2, [pc, #76]	; (800f69c <send+0xe8>)
 800f650:	011b      	lsls	r3, r3, #4
 800f652:	4413      	add	r3, r2
 800f654:	3308      	adds	r3, #8
 800f656:	881b      	ldrh	r3, [r3, #0]
 800f658:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		// about 9-10 msec
		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
 800f65a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f65e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f662:	b2d9      	uxtb	r1, r3
 800f664:	f107 0210 	add.w	r2, r7, #16
 800f668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f66a:	9302      	str	r3, [sp, #8]
 800f66c:	89bb      	ldrh	r3, [r7, #12]
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	2310      	movs	r3, #16
 800f676:	2002      	movs	r0, #2
 800f678:	f7fd f900 	bl	800c87c <hif_send>
 800f67c:	4603      	mov	r3, r0
 800f67e:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(s16Ret != SOCK_ERR_NO_ERROR)
 800f680:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f684:	2b00      	cmp	r3, #0
 800f686:	d002      	beq.n	800f68e <send+0xda>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
 800f688:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 800f68c:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

	}
	return s16Ret;
 800f68e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800f692:	4618      	mov	r0, r3
 800f694:	3728      	adds	r7, #40	; 0x28
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	24000d38 	.word	0x24000d38

0800f6a0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b08c      	sub	sp, #48	; 0x30
 800f6a4:	af04      	add	r7, sp, #16
 800f6a6:	60b9      	str	r1, [r7, #8]
 800f6a8:	607b      	str	r3, [r7, #4]
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	73fb      	strb	r3, [r7, #15]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	81bb      	strh	r3, [r7, #12]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 800f6b2:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800f6b6:	83fb      	strh	r3, [r7, #30]

	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 800f6b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	db6c      	blt.n	800f79a <recv+0xfa>
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d069      	beq.n	800f79a <recv+0xfa>
 800f6c6:	89bb      	ldrh	r3, [r7, #12]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d066      	beq.n	800f79a <recv+0xfa>
 800f6cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6d0:	4a35      	ldr	r2, [pc, #212]	; (800f7a8 <recv+0x108>)
 800f6d2:	011b      	lsls	r3, r3, #4
 800f6d4:	4413      	add	r3, r2
 800f6d6:	330a      	adds	r3, #10
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d15c      	bne.n	800f79a <recv+0xfa>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	83fb      	strh	r3, [r7, #30]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
 800f6e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6e8:	4a2f      	ldr	r2, [pc, #188]	; (800f7a8 <recv+0x108>)
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	4413      	add	r3, r2
 800f6ee:	68ba      	ldr	r2, [r7, #8]
 800f6f0:	601a      	str	r2, [r3, #0]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
 800f6f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6f6:	4a2c      	ldr	r2, [pc, #176]	; (800f7a8 <recv+0x108>)
 800f6f8:	011b      	lsls	r3, r3, #4
 800f6fa:	4413      	add	r3, r2
 800f6fc:	3304      	adds	r3, #4
 800f6fe:	89ba      	ldrh	r2, [r7, #12]
 800f700:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
 800f702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f706:	4a28      	ldr	r2, [pc, #160]	; (800f7a8 <recv+0x108>)
 800f708:	011b      	lsls	r3, r3, #4
 800f70a:	4413      	add	r3, r2
 800f70c:	330c      	adds	r3, #12
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	b2db      	uxtb	r3, r3
 800f712:	2b00      	cmp	r3, #0
 800f714:	d141      	bne.n	800f79a <recv+0xfa>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
 800f716:	2346      	movs	r3, #70	; 0x46
 800f718:	777b      	strb	r3, [r7, #29]

			gastrSockets[sock].bIsRecvPending = 1;
 800f71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f71e:	4a22      	ldr	r2, [pc, #136]	; (800f7a8 <recv+0x108>)
 800f720:	011b      	lsls	r3, r3, #4
 800f722:	4413      	add	r3, r2
 800f724:	330c      	adds	r3, #12
 800f726:	2201      	movs	r2, #1
 800f728:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f72e:	4a1e      	ldr	r2, [pc, #120]	; (800f7a8 <recv+0x108>)
 800f730:	011b      	lsls	r3, r3, #4
 800f732:	4413      	add	r3, r2
 800f734:	330b      	adds	r3, #11
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	f003 0301 	and.w	r3, r3, #1
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d001      	beq.n	800f746 <recv+0xa6>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
 800f742:	234d      	movs	r3, #77	; 0x4d
 800f744:	777b      	strb	r3, [r7, #29]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d103      	bne.n	800f754 <recv+0xb4>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 800f74c:	f04f 33ff 	mov.w	r3, #4294967295
 800f750:	617b      	str	r3, [r7, #20]
 800f752:	e001      	b.n	800f758 <recv+0xb8>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	617b      	str	r3, [r7, #20]
			strRecv.sock = sock;
 800f758:	7bfb      	ldrb	r3, [r7, #15]
 800f75a:	763b      	strb	r3, [r7, #24]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f75c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f760:	4a11      	ldr	r2, [pc, #68]	; (800f7a8 <recv+0x108>)
 800f762:	011b      	lsls	r3, r3, #4
 800f764:	4413      	add	r3, r2
 800f766:	3306      	adds	r3, #6
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	837b      	strh	r3, [r7, #26]

			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
 800f76e:	f107 0214 	add.w	r2, r7, #20
 800f772:	7f79      	ldrb	r1, [r7, #29]
 800f774:	2300      	movs	r3, #0
 800f776:	9302      	str	r3, [sp, #8]
 800f778:	2300      	movs	r3, #0
 800f77a:	9301      	str	r3, [sp, #4]
 800f77c:	2300      	movs	r3, #0
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	2308      	movs	r3, #8
 800f782:	2002      	movs	r0, #2
 800f784:	f7fd f87a 	bl	800c87c <hif_send>
 800f788:	4603      	mov	r3, r0
 800f78a:	83fb      	strh	r3, [r7, #30]
			if(s16Ret != SOCK_ERR_NO_ERROR)
 800f78c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d002      	beq.n	800f79a <recv+0xfa>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
 800f794:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 800f798:	83fb      	strh	r3, [r7, #30]
			}
		}
	}
	return s16Ret;
 800f79a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3720      	adds	r7, #32
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	24000d38 	.word	0x24000d38

0800f7ac <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b088      	sub	sp, #32
 800f7b0:	af04      	add	r7, sp, #16
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f7b6:	23fa      	movs	r3, #250	; 0xfa
 800f7b8:	73fb      	strb	r3, [r7, #15]
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 800f7ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	db53      	blt.n	800f86a <close+0xbe>
 800f7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7c6:	4a2c      	ldr	r2, [pc, #176]	; (800f878 <close+0xcc>)
 800f7c8:	011b      	lsls	r3, r3, #4
 800f7ca:	4413      	add	r3, r2
 800f7cc:	330a      	adds	r3, #10
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d149      	bne.n	800f86a <close+0xbe>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
 800f7d6:	2349      	movs	r3, #73	; 0x49
 800f7d8:	73bb      	strb	r3, [r7, #14]
		tstrCloseCmd strclose;
		strclose.sock = sock;
 800f7da:	79fb      	ldrb	r3, [r7, #7]
 800f7dc:	723b      	strb	r3, [r7, #8]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f7de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7e2:	4a25      	ldr	r2, [pc, #148]	; (800f878 <close+0xcc>)
 800f7e4:	011b      	lsls	r3, r3, #4
 800f7e6:	4413      	add	r3, r2
 800f7e8:	3306      	adds	r3, #6
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	817b      	strh	r3, [r7, #10]

		gastrSockets[sock].bIsUsed = 0;
 800f7f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7f4:	4a20      	ldr	r2, [pc, #128]	; (800f878 <close+0xcc>)
 800f7f6:	011b      	lsls	r3, r3, #4
 800f7f8:	4413      	add	r3, r2
 800f7fa:	330a      	adds	r3, #10
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
 800f800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f804:	4a1c      	ldr	r2, [pc, #112]	; (800f878 <close+0xcc>)
 800f806:	011b      	lsls	r3, r3, #4
 800f808:	4413      	add	r3, r2
 800f80a:	3306      	adds	r3, #6
 800f80c:	2200      	movs	r2, #0
 800f80e:	801a      	strh	r2, [r3, #0]

		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f814:	4a18      	ldr	r2, [pc, #96]	; (800f878 <close+0xcc>)
 800f816:	011b      	lsls	r3, r3, #4
 800f818:	4413      	add	r3, r2
 800f81a:	330b      	adds	r3, #11
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	f003 0301 	and.w	r3, r3, #1
 800f824:	2b00      	cmp	r3, #0
 800f826:	d001      	beq.n	800f82c <close+0x80>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
 800f828:	234e      	movs	r3, #78	; 0x4e
 800f82a:	73bb      	strb	r3, [r7, #14]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
 800f82c:	f107 0208 	add.w	r2, r7, #8
 800f830:	7bb9      	ldrb	r1, [r7, #14]
 800f832:	2300      	movs	r3, #0
 800f834:	9302      	str	r3, [sp, #8]
 800f836:	2300      	movs	r3, #0
 800f838:	9301      	str	r3, [sp, #4]
 800f83a:	2300      	movs	r3, #0
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	2304      	movs	r3, #4
 800f840:	2002      	movs	r0, #2
 800f842:	f7fd f81b 	bl	800c87c <hif_send>
 800f846:	4603      	mov	r3, r0
 800f848:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800f84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <close+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
 800f852:	23f7      	movs	r3, #247	; 0xf7
 800f854:	73fb      	strb	r3, [r7, #15]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
 800f856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f85a:	011b      	lsls	r3, r3, #4
 800f85c:	4a06      	ldr	r2, [pc, #24]	; (800f878 <close+0xcc>)
 800f85e:	4413      	add	r3, r2
 800f860:	2210      	movs	r2, #16
 800f862:	2100      	movs	r1, #0
 800f864:	4618      	mov	r0, r3
 800f866:	f7fc fef7 	bl	800c658 <m2m_memset>
	}
	return s8Ret;
 800f86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	24000d38 	.word	0x24000d38

0800f87c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800f882:	463b      	mov	r3, r7
 800f884:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	22b9      	movs	r2, #185	; 0xb9
 800f88a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800f88c:	2100      	movs	r1, #0
 800f88e:	4810      	ldr	r0, [pc, #64]	; (800f8d0 <spi_flash_enter_low_power_mode+0x54>)
 800f890:	f7fe faa2 	bl	800ddd8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	4619      	mov	r1, r3
 800f89a:	480e      	ldr	r0, [pc, #56]	; (800f8d4 <spi_flash_enter_low_power_mode+0x58>)
 800f89c:	f7fe fa9c 	bl	800ddd8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800f8a0:	2101      	movs	r1, #1
 800f8a2:	480d      	ldr	r0, [pc, #52]	; (800f8d8 <spi_flash_enter_low_power_mode+0x5c>)
 800f8a4:	f7fe fa98 	bl	800ddd8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	480c      	ldr	r0, [pc, #48]	; (800f8dc <spi_flash_enter_low_power_mode+0x60>)
 800f8ac:	f7fe fa94 	bl	800ddd8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800f8b0:	2181      	movs	r1, #129	; 0x81
 800f8b2:	480b      	ldr	r0, [pc, #44]	; (800f8e0 <spi_flash_enter_low_power_mode+0x64>)
 800f8b4:	f7fe fa90 	bl	800ddd8 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800f8b8:	bf00      	nop
 800f8ba:	480a      	ldr	r0, [pc, #40]	; (800f8e4 <spi_flash_enter_low_power_mode+0x68>)
 800f8bc:	f7fe fa72 	bl	800dda4 <nm_read_reg>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d1f9      	bne.n	800f8ba <spi_flash_enter_low_power_mode+0x3e>
}
 800f8c6:	bf00      	nop
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	00010208 	.word	0x00010208
 800f8d4:	0001020c 	.word	0x0001020c
 800f8d8:	00010214 	.word	0x00010214
 800f8dc:	0001021c 	.word	0x0001021c
 800f8e0:	00010204 	.word	0x00010204
 800f8e4:	00010218 	.word	0x00010218

0800f8e8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800f8ee:	463b      	mov	r3, r7
 800f8f0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	22ab      	movs	r2, #171	; 0xab
 800f8f6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	4810      	ldr	r0, [pc, #64]	; (800f93c <spi_flash_leave_low_power_mode+0x54>)
 800f8fc:	f7fe fa6c 	bl	800ddd8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	4619      	mov	r1, r3
 800f906:	480e      	ldr	r0, [pc, #56]	; (800f940 <spi_flash_leave_low_power_mode+0x58>)
 800f908:	f7fe fa66 	bl	800ddd8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800f90c:	2101      	movs	r1, #1
 800f90e:	480d      	ldr	r0, [pc, #52]	; (800f944 <spi_flash_leave_low_power_mode+0x5c>)
 800f910:	f7fe fa62 	bl	800ddd8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800f914:	2100      	movs	r1, #0
 800f916:	480c      	ldr	r0, [pc, #48]	; (800f948 <spi_flash_leave_low_power_mode+0x60>)
 800f918:	f7fe fa5e 	bl	800ddd8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800f91c:	2181      	movs	r1, #129	; 0x81
 800f91e:	480b      	ldr	r0, [pc, #44]	; (800f94c <spi_flash_leave_low_power_mode+0x64>)
 800f920:	f7fe fa5a 	bl	800ddd8 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800f924:	bf00      	nop
 800f926:	480a      	ldr	r0, [pc, #40]	; (800f950 <spi_flash_leave_low_power_mode+0x68>)
 800f928:	f7fe fa3c 	bl	800dda4 <nm_read_reg>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d1f9      	bne.n	800f926 <spi_flash_leave_low_power_mode+0x3e>
}
 800f932:	bf00      	nop
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	00010208 	.word	0x00010208
 800f940:	0001020c 	.word	0x0001020c
 800f944:	00010214 	.word	0x00010214
 800f948:	0001021c 	.word	0x0001021c
 800f94c:	00010204 	.word	0x00010204
 800f950:	00010218 	.word	0x00010218

0800f954 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	4603      	mov	r3, r0
 800f95c:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800f95e:	2300      	movs	r3, #0
 800f960:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {
 800f962:	f7fd ff65 	bl	800d830 <nmi_get_chipid>
 800f966:	4603      	mov	r3, r0
 800f968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f96c:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 800f970:	d331      	bcc.n	800f9d6 <spi_flash_enable+0x82>
		uint32 u32Val;

		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800f972:	f107 0308 	add.w	r3, r7, #8
 800f976:	4619      	mov	r1, r3
 800f978:	f241 4010 	movw	r0, #5136	; 0x1410
 800f97c:	f7fe fa1e 	bl	800ddbc <nm_read_reg_with_ret>
 800f980:	4603      	mov	r3, r0
 800f982:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800f984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d126      	bne.n	800f9da <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800f98c:	68ba      	ldr	r2, [r7, #8]
 800f98e:	4b16      	ldr	r3, [pc, #88]	; (800f9e8 <spi_flash_enable+0x94>)
 800f990:	4013      	ands	r3, r2
 800f992:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
 800f994:	68ba      	ldr	r2, [r7, #8]
 800f996:	4b15      	ldr	r3, [pc, #84]	; (800f9ec <spi_flash_enable+0x98>)
 800f998:	4313      	orrs	r3, r2
 800f99a:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	4619      	mov	r1, r3
 800f9a0:	f241 4010 	movw	r0, #5136	; 0x1410
 800f9a4:	f7fe fa18 	bl	800ddd8 <nm_write_reg>
		if(enable) {
 800f9a8:	79fb      	ldrb	r3, [r7, #7]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d002      	beq.n	800f9b4 <spi_flash_enable+0x60>
			spi_flash_leave_low_power_mode();
 800f9ae:	f7ff ff9b 	bl	800f8e8 <spi_flash_leave_low_power_mode>
 800f9b2:	e001      	b.n	800f9b8 <spi_flash_enable+0x64>
		} else {
			spi_flash_enter_low_power_mode();
 800f9b4:	f7ff ff62 	bl	800f87c <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
 800f9b8:	68ba      	ldr	r2, [r7, #8]
 800f9ba:	4b0b      	ldr	r3, [pc, #44]	; (800f9e8 <spi_flash_enable+0x94>)
 800f9bc:	4013      	ands	r3, r2
 800f9be:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f9c6:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	f241 4010 	movw	r0, #5136	; 0x1410
 800f9d0:	f7fe fa02 	bl	800ddd8 <nm_write_reg>
 800f9d4:	e002      	b.n	800f9dc <spi_flash_enable+0x88>
	}
ERR1:
 800f9d6:	bf00      	nop
 800f9d8:	e000      	b.n	800f9dc <spi_flash_enable+0x88>
			goto ERR1;
 800f9da:	bf00      	nop
	return s8Ret;
 800f9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	f8888fff 	.word	0xf8888fff
 800f9ec:	01111000 	.word	0x01111000

0800f9f0 <__errno>:
 800f9f0:	4b01      	ldr	r3, [pc, #4]	; (800f9f8 <__errno+0x8>)
 800f9f2:	6818      	ldr	r0, [r3, #0]
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	24000420 	.word	0x24000420

0800f9fc <__libc_init_array>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	4e0d      	ldr	r6, [pc, #52]	; (800fa34 <__libc_init_array+0x38>)
 800fa00:	4c0d      	ldr	r4, [pc, #52]	; (800fa38 <__libc_init_array+0x3c>)
 800fa02:	1ba4      	subs	r4, r4, r6
 800fa04:	10a4      	asrs	r4, r4, #2
 800fa06:	2500      	movs	r5, #0
 800fa08:	42a5      	cmp	r5, r4
 800fa0a:	d109      	bne.n	800fa20 <__libc_init_array+0x24>
 800fa0c:	4e0b      	ldr	r6, [pc, #44]	; (800fa3c <__libc_init_array+0x40>)
 800fa0e:	4c0c      	ldr	r4, [pc, #48]	; (800fa40 <__libc_init_array+0x44>)
 800fa10:	f000 ffb2 	bl	8010978 <_init>
 800fa14:	1ba4      	subs	r4, r4, r6
 800fa16:	10a4      	asrs	r4, r4, #2
 800fa18:	2500      	movs	r5, #0
 800fa1a:	42a5      	cmp	r5, r4
 800fa1c:	d105      	bne.n	800fa2a <__libc_init_array+0x2e>
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}
 800fa20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa24:	4798      	blx	r3
 800fa26:	3501      	adds	r5, #1
 800fa28:	e7ee      	b.n	800fa08 <__libc_init_array+0xc>
 800fa2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa2e:	4798      	blx	r3
 800fa30:	3501      	adds	r5, #1
 800fa32:	e7f2      	b.n	800fa1a <__libc_init_array+0x1e>
 800fa34:	080114b0 	.word	0x080114b0
 800fa38:	080114b0 	.word	0x080114b0
 800fa3c:	080114b0 	.word	0x080114b0
 800fa40:	080114b4 	.word	0x080114b4

0800fa44 <memset>:
 800fa44:	4402      	add	r2, r0
 800fa46:	4603      	mov	r3, r0
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d100      	bne.n	800fa4e <memset+0xa>
 800fa4c:	4770      	bx	lr
 800fa4e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa52:	e7f9      	b.n	800fa48 <memset+0x4>

0800fa54 <iprintf>:
 800fa54:	b40f      	push	{r0, r1, r2, r3}
 800fa56:	4b0a      	ldr	r3, [pc, #40]	; (800fa80 <iprintf+0x2c>)
 800fa58:	b513      	push	{r0, r1, r4, lr}
 800fa5a:	681c      	ldr	r4, [r3, #0]
 800fa5c:	b124      	cbz	r4, 800fa68 <iprintf+0x14>
 800fa5e:	69a3      	ldr	r3, [r4, #24]
 800fa60:	b913      	cbnz	r3, 800fa68 <iprintf+0x14>
 800fa62:	4620      	mov	r0, r4
 800fa64:	f000 fa36 	bl	800fed4 <__sinit>
 800fa68:	ab05      	add	r3, sp, #20
 800fa6a:	9a04      	ldr	r2, [sp, #16]
 800fa6c:	68a1      	ldr	r1, [r4, #8]
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	4620      	mov	r0, r4
 800fa72:	f000 fbef 	bl	8010254 <_vfiprintf_r>
 800fa76:	b002      	add	sp, #8
 800fa78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa7c:	b004      	add	sp, #16
 800fa7e:	4770      	bx	lr
 800fa80:	24000420 	.word	0x24000420

0800fa84 <putchar>:
 800fa84:	b538      	push	{r3, r4, r5, lr}
 800fa86:	4b08      	ldr	r3, [pc, #32]	; (800faa8 <putchar+0x24>)
 800fa88:	681c      	ldr	r4, [r3, #0]
 800fa8a:	4605      	mov	r5, r0
 800fa8c:	b124      	cbz	r4, 800fa98 <putchar+0x14>
 800fa8e:	69a3      	ldr	r3, [r4, #24]
 800fa90:	b913      	cbnz	r3, 800fa98 <putchar+0x14>
 800fa92:	4620      	mov	r0, r4
 800fa94:	f000 fa1e 	bl	800fed4 <__sinit>
 800fa98:	68a2      	ldr	r2, [r4, #8]
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faa2:	f000 be75 	b.w	8010790 <_putc_r>
 800faa6:	bf00      	nop
 800faa8:	24000420 	.word	0x24000420

0800faac <_puts_r>:
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	460e      	mov	r6, r1
 800fab0:	4605      	mov	r5, r0
 800fab2:	b118      	cbz	r0, 800fabc <_puts_r+0x10>
 800fab4:	6983      	ldr	r3, [r0, #24]
 800fab6:	b90b      	cbnz	r3, 800fabc <_puts_r+0x10>
 800fab8:	f000 fa0c 	bl	800fed4 <__sinit>
 800fabc:	69ab      	ldr	r3, [r5, #24]
 800fabe:	68ac      	ldr	r4, [r5, #8]
 800fac0:	b913      	cbnz	r3, 800fac8 <_puts_r+0x1c>
 800fac2:	4628      	mov	r0, r5
 800fac4:	f000 fa06 	bl	800fed4 <__sinit>
 800fac8:	4b23      	ldr	r3, [pc, #140]	; (800fb58 <_puts_r+0xac>)
 800faca:	429c      	cmp	r4, r3
 800facc:	d117      	bne.n	800fafe <_puts_r+0x52>
 800face:	686c      	ldr	r4, [r5, #4]
 800fad0:	89a3      	ldrh	r3, [r4, #12]
 800fad2:	071b      	lsls	r3, r3, #28
 800fad4:	d51d      	bpl.n	800fb12 <_puts_r+0x66>
 800fad6:	6923      	ldr	r3, [r4, #16]
 800fad8:	b1db      	cbz	r3, 800fb12 <_puts_r+0x66>
 800fada:	3e01      	subs	r6, #1
 800fadc:	68a3      	ldr	r3, [r4, #8]
 800fade:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fae2:	3b01      	subs	r3, #1
 800fae4:	60a3      	str	r3, [r4, #8]
 800fae6:	b9e9      	cbnz	r1, 800fb24 <_puts_r+0x78>
 800fae8:	2b00      	cmp	r3, #0
 800faea:	da2e      	bge.n	800fb4a <_puts_r+0x9e>
 800faec:	4622      	mov	r2, r4
 800faee:	210a      	movs	r1, #10
 800faf0:	4628      	mov	r0, r5
 800faf2:	f000 f83f 	bl	800fb74 <__swbuf_r>
 800faf6:	3001      	adds	r0, #1
 800faf8:	d011      	beq.n	800fb1e <_puts_r+0x72>
 800fafa:	200a      	movs	r0, #10
 800fafc:	e011      	b.n	800fb22 <_puts_r+0x76>
 800fafe:	4b17      	ldr	r3, [pc, #92]	; (800fb5c <_puts_r+0xb0>)
 800fb00:	429c      	cmp	r4, r3
 800fb02:	d101      	bne.n	800fb08 <_puts_r+0x5c>
 800fb04:	68ac      	ldr	r4, [r5, #8]
 800fb06:	e7e3      	b.n	800fad0 <_puts_r+0x24>
 800fb08:	4b15      	ldr	r3, [pc, #84]	; (800fb60 <_puts_r+0xb4>)
 800fb0a:	429c      	cmp	r4, r3
 800fb0c:	bf08      	it	eq
 800fb0e:	68ec      	ldreq	r4, [r5, #12]
 800fb10:	e7de      	b.n	800fad0 <_puts_r+0x24>
 800fb12:	4621      	mov	r1, r4
 800fb14:	4628      	mov	r0, r5
 800fb16:	f000 f87f 	bl	800fc18 <__swsetup_r>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d0dd      	beq.n	800fada <_puts_r+0x2e>
 800fb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb22:	bd70      	pop	{r4, r5, r6, pc}
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	da04      	bge.n	800fb32 <_puts_r+0x86>
 800fb28:	69a2      	ldr	r2, [r4, #24]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	dc06      	bgt.n	800fb3c <_puts_r+0x90>
 800fb2e:	290a      	cmp	r1, #10
 800fb30:	d004      	beq.n	800fb3c <_puts_r+0x90>
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	1c5a      	adds	r2, r3, #1
 800fb36:	6022      	str	r2, [r4, #0]
 800fb38:	7019      	strb	r1, [r3, #0]
 800fb3a:	e7cf      	b.n	800fadc <_puts_r+0x30>
 800fb3c:	4622      	mov	r2, r4
 800fb3e:	4628      	mov	r0, r5
 800fb40:	f000 f818 	bl	800fb74 <__swbuf_r>
 800fb44:	3001      	adds	r0, #1
 800fb46:	d1c9      	bne.n	800fadc <_puts_r+0x30>
 800fb48:	e7e9      	b.n	800fb1e <_puts_r+0x72>
 800fb4a:	6823      	ldr	r3, [r4, #0]
 800fb4c:	200a      	movs	r0, #10
 800fb4e:	1c5a      	adds	r2, r3, #1
 800fb50:	6022      	str	r2, [r4, #0]
 800fb52:	7018      	strb	r0, [r3, #0]
 800fb54:	e7e5      	b.n	800fb22 <_puts_r+0x76>
 800fb56:	bf00      	nop
 800fb58:	08011434 	.word	0x08011434
 800fb5c:	08011454 	.word	0x08011454
 800fb60:	08011414 	.word	0x08011414

0800fb64 <puts>:
 800fb64:	4b02      	ldr	r3, [pc, #8]	; (800fb70 <puts+0xc>)
 800fb66:	4601      	mov	r1, r0
 800fb68:	6818      	ldr	r0, [r3, #0]
 800fb6a:	f7ff bf9f 	b.w	800faac <_puts_r>
 800fb6e:	bf00      	nop
 800fb70:	24000420 	.word	0x24000420

0800fb74 <__swbuf_r>:
 800fb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb76:	460e      	mov	r6, r1
 800fb78:	4614      	mov	r4, r2
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	b118      	cbz	r0, 800fb86 <__swbuf_r+0x12>
 800fb7e:	6983      	ldr	r3, [r0, #24]
 800fb80:	b90b      	cbnz	r3, 800fb86 <__swbuf_r+0x12>
 800fb82:	f000 f9a7 	bl	800fed4 <__sinit>
 800fb86:	4b21      	ldr	r3, [pc, #132]	; (800fc0c <__swbuf_r+0x98>)
 800fb88:	429c      	cmp	r4, r3
 800fb8a:	d12a      	bne.n	800fbe2 <__swbuf_r+0x6e>
 800fb8c:	686c      	ldr	r4, [r5, #4]
 800fb8e:	69a3      	ldr	r3, [r4, #24]
 800fb90:	60a3      	str	r3, [r4, #8]
 800fb92:	89a3      	ldrh	r3, [r4, #12]
 800fb94:	071a      	lsls	r2, r3, #28
 800fb96:	d52e      	bpl.n	800fbf6 <__swbuf_r+0x82>
 800fb98:	6923      	ldr	r3, [r4, #16]
 800fb9a:	b363      	cbz	r3, 800fbf6 <__swbuf_r+0x82>
 800fb9c:	6923      	ldr	r3, [r4, #16]
 800fb9e:	6820      	ldr	r0, [r4, #0]
 800fba0:	1ac0      	subs	r0, r0, r3
 800fba2:	6963      	ldr	r3, [r4, #20]
 800fba4:	b2f6      	uxtb	r6, r6
 800fba6:	4283      	cmp	r3, r0
 800fba8:	4637      	mov	r7, r6
 800fbaa:	dc04      	bgt.n	800fbb6 <__swbuf_r+0x42>
 800fbac:	4621      	mov	r1, r4
 800fbae:	4628      	mov	r0, r5
 800fbb0:	f000 f926 	bl	800fe00 <_fflush_r>
 800fbb4:	bb28      	cbnz	r0, 800fc02 <__swbuf_r+0x8e>
 800fbb6:	68a3      	ldr	r3, [r4, #8]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	60a3      	str	r3, [r4, #8]
 800fbbc:	6823      	ldr	r3, [r4, #0]
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	6022      	str	r2, [r4, #0]
 800fbc2:	701e      	strb	r6, [r3, #0]
 800fbc4:	6963      	ldr	r3, [r4, #20]
 800fbc6:	3001      	adds	r0, #1
 800fbc8:	4283      	cmp	r3, r0
 800fbca:	d004      	beq.n	800fbd6 <__swbuf_r+0x62>
 800fbcc:	89a3      	ldrh	r3, [r4, #12]
 800fbce:	07db      	lsls	r3, r3, #31
 800fbd0:	d519      	bpl.n	800fc06 <__swbuf_r+0x92>
 800fbd2:	2e0a      	cmp	r6, #10
 800fbd4:	d117      	bne.n	800fc06 <__swbuf_r+0x92>
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	f000 f911 	bl	800fe00 <_fflush_r>
 800fbde:	b190      	cbz	r0, 800fc06 <__swbuf_r+0x92>
 800fbe0:	e00f      	b.n	800fc02 <__swbuf_r+0x8e>
 800fbe2:	4b0b      	ldr	r3, [pc, #44]	; (800fc10 <__swbuf_r+0x9c>)
 800fbe4:	429c      	cmp	r4, r3
 800fbe6:	d101      	bne.n	800fbec <__swbuf_r+0x78>
 800fbe8:	68ac      	ldr	r4, [r5, #8]
 800fbea:	e7d0      	b.n	800fb8e <__swbuf_r+0x1a>
 800fbec:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <__swbuf_r+0xa0>)
 800fbee:	429c      	cmp	r4, r3
 800fbf0:	bf08      	it	eq
 800fbf2:	68ec      	ldreq	r4, [r5, #12]
 800fbf4:	e7cb      	b.n	800fb8e <__swbuf_r+0x1a>
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	f000 f80d 	bl	800fc18 <__swsetup_r>
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	d0cc      	beq.n	800fb9c <__swbuf_r+0x28>
 800fc02:	f04f 37ff 	mov.w	r7, #4294967295
 800fc06:	4638      	mov	r0, r7
 800fc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	08011434 	.word	0x08011434
 800fc10:	08011454 	.word	0x08011454
 800fc14:	08011414 	.word	0x08011414

0800fc18 <__swsetup_r>:
 800fc18:	4b32      	ldr	r3, [pc, #200]	; (800fce4 <__swsetup_r+0xcc>)
 800fc1a:	b570      	push	{r4, r5, r6, lr}
 800fc1c:	681d      	ldr	r5, [r3, #0]
 800fc1e:	4606      	mov	r6, r0
 800fc20:	460c      	mov	r4, r1
 800fc22:	b125      	cbz	r5, 800fc2e <__swsetup_r+0x16>
 800fc24:	69ab      	ldr	r3, [r5, #24]
 800fc26:	b913      	cbnz	r3, 800fc2e <__swsetup_r+0x16>
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f000 f953 	bl	800fed4 <__sinit>
 800fc2e:	4b2e      	ldr	r3, [pc, #184]	; (800fce8 <__swsetup_r+0xd0>)
 800fc30:	429c      	cmp	r4, r3
 800fc32:	d10f      	bne.n	800fc54 <__swsetup_r+0x3c>
 800fc34:	686c      	ldr	r4, [r5, #4]
 800fc36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	0715      	lsls	r5, r2, #28
 800fc3e:	d42c      	bmi.n	800fc9a <__swsetup_r+0x82>
 800fc40:	06d0      	lsls	r0, r2, #27
 800fc42:	d411      	bmi.n	800fc68 <__swsetup_r+0x50>
 800fc44:	2209      	movs	r2, #9
 800fc46:	6032      	str	r2, [r6, #0]
 800fc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc4c:	81a3      	strh	r3, [r4, #12]
 800fc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc52:	e03e      	b.n	800fcd2 <__swsetup_r+0xba>
 800fc54:	4b25      	ldr	r3, [pc, #148]	; (800fcec <__swsetup_r+0xd4>)
 800fc56:	429c      	cmp	r4, r3
 800fc58:	d101      	bne.n	800fc5e <__swsetup_r+0x46>
 800fc5a:	68ac      	ldr	r4, [r5, #8]
 800fc5c:	e7eb      	b.n	800fc36 <__swsetup_r+0x1e>
 800fc5e:	4b24      	ldr	r3, [pc, #144]	; (800fcf0 <__swsetup_r+0xd8>)
 800fc60:	429c      	cmp	r4, r3
 800fc62:	bf08      	it	eq
 800fc64:	68ec      	ldreq	r4, [r5, #12]
 800fc66:	e7e6      	b.n	800fc36 <__swsetup_r+0x1e>
 800fc68:	0751      	lsls	r1, r2, #29
 800fc6a:	d512      	bpl.n	800fc92 <__swsetup_r+0x7a>
 800fc6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc6e:	b141      	cbz	r1, 800fc82 <__swsetup_r+0x6a>
 800fc70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc74:	4299      	cmp	r1, r3
 800fc76:	d002      	beq.n	800fc7e <__swsetup_r+0x66>
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f000 fa19 	bl	80100b0 <_free_r>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	6363      	str	r3, [r4, #52]	; 0x34
 800fc82:	89a3      	ldrh	r3, [r4, #12]
 800fc84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc88:	81a3      	strh	r3, [r4, #12]
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	6063      	str	r3, [r4, #4]
 800fc8e:	6923      	ldr	r3, [r4, #16]
 800fc90:	6023      	str	r3, [r4, #0]
 800fc92:	89a3      	ldrh	r3, [r4, #12]
 800fc94:	f043 0308 	orr.w	r3, r3, #8
 800fc98:	81a3      	strh	r3, [r4, #12]
 800fc9a:	6923      	ldr	r3, [r4, #16]
 800fc9c:	b94b      	cbnz	r3, 800fcb2 <__swsetup_r+0x9a>
 800fc9e:	89a3      	ldrh	r3, [r4, #12]
 800fca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fca8:	d003      	beq.n	800fcb2 <__swsetup_r+0x9a>
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4630      	mov	r0, r6
 800fcae:	f000 f9bf 	bl	8010030 <__smakebuf_r>
 800fcb2:	89a2      	ldrh	r2, [r4, #12]
 800fcb4:	f012 0301 	ands.w	r3, r2, #1
 800fcb8:	d00c      	beq.n	800fcd4 <__swsetup_r+0xbc>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	60a3      	str	r3, [r4, #8]
 800fcbe:	6963      	ldr	r3, [r4, #20]
 800fcc0:	425b      	negs	r3, r3
 800fcc2:	61a3      	str	r3, [r4, #24]
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	b953      	cbnz	r3, 800fcde <__swsetup_r+0xc6>
 800fcc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fccc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fcd0:	d1ba      	bne.n	800fc48 <__swsetup_r+0x30>
 800fcd2:	bd70      	pop	{r4, r5, r6, pc}
 800fcd4:	0792      	lsls	r2, r2, #30
 800fcd6:	bf58      	it	pl
 800fcd8:	6963      	ldrpl	r3, [r4, #20]
 800fcda:	60a3      	str	r3, [r4, #8]
 800fcdc:	e7f2      	b.n	800fcc4 <__swsetup_r+0xac>
 800fcde:	2000      	movs	r0, #0
 800fce0:	e7f7      	b.n	800fcd2 <__swsetup_r+0xba>
 800fce2:	bf00      	nop
 800fce4:	24000420 	.word	0x24000420
 800fce8:	08011434 	.word	0x08011434
 800fcec:	08011454 	.word	0x08011454
 800fcf0:	08011414 	.word	0x08011414

0800fcf4 <__sflush_r>:
 800fcf4:	898a      	ldrh	r2, [r1, #12]
 800fcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfa:	4605      	mov	r5, r0
 800fcfc:	0710      	lsls	r0, r2, #28
 800fcfe:	460c      	mov	r4, r1
 800fd00:	d458      	bmi.n	800fdb4 <__sflush_r+0xc0>
 800fd02:	684b      	ldr	r3, [r1, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	dc05      	bgt.n	800fd14 <__sflush_r+0x20>
 800fd08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	dc02      	bgt.n	800fd14 <__sflush_r+0x20>
 800fd0e:	2000      	movs	r0, #0
 800fd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd16:	2e00      	cmp	r6, #0
 800fd18:	d0f9      	beq.n	800fd0e <__sflush_r+0x1a>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd20:	682f      	ldr	r7, [r5, #0]
 800fd22:	6a21      	ldr	r1, [r4, #32]
 800fd24:	602b      	str	r3, [r5, #0]
 800fd26:	d032      	beq.n	800fd8e <__sflush_r+0x9a>
 800fd28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd2a:	89a3      	ldrh	r3, [r4, #12]
 800fd2c:	075a      	lsls	r2, r3, #29
 800fd2e:	d505      	bpl.n	800fd3c <__sflush_r+0x48>
 800fd30:	6863      	ldr	r3, [r4, #4]
 800fd32:	1ac0      	subs	r0, r0, r3
 800fd34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd36:	b10b      	cbz	r3, 800fd3c <__sflush_r+0x48>
 800fd38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd3a:	1ac0      	subs	r0, r0, r3
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4602      	mov	r2, r0
 800fd40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd42:	6a21      	ldr	r1, [r4, #32]
 800fd44:	4628      	mov	r0, r5
 800fd46:	47b0      	blx	r6
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	89a3      	ldrh	r3, [r4, #12]
 800fd4c:	d106      	bne.n	800fd5c <__sflush_r+0x68>
 800fd4e:	6829      	ldr	r1, [r5, #0]
 800fd50:	291d      	cmp	r1, #29
 800fd52:	d848      	bhi.n	800fde6 <__sflush_r+0xf2>
 800fd54:	4a29      	ldr	r2, [pc, #164]	; (800fdfc <__sflush_r+0x108>)
 800fd56:	40ca      	lsrs	r2, r1
 800fd58:	07d6      	lsls	r6, r2, #31
 800fd5a:	d544      	bpl.n	800fde6 <__sflush_r+0xf2>
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	6062      	str	r2, [r4, #4]
 800fd60:	04d9      	lsls	r1, r3, #19
 800fd62:	6922      	ldr	r2, [r4, #16]
 800fd64:	6022      	str	r2, [r4, #0]
 800fd66:	d504      	bpl.n	800fd72 <__sflush_r+0x7e>
 800fd68:	1c42      	adds	r2, r0, #1
 800fd6a:	d101      	bne.n	800fd70 <__sflush_r+0x7c>
 800fd6c:	682b      	ldr	r3, [r5, #0]
 800fd6e:	b903      	cbnz	r3, 800fd72 <__sflush_r+0x7e>
 800fd70:	6560      	str	r0, [r4, #84]	; 0x54
 800fd72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd74:	602f      	str	r7, [r5, #0]
 800fd76:	2900      	cmp	r1, #0
 800fd78:	d0c9      	beq.n	800fd0e <__sflush_r+0x1a>
 800fd7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd7e:	4299      	cmp	r1, r3
 800fd80:	d002      	beq.n	800fd88 <__sflush_r+0x94>
 800fd82:	4628      	mov	r0, r5
 800fd84:	f000 f994 	bl	80100b0 <_free_r>
 800fd88:	2000      	movs	r0, #0
 800fd8a:	6360      	str	r0, [r4, #52]	; 0x34
 800fd8c:	e7c0      	b.n	800fd10 <__sflush_r+0x1c>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	4628      	mov	r0, r5
 800fd92:	47b0      	blx	r6
 800fd94:	1c41      	adds	r1, r0, #1
 800fd96:	d1c8      	bne.n	800fd2a <__sflush_r+0x36>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d0c5      	beq.n	800fd2a <__sflush_r+0x36>
 800fd9e:	2b1d      	cmp	r3, #29
 800fda0:	d001      	beq.n	800fda6 <__sflush_r+0xb2>
 800fda2:	2b16      	cmp	r3, #22
 800fda4:	d101      	bne.n	800fdaa <__sflush_r+0xb6>
 800fda6:	602f      	str	r7, [r5, #0]
 800fda8:	e7b1      	b.n	800fd0e <__sflush_r+0x1a>
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdb0:	81a3      	strh	r3, [r4, #12]
 800fdb2:	e7ad      	b.n	800fd10 <__sflush_r+0x1c>
 800fdb4:	690f      	ldr	r7, [r1, #16]
 800fdb6:	2f00      	cmp	r7, #0
 800fdb8:	d0a9      	beq.n	800fd0e <__sflush_r+0x1a>
 800fdba:	0793      	lsls	r3, r2, #30
 800fdbc:	680e      	ldr	r6, [r1, #0]
 800fdbe:	bf08      	it	eq
 800fdc0:	694b      	ldreq	r3, [r1, #20]
 800fdc2:	600f      	str	r7, [r1, #0]
 800fdc4:	bf18      	it	ne
 800fdc6:	2300      	movne	r3, #0
 800fdc8:	eba6 0807 	sub.w	r8, r6, r7
 800fdcc:	608b      	str	r3, [r1, #8]
 800fdce:	f1b8 0f00 	cmp.w	r8, #0
 800fdd2:	dd9c      	ble.n	800fd0e <__sflush_r+0x1a>
 800fdd4:	4643      	mov	r3, r8
 800fdd6:	463a      	mov	r2, r7
 800fdd8:	6a21      	ldr	r1, [r4, #32]
 800fdda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fddc:	4628      	mov	r0, r5
 800fdde:	47b0      	blx	r6
 800fde0:	2800      	cmp	r0, #0
 800fde2:	dc06      	bgt.n	800fdf2 <__sflush_r+0xfe>
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdea:	81a3      	strh	r3, [r4, #12]
 800fdec:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf0:	e78e      	b.n	800fd10 <__sflush_r+0x1c>
 800fdf2:	4407      	add	r7, r0
 800fdf4:	eba8 0800 	sub.w	r8, r8, r0
 800fdf8:	e7e9      	b.n	800fdce <__sflush_r+0xda>
 800fdfa:	bf00      	nop
 800fdfc:	20400001 	.word	0x20400001

0800fe00 <_fflush_r>:
 800fe00:	b538      	push	{r3, r4, r5, lr}
 800fe02:	690b      	ldr	r3, [r1, #16]
 800fe04:	4605      	mov	r5, r0
 800fe06:	460c      	mov	r4, r1
 800fe08:	b1db      	cbz	r3, 800fe42 <_fflush_r+0x42>
 800fe0a:	b118      	cbz	r0, 800fe14 <_fflush_r+0x14>
 800fe0c:	6983      	ldr	r3, [r0, #24]
 800fe0e:	b90b      	cbnz	r3, 800fe14 <_fflush_r+0x14>
 800fe10:	f000 f860 	bl	800fed4 <__sinit>
 800fe14:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <_fflush_r+0x48>)
 800fe16:	429c      	cmp	r4, r3
 800fe18:	d109      	bne.n	800fe2e <_fflush_r+0x2e>
 800fe1a:	686c      	ldr	r4, [r5, #4]
 800fe1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe20:	b17b      	cbz	r3, 800fe42 <_fflush_r+0x42>
 800fe22:	4621      	mov	r1, r4
 800fe24:	4628      	mov	r0, r5
 800fe26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe2a:	f7ff bf63 	b.w	800fcf4 <__sflush_r>
 800fe2e:	4b07      	ldr	r3, [pc, #28]	; (800fe4c <_fflush_r+0x4c>)
 800fe30:	429c      	cmp	r4, r3
 800fe32:	d101      	bne.n	800fe38 <_fflush_r+0x38>
 800fe34:	68ac      	ldr	r4, [r5, #8]
 800fe36:	e7f1      	b.n	800fe1c <_fflush_r+0x1c>
 800fe38:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <_fflush_r+0x50>)
 800fe3a:	429c      	cmp	r4, r3
 800fe3c:	bf08      	it	eq
 800fe3e:	68ec      	ldreq	r4, [r5, #12]
 800fe40:	e7ec      	b.n	800fe1c <_fflush_r+0x1c>
 800fe42:	2000      	movs	r0, #0
 800fe44:	bd38      	pop	{r3, r4, r5, pc}
 800fe46:	bf00      	nop
 800fe48:	08011434 	.word	0x08011434
 800fe4c:	08011454 	.word	0x08011454
 800fe50:	08011414 	.word	0x08011414

0800fe54 <std>:
 800fe54:	2300      	movs	r3, #0
 800fe56:	b510      	push	{r4, lr}
 800fe58:	4604      	mov	r4, r0
 800fe5a:	e9c0 3300 	strd	r3, r3, [r0]
 800fe5e:	6083      	str	r3, [r0, #8]
 800fe60:	8181      	strh	r1, [r0, #12]
 800fe62:	6643      	str	r3, [r0, #100]	; 0x64
 800fe64:	81c2      	strh	r2, [r0, #14]
 800fe66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe6a:	6183      	str	r3, [r0, #24]
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	2208      	movs	r2, #8
 800fe70:	305c      	adds	r0, #92	; 0x5c
 800fe72:	f7ff fde7 	bl	800fa44 <memset>
 800fe76:	4b05      	ldr	r3, [pc, #20]	; (800fe8c <std+0x38>)
 800fe78:	6263      	str	r3, [r4, #36]	; 0x24
 800fe7a:	4b05      	ldr	r3, [pc, #20]	; (800fe90 <std+0x3c>)
 800fe7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe7e:	4b05      	ldr	r3, [pc, #20]	; (800fe94 <std+0x40>)
 800fe80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe82:	4b05      	ldr	r3, [pc, #20]	; (800fe98 <std+0x44>)
 800fe84:	6224      	str	r4, [r4, #32]
 800fe86:	6323      	str	r3, [r4, #48]	; 0x30
 800fe88:	bd10      	pop	{r4, pc}
 800fe8a:	bf00      	nop
 800fe8c:	0801081d 	.word	0x0801081d
 800fe90:	0801083f 	.word	0x0801083f
 800fe94:	08010877 	.word	0x08010877
 800fe98:	0801089b 	.word	0x0801089b

0800fe9c <_cleanup_r>:
 800fe9c:	4901      	ldr	r1, [pc, #4]	; (800fea4 <_cleanup_r+0x8>)
 800fe9e:	f000 b885 	b.w	800ffac <_fwalk_reent>
 800fea2:	bf00      	nop
 800fea4:	0800fe01 	.word	0x0800fe01

0800fea8 <__sfmoreglue>:
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	1e4a      	subs	r2, r1, #1
 800feac:	2568      	movs	r5, #104	; 0x68
 800feae:	4355      	muls	r5, r2
 800feb0:	460e      	mov	r6, r1
 800feb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800feb6:	f000 f949 	bl	801014c <_malloc_r>
 800feba:	4604      	mov	r4, r0
 800febc:	b140      	cbz	r0, 800fed0 <__sfmoreglue+0x28>
 800febe:	2100      	movs	r1, #0
 800fec0:	e9c0 1600 	strd	r1, r6, [r0]
 800fec4:	300c      	adds	r0, #12
 800fec6:	60a0      	str	r0, [r4, #8]
 800fec8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fecc:	f7ff fdba 	bl	800fa44 <memset>
 800fed0:	4620      	mov	r0, r4
 800fed2:	bd70      	pop	{r4, r5, r6, pc}

0800fed4 <__sinit>:
 800fed4:	6983      	ldr	r3, [r0, #24]
 800fed6:	b510      	push	{r4, lr}
 800fed8:	4604      	mov	r4, r0
 800feda:	bb33      	cbnz	r3, 800ff2a <__sinit+0x56>
 800fedc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fee0:	6503      	str	r3, [r0, #80]	; 0x50
 800fee2:	4b12      	ldr	r3, [pc, #72]	; (800ff2c <__sinit+0x58>)
 800fee4:	4a12      	ldr	r2, [pc, #72]	; (800ff30 <__sinit+0x5c>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	6282      	str	r2, [r0, #40]	; 0x28
 800feea:	4298      	cmp	r0, r3
 800feec:	bf04      	itt	eq
 800feee:	2301      	moveq	r3, #1
 800fef0:	6183      	streq	r3, [r0, #24]
 800fef2:	f000 f81f 	bl	800ff34 <__sfp>
 800fef6:	6060      	str	r0, [r4, #4]
 800fef8:	4620      	mov	r0, r4
 800fefa:	f000 f81b 	bl	800ff34 <__sfp>
 800fefe:	60a0      	str	r0, [r4, #8]
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 f817 	bl	800ff34 <__sfp>
 800ff06:	2200      	movs	r2, #0
 800ff08:	60e0      	str	r0, [r4, #12]
 800ff0a:	2104      	movs	r1, #4
 800ff0c:	6860      	ldr	r0, [r4, #4]
 800ff0e:	f7ff ffa1 	bl	800fe54 <std>
 800ff12:	2201      	movs	r2, #1
 800ff14:	2109      	movs	r1, #9
 800ff16:	68a0      	ldr	r0, [r4, #8]
 800ff18:	f7ff ff9c 	bl	800fe54 <std>
 800ff1c:	2202      	movs	r2, #2
 800ff1e:	2112      	movs	r1, #18
 800ff20:	68e0      	ldr	r0, [r4, #12]
 800ff22:	f7ff ff97 	bl	800fe54 <std>
 800ff26:	2301      	movs	r3, #1
 800ff28:	61a3      	str	r3, [r4, #24]
 800ff2a:	bd10      	pop	{r4, pc}
 800ff2c:	08011410 	.word	0x08011410
 800ff30:	0800fe9d 	.word	0x0800fe9d

0800ff34 <__sfp>:
 800ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff36:	4b1b      	ldr	r3, [pc, #108]	; (800ffa4 <__sfp+0x70>)
 800ff38:	681e      	ldr	r6, [r3, #0]
 800ff3a:	69b3      	ldr	r3, [r6, #24]
 800ff3c:	4607      	mov	r7, r0
 800ff3e:	b913      	cbnz	r3, 800ff46 <__sfp+0x12>
 800ff40:	4630      	mov	r0, r6
 800ff42:	f7ff ffc7 	bl	800fed4 <__sinit>
 800ff46:	3648      	adds	r6, #72	; 0x48
 800ff48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	d503      	bpl.n	800ff58 <__sfp+0x24>
 800ff50:	6833      	ldr	r3, [r6, #0]
 800ff52:	b133      	cbz	r3, 800ff62 <__sfp+0x2e>
 800ff54:	6836      	ldr	r6, [r6, #0]
 800ff56:	e7f7      	b.n	800ff48 <__sfp+0x14>
 800ff58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff5c:	b16d      	cbz	r5, 800ff7a <__sfp+0x46>
 800ff5e:	3468      	adds	r4, #104	; 0x68
 800ff60:	e7f4      	b.n	800ff4c <__sfp+0x18>
 800ff62:	2104      	movs	r1, #4
 800ff64:	4638      	mov	r0, r7
 800ff66:	f7ff ff9f 	bl	800fea8 <__sfmoreglue>
 800ff6a:	6030      	str	r0, [r6, #0]
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d1f1      	bne.n	800ff54 <__sfp+0x20>
 800ff70:	230c      	movs	r3, #12
 800ff72:	603b      	str	r3, [r7, #0]
 800ff74:	4604      	mov	r4, r0
 800ff76:	4620      	mov	r0, r4
 800ff78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff7a:	4b0b      	ldr	r3, [pc, #44]	; (800ffa8 <__sfp+0x74>)
 800ff7c:	6665      	str	r5, [r4, #100]	; 0x64
 800ff7e:	e9c4 5500 	strd	r5, r5, [r4]
 800ff82:	60a5      	str	r5, [r4, #8]
 800ff84:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ff88:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ff8c:	2208      	movs	r2, #8
 800ff8e:	4629      	mov	r1, r5
 800ff90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff94:	f7ff fd56 	bl	800fa44 <memset>
 800ff98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ffa0:	e7e9      	b.n	800ff76 <__sfp+0x42>
 800ffa2:	bf00      	nop
 800ffa4:	08011410 	.word	0x08011410
 800ffa8:	ffff0001 	.word	0xffff0001

0800ffac <_fwalk_reent>:
 800ffac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffb0:	4680      	mov	r8, r0
 800ffb2:	4689      	mov	r9, r1
 800ffb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ffb8:	2600      	movs	r6, #0
 800ffba:	b914      	cbnz	r4, 800ffc2 <_fwalk_reent+0x16>
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffc2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ffc6:	3f01      	subs	r7, #1
 800ffc8:	d501      	bpl.n	800ffce <_fwalk_reent+0x22>
 800ffca:	6824      	ldr	r4, [r4, #0]
 800ffcc:	e7f5      	b.n	800ffba <_fwalk_reent+0xe>
 800ffce:	89ab      	ldrh	r3, [r5, #12]
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d907      	bls.n	800ffe4 <_fwalk_reent+0x38>
 800ffd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	d003      	beq.n	800ffe4 <_fwalk_reent+0x38>
 800ffdc:	4629      	mov	r1, r5
 800ffde:	4640      	mov	r0, r8
 800ffe0:	47c8      	blx	r9
 800ffe2:	4306      	orrs	r6, r0
 800ffe4:	3568      	adds	r5, #104	; 0x68
 800ffe6:	e7ee      	b.n	800ffc6 <_fwalk_reent+0x1a>

0800ffe8 <__swhatbuf_r>:
 800ffe8:	b570      	push	{r4, r5, r6, lr}
 800ffea:	460e      	mov	r6, r1
 800ffec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff0:	2900      	cmp	r1, #0
 800fff2:	b096      	sub	sp, #88	; 0x58
 800fff4:	4614      	mov	r4, r2
 800fff6:	461d      	mov	r5, r3
 800fff8:	da07      	bge.n	801000a <__swhatbuf_r+0x22>
 800fffa:	2300      	movs	r3, #0
 800fffc:	602b      	str	r3, [r5, #0]
 800fffe:	89b3      	ldrh	r3, [r6, #12]
 8010000:	061a      	lsls	r2, r3, #24
 8010002:	d410      	bmi.n	8010026 <__swhatbuf_r+0x3e>
 8010004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010008:	e00e      	b.n	8010028 <__swhatbuf_r+0x40>
 801000a:	466a      	mov	r2, sp
 801000c:	f000 fc6c 	bl	80108e8 <_fstat_r>
 8010010:	2800      	cmp	r0, #0
 8010012:	dbf2      	blt.n	800fffa <__swhatbuf_r+0x12>
 8010014:	9a01      	ldr	r2, [sp, #4]
 8010016:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801001a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801001e:	425a      	negs	r2, r3
 8010020:	415a      	adcs	r2, r3
 8010022:	602a      	str	r2, [r5, #0]
 8010024:	e7ee      	b.n	8010004 <__swhatbuf_r+0x1c>
 8010026:	2340      	movs	r3, #64	; 0x40
 8010028:	2000      	movs	r0, #0
 801002a:	6023      	str	r3, [r4, #0]
 801002c:	b016      	add	sp, #88	; 0x58
 801002e:	bd70      	pop	{r4, r5, r6, pc}

08010030 <__smakebuf_r>:
 8010030:	898b      	ldrh	r3, [r1, #12]
 8010032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010034:	079d      	lsls	r5, r3, #30
 8010036:	4606      	mov	r6, r0
 8010038:	460c      	mov	r4, r1
 801003a:	d507      	bpl.n	801004c <__smakebuf_r+0x1c>
 801003c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010040:	6023      	str	r3, [r4, #0]
 8010042:	6123      	str	r3, [r4, #16]
 8010044:	2301      	movs	r3, #1
 8010046:	6163      	str	r3, [r4, #20]
 8010048:	b002      	add	sp, #8
 801004a:	bd70      	pop	{r4, r5, r6, pc}
 801004c:	ab01      	add	r3, sp, #4
 801004e:	466a      	mov	r2, sp
 8010050:	f7ff ffca 	bl	800ffe8 <__swhatbuf_r>
 8010054:	9900      	ldr	r1, [sp, #0]
 8010056:	4605      	mov	r5, r0
 8010058:	4630      	mov	r0, r6
 801005a:	f000 f877 	bl	801014c <_malloc_r>
 801005e:	b948      	cbnz	r0, 8010074 <__smakebuf_r+0x44>
 8010060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010064:	059a      	lsls	r2, r3, #22
 8010066:	d4ef      	bmi.n	8010048 <__smakebuf_r+0x18>
 8010068:	f023 0303 	bic.w	r3, r3, #3
 801006c:	f043 0302 	orr.w	r3, r3, #2
 8010070:	81a3      	strh	r3, [r4, #12]
 8010072:	e7e3      	b.n	801003c <__smakebuf_r+0xc>
 8010074:	4b0d      	ldr	r3, [pc, #52]	; (80100ac <__smakebuf_r+0x7c>)
 8010076:	62b3      	str	r3, [r6, #40]	; 0x28
 8010078:	89a3      	ldrh	r3, [r4, #12]
 801007a:	6020      	str	r0, [r4, #0]
 801007c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010080:	81a3      	strh	r3, [r4, #12]
 8010082:	9b00      	ldr	r3, [sp, #0]
 8010084:	6163      	str	r3, [r4, #20]
 8010086:	9b01      	ldr	r3, [sp, #4]
 8010088:	6120      	str	r0, [r4, #16]
 801008a:	b15b      	cbz	r3, 80100a4 <__smakebuf_r+0x74>
 801008c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010090:	4630      	mov	r0, r6
 8010092:	f000 fc3b 	bl	801090c <_isatty_r>
 8010096:	b128      	cbz	r0, 80100a4 <__smakebuf_r+0x74>
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	f023 0303 	bic.w	r3, r3, #3
 801009e:	f043 0301 	orr.w	r3, r3, #1
 80100a2:	81a3      	strh	r3, [r4, #12]
 80100a4:	89a3      	ldrh	r3, [r4, #12]
 80100a6:	431d      	orrs	r5, r3
 80100a8:	81a5      	strh	r5, [r4, #12]
 80100aa:	e7cd      	b.n	8010048 <__smakebuf_r+0x18>
 80100ac:	0800fe9d 	.word	0x0800fe9d

080100b0 <_free_r>:
 80100b0:	b538      	push	{r3, r4, r5, lr}
 80100b2:	4605      	mov	r5, r0
 80100b4:	2900      	cmp	r1, #0
 80100b6:	d045      	beq.n	8010144 <_free_r+0x94>
 80100b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100bc:	1f0c      	subs	r4, r1, #4
 80100be:	2b00      	cmp	r3, #0
 80100c0:	bfb8      	it	lt
 80100c2:	18e4      	addlt	r4, r4, r3
 80100c4:	f000 fc44 	bl	8010950 <__malloc_lock>
 80100c8:	4a1f      	ldr	r2, [pc, #124]	; (8010148 <_free_r+0x98>)
 80100ca:	6813      	ldr	r3, [r2, #0]
 80100cc:	4610      	mov	r0, r2
 80100ce:	b933      	cbnz	r3, 80100de <_free_r+0x2e>
 80100d0:	6063      	str	r3, [r4, #4]
 80100d2:	6014      	str	r4, [r2, #0]
 80100d4:	4628      	mov	r0, r5
 80100d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100da:	f000 bc3a 	b.w	8010952 <__malloc_unlock>
 80100de:	42a3      	cmp	r3, r4
 80100e0:	d90c      	bls.n	80100fc <_free_r+0x4c>
 80100e2:	6821      	ldr	r1, [r4, #0]
 80100e4:	1862      	adds	r2, r4, r1
 80100e6:	4293      	cmp	r3, r2
 80100e8:	bf04      	itt	eq
 80100ea:	681a      	ldreq	r2, [r3, #0]
 80100ec:	685b      	ldreq	r3, [r3, #4]
 80100ee:	6063      	str	r3, [r4, #4]
 80100f0:	bf04      	itt	eq
 80100f2:	1852      	addeq	r2, r2, r1
 80100f4:	6022      	streq	r2, [r4, #0]
 80100f6:	6004      	str	r4, [r0, #0]
 80100f8:	e7ec      	b.n	80100d4 <_free_r+0x24>
 80100fa:	4613      	mov	r3, r2
 80100fc:	685a      	ldr	r2, [r3, #4]
 80100fe:	b10a      	cbz	r2, 8010104 <_free_r+0x54>
 8010100:	42a2      	cmp	r2, r4
 8010102:	d9fa      	bls.n	80100fa <_free_r+0x4a>
 8010104:	6819      	ldr	r1, [r3, #0]
 8010106:	1858      	adds	r0, r3, r1
 8010108:	42a0      	cmp	r0, r4
 801010a:	d10b      	bne.n	8010124 <_free_r+0x74>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	4401      	add	r1, r0
 8010110:	1858      	adds	r0, r3, r1
 8010112:	4282      	cmp	r2, r0
 8010114:	6019      	str	r1, [r3, #0]
 8010116:	d1dd      	bne.n	80100d4 <_free_r+0x24>
 8010118:	6810      	ldr	r0, [r2, #0]
 801011a:	6852      	ldr	r2, [r2, #4]
 801011c:	605a      	str	r2, [r3, #4]
 801011e:	4401      	add	r1, r0
 8010120:	6019      	str	r1, [r3, #0]
 8010122:	e7d7      	b.n	80100d4 <_free_r+0x24>
 8010124:	d902      	bls.n	801012c <_free_r+0x7c>
 8010126:	230c      	movs	r3, #12
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	e7d3      	b.n	80100d4 <_free_r+0x24>
 801012c:	6820      	ldr	r0, [r4, #0]
 801012e:	1821      	adds	r1, r4, r0
 8010130:	428a      	cmp	r2, r1
 8010132:	bf04      	itt	eq
 8010134:	6811      	ldreq	r1, [r2, #0]
 8010136:	6852      	ldreq	r2, [r2, #4]
 8010138:	6062      	str	r2, [r4, #4]
 801013a:	bf04      	itt	eq
 801013c:	1809      	addeq	r1, r1, r0
 801013e:	6021      	streq	r1, [r4, #0]
 8010140:	605c      	str	r4, [r3, #4]
 8010142:	e7c7      	b.n	80100d4 <_free_r+0x24>
 8010144:	bd38      	pop	{r3, r4, r5, pc}
 8010146:	bf00      	nop
 8010148:	240009e8 	.word	0x240009e8

0801014c <_malloc_r>:
 801014c:	b570      	push	{r4, r5, r6, lr}
 801014e:	1ccd      	adds	r5, r1, #3
 8010150:	f025 0503 	bic.w	r5, r5, #3
 8010154:	3508      	adds	r5, #8
 8010156:	2d0c      	cmp	r5, #12
 8010158:	bf38      	it	cc
 801015a:	250c      	movcc	r5, #12
 801015c:	2d00      	cmp	r5, #0
 801015e:	4606      	mov	r6, r0
 8010160:	db01      	blt.n	8010166 <_malloc_r+0x1a>
 8010162:	42a9      	cmp	r1, r5
 8010164:	d903      	bls.n	801016e <_malloc_r+0x22>
 8010166:	230c      	movs	r3, #12
 8010168:	6033      	str	r3, [r6, #0]
 801016a:	2000      	movs	r0, #0
 801016c:	bd70      	pop	{r4, r5, r6, pc}
 801016e:	f000 fbef 	bl	8010950 <__malloc_lock>
 8010172:	4a21      	ldr	r2, [pc, #132]	; (80101f8 <_malloc_r+0xac>)
 8010174:	6814      	ldr	r4, [r2, #0]
 8010176:	4621      	mov	r1, r4
 8010178:	b991      	cbnz	r1, 80101a0 <_malloc_r+0x54>
 801017a:	4c20      	ldr	r4, [pc, #128]	; (80101fc <_malloc_r+0xb0>)
 801017c:	6823      	ldr	r3, [r4, #0]
 801017e:	b91b      	cbnz	r3, 8010188 <_malloc_r+0x3c>
 8010180:	4630      	mov	r0, r6
 8010182:	f000 fb3b 	bl	80107fc <_sbrk_r>
 8010186:	6020      	str	r0, [r4, #0]
 8010188:	4629      	mov	r1, r5
 801018a:	4630      	mov	r0, r6
 801018c:	f000 fb36 	bl	80107fc <_sbrk_r>
 8010190:	1c43      	adds	r3, r0, #1
 8010192:	d124      	bne.n	80101de <_malloc_r+0x92>
 8010194:	230c      	movs	r3, #12
 8010196:	6033      	str	r3, [r6, #0]
 8010198:	4630      	mov	r0, r6
 801019a:	f000 fbda 	bl	8010952 <__malloc_unlock>
 801019e:	e7e4      	b.n	801016a <_malloc_r+0x1e>
 80101a0:	680b      	ldr	r3, [r1, #0]
 80101a2:	1b5b      	subs	r3, r3, r5
 80101a4:	d418      	bmi.n	80101d8 <_malloc_r+0x8c>
 80101a6:	2b0b      	cmp	r3, #11
 80101a8:	d90f      	bls.n	80101ca <_malloc_r+0x7e>
 80101aa:	600b      	str	r3, [r1, #0]
 80101ac:	50cd      	str	r5, [r1, r3]
 80101ae:	18cc      	adds	r4, r1, r3
 80101b0:	4630      	mov	r0, r6
 80101b2:	f000 fbce 	bl	8010952 <__malloc_unlock>
 80101b6:	f104 000b 	add.w	r0, r4, #11
 80101ba:	1d23      	adds	r3, r4, #4
 80101bc:	f020 0007 	bic.w	r0, r0, #7
 80101c0:	1ac3      	subs	r3, r0, r3
 80101c2:	d0d3      	beq.n	801016c <_malloc_r+0x20>
 80101c4:	425a      	negs	r2, r3
 80101c6:	50e2      	str	r2, [r4, r3]
 80101c8:	e7d0      	b.n	801016c <_malloc_r+0x20>
 80101ca:	428c      	cmp	r4, r1
 80101cc:	684b      	ldr	r3, [r1, #4]
 80101ce:	bf16      	itet	ne
 80101d0:	6063      	strne	r3, [r4, #4]
 80101d2:	6013      	streq	r3, [r2, #0]
 80101d4:	460c      	movne	r4, r1
 80101d6:	e7eb      	b.n	80101b0 <_malloc_r+0x64>
 80101d8:	460c      	mov	r4, r1
 80101da:	6849      	ldr	r1, [r1, #4]
 80101dc:	e7cc      	b.n	8010178 <_malloc_r+0x2c>
 80101de:	1cc4      	adds	r4, r0, #3
 80101e0:	f024 0403 	bic.w	r4, r4, #3
 80101e4:	42a0      	cmp	r0, r4
 80101e6:	d005      	beq.n	80101f4 <_malloc_r+0xa8>
 80101e8:	1a21      	subs	r1, r4, r0
 80101ea:	4630      	mov	r0, r6
 80101ec:	f000 fb06 	bl	80107fc <_sbrk_r>
 80101f0:	3001      	adds	r0, #1
 80101f2:	d0cf      	beq.n	8010194 <_malloc_r+0x48>
 80101f4:	6025      	str	r5, [r4, #0]
 80101f6:	e7db      	b.n	80101b0 <_malloc_r+0x64>
 80101f8:	240009e8 	.word	0x240009e8
 80101fc:	240009ec 	.word	0x240009ec

08010200 <__sfputc_r>:
 8010200:	6893      	ldr	r3, [r2, #8]
 8010202:	3b01      	subs	r3, #1
 8010204:	2b00      	cmp	r3, #0
 8010206:	b410      	push	{r4}
 8010208:	6093      	str	r3, [r2, #8]
 801020a:	da08      	bge.n	801021e <__sfputc_r+0x1e>
 801020c:	6994      	ldr	r4, [r2, #24]
 801020e:	42a3      	cmp	r3, r4
 8010210:	db01      	blt.n	8010216 <__sfputc_r+0x16>
 8010212:	290a      	cmp	r1, #10
 8010214:	d103      	bne.n	801021e <__sfputc_r+0x1e>
 8010216:	f85d 4b04 	ldr.w	r4, [sp], #4
 801021a:	f7ff bcab 	b.w	800fb74 <__swbuf_r>
 801021e:	6813      	ldr	r3, [r2, #0]
 8010220:	1c58      	adds	r0, r3, #1
 8010222:	6010      	str	r0, [r2, #0]
 8010224:	7019      	strb	r1, [r3, #0]
 8010226:	4608      	mov	r0, r1
 8010228:	f85d 4b04 	ldr.w	r4, [sp], #4
 801022c:	4770      	bx	lr

0801022e <__sfputs_r>:
 801022e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010230:	4606      	mov	r6, r0
 8010232:	460f      	mov	r7, r1
 8010234:	4614      	mov	r4, r2
 8010236:	18d5      	adds	r5, r2, r3
 8010238:	42ac      	cmp	r4, r5
 801023a:	d101      	bne.n	8010240 <__sfputs_r+0x12>
 801023c:	2000      	movs	r0, #0
 801023e:	e007      	b.n	8010250 <__sfputs_r+0x22>
 8010240:	463a      	mov	r2, r7
 8010242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010246:	4630      	mov	r0, r6
 8010248:	f7ff ffda 	bl	8010200 <__sfputc_r>
 801024c:	1c43      	adds	r3, r0, #1
 801024e:	d1f3      	bne.n	8010238 <__sfputs_r+0xa>
 8010250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010254 <_vfiprintf_r>:
 8010254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010258:	460c      	mov	r4, r1
 801025a:	b09d      	sub	sp, #116	; 0x74
 801025c:	4617      	mov	r7, r2
 801025e:	461d      	mov	r5, r3
 8010260:	4606      	mov	r6, r0
 8010262:	b118      	cbz	r0, 801026c <_vfiprintf_r+0x18>
 8010264:	6983      	ldr	r3, [r0, #24]
 8010266:	b90b      	cbnz	r3, 801026c <_vfiprintf_r+0x18>
 8010268:	f7ff fe34 	bl	800fed4 <__sinit>
 801026c:	4b7c      	ldr	r3, [pc, #496]	; (8010460 <_vfiprintf_r+0x20c>)
 801026e:	429c      	cmp	r4, r3
 8010270:	d158      	bne.n	8010324 <_vfiprintf_r+0xd0>
 8010272:	6874      	ldr	r4, [r6, #4]
 8010274:	89a3      	ldrh	r3, [r4, #12]
 8010276:	0718      	lsls	r0, r3, #28
 8010278:	d55e      	bpl.n	8010338 <_vfiprintf_r+0xe4>
 801027a:	6923      	ldr	r3, [r4, #16]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d05b      	beq.n	8010338 <_vfiprintf_r+0xe4>
 8010280:	2300      	movs	r3, #0
 8010282:	9309      	str	r3, [sp, #36]	; 0x24
 8010284:	2320      	movs	r3, #32
 8010286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801028a:	2330      	movs	r3, #48	; 0x30
 801028c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010290:	9503      	str	r5, [sp, #12]
 8010292:	f04f 0b01 	mov.w	fp, #1
 8010296:	46b8      	mov	r8, r7
 8010298:	4645      	mov	r5, r8
 801029a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801029e:	b10b      	cbz	r3, 80102a4 <_vfiprintf_r+0x50>
 80102a0:	2b25      	cmp	r3, #37	; 0x25
 80102a2:	d154      	bne.n	801034e <_vfiprintf_r+0xfa>
 80102a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80102a8:	d00b      	beq.n	80102c2 <_vfiprintf_r+0x6e>
 80102aa:	4653      	mov	r3, sl
 80102ac:	463a      	mov	r2, r7
 80102ae:	4621      	mov	r1, r4
 80102b0:	4630      	mov	r0, r6
 80102b2:	f7ff ffbc 	bl	801022e <__sfputs_r>
 80102b6:	3001      	adds	r0, #1
 80102b8:	f000 80c2 	beq.w	8010440 <_vfiprintf_r+0x1ec>
 80102bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102be:	4453      	add	r3, sl
 80102c0:	9309      	str	r3, [sp, #36]	; 0x24
 80102c2:	f898 3000 	ldrb.w	r3, [r8]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f000 80ba 	beq.w	8010440 <_vfiprintf_r+0x1ec>
 80102cc:	2300      	movs	r3, #0
 80102ce:	f04f 32ff 	mov.w	r2, #4294967295
 80102d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102d6:	9304      	str	r3, [sp, #16]
 80102d8:	9307      	str	r3, [sp, #28]
 80102da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102de:	931a      	str	r3, [sp, #104]	; 0x68
 80102e0:	46a8      	mov	r8, r5
 80102e2:	2205      	movs	r2, #5
 80102e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80102e8:	485e      	ldr	r0, [pc, #376]	; (8010464 <_vfiprintf_r+0x210>)
 80102ea:	f7f0 f809 	bl	8000300 <memchr>
 80102ee:	9b04      	ldr	r3, [sp, #16]
 80102f0:	bb78      	cbnz	r0, 8010352 <_vfiprintf_r+0xfe>
 80102f2:	06d9      	lsls	r1, r3, #27
 80102f4:	bf44      	itt	mi
 80102f6:	2220      	movmi	r2, #32
 80102f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80102fc:	071a      	lsls	r2, r3, #28
 80102fe:	bf44      	itt	mi
 8010300:	222b      	movmi	r2, #43	; 0x2b
 8010302:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010306:	782a      	ldrb	r2, [r5, #0]
 8010308:	2a2a      	cmp	r2, #42	; 0x2a
 801030a:	d02a      	beq.n	8010362 <_vfiprintf_r+0x10e>
 801030c:	9a07      	ldr	r2, [sp, #28]
 801030e:	46a8      	mov	r8, r5
 8010310:	2000      	movs	r0, #0
 8010312:	250a      	movs	r5, #10
 8010314:	4641      	mov	r1, r8
 8010316:	f811 3b01 	ldrb.w	r3, [r1], #1
 801031a:	3b30      	subs	r3, #48	; 0x30
 801031c:	2b09      	cmp	r3, #9
 801031e:	d969      	bls.n	80103f4 <_vfiprintf_r+0x1a0>
 8010320:	b360      	cbz	r0, 801037c <_vfiprintf_r+0x128>
 8010322:	e024      	b.n	801036e <_vfiprintf_r+0x11a>
 8010324:	4b50      	ldr	r3, [pc, #320]	; (8010468 <_vfiprintf_r+0x214>)
 8010326:	429c      	cmp	r4, r3
 8010328:	d101      	bne.n	801032e <_vfiprintf_r+0xda>
 801032a:	68b4      	ldr	r4, [r6, #8]
 801032c:	e7a2      	b.n	8010274 <_vfiprintf_r+0x20>
 801032e:	4b4f      	ldr	r3, [pc, #316]	; (801046c <_vfiprintf_r+0x218>)
 8010330:	429c      	cmp	r4, r3
 8010332:	bf08      	it	eq
 8010334:	68f4      	ldreq	r4, [r6, #12]
 8010336:	e79d      	b.n	8010274 <_vfiprintf_r+0x20>
 8010338:	4621      	mov	r1, r4
 801033a:	4630      	mov	r0, r6
 801033c:	f7ff fc6c 	bl	800fc18 <__swsetup_r>
 8010340:	2800      	cmp	r0, #0
 8010342:	d09d      	beq.n	8010280 <_vfiprintf_r+0x2c>
 8010344:	f04f 30ff 	mov.w	r0, #4294967295
 8010348:	b01d      	add	sp, #116	; 0x74
 801034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801034e:	46a8      	mov	r8, r5
 8010350:	e7a2      	b.n	8010298 <_vfiprintf_r+0x44>
 8010352:	4a44      	ldr	r2, [pc, #272]	; (8010464 <_vfiprintf_r+0x210>)
 8010354:	1a80      	subs	r0, r0, r2
 8010356:	fa0b f000 	lsl.w	r0, fp, r0
 801035a:	4318      	orrs	r0, r3
 801035c:	9004      	str	r0, [sp, #16]
 801035e:	4645      	mov	r5, r8
 8010360:	e7be      	b.n	80102e0 <_vfiprintf_r+0x8c>
 8010362:	9a03      	ldr	r2, [sp, #12]
 8010364:	1d11      	adds	r1, r2, #4
 8010366:	6812      	ldr	r2, [r2, #0]
 8010368:	9103      	str	r1, [sp, #12]
 801036a:	2a00      	cmp	r2, #0
 801036c:	db01      	blt.n	8010372 <_vfiprintf_r+0x11e>
 801036e:	9207      	str	r2, [sp, #28]
 8010370:	e004      	b.n	801037c <_vfiprintf_r+0x128>
 8010372:	4252      	negs	r2, r2
 8010374:	f043 0302 	orr.w	r3, r3, #2
 8010378:	9207      	str	r2, [sp, #28]
 801037a:	9304      	str	r3, [sp, #16]
 801037c:	f898 3000 	ldrb.w	r3, [r8]
 8010380:	2b2e      	cmp	r3, #46	; 0x2e
 8010382:	d10e      	bne.n	80103a2 <_vfiprintf_r+0x14e>
 8010384:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010388:	2b2a      	cmp	r3, #42	; 0x2a
 801038a:	d138      	bne.n	80103fe <_vfiprintf_r+0x1aa>
 801038c:	9b03      	ldr	r3, [sp, #12]
 801038e:	1d1a      	adds	r2, r3, #4
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	9203      	str	r2, [sp, #12]
 8010394:	2b00      	cmp	r3, #0
 8010396:	bfb8      	it	lt
 8010398:	f04f 33ff 	movlt.w	r3, #4294967295
 801039c:	f108 0802 	add.w	r8, r8, #2
 80103a0:	9305      	str	r3, [sp, #20]
 80103a2:	4d33      	ldr	r5, [pc, #204]	; (8010470 <_vfiprintf_r+0x21c>)
 80103a4:	f898 1000 	ldrb.w	r1, [r8]
 80103a8:	2203      	movs	r2, #3
 80103aa:	4628      	mov	r0, r5
 80103ac:	f7ef ffa8 	bl	8000300 <memchr>
 80103b0:	b140      	cbz	r0, 80103c4 <_vfiprintf_r+0x170>
 80103b2:	2340      	movs	r3, #64	; 0x40
 80103b4:	1b40      	subs	r0, r0, r5
 80103b6:	fa03 f000 	lsl.w	r0, r3, r0
 80103ba:	9b04      	ldr	r3, [sp, #16]
 80103bc:	4303      	orrs	r3, r0
 80103be:	f108 0801 	add.w	r8, r8, #1
 80103c2:	9304      	str	r3, [sp, #16]
 80103c4:	f898 1000 	ldrb.w	r1, [r8]
 80103c8:	482a      	ldr	r0, [pc, #168]	; (8010474 <_vfiprintf_r+0x220>)
 80103ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103ce:	2206      	movs	r2, #6
 80103d0:	f108 0701 	add.w	r7, r8, #1
 80103d4:	f7ef ff94 	bl	8000300 <memchr>
 80103d8:	2800      	cmp	r0, #0
 80103da:	d037      	beq.n	801044c <_vfiprintf_r+0x1f8>
 80103dc:	4b26      	ldr	r3, [pc, #152]	; (8010478 <_vfiprintf_r+0x224>)
 80103de:	bb1b      	cbnz	r3, 8010428 <_vfiprintf_r+0x1d4>
 80103e0:	9b03      	ldr	r3, [sp, #12]
 80103e2:	3307      	adds	r3, #7
 80103e4:	f023 0307 	bic.w	r3, r3, #7
 80103e8:	3308      	adds	r3, #8
 80103ea:	9303      	str	r3, [sp, #12]
 80103ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ee:	444b      	add	r3, r9
 80103f0:	9309      	str	r3, [sp, #36]	; 0x24
 80103f2:	e750      	b.n	8010296 <_vfiprintf_r+0x42>
 80103f4:	fb05 3202 	mla	r2, r5, r2, r3
 80103f8:	2001      	movs	r0, #1
 80103fa:	4688      	mov	r8, r1
 80103fc:	e78a      	b.n	8010314 <_vfiprintf_r+0xc0>
 80103fe:	2300      	movs	r3, #0
 8010400:	f108 0801 	add.w	r8, r8, #1
 8010404:	9305      	str	r3, [sp, #20]
 8010406:	4619      	mov	r1, r3
 8010408:	250a      	movs	r5, #10
 801040a:	4640      	mov	r0, r8
 801040c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010410:	3a30      	subs	r2, #48	; 0x30
 8010412:	2a09      	cmp	r2, #9
 8010414:	d903      	bls.n	801041e <_vfiprintf_r+0x1ca>
 8010416:	2b00      	cmp	r3, #0
 8010418:	d0c3      	beq.n	80103a2 <_vfiprintf_r+0x14e>
 801041a:	9105      	str	r1, [sp, #20]
 801041c:	e7c1      	b.n	80103a2 <_vfiprintf_r+0x14e>
 801041e:	fb05 2101 	mla	r1, r5, r1, r2
 8010422:	2301      	movs	r3, #1
 8010424:	4680      	mov	r8, r0
 8010426:	e7f0      	b.n	801040a <_vfiprintf_r+0x1b6>
 8010428:	ab03      	add	r3, sp, #12
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	4622      	mov	r2, r4
 801042e:	4b13      	ldr	r3, [pc, #76]	; (801047c <_vfiprintf_r+0x228>)
 8010430:	a904      	add	r1, sp, #16
 8010432:	4630      	mov	r0, r6
 8010434:	f3af 8000 	nop.w
 8010438:	f1b0 3fff 	cmp.w	r0, #4294967295
 801043c:	4681      	mov	r9, r0
 801043e:	d1d5      	bne.n	80103ec <_vfiprintf_r+0x198>
 8010440:	89a3      	ldrh	r3, [r4, #12]
 8010442:	065b      	lsls	r3, r3, #25
 8010444:	f53f af7e 	bmi.w	8010344 <_vfiprintf_r+0xf0>
 8010448:	9809      	ldr	r0, [sp, #36]	; 0x24
 801044a:	e77d      	b.n	8010348 <_vfiprintf_r+0xf4>
 801044c:	ab03      	add	r3, sp, #12
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	4622      	mov	r2, r4
 8010452:	4b0a      	ldr	r3, [pc, #40]	; (801047c <_vfiprintf_r+0x228>)
 8010454:	a904      	add	r1, sp, #16
 8010456:	4630      	mov	r0, r6
 8010458:	f000 f888 	bl	801056c <_printf_i>
 801045c:	e7ec      	b.n	8010438 <_vfiprintf_r+0x1e4>
 801045e:	bf00      	nop
 8010460:	08011434 	.word	0x08011434
 8010464:	08011474 	.word	0x08011474
 8010468:	08011454 	.word	0x08011454
 801046c:	08011414 	.word	0x08011414
 8010470:	0801147a 	.word	0x0801147a
 8010474:	0801147e 	.word	0x0801147e
 8010478:	00000000 	.word	0x00000000
 801047c:	0801022f 	.word	0x0801022f

08010480 <_printf_common>:
 8010480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010484:	4691      	mov	r9, r2
 8010486:	461f      	mov	r7, r3
 8010488:	688a      	ldr	r2, [r1, #8]
 801048a:	690b      	ldr	r3, [r1, #16]
 801048c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010490:	4293      	cmp	r3, r2
 8010492:	bfb8      	it	lt
 8010494:	4613      	movlt	r3, r2
 8010496:	f8c9 3000 	str.w	r3, [r9]
 801049a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801049e:	4606      	mov	r6, r0
 80104a0:	460c      	mov	r4, r1
 80104a2:	b112      	cbz	r2, 80104aa <_printf_common+0x2a>
 80104a4:	3301      	adds	r3, #1
 80104a6:	f8c9 3000 	str.w	r3, [r9]
 80104aa:	6823      	ldr	r3, [r4, #0]
 80104ac:	0699      	lsls	r1, r3, #26
 80104ae:	bf42      	ittt	mi
 80104b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80104b4:	3302      	addmi	r3, #2
 80104b6:	f8c9 3000 	strmi.w	r3, [r9]
 80104ba:	6825      	ldr	r5, [r4, #0]
 80104bc:	f015 0506 	ands.w	r5, r5, #6
 80104c0:	d107      	bne.n	80104d2 <_printf_common+0x52>
 80104c2:	f104 0a19 	add.w	sl, r4, #25
 80104c6:	68e3      	ldr	r3, [r4, #12]
 80104c8:	f8d9 2000 	ldr.w	r2, [r9]
 80104cc:	1a9b      	subs	r3, r3, r2
 80104ce:	42ab      	cmp	r3, r5
 80104d0:	dc28      	bgt.n	8010524 <_printf_common+0xa4>
 80104d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80104d6:	6822      	ldr	r2, [r4, #0]
 80104d8:	3300      	adds	r3, #0
 80104da:	bf18      	it	ne
 80104dc:	2301      	movne	r3, #1
 80104de:	0692      	lsls	r2, r2, #26
 80104e0:	d42d      	bmi.n	801053e <_printf_common+0xbe>
 80104e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104e6:	4639      	mov	r1, r7
 80104e8:	4630      	mov	r0, r6
 80104ea:	47c0      	blx	r8
 80104ec:	3001      	adds	r0, #1
 80104ee:	d020      	beq.n	8010532 <_printf_common+0xb2>
 80104f0:	6823      	ldr	r3, [r4, #0]
 80104f2:	68e5      	ldr	r5, [r4, #12]
 80104f4:	f8d9 2000 	ldr.w	r2, [r9]
 80104f8:	f003 0306 	and.w	r3, r3, #6
 80104fc:	2b04      	cmp	r3, #4
 80104fe:	bf08      	it	eq
 8010500:	1aad      	subeq	r5, r5, r2
 8010502:	68a3      	ldr	r3, [r4, #8]
 8010504:	6922      	ldr	r2, [r4, #16]
 8010506:	bf0c      	ite	eq
 8010508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801050c:	2500      	movne	r5, #0
 801050e:	4293      	cmp	r3, r2
 8010510:	bfc4      	itt	gt
 8010512:	1a9b      	subgt	r3, r3, r2
 8010514:	18ed      	addgt	r5, r5, r3
 8010516:	f04f 0900 	mov.w	r9, #0
 801051a:	341a      	adds	r4, #26
 801051c:	454d      	cmp	r5, r9
 801051e:	d11a      	bne.n	8010556 <_printf_common+0xd6>
 8010520:	2000      	movs	r0, #0
 8010522:	e008      	b.n	8010536 <_printf_common+0xb6>
 8010524:	2301      	movs	r3, #1
 8010526:	4652      	mov	r2, sl
 8010528:	4639      	mov	r1, r7
 801052a:	4630      	mov	r0, r6
 801052c:	47c0      	blx	r8
 801052e:	3001      	adds	r0, #1
 8010530:	d103      	bne.n	801053a <_printf_common+0xba>
 8010532:	f04f 30ff 	mov.w	r0, #4294967295
 8010536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801053a:	3501      	adds	r5, #1
 801053c:	e7c3      	b.n	80104c6 <_printf_common+0x46>
 801053e:	18e1      	adds	r1, r4, r3
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	2030      	movs	r0, #48	; 0x30
 8010544:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010548:	4422      	add	r2, r4
 801054a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801054e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010552:	3302      	adds	r3, #2
 8010554:	e7c5      	b.n	80104e2 <_printf_common+0x62>
 8010556:	2301      	movs	r3, #1
 8010558:	4622      	mov	r2, r4
 801055a:	4639      	mov	r1, r7
 801055c:	4630      	mov	r0, r6
 801055e:	47c0      	blx	r8
 8010560:	3001      	adds	r0, #1
 8010562:	d0e6      	beq.n	8010532 <_printf_common+0xb2>
 8010564:	f109 0901 	add.w	r9, r9, #1
 8010568:	e7d8      	b.n	801051c <_printf_common+0x9c>
	...

0801056c <_printf_i>:
 801056c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010570:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010574:	460c      	mov	r4, r1
 8010576:	7e09      	ldrb	r1, [r1, #24]
 8010578:	b085      	sub	sp, #20
 801057a:	296e      	cmp	r1, #110	; 0x6e
 801057c:	4617      	mov	r7, r2
 801057e:	4606      	mov	r6, r0
 8010580:	4698      	mov	r8, r3
 8010582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010584:	f000 80b3 	beq.w	80106ee <_printf_i+0x182>
 8010588:	d822      	bhi.n	80105d0 <_printf_i+0x64>
 801058a:	2963      	cmp	r1, #99	; 0x63
 801058c:	d036      	beq.n	80105fc <_printf_i+0x90>
 801058e:	d80a      	bhi.n	80105a6 <_printf_i+0x3a>
 8010590:	2900      	cmp	r1, #0
 8010592:	f000 80b9 	beq.w	8010708 <_printf_i+0x19c>
 8010596:	2958      	cmp	r1, #88	; 0x58
 8010598:	f000 8083 	beq.w	80106a2 <_printf_i+0x136>
 801059c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80105a4:	e032      	b.n	801060c <_printf_i+0xa0>
 80105a6:	2964      	cmp	r1, #100	; 0x64
 80105a8:	d001      	beq.n	80105ae <_printf_i+0x42>
 80105aa:	2969      	cmp	r1, #105	; 0x69
 80105ac:	d1f6      	bne.n	801059c <_printf_i+0x30>
 80105ae:	6820      	ldr	r0, [r4, #0]
 80105b0:	6813      	ldr	r3, [r2, #0]
 80105b2:	0605      	lsls	r5, r0, #24
 80105b4:	f103 0104 	add.w	r1, r3, #4
 80105b8:	d52a      	bpl.n	8010610 <_printf_i+0xa4>
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	6011      	str	r1, [r2, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	da03      	bge.n	80105ca <_printf_i+0x5e>
 80105c2:	222d      	movs	r2, #45	; 0x2d
 80105c4:	425b      	negs	r3, r3
 80105c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80105ca:	486f      	ldr	r0, [pc, #444]	; (8010788 <_printf_i+0x21c>)
 80105cc:	220a      	movs	r2, #10
 80105ce:	e039      	b.n	8010644 <_printf_i+0xd8>
 80105d0:	2973      	cmp	r1, #115	; 0x73
 80105d2:	f000 809d 	beq.w	8010710 <_printf_i+0x1a4>
 80105d6:	d808      	bhi.n	80105ea <_printf_i+0x7e>
 80105d8:	296f      	cmp	r1, #111	; 0x6f
 80105da:	d020      	beq.n	801061e <_printf_i+0xb2>
 80105dc:	2970      	cmp	r1, #112	; 0x70
 80105de:	d1dd      	bne.n	801059c <_printf_i+0x30>
 80105e0:	6823      	ldr	r3, [r4, #0]
 80105e2:	f043 0320 	orr.w	r3, r3, #32
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	e003      	b.n	80105f2 <_printf_i+0x86>
 80105ea:	2975      	cmp	r1, #117	; 0x75
 80105ec:	d017      	beq.n	801061e <_printf_i+0xb2>
 80105ee:	2978      	cmp	r1, #120	; 0x78
 80105f0:	d1d4      	bne.n	801059c <_printf_i+0x30>
 80105f2:	2378      	movs	r3, #120	; 0x78
 80105f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105f8:	4864      	ldr	r0, [pc, #400]	; (801078c <_printf_i+0x220>)
 80105fa:	e055      	b.n	80106a8 <_printf_i+0x13c>
 80105fc:	6813      	ldr	r3, [r2, #0]
 80105fe:	1d19      	adds	r1, r3, #4
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	6011      	str	r1, [r2, #0]
 8010604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801060c:	2301      	movs	r3, #1
 801060e:	e08c      	b.n	801072a <_printf_i+0x1be>
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	6011      	str	r1, [r2, #0]
 8010614:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010618:	bf18      	it	ne
 801061a:	b21b      	sxthne	r3, r3
 801061c:	e7cf      	b.n	80105be <_printf_i+0x52>
 801061e:	6813      	ldr	r3, [r2, #0]
 8010620:	6825      	ldr	r5, [r4, #0]
 8010622:	1d18      	adds	r0, r3, #4
 8010624:	6010      	str	r0, [r2, #0]
 8010626:	0628      	lsls	r0, r5, #24
 8010628:	d501      	bpl.n	801062e <_printf_i+0xc2>
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	e002      	b.n	8010634 <_printf_i+0xc8>
 801062e:	0668      	lsls	r0, r5, #25
 8010630:	d5fb      	bpl.n	801062a <_printf_i+0xbe>
 8010632:	881b      	ldrh	r3, [r3, #0]
 8010634:	4854      	ldr	r0, [pc, #336]	; (8010788 <_printf_i+0x21c>)
 8010636:	296f      	cmp	r1, #111	; 0x6f
 8010638:	bf14      	ite	ne
 801063a:	220a      	movne	r2, #10
 801063c:	2208      	moveq	r2, #8
 801063e:	2100      	movs	r1, #0
 8010640:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010644:	6865      	ldr	r5, [r4, #4]
 8010646:	60a5      	str	r5, [r4, #8]
 8010648:	2d00      	cmp	r5, #0
 801064a:	f2c0 8095 	blt.w	8010778 <_printf_i+0x20c>
 801064e:	6821      	ldr	r1, [r4, #0]
 8010650:	f021 0104 	bic.w	r1, r1, #4
 8010654:	6021      	str	r1, [r4, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d13d      	bne.n	80106d6 <_printf_i+0x16a>
 801065a:	2d00      	cmp	r5, #0
 801065c:	f040 808e 	bne.w	801077c <_printf_i+0x210>
 8010660:	4665      	mov	r5, ip
 8010662:	2a08      	cmp	r2, #8
 8010664:	d10b      	bne.n	801067e <_printf_i+0x112>
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	07db      	lsls	r3, r3, #31
 801066a:	d508      	bpl.n	801067e <_printf_i+0x112>
 801066c:	6923      	ldr	r3, [r4, #16]
 801066e:	6862      	ldr	r2, [r4, #4]
 8010670:	429a      	cmp	r2, r3
 8010672:	bfde      	ittt	le
 8010674:	2330      	movle	r3, #48	; 0x30
 8010676:	f805 3c01 	strble.w	r3, [r5, #-1]
 801067a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801067e:	ebac 0305 	sub.w	r3, ip, r5
 8010682:	6123      	str	r3, [r4, #16]
 8010684:	f8cd 8000 	str.w	r8, [sp]
 8010688:	463b      	mov	r3, r7
 801068a:	aa03      	add	r2, sp, #12
 801068c:	4621      	mov	r1, r4
 801068e:	4630      	mov	r0, r6
 8010690:	f7ff fef6 	bl	8010480 <_printf_common>
 8010694:	3001      	adds	r0, #1
 8010696:	d14d      	bne.n	8010734 <_printf_i+0x1c8>
 8010698:	f04f 30ff 	mov.w	r0, #4294967295
 801069c:	b005      	add	sp, #20
 801069e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106a2:	4839      	ldr	r0, [pc, #228]	; (8010788 <_printf_i+0x21c>)
 80106a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80106a8:	6813      	ldr	r3, [r2, #0]
 80106aa:	6821      	ldr	r1, [r4, #0]
 80106ac:	1d1d      	adds	r5, r3, #4
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	6015      	str	r5, [r2, #0]
 80106b2:	060a      	lsls	r2, r1, #24
 80106b4:	d50b      	bpl.n	80106ce <_printf_i+0x162>
 80106b6:	07ca      	lsls	r2, r1, #31
 80106b8:	bf44      	itt	mi
 80106ba:	f041 0120 	orrmi.w	r1, r1, #32
 80106be:	6021      	strmi	r1, [r4, #0]
 80106c0:	b91b      	cbnz	r3, 80106ca <_printf_i+0x15e>
 80106c2:	6822      	ldr	r2, [r4, #0]
 80106c4:	f022 0220 	bic.w	r2, r2, #32
 80106c8:	6022      	str	r2, [r4, #0]
 80106ca:	2210      	movs	r2, #16
 80106cc:	e7b7      	b.n	801063e <_printf_i+0xd2>
 80106ce:	064d      	lsls	r5, r1, #25
 80106d0:	bf48      	it	mi
 80106d2:	b29b      	uxthmi	r3, r3
 80106d4:	e7ef      	b.n	80106b6 <_printf_i+0x14a>
 80106d6:	4665      	mov	r5, ip
 80106d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80106dc:	fb02 3311 	mls	r3, r2, r1, r3
 80106e0:	5cc3      	ldrb	r3, [r0, r3]
 80106e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80106e6:	460b      	mov	r3, r1
 80106e8:	2900      	cmp	r1, #0
 80106ea:	d1f5      	bne.n	80106d8 <_printf_i+0x16c>
 80106ec:	e7b9      	b.n	8010662 <_printf_i+0xf6>
 80106ee:	6813      	ldr	r3, [r2, #0]
 80106f0:	6825      	ldr	r5, [r4, #0]
 80106f2:	6961      	ldr	r1, [r4, #20]
 80106f4:	1d18      	adds	r0, r3, #4
 80106f6:	6010      	str	r0, [r2, #0]
 80106f8:	0628      	lsls	r0, r5, #24
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	d501      	bpl.n	8010702 <_printf_i+0x196>
 80106fe:	6019      	str	r1, [r3, #0]
 8010700:	e002      	b.n	8010708 <_printf_i+0x19c>
 8010702:	066a      	lsls	r2, r5, #25
 8010704:	d5fb      	bpl.n	80106fe <_printf_i+0x192>
 8010706:	8019      	strh	r1, [r3, #0]
 8010708:	2300      	movs	r3, #0
 801070a:	6123      	str	r3, [r4, #16]
 801070c:	4665      	mov	r5, ip
 801070e:	e7b9      	b.n	8010684 <_printf_i+0x118>
 8010710:	6813      	ldr	r3, [r2, #0]
 8010712:	1d19      	adds	r1, r3, #4
 8010714:	6011      	str	r1, [r2, #0]
 8010716:	681d      	ldr	r5, [r3, #0]
 8010718:	6862      	ldr	r2, [r4, #4]
 801071a:	2100      	movs	r1, #0
 801071c:	4628      	mov	r0, r5
 801071e:	f7ef fdef 	bl	8000300 <memchr>
 8010722:	b108      	cbz	r0, 8010728 <_printf_i+0x1bc>
 8010724:	1b40      	subs	r0, r0, r5
 8010726:	6060      	str	r0, [r4, #4]
 8010728:	6863      	ldr	r3, [r4, #4]
 801072a:	6123      	str	r3, [r4, #16]
 801072c:	2300      	movs	r3, #0
 801072e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010732:	e7a7      	b.n	8010684 <_printf_i+0x118>
 8010734:	6923      	ldr	r3, [r4, #16]
 8010736:	462a      	mov	r2, r5
 8010738:	4639      	mov	r1, r7
 801073a:	4630      	mov	r0, r6
 801073c:	47c0      	blx	r8
 801073e:	3001      	adds	r0, #1
 8010740:	d0aa      	beq.n	8010698 <_printf_i+0x12c>
 8010742:	6823      	ldr	r3, [r4, #0]
 8010744:	079b      	lsls	r3, r3, #30
 8010746:	d413      	bmi.n	8010770 <_printf_i+0x204>
 8010748:	68e0      	ldr	r0, [r4, #12]
 801074a:	9b03      	ldr	r3, [sp, #12]
 801074c:	4298      	cmp	r0, r3
 801074e:	bfb8      	it	lt
 8010750:	4618      	movlt	r0, r3
 8010752:	e7a3      	b.n	801069c <_printf_i+0x130>
 8010754:	2301      	movs	r3, #1
 8010756:	464a      	mov	r2, r9
 8010758:	4639      	mov	r1, r7
 801075a:	4630      	mov	r0, r6
 801075c:	47c0      	blx	r8
 801075e:	3001      	adds	r0, #1
 8010760:	d09a      	beq.n	8010698 <_printf_i+0x12c>
 8010762:	3501      	adds	r5, #1
 8010764:	68e3      	ldr	r3, [r4, #12]
 8010766:	9a03      	ldr	r2, [sp, #12]
 8010768:	1a9b      	subs	r3, r3, r2
 801076a:	42ab      	cmp	r3, r5
 801076c:	dcf2      	bgt.n	8010754 <_printf_i+0x1e8>
 801076e:	e7eb      	b.n	8010748 <_printf_i+0x1dc>
 8010770:	2500      	movs	r5, #0
 8010772:	f104 0919 	add.w	r9, r4, #25
 8010776:	e7f5      	b.n	8010764 <_printf_i+0x1f8>
 8010778:	2b00      	cmp	r3, #0
 801077a:	d1ac      	bne.n	80106d6 <_printf_i+0x16a>
 801077c:	7803      	ldrb	r3, [r0, #0]
 801077e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010782:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010786:	e76c      	b.n	8010662 <_printf_i+0xf6>
 8010788:	08011485 	.word	0x08011485
 801078c:	08011496 	.word	0x08011496

08010790 <_putc_r>:
 8010790:	b570      	push	{r4, r5, r6, lr}
 8010792:	460d      	mov	r5, r1
 8010794:	4614      	mov	r4, r2
 8010796:	4606      	mov	r6, r0
 8010798:	b118      	cbz	r0, 80107a2 <_putc_r+0x12>
 801079a:	6983      	ldr	r3, [r0, #24]
 801079c:	b90b      	cbnz	r3, 80107a2 <_putc_r+0x12>
 801079e:	f7ff fb99 	bl	800fed4 <__sinit>
 80107a2:	4b13      	ldr	r3, [pc, #76]	; (80107f0 <_putc_r+0x60>)
 80107a4:	429c      	cmp	r4, r3
 80107a6:	d112      	bne.n	80107ce <_putc_r+0x3e>
 80107a8:	6874      	ldr	r4, [r6, #4]
 80107aa:	68a3      	ldr	r3, [r4, #8]
 80107ac:	3b01      	subs	r3, #1
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	60a3      	str	r3, [r4, #8]
 80107b2:	da16      	bge.n	80107e2 <_putc_r+0x52>
 80107b4:	69a2      	ldr	r2, [r4, #24]
 80107b6:	4293      	cmp	r3, r2
 80107b8:	db02      	blt.n	80107c0 <_putc_r+0x30>
 80107ba:	b2eb      	uxtb	r3, r5
 80107bc:	2b0a      	cmp	r3, #10
 80107be:	d110      	bne.n	80107e2 <_putc_r+0x52>
 80107c0:	4622      	mov	r2, r4
 80107c2:	4629      	mov	r1, r5
 80107c4:	4630      	mov	r0, r6
 80107c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107ca:	f7ff b9d3 	b.w	800fb74 <__swbuf_r>
 80107ce:	4b09      	ldr	r3, [pc, #36]	; (80107f4 <_putc_r+0x64>)
 80107d0:	429c      	cmp	r4, r3
 80107d2:	d101      	bne.n	80107d8 <_putc_r+0x48>
 80107d4:	68b4      	ldr	r4, [r6, #8]
 80107d6:	e7e8      	b.n	80107aa <_putc_r+0x1a>
 80107d8:	4b07      	ldr	r3, [pc, #28]	; (80107f8 <_putc_r+0x68>)
 80107da:	429c      	cmp	r4, r3
 80107dc:	bf08      	it	eq
 80107de:	68f4      	ldreq	r4, [r6, #12]
 80107e0:	e7e3      	b.n	80107aa <_putc_r+0x1a>
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	1c5a      	adds	r2, r3, #1
 80107e6:	6022      	str	r2, [r4, #0]
 80107e8:	701d      	strb	r5, [r3, #0]
 80107ea:	b2e8      	uxtb	r0, r5
 80107ec:	bd70      	pop	{r4, r5, r6, pc}
 80107ee:	bf00      	nop
 80107f0:	08011434 	.word	0x08011434
 80107f4:	08011454 	.word	0x08011454
 80107f8:	08011414 	.word	0x08011414

080107fc <_sbrk_r>:
 80107fc:	b538      	push	{r3, r4, r5, lr}
 80107fe:	4c06      	ldr	r4, [pc, #24]	; (8010818 <_sbrk_r+0x1c>)
 8010800:	2300      	movs	r3, #0
 8010802:	4605      	mov	r5, r0
 8010804:	4608      	mov	r0, r1
 8010806:	6023      	str	r3, [r4, #0]
 8010808:	f7f0 fd54 	bl	80012b4 <_sbrk>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d102      	bne.n	8010816 <_sbrk_r+0x1a>
 8010810:	6823      	ldr	r3, [r4, #0]
 8010812:	b103      	cbz	r3, 8010816 <_sbrk_r+0x1a>
 8010814:	602b      	str	r3, [r5, #0]
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	24000df4 	.word	0x24000df4

0801081c <__sread>:
 801081c:	b510      	push	{r4, lr}
 801081e:	460c      	mov	r4, r1
 8010820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010824:	f000 f896 	bl	8010954 <_read_r>
 8010828:	2800      	cmp	r0, #0
 801082a:	bfab      	itete	ge
 801082c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801082e:	89a3      	ldrhlt	r3, [r4, #12]
 8010830:	181b      	addge	r3, r3, r0
 8010832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010836:	bfac      	ite	ge
 8010838:	6563      	strge	r3, [r4, #84]	; 0x54
 801083a:	81a3      	strhlt	r3, [r4, #12]
 801083c:	bd10      	pop	{r4, pc}

0801083e <__swrite>:
 801083e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010842:	461f      	mov	r7, r3
 8010844:	898b      	ldrh	r3, [r1, #12]
 8010846:	05db      	lsls	r3, r3, #23
 8010848:	4605      	mov	r5, r0
 801084a:	460c      	mov	r4, r1
 801084c:	4616      	mov	r6, r2
 801084e:	d505      	bpl.n	801085c <__swrite+0x1e>
 8010850:	2302      	movs	r3, #2
 8010852:	2200      	movs	r2, #0
 8010854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010858:	f000 f868 	bl	801092c <_lseek_r>
 801085c:	89a3      	ldrh	r3, [r4, #12]
 801085e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010866:	81a3      	strh	r3, [r4, #12]
 8010868:	4632      	mov	r2, r6
 801086a:	463b      	mov	r3, r7
 801086c:	4628      	mov	r0, r5
 801086e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010872:	f000 b817 	b.w	80108a4 <_write_r>

08010876 <__sseek>:
 8010876:	b510      	push	{r4, lr}
 8010878:	460c      	mov	r4, r1
 801087a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801087e:	f000 f855 	bl	801092c <_lseek_r>
 8010882:	1c43      	adds	r3, r0, #1
 8010884:	89a3      	ldrh	r3, [r4, #12]
 8010886:	bf15      	itete	ne
 8010888:	6560      	strne	r0, [r4, #84]	; 0x54
 801088a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801088e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010892:	81a3      	strheq	r3, [r4, #12]
 8010894:	bf18      	it	ne
 8010896:	81a3      	strhne	r3, [r4, #12]
 8010898:	bd10      	pop	{r4, pc}

0801089a <__sclose>:
 801089a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801089e:	f000 b813 	b.w	80108c8 <_close_r>
	...

080108a4 <_write_r>:
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	4c07      	ldr	r4, [pc, #28]	; (80108c4 <_write_r+0x20>)
 80108a8:	4605      	mov	r5, r0
 80108aa:	4608      	mov	r0, r1
 80108ac:	4611      	mov	r1, r2
 80108ae:	2200      	movs	r2, #0
 80108b0:	6022      	str	r2, [r4, #0]
 80108b2:	461a      	mov	r2, r3
 80108b4:	f7f0 facd 	bl	8000e52 <_write>
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	d102      	bne.n	80108c2 <_write_r+0x1e>
 80108bc:	6823      	ldr	r3, [r4, #0]
 80108be:	b103      	cbz	r3, 80108c2 <_write_r+0x1e>
 80108c0:	602b      	str	r3, [r5, #0]
 80108c2:	bd38      	pop	{r3, r4, r5, pc}
 80108c4:	24000df4 	.word	0x24000df4

080108c8 <_close_r>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	4c06      	ldr	r4, [pc, #24]	; (80108e4 <_close_r+0x1c>)
 80108cc:	2300      	movs	r3, #0
 80108ce:	4605      	mov	r5, r0
 80108d0:	4608      	mov	r0, r1
 80108d2:	6023      	str	r3, [r4, #0]
 80108d4:	f7f0 fcb9 	bl	800124a <_close>
 80108d8:	1c43      	adds	r3, r0, #1
 80108da:	d102      	bne.n	80108e2 <_close_r+0x1a>
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	b103      	cbz	r3, 80108e2 <_close_r+0x1a>
 80108e0:	602b      	str	r3, [r5, #0]
 80108e2:	bd38      	pop	{r3, r4, r5, pc}
 80108e4:	24000df4 	.word	0x24000df4

080108e8 <_fstat_r>:
 80108e8:	b538      	push	{r3, r4, r5, lr}
 80108ea:	4c07      	ldr	r4, [pc, #28]	; (8010908 <_fstat_r+0x20>)
 80108ec:	2300      	movs	r3, #0
 80108ee:	4605      	mov	r5, r0
 80108f0:	4608      	mov	r0, r1
 80108f2:	4611      	mov	r1, r2
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	f7f0 fcb4 	bl	8001262 <_fstat>
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	d102      	bne.n	8010904 <_fstat_r+0x1c>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	b103      	cbz	r3, 8010904 <_fstat_r+0x1c>
 8010902:	602b      	str	r3, [r5, #0]
 8010904:	bd38      	pop	{r3, r4, r5, pc}
 8010906:	bf00      	nop
 8010908:	24000df4 	.word	0x24000df4

0801090c <_isatty_r>:
 801090c:	b538      	push	{r3, r4, r5, lr}
 801090e:	4c06      	ldr	r4, [pc, #24]	; (8010928 <_isatty_r+0x1c>)
 8010910:	2300      	movs	r3, #0
 8010912:	4605      	mov	r5, r0
 8010914:	4608      	mov	r0, r1
 8010916:	6023      	str	r3, [r4, #0]
 8010918:	f7f0 fcb3 	bl	8001282 <_isatty>
 801091c:	1c43      	adds	r3, r0, #1
 801091e:	d102      	bne.n	8010926 <_isatty_r+0x1a>
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	b103      	cbz	r3, 8010926 <_isatty_r+0x1a>
 8010924:	602b      	str	r3, [r5, #0]
 8010926:	bd38      	pop	{r3, r4, r5, pc}
 8010928:	24000df4 	.word	0x24000df4

0801092c <_lseek_r>:
 801092c:	b538      	push	{r3, r4, r5, lr}
 801092e:	4c07      	ldr	r4, [pc, #28]	; (801094c <_lseek_r+0x20>)
 8010930:	4605      	mov	r5, r0
 8010932:	4608      	mov	r0, r1
 8010934:	4611      	mov	r1, r2
 8010936:	2200      	movs	r2, #0
 8010938:	6022      	str	r2, [r4, #0]
 801093a:	461a      	mov	r2, r3
 801093c:	f7f0 fcac 	bl	8001298 <_lseek>
 8010940:	1c43      	adds	r3, r0, #1
 8010942:	d102      	bne.n	801094a <_lseek_r+0x1e>
 8010944:	6823      	ldr	r3, [r4, #0]
 8010946:	b103      	cbz	r3, 801094a <_lseek_r+0x1e>
 8010948:	602b      	str	r3, [r5, #0]
 801094a:	bd38      	pop	{r3, r4, r5, pc}
 801094c:	24000df4 	.word	0x24000df4

08010950 <__malloc_lock>:
 8010950:	4770      	bx	lr

08010952 <__malloc_unlock>:
 8010952:	4770      	bx	lr

08010954 <_read_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4c07      	ldr	r4, [pc, #28]	; (8010974 <_read_r+0x20>)
 8010958:	4605      	mov	r5, r0
 801095a:	4608      	mov	r0, r1
 801095c:	4611      	mov	r1, r2
 801095e:	2200      	movs	r2, #0
 8010960:	6022      	str	r2, [r4, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	f7f0 fc54 	bl	8001210 <_read>
 8010968:	1c43      	adds	r3, r0, #1
 801096a:	d102      	bne.n	8010972 <_read_r+0x1e>
 801096c:	6823      	ldr	r3, [r4, #0]
 801096e:	b103      	cbz	r3, 8010972 <_read_r+0x1e>
 8010970:	602b      	str	r3, [r5, #0]
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	24000df4 	.word	0x24000df4

08010978 <_init>:
 8010978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097a:	bf00      	nop
 801097c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801097e:	bc08      	pop	{r3}
 8010980:	469e      	mov	lr, r3
 8010982:	4770      	bx	lr

08010984 <_fini>:
 8010984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010986:	bf00      	nop
 8010988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801098a:	bc08      	pop	{r3}
 801098c:	469e      	mov	lr, r3
 801098e:	4770      	bx	lr
