
open-mv-camh7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba88  0800ba88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba88  0800ba88  0001ba88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba90  0800ba90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba94  0800ba94  0001ba94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800ba98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  24000010  0800baa8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002b4  0800baa8  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028d36  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004318  00000000  00000000  00048d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  0004d090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  0004e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000383cc  00000000  00000000  0004f528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000182e2  00000000  00000000  000878f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015ba77  00000000  00000000  0009fbd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fb64d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc8  00000000  00000000  001fb6c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b568 	.word	0x0800b568

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800b568 	.word	0x0800b568

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_DCMI_Init+0x64>)
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <MX_DCMI_Init+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_DCMI_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_DCMI_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_DCMI_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_DCMI_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_DCMI_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_DCMI_Init+0x64>)
 8000602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000606:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_DCMI_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_DCMI_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_DCMI_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_DCMI_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_DCMI_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_DCMI_Init+0x64>)
 8000628:	f001 f806 	bl	8001638 <HAL_DCMI_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 8000632:	f000 fbcf 	bl	8000dd4 <Error_Handler>
  }

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	240000a8 	.word	0x240000a8
 8000640:	48020000 	.word	0x48020000

08000644 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a65      	ldr	r2, [pc, #404]	; (80007f8 <HAL_DCMI_MspInit+0x1b4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	f040 80c3 	bne.w	80007ee <HAL_DCMI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000668:	4b64      	ldr	r3, [pc, #400]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800066a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800066e:	4a63      	ldr	r2, [pc, #396]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000678:	4b60      	ldr	r3, [pc, #384]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800067a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
 8000684:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a5b      	ldr	r2, [pc, #364]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b59      	ldr	r3, [pc, #356]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0310 	and.w	r3, r3, #16
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b55      	ldr	r3, [pc, #340]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	4a54      	ldr	r2, [pc, #336]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b4:	4b51      	ldr	r3, [pc, #324]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b4e      	ldr	r3, [pc, #312]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	4a4c      	ldr	r2, [pc, #304]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	4b46      	ldr	r3, [pc, #280]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	4a45      	ldr	r2, [pc, #276]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f0:	4b42      	ldr	r3, [pc, #264]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
 80006fe:	2373      	movs	r3, #115	; 0x73
 8000700:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800070e:	230d      	movs	r3, #13
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4839      	ldr	r0, [pc, #228]	; (8000800 <HAL_DCMI_MspInit+0x1bc>)
 800071a:	f003 f85d 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800071e:	2350      	movs	r3, #80	; 0x50
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800072e:	230d      	movs	r3, #13
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4832      	ldr	r0, [pc, #200]	; (8000804 <HAL_DCMI_MspInit+0x1c0>)
 800073a:	f003 f84d 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800073e:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000750:	230d      	movs	r3, #13
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	482b      	ldr	r0, [pc, #172]	; (8000808 <HAL_DCMI_MspInit+0x1c4>)
 800075c:	f003 f83c 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000760:	23c0      	movs	r3, #192	; 0xc0
 8000762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000770:	230d      	movs	r3, #13
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4824      	ldr	r0, [pc, #144]	; (800080c <HAL_DCMI_MspInit+0x1c8>)
 800077c:	f003 f82c 	bl	80037d8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <HAL_DCMI_MspInit+0x1d0>)
 8000784:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000788:	224b      	movs	r2, #75	; 0x4b
 800078a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 800079a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007c4:	f001 f922 	bl	8001a0c <HAL_DMA_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_DCMI_MspInit+0x18e>
    {
      Error_Handler();
 80007ce:	f000 fb01 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007d6:	649a      	str	r2, [r3, #72]	; 0x48
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	204e      	movs	r0, #78	; 0x4e
 80007e4:	f000 feda 	bl	800159c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f000 ff01 	bl	80015f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80007ee:	bf00      	nop
 80007f0:	3730      	adds	r7, #48	; 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	48020000 	.word	0x48020000
 80007fc:	58024400 	.word	0x58024400
 8000800:	58021000 	.word	0x58021000
 8000804:	58020000 	.word	0x58020000
 8000808:	58020800 	.word	0x58020800
 800080c:	58020400 	.word	0x58020400
 8000810:	24000030 	.word	0x24000030
 8000814:	40020010 	.word	0x40020010

08000818 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_DMA_Init+0x3c>)
 8000820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <MX_DMA_Init+0x3c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_DMA_Init+0x3c>)
 8000830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	200b      	movs	r0, #11
 8000842:	f000 feab 	bl	800159c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000846:	200b      	movs	r0, #11
 8000848:	f000 fed2 	bl	80015f0 <HAL_NVIC_EnableIRQ>

}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024400 	.word	0x58024400

08000858 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086e:	4b77      	ldr	r3, [pc, #476]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	4a75      	ldr	r2, [pc, #468]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087e:	4b73      	ldr	r3, [pc, #460]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	4b6f      	ldr	r3, [pc, #444]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	4a6e      	ldr	r2, [pc, #440]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089c:	4b6b      	ldr	r3, [pc, #428]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b68      	ldr	r3, [pc, #416]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	4a66      	ldr	r2, [pc, #408]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ba:	4b64      	ldr	r3, [pc, #400]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b60      	ldr	r3, [pc, #384]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a5f      	ldr	r2, [pc, #380]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b5c      	ldr	r3, [pc, #368]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b59      	ldr	r3, [pc, #356]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	4a57      	ldr	r2, [pc, #348]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f6:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000904:	4b51      	ldr	r3, [pc, #324]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	4a50      	ldr	r2, [pc, #320]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2107      	movs	r1, #7
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 8000928:	f003 fa06 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2120      	movs	r1, #32
 8000930:	4848      	ldr	r0, [pc, #288]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 8000932:	f003 fa01 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093c:	4846      	ldr	r0, [pc, #280]	; (8000a58 <MX_GPIO_Init+0x200>)
 800093e:	f003 f9fb 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE7 PE8 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8 
 8000942:	f64f 738c 	movw	r3, #65420	; 0xff8c
 8000946:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4841      	ldr	r0, [pc, #260]	; (8000a5c <MX_GPIO_Init+0x204>)
 8000958:	f002 ff3e 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC3 
                           PC4 PC5 PC8 PC9 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
 800095c:	f64e 3338 	movw	r3, #60216	; 0xeb38
 8000960:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4837      	ldr	r0, [pc, #220]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 8000972:	f002 ff31 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000976:	2307      	movs	r3, #7
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4830      	ldr	r0, [pc, #192]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 800098e:	f002 ff23 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000992:	f649 738f 	movw	r3, #40847	; 0x9f8f
 8000996:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	482b      	ldr	r0, [pc, #172]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 80009a8:	f002 ff16 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_CHIP_EN_Pin;
 80009ac:	2320      	movs	r3, #32
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WIFI_CHIP_EN_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4824      	ldr	r0, [pc, #144]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 80009c4:	f002 ff08 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80009c8:	f640 433f 	movw	r3, #3135	; 0xc3f
 80009cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <MX_GPIO_Init+0x208>)
 80009de:	f002 fefb 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80009e2:	f64c 739f 	movw	r3, #53151	; 0xcf9f
 80009e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_GPIO_Init+0x200>)
 80009f8:	f002 feee 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RESET_N_Pin;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WIFI_RESET_N_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4810      	ldr	r0, [pc, #64]	; (8000a58 <MX_GPIO_Init+0x200>)
 8000a16:	f002 fedf 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_INT_N_Pin;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x20c>)
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WIFI_INT_N_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480a      	ldr	r0, [pc, #40]	; (8000a58 <MX_GPIO_Init+0x200>)
 8000a30:	f002 fed2 	bl	80037d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2028      	movs	r0, #40	; 0x28
 8000a3a:	f000 fdaf 	bl	800159c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a3e:	2028      	movs	r0, #40	; 0x28
 8000a40:	f000 fdd6 	bl	80015f0 <HAL_NVIC_EnableIRQ>

}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58020000 	.word	0x58020000
 8000a58:	58020c00 	.word	0x58020c00
 8000a5c:	58021000 	.word	0x58021000
 8000a60:	58020400 	.word	0x58020400
 8000a64:	11210000 	.word	0x11210000

08000a68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_I2C1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x7c>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_I2C1_Init+0x74>)
 8000aa4:	f003 f9be 	bl	8003e24 <HAL_I2C_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aae:	f000 f991 	bl	8000dd4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ab6:	f003 fad7 	bl	8004068 <HAL_I2CEx_ConfigAnalogFilter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f000 f988 	bl	8000dd4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ac8:	f003 fb44 	bl	8004154 <HAL_I2CEx_ConfigDigitalFilter>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f97f 	bl	8000dd4 <Error_Handler>
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	240000f8 	.word	0x240000f8
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	10707dbc 	.word	0x10707dbc

08000ae8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12e      	bne.n	8000b68 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <HAL_I2C_MspInit+0x90>)
 8000b46:	f002 fe47 	bl	80037d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020400 	.word	0x58020400

08000b7c <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  hjpeg.Instance = JPEG;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_JPEG_Init+0x20>)
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <MX_JPEG_Init+0x24>)
 8000b84:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_JPEG_Init+0x20>)
 8000b88:	f003 fb58 	bl	800423c <HAL_JPEG_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b92:	f000 f91f 	bl	8000dd4 <Error_Handler>
  }

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24000144 	.word	0x24000144
 8000ba0:	52003000 	.word	0x52003000

08000ba4 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_JPEG_MspInit+0x3c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10e      	bne.n	8000bd4 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bbc:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bcc:	f003 0320 	and.w	r3, r3, #32
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	52003000 	.word	0x52003000
 8000be4:	58024400 	.word	0x58024400

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 fb2a 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f81a 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff fe30 	bl	8000858 <MX_GPIO_Init>
  MX_DCMI_Init();
 8000bf8:	f7ff fcee 	bl	80005d8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000bfc:	f7ff ff34 	bl	8000a68 <MX_I2C1_Init>
  MX_JPEG_Init();
 8000c00:	f7ff ffbc 	bl	8000b7c <MX_JPEG_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8000c04:	f000 fa5e 	bl	80010c4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000c08:	f7ff fe06 	bl	8000818 <MX_DMA_Init>

  /* USER CODE BEGIN 2 */
  nm_bsp_init();
 8000c0c:	f00a fc20 	bl	800b450 <nm_bsp_init>
  nm_bsp_register_isr(my_int);
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <main+0x3c>)
 8000c12:	f00a fc59 	bl	800b4c8 <nm_bsp_register_isr>
  nm_bus_init(NULL);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f00a fc66 	bl	800b4e8 <nm_bus_init>
//	  if(X == 1)
//	  {
//		  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
//	  }

	  HAL_Delay(250);
 8000c1c:	20fa      	movs	r0, #250	; 0xfa
 8000c1e:	f000 fb9f 	bl	8001360 <HAL_Delay>
 8000c22:	e7fb      	b.n	8000c1c <main+0x34>
 8000c24:	08000dc1 	.word	0x08000dc1

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0cc      	sub	sp, #304	; 0x130
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c32:	224c      	movs	r2, #76	; 0x4c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00a fc8e 	bl	800b558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c40:	2220      	movs	r2, #32
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00a fc87 	bl	800b558 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4618      	mov	r0, r3
 8000c50:	23bc      	movs	r3, #188	; 0xbc
 8000c52:	461a      	mov	r2, r3
 8000c54:	2100      	movs	r1, #0
 8000c56:	f00a fc7f 	bl	800b558 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f004 f8b2 	bl	8004dc4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	4b4c      	ldr	r3, [pc, #304]	; (8000d98 <SystemClock_Config+0x170>)
 8000c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6a:	4a4b      	ldr	r2, [pc, #300]	; (8000d98 <SystemClock_Config+0x170>)
 8000c6c:	f023 0301 	bic.w	r3, r3, #1
 8000c70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c72:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <SystemClock_Config+0x170>)
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	f003 0201 	and.w	r2, r3, #1
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <SystemClock_Config+0x174>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c86:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <SystemClock_Config+0x174>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <SystemClock_Config+0x174>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c9e:	bf00      	nop
 8000ca0:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <SystemClock_Config+0x174>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cac:	d1f8      	bne.n	8000ca0 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cba:	2320      	movs	r3, #32
 8000cbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000cd2:	2381      	movs	r3, #129	; 0x81
 8000cd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000cea:	2304      	movs	r3, #4
 8000cec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 f8a3 	bl	8004e4c <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d0c:	f000 f862 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	233f      	movs	r3, #63	; 0x3f
 8000d12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 fd60 	bl	800580c <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000d52:	f000 f83f 	bl	8000dd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SPI2
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	f241 020a 	movw	r2, #4106	; 0x100a
 8000d5e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	2200      	movs	r2, #0
 8000d66:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	2200      	movs	r2, #0
 8000d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f005 fa5c 	bl	800623c <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000d8a:	f000 f823 	bl	8000dd4 <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	58000400 	.word	0x58000400
 8000d9c:	58024800 	.word	0x58024800

08000da0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == GPIO_PIN_13)
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		chip_isr(); // SO: in case of WIFI event go to internal pFunction
 8000db2:	f00a fb2b 	bl	800b40c <chip_isr>
	}
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <my_int>:


void my_int(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <my_int+0x10>)
 8000dc8:	f002 ffea 	bl	8003da0 <HAL_GPIO_TogglePin>
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	58020800 	.word	0x58020800

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000dfe:	4a28      	ldr	r2, [pc, #160]	; (8000ea0 <MX_SPI2_Init+0xa8>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_SPI2_Init+0xa4>)
 8000e88:	f007 f88c 	bl	8007fa4 <HAL_SPI_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000e92:	f7ff ff9f 	bl	8000dd4 <Error_Handler>
  }

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2400019c 	.word	0x2400019c
 8000ea0:	40003800 	.word	0x40003800

08000ea4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d12e      	bne.n	8000f24 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_SPI_MspInit+0x8c>)
 8000ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ecc:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <HAL_SPI_MspInit+0x8c>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_SPI_MspInit+0x8c>)
 8000ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_SPI_MspInit+0x8c>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <HAL_SPI_MspInit+0x8c>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_SPI_MspInit+0x8c>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f02:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f14:	2305      	movs	r3, #5
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_SPI_MspInit+0x90>)
 8000f20:	f002 fc5a 	bl	80037d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40003800 	.word	0x40003800
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020400 	.word	0x58020400

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_MspInit+0x30>)
 8000f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f44:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x30>)
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x30>)
 8000f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	58024400 	.word	0x58024400

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f9ae 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA1_Stream0_IRQHandler+0x10>)
 8000fce:	f001 fa9d 	bl	800250c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	24000030 	.word	0x24000030

08000fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fe0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fe4:	f002 ff06 	bl	8003df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <DCMI_IRQHandler+0x10>)
 8000ff2:	f000 fc43 	bl	800187c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	240000a8 	.word	0x240000a8

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <SystemInit+0xac>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a28      	ldr	r2, [pc, #160]	; (80010ac <SystemInit+0xac>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <SystemInit+0xb0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <SystemInit+0xb0>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <SystemInit+0xb0>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <SystemInit+0xb0>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4921      	ldr	r1, [pc, #132]	; (80010b0 <SystemInit+0xb0>)
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SystemInit+0xb4>)
 800102e:	4013      	ands	r3, r2
 8001030:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <SystemInit+0xb0>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <SystemInit+0xb0>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <SystemInit+0xb0>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <SystemInit+0xb0>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <SystemInit+0xb0>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <SystemInit+0xb0>)
 8001052:	2200      	movs	r2, #0
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <SystemInit+0xb0>)
 8001058:	2200      	movs	r2, #0
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <SystemInit+0xb0>)
 800105e:	2200      	movs	r2, #0
 8001060:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <SystemInit+0xb0>)
 8001064:	2200      	movs	r2, #0
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <SystemInit+0xb0>)
 800106a:	2200      	movs	r2, #0
 800106c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <SystemInit+0xb0>)
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <SystemInit+0xb0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <SystemInit+0xb0>)
 800107a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <SystemInit+0xb0>)
 8001082:	2200      	movs	r2, #0
 8001084:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <SystemInit+0xb8>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <SystemInit+0xbc>)
 800108c:	4013      	ands	r3, r2
 800108e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001092:	d202      	bcs.n	800109a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <SystemInit+0xc0>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SystemInit+0xac>)
 800109c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	58024400 	.word	0x58024400
 80010b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010b8:	5c001000 	.word	0x5c001000
 80010bc:	ffff0000 	.word	0xffff0000
 80010c0:	51008108 	.word	0x51008108

080010c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <MX_USART2_UART_Init+0x94>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_USART2_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_USART2_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_USART2_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_USART2_UART_Init+0x90>)
 800110e:	f007 fa01 	bl	8008514 <HAL_UART_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001118:	f7ff fe5c 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_USART2_UART_Init+0x90>)
 8001120:	f009 ffd8 	bl	800b0d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800112a:	f7ff fe53 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <MX_USART2_UART_Init+0x90>)
 8001132:	f00a f869 	bl	800b208 <HAL_UARTEx_SetRxFifoThreshold>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800113c:	f7ff fe4a 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_USART2_UART_Init+0x90>)
 8001142:	f009 ff51 	bl	800afe8 <HAL_UARTEx_DisableFifoMode>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800114c:	f7ff fe42 	bl	8000dd4 <Error_Handler>
  }

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000224 	.word	0x24000224
 8001158:	40004400 	.word	0x40004400

0800115c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_UART_MspInit+0x88>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d12d      	bne.n	80011da <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_UART_MspInit+0x8c>)
 8001180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x8c>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_UART_MspInit+0x8c>)
 8001190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_UART_MspInit+0x8c>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <HAL_UART_MspInit+0x8c>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_UART_MspInit+0x8c>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011ba:	2360      	movs	r3, #96	; 0x60
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ca:	2307      	movs	r3, #7
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_UART_MspInit+0x90>)
 80011d6:	f002 faff 	bl	80037d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40004400 	.word	0x40004400
 80011e8:	58024400 	.word	0x58024400
 80011ec:	58020c00 	.word	0x58020c00

080011f0 <Reset_Handler>:
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001228 <LoopFillZerobss+0x14>
 80011f4:	2100      	movs	r1, #0
 80011f6:	e003      	b.n	8001200 <LoopCopyDataInit>

080011f8 <CopyDataInit>:
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <LoopFillZerobss+0x18>)
 80011fa:	585b      	ldr	r3, [r3, r1]
 80011fc:	5043      	str	r3, [r0, r1]
 80011fe:	3104      	adds	r1, #4

08001200 <LoopCopyDataInit>:
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <LoopFillZerobss+0x1c>)
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <LoopFillZerobss+0x20>)
 8001204:	1842      	adds	r2, r0, r1
 8001206:	429a      	cmp	r2, r3
 8001208:	d3f6      	bcc.n	80011f8 <CopyDataInit>
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <LoopFillZerobss+0x24>)
 800120c:	e002      	b.n	8001214 <LoopFillZerobss>

0800120e <FillZerobss>:
 800120e:	2300      	movs	r3, #0
 8001210:	f842 3b04 	str.w	r3, [r2], #4

08001214 <LoopFillZerobss>:
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <LoopFillZerobss+0x28>)
 8001216:	429a      	cmp	r2, r3
 8001218:	d3f9      	bcc.n	800120e <FillZerobss>
 800121a:	f7ff fef1 	bl	8001000 <SystemInit>
 800121e:	f00a f977 	bl	800b510 <__libc_init_array>
 8001222:	f7ff fce1 	bl	8000be8 <main>
 8001226:	4770      	bx	lr
 8001228:	24080000 	.word	0x24080000
 800122c:	0800ba98 	.word	0x0800ba98
 8001230:	24000000 	.word	0x24000000
 8001234:	24000010 	.word	0x24000010
 8001238:	24000010 	.word	0x24000010
 800123c:	240002b4 	.word	0x240002b4

08001240 <ADC3_IRQHandler>:
 8001240:	e7fe      	b.n	8001240 <ADC3_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f987 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800124e:	f004 fe3b 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8001252:	4601      	mov	r1, r0
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_Init+0x60>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <HAL_Init+0x64>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	fa21 f303 	lsr.w	r3, r1, r3
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_Init+0x68>)
 800126c:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_Init+0x68>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_Init+0x60>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	490b      	ldr	r1, [pc, #44]	; (80012a8 <HAL_Init+0x64>)
 800127c:	5ccb      	ldrb	r3, [r1, r3]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_Init+0x6c>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f812 	bl	80012b4 <HAL_InitTick>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e002      	b.n	80012a0 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800129a:	f7ff fe4d 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400
 80012a8:	0800b850 	.word	0x0800b850
 80012ac:	24000000 	.word	0x24000000
 80012b0:	24000004 	.word	0x24000004

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_InitTick+0x60>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e021      	b.n	800130c <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_InitTick+0x64>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_InitTick+0x60>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f99e 	bl	8001620 <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f94e 	bl	800159c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x68>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2400000c 	.word	0x2400000c
 8001318:	24000000 	.word	0x24000000
 800131c:	24000008 	.word	0x24000008

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2400000c 	.word	0x2400000c
 8001344:	240002b0 	.word	0x240002b0

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	240002b0 	.word	0x240002b0

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_Delay+0x40>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2400000c 	.word	0x2400000c

080013a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetREVID+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0c1b      	lsrs	r3, r3, #16
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	5c001000 	.word	0x5c001000

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <__NVIC_SetPriorityGrouping+0x40>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x40>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	05fa0000 	.word	0x05fa0000

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b07      	cmp	r3, #7
 8001568:	d00f      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b06      	cmp	r3, #6
 800156e:	d00c      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d009      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b04      	cmp	r3, #4
 800157a:	d006      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d003      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001582:	2192      	movs	r1, #146	; 0x92
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001586:	f7ff fc2c 	bl	8000de2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff16 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800b580 	.word	0x0800b580

0800159c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d903      	bls.n	80015b8 <HAL_NVIC_SetPriority+0x1c>
 80015b0:	21aa      	movs	r1, #170	; 0xaa
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <HAL_NVIC_SetPriority+0x50>)
 80015b4:	f7ff fc15 	bl	8000de2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	d903      	bls.n	80015c6 <HAL_NVIC_SetPriority+0x2a>
 80015be:	21ab      	movs	r1, #171	; 0xab
 80015c0:	480a      	ldr	r0, [pc, #40]	; (80015ec <HAL_NVIC_SetPriority+0x50>)
 80015c2:	f7ff fc0e 	bl	8000de2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c6:	f7ff ff1d 	bl	8001404 <__NVIC_GetPriorityGrouping>
 80015ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	6978      	ldr	r0, [r7, #20]
 80015d2:	f7ff ff6d 	bl	80014b0 <NVIC_EncodePriority>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff3c 	bl	800145c <__NVIC_SetPriority>
}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0800b580 	.word	0x0800b580

080015f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da03      	bge.n	800160a <HAL_NVIC_EnableIRQ+0x1a>
 8001602:	21be      	movs	r1, #190	; 0xbe
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_NVIC_EnableIRQ+0x2c>)
 8001606:	f7ff fbec 	bl	8000de2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff06 	bl	8001420 <__NVIC_EnableIRQ>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	0800b580 	.word	0x0800b580

08001620 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff75 	bl	8001518 <SysTick_Config>
 800162e:	4603      	mov	r3, r0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e10e      	b.n	8001868 <HAL_DCMI_Init+0x230>
  }

  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a88      	ldr	r2, [pc, #544]	; (8001870 <HAL_DCMI_Init+0x238>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d003      	beq.n	800165c <HAL_DCMI_Init+0x24>
 8001654:	21b6      	movs	r1, #182	; 0xb6
 8001656:	4887      	ldr	r0, [pc, #540]	; (8001874 <HAL_DCMI_Init+0x23c>)
 8001658:	f7ff fbc3 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_DCMI_Init+0x3c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b20      	cmp	r3, #32
 800166a:	d003      	beq.n	8001674 <HAL_DCMI_Init+0x3c>
 800166c:	21b7      	movs	r1, #183	; 0xb7
 800166e:	4881      	ldr	r0, [pc, #516]	; (8001874 <HAL_DCMI_Init+0x23c>)
 8001670:	f7ff fbb7 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_DCMI_Init+0x54>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b80      	cmp	r3, #128	; 0x80
 8001682:	d003      	beq.n	800168c <HAL_DCMI_Init+0x54>
 8001684:	21b8      	movs	r1, #184	; 0xb8
 8001686:	487b      	ldr	r0, [pc, #492]	; (8001874 <HAL_DCMI_Init+0x23c>)
 8001688:	f7ff fbab 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <HAL_DCMI_Init+0x6c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b40      	cmp	r3, #64	; 0x40
 800169a:	d003      	beq.n	80016a4 <HAL_DCMI_Init+0x6c>
 800169c:	21b9      	movs	r1, #185	; 0xb9
 800169e:	4875      	ldr	r0, [pc, #468]	; (8001874 <HAL_DCMI_Init+0x23c>)
 80016a0:	f7ff fb9f 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_DCMI_Init+0x84>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b10      	cmp	r3, #16
 80016b2:	d003      	beq.n	80016bc <HAL_DCMI_Init+0x84>
 80016b4:	21ba      	movs	r1, #186	; 0xba
 80016b6:	486f      	ldr	r0, [pc, #444]	; (8001874 <HAL_DCMI_Init+0x23c>)
 80016b8:	f7ff fb93 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00d      	beq.n	80016e0 <HAL_DCMI_Init+0xa8>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016cc:	d008      	beq.n	80016e0 <HAL_DCMI_Init+0xa8>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d6:	d003      	beq.n	80016e0 <HAL_DCMI_Init+0xa8>
 80016d8:	21bb      	movs	r1, #187	; 0xbb
 80016da:	4866      	ldr	r0, [pc, #408]	; (8001874 <HAL_DCMI_Init+0x23c>)
 80016dc:	f7ff fb81 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d012      	beq.n	800170e <HAL_DCMI_Init+0xd6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f0:	d00d      	beq.n	800170e <HAL_DCMI_Init+0xd6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016fa:	d008      	beq.n	800170e <HAL_DCMI_Init+0xd6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001704:	d003      	beq.n	800170e <HAL_DCMI_Init+0xd6>
 8001706:	21bc      	movs	r1, #188	; 0xbc
 8001708:	485a      	ldr	r0, [pc, #360]	; (8001874 <HAL_DCMI_Init+0x23c>)
 800170a:	f7ff fb6a 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_DCMI_Init+0xee>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	2b08      	cmp	r3, #8
 800171c:	d003      	beq.n	8001726 <HAL_DCMI_Init+0xee>
 800171e:	21bd      	movs	r1, #189	; 0xbd
 8001720:	4854      	ldr	r0, [pc, #336]	; (8001874 <HAL_DCMI_Init+0x23c>)
 8001722:	f7ff fb5e 	bl	8000de2 <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	2b00      	cmp	r3, #0
 800172c:	d012      	beq.n	8001754 <HAL_DCMI_Init+0x11c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d00d      	beq.n	8001754 <HAL_DCMI_Init+0x11c>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001740:	d008      	beq.n	8001754 <HAL_DCMI_Init+0x11c>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800174a:	d003      	beq.n	8001754 <HAL_DCMI_Init+0x11c>
 800174c:	21bf      	movs	r1, #191	; 0xbf
 800174e:	4849      	ldr	r0, [pc, #292]	; (8001874 <HAL_DCMI_Init+0x23c>)
 8001750:	f7ff fb47 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_DCMI_Init+0x136>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001764:	d003      	beq.n	800176e <HAL_DCMI_Init+0x136>
 8001766:	21c0      	movs	r1, #192	; 0xc0
 8001768:	4842      	ldr	r0, [pc, #264]	; (8001874 <HAL_DCMI_Init+0x23c>)
 800176a:	f7ff fb3a 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_DCMI_Init+0x150>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800177e:	d003      	beq.n	8001788 <HAL_DCMI_Init+0x150>
 8001780:	21c1      	movs	r1, #193	; 0xc1
 8001782:	483c      	ldr	r0, [pc, #240]	; (8001874 <HAL_DCMI_Init+0x23c>)
 8001784:	f7ff fb2d 	bl	8000de2 <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_DCMI_Init+0x16a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001798:	d003      	beq.n	80017a2 <HAL_DCMI_Init+0x16a>
 800179a:	21c2      	movs	r1, #194	; 0xc2
 800179c:	4835      	ldr	r0, [pc, #212]	; (8001874 <HAL_DCMI_Init+0x23c>)
 800179e:	f7ff fb20 	bl	8000de2 <assert_failed>
    /* Init the low level hardware */
    hdcmi->MspInitCallback(hdcmi);
  }

#else
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_DCMI_Init+0x17c>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7fe ff48 	bl	8000644 <HAL_DCMI_MspInit>
  }
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6819      	ldr	r1, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_DCMI_Init+0x240>)
 80017c8:	400b      	ands	r3, r1
 80017ca:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80017e0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80017ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80017f8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001804:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001810:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b10      	cmp	r3, #16
 8001820:	d112      	bne.n	8001848 <HAL_DCMI_Init+0x210>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7f1b      	ldrb	r3, [r3, #28]
 8001826:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7f5b      	ldrb	r3, [r3, #29]
 800182c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800182e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7f9b      	ldrb	r3, [r3, #30]
 8001834:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001836:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7fdb      	ldrb	r3, [r3, #31]
 800183e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001844:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001846:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 021e 	orr.w	r2, r2, #30
 8001856:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	48020000 	.word	0x48020000
 8001874:	0800b5bc 	.word	0x0800b5bc
 8001878:	ffe0f007 	.word	0xffe0f007

0800187c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d016      	beq.n	80018c4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2204      	movs	r2, #4
 800189c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f043 0202 	orr.w	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2204      	movs	r2, #4
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	4a31      	ldr	r2, [pc, #196]	; (800197c <HAL_DCMI_IRQHandler+0x100>)
 80018b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fc8e 	bl	80021e0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d016      	beq.n	80018fc <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2202      	movs	r2, #2
 80018d4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f043 0201 	orr.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2204      	movs	r2, #4
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ee:	4a23      	ldr	r2, [pc, #140]	; (800197c <HAL_DCMI_IRQHandler+0x100>)
 80018f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fc72 	bl	80021e0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2210      	movs	r2, #16
 800190c:	615a      	str	r2, [r3, #20]

    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f840 	bl	8001994 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2208      	movs	r2, #8
 8001924:	615a      	str	r2, [r3, #20]

    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f83e 	bl	80019a8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d01d      	beq.n	8001972 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b02      	cmp	r3, #2
 8001942:	d107      	bne.n	8001954 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 021e 	bic.w	r2, r2, #30
 8001952:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	615a      	str	r2, [r3, #20]

    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f825 	bl	80019bc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	080019d1 	.word	0x080019d1

08001980 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	60fb      	str	r3, [r7, #12]

  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d009      	beq.n	80019fc <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff ffbf 	bl	8001980 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff fc98 	bl	8001348 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e3d8      	b.n	80021d6 <HAL_DMA_Init+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a96      	ldr	r2, [pc, #600]	; (8001c84 <HAL_DMA_Init+0x278>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d076      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a95      	ldr	r2, [pc, #596]	; (8001c88 <HAL_DMA_Init+0x27c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d071      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a93      	ldr	r2, [pc, #588]	; (8001c8c <HAL_DMA_Init+0x280>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d06c      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a92      	ldr	r2, [pc, #584]	; (8001c90 <HAL_DMA_Init+0x284>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d067      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a90      	ldr	r2, [pc, #576]	; (8001c94 <HAL_DMA_Init+0x288>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d062      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a8f      	ldr	r2, [pc, #572]	; (8001c98 <HAL_DMA_Init+0x28c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d05d      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a8d      	ldr	r2, [pc, #564]	; (8001c9c <HAL_DMA_Init+0x290>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d058      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a8c      	ldr	r2, [pc, #560]	; (8001ca0 <HAL_DMA_Init+0x294>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d053      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a8a      	ldr	r2, [pc, #552]	; (8001ca4 <HAL_DMA_Init+0x298>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d04e      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a89      	ldr	r2, [pc, #548]	; (8001ca8 <HAL_DMA_Init+0x29c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d049      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a87      	ldr	r2, [pc, #540]	; (8001cac <HAL_DMA_Init+0x2a0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d044      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a86      	ldr	r2, [pc, #536]	; (8001cb0 <HAL_DMA_Init+0x2a4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d03f      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a84      	ldr	r2, [pc, #528]	; (8001cb4 <HAL_DMA_Init+0x2a8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d03a      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a83      	ldr	r2, [pc, #524]	; (8001cb8 <HAL_DMA_Init+0x2ac>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d035      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a81      	ldr	r2, [pc, #516]	; (8001cbc <HAL_DMA_Init+0x2b0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d030      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a80      	ldr	r2, [pc, #512]	; (8001cc0 <HAL_DMA_Init+0x2b4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d02b      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7e      	ldr	r2, [pc, #504]	; (8001cc4 <HAL_DMA_Init+0x2b8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d026      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7d      	ldr	r2, [pc, #500]	; (8001cc8 <HAL_DMA_Init+0x2bc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d021      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a7b      	ldr	r2, [pc, #492]	; (8001ccc <HAL_DMA_Init+0x2c0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01c      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_DMA_Init+0x2c4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d017      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a78      	ldr	r2, [pc, #480]	; (8001cd4 <HAL_DMA_Init+0x2c8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d012      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a77      	ldr	r2, [pc, #476]	; (8001cd8 <HAL_DMA_Init+0x2cc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00d      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a75      	ldr	r2, [pc, #468]	; (8001cdc <HAL_DMA_Init+0x2d0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d008      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a74      	ldr	r2, [pc, #464]	; (8001ce0 <HAL_DMA_Init+0x2d4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_Init+0x110>
 8001b14:	21d4      	movs	r1, #212	; 0xd4
 8001b16:	4873      	ldr	r0, [pc, #460]	; (8001ce4 <HAL_DMA_Init+0x2d8>)
 8001b18:	f7ff f963 	bl	8000de2 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00b      	beq.n	8001b3c <HAL_DMA_Init+0x130>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d007      	beq.n	8001b3c <HAL_DMA_Init+0x130>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b80      	cmp	r3, #128	; 0x80
 8001b32:	d003      	beq.n	8001b3c <HAL_DMA_Init+0x130>
 8001b34:	21d5      	movs	r1, #213	; 0xd5
 8001b36:	486b      	ldr	r0, [pc, #428]	; (8001ce4 <HAL_DMA_Init+0x2d8>)
 8001b38:	f7ff f953 	bl	8000de2 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b44:	d007      	beq.n	8001b56 <HAL_DMA_Init+0x14a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_DMA_Init+0x14a>
 8001b4e:	21d6      	movs	r1, #214	; 0xd6
 8001b50:	4864      	ldr	r0, [pc, #400]	; (8001ce4 <HAL_DMA_Init+0x2d8>)
 8001b52:	f7ff f946 	bl	8000de2 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5e:	d007      	beq.n	8001b70 <HAL_DMA_Init+0x164>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_Init+0x164>
 8001b68:	21d7      	movs	r1, #215	; 0xd7
 8001b6a:	485e      	ldr	r0, [pc, #376]	; (8001ce4 <HAL_DMA_Init+0x2d8>)
 8001b6c:	f7ff f939 	bl	8000de2 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00d      	beq.n	8001b94 <HAL_DMA_Init+0x188>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b80:	d008      	beq.n	8001b94 <HAL_DMA_Init+0x188>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_Init+0x188>
 8001b8c:	21d8      	movs	r1, #216	; 0xd8
 8001b8e:	4855      	ldr	r0, [pc, #340]	; (8001ce4 <HAL_DMA_Init+0x2d8>)
 8001b90:	f7ff f927 	bl	8000de2 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_DMA_Init+0x1ac>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba4:	d008      	beq.n	8001bb8 <HAL_DMA_Init+0x1ac>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bae:	d003      	beq.n	8001bb8 <HAL_DMA_Init+0x1ac>
 8001bb0:	21d9      	movs	r1, #217	; 0xd9
 8001bb2:	484c      	ldr	r0, [pc, #304]	; (8001ce4 <HAL_DMA_Init+0x2d8>)
 8001bb4:	f7ff f915 	bl	8000de2 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d016      	beq.n	8001bee <HAL_DMA_Init+0x1e2>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc8:	d011      	beq.n	8001bee <HAL_DMA_Init+0x1e2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d00d      	beq.n	8001bee <HAL_DMA_Init+0x1e2>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bda:	d008      	beq.n	8001bee <HAL_DMA_Init+0x1e2>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001be4:	d003      	beq.n	8001bee <HAL_DMA_Init+0x1e2>
 8001be6:	21da      	movs	r1, #218	; 0xda
 8001be8:	483e      	ldr	r0, [pc, #248]	; (8001ce4 <HAL_DMA_Init+0x2d8>)
 8001bea:	f7ff f8fa 	bl	8000de2 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d012      	beq.n	8001c1c <HAL_DMA_Init+0x210>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfe:	d00d      	beq.n	8001c1c <HAL_DMA_Init+0x210>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c08:	d008      	beq.n	8001c1c <HAL_DMA_Init+0x210>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c12:	d003      	beq.n	8001c1c <HAL_DMA_Init+0x210>
 8001c14:	21db      	movs	r1, #219	; 0xdb
 8001c16:	4833      	ldr	r0, [pc, #204]	; (8001ce4 <HAL_DMA_Init+0x2d8>)
 8001c18:	f7ff f8e3 	bl	8000de2 <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_DMA_Init+0x278>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d07e      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_DMA_Init+0x27c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d079      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_DMA_Init+0x280>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d074      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <HAL_DMA_Init+0x284>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d06f      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <HAL_DMA_Init+0x288>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d06a      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_DMA_Init+0x28c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d065      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_DMA_Init+0x290>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d060      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <HAL_DMA_Init+0x294>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d05b      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_DMA_Init+0x298>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d056      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_DMA_Init+0x29c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d051      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001c80:	e032      	b.n	8001ce8 <HAL_DMA_Init+0x2dc>
 8001c82:	bf00      	nop
 8001c84:	40020010 	.word	0x40020010
 8001c88:	40020028 	.word	0x40020028
 8001c8c:	40020040 	.word	0x40020040
 8001c90:	40020058 	.word	0x40020058
 8001c94:	40020070 	.word	0x40020070
 8001c98:	40020088 	.word	0x40020088
 8001c9c:	400200a0 	.word	0x400200a0
 8001ca0:	400200b8 	.word	0x400200b8
 8001ca4:	40020410 	.word	0x40020410
 8001ca8:	40020428 	.word	0x40020428
 8001cac:	40020440 	.word	0x40020440
 8001cb0:	40020458 	.word	0x40020458
 8001cb4:	40020470 	.word	0x40020470
 8001cb8:	40020488 	.word	0x40020488
 8001cbc:	400204a0 	.word	0x400204a0
 8001cc0:	400204b8 	.word	0x400204b8
 8001cc4:	58025408 	.word	0x58025408
 8001cc8:	5802541c 	.word	0x5802541c
 8001ccc:	58025430 	.word	0x58025430
 8001cd0:	58025444 	.word	0x58025444
 8001cd4:	58025458 	.word	0x58025458
 8001cd8:	5802546c 	.word	0x5802546c
 8001cdc:	58025480 	.word	0x58025480
 8001ce0:	58025494 	.word	0x58025494
 8001ce4:	0800b5f8 	.word	0x0800b5f8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7a      	ldr	r2, [pc, #488]	; (8001ed8 <HAL_DMA_Init+0x4cc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d018      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a79      	ldr	r2, [pc, #484]	; (8001edc <HAL_DMA_Init+0x4d0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a77      	ldr	r2, [pc, #476]	; (8001ee0 <HAL_DMA_Init+0x4d4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a76      	ldr	r2, [pc, #472]	; (8001ee4 <HAL_DMA_Init+0x4d8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a74      	ldr	r2, [pc, #464]	; (8001ee8 <HAL_DMA_Init+0x4dc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_DMA_Init+0x318>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a73      	ldr	r2, [pc, #460]	; (8001eec <HAL_DMA_Init+0x4e0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Init+0x31c>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_DMA_Init+0x31e>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8167 	beq.w	8001ffe <HAL_DMA_Init+0x5f2>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b73      	cmp	r3, #115	; 0x73
 8001d36:	d903      	bls.n	8001d40 <HAL_DMA_Init+0x334>
 8001d38:	21df      	movs	r1, #223	; 0xdf
 8001d3a:	486d      	ldr	r0, [pc, #436]	; (8001ef0 <HAL_DMA_Init+0x4e4>)
 8001d3c:	f7ff f851 	bl	8000de2 <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_DMA_Init+0x34c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d003      	beq.n	8001d58 <HAL_DMA_Init+0x34c>
 8001d50:	21e0      	movs	r1, #224	; 0xe0
 8001d52:	4867      	ldr	r0, [pc, #412]	; (8001ef0 <HAL_DMA_Init+0x4e4>)
 8001d54:	f7ff f845 	bl	8000de2 <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d041      	beq.n	8001de4 <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00f      	beq.n	8001d88 <HAL_DMA_Init+0x37c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d00b      	beq.n	8001d88 <HAL_DMA_Init+0x37c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d007      	beq.n	8001d88 <HAL_DMA_Init+0x37c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_Init+0x37c>
 8001d80:	21e5      	movs	r1, #229	; 0xe5
 8001d82:	485b      	ldr	r0, [pc, #364]	; (8001ef0 <HAL_DMA_Init+0x4e4>)
 8001d84:	f7ff f82d 	bl	8000de2 <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <HAL_DMA_Init+0x3aa>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d98:	d00d      	beq.n	8001db6 <HAL_DMA_Init+0x3aa>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da2:	d008      	beq.n	8001db6 <HAL_DMA_Init+0x3aa>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dac:	d003      	beq.n	8001db6 <HAL_DMA_Init+0x3aa>
 8001dae:	21e6      	movs	r1, #230	; 0xe6
 8001db0:	484f      	ldr	r0, [pc, #316]	; (8001ef0 <HAL_DMA_Init+0x4e4>)
 8001db2:	f7ff f816 	bl	8000de2 <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_DMA_Init+0x3d8>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dc6:	d00d      	beq.n	8001de4 <HAL_DMA_Init+0x3d8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd0:	d008      	beq.n	8001de4 <HAL_DMA_Init+0x3d8>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_Init+0x3d8>
 8001ddc:	21e7      	movs	r1, #231	; 0xe7
 8001dde:	4844      	ldr	r0, [pc, #272]	; (8001ef0 <HAL_DMA_Init+0x4e4>)
 8001de0:	f7fe ffff 	bl	8000de2 <assert_failed>
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3e      	ldr	r2, [pc, #248]	; (8001ef4 <HAL_DMA_Init+0x4e8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d04a      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a3d      	ldr	r2, [pc, #244]	; (8001ef8 <HAL_DMA_Init+0x4ec>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d045      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <HAL_DMA_Init+0x4f0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d040      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a3a      	ldr	r2, [pc, #232]	; (8001f00 <HAL_DMA_Init+0x4f4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d03b      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a38      	ldr	r2, [pc, #224]	; (8001f04 <HAL_DMA_Init+0x4f8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d036      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a37      	ldr	r2, [pc, #220]	; (8001f08 <HAL_DMA_Init+0x4fc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d031      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a35      	ldr	r2, [pc, #212]	; (8001f0c <HAL_DMA_Init+0x500>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02c      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_DMA_Init+0x504>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d027      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <HAL_DMA_Init+0x508>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d022      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <HAL_DMA_Init+0x50c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d01d      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <HAL_DMA_Init+0x4cc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d018      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_DMA_Init+0x4d0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_DMA_Init+0x4d4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00e      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_DMA_Init+0x4d8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d009      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <HAL_DMA_Init+0x4dc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_DMA_Init+0x488>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_DMA_Init+0x4e0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d108      	bne.n	8001ea6 <HAL_DMA_Init+0x49a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e007      	b.n	8001eb6 <HAL_DMA_Init+0x4aa>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001eb6:	e031      	b.n	8001f1c <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb8:	f7ff fa46 	bl	8001348 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d92a      	bls.n	8001f1c <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e17e      	b.n	80021d6 <HAL_DMA_Init+0x7ca>
 8001ed8:	40020440 	.word	0x40020440
 8001edc:	40020458 	.word	0x40020458
 8001ee0:	40020470 	.word	0x40020470
 8001ee4:	40020488 	.word	0x40020488
 8001ee8:	400204a0 	.word	0x400204a0
 8001eec:	400204b8 	.word	0x400204b8
 8001ef0:	0800b5f8 	.word	0x0800b5f8
 8001ef4:	40020010 	.word	0x40020010
 8001ef8:	40020028 	.word	0x40020028
 8001efc:	40020040 	.word	0x40020040
 8001f00:	40020058 	.word	0x40020058
 8001f04:	40020070 	.word	0x40020070
 8001f08:	40020088 	.word	0x40020088
 8001f0c:	400200a0 	.word	0x400200a0
 8001f10:	400200b8 	.word	0x400200b8
 8001f14:	40020410 	.word	0x40020410
 8001f18:	40020428 	.word	0x40020428
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1c6      	bne.n	8001eb8 <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4b92      	ldr	r3, [pc, #584]	; (8002180 <HAL_DMA_Init+0x774>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d107      	bne.n	8001f80 <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f023 0307 	bic.w	r3, r3, #7
 8001f96:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d117      	bne.n	8001fda <HAL_DMA_Init+0x5ce>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <HAL_DMA_Init+0x5ce>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f001 fa81 	bl	80034c4 <DMA_CheckFifoParam>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_DMA_Init+0x5ce>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2240      	movs	r2, #64	; 0x40
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0fd      	b.n	80021d6 <HAL_DMA_Init+0x7ca>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f001 f9bc 	bl	8003360 <DMA_CalcBaseAndBitshift>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	223f      	movs	r2, #63	; 0x3f
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	e095      	b.n	800212a <HAL_DMA_Init+0x71e>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a60      	ldr	r2, [pc, #384]	; (8002184 <HAL_DMA_Init+0x778>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <HAL_DMA_Init+0x642>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5e      	ldr	r2, [pc, #376]	; (8002188 <HAL_DMA_Init+0x77c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01d      	beq.n	800204e <HAL_DMA_Init+0x642>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5d      	ldr	r2, [pc, #372]	; (800218c <HAL_DMA_Init+0x780>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d018      	beq.n	800204e <HAL_DMA_Init+0x642>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5b      	ldr	r2, [pc, #364]	; (8002190 <HAL_DMA_Init+0x784>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_DMA_Init+0x642>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5a      	ldr	r2, [pc, #360]	; (8002194 <HAL_DMA_Init+0x788>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00e      	beq.n	800204e <HAL_DMA_Init+0x642>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_DMA_Init+0x78c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_DMA_Init+0x642>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a57      	ldr	r2, [pc, #348]	; (800219c <HAL_DMA_Init+0x790>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_DMA_Init+0x642>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a55      	ldr	r2, [pc, #340]	; (80021a0 <HAL_DMA_Init+0x794>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_DMA_Init+0x646>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_DMA_Init+0x648>
 8002052:	2300      	movs	r3, #0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d05f      	beq.n	8002118 <HAL_DMA_Init+0x70c>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b11      	cmp	r3, #17
 800205e:	d904      	bls.n	800206a <HAL_DMA_Init+0x65e>
 8002060:	f240 1149 	movw	r1, #329	; 0x149
 8002064:	484f      	ldr	r0, [pc, #316]	; (80021a4 <HAL_DMA_Init+0x798>)
 8002066:	f7fe febc 	bl	8000de2 <assert_failed>

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4b48      	ldr	r3, [pc, #288]	; (80021a8 <HAL_DMA_Init+0x79c>)
 8002086:	4013      	ands	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d008      	beq.n	80020a4 <HAL_DMA_Init+0x698>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d102      	bne.n	80020a0 <HAL_DMA_Init+0x694>
 800209a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800209e:	e002      	b.n	80020a6 <HAL_DMA_Init+0x69a>
 80020a0:	2300      	movs	r3, #0
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_Init+0x69a>
 80020a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68d2      	ldr	r2, [r2, #12]
 80020aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80020ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 80020b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 80020bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 80020c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 80020cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 80020d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_DMA_Init+0x7a0>)
 80020ec:	4413      	add	r3, r2
 80020ee:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <HAL_DMA_Init+0x7a4>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f001 f92f 	bl	8003360 <DMA_CalcBaseAndBitshift>
 8002102:	4603      	mov	r3, r0
 8002104:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	e008      	b.n	800212a <HAL_DMA_Init+0x71e>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2240      	movs	r2, #64	; 0x40
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2203      	movs	r2, #3
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e055      	b.n	80021d6 <HAL_DMA_Init+0x7ca>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f001 fa46 	bl	80035bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d102      	bne.n	800213e <HAL_DMA_Init+0x732>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002152:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02b      	beq.n	80021b4 <HAL_DMA_Init+0x7a8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b08      	cmp	r3, #8
 8002162:	d827      	bhi.n	80021b4 <HAL_DMA_Init+0x7a8>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f001 fac3 	bl	80036f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	e023      	b.n	80021c6 <HAL_DMA_Init+0x7ba>
 800217e:	bf00      	nop
 8002180:	fe10803f 	.word	0xfe10803f
 8002184:	58025408 	.word	0x58025408
 8002188:	5802541c 	.word	0x5802541c
 800218c:	58025430 	.word	0x58025430
 8002190:	58025444 	.word	0x58025444
 8002194:	58025458 	.word	0x58025458
 8002198:	5802546c 	.word	0x5802546c
 800219c:	58025480 	.word	0x58025480
 80021a0:	58025494 	.word	0x58025494
 80021a4:	0800b5f8 	.word	0x0800b5f8
 80021a8:	fffe000f 	.word	0xfffe000f
 80021ac:	a7fdabf8 	.word	0xa7fdabf8
 80021b0:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop

080021e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e188      	b.n	8002504 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d004      	beq.n	8002208 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e17d      	b.n	8002504 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a8c      	ldr	r2, [pc, #560]	; (8002440 <HAL_DMA_Abort_IT+0x260>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d04a      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a8b      	ldr	r2, [pc, #556]	; (8002444 <HAL_DMA_Abort_IT+0x264>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d045      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a89      	ldr	r2, [pc, #548]	; (8002448 <HAL_DMA_Abort_IT+0x268>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d040      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a88      	ldr	r2, [pc, #544]	; (800244c <HAL_DMA_Abort_IT+0x26c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d03b      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a86      	ldr	r2, [pc, #536]	; (8002450 <HAL_DMA_Abort_IT+0x270>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d036      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a85      	ldr	r2, [pc, #532]	; (8002454 <HAL_DMA_Abort_IT+0x274>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d031      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a83      	ldr	r2, [pc, #524]	; (8002458 <HAL_DMA_Abort_IT+0x278>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02c      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a82      	ldr	r2, [pc, #520]	; (800245c <HAL_DMA_Abort_IT+0x27c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d027      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a80      	ldr	r2, [pc, #512]	; (8002460 <HAL_DMA_Abort_IT+0x280>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d022      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <HAL_DMA_Abort_IT+0x284>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d01d      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7d      	ldr	r2, [pc, #500]	; (8002468 <HAL_DMA_Abort_IT+0x288>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d018      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7c      	ldr	r2, [pc, #496]	; (800246c <HAL_DMA_Abort_IT+0x28c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_DMA_Abort_IT+0x290>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00e      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a79      	ldr	r2, [pc, #484]	; (8002474 <HAL_DMA_Abort_IT+0x294>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a77      	ldr	r2, [pc, #476]	; (8002478 <HAL_DMA_Abort_IT+0x298>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a76      	ldr	r2, [pc, #472]	; (800247c <HAL_DMA_Abort_IT+0x29c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Abort_IT+0xcc>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_DMA_Abort_IT+0xce>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d065      	beq.n	800237e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2204      	movs	r2, #4
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a60      	ldr	r2, [pc, #384]	; (8002440 <HAL_DMA_Abort_IT+0x260>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d04a      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_DMA_Abort_IT+0x264>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d045      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <HAL_DMA_Abort_IT+0x268>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d040      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a5b      	ldr	r2, [pc, #364]	; (800244c <HAL_DMA_Abort_IT+0x26c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d03b      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_DMA_Abort_IT+0x270>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d036      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_DMA_Abort_IT+0x274>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d031      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_DMA_Abort_IT+0x278>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d02c      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a55      	ldr	r2, [pc, #340]	; (800245c <HAL_DMA_Abort_IT+0x27c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d027      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a54      	ldr	r2, [pc, #336]	; (8002460 <HAL_DMA_Abort_IT+0x280>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_DMA_Abort_IT+0x284>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01d      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a51      	ldr	r2, [pc, #324]	; (8002468 <HAL_DMA_Abort_IT+0x288>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d018      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4f      	ldr	r2, [pc, #316]	; (800246c <HAL_DMA_Abort_IT+0x28c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <HAL_DMA_Abort_IT+0x290>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_DMA_Abort_IT+0x294>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_DMA_Abort_IT+0x298>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_DMA_Abort_IT+0x17a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a49      	ldr	r2, [pc, #292]	; (800247c <HAL_DMA_Abort_IT+0x29c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <HAL_DMA_Abort_IT+0x18c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e0ca      	b.n	8002502 <HAL_DMA_Abort_IT+0x322>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e0c1      	b.n	8002502 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 020e 	bic.w	r2, r2, #14
 800238c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <HAL_DMA_Abort_IT+0x260>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04a      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_DMA_Abort_IT+0x264>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d045      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a28      	ldr	r2, [pc, #160]	; (8002448 <HAL_DMA_Abort_IT+0x268>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d040      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <HAL_DMA_Abort_IT+0x26c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d03b      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a25      	ldr	r2, [pc, #148]	; (8002450 <HAL_DMA_Abort_IT+0x270>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d036      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a23      	ldr	r2, [pc, #140]	; (8002454 <HAL_DMA_Abort_IT+0x274>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a22      	ldr	r2, [pc, #136]	; (8002458 <HAL_DMA_Abort_IT+0x278>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d02c      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_DMA_Abort_IT+0x27c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d027      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <HAL_DMA_Abort_IT+0x280>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_DMA_Abort_IT+0x284>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01d      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_DMA_Abort_IT+0x288>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d018      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <HAL_DMA_Abort_IT+0x28c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_DMA_Abort_IT+0x290>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_DMA_Abort_IT+0x294>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_DMA_Abort_IT+0x298>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_DMA_Abort_IT+0x24e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <HAL_DMA_Abort_IT+0x29c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d128      	bne.n	8002480 <HAL_DMA_Abort_IT+0x2a0>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e027      	b.n	8002490 <HAL_DMA_Abort_IT+0x2b0>
 8002440:	40020010 	.word	0x40020010
 8002444:	40020028 	.word	0x40020028
 8002448:	40020040 	.word	0x40020040
 800244c:	40020058 	.word	0x40020058
 8002450:	40020070 	.word	0x40020070
 8002454:	40020088 	.word	0x40020088
 8002458:	400200a0 	.word	0x400200a0
 800245c:	400200b8 	.word	0x400200b8
 8002460:	40020410 	.word	0x40020410
 8002464:	40020428 	.word	0x40020428
 8002468:	40020440 	.word	0x40020440
 800246c:	40020458 	.word	0x40020458
 8002470:	40020470 	.word	0x40020470
 8002474:	40020488 	.word	0x40020488
 8002478:	400204a0 	.word	0x400204a0
 800247c:	400204b8 	.word	0x400204b8
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800249e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2201      	movs	r2, #1
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024be:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d6:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024e0:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002518:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_DMA_IRQHandler+0x1ac>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a67      	ldr	r2, [pc, #412]	; (80026bc <HAL_DMA_IRQHandler+0x1b0>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	0a9b      	lsrs	r3, r3, #10
 8002524:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5f      	ldr	r2, [pc, #380]	; (80026c0 <HAL_DMA_IRQHandler+0x1b4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d04a      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <HAL_DMA_IRQHandler+0x1b8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d045      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5c      	ldr	r2, [pc, #368]	; (80026c8 <HAL_DMA_IRQHandler+0x1bc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d040      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a5a      	ldr	r2, [pc, #360]	; (80026cc <HAL_DMA_IRQHandler+0x1c0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d03b      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a59      	ldr	r2, [pc, #356]	; (80026d0 <HAL_DMA_IRQHandler+0x1c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d036      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a57      	ldr	r2, [pc, #348]	; (80026d4 <HAL_DMA_IRQHandler+0x1c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d031      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a56      	ldr	r2, [pc, #344]	; (80026d8 <HAL_DMA_IRQHandler+0x1cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d02c      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a54      	ldr	r2, [pc, #336]	; (80026dc <HAL_DMA_IRQHandler+0x1d0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d027      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <HAL_DMA_IRQHandler+0x1d4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d022      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <HAL_DMA_IRQHandler+0x1d8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01d      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_DMA_IRQHandler+0x1dc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d018      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <HAL_DMA_IRQHandler+0x1e0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_DMA_IRQHandler+0x1e4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00e      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_DMA_IRQHandler+0x1e8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d009      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <HAL_DMA_IRQHandler+0x1ec>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d004      	beq.n	80025de <HAL_DMA_IRQHandler+0xd2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a48      	ldr	r2, [pc, #288]	; (80026fc <HAL_DMA_IRQHandler+0x1f0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_IRQHandler+0xd6>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_DMA_IRQHandler+0xd8>
 80025e2:	2300      	movs	r3, #0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 842b 	beq.w	8002e40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2208      	movs	r2, #8
 80025f4:	409a      	lsls	r2, r3
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a2 	beq.w	8002744 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <HAL_DMA_IRQHandler+0x1b4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d04a      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <HAL_DMA_IRQHandler+0x1b8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d045      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <HAL_DMA_IRQHandler+0x1bc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d040      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2a      	ldr	r2, [pc, #168]	; (80026cc <HAL_DMA_IRQHandler+0x1c0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d03b      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <HAL_DMA_IRQHandler+0x1c4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d036      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <HAL_DMA_IRQHandler+0x1c8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d031      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_DMA_IRQHandler+0x1cc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02c      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a24      	ldr	r2, [pc, #144]	; (80026dc <HAL_DMA_IRQHandler+0x1d0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d027      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_DMA_IRQHandler+0x1d4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d022      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a21      	ldr	r2, [pc, #132]	; (80026e4 <HAL_DMA_IRQHandler+0x1d8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d01d      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_DMA_IRQHandler+0x1dc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d018      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <HAL_DMA_IRQHandler+0x1e0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_DMA_IRQHandler+0x1e4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00e      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <HAL_DMA_IRQHandler+0x1e8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_DMA_IRQHandler+0x1ec>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x194>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_DMA_IRQHandler+0x1f0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d12f      	bne.n	8002700 <HAL_DMA_IRQHandler+0x1f4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	e02e      	b.n	8002714 <HAL_DMA_IRQHandler+0x208>
 80026b6:	bf00      	nop
 80026b8:	24000000 	.word	0x24000000
 80026bc:	1b4e81b5 	.word	0x1b4e81b5
 80026c0:	40020010 	.word	0x40020010
 80026c4:	40020028 	.word	0x40020028
 80026c8:	40020040 	.word	0x40020040
 80026cc:	40020058 	.word	0x40020058
 80026d0:	40020070 	.word	0x40020070
 80026d4:	40020088 	.word	0x40020088
 80026d8:	400200a0 	.word	0x400200a0
 80026dc:	400200b8 	.word	0x400200b8
 80026e0:	40020410 	.word	0x40020410
 80026e4:	40020428 	.word	0x40020428
 80026e8:	40020440 	.word	0x40020440
 80026ec:	40020458 	.word	0x40020458
 80026f0:	40020470 	.word	0x40020470
 80026f4:	40020488 	.word	0x40020488
 80026f8:	400204a0 	.word	0x400204a0
 80026fc:	400204b8 	.word	0x400204b8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2208      	movs	r2, #8
 8002732:	409a      	lsls	r2, r3
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d06e      	beq.n	8002838 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a69      	ldr	r2, [pc, #420]	; (8002904 <HAL_DMA_IRQHandler+0x3f8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04a      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a67      	ldr	r2, [pc, #412]	; (8002908 <HAL_DMA_IRQHandler+0x3fc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d045      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a66      	ldr	r2, [pc, #408]	; (800290c <HAL_DMA_IRQHandler+0x400>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d040      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a64      	ldr	r2, [pc, #400]	; (8002910 <HAL_DMA_IRQHandler+0x404>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d03b      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_DMA_IRQHandler+0x408>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d036      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a61      	ldr	r2, [pc, #388]	; (8002918 <HAL_DMA_IRQHandler+0x40c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d031      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a60      	ldr	r2, [pc, #384]	; (800291c <HAL_DMA_IRQHandler+0x410>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d02c      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5e      	ldr	r2, [pc, #376]	; (8002920 <HAL_DMA_IRQHandler+0x414>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d027      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <HAL_DMA_IRQHandler+0x418>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a5b      	ldr	r2, [pc, #364]	; (8002928 <HAL_DMA_IRQHandler+0x41c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01d      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5a      	ldr	r2, [pc, #360]	; (800292c <HAL_DMA_IRQHandler+0x420>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d018      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_DMA_IRQHandler+0x424>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a57      	ldr	r2, [pc, #348]	; (8002934 <HAL_DMA_IRQHandler+0x428>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_DMA_IRQHandler+0x42c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a54      	ldr	r2, [pc, #336]	; (800293c <HAL_DMA_IRQHandler+0x430>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_DMA_IRQHandler+0x2ee>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_DMA_IRQHandler+0x434>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10a      	bne.n	8002810 <HAL_DMA_IRQHandler+0x304>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e003      	b.n	8002818 <HAL_DMA_IRQHandler+0x30c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2201      	movs	r2, #1
 8002826:	409a      	lsls	r2, r3
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f043 0202 	orr.w	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2204      	movs	r2, #4
 8002842:	409a      	lsls	r2, r3
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 808f 	beq.w	800296c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <HAL_DMA_IRQHandler+0x3f8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04a      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <HAL_DMA_IRQHandler+0x3fc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d045      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a29      	ldr	r2, [pc, #164]	; (800290c <HAL_DMA_IRQHandler+0x400>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d040      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_DMA_IRQHandler+0x404>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d03b      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a26      	ldr	r2, [pc, #152]	; (8002914 <HAL_DMA_IRQHandler+0x408>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d036      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a24      	ldr	r2, [pc, #144]	; (8002918 <HAL_DMA_IRQHandler+0x40c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d031      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a23      	ldr	r2, [pc, #140]	; (800291c <HAL_DMA_IRQHandler+0x410>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d02c      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_DMA_IRQHandler+0x414>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d027      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a20      	ldr	r2, [pc, #128]	; (8002924 <HAL_DMA_IRQHandler+0x418>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_DMA_IRQHandler+0x41c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_DMA_IRQHandler+0x420>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_DMA_IRQHandler+0x424>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <HAL_DMA_IRQHandler+0x428>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <HAL_DMA_IRQHandler+0x42c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_DMA_IRQHandler+0x430>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_DMA_IRQHandler+0x3e2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <HAL_DMA_IRQHandler+0x434>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d12a      	bne.n	8002944 <HAL_DMA_IRQHandler+0x438>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e023      	b.n	800294c <HAL_DMA_IRQHandler+0x440>
 8002904:	40020010 	.word	0x40020010
 8002908:	40020028 	.word	0x40020028
 800290c:	40020040 	.word	0x40020040
 8002910:	40020058 	.word	0x40020058
 8002914:	40020070 	.word	0x40020070
 8002918:	40020088 	.word	0x40020088
 800291c:	400200a0 	.word	0x400200a0
 8002920:	400200b8 	.word	0x400200b8
 8002924:	40020410 	.word	0x40020410
 8002928:	40020428 	.word	0x40020428
 800292c:	40020440 	.word	0x40020440
 8002930:	40020458 	.word	0x40020458
 8002934:	40020470 	.word	0x40020470
 8002938:	40020488 	.word	0x40020488
 800293c:	400204a0 	.word	0x400204a0
 8002940:	400204b8 	.word	0x400204b8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2204      	movs	r2, #4
 800295a:	409a      	lsls	r2, r3
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2210      	movs	r2, #16
 8002976:	409a      	lsls	r2, r3
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a6 	beq.w	8002ace <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a85      	ldr	r2, [pc, #532]	; (8002b9c <HAL_DMA_IRQHandler+0x690>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d04a      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a83      	ldr	r2, [pc, #524]	; (8002ba0 <HAL_DMA_IRQHandler+0x694>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d045      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a82      	ldr	r2, [pc, #520]	; (8002ba4 <HAL_DMA_IRQHandler+0x698>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d040      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_DMA_IRQHandler+0x69c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d03b      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7f      	ldr	r2, [pc, #508]	; (8002bac <HAL_DMA_IRQHandler+0x6a0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7d      	ldr	r2, [pc, #500]	; (8002bb0 <HAL_DMA_IRQHandler+0x6a4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7c      	ldr	r2, [pc, #496]	; (8002bb4 <HAL_DMA_IRQHandler+0x6a8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d02c      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7a      	ldr	r2, [pc, #488]	; (8002bb8 <HAL_DMA_IRQHandler+0x6ac>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d027      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a79      	ldr	r2, [pc, #484]	; (8002bbc <HAL_DMA_IRQHandler+0x6b0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a77      	ldr	r2, [pc, #476]	; (8002bc0 <HAL_DMA_IRQHandler+0x6b4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <HAL_DMA_IRQHandler+0x6b8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a74      	ldr	r2, [pc, #464]	; (8002bc8 <HAL_DMA_IRQHandler+0x6bc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a73      	ldr	r2, [pc, #460]	; (8002bcc <HAL_DMA_IRQHandler+0x6c0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a71      	ldr	r2, [pc, #452]	; (8002bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a70      	ldr	r2, [pc, #448]	; (8002bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x516>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10a      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x52c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e009      	b.n	8002a4c <HAL_DMA_IRQHandler+0x540>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d03e      	beq.n	8002ace <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2210      	movs	r2, #16
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d018      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d108      	bne.n	8002a8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d024      	beq.n	8002ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
 8002a8c:	e01f      	b.n	8002ace <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01b      	beq.n	8002ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
 8002a9e:	e016      	b.n	8002ace <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0208 	bic.w	r2, r2, #8
 8002abc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8110 	beq.w	8002d04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2c      	ldr	r2, [pc, #176]	; (8002b9c <HAL_DMA_IRQHandler+0x690>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d04a      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_DMA_IRQHandler+0x694>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d045      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_DMA_IRQHandler+0x698>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d040      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a28      	ldr	r2, [pc, #160]	; (8002ba8 <HAL_DMA_IRQHandler+0x69c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d03b      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <HAL_DMA_IRQHandler+0x6a0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d036      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <HAL_DMA_IRQHandler+0x6a4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d031      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <HAL_DMA_IRQHandler+0x6a8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02c      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <HAL_DMA_IRQHandler+0x6ac>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d027      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <HAL_DMA_IRQHandler+0x6b0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d022      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_DMA_IRQHandler+0x6b4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d01d      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_DMA_IRQHandler+0x6b8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d018      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <HAL_DMA_IRQHandler+0x6bc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <HAL_DMA_IRQHandler+0x6c0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00e      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x678>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d12b      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x6d0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e02a      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x6e4>
 8002b9a:	bf00      	nop
 8002b9c:	40020010 	.word	0x40020010
 8002ba0:	40020028 	.word	0x40020028
 8002ba4:	40020040 	.word	0x40020040
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	40020070 	.word	0x40020070
 8002bb0:	40020088 	.word	0x40020088
 8002bb4:	400200a0 	.word	0x400200a0
 8002bb8:	400200b8 	.word	0x400200b8
 8002bbc:	40020410 	.word	0x40020410
 8002bc0:	40020428 	.word	0x40020428
 8002bc4:	40020440 	.word	0x40020440
 8002bc8:	40020458 	.word	0x40020458
 8002bcc:	40020470 	.word	0x40020470
 8002bd0:	40020488 	.word	0x40020488
 8002bd4:	400204a0 	.word	0x400204a0
 8002bd8:	400204b8 	.word	0x400204b8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8087 	beq.w	8002d04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2220      	movs	r2, #32
 8002c00:	409a      	lsls	r2, r3
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d139      	bne.n	8002c86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0216 	bic.w	r2, r2, #22
 8002c20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <HAL_DMA_IRQHandler+0x736>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0208 	bic.w	r2, r2, #8
 8002c50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	223f      	movs	r2, #63	; 0x3f
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 834a 	beq.w	8003310 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
          }
          return;
 8002c84:	e344      	b.n	8003310 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d018      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d02c      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
 8002cb2:	e027      	b.n	8002d04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d023      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
 8002cc4:	e01e      	b.n	8002d04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10f      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0210 	bic.w	r2, r2, #16
 8002ce2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8306 	beq.w	800331a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8088 	beq.w	8002e2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7a      	ldr	r2, [pc, #488]	; (8002f14 <HAL_DMA_IRQHandler+0xa08>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a79      	ldr	r2, [pc, #484]	; (8002f18 <HAL_DMA_IRQHandler+0xa0c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d045      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a77      	ldr	r2, [pc, #476]	; (8002f1c <HAL_DMA_IRQHandler+0xa10>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a76      	ldr	r2, [pc, #472]	; (8002f20 <HAL_DMA_IRQHandler+0xa14>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a74      	ldr	r2, [pc, #464]	; (8002f24 <HAL_DMA_IRQHandler+0xa18>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d036      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a73      	ldr	r2, [pc, #460]	; (8002f28 <HAL_DMA_IRQHandler+0xa1c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a71      	ldr	r2, [pc, #452]	; (8002f2c <HAL_DMA_IRQHandler+0xa20>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02c      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a70      	ldr	r2, [pc, #448]	; (8002f30 <HAL_DMA_IRQHandler+0xa24>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d027      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_DMA_IRQHandler+0xa28>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d022      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6d      	ldr	r2, [pc, #436]	; (8002f38 <HAL_DMA_IRQHandler+0xa2c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01d      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6b      	ldr	r2, [pc, #428]	; (8002f3c <HAL_DMA_IRQHandler+0xa30>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_DMA_IRQHandler+0xa34>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a68      	ldr	r2, [pc, #416]	; (8002f44 <HAL_DMA_IRQHandler+0xa38>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00e      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a67      	ldr	r2, [pc, #412]	; (8002f48 <HAL_DMA_IRQHandler+0xa3c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a65      	ldr	r2, [pc, #404]	; (8002f4c <HAL_DMA_IRQHandler+0xa40>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x8b8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a64      	ldr	r2, [pc, #400]	; (8002f50 <HAL_DMA_IRQHandler+0xa44>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <HAL_DMA_IRQHandler+0x8ca>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_DMA_IRQHandler+0x8da>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3301      	adds	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d307      	bcc.n	8002e02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f2      	bne.n	8002de6 <HAL_DMA_IRQHandler+0x8da>
 8002e00:	e000      	b.n	8002e04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e02:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e22:	e003      	b.n	8002e2c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8272 	beq.w	800331a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
 8002e3e:	e26c      	b.n	800331a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a43      	ldr	r2, [pc, #268]	; (8002f54 <HAL_DMA_IRQHandler+0xa48>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d022      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x984>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a42      	ldr	r2, [pc, #264]	; (8002f58 <HAL_DMA_IRQHandler+0xa4c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d01d      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x984>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <HAL_DMA_IRQHandler+0xa50>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d018      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x984>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3f      	ldr	r2, [pc, #252]	; (8002f60 <HAL_DMA_IRQHandler+0xa54>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x984>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3d      	ldr	r2, [pc, #244]	; (8002f64 <HAL_DMA_IRQHandler+0xa58>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00e      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x984>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3c      	ldr	r2, [pc, #240]	; (8002f68 <HAL_DMA_IRQHandler+0xa5c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x984>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a3a      	ldr	r2, [pc, #232]	; (8002f6c <HAL_DMA_IRQHandler+0xa60>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x984>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a39      	ldr	r2, [pc, #228]	; (8002f70 <HAL_DMA_IRQHandler+0xa64>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x988>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_DMA_IRQHandler+0x98a>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 823f 	beq.w	800331a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2204      	movs	r2, #4
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80cd 	beq.w	8003054 <HAL_DMA_IRQHandler+0xb48>
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80c7 	beq.w	8003054 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2204      	movs	r2, #4
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d049      	beq.n	8002f74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8210 	beq.w	8003314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002efc:	e20a      	b.n	8003314 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8206 	beq.w	8003314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f10:	e200      	b.n	8003314 <HAL_DMA_IRQHandler+0xe08>
 8002f12:	bf00      	nop
 8002f14:	40020010 	.word	0x40020010
 8002f18:	40020028 	.word	0x40020028
 8002f1c:	40020040 	.word	0x40020040
 8002f20:	40020058 	.word	0x40020058
 8002f24:	40020070 	.word	0x40020070
 8002f28:	40020088 	.word	0x40020088
 8002f2c:	400200a0 	.word	0x400200a0
 8002f30:	400200b8 	.word	0x400200b8
 8002f34:	40020410 	.word	0x40020410
 8002f38:	40020428 	.word	0x40020428
 8002f3c:	40020440 	.word	0x40020440
 8002f40:	40020458 	.word	0x40020458
 8002f44:	40020470 	.word	0x40020470
 8002f48:	40020488 	.word	0x40020488
 8002f4c:	400204a0 	.word	0x400204a0
 8002f50:	400204b8 	.word	0x400204b8
 8002f54:	58025408 	.word	0x58025408
 8002f58:	5802541c 	.word	0x5802541c
 8002f5c:	58025430 	.word	0x58025430
 8002f60:	58025444 	.word	0x58025444
 8002f64:	58025458 	.word	0x58025458
 8002f68:	5802546c 	.word	0x5802546c
 8002f6c:	58025480 	.word	0x58025480
 8002f70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d160      	bne.n	8003040 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a8c      	ldr	r2, [pc, #560]	; (80031b4 <HAL_DMA_IRQHandler+0xca8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d04a      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a8a      	ldr	r2, [pc, #552]	; (80031b8 <HAL_DMA_IRQHandler+0xcac>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d045      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a89      	ldr	r2, [pc, #548]	; (80031bc <HAL_DMA_IRQHandler+0xcb0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d040      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a87      	ldr	r2, [pc, #540]	; (80031c0 <HAL_DMA_IRQHandler+0xcb4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d03b      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a86      	ldr	r2, [pc, #536]	; (80031c4 <HAL_DMA_IRQHandler+0xcb8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d036      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a84      	ldr	r2, [pc, #528]	; (80031c8 <HAL_DMA_IRQHandler+0xcbc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a83      	ldr	r2, [pc, #524]	; (80031cc <HAL_DMA_IRQHandler+0xcc0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d02c      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a81      	ldr	r2, [pc, #516]	; (80031d0 <HAL_DMA_IRQHandler+0xcc4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d027      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a80      	ldr	r2, [pc, #512]	; (80031d4 <HAL_DMA_IRQHandler+0xcc8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a7e      	ldr	r2, [pc, #504]	; (80031d8 <HAL_DMA_IRQHandler+0xccc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01d      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a7d      	ldr	r2, [pc, #500]	; (80031dc <HAL_DMA_IRQHandler+0xcd0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a7b      	ldr	r2, [pc, #492]	; (80031e0 <HAL_DMA_IRQHandler+0xcd4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a7a      	ldr	r2, [pc, #488]	; (80031e4 <HAL_DMA_IRQHandler+0xcd8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a78      	ldr	r2, [pc, #480]	; (80031e8 <HAL_DMA_IRQHandler+0xcdc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a77      	ldr	r2, [pc, #476]	; (80031ec <HAL_DMA_IRQHandler+0xce0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_DMA_IRQHandler+0xb12>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a75      	ldr	r2, [pc, #468]	; (80031f0 <HAL_DMA_IRQHandler+0xce4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d108      	bne.n	8003030 <HAL_DMA_IRQHandler+0xb24>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0208 	bic.w	r2, r2, #8
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e007      	b.n	8003040 <HAL_DMA_IRQHandler+0xb34>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8165 	beq.w	8003314 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003052:	e15f      	b.n	8003314 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2202      	movs	r2, #2
 800305e:	409a      	lsls	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80c5 	beq.w	80031f4 <HAL_DMA_IRQHandler+0xce8>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80bf 	beq.w	80031f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2202      	movs	r2, #2
 8003080:	409a      	lsls	r2, r3
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 813a 	beq.w	8003318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030ac:	e134      	b.n	8003318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8130 	beq.w	8003318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030c0:	e12a      	b.n	8003318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d168      	bne.n	800319e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a38      	ldr	r2, [pc, #224]	; (80031b4 <HAL_DMA_IRQHandler+0xca8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d04a      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a37      	ldr	r2, [pc, #220]	; (80031b8 <HAL_DMA_IRQHandler+0xcac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d045      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a35      	ldr	r2, [pc, #212]	; (80031bc <HAL_DMA_IRQHandler+0xcb0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d040      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a34      	ldr	r2, [pc, #208]	; (80031c0 <HAL_DMA_IRQHandler+0xcb4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d03b      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a32      	ldr	r2, [pc, #200]	; (80031c4 <HAL_DMA_IRQHandler+0xcb8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d036      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <HAL_DMA_IRQHandler+0xcbc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d031      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2f      	ldr	r2, [pc, #188]	; (80031cc <HAL_DMA_IRQHandler+0xcc0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d02c      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2e      	ldr	r2, [pc, #184]	; (80031d0 <HAL_DMA_IRQHandler+0xcc4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d027      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <HAL_DMA_IRQHandler+0xcc8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d022      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_DMA_IRQHandler+0xccc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d01d      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a29      	ldr	r2, [pc, #164]	; (80031dc <HAL_DMA_IRQHandler+0xcd0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d018      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a28      	ldr	r2, [pc, #160]	; (80031e0 <HAL_DMA_IRQHandler+0xcd4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <HAL_DMA_IRQHandler+0xcd8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00e      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <HAL_DMA_IRQHandler+0xcdc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a23      	ldr	r2, [pc, #140]	; (80031ec <HAL_DMA_IRQHandler+0xce0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d004      	beq.n	800316c <HAL_DMA_IRQHandler+0xc60>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <HAL_DMA_IRQHandler+0xce4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <HAL_DMA_IRQHandler+0xc72>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0214 	bic.w	r2, r2, #20
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e007      	b.n	800318e <HAL_DMA_IRQHandler+0xc82>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 020a 	bic.w	r2, r2, #10
 800318c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80b8 	beq.w	8003318 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031b0:	e0b2      	b.n	8003318 <HAL_DMA_IRQHandler+0xe0c>
 80031b2:	bf00      	nop
 80031b4:	40020010 	.word	0x40020010
 80031b8:	40020028 	.word	0x40020028
 80031bc:	40020040 	.word	0x40020040
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020070 	.word	0x40020070
 80031c8:	40020088 	.word	0x40020088
 80031cc:	400200a0 	.word	0x400200a0
 80031d0:	400200b8 	.word	0x400200b8
 80031d4:	40020410 	.word	0x40020410
 80031d8:	40020428 	.word	0x40020428
 80031dc:	40020440 	.word	0x40020440
 80031e0:	40020458 	.word	0x40020458
 80031e4:	40020470 	.word	0x40020470
 80031e8:	40020488 	.word	0x40020488
 80031ec:	400204a0 	.word	0x400204a0
 80031f0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2208      	movs	r2, #8
 80031fe:	409a      	lsls	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8088 	beq.w	800331a <HAL_DMA_IRQHandler+0xe0e>
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8082 	beq.w	800331a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a41      	ldr	r2, [pc, #260]	; (8003320 <HAL_DMA_IRQHandler+0xe14>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d04a      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3f      	ldr	r2, [pc, #252]	; (8003324 <HAL_DMA_IRQHandler+0xe18>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d045      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3e      	ldr	r2, [pc, #248]	; (8003328 <HAL_DMA_IRQHandler+0xe1c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d040      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a3c      	ldr	r2, [pc, #240]	; (800332c <HAL_DMA_IRQHandler+0xe20>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d03b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a3b      	ldr	r2, [pc, #236]	; (8003330 <HAL_DMA_IRQHandler+0xe24>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d036      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a39      	ldr	r2, [pc, #228]	; (8003334 <HAL_DMA_IRQHandler+0xe28>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d031      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a38      	ldr	r2, [pc, #224]	; (8003338 <HAL_DMA_IRQHandler+0xe2c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d02c      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a36      	ldr	r2, [pc, #216]	; (800333c <HAL_DMA_IRQHandler+0xe30>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d027      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_DMA_IRQHandler+0xe34>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a33      	ldr	r2, [pc, #204]	; (8003344 <HAL_DMA_IRQHandler+0xe38>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01d      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a32      	ldr	r2, [pc, #200]	; (8003348 <HAL_DMA_IRQHandler+0xe3c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d018      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a30      	ldr	r2, [pc, #192]	; (800334c <HAL_DMA_IRQHandler+0xe40>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <HAL_DMA_IRQHandler+0xe44>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_DMA_IRQHandler+0xe48>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <HAL_DMA_IRQHandler+0xe4c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xdaa>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2a      	ldr	r2, [pc, #168]	; (800335c <HAL_DMA_IRQHandler+0xe50>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d108      	bne.n	80032c8 <HAL_DMA_IRQHandler+0xdbc>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 021c 	bic.w	r2, r2, #28
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e007      	b.n	80032d8 <HAL_DMA_IRQHandler+0xdcc>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 020e 	bic.w	r2, r2, #14
 80032d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
 800330e:	e004      	b.n	800331a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003310:	bf00      	nop
 8003312:	e002      	b.n	800331a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003314:	bf00      	nop
 8003316:	e000      	b.n	800331a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003318:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800331a:	3728      	adds	r7, #40	; 0x28
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40020010 	.word	0x40020010
 8003324:	40020028 	.word	0x40020028
 8003328:	40020040 	.word	0x40020040
 800332c:	40020058 	.word	0x40020058
 8003330:	40020070 	.word	0x40020070
 8003334:	40020088 	.word	0x40020088
 8003338:	400200a0 	.word	0x400200a0
 800333c:	400200b8 	.word	0x400200b8
 8003340:	40020410 	.word	0x40020410
 8003344:	40020428 	.word	0x40020428
 8003348:	40020440 	.word	0x40020440
 800334c:	40020458 	.word	0x40020458
 8003350:	40020470 	.word	0x40020470
 8003354:	40020488 	.word	0x40020488
 8003358:	400204a0 	.word	0x400204a0
 800335c:	400204b8 	.word	0x400204b8

08003360 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a42      	ldr	r2, [pc, #264]	; (8003478 <DMA_CalcBaseAndBitshift+0x118>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04a      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a41      	ldr	r2, [pc, #260]	; (800347c <DMA_CalcBaseAndBitshift+0x11c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d045      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a3f      	ldr	r2, [pc, #252]	; (8003480 <DMA_CalcBaseAndBitshift+0x120>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d040      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a3e      	ldr	r2, [pc, #248]	; (8003484 <DMA_CalcBaseAndBitshift+0x124>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d03b      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3c      	ldr	r2, [pc, #240]	; (8003488 <DMA_CalcBaseAndBitshift+0x128>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d036      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3b      	ldr	r2, [pc, #236]	; (800348c <DMA_CalcBaseAndBitshift+0x12c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d031      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a39      	ldr	r2, [pc, #228]	; (8003490 <DMA_CalcBaseAndBitshift+0x130>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02c      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a38      	ldr	r2, [pc, #224]	; (8003494 <DMA_CalcBaseAndBitshift+0x134>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d027      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a36      	ldr	r2, [pc, #216]	; (8003498 <DMA_CalcBaseAndBitshift+0x138>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d022      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a35      	ldr	r2, [pc, #212]	; (800349c <DMA_CalcBaseAndBitshift+0x13c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d01d      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a33      	ldr	r2, [pc, #204]	; (80034a0 <DMA_CalcBaseAndBitshift+0x140>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d018      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a32      	ldr	r2, [pc, #200]	; (80034a4 <DMA_CalcBaseAndBitshift+0x144>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a30      	ldr	r2, [pc, #192]	; (80034a8 <DMA_CalcBaseAndBitshift+0x148>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2f      	ldr	r2, [pc, #188]	; (80034ac <DMA_CalcBaseAndBitshift+0x14c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2d      	ldr	r2, [pc, #180]	; (80034b0 <DMA_CalcBaseAndBitshift+0x150>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <DMA_CalcBaseAndBitshift+0xa8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <DMA_CalcBaseAndBitshift+0x154>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d101      	bne.n	800340c <DMA_CalcBaseAndBitshift+0xac>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <DMA_CalcBaseAndBitshift+0xae>
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d024      	beq.n	800345c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3b10      	subs	r3, #16
 800341a:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <DMA_CalcBaseAndBitshift+0x158>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	4a24      	ldr	r2, [pc, #144]	; (80034bc <DMA_CalcBaseAndBitshift+0x15c>)
 800342c:	5cd3      	ldrb	r3, [r2, r3]
 800342e:	461a      	mov	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d908      	bls.n	800344c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <DMA_CalcBaseAndBitshift+0x160>)
 8003442:	4013      	ands	r3, r2
 8003444:	1d1a      	adds	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	659a      	str	r2, [r3, #88]	; 0x58
 800344a:	e00d      	b.n	8003468 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <DMA_CalcBaseAndBitshift+0x160>)
 8003454:	4013      	ands	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6593      	str	r3, [r2, #88]	; 0x58
 800345a:	e005      	b.n	8003468 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40020010 	.word	0x40020010
 800347c:	40020028 	.word	0x40020028
 8003480:	40020040 	.word	0x40020040
 8003484:	40020058 	.word	0x40020058
 8003488:	40020070 	.word	0x40020070
 800348c:	40020088 	.word	0x40020088
 8003490:	400200a0 	.word	0x400200a0
 8003494:	400200b8 	.word	0x400200b8
 8003498:	40020410 	.word	0x40020410
 800349c:	40020428 	.word	0x40020428
 80034a0:	40020440 	.word	0x40020440
 80034a4:	40020458 	.word	0x40020458
 80034a8:	40020470 	.word	0x40020470
 80034ac:	40020488 	.word	0x40020488
 80034b0:	400204a0 	.word	0x400204a0
 80034b4:	400204b8 	.word	0x400204b8
 80034b8:	aaaaaaab 	.word	0xaaaaaaab
 80034bc:	0800b860 	.word	0x0800b860
 80034c0:	fffffc00 	.word	0xfffffc00

080034c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d120      	bne.n	800351a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d858      	bhi.n	8003592 <DMA_CheckFifoParam+0xce>
 80034e0:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <DMA_CheckFifoParam+0x24>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	0800350b 	.word	0x0800350b
 80034f0:	080034f9 	.word	0x080034f9
 80034f4:	08003593 	.word	0x08003593
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d048      	beq.n	8003596 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003508:	e045      	b.n	8003596 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003512:	d142      	bne.n	800359a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003518:	e03f      	b.n	800359a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003522:	d123      	bne.n	800356c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	2b03      	cmp	r3, #3
 800352a:	d838      	bhi.n	800359e <DMA_CheckFifoParam+0xda>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <DMA_CheckFifoParam+0x70>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003545 	.word	0x08003545
 8003538:	0800354b 	.word	0x0800354b
 800353c:	08003545 	.word	0x08003545
 8003540:	0800355d 	.word	0x0800355d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
        break;
 8003548:	e030      	b.n	80035ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d025      	beq.n	80035a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800355a:	e022      	b.n	80035a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003564:	d11f      	bne.n	80035a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800356a:	e01c      	b.n	80035a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	2b02      	cmp	r3, #2
 8003572:	d902      	bls.n	800357a <DMA_CheckFifoParam+0xb6>
 8003574:	2b03      	cmp	r3, #3
 8003576:	d003      	beq.n	8003580 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003578:	e018      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
        break;
 800357e:	e015      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
    break;
 8003590:	e00b      	b.n	80035aa <DMA_CheckFifoParam+0xe6>
        break;
 8003592:	bf00      	nop
 8003594:	e00a      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
        break;
 8003596:	bf00      	nop
 8003598:	e008      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
        break;
 800359a:	bf00      	nop
 800359c:	e006      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
        break;
 800359e:	bf00      	nop
 80035a0:	e004      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
        break;
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
        break;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
    break;
 80035aa:	bf00      	nop
    }
  }

  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a38      	ldr	r2, [pc, #224]	; (80036b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a36      	ldr	r2, [pc, #216]	; (80036b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01d      	beq.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a35      	ldr	r2, [pc, #212]	; (80036b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a33      	ldr	r2, [pc, #204]	; (80036bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a32      	ldr	r2, [pc, #200]	; (80036c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a30      	ldr	r2, [pc, #192]	; (80036c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2d      	ldr	r2, [pc, #180]	; (80036cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01a      	beq.n	800365a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3b08      	subs	r3, #8
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003648:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003658:	e024      	b.n	80036a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	3b10      	subs	r3, #16
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d806      	bhi.n	8003682 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d902      	bls.n	8003682 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3308      	adds	r3, #8
 8003680:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	461a      	mov	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003694:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	58025408 	.word	0x58025408
 80036b4:	5802541c 	.word	0x5802541c
 80036b8:	58025430 	.word	0x58025430
 80036bc:	58025444 	.word	0x58025444
 80036c0:	58025458 	.word	0x58025458
 80036c4:	5802546c 	.word	0x5802546c
 80036c8:	58025480 	.word	0x58025480
 80036cc:	58025494 	.word	0x58025494
 80036d0:	cccccccd 	.word	0xcccccccd
 80036d4:	16009600 	.word	0x16009600
 80036d8:	58025880 	.word	0x58025880
 80036dc:	aaaaaaab 	.word	0xaaaaaaab
 80036e0:	400204b8 	.word	0x400204b8
 80036e4:	4002040f 	.word	0x4002040f
 80036e8:	10008200 	.word	0x10008200
 80036ec:	40020880 	.word	0x40020880

080036f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04a      	beq.n	800379c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d847      	bhi.n	800379c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d022      	beq.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a24      	ldr	r2, [pc, #144]	; (80037ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01d      	beq.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003760:	2300      	movs	r3, #0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	461a      	mov	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003778:	671a      	str	r2, [r3, #112]	; 0x70
 800377a:	e009      	b.n	8003790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800378e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3b01      	subs	r3, #1
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	58025408 	.word	0x58025408
 80037ac:	5802541c 	.word	0x5802541c
 80037b0:	58025430 	.word	0x58025430
 80037b4:	58025444 	.word	0x58025444
 80037b8:	58025458 	.word	0x58025458
 80037bc:	5802546c 	.word	0x5802546c
 80037c0:	58025480 	.word	0x58025480
 80037c4:	58025494 	.word	0x58025494
 80037c8:	1600963f 	.word	0x1600963f
 80037cc:	58025940 	.word	0x58025940
 80037d0:	1000823f 	.word	0x1000823f
 80037d4:	40020940 	.word	0x40020940

080037d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_GPIO_Init+0x12c>)
 80037e8:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a46      	ldr	r2, [pc, #280]	; (8003908 <HAL_GPIO_Init+0x130>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02b      	beq.n	800384a <HAL_GPIO_Init+0x72>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a45      	ldr	r2, [pc, #276]	; (800390c <HAL_GPIO_Init+0x134>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d027      	beq.n	800384a <HAL_GPIO_Init+0x72>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a44      	ldr	r2, [pc, #272]	; (8003910 <HAL_GPIO_Init+0x138>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d023      	beq.n	800384a <HAL_GPIO_Init+0x72>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a43      	ldr	r2, [pc, #268]	; (8003914 <HAL_GPIO_Init+0x13c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01f      	beq.n	800384a <HAL_GPIO_Init+0x72>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a42      	ldr	r2, [pc, #264]	; (8003918 <HAL_GPIO_Init+0x140>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01b      	beq.n	800384a <HAL_GPIO_Init+0x72>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a41      	ldr	r2, [pc, #260]	; (800391c <HAL_GPIO_Init+0x144>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d017      	beq.n	800384a <HAL_GPIO_Init+0x72>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a40      	ldr	r2, [pc, #256]	; (8003920 <HAL_GPIO_Init+0x148>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_GPIO_Init+0x72>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a3f      	ldr	r2, [pc, #252]	; (8003924 <HAL_GPIO_Init+0x14c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00f      	beq.n	800384a <HAL_GPIO_Init+0x72>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a3e      	ldr	r2, [pc, #248]	; (8003928 <HAL_GPIO_Init+0x150>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00b      	beq.n	800384a <HAL_GPIO_Init+0x72>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a3d      	ldr	r2, [pc, #244]	; (800392c <HAL_GPIO_Init+0x154>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <HAL_GPIO_Init+0x72>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a3c      	ldr	r2, [pc, #240]	; (8003930 <HAL_GPIO_Init+0x158>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x72>
 8003842:	21bb      	movs	r1, #187	; 0xbb
 8003844:	483b      	ldr	r0, [pc, #236]	; (8003934 <HAL_GPIO_Init+0x15c>)
 8003846:	f7fd facc 	bl	8000de2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_GPIO_Init+0x88>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_GPIO_Init+0x160>)
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x90>
 8003860:	21bc      	movs	r1, #188	; 0xbc
 8003862:	4834      	ldr	r0, [pc, #208]	; (8003934 <HAL_GPIO_Init+0x15c>)
 8003864:	f7fd fabd 	bl	8000de2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d035      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d031      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b11      	cmp	r3, #17
 800387e:	d02d      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d029      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b12      	cmp	r3, #18
 800388e:	d025      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a29      	ldr	r2, [pc, #164]	; (800393c <HAL_GPIO_Init+0x164>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d020      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_GPIO_Init+0x168>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d01b      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <HAL_GPIO_Init+0x16c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d016      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a25      	ldr	r2, [pc, #148]	; (8003948 <HAL_GPIO_Init+0x170>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d011      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <HAL_GPIO_Init+0x174>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00c      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_GPIO_Init+0x178>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x104>
 80038d4:	21bd      	movs	r1, #189	; 0xbd
 80038d6:	4817      	ldr	r0, [pc, #92]	; (8003934 <HAL_GPIO_Init+0x15c>)
 80038d8:	f7fd fa83 	bl	8000de2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 821a 	beq.w	8003d1a <HAL_GPIO_Init+0x542>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	f000 8215 	beq.w	8003d1a <HAL_GPIO_Init+0x542>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	f000 8210 	beq.w	8003d1a <HAL_GPIO_Init+0x542>
 80038fa:	21be      	movs	r1, #190	; 0xbe
 80038fc:	480d      	ldr	r0, [pc, #52]	; (8003934 <HAL_GPIO_Init+0x15c>)
 80038fe:	f7fd fa70 	bl	8000de2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003902:	e20a      	b.n	8003d1a <HAL_GPIO_Init+0x542>
 8003904:	58000080 	.word	0x58000080
 8003908:	58020000 	.word	0x58020000
 800390c:	58020400 	.word	0x58020400
 8003910:	58020800 	.word	0x58020800
 8003914:	58020c00 	.word	0x58020c00
 8003918:	58021000 	.word	0x58021000
 800391c:	58021400 	.word	0x58021400
 8003920:	58021800 	.word	0x58021800
 8003924:	58021c00 	.word	0x58021c00
 8003928:	58022000 	.word	0x58022000
 800392c:	58022400 	.word	0x58022400
 8003930:	58022800 	.word	0x58022800
 8003934:	0800b630 	.word	0x0800b630
 8003938:	ffff0000 	.word	0xffff0000
 800393c:	11110000 	.word	0x11110000
 8003940:	11210000 	.word	0x11210000
 8003944:	11310000 	.word	0x11310000
 8003948:	11120000 	.word	0x11120000
 800394c:	11220000 	.word	0x11220000
 8003950:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2101      	movs	r1, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 81d4 	beq.w	8003d14 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x1a4>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b12      	cmp	r3, #18
 800397a:	d15b      	bne.n	8003a34 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4aa2      	ldr	r2, [pc, #648]	; (8003c08 <HAL_GPIO_Init+0x430>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02b      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4aa1      	ldr	r2, [pc, #644]	; (8003c0c <HAL_GPIO_Init+0x434>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4aa0      	ldr	r2, [pc, #640]	; (8003c10 <HAL_GPIO_Init+0x438>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d023      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a9f      	ldr	r2, [pc, #636]	; (8003c14 <HAL_GPIO_Init+0x43c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d01f      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a9e      	ldr	r2, [pc, #632]	; (8003c18 <HAL_GPIO_Init+0x440>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01b      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a9d      	ldr	r2, [pc, #628]	; (8003c1c <HAL_GPIO_Init+0x444>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d017      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a9c      	ldr	r2, [pc, #624]	; (8003c20 <HAL_GPIO_Init+0x448>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a9b      	ldr	r2, [pc, #620]	; (8003c24 <HAL_GPIO_Init+0x44c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00f      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a9a      	ldr	r2, [pc, #616]	; (8003c28 <HAL_GPIO_Init+0x450>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00b      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a99      	ldr	r2, [pc, #612]	; (8003c2c <HAL_GPIO_Init+0x454>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a98      	ldr	r2, [pc, #608]	; (8003c30 <HAL_GPIO_Init+0x458>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x204>
 80039d4:	21cd      	movs	r1, #205	; 0xcd
 80039d6:	4897      	ldr	r0, [pc, #604]	; (8003c34 <HAL_GPIO_Init+0x45c>)
 80039d8:	f7fd fa03 	bl	8000de2 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	d903      	bls.n	80039ec <HAL_GPIO_Init+0x214>
 80039e4:	21ce      	movs	r1, #206	; 0xce
 80039e6:	4893      	ldr	r0, [pc, #588]	; (8003c34 <HAL_GPIO_Init+0x45c>)
 80039e8:	f7fd f9fb 	bl	8000de2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	08da      	lsrs	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3208      	adds	r2, #8
 80039f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	220f      	movs	r2, #15
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	08da      	lsrs	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3208      	adds	r2, #8
 8003a2e:	69b9      	ldr	r1, [r7, #24]
 8003a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0203 	and.w	r2, r3, #3
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d00b      	beq.n	8003a88 <HAL_GPIO_Init+0x2b0>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d007      	beq.n	8003a88 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a7c:	2b11      	cmp	r3, #17
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b12      	cmp	r3, #18
 8003a86:	d144      	bne.n	8003b12 <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00f      	beq.n	8003ab0 <HAL_GPIO_Init+0x2d8>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d00b      	beq.n	8003ab0 <HAL_GPIO_Init+0x2d8>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d007      	beq.n	8003ab0 <HAL_GPIO_Init+0x2d8>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x2d8>
 8003aa8:	21e2      	movs	r1, #226	; 0xe2
 8003aaa:	4862      	ldr	r0, [pc, #392]	; (8003c34 <HAL_GPIO_Init+0x45c>)
 8003aac:	f7fd f999 	bl	8000de2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f003 0201 	and.w	r2, r3, #1
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80e2 	beq.w	8003d14 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b50:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <HAL_GPIO_Init+0x460>)
 8003b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b56:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <HAL_GPIO_Init+0x460>)
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b60:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <HAL_GPIO_Init+0x460>)
 8003b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6e:	4a33      	ldr	r2, [pc, #204]	; (8003c3c <HAL_GPIO_Init+0x464>)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	3302      	adds	r3, #2
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	220f      	movs	r2, #15
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <HAL_GPIO_Init+0x430>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d054      	beq.n	8003c44 <HAL_GPIO_Init+0x46c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_GPIO_Init+0x434>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d04e      	beq.n	8003c40 <HAL_GPIO_Init+0x468>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_GPIO_Init+0x438>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d02b      	beq.n	8003c02 <HAL_GPIO_Init+0x42a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_GPIO_Init+0x43c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d025      	beq.n	8003bfe <HAL_GPIO_Init+0x426>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <HAL_GPIO_Init+0x440>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01f      	beq.n	8003bfa <HAL_GPIO_Init+0x422>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <HAL_GPIO_Init+0x444>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d019      	beq.n	8003bf6 <HAL_GPIO_Init+0x41e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_GPIO_Init+0x448>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_GPIO_Init+0x41a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <HAL_GPIO_Init+0x44c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00d      	beq.n	8003bee <HAL_GPIO_Init+0x416>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <HAL_GPIO_Init+0x450>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <HAL_GPIO_Init+0x412>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <HAL_GPIO_Init+0x454>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_GPIO_Init+0x40e>
 8003be2:	2309      	movs	r3, #9
 8003be4:	e02f      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003be6:	230a      	movs	r3, #10
 8003be8:	e02d      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003bea:	2308      	movs	r3, #8
 8003bec:	e02b      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003bee:	2307      	movs	r3, #7
 8003bf0:	e029      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003bf2:	2306      	movs	r3, #6
 8003bf4:	e027      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003bf6:	2305      	movs	r3, #5
 8003bf8:	e025      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	e023      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e021      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e01f      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003c06:	bf00      	nop
 8003c08:	58020000 	.word	0x58020000
 8003c0c:	58020400 	.word	0x58020400
 8003c10:	58020800 	.word	0x58020800
 8003c14:	58020c00 	.word	0x58020c00
 8003c18:	58021000 	.word	0x58021000
 8003c1c:	58021400 	.word	0x58021400
 8003c20:	58021800 	.word	0x58021800
 8003c24:	58021c00 	.word	0x58021c00
 8003c28:	58022000 	.word	0x58022000
 8003c2c:	58022400 	.word	0x58022400
 8003c30:	58022800 	.word	0x58022800
 8003c34:	0800b630 	.word	0x0800b630
 8003c38:	58024400 	.word	0x58024400
 8003c3c:	58000400 	.word	0x58000400
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_GPIO_Init+0x46e>
 8003c44:	2300      	movs	r3, #0
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	f002 0203 	and.w	r2, r2, #3
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	4093      	lsls	r3, r2
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c56:	4937      	ldr	r1, [pc, #220]	; (8003d34 <HAL_GPIO_Init+0x55c>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f ae15 	bne.w	8003954 <HAL_GPIO_Init+0x17c>
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	58000400 	.word	0x58000400

08003d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
 8003d44:	4613      	mov	r3, r2
 8003d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_GPIO_WritePin+0x20>
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <HAL_GPIO_WritePin+0x60>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <HAL_GPIO_WritePin+0x2a>
 8003d58:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003d5c:	480f      	ldr	r0, [pc, #60]	; (8003d9c <HAL_GPIO_WritePin+0x64>)
 8003d5e:	f7fd f840 	bl	8000de2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003d62:	787b      	ldrb	r3, [r7, #1]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <HAL_GPIO_WritePin+0x40>
 8003d68:	787b      	ldrb	r3, [r7, #1]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d004      	beq.n	8003d78 <HAL_GPIO_WritePin+0x40>
 8003d6e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003d72:	480a      	ldr	r0, [pc, #40]	; (8003d9c <HAL_GPIO_WritePin+0x64>)
 8003d74:	f7fd f835 	bl	8000de2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003d78:	787b      	ldrb	r3, [r7, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d84:	e003      	b.n	8003d8e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	041a      	lsls	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	619a      	str	r2, [r3, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	ffff0000 	.word	0xffff0000
 8003d9c:	0800b630 	.word	0x0800b630

08003da0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <HAL_GPIO_TogglePin+0x1c>
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <HAL_GPIO_TogglePin+0x4c>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_GPIO_TogglePin+0x26>
 8003dbc:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003dc0:	480b      	ldr	r0, [pc, #44]	; (8003df0 <HAL_GPIO_TogglePin+0x50>)
 8003dc2:	f7fd f80e 	bl	8000de2 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	401a      	ands	r2, r3
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d104      	bne.n	8003dde <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	041a      	lsls	r2, r3, #16
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003ddc:	e002      	b.n	8003de4 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	619a      	str	r2, [r3, #24]
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	ffff0000 	.word	0xffff0000
 8003df0:	0800b630 	.word	0x0800b630

08003df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e0a:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc ffc4 	bl	8000da0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	58000080 	.word	0x58000080

08003e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e107      	b.n	8004046 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a85      	ldr	r2, [pc, #532]	; (8004050 <HAL_I2C_Init+0x22c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <HAL_I2C_Init+0x44>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a83      	ldr	r2, [pc, #524]	; (8004054 <HAL_I2C_Init+0x230>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00e      	beq.n	8003e68 <HAL_I2C_Init+0x44>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a82      	ldr	r2, [pc, #520]	; (8004058 <HAL_I2C_Init+0x234>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_I2C_Init+0x44>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a80      	ldr	r2, [pc, #512]	; (800405c <HAL_I2C_Init+0x238>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <HAL_I2C_Init+0x44>
 8003e5e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003e62:	487f      	ldr	r0, [pc, #508]	; (8004060 <HAL_I2C_Init+0x23c>)
 8003e64:	f7fc ffbd 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d304      	bcc.n	8003e7c <HAL_I2C_Init+0x58>
 8003e72:	f240 11df 	movw	r1, #479	; 0x1df
 8003e76:	487a      	ldr	r0, [pc, #488]	; (8004060 <HAL_I2C_Init+0x23c>)
 8003e78:	f7fc ffb3 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d008      	beq.n	8003e96 <HAL_I2C_Init+0x72>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d004      	beq.n	8003e96 <HAL_I2C_Init+0x72>
 8003e8c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003e90:	4873      	ldr	r0, [pc, #460]	; (8004060 <HAL_I2C_Init+0x23c>)
 8003e92:	f7fc ffa6 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_I2C_Init+0x8e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea6:	d004      	beq.n	8003eb2 <HAL_I2C_Init+0x8e>
 8003ea8:	f240 11e1 	movw	r1, #481	; 0x1e1
 8003eac:	486c      	ldr	r0, [pc, #432]	; (8004060 <HAL_I2C_Init+0x23c>)
 8003eae:	f7fc ff98 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	2bff      	cmp	r3, #255	; 0xff
 8003eb8:	d904      	bls.n	8003ec4 <HAL_I2C_Init+0xa0>
 8003eba:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003ebe:	4868      	ldr	r0, [pc, #416]	; (8004060 <HAL_I2C_Init+0x23c>)
 8003ec0:	f7fc ff8f 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_I2C_Init+0xea>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d01c      	beq.n	8003f0e <HAL_I2C_Init+0xea>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d018      	beq.n	8003f0e <HAL_I2C_Init+0xea>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d014      	beq.n	8003f0e <HAL_I2C_Init+0xea>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d010      	beq.n	8003f0e <HAL_I2C_Init+0xea>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d00c      	beq.n	8003f0e <HAL_I2C_Init+0xea>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b06      	cmp	r3, #6
 8003efa:	d008      	beq.n	8003f0e <HAL_I2C_Init+0xea>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b07      	cmp	r3, #7
 8003f02:	d004      	beq.n	8003f0e <HAL_I2C_Init+0xea>
 8003f04:	f240 11e3 	movw	r1, #483	; 0x1e3
 8003f08:	4855      	ldr	r0, [pc, #340]	; (8004060 <HAL_I2C_Init+0x23c>)
 8003f0a:	f7fc ff6a 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_I2C_Init+0x106>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f1e:	d004      	beq.n	8003f2a <HAL_I2C_Init+0x106>
 8003f20:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8003f24:	484e      	ldr	r0, [pc, #312]	; (8004060 <HAL_I2C_Init+0x23c>)
 8003f26:	f7fc ff5c 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_I2C_Init+0x122>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f3a:	d004      	beq.n	8003f46 <HAL_I2C_Init+0x122>
 8003f3c:	f240 11e5 	movw	r1, #485	; 0x1e5
 8003f40:	4847      	ldr	r0, [pc, #284]	; (8004060 <HAL_I2C_Init+0x23c>)
 8003f42:	f7fc ff4e 	bl	8000de2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fdc4 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	e006      	b.n	8003fbc <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d104      	bne.n	8003fce <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_I2C_Init+0x240>)
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	ea42 0103 	orr.w	r1, r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69d9      	ldr	r1, [r3, #28]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40005400 	.word	0x40005400
 8004054:	40005800 	.word	0x40005800
 8004058:	40005c00 	.word	0x40005c00
 800405c:	58001c00 	.word	0x58001c00
 8004060:	0800b66c 	.word	0x0800b66c
 8004064:	02008000 	.word	0x02008000

08004068 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a32      	ldr	r2, [pc, #200]	; (8004140 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d012      	beq.n	80040a2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a30      	ldr	r2, [pc, #192]	; (8004144 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00d      	beq.n	80040a2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d008      	beq.n	80040a2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2d      	ldr	r2, [pc, #180]	; (800414c <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800409a:	2164      	movs	r1, #100	; 0x64
 800409c:	482c      	ldr	r0, [pc, #176]	; (8004150 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800409e:	f7fc fea0 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d003      	beq.n	80040b8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80040b0:	2165      	movs	r1, #101	; 0x65
 80040b2:	4827      	ldr	r0, [pc, #156]	; (8004150 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80040b4:	f7fc fe95 	bl	8000de2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d138      	bne.n	8004136 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e032      	b.n	8004138 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2224      	movs	r2, #36	; 0x24
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004100:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6819      	ldr	r1, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004136:	2302      	movs	r3, #2
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40005400 	.word	0x40005400
 8004144:	40005800 	.word	0x40005800
 8004148:	40005c00 	.word	0x40005c00
 800414c:	58001c00 	.word	0x58001c00
 8004150:	0800b6a4 	.word	0x0800b6a4

08004154 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a31      	ldr	r2, [pc, #196]	; (8004228 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d012      	beq.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2f      	ldr	r2, [pc, #188]	; (800422c <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00d      	beq.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2e      	ldr	r2, [pc, #184]	; (8004230 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d008      	beq.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a2c      	ldr	r2, [pc, #176]	; (8004234 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004186:	2192      	movs	r1, #146	; 0x92
 8004188:	482b      	ldr	r0, [pc, #172]	; (8004238 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800418a:	f7fc fe2a 	bl	8000de2 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b0f      	cmp	r3, #15
 8004192:	d903      	bls.n	800419c <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8004194:	2193      	movs	r1, #147	; 0x93
 8004196:	4828      	ldr	r0, [pc, #160]	; (8004238 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8004198:	f7fc fe23 	bl	8000de2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d139      	bne.n	800421c <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e033      	b.n	800421e <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2224      	movs	r2, #36	; 0x24
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	e000      	b.n	800421e <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40005400 	.word	0x40005400
 800422c:	40005800 	.word	0x40005800
 8004230:	40005c00 	.word	0x40005c00
 8004234:	58001c00 	.word	0x58001c00
 8004238:	0800b6a4 	.word	0x0800b6a4

0800423c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e070      	b.n	8004330 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fc9e 	bl	8000ba4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800429e:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_JPEG_Init+0xfc>)
 80042d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_JPEG_Init+0x100>)
 80042da:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fae9 	bl	80048c0 <JPEG_Set_HuffEnc_Mem>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e018      	b.n	8004330 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	0800ba08 	.word	0x0800ba08
 800433c:	0800ba48 	.word	0x0800ba48

08004340 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004340:	b480      	push	{r7}
 8004342:	b08b      	sub	sp, #44	; 0x2c
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e020      	b.n	800439a <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	4413      	add	r3, r2
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d90f      	bls.n	800438e <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e055      	b.n	800441e <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	440b      	add	r3, r1
 800437c:	3201      	adds	r2, #1
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
      p++;
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	3301      	adds	r3, #1
 8004386:	623b      	str	r3, [r7, #32]
      i--;
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	3b01      	subs	r3, #1
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ee      	bne.n	8004372 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	3301      	adds	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2b0f      	cmp	r3, #15
 800439e:	d9db      	bls.n	8004358 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	4413      	add	r3, r2
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	617b      	str	r3, [r7, #20]
  p = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80043be:	e027      	b.n	8004410 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4413      	add	r3, r2
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	601a      	str	r2, [r3, #0]
      p++;
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	3301      	adds	r3, #1
 80043d0:	623b      	str	r3, [r7, #32]
      code++;
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	4413      	add	r3, r2
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d0eb      	beq.n	80043c0 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b1f      	cmp	r3, #31
 80043ec:	d901      	bls.n	80043f2 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e015      	b.n	800441e <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80043f2:	2201      	movs	r2, #1
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d301      	bcc.n	8004404 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e00c      	b.n	800441e <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	61bb      	str	r3, [r7, #24]
    si++;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3301      	adds	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	4413      	add	r3, r2
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1dd      	bne.n	80043d8 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	372c      	adds	r7, #44	; 0x2c
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8004430:	af00      	add	r7, sp, #0
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	6018      	str	r0, [r3, #0]
 8004436:	463b      	mov	r3, r7
 8004438:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800443a:	1d3b      	adds	r3, r7, #4
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	f107 020c 	add.w	r2, r7, #12
 8004446:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800444a:	f7ff ff79 	bl	8004340 <JPEG_Bits_To_SizeCodes>
 800444e:	4603      	mov	r3, r0
 8004450:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8004454:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 800445c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004460:	e066      	b.n	8004530 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8004468:	e05a      	b.n	8004520 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004472:	4413      	add	r3, r2
 8004474:	3310      	adds	r3, #16
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800447c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004480:	2b00      	cmp	r3, #0
 8004482:	d103      	bne.n	800448c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 8004484:	23a0      	movs	r3, #160	; 0xa0
 8004486:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800448a:	e021      	b.n	80044d0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800448c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004490:	2bf0      	cmp	r3, #240	; 0xf0
 8004492:	d103      	bne.n	800449c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 8004494:	23a1      	movs	r3, #161	; 0xa1
 8004496:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800449a:	e019      	b.n	80044d0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800449c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 80044aa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80044b6:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	461a      	mov	r2, r3
 80044c4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80044c8:	4413      	add	r3, r2
 80044ca:	3b01      	subs	r3, #1
 80044cc:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80044d0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80044d4:	2ba1      	cmp	r3, #161	; 0xa1
 80044d6:	d901      	bls.n	80044dc <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80044d8:	2301      	movs	r3, #1
 80044da:	e029      	b.n	8004530 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80044dc:	f107 030c 	add.w	r3, r7, #12
 80044e0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80044e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044e8:	463b      	mov	r3, r7
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80044f0:	3328      	adds	r3, #40	; 0x28
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80044f8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80044fc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004500:	4413      	add	r3, r2
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	3b01      	subs	r3, #1
 8004506:	b2d9      	uxtb	r1, r3
 8004508:	463b      	mov	r3, r7
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004510:	4413      	add	r3, r2
 8004512:	460a      	mov	r2, r1
 8004514:	701a      	strb	r2, [r3, #0]
      k++;
 8004516:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800451a:	3301      	adds	r3, #1
 800451c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800452a:	429a      	cmp	r2, r3
 800452c:	d39d      	bcc.n	800446a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8004540:	af00      	add	r7, sp, #0
 8004542:	1d3b      	adds	r3, r7, #4
 8004544:	6018      	str	r0, [r3, #0]
 8004546:	463b      	mov	r3, r7
 8004548:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004552:	f107 0208 	add.w	r2, r7, #8
 8004556:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800455a:	f7ff fef1 	bl	8004340 <JPEG_Bits_To_SizeCodes>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8004564:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 800456c:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004570:	e03b      	b.n	80045ea <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8004578:	e030      	b.n	80045dc <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800457a:	1d3b      	adds	r3, r7, #4
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004582:	4413      	add	r3, r2
 8004584:	3310      	adds	r3, #16
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800458c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004590:	2b0b      	cmp	r3, #11
 8004592:	d901      	bls.n	8004598 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004594:	2301      	movs	r3, #1
 8004596:	e028      	b.n	80045ea <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004598:	f107 0308 	add.w	r3, r7, #8
 800459c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80045a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045a4:	463b      	mov	r3, r7
 80045a6:	6819      	ldr	r1, [r3, #0]
 80045a8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80045ac:	3302      	adds	r3, #2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80045b4:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80045b8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80045bc:	4413      	add	r3, r2
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b2d9      	uxtb	r1, r3
 80045c4:	463b      	mov	r3, r7
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80045cc:	4413      	add	r3, r2
 80045ce:	460a      	mov	r2, r1
 80045d0:	701a      	strb	r2, [r3, #0]
      k++;
 80045d2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80045d6:	3301      	adds	r3, #1
 80045d8:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 80045dc:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80045e0:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3c8      	bcc.n	800457a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b09a      	sub	sp, #104	; 0x68
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d106      	bne.n	800461c <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004616:	3318      	adds	r3, #24
 8004618:	663b      	str	r3, [r7, #96]	; 0x60
 800461a:	e00f      	b.n	800463c <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d106      	bne.n	8004638 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004632:	3318      	adds	r3, #24
 8004634:	663b      	str	r3, [r7, #96]	; 0x60
 8004636:	e001      	b.n	800463c <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e05b      	b.n	80046f4 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d057      	beq.n	80046f2 <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	68b8      	ldr	r0, [r7, #8]
 800464a:	f7ff ff76 	bl	800453a <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800465c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004660:	e048      	b.n	80046f4 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 8004662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004664:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004668:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800466c:	601a      	str	r2, [r3, #0]
    addressDef++;
 800466e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004670:	3304      	adds	r3, #4
 8004672:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004676:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800467a:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800467c:	230c      	movs	r3, #12
 800467e:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8004680:	e034      	b.n	80046ec <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8004682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004684:	3b01      	subs	r3, #1
 8004686:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800468a:	3b04      	subs	r3, #4
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800468e:	f107 0214 	add.w	r2, r7, #20
 8004692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004694:	4413      	add	r3, r2
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800469e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046a0:	3302      	adds	r3, #2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80046a8:	440b      	add	r3, r1
 80046aa:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	4313      	orrs	r3, r2
 80046b2:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 80046b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046b6:	3b01      	subs	r3, #1
 80046b8:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80046ba:	f107 0214 	add.w	r2, r7, #20
 80046be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c0:	4413      	add	r3, r2
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80046ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046cc:	3302      	adds	r3, #2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80046d4:	440b      	add	r3, r1
 80046d6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	4313      	orrs	r3, r2
 80046de:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80046e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e2:	041a      	lsls	r2, r3, #16
 80046e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e6:	431a      	orrs	r2, r3
 80046e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ea:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80046ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d8c7      	bhi.n	8004682 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3768      	adds	r7, #104	; 0x68
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8004702:	af00      	add	r7, sp, #0
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	6018      	str	r0, [r3, #0]
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	6019      	str	r1, [r3, #0]
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004714:	f107 030c 	add.w	r3, r7, #12
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	1d3a      	adds	r2, r7, #4
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d10a      	bne.n	800473e <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004728:	f107 030c 	add.w	r3, r7, #12
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004734:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004738:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800473c:	e016      	b.n	800476c <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800473e:	f107 030c 	add.w	r3, r7, #12
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800474a:	1d3a      	adds	r2, r7, #4
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d10a      	bne.n	8004768 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004752:	f107 030c 	add.w	r3, r7, #12
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800475e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004762:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004766:	e001      	b.n	800476c <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e09c      	b.n	80048a6 <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8096 	beq.w	80048a4 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004778:	f107 0214 	add.w	r2, r7, #20
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	4611      	mov	r1, r2
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	f7ff fe51 	bl	800442a <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 800478e:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8004796:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800479a:	e084      	b.n	80048a6 <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800479c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80047a0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80047aa:	e00e      	b.n	80047ca <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 80047ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047b0:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80047b4:	601a      	str	r2, [r3, #0]
      addressDef++;
 80047b6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047ba:	3304      	adds	r3, #4
 80047bc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 80047c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80047c4:	3301      	adds	r3, #1
 80047c6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80047ca:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d9ec      	bls.n	80047ac <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 80047d2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047d6:	4a36      	ldr	r2, [pc, #216]	; (80048b0 <JPEG_Set_HuffAC_Mem+0x1b4>)
 80047d8:	601a      	str	r2, [r3, #0]
    addressDef++;
 80047da:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047de:	3304      	adds	r3, #4
 80047e0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 80047e4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047e8:	4a32      	ldr	r2, [pc, #200]	; (80048b4 <JPEG_Set_HuffAC_Mem+0x1b8>)
 80047ea:	601a      	str	r2, [r3, #0]
    addressDef++;
 80047ec:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047f0:	3304      	adds	r3, #4
 80047f2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 80047f6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047fa:	4a2f      	ldr	r2, [pc, #188]	; (80048b8 <JPEG_Set_HuffAC_Mem+0x1bc>)
 80047fc:	601a      	str	r2, [r3, #0]
    addressDef++;
 80047fe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004802:	3304      	adds	r3, #4
 8004804:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004808:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800480c:	4a2b      	ldr	r2, [pc, #172]	; (80048bc <JPEG_Set_HuffAC_Mem+0x1c0>)
 800480e:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004810:	23a2      	movs	r3, #162	; 0xa2
 8004812:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8004816:	e041      	b.n	800489c <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8004818:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800481c:	3b01      	subs	r3, #1
 800481e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8004822:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004826:	3b04      	subs	r3, #4
 8004828:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800482c:	f107 0214 	add.w	r2, r7, #20
 8004830:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004834:	4413      	add	r3, r2
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800483e:	f107 0114 	add.w	r1, r7, #20
 8004842:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004846:	3328      	adds	r3, #40	; 0x28
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004856:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800485a:	3b01      	subs	r3, #1
 800485c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004860:	f107 0214 	add.w	r2, r7, #20
 8004864:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004868:	4413      	add	r3, r2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004872:	f107 0114 	add.w	r1, r7, #20
 8004876:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800487a:	3328      	adds	r3, #40	; 0x28
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800488a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800488e:	041a      	lsls	r2, r3, #16
 8004890:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8004894:	431a      	orrs	r2, r3
 8004896:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800489a:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800489c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d8b9      	bhi.n	8004818 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	0fd10fd0 	.word	0x0fd10fd0
 80048b4:	0fd30fd2 	.word	0x0fd30fd2
 80048b8:	0fd50fd4 	.word	0x0fd50fd4
 80048bc:	0fd70fd6 	.word	0x0fd70fd6

080048c0 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f84d 	bl	8004968 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80048d6:	461a      	mov	r2, r3
 80048d8:	491f      	ldr	r1, [pc, #124]	; (8004958 <JPEG_Set_HuffEnc_Mem+0x98>)
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ff0e 	bl	80046fc <JPEG_Set_HuffAC_Mem>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	e030      	b.n	8004950 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80048f6:	461a      	mov	r2, r3
 80048f8:	4918      	ldr	r1, [pc, #96]	; (800495c <JPEG_Set_HuffEnc_Mem+0x9c>)
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fefe 	bl	80046fc <JPEG_Set_HuffAC_Mem>
 8004900:	4603      	mov	r3, r0
 8004902:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	e020      	b.n	8004950 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004916:	461a      	mov	r2, r3
 8004918:	4911      	ldr	r1, [pc, #68]	; (8004960 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fe6a 	bl	80045f4 <JPEG_Set_HuffDC_Mem>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	e010      	b.n	8004950 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004936:	461a      	mov	r2, r3
 8004938:	490a      	ldr	r1, [pc, #40]	; (8004964 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fe5a 	bl	80045f4 <JPEG_Set_HuffDC_Mem>
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	e000      	b.n	8004950 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	0800b8a0 	.word	0x0800b8a0
 800495c:	0800b954 	.word	0x0800b954
 8004960:	0800b868 	.word	0x0800b868
 8004964:	0800b884 	.word	0x0800b884

08004968 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004968:	b480      	push	{r7}
 800496a:	b08b      	sub	sp, #44	; 0x2c
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8004970:	4b80      	ldr	r3, [pc, #512]	; (8004b74 <JPEG_Set_Huff_DHTMem+0x20c>)
 8004972:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004974:	4b80      	ldr	r3, [pc, #512]	; (8004b78 <JPEG_Set_Huff_DHTMem+0x210>)
 8004976:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004978:	4b80      	ldr	r3, [pc, #512]	; (8004b7c <JPEG_Set_Huff_DHTMem+0x214>)
 800497a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800497c:	4b80      	ldr	r3, [pc, #512]	; (8004b80 <JPEG_Set_Huff_DHTMem+0x218>)
 800497e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004988:	330c      	adds	r3, #12
 800498a:	623b      	str	r3, [r7, #32]
  index = 16;
 800498c:	2310      	movs	r3, #16
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004990:	e01d      	b.n	80049ce <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	3b01      	subs	r3, #1
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	5cd3      	ldrb	r3, [r2, r3]
 800499a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	3b02      	subs	r3, #2
 80049a0:	6979      	ldr	r1, [r7, #20]
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80049a6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	3b03      	subs	r3, #3
 80049ac:	6979      	ldr	r1, [r7, #20]
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80049b2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	3a04      	subs	r2, #4
 80049b8:	6979      	ldr	r1, [r7, #20]
 80049ba:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80049bc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	601a      	str	r2, [r3, #0]
    address--;
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	3b04      	subs	r3, #4
 80049c6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	3b04      	subs	r3, #4
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d8de      	bhi.n	8004992 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80049dc:	3318      	adds	r3, #24
 80049de:	623b      	str	r3, [r7, #32]
  index = 12;
 80049e0:	230c      	movs	r3, #12
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80049e4:	e021      	b.n	8004a2a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	3b01      	subs	r3, #1
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4413      	add	r3, r2
 80049ee:	7c1b      	ldrb	r3, [r3, #16]
 80049f0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	3b02      	subs	r3, #2
 80049f6:	6979      	ldr	r1, [r7, #20]
 80049f8:	440b      	add	r3, r1
 80049fa:	7c1b      	ldrb	r3, [r3, #16]
 80049fc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80049fe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	3b03      	subs	r3, #3
 8004a04:	6979      	ldr	r1, [r7, #20]
 8004a06:	440b      	add	r3, r1
 8004a08:	7c1b      	ldrb	r3, [r3, #16]
 8004a0a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004a0c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a10:	3a04      	subs	r2, #4
 8004a12:	6979      	ldr	r1, [r7, #20]
 8004a14:	440a      	add	r2, r1
 8004a16:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004a18:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	601a      	str	r2, [r3, #0]
    address--;
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	3b04      	subs	r3, #4
 8004a22:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	3b04      	subs	r3, #4
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d8da      	bhi.n	80049e6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a38:	3328      	adds	r3, #40	; 0x28
 8004a3a:	623b      	str	r3, [r7, #32]
  index = 16;
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a40:	e01d      	b.n	8004a7e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	3b01      	subs	r3, #1
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	5cd3      	ldrb	r3, [r2, r3]
 8004a4a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	3b02      	subs	r3, #2
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004a56:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	3b03      	subs	r3, #3
 8004a5c:	69f9      	ldr	r1, [r7, #28]
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004a62:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	3a04      	subs	r2, #4
 8004a68:	69f9      	ldr	r1, [r7, #28]
 8004a6a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004a6c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	601a      	str	r2, [r3, #0]
    address--;
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	3b04      	subs	r3, #4
 8004a76:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	3b04      	subs	r3, #4
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d8de      	bhi.n	8004a42 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a8c:	33cc      	adds	r3, #204	; 0xcc
 8004a8e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004aa0:	021a      	lsls	r2, r3, #8
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	3b04      	subs	r3, #4
 8004aba:	623b      	str	r3, [r7, #32]
  index = 160;
 8004abc:	23a0      	movs	r3, #160	; 0xa0
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ac0:	e021      	b.n	8004b06 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	7c1b      	ldrb	r3, [r3, #16]
 8004acc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	3b02      	subs	r3, #2
 8004ad2:	69f9      	ldr	r1, [r7, #28]
 8004ad4:	440b      	add	r3, r1
 8004ad6:	7c1b      	ldrb	r3, [r3, #16]
 8004ad8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004ada:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	3b03      	subs	r3, #3
 8004ae0:	69f9      	ldr	r1, [r7, #28]
 8004ae2:	440b      	add	r3, r1
 8004ae4:	7c1b      	ldrb	r3, [r3, #16]
 8004ae6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004ae8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aec:	3a04      	subs	r2, #4
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	440a      	add	r2, r1
 8004af2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004af4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	601a      	str	r2, [r3, #0]
    address--;
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	3b04      	subs	r3, #4
 8004afe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	3b04      	subs	r3, #4
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d8da      	bhi.n	8004ac2 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004b14:	33cc      	adds	r3, #204	; 0xcc
 8004b16:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	061a      	lsls	r2, r3, #24
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004b42:	33dc      	adds	r3, #220	; 0xdc
 8004b44:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	7bdb      	ldrb	r3, [r3, #15]
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	7b92      	ldrb	r2, [r2, #14]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	3b04      	subs	r3, #4
 8004b6c:	623b      	str	r3, [r7, #32]
  index = 12;
 8004b6e:	230c      	movs	r3, #12
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004b72:	e027      	b.n	8004bc4 <JPEG_Set_Huff_DHTMem+0x25c>
 8004b74:	0800b8a0 	.word	0x0800b8a0
 8004b78:	0800b954 	.word	0x0800b954
 8004b7c:	0800b868 	.word	0x0800b868
 8004b80:	0800b884 	.word	0x0800b884
 8004b84:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004b92:	6939      	ldr	r1, [r7, #16]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	440b      	add	r3, r1
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b9c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	6939      	ldr	r1, [r7, #16]
 8004ba4:	5ccb      	ldrb	r3, [r1, r3]
 8004ba6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004ba8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8004baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bac:	3a02      	subs	r2, #2
 8004bae:	6939      	ldr	r1, [r7, #16]
 8004bb0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004bb2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	601a      	str	r2, [r3, #0]
    address--;
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	3b04      	subs	r3, #4
 8004bbc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d8de      	bhi.n	8004b88 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004bd2:	33dc      	adds	r3, #220	; 0xdc
 8004bd4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	7c5b      	ldrb	r3, [r3, #17]
 8004be2:	061a      	lsls	r2, r3, #24
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	7c1b      	ldrb	r3, [r3, #16]
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c00:	33e8      	adds	r3, #232	; 0xe8
 8004c02:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b6d      	ldr	r3, [pc, #436]	; (8004dc0 <JPEG_Set_Huff_DHTMem+0x458>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	7edb      	ldrb	r3, [r3, #27]
 8004c12:	021a      	lsls	r2, r3, #8
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	7e92      	ldrb	r2, [r2, #26]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	623b      	str	r3, [r7, #32]
  index = 8;
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004c30:	e021      	b.n	8004c76 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	3301      	adds	r3, #1
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4413      	add	r3, r2
 8004c3a:	7c1b      	ldrb	r3, [r3, #16]
 8004c3c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004c3e:	6939      	ldr	r1, [r7, #16]
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	440b      	add	r3, r1
 8004c44:	3310      	adds	r3, #16
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004c4a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	6939      	ldr	r1, [r7, #16]
 8004c52:	440b      	add	r3, r1
 8004c54:	7c1b      	ldrb	r3, [r3, #16]
 8004c56:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004c58:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5c:	3a02      	subs	r2, #2
 8004c5e:	6939      	ldr	r1, [r7, #16]
 8004c60:	440a      	add	r2, r1
 8004c62:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004c64:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	601a      	str	r2, [r3, #0]
    address--;
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	3b04      	subs	r3, #4
 8004c6e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	3b04      	subs	r3, #4
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d8da      	bhi.n	8004c32 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c84:	33e8      	adds	r3, #232	; 0xe8
 8004c86:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	061a      	lsls	r2, r3, #24
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	041b      	lsls	r3, r3, #16
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004cb2:	33f8      	adds	r3, #248	; 0xf8
 8004cb4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <JPEG_Set_Huff_DHTMem+0x458>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	7bdb      	ldrb	r3, [r3, #15]
 8004cc4:	021a      	lsls	r2, r3, #8
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	7b92      	ldrb	r2, [r2, #14]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	3b04      	subs	r3, #4
 8004cdc:	623b      	str	r3, [r7, #32]
  index = 12;
 8004cde:	230c      	movs	r3, #12
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ce2:	e01d      	b.n	8004d20 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	5cd3      	ldrb	r3, [r2, r3]
 8004cec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004cee:	69b9      	ldr	r1, [r7, #24]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	440b      	add	r3, r1
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004cf8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	69b9      	ldr	r1, [r7, #24]
 8004d00:	5ccb      	ldrb	r3, [r1, r3]
 8004d02:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004d04:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	3a02      	subs	r2, #2
 8004d0a:	69b9      	ldr	r1, [r7, #24]
 8004d0c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004d0e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	601a      	str	r2, [r3, #0]
    address--;
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	3b04      	subs	r3, #4
 8004d18:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	3b04      	subs	r3, #4
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d8de      	bhi.n	8004ce4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d2e:	33f8      	adds	r3, #248	; 0xf8
 8004d30:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	7c5b      	ldrb	r3, [r3, #17]
 8004d3e:	061a      	lsls	r2, r3, #24
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	7c1b      	ldrb	r3, [r3, #16]
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d5c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004d60:	623b      	str	r3, [r7, #32]
  index = 160;
 8004d62:	23a0      	movs	r3, #160	; 0xa0
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d66:	e021      	b.n	8004dac <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4413      	add	r3, r2
 8004d70:	7c1b      	ldrb	r3, [r3, #16]
 8004d72:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004d74:	69b9      	ldr	r1, [r7, #24]
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	440b      	add	r3, r1
 8004d7a:	3310      	adds	r3, #16
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004d80:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	3b01      	subs	r3, #1
 8004d86:	69b9      	ldr	r1, [r7, #24]
 8004d88:	440b      	add	r3, r1
 8004d8a:	7c1b      	ldrb	r3, [r3, #16]
 8004d8c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004d8e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	3a02      	subs	r2, #2
 8004d94:	69b9      	ldr	r1, [r7, #24]
 8004d96:	440a      	add	r2, r1
 8004d98:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004d9a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	601a      	str	r2, [r3, #0]
    address--;
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	3b04      	subs	r3, #4
 8004da4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	3b04      	subs	r3, #4
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d8da      	bhi.n	8004d68 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8004db2:	bf00      	nop
 8004db4:	372c      	adds	r7, #44	; 0x2c
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	ffff0000 	.word	0xffff0000

08004dc4 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d006      	beq.n	8004de0 <HAL_PWREx_ConfigSupply+0x1c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d003      	beq.n	8004de0 <HAL_PWREx_ConfigSupply+0x1c>
 8004dd8:	21ef      	movs	r1, #239	; 0xef
 8004dda:	481a      	ldr	r0, [pc, #104]	; (8004e44 <HAL_PWREx_ConfigSupply+0x80>)
 8004ddc:	f7fc f801 	bl	8000de2 <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_PWREx_ConfigSupply+0x84>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d008      	beq.n	8004dfe <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004dec:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <HAL_PWREx_ConfigSupply+0x84>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d001      	beq.n	8004dfe <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01d      	b.n	8004e3a <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_PWREx_ConfigSupply+0x84>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f023 0207 	bic.w	r2, r3, #7
 8004e06:	4910      	ldr	r1, [pc, #64]	; (8004e48 <HAL_PWREx_ConfigSupply+0x84>)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e0e:	f7fc fa9b 	bl	8001348 <HAL_GetTick>
 8004e12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004e14:	e009      	b.n	8004e2a <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8004e16:	f7fc fa97 	bl	8001348 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e24:	d901      	bls.n	8004e2a <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e007      	b.n	8004e3a <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <HAL_PWREx_ConfigSupply+0x84>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e36:	d1ee      	bne.n	8004e16 <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	0800b6e0 	.word	0x0800b6e0
 8004e48:	58024800 	.word	0x58024800

08004e4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f000 bcc9 	b.w	80057f2 <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d028      	beq.n	8004eba <HAL_RCC_OscConfig+0x6e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d122      	bne.n	8004eba <HAL_RCC_OscConfig+0x6e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11c      	bne.n	8004eba <HAL_RCC_OscConfig+0x6e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d116      	bne.n	8004eba <HAL_RCC_OscConfig+0x6e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d110      	bne.n	8004eba <HAL_RCC_OscConfig+0x6e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <HAL_RCC_OscConfig+0x6e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <HAL_RCC_OscConfig+0x6e>
 8004eb0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8004eb4:	48a2      	ldr	r0, [pc, #648]	; (8005140 <HAL_RCC_OscConfig+0x2f4>)
 8004eb6:	f7fb ff94 	bl	8000de2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 809d 	beq.w	8005002 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <HAL_RCC_OscConfig+0xa2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed8:	d009      	beq.n	8004eee <HAL_RCC_OscConfig+0xa2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee2:	d004      	beq.n	8004eee <HAL_RCC_OscConfig+0xa2>
 8004ee4:	f240 1175 	movw	r1, #373	; 0x175
 8004ee8:	4895      	ldr	r0, [pc, #596]	; (8005140 <HAL_RCC_OscConfig+0x2f4>)
 8004eea:	f7fb ff7a 	bl	8000de2 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eee:	4b95      	ldr	r3, [pc, #596]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ef8:	4b92      	ldr	r3, [pc, #584]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d007      	beq.n	8004f14 <HAL_RCC_OscConfig+0xc8>
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2b18      	cmp	r3, #24
 8004f08:	d111      	bne.n	8004f2e <HAL_RCC_OscConfig+0xe2>
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d10c      	bne.n	8004f2e <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	4b8b      	ldr	r3, [pc, #556]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d06f      	beq.n	8005000 <HAL_RCC_OscConfig+0x1b4>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d16b      	bne.n	8005000 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f000 bc62 	b.w	80057f2 <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0xfa>
 8004f38:	4b82      	ldr	r3, [pc, #520]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a81      	ldr	r2, [pc, #516]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e02e      	b.n	8004fa4 <HAL_RCC_OscConfig+0x158>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x11c>
 8004f4e:	4b7d      	ldr	r3, [pc, #500]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a7c      	ldr	r2, [pc, #496]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b7a      	ldr	r3, [pc, #488]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a79      	ldr	r2, [pc, #484]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e01d      	b.n	8004fa4 <HAL_RCC_OscConfig+0x158>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0x140>
 8004f72:	4b74      	ldr	r3, [pc, #464]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a73      	ldr	r2, [pc, #460]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	4b71      	ldr	r3, [pc, #452]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a70      	ldr	r2, [pc, #448]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x158>
 8004f8c:	4b6d      	ldr	r3, [pc, #436]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a6c      	ldr	r2, [pc, #432]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b6a      	ldr	r3, [pc, #424]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a69      	ldr	r2, [pc, #420]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d014      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fc f9cc 	bl	8001348 <HAL_GetTick>
 8004fb0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fb2:	e009      	b.n	8004fc8 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7fc f9c8 	bl	8001348 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	; 0x64
 8004fc0:	d902      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	f000 bc15 	b.w	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fc8:	4b5e      	ldr	r3, [pc, #376]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ef      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x168>
 8004fd4:	e015      	b.n	8005002 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fc f9b7 	bl	8001348 <HAL_GetTick>
 8004fda:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fdc:	e009      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fde:	f7fc f9b3 	bl	8001348 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b64      	cmp	r3, #100	; 0x64
 8004fea:	d902      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	f000 bc00 	b.w	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ff2:	4b54      	ldr	r3, [pc, #336]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1ef      	bne.n	8004fde <HAL_RCC_OscConfig+0x192>
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80d8 	beq.w	80051c0 <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d018      	beq.n	800504a <HAL_RCC_OscConfig+0x1fe>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d014      	beq.n	800504a <HAL_RCC_OscConfig+0x1fe>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d010      	beq.n	800504a <HAL_RCC_OscConfig+0x1fe>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b09      	cmp	r3, #9
 800502e:	d00c      	beq.n	800504a <HAL_RCC_OscConfig+0x1fe>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	2b11      	cmp	r3, #17
 8005036:	d008      	beq.n	800504a <HAL_RCC_OscConfig+0x1fe>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b19      	cmp	r3, #25
 800503e:	d004      	beq.n	800504a <HAL_RCC_OscConfig+0x1fe>
 8005040:	f240 11a9 	movw	r1, #425	; 0x1a9
 8005044:	483e      	ldr	r0, [pc, #248]	; (8005140 <HAL_RCC_OscConfig+0x2f4>)
 8005046:	f7fb fecc 	bl	8000de2 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b7f      	cmp	r3, #127	; 0x7f
 8005050:	d904      	bls.n	800505c <HAL_RCC_OscConfig+0x210>
 8005052:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005056:	483a      	ldr	r0, [pc, #232]	; (8005140 <HAL_RCC_OscConfig+0x2f4>)
 8005058:	f7fb fec3 	bl	8000de2 <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800505c:	4b39      	ldr	r3, [pc, #228]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005064:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005066:	4b37      	ldr	r3, [pc, #220]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_RCC_OscConfig+0x236>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b18      	cmp	r3, #24
 8005076:	d149      	bne.n	800510c <HAL_RCC_OscConfig+0x2c0>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d144      	bne.n	800510c <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005082:	4b30      	ldr	r3, [pc, #192]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_RCC_OscConfig+0x24e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e3ab      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800509a:	4b2a      	ldr	r3, [pc, #168]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 0219 	bic.w	r2, r3, #25
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	4927      	ldr	r1, [pc, #156]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc f94c 	bl	8001348 <HAL_GetTick>
 80050b0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b4:	f7fc f948 	bl	8001348 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e395      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050c6:	4b1f      	ldr	r3, [pc, #124]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	f7fc f967 	bl	80013a4 <HAL_GetREVID>
 80050d6:	4602      	mov	r2, r0
 80050d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80050dc:	429a      	cmp	r2, r3
 80050de:	d80a      	bhi.n	80050f6 <HAL_RCC_OscConfig+0x2aa>
 80050e0:	4b18      	ldr	r3, [pc, #96]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	4915      	ldr	r1, [pc, #84]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f4:	e064      	b.n	80051c0 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	490f      	ldr	r1, [pc, #60]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800510a:	e059      	b.n	80051c0 <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d03c      	beq.n	800518e <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 0219 	bic.w	r2, r3, #25
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4908      	ldr	r1, [pc, #32]	; (8005144 <HAL_RCC_OscConfig+0x2f8>)
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005126:	f7fc f90f 	bl	8001348 <HAL_GetTick>
 800512a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800512c:	e00c      	b.n	8005148 <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512e:	f7fc f90b 	bl	8001348 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d905      	bls.n	8005148 <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e358      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
 8005140:	0800b71c 	.word	0x0800b71c
 8005144:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005148:	4b95      	ldr	r3, [pc, #596]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0ec      	beq.n	800512e <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005154:	f7fc f926 	bl	80013a4 <HAL_GetREVID>
 8005158:	4602      	mov	r2, r0
 800515a:	f241 0303 	movw	r3, #4099	; 0x1003
 800515e:	429a      	cmp	r2, r3
 8005160:	d80a      	bhi.n	8005178 <HAL_RCC_OscConfig+0x32c>
 8005162:	4b8f      	ldr	r3, [pc, #572]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	031b      	lsls	r3, r3, #12
 8005170:	498b      	ldr	r1, [pc, #556]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005172:	4313      	orrs	r3, r2
 8005174:	604b      	str	r3, [r1, #4]
 8005176:	e023      	b.n	80051c0 <HAL_RCC_OscConfig+0x374>
 8005178:	4b89      	ldr	r3, [pc, #548]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	4986      	ldr	r1, [pc, #536]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
 800518c:	e018      	b.n	80051c0 <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800518e:	4b84      	ldr	r3, [pc, #528]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a83      	ldr	r2, [pc, #524]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519a:	f7fc f8d5 	bl	8001348 <HAL_GetTick>
 800519e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a2:	f7fc f8d1 	bl	8001348 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e31e      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051b4:	4b7a      	ldr	r3, [pc, #488]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a5 	beq.w	8005318 <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <HAL_RCC_OscConfig+0x39c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b80      	cmp	r3, #128	; 0x80
 80051dc:	d004      	beq.n	80051e8 <HAL_RCC_OscConfig+0x39c>
 80051de:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 80051e2:	4870      	ldr	r0, [pc, #448]	; (80053a4 <HAL_RCC_OscConfig+0x558>)
 80051e4:	f7fb fdfd 	bl	8000de2 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	2b1f      	cmp	r3, #31
 80051ee:	d904      	bls.n	80051fa <HAL_RCC_OscConfig+0x3ae>
 80051f0:	f240 11fb 	movw	r1, #507	; 0x1fb
 80051f4:	486b      	ldr	r0, [pc, #428]	; (80053a4 <HAL_RCC_OscConfig+0x558>)
 80051f6:	f7fb fdf4 	bl	8000de2 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051fa:	4b69      	ldr	r3, [pc, #420]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005202:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005204:	4b66      	ldr	r3, [pc, #408]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d007      	beq.n	8005220 <HAL_RCC_OscConfig+0x3d4>
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b18      	cmp	r3, #24
 8005214:	d12d      	bne.n	8005272 <HAL_RCC_OscConfig+0x426>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d128      	bne.n	8005272 <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005220:	4b5f      	ldr	r3, [pc, #380]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_RCC_OscConfig+0x3ec>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d001      	beq.n	8005238 <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e2dc      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005238:	f7fc f8b4 	bl	80013a4 <HAL_GetREVID>
 800523c:	4602      	mov	r2, r0
 800523e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005242:	429a      	cmp	r2, r3
 8005244:	d80a      	bhi.n	800525c <HAL_RCC_OscConfig+0x410>
 8005246:	4b56      	ldr	r3, [pc, #344]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	069b      	lsls	r3, r3, #26
 8005254:	4952      	ldr	r1, [pc, #328]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005256:	4313      	orrs	r3, r2
 8005258:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800525a:	e05d      	b.n	8005318 <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800525c:	4b50      	ldr	r3, [pc, #320]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	494d      	ldr	r1, [pc, #308]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800526c:	4313      	orrs	r3, r2
 800526e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005270:	e052      	b.n	8005318 <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d035      	beq.n	80052e6 <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800527a:	4b49      	ldr	r3, [pc, #292]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a48      	ldr	r2, [pc, #288]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fc f85f 	bl	8001348 <HAL_GetTick>
 800528a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800528e:	f7fc f85b 	bl	8001348 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e2a8      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052a0:	4b3f      	ldr	r3, [pc, #252]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052ac:	f7fc f87a 	bl	80013a4 <HAL_GetREVID>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d80a      	bhi.n	80052d0 <HAL_RCC_OscConfig+0x484>
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	069b      	lsls	r3, r3, #26
 80052c8:	4935      	ldr	r1, [pc, #212]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	604b      	str	r3, [r1, #4]
 80052ce:	e023      	b.n	8005318 <HAL_RCC_OscConfig+0x4cc>
 80052d0:	4b33      	ldr	r3, [pc, #204]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	4930      	ldr	r1, [pc, #192]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60cb      	str	r3, [r1, #12]
 80052e4:	e018      	b.n	8005318 <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052e6:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a2d      	ldr	r2, [pc, #180]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 80052ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fc f829 	bl	8001348 <HAL_GetTick>
 80052f6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052fa:	f7fc f825 	bl	8001348 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e272      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d047      	beq.n	80053b4 <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_RCC_OscConfig+0x4f2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d004      	beq.n	800533e <HAL_RCC_OscConfig+0x4f2>
 8005334:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8005338:	481a      	ldr	r0, [pc, #104]	; (80053a4 <HAL_RCC_OscConfig+0x558>)
 800533a:	f7fb fd52 	bl	8000de2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d019      	beq.n	800537a <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534a:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005352:	f7fb fff9 	bl	8001348 <HAL_GetTick>
 8005356:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535a:	f7fb fff5 	bl	8001348 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e242      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800536e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x50e>
 8005378:	e01c      	b.n	80053b4 <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 800537c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <HAL_RCC_OscConfig+0x554>)
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005386:	f7fb ffdf 	bl	8001348 <HAL_GetTick>
 800538a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800538c:	e00c      	b.n	80053a8 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800538e:	f7fb ffdb 	bl	8001348 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d905      	bls.n	80053a8 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e228      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
 80053a0:	58024400 	.word	0x58024400
 80053a4:	0800b71c 	.word	0x0800b71c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053a8:	4b71      	ldr	r3, [pc, #452]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80053aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ec      	bne.n	800538e <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d043      	beq.n	8005448 <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCC_OscConfig+0x58e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d004      	beq.n	80053da <HAL_RCC_OscConfig+0x58e>
 80053d0:	f240 2167 	movw	r1, #615	; 0x267
 80053d4:	4867      	ldr	r0, [pc, #412]	; (8005574 <HAL_RCC_OscConfig+0x728>)
 80053d6:	f7fb fd04 	bl	8000de2 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d019      	beq.n	8005416 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053e2:	4b63      	ldr	r3, [pc, #396]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a62      	ldr	r2, [pc, #392]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80053e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053ee:	f7fb ffab 	bl	8001348 <HAL_GetTick>
 80053f2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80053f6:	f7fb ffa7 	bl	8001348 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1f4      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005408:	4b59      	ldr	r3, [pc, #356]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x5aa>
 8005414:	e018      	b.n	8005448 <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005416:	4b56      	ldr	r3, [pc, #344]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a55      	ldr	r2, [pc, #340]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 800541c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005420:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005422:	f7fb ff91 	bl	8001348 <HAL_GetTick>
 8005426:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800542a:	f7fb ff8d 	bl	8001348 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e1da      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800543c:	4b4c      	ldr	r3, [pc, #304]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8099 	beq.w	8005588 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <HAL_RCC_OscConfig+0x62c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d008      	beq.n	8005478 <HAL_RCC_OscConfig+0x62c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b05      	cmp	r3, #5
 800546c:	d004      	beq.n	8005478 <HAL_RCC_OscConfig+0x62c>
 800546e:	f240 2191 	movw	r1, #657	; 0x291
 8005472:	4840      	ldr	r0, [pc, #256]	; (8005574 <HAL_RCC_OscConfig+0x728>)
 8005474:	f7fb fcb5 	bl	8000de2 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005478:	4b3f      	ldr	r3, [pc, #252]	; (8005578 <HAL_RCC_OscConfig+0x72c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a3e      	ldr	r2, [pc, #248]	; (8005578 <HAL_RCC_OscConfig+0x72c>)
 800547e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005482:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005484:	f7fb ff60 	bl	8001348 <HAL_GetTick>
 8005488:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800548c:	f7fb ff5c 	bl	8001348 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	; 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e1a9      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800549e:	4b36      	ldr	r3, [pc, #216]	; (8005578 <HAL_RCC_OscConfig+0x72c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d106      	bne.n	80054c0 <HAL_RCC_OscConfig+0x674>
 80054b2:	4b2f      	ldr	r3, [pc, #188]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	4a2e      	ldr	r2, [pc, #184]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	6713      	str	r3, [r2, #112]	; 0x70
 80054be:	e02d      	b.n	800551c <HAL_RCC_OscConfig+0x6d0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10c      	bne.n	80054e2 <HAL_RCC_OscConfig+0x696>
 80054c8:	4b29      	ldr	r3, [pc, #164]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	; 0x70
 80054d4:	4b26      	ldr	r3, [pc, #152]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054da:	f023 0304 	bic.w	r3, r3, #4
 80054de:	6713      	str	r3, [r2, #112]	; 0x70
 80054e0:	e01c      	b.n	800551c <HAL_RCC_OscConfig+0x6d0>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0x6b8>
 80054ea:	4b21      	ldr	r3, [pc, #132]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	4a20      	ldr	r2, [pc, #128]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054f0:	f043 0304 	orr.w	r3, r3, #4
 80054f4:	6713      	str	r3, [r2, #112]	; 0x70
 80054f6:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
 8005502:	e00b      	b.n	800551c <HAL_RCC_OscConfig+0x6d0>
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	6713      	str	r3, [r2, #112]	; 0x70
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	4a16      	ldr	r2, [pc, #88]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 8005516:	f023 0304 	bic.w	r3, r3, #4
 800551a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005524:	f7fb ff10 	bl	8001348 <HAL_GetTick>
 8005528:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800552a:	e00a      	b.n	8005542 <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800552c:	f7fb ff0c 	bl	8001348 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e157      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <HAL_RCC_OscConfig+0x724>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ee      	beq.n	800552c <HAL_RCC_OscConfig+0x6e0>
 800554e:	e01b      	b.n	8005588 <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7fb fefa 	bl	8001348 <HAL_GetTick>
 8005554:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005556:	e011      	b.n	800557c <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005558:	f7fb fef6 	bl	8001348 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d908      	bls.n	800557c <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e141      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
 800556e:	bf00      	nop
 8005570:	58024400 	.word	0x58024400
 8005574:	0800b71c 	.word	0x0800b71c
 8005578:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800557c:	4b9f      	ldr	r3, [pc, #636]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e7      	bne.n	8005558 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00c      	beq.n	80055aa <HAL_RCC_OscConfig+0x75e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2b01      	cmp	r3, #1
 8005596:	d008      	beq.n	80055aa <HAL_RCC_OscConfig+0x75e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	2b02      	cmp	r3, #2
 800559e:	d004      	beq.n	80055aa <HAL_RCC_OscConfig+0x75e>
 80055a0:	f240 21c3 	movw	r1, #707	; 0x2c3
 80055a4:	4896      	ldr	r0, [pc, #600]	; (8005800 <HAL_RCC_OscConfig+0x9b4>)
 80055a6:	f7fb fc1c 	bl	8000de2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 811e 	beq.w	80057f0 <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80055b4:	4b91      	ldr	r3, [pc, #580]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055bc:	2b18      	cmp	r3, #24
 80055be:	f000 8115 	beq.w	80057ec <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	f040 80f6 	bne.w	80057b8 <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d010      	beq.n	80055f6 <HAL_RCC_OscConfig+0x7aa>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00c      	beq.n	80055f6 <HAL_RCC_OscConfig+0x7aa>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d008      	beq.n	80055f6 <HAL_RCC_OscConfig+0x7aa>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d004      	beq.n	80055f6 <HAL_RCC_OscConfig+0x7aa>
 80055ec:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80055f0:	4883      	ldr	r0, [pc, #524]	; (8005800 <HAL_RCC_OscConfig+0x9b4>)
 80055f2:	f7fb fbf6 	bl	8000de2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_RCC_OscConfig+0x7ba>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	2b3f      	cmp	r3, #63	; 0x3f
 8005604:	d904      	bls.n	8005610 <HAL_RCC_OscConfig+0x7c4>
 8005606:	f240 21cd 	movw	r1, #717	; 0x2cd
 800560a:	487d      	ldr	r0, [pc, #500]	; (8005800 <HAL_RCC_OscConfig+0x9b4>)
 800560c:	f7fb fbe9 	bl	8000de2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	2b03      	cmp	r3, #3
 8005616:	d904      	bls.n	8005622 <HAL_RCC_OscConfig+0x7d6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005620:	d904      	bls.n	800562c <HAL_RCC_OscConfig+0x7e0>
 8005622:	f240 21ce 	movw	r1, #718	; 0x2ce
 8005626:	4876      	ldr	r0, [pc, #472]	; (8005800 <HAL_RCC_OscConfig+0x9b4>)
 8005628:	f7fb fbdb 	bl	8000de2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_RCC_OscConfig+0x7f0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005638:	2b80      	cmp	r3, #128	; 0x80
 800563a:	d904      	bls.n	8005646 <HAL_RCC_OscConfig+0x7fa>
 800563c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005640:	486f      	ldr	r0, [pc, #444]	; (8005800 <HAL_RCC_OscConfig+0x9b4>)
 8005642:	f7fb fbce 	bl	8000de2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_RCC_OscConfig+0x80a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d904      	bls.n	8005660 <HAL_RCC_OscConfig+0x814>
 8005656:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800565a:	4869      	ldr	r0, [pc, #420]	; (8005800 <HAL_RCC_OscConfig+0x9b4>)
 800565c:	f7fb fbc1 	bl	8000de2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_RCC_OscConfig+0x824>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d904      	bls.n	800567a <HAL_RCC_OscConfig+0x82e>
 8005670:	f240 21d1 	movw	r1, #721	; 0x2d1
 8005674:	4862      	ldr	r0, [pc, #392]	; (8005800 <HAL_RCC_OscConfig+0x9b4>)
 8005676:	f7fb fbb4 	bl	8000de2 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005682:	d304      	bcc.n	800568e <HAL_RCC_OscConfig+0x842>
 8005684:	f240 21d2 	movw	r1, #722	; 0x2d2
 8005688:	485d      	ldr	r0, [pc, #372]	; (8005800 <HAL_RCC_OscConfig+0x9b4>)
 800568a:	f7fb fbaa 	bl	8000de2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568e:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a5a      	ldr	r2, [pc, #360]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7fb fe55 	bl	8001348 <HAL_GetTick>
 800569e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a2:	f7fb fe51 	bl	8001348 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e09e      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056b4:	4b51      	ldr	r3, [pc, #324]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f0      	bne.n	80056a2 <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c0:	4b4e      	ldr	r3, [pc, #312]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 80056c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056c4:	4b4f      	ldr	r3, [pc, #316]	; (8005804 <HAL_RCC_OscConfig+0x9b8>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056d0:	0112      	lsls	r2, r2, #4
 80056d2:	430a      	orrs	r2, r1
 80056d4:	4949      	ldr	r1, [pc, #292]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	628b      	str	r3, [r1, #40]	; 0x28
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	3b01      	subs	r3, #1
 80056e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	3b01      	subs	r3, #1
 80056ea:	025b      	lsls	r3, r3, #9
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	3b01      	subs	r3, #1
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	3b01      	subs	r3, #1
 8005704:	061b      	lsls	r3, r3, #24
 8005706:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800570a:	493c      	ldr	r1, [pc, #240]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800570c:	4313      	orrs	r3, r2
 800570e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005710:	4b3a      	ldr	r3, [pc, #232]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	4a39      	ldr	r2, [pc, #228]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800571c:	4b37      	ldr	r3, [pc, #220]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800571e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005720:	4b39      	ldr	r3, [pc, #228]	; (8005808 <HAL_RCC_OscConfig+0x9bc>)
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005728:	00d2      	lsls	r2, r2, #3
 800572a:	4934      	ldr	r1, [pc, #208]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005730:	4b32      	ldr	r3, [pc, #200]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	f023 020c 	bic.w	r2, r3, #12
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	492f      	ldr	r1, [pc, #188]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800573e:	4313      	orrs	r3, r2
 8005740:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005742:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	f023 0202 	bic.w	r2, r3, #2
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	492b      	ldr	r1, [pc, #172]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005750:	4313      	orrs	r3, r2
 8005752:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005754:	4b29      	ldr	r3, [pc, #164]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	4a28      	ldr	r2, [pc, #160]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800575a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005760:	4b26      	ldr	r3, [pc, #152]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	4a25      	ldr	r2, [pc, #148]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800576a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800576c:	4b23      	ldr	r3, [pc, #140]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005778:	4b20      	ldr	r3, [pc, #128]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 800578a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800578e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fb fdda 	bl	8001348 <HAL_GetTick>
 8005794:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005798:	f7fb fdd6 	bl	8001348 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e023      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x94c>
 80057b6:	e01b      	b.n	80057f0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0f      	ldr	r2, [pc, #60]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 80057be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fb fdc0 	bl	8001348 <HAL_GetTick>
 80057c8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fb fdbc 	bl	8001348 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e009      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <HAL_RCC_OscConfig+0x9b0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x980>
 80057ea:	e001      	b.n	80057f0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3728      	adds	r7, #40	; 0x28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	58024400 	.word	0x58024400
 8005800:	0800b71c 	.word	0x0800b71c
 8005804:	fffffc0c 	.word	0xfffffc0c
 8005808:	ffff0007 	.word	0xffff0007

0800580c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e345      	b.n	8005eac <HAL_RCC_ClockConfig+0x6a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_RCC_ClockConfig+0x24>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b3f      	cmp	r3, #63	; 0x3f
 800582e:	d904      	bls.n	800583a <HAL_RCC_ClockConfig+0x2e>
 8005830:	f240 3152 	movw	r1, #850	; 0x352
 8005834:	4827      	ldr	r0, [pc, #156]	; (80058d4 <HAL_RCC_ClockConfig+0xc8>)
 8005836:	f7fb fad4 	bl	8000de2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d031      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d02e      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d02b      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d028      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b04      	cmp	r3, #4
 8005856:	d025      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b05      	cmp	r3, #5
 800585c:	d022      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b06      	cmp	r3, #6
 8005862:	d01f      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b07      	cmp	r3, #7
 8005868:	d01c      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b08      	cmp	r3, #8
 800586e:	d019      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b09      	cmp	r3, #9
 8005874:	d016      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b0a      	cmp	r3, #10
 800587a:	d013      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b0b      	cmp	r3, #11
 8005880:	d010      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b0c      	cmp	r3, #12
 8005886:	d00d      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b0d      	cmp	r3, #13
 800588c:	d00a      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b0e      	cmp	r3, #14
 8005892:	d007      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	d004      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x98>
 800589a:	f240 3153 	movw	r1, #851	; 0x353
 800589e:	480d      	ldr	r0, [pc, #52]	; (80058d4 <HAL_RCC_ClockConfig+0xc8>)
 80058a0:	f7fb fa9f 	bl	8000de2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <HAL_RCC_ClockConfig+0xcc>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d914      	bls.n	80058dc <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <HAL_RCC_ClockConfig+0xcc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 020f 	bic.w	r2, r3, #15
 80058ba:	4907      	ldr	r1, [pc, #28]	; (80058d8 <HAL_RCC_ClockConfig+0xcc>)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <HAL_RCC_ClockConfig+0xcc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e2eb      	b.n	8005eac <HAL_RCC_ClockConfig+0x6a0>
 80058d4:	0800b71c 	.word	0x0800b71c
 80058d8:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d029      	beq.n	800593c <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	4b9a      	ldr	r3, [pc, #616]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d921      	bls.n	800593c <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d014      	beq.n	800592a <HAL_RCC_ClockConfig+0x11e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d010      	beq.n	800592a <HAL_RCC_ClockConfig+0x11e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2b50      	cmp	r3, #80	; 0x50
 800590e:	d00c      	beq.n	800592a <HAL_RCC_ClockConfig+0x11e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b60      	cmp	r3, #96	; 0x60
 8005916:	d008      	beq.n	800592a <HAL_RCC_ClockConfig+0x11e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b70      	cmp	r3, #112	; 0x70
 800591e:	d004      	beq.n	800592a <HAL_RCC_ClockConfig+0x11e>
 8005920:	f240 316e 	movw	r1, #878	; 0x36e
 8005924:	488d      	ldr	r0, [pc, #564]	; (8005b5c <HAL_RCC_ClockConfig+0x350>)
 8005926:	f7fb fa5c 	bl	8000de2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800592a:	4b8b      	ldr	r3, [pc, #556]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	4988      	ldr	r1, [pc, #544]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005938:	4313      	orrs	r3, r2
 800593a:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d029      	beq.n	800599c <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	4b82      	ldr	r3, [pc, #520]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005954:	429a      	cmp	r2, r3
 8005956:	d921      	bls.n	800599c <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d014      	beq.n	800598a <HAL_RCC_ClockConfig+0x17e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d010      	beq.n	800598a <HAL_RCC_ClockConfig+0x17e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	2b50      	cmp	r3, #80	; 0x50
 800596e:	d00c      	beq.n	800598a <HAL_RCC_ClockConfig+0x17e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	2b60      	cmp	r3, #96	; 0x60
 8005976:	d008      	beq.n	800598a <HAL_RCC_ClockConfig+0x17e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	2b70      	cmp	r3, #112	; 0x70
 800597e:	d004      	beq.n	800598a <HAL_RCC_ClockConfig+0x17e>
 8005980:	f44f 715e 	mov.w	r1, #888	; 0x378
 8005984:	4875      	ldr	r0, [pc, #468]	; (8005b5c <HAL_RCC_ClockConfig+0x350>)
 8005986:	f7fb fa2c 	bl	8000de2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800598a:	4b73      	ldr	r3, [pc, #460]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	4970      	ldr	r1, [pc, #448]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005998:	4313      	orrs	r3, r2
 800599a:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02d      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	4b6a      	ldr	r3, [pc, #424]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d925      	bls.n	8005a04 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d018      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x1e6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c8:	d013      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x1e6>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80059d2:	d00e      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x1e6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x1e6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059e6:	d004      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x1e6>
 80059e8:	f240 3182 	movw	r1, #898	; 0x382
 80059ec:	485b      	ldr	r0, [pc, #364]	; (8005b5c <HAL_RCC_ClockConfig+0x350>)
 80059ee:	f7fb f9f8 	bl	8000de2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059f2:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	4956      	ldr	r1, [pc, #344]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d029      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	4b50      	ldr	r3, [pc, #320]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d921      	bls.n	8005a64 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d014      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x246>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x246>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	2b50      	cmp	r3, #80	; 0x50
 8005a36:	d00c      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x246>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	2b60      	cmp	r3, #96	; 0x60
 8005a3e:	d008      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x246>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d004      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x246>
 8005a48:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8005a4c:	4843      	ldr	r0, [pc, #268]	; (8005b5c <HAL_RCC_ClockConfig+0x350>)
 8005a4e:	f7fb f9c8 	bl	8000de2 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a52:	4b41      	ldr	r3, [pc, #260]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	493e      	ldr	r1, [pc, #248]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d039      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	4b38      	ldr	r3, [pc, #224]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d931      	bls.n	8005ae4 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d024      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	2b09      	cmp	r3, #9
 8005a96:	d01c      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b0a      	cmp	r3, #10
 8005a9e:	d018      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b0b      	cmp	r3, #11
 8005aa6:	d014      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b0c      	cmp	r3, #12
 8005aae:	d010      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b0d      	cmp	r3, #13
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b0e      	cmp	r3, #14
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b0f      	cmp	r3, #15
 8005ac6:	d004      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x2c6>
 8005ac8:	f240 3197 	movw	r1, #919	; 0x397
 8005acc:	4823      	ldr	r0, [pc, #140]	; (8005b5c <HAL_RCC_ClockConfig+0x350>)
 8005ace:	f7fb f988 	bl	8000de2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f023 020f 	bic.w	r2, r3, #15
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	491e      	ldr	r1, [pc, #120]	; (8005b58 <HAL_RCC_ClockConfig+0x34c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80a2 	beq.w	8005c36 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d032      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b02:	d02d      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005b0c:	d028      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b16:	d023      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005b20:	d01e      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b2a:	d019      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005b34:	d014      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005b3e:	d00f      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b4a:	f240 319f 	movw	r1, #927	; 0x39f
 8005b4e:	4803      	ldr	r0, [pc, #12]	; (8005b5c <HAL_RCC_ClockConfig+0x350>)
 8005b50:	f7fb f947 	bl	8000de2 <assert_failed>
 8005b54:	e004      	b.n	8005b60 <HAL_RCC_ClockConfig+0x354>
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	0800b71c 	.word	0x0800b71c
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d010      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x37e>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00c      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x37e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d008      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x37e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d004      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x37e>
 8005b80:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8005b84:	4858      	ldr	r0, [pc, #352]	; (8005ce8 <HAL_RCC_ClockConfig+0x4dc>)
 8005b86:	f7fb f92c 	bl	8000de2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b8a:	4b58      	ldr	r3, [pc, #352]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	4955      	ldr	r1, [pc, #340]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d107      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ba4:	4b51      	ldr	r3, [pc, #324]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d121      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e17b      	b.n	8005eac <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d107      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bbc:	4b4b      	ldr	r3, [pc, #300]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d115      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e16f      	b.n	8005eac <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d107      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bd4:	4b45      	ldr	r3, [pc, #276]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e163      	b.n	8005eac <HAL_RCC_ClockConfig+0x6a0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be4:	4b41      	ldr	r3, [pc, #260]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e15b      	b.n	8005eac <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf4:	4b3d      	ldr	r3, [pc, #244]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f023 0207 	bic.w	r2, r3, #7
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	493a      	ldr	r1, [pc, #232]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c06:	f7fb fb9f 	bl	8001348 <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0c:	e00a      	b.n	8005c24 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0e:	f7fb fb9b 	bl	8001348 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e143      	b.n	8005eac <HAL_RCC_ClockConfig+0x6a0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d1eb      	bne.n	8005c0e <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d039      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	4b29      	ldr	r3, [pc, #164]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d231      	bcs.n	8005cb6 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d024      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d020      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d01c      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b0a      	cmp	r3, #10
 8005c70:	d018      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b0b      	cmp	r3, #11
 8005c78:	d014      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d010      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b0d      	cmp	r3, #13
 8005c88:	d00c      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2b0e      	cmp	r3, #14
 8005c90:	d008      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d004      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x498>
 8005c9a:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8005c9e:	4812      	ldr	r0, [pc, #72]	; (8005ce8 <HAL_RCC_ClockConfig+0x4dc>)
 8005ca0:	f7fb f89f 	bl	8000de2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f023 020f 	bic.w	r2, r3, #15
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	490e      	ldr	r1, [pc, #56]	; (8005cec <HAL_RCC_ClockConfig+0x4e0>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb6:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <HAL_RCC_ClockConfig+0x4e4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d217      	bcs.n	8005cf4 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <HAL_RCC_ClockConfig+0x4e4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f023 020f 	bic.w	r2, r3, #15
 8005ccc:	4908      	ldr	r1, [pc, #32]	; (8005cf0 <HAL_RCC_ClockConfig+0x4e4>)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <HAL_RCC_ClockConfig+0x4e4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d008      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0e2      	b.n	8005eac <HAL_RCC_ClockConfig+0x6a0>
 8005ce6:	bf00      	nop
 8005ce8:	0800b71c 	.word	0x0800b71c
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d029      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	4b6b      	ldr	r3, [pc, #428]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d221      	bcs.n	8005d54 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d014      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x536>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d010      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x536>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b50      	cmp	r3, #80	; 0x50
 8005d26:	d00c      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x536>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b60      	cmp	r3, #96	; 0x60
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x536>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b70      	cmp	r3, #112	; 0x70
 8005d36:	d004      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x536>
 8005d38:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8005d3c:	485e      	ldr	r0, [pc, #376]	; (8005eb8 <HAL_RCC_ClockConfig+0x6ac>)
 8005d3e:	f7fb f850 	bl	8000de2 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d42:	4b5c      	ldr	r3, [pc, #368]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	4959      	ldr	r1, [pc, #356]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d029      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	4b53      	ldr	r3, [pc, #332]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d221      	bcs.n	8005db4 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d014      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x596>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d010      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x596>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	2b50      	cmp	r3, #80	; 0x50
 8005d86:	d00c      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x596>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	2b60      	cmp	r3, #96	; 0x60
 8005d8e:	d008      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x596>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	2b70      	cmp	r3, #112	; 0x70
 8005d96:	d004      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x596>
 8005d98:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005d9c:	4846      	ldr	r0, [pc, #280]	; (8005eb8 <HAL_RCC_ClockConfig+0x6ac>)
 8005d9e:	f7fb f820 	bl	8000de2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005da2:	4b44      	ldr	r3, [pc, #272]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	4941      	ldr	r1, [pc, #260]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d02d      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699a      	ldr	r2, [r3, #24]
 8005dc4:	4b3b      	ldr	r3, [pc, #236]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d225      	bcs.n	8005e1c <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d018      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x5fe>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de0:	d013      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x5fe>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005dea:	d00e      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x5fe>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005df4:	d009      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x5fe>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dfe:	d004      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x5fe>
 8005e00:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8005e04:	482c      	ldr	r0, [pc, #176]	; (8005eb8 <HAL_RCC_ClockConfig+0x6ac>)
 8005e06:	f7fa ffec 	bl	8000de2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e0a:	4b2a      	ldr	r3, [pc, #168]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	4927      	ldr	r1, [pc, #156]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d029      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d221      	bcs.n	8005e7c <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d014      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x65e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b40      	cmp	r3, #64	; 0x40
 8005e46:	d010      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x65e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	2b50      	cmp	r3, #80	; 0x50
 8005e4e:	d00c      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x65e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	2b60      	cmp	r3, #96	; 0x60
 8005e56:	d008      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x65e>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	2b70      	cmp	r3, #112	; 0x70
 8005e5e:	d004      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x65e>
 8005e60:	f240 4112 	movw	r1, #1042	; 0x412
 8005e64:	4814      	ldr	r0, [pc, #80]	; (8005eb8 <HAL_RCC_ClockConfig+0x6ac>)
 8005e66:	f7fa ffbc 	bl	8000de2 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e6a:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	490f      	ldr	r1, [pc, #60]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e7c:	f000 f824 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8005e80:	4601      	mov	r1, r0
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <HAL_RCC_ClockConfig+0x6a8>)
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	4a0b      	ldr	r2, [pc, #44]	; (8005ebc <HAL_RCC_ClockConfig+0x6b0>)
 8005e8e:	5cd3      	ldrb	r3, [r2, r3]
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	fa21 f303 	lsr.w	r3, r1, r3
 8005e98:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <HAL_RCC_ClockConfig+0x6b4>)
 8005e9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <HAL_RCC_ClockConfig+0x6b8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fb fa07 	bl	80012b4 <HAL_InitTick>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	58024400 	.word	0x58024400
 8005eb8:	0800b71c 	.word	0x0800b71c
 8005ebc:	0800b850 	.word	0x0800b850
 8005ec0:	24000000 	.word	0x24000000
 8005ec4:	24000008 	.word	0x24000008

08005ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b089      	sub	sp, #36	; 0x24
 8005ecc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ece:	4baf      	ldr	r3, [pc, #700]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ed6:	2b18      	cmp	r3, #24
 8005ed8:	f200 814e 	bhi.w	8006178 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f49 	.word	0x08005f49
 8005ee8:	08006179 	.word	0x08006179
 8005eec:	08006179 	.word	0x08006179
 8005ef0:	08006179 	.word	0x08006179
 8005ef4:	08006179 	.word	0x08006179
 8005ef8:	08006179 	.word	0x08006179
 8005efc:	08006179 	.word	0x08006179
 8005f00:	08006179 	.word	0x08006179
 8005f04:	08005f6f 	.word	0x08005f6f
 8005f08:	08006179 	.word	0x08006179
 8005f0c:	08006179 	.word	0x08006179
 8005f10:	08006179 	.word	0x08006179
 8005f14:	08006179 	.word	0x08006179
 8005f18:	08006179 	.word	0x08006179
 8005f1c:	08006179 	.word	0x08006179
 8005f20:	08006179 	.word	0x08006179
 8005f24:	08005f75 	.word	0x08005f75
 8005f28:	08006179 	.word	0x08006179
 8005f2c:	08006179 	.word	0x08006179
 8005f30:	08006179 	.word	0x08006179
 8005f34:	08006179 	.word	0x08006179
 8005f38:	08006179 	.word	0x08006179
 8005f3c:	08006179 	.word	0x08006179
 8005f40:	08006179 	.word	0x08006179
 8005f44:	08005f7b 	.word	0x08005f7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f48:	4b90      	ldr	r3, [pc, #576]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f54:	4b8d      	ldr	r3, [pc, #564]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	08db      	lsrs	r3, r3, #3
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	4a8c      	ldr	r2, [pc, #560]	; (8006190 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
 8005f64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f66:	e10a      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f68:	4b89      	ldr	r3, [pc, #548]	; (8006190 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f6a:	61bb      	str	r3, [r7, #24]
    break;
 8005f6c:	e107      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f6e:	4b89      	ldr	r3, [pc, #548]	; (8006194 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f70:	61bb      	str	r3, [r7, #24]
    break;
 8005f72:	e104      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f74:	4b88      	ldr	r3, [pc, #544]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005f76:	61bb      	str	r3, [r7, #24]
    break;
 8005f78:	e101      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f7a:	4b84      	ldr	r3, [pc, #528]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f84:	4b81      	ldr	r3, [pc, #516]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f90:	4b7e      	ldr	r3, [pc, #504]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f9a:	4b7c      	ldr	r3, [pc, #496]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	08db      	lsrs	r3, r3, #3
 8005fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80da 	beq.w	8006172 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d05a      	beq.n	800607a <HAL_RCC_GetSysClockFreq+0x1b2>
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d302      	bcc.n	8005fce <HAL_RCC_GetSysClockFreq+0x106>
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d078      	beq.n	80060be <HAL_RCC_GetSysClockFreq+0x1f6>
 8005fcc:	e099      	b.n	8006102 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fce:	4b6f      	ldr	r3, [pc, #444]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02d      	beq.n	8006036 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fda:	4b6c      	ldr	r3, [pc, #432]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	08db      	lsrs	r3, r3, #3
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	4a6a      	ldr	r2, [pc, #424]	; (8006190 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006004:	4b61      	ldr	r3, [pc, #388]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006014:	ed97 6a02 	vldr	s12, [r7, #8]
 8006018:	eddf 5a60 	vldr	s11, [pc, #384]	; 800619c <HAL_RCC_GetSysClockFreq+0x2d4>
 800601c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006030:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006034:	e087      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006040:	eddf 6a57 	vldr	s13, [pc, #348]	; 80061a0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006048:	4b50      	ldr	r3, [pc, #320]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006050:	ee07 3a90 	vmov	s15, r3
 8006054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006058:	ed97 6a02 	vldr	s12, [r7, #8]
 800605c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800619c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800606c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006074:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006078:	e065      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	ee07 3a90 	vmov	s15, r3
 8006080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006084:	eddf 6a47 	vldr	s13, [pc, #284]	; 80061a4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608c:	4b3f      	ldr	r3, [pc, #252]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006094:	ee07 3a90 	vmov	s15, r3
 8006098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609c:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800619c <HAL_RCC_GetSysClockFreq+0x2d4>
 80060a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060bc:	e043      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80061a8 <HAL_RCC_GetSysClockFreq+0x2e0>
 80060cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d0:	4b2e      	ldr	r3, [pc, #184]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060e4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800619c <HAL_RCC_GetSysClockFreq+0x2d4>
 80060e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006100:	e021      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80061a4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006114:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006124:	ed97 6a02 	vldr	s12, [r7, #8]
 8006128:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800619c <HAL_RCC_GetSysClockFreq+0x2d4>
 800612c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006144:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	0a5b      	lsrs	r3, r3, #9
 800614c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006150:	3301      	adds	r3, #1
 8006152:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800615e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800616a:	ee17 3a90 	vmov	r3, s15
 800616e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006170:	e005      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	61bb      	str	r3, [r7, #24]
    break;
 8006176:	e002      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800617a:	61bb      	str	r3, [r7, #24]
    break;
 800617c:	bf00      	nop
  }

  return sysclockfreq;
 800617e:	69bb      	ldr	r3, [r7, #24]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3724      	adds	r7, #36	; 0x24
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	58024400 	.word	0x58024400
 8006190:	03d09000 	.word	0x03d09000
 8006194:	003d0900 	.word	0x003d0900
 8006198:	00b71b00 	.word	0x00b71b00
 800619c:	46000000 	.word	0x46000000
 80061a0:	4c742400 	.word	0x4c742400
 80061a4:	4a742400 	.word	0x4a742400
 80061a8:	4b371b00 	.word	0x4b371b00

080061ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061b0:	f001 fc94 	bl	8007adc <HAL_RCCEx_GetD1SysClockFreq>
 80061b4:	4601      	mov	r1, r0
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	4a07      	ldr	r2, [pc, #28]	; (80061dc <HAL_RCC_GetHCLKFreq+0x30>)
 80061c0:	5cd3      	ldrb	r3, [r2, r3]
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	fa21 f303 	lsr.w	r3, r1, r3
 80061ca:	4a05      	ldr	r2, [pc, #20]	; (80061e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80061cc:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 80061ce:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80061d0:	681b      	ldr	r3, [r3, #0]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	58024400 	.word	0x58024400
 80061dc:	0800b850 	.word	0x0800b850
 80061e0:	24000004 	.word	0x24000004

080061e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061e8:	f7ff ffe0 	bl	80061ac <HAL_RCC_GetHCLKFreq>
 80061ec:	4601      	mov	r1, r0
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	091b      	lsrs	r3, r3, #4
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4a04      	ldr	r2, [pc, #16]	; (800620c <HAL_RCC_GetPCLK1Freq+0x28>)
 80061fa:	5cd3      	ldrb	r3, [r2, r3]
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006204:	4618      	mov	r0, r3
 8006206:	bd80      	pop	{r7, pc}
 8006208:	58024400 	.word	0x58024400
 800620c:	0800b850 	.word	0x0800b850

08006210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006214:	f7ff ffca 	bl	80061ac <HAL_RCC_GetHCLKFreq>
 8006218:	4601      	mov	r1, r0
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	4a04      	ldr	r2, [pc, #16]	; (8006238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006226:	5cd3      	ldrb	r3, [r2, r3]
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}
 8006234:	58024400 	.word	0x58024400
 8006238:	0800b850 	.word	0x0800b850

0800623c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006244:	2300      	movs	r3, #0
 8006246:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006248:	2300      	movs	r3, #0
 800624a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d03d      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006260:	d013      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006266:	d802      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800626c:	e01f      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x72>
 800626e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006272:	d013      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006274:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006278:	d01c      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800627a:	e018      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627c:	4baf      	ldr	r3, [pc, #700]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	4aae      	ldr	r2, [pc, #696]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006288:	e015      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3304      	adds	r3, #4
 800628e:	2102      	movs	r1, #2
 8006290:	4618      	mov	r0, r3
 8006292:	f001 fc3f 	bl	8007b14 <RCCEx_PLL2_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800629a:	e00c      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3324      	adds	r3, #36	; 0x24
 80062a0:	2102      	movs	r1, #2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 fd58 	bl	8007d58 <RCCEx_PLL3_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
      break;
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80062b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062bc:	4b9f      	ldr	r3, [pc, #636]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c8:	499c      	ldr	r1, [pc, #624]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	650b      	str	r3, [r1, #80]	; 0x50
 80062ce:	e001      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d03d      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d826      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	08006305 	.word	0x08006305
 80062f4:	08006313 	.word	0x08006313
 80062f8:	08006325 	.word	0x08006325
 80062fc:	0800633d 	.word	0x0800633d
 8006300:	0800633d 	.word	0x0800633d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006304:	4b8d      	ldr	r3, [pc, #564]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4a8c      	ldr	r2, [pc, #560]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800630a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006310:	e015      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3304      	adds	r3, #4
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f001 fbfb 	bl	8007b14 <RCCEx_PLL2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006322:	e00c      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fd14 	bl	8007d58 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	75fb      	strb	r3, [r7, #23]
      break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800633c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006344:	4b7d      	ldr	r3, [pc, #500]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	f023 0207 	bic.w	r2, r3, #7
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006350:	497a      	ldr	r1, [pc, #488]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006352:	4313      	orrs	r3, r2
 8006354:	650b      	str	r3, [r1, #80]	; 0x50
 8006356:	e001      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006364:	2b00      	cmp	r3, #0
 8006366:	d03e      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d01c      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006370:	2b80      	cmp	r3, #128	; 0x80
 8006372:	d804      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d00d      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800637c:	e01e      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800637e:	2bc0      	cmp	r3, #192	; 0xc0
 8006380:	d01f      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006386:	d01e      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006388:	e018      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638a:	4b6c      	ldr	r3, [pc, #432]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	4a6b      	ldr	r2, [pc, #428]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006396:	e017      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3304      	adds	r3, #4
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 fbb8 	bl	8007b14 <RCCEx_PLL2_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063a8:	e00e      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3324      	adds	r3, #36	; 0x24
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 fcd1 	bl	8007d58 <RCCEx_PLL3_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063ba:	e005      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	75fb      	strb	r3, [r7, #23]
      break;
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80063c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063ce:	4b5b      	ldr	r3, [pc, #364]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063da:	4958      	ldr	r1, [pc, #352]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	650b      	str	r3, [r1, #80]	; 0x50
 80063e0:	e001      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d044      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063fc:	d01f      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80063fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006402:	d805      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006408:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800640c:	d00e      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800640e:	e01f      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006410:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006414:	d01f      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006416:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800641a:	d01e      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800641c:	e018      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641e:	4b47      	ldr	r3, [pc, #284]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	4a46      	ldr	r2, [pc, #280]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800642a:	e017      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3304      	adds	r3, #4
 8006430:	2100      	movs	r1, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f001 fb6e 	bl	8007b14 <RCCEx_PLL2_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800643c:	e00e      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3324      	adds	r3, #36	; 0x24
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f001 fc87 	bl	8007d58 <RCCEx_PLL3_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800644e:	e005      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	e002      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006456:	bf00      	nop
 8006458:	e000      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800645a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006462:	4b36      	ldr	r3, [pc, #216]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006470:	4932      	ldr	r1, [pc, #200]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006472:	4313      	orrs	r3, r2
 8006474:	658b      	str	r3, [r1, #88]	; 0x58
 8006476:	e001      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006484:	2b00      	cmp	r3, #0
 8006486:	d044      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800648e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006492:	d01f      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006498:	d805      	bhi.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800649e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064a2:	d00e      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80064a4:	e01f      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80064a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064aa:	d01f      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80064ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064b0:	d01e      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80064b2:	e018      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b4:	4b21      	ldr	r3, [pc, #132]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4a20      	ldr	r2, [pc, #128]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064c0:	e017      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	2100      	movs	r1, #0
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 fb23 	bl	8007b14 <RCCEx_PLL2_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064d2:	e00e      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3324      	adds	r3, #36	; 0x24
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 fc3c 	bl	8007d58 <RCCEx_PLL3_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064e4:	e005      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
      break;
 80064ea:	e002      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80064ec:	bf00      	nop
 80064ee:	e000      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80064f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064f8:	4b10      	ldr	r3, [pc, #64]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006506:	490d      	ldr	r1, [pc, #52]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006508:	4313      	orrs	r3, r2
 800650a:	658b      	str	r3, [r1, #88]	; 0x58
 800650c:	e001      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
 8006510:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d035      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006522:	2b10      	cmp	r3, #16
 8006524:	d00c      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006526:	2b10      	cmp	r3, #16
 8006528:	d802      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01b      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800652e:	e017      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006530:	2b20      	cmp	r3, #32
 8006532:	d00c      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d018      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006538:	e012      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800653a:	bf00      	nop
 800653c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006540:	4baf      	ldr	r3, [pc, #700]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	4aae      	ldr	r2, [pc, #696]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800654a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800654c:	e00e      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3304      	adds	r3, #4
 8006552:	2102      	movs	r1, #2
 8006554:	4618      	mov	r0, r3
 8006556:	f001 fadd 	bl	8007b14 <RCCEx_PLL2_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800655e:	e005      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	75fb      	strb	r3, [r7, #23]
      break;
 8006564:	e002      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800656a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800656c:	7dfb      	ldrb	r3, [r7, #23]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006572:	4ba3      	ldr	r3, [pc, #652]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800657e:	49a0      	ldr	r1, [pc, #640]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006580:	4313      	orrs	r3, r2
 8006582:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006584:	e001      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d042      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659e:	d01f      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80065a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a4:	d805      	bhi.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	d00e      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x392>
 80065b0:	e01f      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80065b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065b6:	d01f      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80065b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065bc:	d01e      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80065be:	e018      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c0:	4b8f      	ldr	r3, [pc, #572]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a8e      	ldr	r2, [pc, #568]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065cc:	e017      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 fa9d 	bl	8007b14 <RCCEx_PLL2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065de:	e00e      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3324      	adds	r3, #36	; 0x24
 80065e4:	2100      	movs	r1, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fbb6 	bl	8007d58 <RCCEx_PLL3_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065f0:	e005      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
      break;
 80065f6:	e002      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80065f8:	bf00      	nop
 80065fa:	e000      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80065fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d109      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006604:	4b7e      	ldr	r3, [pc, #504]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006608:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	497b      	ldr	r1, [pc, #492]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006612:	4313      	orrs	r3, r2
 8006614:	650b      	str	r3, [r1, #80]	; 0x50
 8006616:	e001      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d042      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006630:	d01b      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006636:	d805      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006638:	2b00      	cmp	r3, #0
 800663a:	d022      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006640:	d00a      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006642:	e01b      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006644:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006648:	d01d      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800664a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800664e:	d01c      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006650:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006654:	d01b      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006656:	e011      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	2101      	movs	r1, #1
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fa58 	bl	8007b14 <RCCEx_PLL2_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006668:	e012      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3324      	adds	r3, #36	; 0x24
 800666e:	2101      	movs	r1, #1
 8006670:	4618      	mov	r0, r3
 8006672:	f001 fb71 	bl	8007d58 <RCCEx_PLL3_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800667a:	e009      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	75fb      	strb	r3, [r7, #23]
      break;
 8006680:	e006      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006682:	bf00      	nop
 8006684:	e004      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006686:	bf00      	nop
 8006688:	e002      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800668a:	bf00      	nop
 800668c:	e000      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800668e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006696:	4b5a      	ldr	r3, [pc, #360]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a2:	4957      	ldr	r1, [pc, #348]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	650b      	str	r3, [r1, #80]	; 0x50
 80066a8:	e001      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d044      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c4:	d01b      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80066c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ca:	d805      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d022      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80066d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d4:	d00a      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80066d6:	e01b      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066dc:	d01d      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80066de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066e2:	d01c      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80066e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066e8:	d01b      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066ea:	e011      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 fa0e 	bl	8007b14 <RCCEx_PLL2_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066fc:	e012      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3324      	adds	r3, #36	; 0x24
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fb27 	bl	8007d58 <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800670e:	e009      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	75fb      	strb	r3, [r7, #23]
      break;
 8006714:	e006      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006716:	bf00      	nop
 8006718:	e004      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800671a:	bf00      	nop
 800671c:	e002      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800671e:	bf00      	nop
 8006720:	e000      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800672a:	4b35      	ldr	r3, [pc, #212]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800672c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006738:	4931      	ldr	r1, [pc, #196]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800673a:	4313      	orrs	r3, r2
 800673c:	658b      	str	r3, [r1, #88]	; 0x58
 800673e:	e001      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d02d      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006758:	d005      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800675a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800675e:	d009      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d013      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006764:	e00f      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006766:	4b26      	ldr	r3, [pc, #152]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	4a25      	ldr	r2, [pc, #148]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800676c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006772:	e00c      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	2101      	movs	r1, #1
 800677a:	4618      	mov	r0, r3
 800677c:	f001 f9ca 	bl	8007b14 <RCCEx_PLL2_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006784:	e003      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	75fb      	strb	r3, [r7, #23]
      break;
 800678a:	e000      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800678c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d109      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006794:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006798:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a0:	4917      	ldr	r1, [pc, #92]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	650b      	str	r3, [r1, #80]	; 0x50
 80067a6:	e001      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d037      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d81b      	bhi.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	08006805 	.word	0x08006805
 80067cc:	080067d9 	.word	0x080067d9
 80067d0:	080067e7 	.word	0x080067e7
 80067d4:	08006805 	.word	0x08006805
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	4a08      	ldr	r2, [pc, #32]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067e4:	e00f      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3304      	adds	r3, #4
 80067ea:	2102      	movs	r1, #2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 f991 	bl	8007b14 <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067f6:	e006      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	75fb      	strb	r3, [r7, #23]
      break;
 80067fc:	e003      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80067fe:	bf00      	nop
 8006800:	58024400 	.word	0x58024400
      break;
 8006804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800680c:	4b04      	ldr	r3, [pc, #16]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800680e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006810:	f023 0203 	bic.w	r2, r3, #3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	4901      	ldr	r1, [pc, #4]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800681e:	e003      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8006820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 829b 	beq.w	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800683c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006840:	f000 81a9 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800684a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684e:	f000 81a2 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006858:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800685c:	f000 819b 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006866:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 800686a:	f000 8194 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006874:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8006878:	f000 818d 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006882:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8006886:	f000 8186 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006890:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8006894:	f000 817f 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800689e:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 80068a2:	f000 8178 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068ac:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 80068b0:	f000 8171 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068ba:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80068be:	f000 816a 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068c8:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 80068cc:	f000 8163 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068d6:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 80068da:	f000 815c 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068e4:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 80068e8:	f000 8155 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068f2:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 80068f6:	f000 814e 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006900:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8006904:	f000 8147 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800690e:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8006912:	f000 8140 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800691c:	4aa8      	ldr	r2, [pc, #672]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800691e:	4293      	cmp	r3, r2
 8006920:	f000 8139 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800692a:	4aa6      	ldr	r2, [pc, #664]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800692c:	4293      	cmp	r3, r2
 800692e:	f000 8132 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006938:	4aa3      	ldr	r2, [pc, #652]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	f000 812b 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006946:	4aa1      	ldr	r2, [pc, #644]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8006948:	4293      	cmp	r3, r2
 800694a:	f000 8124 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006954:	4a9e      	ldr	r2, [pc, #632]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006956:	4293      	cmp	r3, r2
 8006958:	f000 811d 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006962:	4a9c      	ldr	r2, [pc, #624]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8006964:	4293      	cmp	r3, r2
 8006966:	f000 8116 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006970:	4a99      	ldr	r2, [pc, #612]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f000 810f 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800697e:	4a97      	ldr	r2, [pc, #604]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	f000 8108 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800698c:	4a94      	ldr	r2, [pc, #592]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	f000 8101 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800699a:	4a92      	ldr	r2, [pc, #584]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	f000 80fa 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069a8:	4a8f      	ldr	r2, [pc, #572]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	f000 80f3 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069b6:	4a8d      	ldr	r2, [pc, #564]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	f000 80ec 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069c4:	4a8a      	ldr	r2, [pc, #552]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	f000 80e5 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069d2:	4a88      	ldr	r2, [pc, #544]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	f000 80de 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069e0:	4a85      	ldr	r2, [pc, #532]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	f000 80d7 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ee:	4a83      	ldr	r2, [pc, #524]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	f000 80d0 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069fc:	4a80      	ldr	r2, [pc, #512]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	f000 80c9 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a0a:	4a7e      	ldr	r2, [pc, #504]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	f000 80c2 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a18:	4a7b      	ldr	r2, [pc, #492]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	f000 80bb 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a26:	4a79      	ldr	r2, [pc, #484]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	f000 80b4 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a34:	4a76      	ldr	r2, [pc, #472]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	f000 80ad 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a42:	4a74      	ldr	r2, [pc, #464]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	f000 80a6 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a50:	4a71      	ldr	r2, [pc, #452]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	f000 809f 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a5e:	4a6f      	ldr	r2, [pc, #444]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	f000 8098 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a6c:	4a6c      	ldr	r2, [pc, #432]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	f000 8091 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a7a:	4a6a      	ldr	r2, [pc, #424]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	f000 808a 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a88:	4a67      	ldr	r2, [pc, #412]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	f000 8083 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a96:	4a65      	ldr	r2, [pc, #404]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d07c      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aa2:	4a63      	ldr	r2, [pc, #396]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d076      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aae:	4a61      	ldr	r2, [pc, #388]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d070      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aba:	4a5f      	ldr	r2, [pc, #380]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d06a      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ac6:	4a5d      	ldr	r2, [pc, #372]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d064      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ad2:	4a5b      	ldr	r2, [pc, #364]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d05e      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ade:	4a59      	ldr	r2, [pc, #356]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d058      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aea:	4a57      	ldr	r2, [pc, #348]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d052      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006af6:	4a55      	ldr	r2, [pc, #340]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d04c      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b02:	4a53      	ldr	r2, [pc, #332]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d046      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b0e:	4a51      	ldr	r2, [pc, #324]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d040      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b1a:	4a4f      	ldr	r2, [pc, #316]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d03a      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b26:	4a4d      	ldr	r2, [pc, #308]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d034      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b32:	4a4b      	ldr	r2, [pc, #300]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d02e      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b3e:	4a49      	ldr	r2, [pc, #292]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d028      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b4a:	4a47      	ldr	r2, [pc, #284]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d022      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b56:	4a45      	ldr	r2, [pc, #276]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d01c      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b62:	4a43      	ldr	r2, [pc, #268]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d016      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b6e:	4a41      	ldr	r2, [pc, #260]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d010      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b7a:	4a3f      	ldr	r2, [pc, #252]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00a      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b86:	4a3d      	ldr	r2, [pc, #244]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b8c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006b90:	483b      	ldr	r0, [pc, #236]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8006b92:	f7fa f926 	bl	8000de2 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b96:	4b3b      	ldr	r3, [pc, #236]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3a      	ldr	r2, [pc, #232]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ba2:	f7fa fbd1 	bl	8001348 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ba8:	e06e      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006baa:	f7fa fbcd 	bl	8001348 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b64      	cmp	r3, #100	; 0x64
 8006bb6:	d967      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	75fb      	strb	r3, [r7, #23]
        break;
 8006bbc:	e06a      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8006bbe:	bf00      	nop
 8006bc0:	00010300 	.word	0x00010300
 8006bc4:	00011300 	.word	0x00011300
 8006bc8:	00012300 	.word	0x00012300
 8006bcc:	00013300 	.word	0x00013300
 8006bd0:	00014300 	.word	0x00014300
 8006bd4:	00015300 	.word	0x00015300
 8006bd8:	00016300 	.word	0x00016300
 8006bdc:	00017300 	.word	0x00017300
 8006be0:	00018300 	.word	0x00018300
 8006be4:	00019300 	.word	0x00019300
 8006be8:	0001a300 	.word	0x0001a300
 8006bec:	0001b300 	.word	0x0001b300
 8006bf0:	0001c300 	.word	0x0001c300
 8006bf4:	0001d300 	.word	0x0001d300
 8006bf8:	0001e300 	.word	0x0001e300
 8006bfc:	0001f300 	.word	0x0001f300
 8006c00:	00020300 	.word	0x00020300
 8006c04:	00021300 	.word	0x00021300
 8006c08:	00022300 	.word	0x00022300
 8006c0c:	00023300 	.word	0x00023300
 8006c10:	00024300 	.word	0x00024300
 8006c14:	00025300 	.word	0x00025300
 8006c18:	00026300 	.word	0x00026300
 8006c1c:	00027300 	.word	0x00027300
 8006c20:	00028300 	.word	0x00028300
 8006c24:	00029300 	.word	0x00029300
 8006c28:	0002a300 	.word	0x0002a300
 8006c2c:	0002b300 	.word	0x0002b300
 8006c30:	0002c300 	.word	0x0002c300
 8006c34:	0002d300 	.word	0x0002d300
 8006c38:	0002e300 	.word	0x0002e300
 8006c3c:	0002f300 	.word	0x0002f300
 8006c40:	00030300 	.word	0x00030300
 8006c44:	00031300 	.word	0x00031300
 8006c48:	00032300 	.word	0x00032300
 8006c4c:	00033300 	.word	0x00033300
 8006c50:	00034300 	.word	0x00034300
 8006c54:	00035300 	.word	0x00035300
 8006c58:	00036300 	.word	0x00036300
 8006c5c:	00037300 	.word	0x00037300
 8006c60:	00038300 	.word	0x00038300
 8006c64:	00039300 	.word	0x00039300
 8006c68:	0003a300 	.word	0x0003a300
 8006c6c:	0003b300 	.word	0x0003b300
 8006c70:	0003c300 	.word	0x0003c300
 8006c74:	0003d300 	.word	0x0003d300
 8006c78:	0003e300 	.word	0x0003e300
 8006c7c:	0003f300 	.word	0x0003f300
 8006c80:	0800b754 	.word	0x0800b754
 8006c84:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c88:	4bb9      	ldr	r3, [pc, #740]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d08a      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d166      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c9a:	4bb6      	ldr	r3, [pc, #728]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ca4:	4053      	eors	r3, r2
 8006ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d013      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cae:	4bb1      	ldr	r3, [pc, #708]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cb8:	4bae      	ldr	r3, [pc, #696]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	4aad      	ldr	r2, [pc, #692]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cc4:	4bab      	ldr	r3, [pc, #684]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc8:	4aaa      	ldr	r2, [pc, #680]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006cd0:	4aa8      	ldr	r2, [pc, #672]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce0:	d115      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce2:	f7fa fb31 	bl	8001348 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ce8:	e00b      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7fa fb2d 	bl	8001348 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d902      	bls.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	75fb      	strb	r3, [r7, #23]
            break;
 8006d00:	e005      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d02:	4b9c      	ldr	r3, [pc, #624]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0ed      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d126      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d22:	d10d      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8006d24:	4b93      	ldr	r3, [pc, #588]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d32:	0919      	lsrs	r1, r3, #4
 8006d34:	4b90      	ldr	r3, [pc, #576]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006d36:	400b      	ands	r3, r1
 8006d38:	498e      	ldr	r1, [pc, #568]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	610b      	str	r3, [r1, #16]
 8006d3e:	e005      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8006d40:	4b8c      	ldr	r3, [pc, #560]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	4a8b      	ldr	r2, [pc, #556]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d4a:	6113      	str	r3, [r2, #16]
 8006d4c:	4b89      	ldr	r3, [pc, #548]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d5a:	4986      	ldr	r1, [pc, #536]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	670b      	str	r3, [r1, #112]	; 0x70
 8006d60:	e004      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	75bb      	strb	r3, [r7, #22]
 8006d66:	e001      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d07e      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d7c:	2b28      	cmp	r3, #40	; 0x28
 8006d7e:	d867      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8006d80:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006e57 	.word	0x08006e57
 8006d8c:	08006e51 	.word	0x08006e51
 8006d90:	08006e51 	.word	0x08006e51
 8006d94:	08006e51 	.word	0x08006e51
 8006d98:	08006e51 	.word	0x08006e51
 8006d9c:	08006e51 	.word	0x08006e51
 8006da0:	08006e51 	.word	0x08006e51
 8006da4:	08006e51 	.word	0x08006e51
 8006da8:	08006e2d 	.word	0x08006e2d
 8006dac:	08006e51 	.word	0x08006e51
 8006db0:	08006e51 	.word	0x08006e51
 8006db4:	08006e51 	.word	0x08006e51
 8006db8:	08006e51 	.word	0x08006e51
 8006dbc:	08006e51 	.word	0x08006e51
 8006dc0:	08006e51 	.word	0x08006e51
 8006dc4:	08006e51 	.word	0x08006e51
 8006dc8:	08006e3f 	.word	0x08006e3f
 8006dcc:	08006e51 	.word	0x08006e51
 8006dd0:	08006e51 	.word	0x08006e51
 8006dd4:	08006e51 	.word	0x08006e51
 8006dd8:	08006e51 	.word	0x08006e51
 8006ddc:	08006e51 	.word	0x08006e51
 8006de0:	08006e51 	.word	0x08006e51
 8006de4:	08006e51 	.word	0x08006e51
 8006de8:	08006e57 	.word	0x08006e57
 8006dec:	08006e51 	.word	0x08006e51
 8006df0:	08006e51 	.word	0x08006e51
 8006df4:	08006e51 	.word	0x08006e51
 8006df8:	08006e51 	.word	0x08006e51
 8006dfc:	08006e51 	.word	0x08006e51
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08006e51 	.word	0x08006e51
 8006e08:	08006e57 	.word	0x08006e57
 8006e0c:	08006e51 	.word	0x08006e51
 8006e10:	08006e51 	.word	0x08006e51
 8006e14:	08006e51 	.word	0x08006e51
 8006e18:	08006e51 	.word	0x08006e51
 8006e1c:	08006e51 	.word	0x08006e51
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	08006e57 	.word	0x08006e57
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	2101      	movs	r1, #1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fe6e 	bl	8007b14 <RCCEx_PLL2_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e3c:	e00c      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3324      	adds	r3, #36	; 0x24
 8006e42:	2101      	movs	r1, #1
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 ff87 	bl	8007d58 <RCCEx_PLL3_Config>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e4e:	e003      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
      break;
 8006e54:	e000      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8006e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e5e:	4b45      	ldr	r3, [pc, #276]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6a:	4942      	ldr	r1, [pc, #264]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	654b      	str	r3, [r1, #84]	; 0x54
 8006e70:	e001      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d037      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	d820      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006ed3 	.word	0x08006ed3
 8006e94:	08006ea9 	.word	0x08006ea9
 8006e98:	08006ebb 	.word	0x08006ebb
 8006e9c:	08006ed3 	.word	0x08006ed3
 8006ea0:	08006ed3 	.word	0x08006ed3
 8006ea4:	08006ed3 	.word	0x08006ed3
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	2101      	movs	r1, #1
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fe30 	bl	8007b14 <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006eb8:	e00c      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3324      	adds	r3, #36	; 0x24
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 ff49 	bl	8007d58 <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8006ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006eda:	4b26      	ldr	r3, [pc, #152]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	f023 0207 	bic.w	r2, r3, #7
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	4923      	ldr	r1, [pc, #140]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	654b      	str	r3, [r1, #84]	; 0x54
 8006eec:	e001      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d040      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f04:	2b05      	cmp	r3, #5
 8006f06:	d821      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006f08:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f53 	.word	0x08006f53
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f3b 	.word	0x08006f3b
 8006f1c:	08006f53 	.word	0x08006f53
 8006f20:	08006f53 	.word	0x08006f53
 8006f24:	08006f53 	.word	0x08006f53
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fdf0 	bl	8007b14 <RCCEx_PLL2_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f38:	e00c      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3324      	adds	r3, #36	; 0x24
 8006f3e:	2101      	movs	r1, #1
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 ff09 	bl	8007d58 <RCCEx_PLL3_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f4a:	e003      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f50:	e000      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d110      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f5a:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5e:	f023 0207 	bic.w	r2, r3, #7
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f68:	4902      	ldr	r1, [pc, #8]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	658b      	str	r3, [r1, #88]	; 0x58
 8006f6e:	e007      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006f70:	58024800 	.word	0x58024800
 8006f74:	58024400 	.word	0x58024400
 8006f78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d044      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f96:	d01b      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f9c:	d805      	bhi.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d022      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8006fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fa6:	d00a      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006fa8:	e01b      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
 8006faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fae:	d01d      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8006fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fb4:	d01c      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fba:	d01b      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8006fbc:	e011      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fda5 	bl	8007b14 <RCCEx_PLL2_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006fce:	e012      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3324      	adds	r3, #36	; 0x24
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 febe 	bl	8007d58 <RCCEx_PLL3_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006fe0:	e009      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe6:	e006      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8006fe8:	bf00      	nop
 8006fea:	e004      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8006fec:	bf00      	nop
 8006fee:	e002      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8006ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ffc:	4bb7      	ldr	r3, [pc, #732]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800700a:	49b4      	ldr	r1, [pc, #720]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800700c:	4313      	orrs	r3, r2
 800700e:	654b      	str	r3, [r1, #84]	; 0x54
 8007010:	e001      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d044      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800702c:	d01b      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 800702e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007032:	d805      	bhi.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d022      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8007038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703c:	d00a      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800703e:	e01b      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007044:	d01d      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xe46>
 8007046:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800704a:	d01c      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 800704c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007050:	d01b      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 8007052:	e011      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	2100      	movs	r1, #0
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fd5a 	bl	8007b14 <RCCEx_PLL2_Config>
 8007060:	4603      	mov	r3, r0
 8007062:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007064:	e012      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3324      	adds	r3, #36	; 0x24
 800706a:	2102      	movs	r1, #2
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fe73 	bl	8007d58 <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007076:	e009      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
      break;
 800707c:	e006      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800707e:	bf00      	nop
 8007080:	e004      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8007082:	bf00      	nop
 8007084:	e002      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8007086:	bf00      	nop
 8007088:	e000      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800708a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007092:	4b92      	ldr	r3, [pc, #584]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070a0:	498e      	ldr	r1, [pc, #568]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	658b      	str	r3, [r1, #88]	; 0x58
 80070a6:	e001      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d044      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c2:	d01b      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xec0>
 80070c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c8:	d805      	bhi.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d022      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 80070ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d2:	d00a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xeae>
 80070d4:	e01b      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xed2>
 80070d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070da:	d01d      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80070dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070e0:	d01c      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xee0>
 80070e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070e6:	d01b      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 80070e8:	e011      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3304      	adds	r3, #4
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fd0f 	bl	8007b14 <RCCEx_PLL2_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070fa:	e012      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3324      	adds	r3, #36	; 0x24
 8007100:	2102      	movs	r1, #2
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fe28 	bl	8007d58 <RCCEx_PLL3_Config>
 8007108:	4603      	mov	r3, r0
 800710a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800710c:	e009      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	75fb      	strb	r3, [r7, #23]
      break;
 8007112:	e006      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007114:	bf00      	nop
 8007116:	e004      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007118:	bf00      	nop
 800711a:	e002      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800711c:	bf00      	nop
 800711e:	e000      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007128:	4b6c      	ldr	r3, [pc, #432]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007136:	4969      	ldr	r1, [pc, #420]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	658b      	str	r3, [r1, #88]	; 0x58
 800713c:	e001      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d037      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007158:	d015      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007164:	d00f      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007176:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800717a:	d004      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800717c:	f240 413a 	movw	r1, #1082	; 0x43a
 8007180:	4857      	ldr	r0, [pc, #348]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8007182:	f7f9 fe2e 	bl	8000de2 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007190:	d10b      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3324      	adds	r3, #36	; 0x24
 8007196:	2102      	movs	r1, #2
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fddd 	bl	8007d58 <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00c      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	75bb      	strb	r3, [r7, #22]
 80071a8:	e009      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80071aa:	4b4c      	ldr	r3, [pc, #304]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b8:	4948      	ldr	r1, [pc, #288]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0310 	and.w	r3, r3, #16
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d037      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d4:	d015      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e0:	d00f      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071f6:	d004      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80071f8:	f240 414f 	movw	r1, #1103	; 0x44f
 80071fc:	4838      	ldr	r0, [pc, #224]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 80071fe:	f7f9 fdf0 	bl	8000de2 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720c:	d10b      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3324      	adds	r3, #36	; 0x24
 8007212:	2102      	movs	r1, #2
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fd9f 	bl	8007d58 <RCCEx_PLL3_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00c      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	75bb      	strb	r3, [r7, #22]
 8007224:	e009      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007226:	4b2d      	ldr	r3, [pc, #180]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007234:	4929      	ldr	r1, [pc, #164]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007236:	4313      	orrs	r3, r2
 8007238:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d030      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800724c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007250:	d00d      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x1032>
 8007252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007256:	d016      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x104a>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d111      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3304      	adds	r3, #4
 8007260:	2100      	movs	r1, #0
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fc56 	bl	8007b14 <RCCEx_PLL2_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800726c:	e00c      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3324      	adds	r3, #36	; 0x24
 8007272:	2102      	movs	r1, #2
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fd6f 	bl	8007d58 <RCCEx_PLL3_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800727e:	e003      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]
      break;
 8007284:	e000      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 8007286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007292:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800729c:	490f      	ldr	r1, [pc, #60]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	658b      	str	r3, [r1, #88]	; 0x58
 80072a2:	e001      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d034      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072be:	d011      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80072c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072c4:	d01a      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80072c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ca:	d114      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072cc:	4b03      	ldr	r3, [pc, #12]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	4a02      	ldr	r2, [pc, #8]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80072d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80072d8:	e011      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 80072da:	bf00      	nop
 80072dc:	58024400 	.word	0x58024400
 80072e0:	0800b754 	.word	0x0800b754

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3324      	adds	r3, #36	; 0x24
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fd34 	bl	8007d58 <RCCEx_PLL3_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80072f4:	e003      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
      break;
 80072fa:	e000      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 80072fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007304:	4b9c      	ldr	r3, [pc, #624]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007312:	4999      	ldr	r1, [pc, #612]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007314:	4313      	orrs	r3, r2
 8007316:	654b      	str	r3, [r1, #84]	; 0x54
 8007318:	e001      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d037      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733a:	d004      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x110a>
 800733c:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8007340:	488e      	ldr	r0, [pc, #568]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007342:	f7f9 fd4e 	bl	8000de2 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800734e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007352:	d007      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007354:	e00f      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007356:	4b88      	ldr	r3, [pc, #544]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	4a87      	ldr	r2, [pc, #540]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800735c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007360:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007362:	e00b      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3304      	adds	r3, #4
 8007368:	2102      	movs	r1, #2
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fbd2 	bl	8007b14 <RCCEx_PLL2_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007374:	e002      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
      break;
 800737a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007382:	4b7d      	ldr	r3, [pc, #500]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007386:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738e:	497a      	ldr	r1, [pc, #488]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007390:	4313      	orrs	r3, r2
 8007392:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007394:	e001      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3324      	adds	r3, #36	; 0x24
 80073aa:	2102      	movs	r1, #2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fcd3 	bl	8007d58 <RCCEx_PLL3_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d02f      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d0:	d00c      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 80073d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d6:	d802      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d011      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 80073dc:	e00d      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x11be>
 80073de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e2:	d00f      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80073e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e8:	d00e      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 80073ea:	e006      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ec:	4b62      	ldr	r3, [pc, #392]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	4a61      	ldr	r2, [pc, #388]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80073f8:	e007      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	75fb      	strb	r3, [r7, #23]
      break;
 80073fe:	e004      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007400:	bf00      	nop
 8007402:	e002      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007404:	bf00      	nop
 8007406:	e000      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007410:	4b59      	ldr	r3, [pc, #356]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741c:	4956      	ldr	r1, [pc, #344]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	654b      	str	r3, [r1, #84]	; 0x54
 8007422:	e001      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d016      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007444:	d004      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8007446:	f240 5116 	movw	r1, #1302	; 0x516
 800744a:	484c      	ldr	r0, [pc, #304]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800744c:	f7f9 fcc9 	bl	8000de2 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007450:	4b49      	ldr	r3, [pc, #292]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007454:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745c:	4946      	ldr	r1, [pc, #280]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d019      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x1252>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800747e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007482:	d004      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x1252>
 8007484:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8007488:	483c      	ldr	r0, [pc, #240]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800748a:	f7f9 fcaa 	bl	8000de2 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800748e:	4b3a      	ldr	r3, [pc, #232]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800749c:	4936      	ldr	r1, [pc, #216]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074be:	d004      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80074c0:	f240 512a 	movw	r1, #1322	; 0x52a
 80074c4:	482d      	ldr	r0, [pc, #180]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80074c6:	f7f9 fc8c 	bl	8000de2 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074ca:	4b2b      	ldr	r3, [pc, #172]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074d6:	4928      	ldr	r1, [pc, #160]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01d      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074fc:	d004      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 80074fe:	f240 5134 	movw	r1, #1332	; 0x534
 8007502:	481e      	ldr	r0, [pc, #120]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007504:	f7f9 fc6d 	bl	8000de2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800750e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007512:	6113      	str	r3, [r2, #16]
 8007514:	4b18      	ldr	r3, [pc, #96]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800751e:	4916      	ldr	r1, [pc, #88]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007520:	4313      	orrs	r3, r2
 8007522:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	da1b      	bge.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00e      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800753c:	d009      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007546:	d004      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007548:	f240 513e 	movw	r1, #1342	; 0x53e
 800754c:	480b      	ldr	r0, [pc, #44]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800754e:	f7f9 fc48 	bl	8000de2 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007552:	4b09      	ldr	r3, [pc, #36]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007556:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755e:	4906      	ldr	r1, [pc, #24]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007560:	4313      	orrs	r3, r2
 8007562:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007564:	7dbb      	ldrb	r3, [r7, #22]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	e000      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	58024400 	.word	0x58024400
 800757c:	0800b754 	.word	0x0800b754

08007580 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007584:	f7fe fe12 	bl	80061ac <HAL_RCC_GetHCLKFreq>
 8007588:	4601      	mov	r1, r0
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	091b      	lsrs	r3, r3, #4
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	4a04      	ldr	r2, [pc, #16]	; (80075a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007596:	5cd3      	ldrb	r3, [r2, r3]
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	58024400 	.word	0x58024400
 80075a8:	0800b850 	.word	0x0800b850

080075ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b089      	sub	sp, #36	; 0x24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075b4:	4b9d      	ldr	r3, [pc, #628]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80075be:	4b9b      	ldr	r3, [pc, #620]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	0b1b      	lsrs	r3, r3, #12
 80075c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075c8:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80075ca:	4b98      	ldr	r3, [pc, #608]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80075d4:	4b95      	ldr	r3, [pc, #596]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	08db      	lsrs	r3, r3, #3
 80075da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 810a 	beq.w	800780c <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d05a      	beq.n	80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d302      	bcc.n	8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8007602:	2b02      	cmp	r3, #2
 8007604:	d078      	beq.n	80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8007606:	e099      	b.n	800773c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007608:	4b88      	ldr	r3, [pc, #544]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	d02d      	beq.n	8007670 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007614:	4b85      	ldr	r3, [pc, #532]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	08db      	lsrs	r3, r3, #3
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	4a84      	ldr	r2, [pc, #528]	; (8007830 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
 8007624:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763e:	4b7b      	ldr	r3, [pc, #492]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007652:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800766e:	e087      	b.n	8007780 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007838 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800767e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007682:	4b6a      	ldr	r3, [pc, #424]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007692:	ed97 6a03 	vldr	s12, [r7, #12]
 8007696:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800769a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076b2:	e065      	b.n	8007780 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80076c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c6:	4b59      	ldr	r3, [pc, #356]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076f6:	e043      	b.n	8007780 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770a:	4b48      	ldr	r3, [pc, #288]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771a:	ed97 6a03 	vldr	s12, [r7, #12]
 800771e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800773a:	e021      	b.n	8007780 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007746:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800774a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774e:	4b37      	ldr	r3, [pc, #220]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007762:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800777e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	0a5b      	lsrs	r3, r3, #9
 8007786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800779a:	edd7 6a07 	vldr	s13, [r7, #28]
 800779e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a6:	ee17 2a90 	vmov	r2, s15
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80077ae:	4b1f      	ldr	r3, [pc, #124]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	0c1b      	lsrs	r3, r3, #16
 80077b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d4:	ee17 2a90 	vmov	r2, s15
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80077dc:	4b13      	ldr	r3, [pc, #76]	; (800782c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	0e1b      	lsrs	r3, r3, #24
 80077e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007802:	ee17 2a90 	vmov	r2, s15
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800780a:	e008      	b.n	800781e <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	609a      	str	r2, [r3, #8]
}
 800781e:	bf00      	nop
 8007820:	3724      	adds	r7, #36	; 0x24
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	58024400 	.word	0x58024400
 8007830:	03d09000 	.word	0x03d09000
 8007834:	46000000 	.word	0x46000000
 8007838:	4c742400 	.word	0x4c742400
 800783c:	4a742400 	.word	0x4a742400
 8007840:	4b371b00 	.word	0x4b371b00

08007844 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007844:	b480      	push	{r7}
 8007846:	b089      	sub	sp, #36	; 0x24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800784c:	4b9d      	ldr	r3, [pc, #628]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007856:	4b9b      	ldr	r3, [pc, #620]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	0d1b      	lsrs	r3, r3, #20
 800785c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007860:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8007862:	4b98      	ldr	r3, [pc, #608]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786a:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800786c:	4b95      	ldr	r3, [pc, #596]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800786e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007870:	08db      	lsrs	r3, r3, #3
 8007872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	fb02 f303 	mul.w	r3, r2, r3
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007884:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 810a 	beq.w	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d05a      	beq.n	800794c <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007896:	2b01      	cmp	r3, #1
 8007898:	d302      	bcc.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 800789a:	2b02      	cmp	r3, #2
 800789c:	d078      	beq.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800789e:	e099      	b.n	80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078a0:	4b88      	ldr	r3, [pc, #544]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d02d      	beq.n	8007908 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078ac:	4b85      	ldr	r3, [pc, #532]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	08db      	lsrs	r3, r3, #3
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	4a84      	ldr	r2, [pc, #528]	; (8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80078b8:	fa22 f303 	lsr.w	r3, r2, r3
 80078bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d6:	4b7b      	ldr	r3, [pc, #492]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80078ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007902:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007906:	e087      	b.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791a:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792a:	ed97 6a03 	vldr	s12, [r7, #12]
 800792e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800794a:	e065      	b.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800795a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795e:	4b59      	ldr	r3, [pc, #356]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007972:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800798e:	e043      	b.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800799e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a2:	4b48      	ldr	r3, [pc, #288]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079d2:	e021      	b.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80079e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e6:	4b37      	ldr	r3, [pc, #220]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a18:	4b2a      	ldr	r3, [pc, #168]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	0a5b      	lsrs	r3, r3, #9
 8007a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3e:	ee17 2a90 	vmov	r2, s15
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a46:	4b1f      	ldr	r3, [pc, #124]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	0c1b      	lsrs	r3, r3, #16
 8007a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a50:	ee07 3a90 	vmov	s15, r3
 8007a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a6c:	ee17 2a90 	vmov	r2, s15
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a74:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a78:	0e1b      	lsrs	r3, r3, #24
 8007a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9a:	ee17 2a90 	vmov	r2, s15
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	609a      	str	r2, [r3, #8]
}
 8007ab6:	bf00      	nop
 8007ab8:	3724      	adds	r7, #36	; 0x24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	58024400 	.word	0x58024400
 8007ac8:	03d09000 	.word	0x03d09000
 8007acc:	46000000 	.word	0x46000000
 8007ad0:	4c742400 	.word	0x4c742400
 8007ad4:	4a742400 	.word	0x4a742400
 8007ad8:	4b371b00 	.word	0x4b371b00

08007adc <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ae0:	f7fe f9f2 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4b08      	ldr	r3, [pc, #32]	; (8007b08 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	0a1b      	lsrs	r3, r3, #8
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	4a06      	ldr	r2, [pc, #24]	; (8007b0c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007af2:	5cd3      	ldrb	r3, [r2, r3]
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	fa21 f303 	lsr.w	r3, r1, r3
 8007afc:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007afe:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007b00:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007b02:	681b      	ldr	r3, [r3, #0]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	0800b850 	.word	0x0800b850
 8007b10:	24000000 	.word	0x24000000

08007b14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <RCCEx_PLL2_Config+0x1e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b3f      	cmp	r3, #63	; 0x3f
 8007b30:	d904      	bls.n	8007b3c <RCCEx_PLL2_Config+0x28>
 8007b32:	f640 2186 	movw	r1, #2694	; 0xa86
 8007b36:	4885      	ldr	r0, [pc, #532]	; (8007d4c <RCCEx_PLL2_Config+0x238>)
 8007b38:	f7f9 f953 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d904      	bls.n	8007b4e <RCCEx_PLL2_Config+0x3a>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b4c:	d904      	bls.n	8007b58 <RCCEx_PLL2_Config+0x44>
 8007b4e:	f640 2187 	movw	r1, #2695	; 0xa87
 8007b52:	487e      	ldr	r0, [pc, #504]	; (8007d4c <RCCEx_PLL2_Config+0x238>)
 8007b54:	f7f9 f945 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <RCCEx_PLL2_Config+0x54>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b80      	cmp	r3, #128	; 0x80
 8007b66:	d904      	bls.n	8007b72 <RCCEx_PLL2_Config+0x5e>
 8007b68:	f640 2188 	movw	r1, #2696	; 0xa88
 8007b6c:	4877      	ldr	r0, [pc, #476]	; (8007d4c <RCCEx_PLL2_Config+0x238>)
 8007b6e:	f7f9 f938 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <RCCEx_PLL2_Config+0x6e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d904      	bls.n	8007b8c <RCCEx_PLL2_Config+0x78>
 8007b82:	f640 2189 	movw	r1, #2697	; 0xa89
 8007b86:	4871      	ldr	r0, [pc, #452]	; (8007d4c <RCCEx_PLL2_Config+0x238>)
 8007b88:	f7f9 f92b 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <RCCEx_PLL2_Config+0x88>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d904      	bls.n	8007ba6 <RCCEx_PLL2_Config+0x92>
 8007b9c:	f640 218a 	movw	r1, #2698	; 0xa8a
 8007ba0:	486a      	ldr	r0, [pc, #424]	; (8007d4c <RCCEx_PLL2_Config+0x238>)
 8007ba2:	f7f9 f91e 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d010      	beq.n	8007bd0 <RCCEx_PLL2_Config+0xbc>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	2b40      	cmp	r3, #64	; 0x40
 8007bb4:	d00c      	beq.n	8007bd0 <RCCEx_PLL2_Config+0xbc>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	2b80      	cmp	r3, #128	; 0x80
 8007bbc:	d008      	beq.n	8007bd0 <RCCEx_PLL2_Config+0xbc>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8007bc4:	d004      	beq.n	8007bd0 <RCCEx_PLL2_Config+0xbc>
 8007bc6:	f640 218b 	movw	r1, #2699	; 0xa8b
 8007bca:	4860      	ldr	r0, [pc, #384]	; (8007d4c <RCCEx_PLL2_Config+0x238>)
 8007bcc:	f7f9 f909 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d008      	beq.n	8007bea <RCCEx_PLL2_Config+0xd6>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d004      	beq.n	8007bea <RCCEx_PLL2_Config+0xd6>
 8007be0:	f640 218c 	movw	r1, #2700	; 0xa8c
 8007be4:	4859      	ldr	r0, [pc, #356]	; (8007d4c <RCCEx_PLL2_Config+0x238>)
 8007be6:	f7f9 f8fc 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bf2:	d304      	bcc.n	8007bfe <RCCEx_PLL2_Config+0xea>
 8007bf4:	f640 218d 	movw	r1, #2701	; 0xa8d
 8007bf8:	4854      	ldr	r0, [pc, #336]	; (8007d4c <RCCEx_PLL2_Config+0x238>)
 8007bfa:	f7f9 f8f2 	bl	8000de2 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bfe:	4b54      	ldr	r3, [pc, #336]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d101      	bne.n	8007c0e <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e099      	b.n	8007d42 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c0e:	4b50      	ldr	r3, [pc, #320]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a4f      	ldr	r2, [pc, #316]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c1a:	f7f9 fb95 	bl	8001348 <HAL_GetTick>
 8007c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c20:	e008      	b.n	8007c34 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c22:	f7f9 fb91 	bl	8001348 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e086      	b.n	8007d42 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c34:	4b46      	ldr	r3, [pc, #280]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1f0      	bne.n	8007c22 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c40:	4b43      	ldr	r3, [pc, #268]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	031b      	lsls	r3, r3, #12
 8007c4e:	4940      	ldr	r1, [pc, #256]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	628b      	str	r3, [r1, #40]	; 0x28
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	025b      	lsls	r3, r3, #9
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	041b      	lsls	r3, r3, #16
 8007c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	061b      	lsls	r3, r3, #24
 8007c80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c84:	4932      	ldr	r1, [pc, #200]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c8a:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	492e      	ldr	r1, [pc, #184]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c9c:	4b2c      	ldr	r3, [pc, #176]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	f023 0220 	bic.w	r2, r3, #32
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	4929      	ldr	r1, [pc, #164]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cae:	4b28      	ldr	r3, [pc, #160]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	4a27      	ldr	r2, [pc, #156]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007cb4:	f023 0310 	bic.w	r3, r3, #16
 8007cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cba:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cbe:	4b25      	ldr	r3, [pc, #148]	; (8007d54 <RCCEx_PLL2_Config+0x240>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	69d2      	ldr	r2, [r2, #28]
 8007cc6:	00d2      	lsls	r2, r2, #3
 8007cc8:	4921      	ldr	r1, [pc, #132]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cce:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007cd4:	f043 0310 	orr.w	r3, r3, #16
 8007cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ce0:	4b1b      	ldr	r3, [pc, #108]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	4a1a      	ldr	r2, [pc, #104]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cec:	e00f      	b.n	8007d0e <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d106      	bne.n	8007d02 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cf4:	4b16      	ldr	r3, [pc, #88]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	4a15      	ldr	r2, [pc, #84]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d00:	e005      	b.n	8007d0e <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d02:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	4a12      	ldr	r2, [pc, #72]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d0e:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a0f      	ldr	r2, [pc, #60]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d1a:	f7f9 fb15 	bl	8001348 <HAL_GetTick>
 8007d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d20:	e008      	b.n	8007d34 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d22:	f7f9 fb11 	bl	8001348 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e006      	b.n	8007d42 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <RCCEx_PLL2_Config+0x23c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0f0      	beq.n	8007d22 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	0800b754 	.word	0x0800b754
 8007d50:	58024400 	.word	0x58024400
 8007d54:	ffff0007 	.word	0xffff0007

08007d58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <RCCEx_PLL3_Config+0x1e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b3f      	cmp	r3, #63	; 0x3f
 8007d74:	d904      	bls.n	8007d80 <RCCEx_PLL3_Config+0x28>
 8007d76:	f640 21ee 	movw	r1, #2798	; 0xaee
 8007d7a:	4887      	ldr	r0, [pc, #540]	; (8007f98 <RCCEx_PLL3_Config+0x240>)
 8007d7c:	f7f9 f831 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d904      	bls.n	8007d92 <RCCEx_PLL3_Config+0x3a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d90:	d904      	bls.n	8007d9c <RCCEx_PLL3_Config+0x44>
 8007d92:	f640 21ef 	movw	r1, #2799	; 0xaef
 8007d96:	4880      	ldr	r0, [pc, #512]	; (8007f98 <RCCEx_PLL3_Config+0x240>)
 8007d98:	f7f9 f823 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <RCCEx_PLL3_Config+0x54>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b80      	cmp	r3, #128	; 0x80
 8007daa:	d904      	bls.n	8007db6 <RCCEx_PLL3_Config+0x5e>
 8007dac:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8007db0:	4879      	ldr	r0, [pc, #484]	; (8007f98 <RCCEx_PLL3_Config+0x240>)
 8007db2:	f7f9 f816 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <RCCEx_PLL3_Config+0x6e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	2b80      	cmp	r3, #128	; 0x80
 8007dc4:	d904      	bls.n	8007dd0 <RCCEx_PLL3_Config+0x78>
 8007dc6:	f640 21f1 	movw	r1, #2801	; 0xaf1
 8007dca:	4873      	ldr	r0, [pc, #460]	; (8007f98 <RCCEx_PLL3_Config+0x240>)
 8007dcc:	f7f9 f809 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <RCCEx_PLL3_Config+0x88>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	2b80      	cmp	r3, #128	; 0x80
 8007dde:	d904      	bls.n	8007dea <RCCEx_PLL3_Config+0x92>
 8007de0:	f640 21f2 	movw	r1, #2802	; 0xaf2
 8007de4:	486c      	ldr	r0, [pc, #432]	; (8007f98 <RCCEx_PLL3_Config+0x240>)
 8007de6:	f7f8 fffc 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d013      	beq.n	8007e1a <RCCEx_PLL3_Config+0xc2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfa:	d00e      	beq.n	8007e1a <RCCEx_PLL3_Config+0xc2>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e04:	d009      	beq.n	8007e1a <RCCEx_PLL3_Config+0xc2>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e0e:	d004      	beq.n	8007e1a <RCCEx_PLL3_Config+0xc2>
 8007e10:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8007e14:	4860      	ldr	r0, [pc, #384]	; (8007f98 <RCCEx_PLL3_Config+0x240>)
 8007e16:	f7f8 ffe4 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <RCCEx_PLL3_Config+0xde>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e2a:	d004      	beq.n	8007e36 <RCCEx_PLL3_Config+0xde>
 8007e2c:	f640 21f4 	movw	r1, #2804	; 0xaf4
 8007e30:	4859      	ldr	r0, [pc, #356]	; (8007f98 <RCCEx_PLL3_Config+0x240>)
 8007e32:	f7f8 ffd6 	bl	8000de2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3e:	d304      	bcc.n	8007e4a <RCCEx_PLL3_Config+0xf2>
 8007e40:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8007e44:	4854      	ldr	r0, [pc, #336]	; (8007f98 <RCCEx_PLL3_Config+0x240>)
 8007e46:	f7f8 ffcc 	bl	8000de2 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e4a:	4b54      	ldr	r3, [pc, #336]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d101      	bne.n	8007e5a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e099      	b.n	8007f8e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e5a:	4b50      	ldr	r3, [pc, #320]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a4f      	ldr	r2, [pc, #316]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e66:	f7f9 fa6f 	bl	8001348 <HAL_GetTick>
 8007e6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e6c:	e008      	b.n	8007e80 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e6e:	f7f9 fa6b 	bl	8001348 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e086      	b.n	8007f8e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e80:	4b46      	ldr	r3, [pc, #280]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f0      	bne.n	8007e6e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e8c:	4b43      	ldr	r3, [pc, #268]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	051b      	lsls	r3, r3, #20
 8007e9a:	4940      	ldr	r1, [pc, #256]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	628b      	str	r3, [r1, #40]	; 0x28
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	025b      	lsls	r3, r3, #9
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	041b      	lsls	r3, r3, #16
 8007ebe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	061b      	lsls	r3, r3, #24
 8007ecc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ed0:	4932      	ldr	r1, [pc, #200]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ed6:	4b31      	ldr	r3, [pc, #196]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	492e      	ldr	r1, [pc, #184]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ee8:	4b2c      	ldr	r3, [pc, #176]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	4929      	ldr	r1, [pc, #164]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007efa:	4b28      	ldr	r3, [pc, #160]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	4a27      	ldr	r2, [pc, #156]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f06:	4b25      	ldr	r3, [pc, #148]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f0a:	4b25      	ldr	r3, [pc, #148]	; (8007fa0 <RCCEx_PLL3_Config+0x248>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	69d2      	ldr	r2, [r2, #28]
 8007f12:	00d2      	lsls	r2, r2, #3
 8007f14:	4921      	ldr	r1, [pc, #132]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f1a:	4b20      	ldr	r3, [pc, #128]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	4a1f      	ldr	r2, [pc, #124]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f2c:	4b1b      	ldr	r3, [pc, #108]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	4a1a      	ldr	r2, [pc, #104]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f38:	e00f      	b.n	8007f5a <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d106      	bne.n	8007f4e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f40:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4a15      	ldr	r2, [pc, #84]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f4c:	e005      	b.n	8007f5a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	4a12      	ldr	r2, [pc, #72]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f5a:	4b10      	ldr	r3, [pc, #64]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a0f      	ldr	r2, [pc, #60]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f66:	f7f9 f9ef 	bl	8001348 <HAL_GetTick>
 8007f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f6c:	e008      	b.n	8007f80 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f6e:	f7f9 f9eb 	bl	8001348 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e006      	b.n	8007f8e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <RCCEx_PLL3_Config+0x244>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	0800b754 	.word	0x0800b754
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	ffff0007 	.word	0xffff0007

08007fa4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e284      	b.n	80084c4 <HAL_SPI_Init+0x520>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a96      	ldr	r2, [pc, #600]	; (8008218 <HAL_SPI_Init+0x274>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d01c      	beq.n	8007ffe <HAL_SPI_Init+0x5a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a94      	ldr	r2, [pc, #592]	; (800821c <HAL_SPI_Init+0x278>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d017      	beq.n	8007ffe <HAL_SPI_Init+0x5a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a93      	ldr	r2, [pc, #588]	; (8008220 <HAL_SPI_Init+0x27c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d012      	beq.n	8007ffe <HAL_SPI_Init+0x5a>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a91      	ldr	r2, [pc, #580]	; (8008224 <HAL_SPI_Init+0x280>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00d      	beq.n	8007ffe <HAL_SPI_Init+0x5a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a90      	ldr	r2, [pc, #576]	; (8008228 <HAL_SPI_Init+0x284>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d008      	beq.n	8007ffe <HAL_SPI_Init+0x5a>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a8e      	ldr	r2, [pc, #568]	; (800822c <HAL_SPI_Init+0x288>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <HAL_SPI_Init+0x5a>
 8007ff6:	21f6      	movs	r1, #246	; 0xf6
 8007ff8:	488d      	ldr	r0, [pc, #564]	; (8008230 <HAL_SPI_Init+0x28c>)
 8007ffa:	f7f8 fef2 	bl	8000de2 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d008      	beq.n	8008018 <HAL_SPI_Init+0x74>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800800e:	d003      	beq.n	8008018 <HAL_SPI_Init+0x74>
 8008010:	21f7      	movs	r1, #247	; 0xf7
 8008012:	4887      	ldr	r0, [pc, #540]	; (8008230 <HAL_SPI_Init+0x28c>)
 8008014:	f7f8 fee5 	bl	8000de2 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d012      	beq.n	8008046 <HAL_SPI_Init+0xa2>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008028:	d00d      	beq.n	8008046 <HAL_SPI_Init+0xa2>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008032:	d008      	beq.n	8008046 <HAL_SPI_Init+0xa2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800803c:	d003      	beq.n	8008046 <HAL_SPI_Init+0xa2>
 800803e:	21f8      	movs	r1, #248	; 0xf8
 8008040:	487b      	ldr	r0, [pc, #492]	; (8008230 <HAL_SPI_Init+0x28c>)
 8008042:	f7f8 fece 	bl	8000de2 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	2b1f      	cmp	r3, #31
 800804c:	d077      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	2b1e      	cmp	r3, #30
 8008054:	d073      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2b1d      	cmp	r3, #29
 800805c:	d06f      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	2b1c      	cmp	r3, #28
 8008064:	d06b      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	2b1b      	cmp	r3, #27
 800806c:	d067      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	2b1a      	cmp	r3, #26
 8008074:	d063      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b19      	cmp	r3, #25
 800807c:	d05f      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b18      	cmp	r3, #24
 8008084:	d05b      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	2b17      	cmp	r3, #23
 800808c:	d057      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2b16      	cmp	r3, #22
 8008094:	d053      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b15      	cmp	r3, #21
 800809c:	d04f      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b14      	cmp	r3, #20
 80080a4:	d04b      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	2b13      	cmp	r3, #19
 80080ac:	d047      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b15      	cmp	r3, #21
 80080b4:	d043      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	2b12      	cmp	r3, #18
 80080bc:	d03f      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2b11      	cmp	r3, #17
 80080c4:	d03b      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	d037      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	2b0f      	cmp	r3, #15
 80080d4:	d033      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b0e      	cmp	r3, #14
 80080dc:	d02f      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2b0d      	cmp	r3, #13
 80080e4:	d02b      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b0c      	cmp	r3, #12
 80080ec:	d027      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b0b      	cmp	r3, #11
 80080f4:	d023      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b0a      	cmp	r3, #10
 80080fc:	d01f      	beq.n	800813e <HAL_SPI_Init+0x19a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b09      	cmp	r3, #9
 8008104:	d01b      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	2b08      	cmp	r3, #8
 800810c:	d017      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	2b07      	cmp	r3, #7
 8008114:	d013      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	2b06      	cmp	r3, #6
 800811c:	d00f      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	2b05      	cmp	r3, #5
 8008124:	d00b      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	2b04      	cmp	r3, #4
 800812c:	d007      	beq.n	800813e <HAL_SPI_Init+0x19a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b03      	cmp	r3, #3
 8008134:	d003      	beq.n	800813e <HAL_SPI_Init+0x19a>
 8008136:	21f9      	movs	r1, #249	; 0xf9
 8008138:	483d      	ldr	r0, [pc, #244]	; (8008230 <HAL_SPI_Init+0x28c>)
 800813a:	f7f8 fe52 	bl	8000de2 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d047      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	2b20      	cmp	r3, #32
 800814c:	d043      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	2b40      	cmp	r3, #64	; 0x40
 8008154:	d03f      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815a:	2b60      	cmp	r3, #96	; 0x60
 800815c:	d03b      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008162:	2b80      	cmp	r3, #128	; 0x80
 8008164:	d037      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	2ba0      	cmp	r3, #160	; 0xa0
 800816c:	d033      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	2bc0      	cmp	r3, #192	; 0xc0
 8008174:	d02f      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817a:	2be0      	cmp	r3, #224	; 0xe0
 800817c:	d02b      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008186:	d026      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8008190:	d021      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008196:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800819a:	d01c      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a0:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 80081a4:	d017      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081aa:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80081ae:	d012      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b4:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80081b8:	d00d      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80081c2:	d008      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80081cc:	d003      	beq.n	80081d6 <HAL_SPI_Init+0x232>
 80081ce:	21fa      	movs	r1, #250	; 0xfa
 80081d0:	4817      	ldr	r0, [pc, #92]	; (8008230 <HAL_SPI_Init+0x28c>)
 80081d2:	f7f8 fe06 	bl	8000de2 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081de:	d00c      	beq.n	80081fa <HAL_SPI_Init+0x256>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d008      	beq.n	80081fa <HAL_SPI_Init+0x256>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f0:	d003      	beq.n	80081fa <HAL_SPI_Init+0x256>
 80081f2:	21fb      	movs	r1, #251	; 0xfb
 80081f4:	480e      	ldr	r0, [pc, #56]	; (8008230 <HAL_SPI_Init+0x28c>)
 80081f6:	f7f8 fdf4 	bl	8000de2 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008202:	d017      	beq.n	8008234 <HAL_SPI_Init+0x290>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008208:	2b00      	cmp	r3, #0
 800820a:	d013      	beq.n	8008234 <HAL_SPI_Init+0x290>
 800820c:	21fc      	movs	r1, #252	; 0xfc
 800820e:	4808      	ldr	r0, [pc, #32]	; (8008230 <HAL_SPI_Init+0x28c>)
 8008210:	f7f8 fde7 	bl	8000de2 <assert_failed>
 8008214:	e00e      	b.n	8008234 <HAL_SPI_Init+0x290>
 8008216:	bf00      	nop
 8008218:	40013000 	.word	0x40013000
 800821c:	40003800 	.word	0x40003800
 8008220:	40003c00 	.word	0x40003c00
 8008224:	40013400 	.word	0x40013400
 8008228:	40015000 	.word	0x40015000
 800822c:	58001400 	.word	0x58001400
 8008230:	0800b790 	.word	0x0800b790
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d026      	beq.n	800828a <HAL_SPI_Init+0x2e6>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008244:	d021      	beq.n	800828a <HAL_SPI_Init+0x2e6>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800824e:	d01c      	beq.n	800828a <HAL_SPI_Init+0x2e6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008258:	d017      	beq.n	800828a <HAL_SPI_Init+0x2e6>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008262:	d012      	beq.n	800828a <HAL_SPI_Init+0x2e6>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800826c:	d00d      	beq.n	800828a <HAL_SPI_Init+0x2e6>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008276:	d008      	beq.n	800828a <HAL_SPI_Init+0x2e6>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 8008280:	d003      	beq.n	800828a <HAL_SPI_Init+0x2e6>
 8008282:	21fd      	movs	r1, #253	; 0xfd
 8008284:	4891      	ldr	r0, [pc, #580]	; (80084cc <HAL_SPI_Init+0x528>)
 8008286:	f7f8 fdac 	bl	8000de2 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d008      	beq.n	80082a4 <HAL_SPI_Init+0x300>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800829a:	d003      	beq.n	80082a4 <HAL_SPI_Init+0x300>
 800829c:	21fe      	movs	r1, #254	; 0xfe
 800829e:	488b      	ldr	r0, [pc, #556]	; (80084cc <HAL_SPI_Init+0x528>)
 80082a0:	f7f8 fd9f 	bl	8000de2 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d008      	beq.n	80082be <HAL_SPI_Init+0x31a>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082b4:	d003      	beq.n	80082be <HAL_SPI_Init+0x31a>
 80082b6:	21ff      	movs	r1, #255	; 0xff
 80082b8:	4884      	ldr	r0, [pc, #528]	; (80084cc <HAL_SPI_Init+0x528>)
 80082ba:	f7f8 fd92 	bl	8000de2 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d11b      	bne.n	80082fe <HAL_SPI_Init+0x35a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <HAL_SPI_Init+0x33e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d6:	d004      	beq.n	80082e2 <HAL_SPI_Init+0x33e>
 80082d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80082dc:	487b      	ldr	r0, [pc, #492]	; (80084cc <HAL_SPI_Init+0x528>)
 80082de:	f7f8 fd80 	bl	8000de2 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d009      	beq.n	80082fe <HAL_SPI_Init+0x35a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082f2:	d004      	beq.n	80082fe <HAL_SPI_Init+0x35a>
 80082f4:	f240 1103 	movw	r1, #259	; 0x103
 80082f8:	4874      	ldr	r0, [pc, #464]	; (80084cc <HAL_SPI_Init+0x528>)
 80082fa:	f7f8 fd72 	bl	8000de2 <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a71      	ldr	r2, [pc, #452]	; (80084d0 <HAL_SPI_Init+0x52c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00f      	beq.n	800832e <HAL_SPI_Init+0x38a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a70      	ldr	r2, [pc, #448]	; (80084d4 <HAL_SPI_Init+0x530>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d00a      	beq.n	800832e <HAL_SPI_Init+0x38a>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a6e      	ldr	r2, [pc, #440]	; (80084d8 <HAL_SPI_Init+0x534>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d005      	beq.n	800832e <HAL_SPI_Init+0x38a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	2b0f      	cmp	r3, #15
 8008328:	d901      	bls.n	800832e <HAL_SPI_Init+0x38a>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e0ca      	b.n	80084c4 <HAL_SPI_Init+0x520>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f8d4 	bl	80084dc <SPI_GetPacketSize>
 8008334:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a65      	ldr	r2, [pc, #404]	; (80084d0 <HAL_SPI_Init+0x52c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00c      	beq.n	800835a <HAL_SPI_Init+0x3b6>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a63      	ldr	r2, [pc, #396]	; (80084d4 <HAL_SPI_Init+0x530>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d007      	beq.n	800835a <HAL_SPI_Init+0x3b6>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a62      	ldr	r2, [pc, #392]	; (80084d8 <HAL_SPI_Init+0x534>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d002      	beq.n	800835a <HAL_SPI_Init+0x3b6>
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b08      	cmp	r3, #8
 8008358:	d811      	bhi.n	800837e <HAL_SPI_Init+0x3da>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800835e:	4a5c      	ldr	r2, [pc, #368]	; (80084d0 <HAL_SPI_Init+0x52c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d009      	beq.n	8008378 <HAL_SPI_Init+0x3d4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a5a      	ldr	r2, [pc, #360]	; (80084d4 <HAL_SPI_Init+0x530>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <HAL_SPI_Init+0x3d4>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a59      	ldr	r2, [pc, #356]	; (80084d8 <HAL_SPI_Init+0x534>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d104      	bne.n	8008382 <HAL_SPI_Init+0x3de>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b10      	cmp	r3, #16
 800837c:	d901      	bls.n	8008382 <HAL_SPI_Init+0x3de>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e0a0      	b.n	80084c4 <HAL_SPI_Init+0x520>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <HAL_SPI_Init+0x3f8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7f8 fd84 	bl	8000ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0201 	bic.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083bc:	d110      	bne.n	80083e0 <HAL_SPI_Init+0x43c>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083c6:	d10b      	bne.n	80083e0 <HAL_SPI_Init+0x43c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d107      	bne.n	80083e0 <HAL_SPI_Init+0x43c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083de:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	431a      	orrs	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	431a      	orrs	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	ea42 0103 	orr.w	r1, r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	431a      	orrs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008440:	ea42 0103 	orr.w	r1, r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d113      	bne.n	8008480 <HAL_SPI_Init+0x4dc>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800847e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0201 	bic.w	r2, r2, #1
 800848e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <HAL_SPI_Init+0x50e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	0800b790 	.word	0x0800b790
 80084d0:	40013000 	.word	0x40013000
 80084d4:	40003800 	.word	0x40003800
 80084d8:	40003c00 	.word	0x40003c00

080084dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	3301      	adds	r3, #1
 80084ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	3307      	adds	r3, #7
 80084fa:	08db      	lsrs	r3, r3, #3
 80084fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	fb02 f303 	mul.w	r3, r2, r3
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e0ab      	b.n	800867e <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d032      	beq.n	8008594 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a55      	ldr	r2, [pc, #340]	; (8008688 <HAL_UART_Init+0x174>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d05f      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a53      	ldr	r2, [pc, #332]	; (800868c <HAL_UART_Init+0x178>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d05a      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a52      	ldr	r2, [pc, #328]	; (8008690 <HAL_UART_Init+0x17c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d055      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a50      	ldr	r2, [pc, #320]	; (8008694 <HAL_UART_Init+0x180>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d050      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a4f      	ldr	r2, [pc, #316]	; (8008698 <HAL_UART_Init+0x184>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d04b      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a4d      	ldr	r2, [pc, #308]	; (800869c <HAL_UART_Init+0x188>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d046      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a4c      	ldr	r2, [pc, #304]	; (80086a0 <HAL_UART_Init+0x18c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d041      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a4a      	ldr	r2, [pc, #296]	; (80086a4 <HAL_UART_Init+0x190>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d03c      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a49      	ldr	r2, [pc, #292]	; (80086a8 <HAL_UART_Init+0x194>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d037      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 8008588:	f44f 7199 	mov.w	r1, #306	; 0x132
 800858c:	4847      	ldr	r0, [pc, #284]	; (80086ac <HAL_UART_Init+0x198>)
 800858e:	f7f8 fc28 	bl	8000de2 <assert_failed>
 8008592:	e031      	b.n	80085f8 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a3b      	ldr	r2, [pc, #236]	; (8008688 <HAL_UART_Init+0x174>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d02c      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a3a      	ldr	r2, [pc, #232]	; (800868c <HAL_UART_Init+0x178>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d027      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a38      	ldr	r2, [pc, #224]	; (8008690 <HAL_UART_Init+0x17c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d022      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a37      	ldr	r2, [pc, #220]	; (8008694 <HAL_UART_Init+0x180>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d01d      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a35      	ldr	r2, [pc, #212]	; (8008698 <HAL_UART_Init+0x184>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d018      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a34      	ldr	r2, [pc, #208]	; (800869c <HAL_UART_Init+0x188>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d013      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a32      	ldr	r2, [pc, #200]	; (80086a0 <HAL_UART_Init+0x18c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00e      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a31      	ldr	r2, [pc, #196]	; (80086a4 <HAL_UART_Init+0x190>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d009      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a2f      	ldr	r2, [pc, #188]	; (80086a8 <HAL_UART_Init+0x194>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <HAL_UART_Init+0xe4>
 80085ee:	f240 1137 	movw	r1, #311	; 0x137
 80085f2:	482e      	ldr	r0, [pc, #184]	; (80086ac <HAL_UART_Init+0x198>)
 80085f4:	f7f8 fbf5 	bl	8000de2 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7f8 fda6 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2224      	movs	r2, #36	; 0x24
 8008614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0201 	bic.w	r2, r2, #1
 8008626:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f841 	bl	80086b0 <UART_SetConfig>
 800862e:	4603      	mov	r3, r0
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e022      	b.n	800867e <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f002 fa93 	bl	800ab6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008664:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f042 0201 	orr.w	r2, r2, #1
 8008674:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f002 fbee 	bl	800ae58 <UART_CheckIdleState>
 800867c:	4603      	mov	r3, r0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	40011000 	.word	0x40011000
 800868c:	40004400 	.word	0x40004400
 8008690:	40004800 	.word	0x40004800
 8008694:	40004c00 	.word	0x40004c00
 8008698:	40005000 	.word	0x40005000
 800869c:	40011400 	.word	0x40011400
 80086a0:	40007800 	.word	0x40007800
 80086a4:	40007c00 	.word	0x40007c00
 80086a8:	58000c00 	.word	0x58000c00
 80086ac:	0800b7c8 	.word	0x0800b7c8

080086b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80086b4:	b090      	sub	sp, #64	; 0x40
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	4a17      	ldr	r2, [pc, #92]	; (800872c <UART_SetConfig+0x7c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d904      	bls.n	80086dc <UART_SetConfig+0x2c>
 80086d2:	f640 3134 	movw	r1, #2868	; 0xb34
 80086d6:	4816      	ldr	r0, [pc, #88]	; (8008730 <UART_SetConfig+0x80>)
 80086d8:	f7f8 fb83 	bl	8000de2 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e4:	d00d      	beq.n	8008702 <UART_SetConfig+0x52>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <UART_SetConfig+0x52>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f6:	d004      	beq.n	8008702 <UART_SetConfig+0x52>
 80086f8:	f640 3135 	movw	r1, #2869	; 0xb35
 80086fc:	480c      	ldr	r0, [pc, #48]	; (8008730 <UART_SetConfig+0x80>)
 80086fe:	f7f8 fb70 	bl	8000de2 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a0b      	ldr	r2, [pc, #44]	; (8008734 <UART_SetConfig+0x84>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d115      	bne.n	8008738 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d037      	beq.n	8008784 <UART_SetConfig+0xd4>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800871c:	d032      	beq.n	8008784 <UART_SetConfig+0xd4>
 800871e:	f640 3138 	movw	r1, #2872	; 0xb38
 8008722:	4803      	ldr	r0, [pc, #12]	; (8008730 <UART_SetConfig+0x80>)
 8008724:	f7f8 fb5d 	bl	8000de2 <assert_failed>
 8008728:	e02c      	b.n	8008784 <UART_SetConfig+0xd4>
 800872a:	bf00      	nop
 800872c:	00bebc20 	.word	0x00bebc20
 8008730:	0800b7c8 	.word	0x0800b7c8
 8008734:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008740:	d012      	beq.n	8008768 <UART_SetConfig+0xb8>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00e      	beq.n	8008768 <UART_SetConfig+0xb8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008752:	d009      	beq.n	8008768 <UART_SetConfig+0xb8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800875c:	d004      	beq.n	8008768 <UART_SetConfig+0xb8>
 800875e:	f640 313c 	movw	r1, #2876	; 0xb3c
 8008762:	48aa      	ldr	r0, [pc, #680]	; (8008a0c <UART_SetConfig+0x35c>)
 8008764:	f7f8 fb3d 	bl	8000de2 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <UART_SetConfig+0xd4>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008778:	d004      	beq.n	8008784 <UART_SetConfig+0xd4>
 800877a:	f640 313d 	movw	r1, #2877	; 0xb3d
 800877e:	48a3      	ldr	r0, [pc, #652]	; (8008a0c <UART_SetConfig+0x35c>)
 8008780:	f7f8 fb2f 	bl	8000de2 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00e      	beq.n	80087aa <UART_SetConfig+0xfa>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008794:	d009      	beq.n	80087aa <UART_SetConfig+0xfa>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800879e:	d004      	beq.n	80087aa <UART_SetConfig+0xfa>
 80087a0:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80087a4:	4899      	ldr	r0, [pc, #612]	; (8008a0c <UART_SetConfig+0x35c>)
 80087a6:	f7f8 fb1c 	bl	8000de2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	f023 030c 	bic.w	r3, r3, #12
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d103      	bne.n	80087be <UART_SetConfig+0x10e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d104      	bne.n	80087c8 <UART_SetConfig+0x118>
 80087be:	f640 3141 	movw	r1, #2881	; 0xb41
 80087c2:	4892      	ldr	r0, [pc, #584]	; (8008a0c <UART_SetConfig+0x35c>)
 80087c4:	f7f8 fb0d 	bl	8000de2 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d013      	beq.n	80087f8 <UART_SetConfig+0x148>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d8:	d00e      	beq.n	80087f8 <UART_SetConfig+0x148>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e2:	d009      	beq.n	80087f8 <UART_SetConfig+0x148>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087ec:	d004      	beq.n	80087f8 <UART_SetConfig+0x148>
 80087ee:	f640 3142 	movw	r1, #2882	; 0xb42
 80087f2:	4886      	ldr	r0, [pc, #536]	; (8008a0c <UART_SetConfig+0x35c>)
 80087f4:	f7f8 faf5 	bl	8000de2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d009      	beq.n	8008814 <UART_SetConfig+0x164>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008808:	d004      	beq.n	8008814 <UART_SetConfig+0x164>
 800880a:	f640 3143 	movw	r1, #2883	; 0xb43
 800880e:	487f      	ldr	r0, [pc, #508]	; (8008a0c <UART_SetConfig+0x35c>)
 8008810:	f7f8 fae7 	bl	8000de2 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	d030      	beq.n	800887e <UART_SetConfig+0x1ce>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	2b01      	cmp	r3, #1
 8008822:	d02c      	beq.n	800887e <UART_SetConfig+0x1ce>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	2b02      	cmp	r3, #2
 800882a:	d028      	beq.n	800887e <UART_SetConfig+0x1ce>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	2b03      	cmp	r3, #3
 8008832:	d024      	beq.n	800887e <UART_SetConfig+0x1ce>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2b04      	cmp	r3, #4
 800883a:	d020      	beq.n	800887e <UART_SetConfig+0x1ce>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	2b05      	cmp	r3, #5
 8008842:	d01c      	beq.n	800887e <UART_SetConfig+0x1ce>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b06      	cmp	r3, #6
 800884a:	d018      	beq.n	800887e <UART_SetConfig+0x1ce>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b07      	cmp	r3, #7
 8008852:	d014      	beq.n	800887e <UART_SetConfig+0x1ce>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b08      	cmp	r3, #8
 800885a:	d010      	beq.n	800887e <UART_SetConfig+0x1ce>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b09      	cmp	r3, #9
 8008862:	d00c      	beq.n	800887e <UART_SetConfig+0x1ce>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b0a      	cmp	r3, #10
 800886a:	d008      	beq.n	800887e <UART_SetConfig+0x1ce>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b0b      	cmp	r3, #11
 8008872:	d004      	beq.n	800887e <UART_SetConfig+0x1ce>
 8008874:	f640 3144 	movw	r1, #2884	; 0xb44
 8008878:	4864      	ldr	r0, [pc, #400]	; (8008a0c <UART_SetConfig+0x35c>)
 800887a:	f7f8 fab2 	bl	8000de2 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	431a      	orrs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	431a      	orrs	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	4313      	orrs	r3, r2
 8008894:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800889a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800889c:	4313      	orrs	r3, r2
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4b5a      	ldr	r3, [pc, #360]	; (8008a10 <UART_SetConfig+0x360>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088b0:	430b      	orrs	r3, r1
 80088b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a4f      	ldr	r2, [pc, #316]	; (8008a14 <UART_SetConfig+0x364>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088e0:	4313      	orrs	r3, r2
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	4b4b      	ldr	r3, [pc, #300]	; (8008a18 <UART_SetConfig+0x368>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088f4:	430b      	orrs	r3, r1
 80088f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	f023 010f 	bic.w	r1, r3, #15
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a42      	ldr	r2, [pc, #264]	; (8008a1c <UART_SetConfig+0x36c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	f040 8085 	bne.w	8008a24 <UART_SetConfig+0x374>
 800891a:	4b41      	ldr	r3, [pc, #260]	; (8008a20 <UART_SetConfig+0x370>)
 800891c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008922:	2b28      	cmp	r3, #40	; 0x28
 8008924:	d86c      	bhi.n	8008a00 <UART_SetConfig+0x350>
 8008926:	a201      	add	r2, pc, #4	; (adr r2, 800892c <UART_SetConfig+0x27c>)
 8008928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892c:	080089d1 	.word	0x080089d1
 8008930:	08008a01 	.word	0x08008a01
 8008934:	08008a01 	.word	0x08008a01
 8008938:	08008a01 	.word	0x08008a01
 800893c:	08008a01 	.word	0x08008a01
 8008940:	08008a01 	.word	0x08008a01
 8008944:	08008a01 	.word	0x08008a01
 8008948:	08008a01 	.word	0x08008a01
 800894c:	080089d9 	.word	0x080089d9
 8008950:	08008a01 	.word	0x08008a01
 8008954:	08008a01 	.word	0x08008a01
 8008958:	08008a01 	.word	0x08008a01
 800895c:	08008a01 	.word	0x08008a01
 8008960:	08008a01 	.word	0x08008a01
 8008964:	08008a01 	.word	0x08008a01
 8008968:	08008a01 	.word	0x08008a01
 800896c:	080089e1 	.word	0x080089e1
 8008970:	08008a01 	.word	0x08008a01
 8008974:	08008a01 	.word	0x08008a01
 8008978:	08008a01 	.word	0x08008a01
 800897c:	08008a01 	.word	0x08008a01
 8008980:	08008a01 	.word	0x08008a01
 8008984:	08008a01 	.word	0x08008a01
 8008988:	08008a01 	.word	0x08008a01
 800898c:	080089e9 	.word	0x080089e9
 8008990:	08008a01 	.word	0x08008a01
 8008994:	08008a01 	.word	0x08008a01
 8008998:	08008a01 	.word	0x08008a01
 800899c:	08008a01 	.word	0x08008a01
 80089a0:	08008a01 	.word	0x08008a01
 80089a4:	08008a01 	.word	0x08008a01
 80089a8:	08008a01 	.word	0x08008a01
 80089ac:	080089f1 	.word	0x080089f1
 80089b0:	08008a01 	.word	0x08008a01
 80089b4:	08008a01 	.word	0x08008a01
 80089b8:	08008a01 	.word	0x08008a01
 80089bc:	08008a01 	.word	0x08008a01
 80089c0:	08008a01 	.word	0x08008a01
 80089c4:	08008a01 	.word	0x08008a01
 80089c8:	08008a01 	.word	0x08008a01
 80089cc:	080089f9 	.word	0x080089f9
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089d6:	e23b      	b.n	8008e50 <UART_SetConfig+0x7a0>
 80089d8:	2304      	movs	r3, #4
 80089da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089de:	e237      	b.n	8008e50 <UART_SetConfig+0x7a0>
 80089e0:	2308      	movs	r3, #8
 80089e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089e6:	e233      	b.n	8008e50 <UART_SetConfig+0x7a0>
 80089e8:	2310      	movs	r3, #16
 80089ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089ee:	e22f      	b.n	8008e50 <UART_SetConfig+0x7a0>
 80089f0:	2320      	movs	r3, #32
 80089f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089f6:	e22b      	b.n	8008e50 <UART_SetConfig+0x7a0>
 80089f8:	2340      	movs	r3, #64	; 0x40
 80089fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089fe:	e227      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a00:	2380      	movs	r3, #128	; 0x80
 8008a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a06:	bf00      	nop
 8008a08:	e222      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a0a:	bf00      	nop
 8008a0c:	0800b7c8 	.word	0x0800b7c8
 8008a10:	cfff69f3 	.word	0xcfff69f3
 8008a14:	58000c00 	.word	0x58000c00
 8008a18:	11fff4ff 	.word	0x11fff4ff
 8008a1c:	40011000 	.word	0x40011000
 8008a20:	58024400 	.word	0x58024400
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4ac9      	ldr	r2, [pc, #804]	; (8008d50 <UART_SetConfig+0x6a0>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d131      	bne.n	8008a92 <UART_SetConfig+0x3e2>
 8008a2e:	4bc9      	ldr	r3, [pc, #804]	; (8008d54 <UART_SetConfig+0x6a4>)
 8008a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	2b05      	cmp	r3, #5
 8008a38:	d826      	bhi.n	8008a88 <UART_SetConfig+0x3d8>
 8008a3a:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <UART_SetConfig+0x390>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008a59 	.word	0x08008a59
 8008a44:	08008a61 	.word	0x08008a61
 8008a48:	08008a69 	.word	0x08008a69
 8008a4c:	08008a71 	.word	0x08008a71
 8008a50:	08008a79 	.word	0x08008a79
 8008a54:	08008a81 	.word	0x08008a81
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a5e:	e1f7      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a60:	2304      	movs	r3, #4
 8008a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a66:	e1f3      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a6e:	e1ef      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a70:	2310      	movs	r3, #16
 8008a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a76:	e1eb      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a78:	2320      	movs	r3, #32
 8008a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a7e:	e1e7      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a80:	2340      	movs	r3, #64	; 0x40
 8008a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a86:	e1e3      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a88:	2380      	movs	r3, #128	; 0x80
 8008a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a8e:	bf00      	nop
 8008a90:	e1de      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4ab0      	ldr	r2, [pc, #704]	; (8008d58 <UART_SetConfig+0x6a8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d132      	bne.n	8008b02 <UART_SetConfig+0x452>
 8008a9c:	4bad      	ldr	r3, [pc, #692]	; (8008d54 <UART_SetConfig+0x6a4>)
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	2b05      	cmp	r3, #5
 8008aa6:	d827      	bhi.n	8008af8 <UART_SetConfig+0x448>
 8008aa8:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <UART_SetConfig+0x400>)
 8008aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aae:	bf00      	nop
 8008ab0:	08008ac9 	.word	0x08008ac9
 8008ab4:	08008ad1 	.word	0x08008ad1
 8008ab8:	08008ad9 	.word	0x08008ad9
 8008abc:	08008ae1 	.word	0x08008ae1
 8008ac0:	08008ae9 	.word	0x08008ae9
 8008ac4:	08008af1 	.word	0x08008af1
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ace:	e1bf      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ad6:	e1bb      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008ad8:	2308      	movs	r3, #8
 8008ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ade:	e1b7      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008ae0:	2310      	movs	r3, #16
 8008ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ae6:	e1b3      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008ae8:	2320      	movs	r3, #32
 8008aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008aee:	e1af      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008af0:	2340      	movs	r3, #64	; 0x40
 8008af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008af6:	e1ab      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008af8:	2380      	movs	r3, #128	; 0x80
 8008afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008afe:	bf00      	nop
 8008b00:	e1a6      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a95      	ldr	r2, [pc, #596]	; (8008d5c <UART_SetConfig+0x6ac>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d132      	bne.n	8008b72 <UART_SetConfig+0x4c2>
 8008b0c:	4b91      	ldr	r3, [pc, #580]	; (8008d54 <UART_SetConfig+0x6a4>)
 8008b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	2b05      	cmp	r3, #5
 8008b16:	d827      	bhi.n	8008b68 <UART_SetConfig+0x4b8>
 8008b18:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <UART_SetConfig+0x470>)
 8008b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1e:	bf00      	nop
 8008b20:	08008b39 	.word	0x08008b39
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b49 	.word	0x08008b49
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b59 	.word	0x08008b59
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b3e:	e187      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b46:	e183      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b4e:	e17f      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b56:	e17b      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008b58:	2320      	movs	r3, #32
 8008b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b5e:	e177      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008b60:	2340      	movs	r3, #64	; 0x40
 8008b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b66:	e173      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008b68:	2380      	movs	r3, #128	; 0x80
 8008b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b6e:	bf00      	nop
 8008b70:	e16e      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a7a      	ldr	r2, [pc, #488]	; (8008d60 <UART_SetConfig+0x6b0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d132      	bne.n	8008be2 <UART_SetConfig+0x532>
 8008b7c:	4b75      	ldr	r3, [pc, #468]	; (8008d54 <UART_SetConfig+0x6a4>)
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	d827      	bhi.n	8008bd8 <UART_SetConfig+0x528>
 8008b88:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <UART_SetConfig+0x4e0>)
 8008b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8e:	bf00      	nop
 8008b90:	08008ba9 	.word	0x08008ba9
 8008b94:	08008bb1 	.word	0x08008bb1
 8008b98:	08008bb9 	.word	0x08008bb9
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc9 	.word	0x08008bc9
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bae:	e14f      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bb6:	e14b      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bbe:	e147      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bc6:	e143      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bce:	e13f      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008bd0:	2340      	movs	r3, #64	; 0x40
 8008bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bd6:	e13b      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bde:	bf00      	nop
 8008be0:	e136      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a5f      	ldr	r2, [pc, #380]	; (8008d64 <UART_SetConfig+0x6b4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d178      	bne.n	8008cde <UART_SetConfig+0x62e>
 8008bec:	4b59      	ldr	r3, [pc, #356]	; (8008d54 <UART_SetConfig+0x6a4>)
 8008bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bf4:	2b28      	cmp	r3, #40	; 0x28
 8008bf6:	d86d      	bhi.n	8008cd4 <UART_SetConfig+0x624>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <UART_SetConfig+0x550>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008ca5 	.word	0x08008ca5
 8008c04:	08008cd5 	.word	0x08008cd5
 8008c08:	08008cd5 	.word	0x08008cd5
 8008c0c:	08008cd5 	.word	0x08008cd5
 8008c10:	08008cd5 	.word	0x08008cd5
 8008c14:	08008cd5 	.word	0x08008cd5
 8008c18:	08008cd5 	.word	0x08008cd5
 8008c1c:	08008cd5 	.word	0x08008cd5
 8008c20:	08008cad 	.word	0x08008cad
 8008c24:	08008cd5 	.word	0x08008cd5
 8008c28:	08008cd5 	.word	0x08008cd5
 8008c2c:	08008cd5 	.word	0x08008cd5
 8008c30:	08008cd5 	.word	0x08008cd5
 8008c34:	08008cd5 	.word	0x08008cd5
 8008c38:	08008cd5 	.word	0x08008cd5
 8008c3c:	08008cd5 	.word	0x08008cd5
 8008c40:	08008cb5 	.word	0x08008cb5
 8008c44:	08008cd5 	.word	0x08008cd5
 8008c48:	08008cd5 	.word	0x08008cd5
 8008c4c:	08008cd5 	.word	0x08008cd5
 8008c50:	08008cd5 	.word	0x08008cd5
 8008c54:	08008cd5 	.word	0x08008cd5
 8008c58:	08008cd5 	.word	0x08008cd5
 8008c5c:	08008cd5 	.word	0x08008cd5
 8008c60:	08008cbd 	.word	0x08008cbd
 8008c64:	08008cd5 	.word	0x08008cd5
 8008c68:	08008cd5 	.word	0x08008cd5
 8008c6c:	08008cd5 	.word	0x08008cd5
 8008c70:	08008cd5 	.word	0x08008cd5
 8008c74:	08008cd5 	.word	0x08008cd5
 8008c78:	08008cd5 	.word	0x08008cd5
 8008c7c:	08008cd5 	.word	0x08008cd5
 8008c80:	08008cc5 	.word	0x08008cc5
 8008c84:	08008cd5 	.word	0x08008cd5
 8008c88:	08008cd5 	.word	0x08008cd5
 8008c8c:	08008cd5 	.word	0x08008cd5
 8008c90:	08008cd5 	.word	0x08008cd5
 8008c94:	08008cd5 	.word	0x08008cd5
 8008c98:	08008cd5 	.word	0x08008cd5
 8008c9c:	08008cd5 	.word	0x08008cd5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008caa:	e0d1      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cb2:	e0cd      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cba:	e0c9      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cc2:	e0c5      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cca:	e0c1      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cd2:	e0bd      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cda:	bf00      	nop
 8008cdc:	e0b8      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a21      	ldr	r2, [pc, #132]	; (8008d68 <UART_SetConfig+0x6b8>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d141      	bne.n	8008d6c <UART_SetConfig+0x6bc>
 8008ce8:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <UART_SetConfig+0x6a4>)
 8008cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	2b05      	cmp	r3, #5
 8008cf2:	d827      	bhi.n	8008d44 <UART_SetConfig+0x694>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <UART_SetConfig+0x64c>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d15 	.word	0x08008d15
 8008d00:	08008d1d 	.word	0x08008d1d
 8008d04:	08008d25 	.word	0x08008d25
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d35 	.word	0x08008d35
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	2300      	movs	r3, #0
 8008d16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d1a:	e099      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d22:	e095      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008d24:	2308      	movs	r3, #8
 8008d26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d2a:	e091      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d32:	e08d      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008d34:	2320      	movs	r3, #32
 8008d36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d3a:	e089      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008d3c:	2340      	movs	r3, #64	; 0x40
 8008d3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d42:	e085      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008d44:	2380      	movs	r3, #128	; 0x80
 8008d46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d4a:	bf00      	nop
 8008d4c:	e080      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008d4e:	bf00      	nop
 8008d50:	40004400 	.word	0x40004400
 8008d54:	58024400 	.word	0x58024400
 8008d58:	40004800 	.word	0x40004800
 8008d5c:	40004c00 	.word	0x40004c00
 8008d60:	40005000 	.word	0x40005000
 8008d64:	40011400 	.word	0x40011400
 8008d68:	40007800 	.word	0x40007800
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a98      	ldr	r2, [pc, #608]	; (8008fd4 <UART_SetConfig+0x924>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d131      	bne.n	8008dda <UART_SetConfig+0x72a>
 8008d76:	4b98      	ldr	r3, [pc, #608]	; (8008fd8 <UART_SetConfig+0x928>)
 8008d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	2b05      	cmp	r3, #5
 8008d80:	d826      	bhi.n	8008dd0 <UART_SetConfig+0x720>
 8008d82:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <UART_SetConfig+0x6d8>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008da1 	.word	0x08008da1
 8008d8c:	08008da9 	.word	0x08008da9
 8008d90:	08008db1 	.word	0x08008db1
 8008d94:	08008db9 	.word	0x08008db9
 8008d98:	08008dc1 	.word	0x08008dc1
 8008d9c:	08008dc9 	.word	0x08008dc9
 8008da0:	2300      	movs	r3, #0
 8008da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008da6:	e053      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008da8:	2304      	movs	r3, #4
 8008daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dae:	e04f      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008db0:	2308      	movs	r3, #8
 8008db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008db6:	e04b      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008db8:	2310      	movs	r3, #16
 8008dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dbe:	e047      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dc6:	e043      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dce:	e03f      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008dd0:	2380      	movs	r3, #128	; 0x80
 8008dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dd6:	bf00      	nop
 8008dd8:	e03a      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a7f      	ldr	r2, [pc, #508]	; (8008fdc <UART_SetConfig+0x92c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d132      	bne.n	8008e4a <UART_SetConfig+0x79a>
 8008de4:	4b7c      	ldr	r3, [pc, #496]	; (8008fd8 <UART_SetConfig+0x928>)
 8008de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	2b05      	cmp	r3, #5
 8008dee:	d827      	bhi.n	8008e40 <UART_SetConfig+0x790>
 8008df0:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <UART_SetConfig+0x748>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e19 	.word	0x08008e19
 8008e00:	08008e21 	.word	0x08008e21
 8008e04:	08008e29 	.word	0x08008e29
 8008e08:	08008e31 	.word	0x08008e31
 8008e0c:	08008e39 	.word	0x08008e39
 8008e10:	2302      	movs	r3, #2
 8008e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e16:	e01b      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008e18:	2304      	movs	r3, #4
 8008e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e1e:	e017      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008e20:	2308      	movs	r3, #8
 8008e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e26:	e013      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008e28:	2310      	movs	r3, #16
 8008e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e2e:	e00f      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008e30:	2320      	movs	r3, #32
 8008e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e36:	e00b      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008e38:	2340      	movs	r3, #64	; 0x40
 8008e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e3e:	e007      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008e40:	2380      	movs	r3, #128	; 0x80
 8008e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e46:	bf00      	nop
 8008e48:	e002      	b.n	8008e50 <UART_SetConfig+0x7a0>
 8008e4a:	2380      	movs	r3, #128	; 0x80
 8008e4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a61      	ldr	r2, [pc, #388]	; (8008fdc <UART_SetConfig+0x92c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	f040 86f3 	bne.w	8009c42 <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	f000 80bd 	beq.w	8008fe0 <UART_SetConfig+0x930>
 8008e66:	2b08      	cmp	r3, #8
 8008e68:	dc04      	bgt.n	8008e74 <UART_SetConfig+0x7c4>
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d00c      	beq.n	8008e88 <UART_SetConfig+0x7d8>
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d05b      	beq.n	8008f2a <UART_SetConfig+0x87a>
 8008e72:	e276      	b.n	8009362 <UART_SetConfig+0xcb2>
 8008e74:	2b20      	cmp	r3, #32
 8008e76:	f000 81ad 	beq.w	80091d4 <UART_SetConfig+0xb24>
 8008e7a:	2b40      	cmp	r3, #64	; 0x40
 8008e7c:	f000 821a 	beq.w	80092b4 <UART_SetConfig+0xc04>
 8008e80:	2b10      	cmp	r3, #16
 8008e82:	f000 8101 	beq.w	8009088 <UART_SetConfig+0x9d8>
 8008e86:	e26c      	b.n	8009362 <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008e88:	f7fe fb7a 	bl	8007580 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d044      	beq.n	8008f20 <UART_SetConfig+0x870>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d03e      	beq.n	8008f1c <UART_SetConfig+0x86c>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d038      	beq.n	8008f18 <UART_SetConfig+0x868>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d032      	beq.n	8008f14 <UART_SetConfig+0x864>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d02c      	beq.n	8008f10 <UART_SetConfig+0x860>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d026      	beq.n	8008f0c <UART_SetConfig+0x85c>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	2b06      	cmp	r3, #6
 8008ec4:	d020      	beq.n	8008f08 <UART_SetConfig+0x858>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	2b07      	cmp	r3, #7
 8008ecc:	d01a      	beq.n	8008f04 <UART_SetConfig+0x854>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	2b08      	cmp	r3, #8
 8008ed4:	d014      	beq.n	8008f00 <UART_SetConfig+0x850>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	d00e      	beq.n	8008efc <UART_SetConfig+0x84c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	2b0a      	cmp	r3, #10
 8008ee4:	d008      	beq.n	8008ef8 <UART_SetConfig+0x848>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b0b      	cmp	r3, #11
 8008eec:	d102      	bne.n	8008ef4 <UART_SetConfig+0x844>
 8008eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef2:	e016      	b.n	8008f22 <UART_SetConfig+0x872>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e014      	b.n	8008f22 <UART_SetConfig+0x872>
 8008ef8:	2380      	movs	r3, #128	; 0x80
 8008efa:	e012      	b.n	8008f22 <UART_SetConfig+0x872>
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	e010      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f00:	2320      	movs	r3, #32
 8008f02:	e00e      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f04:	2310      	movs	r3, #16
 8008f06:	e00c      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f08:	230c      	movs	r3, #12
 8008f0a:	e00a      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f0c:	230a      	movs	r3, #10
 8008f0e:	e008      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f10:	2308      	movs	r3, #8
 8008f12:	e006      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f14:	2306      	movs	r3, #6
 8008f16:	e004      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	e002      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	e000      	b.n	8008f22 <UART_SetConfig+0x872>
 8008f20:	2301      	movs	r3, #1
 8008f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f28:	e21f      	b.n	800936a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f2a:	f107 0318 	add.w	r3, r7, #24
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fb3c 	bl	80075ac <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d044      	beq.n	8008fc8 <UART_SetConfig+0x918>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d03e      	beq.n	8008fc4 <UART_SetConfig+0x914>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d038      	beq.n	8008fc0 <UART_SetConfig+0x910>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d032      	beq.n	8008fbc <UART_SetConfig+0x90c>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d02c      	beq.n	8008fb8 <UART_SetConfig+0x908>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	2b05      	cmp	r3, #5
 8008f64:	d026      	beq.n	8008fb4 <UART_SetConfig+0x904>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	2b06      	cmp	r3, #6
 8008f6c:	d020      	beq.n	8008fb0 <UART_SetConfig+0x900>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	2b07      	cmp	r3, #7
 8008f74:	d01a      	beq.n	8008fac <UART_SetConfig+0x8fc>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b08      	cmp	r3, #8
 8008f7c:	d014      	beq.n	8008fa8 <UART_SetConfig+0x8f8>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	2b09      	cmp	r3, #9
 8008f84:	d00e      	beq.n	8008fa4 <UART_SetConfig+0x8f4>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	2b0a      	cmp	r3, #10
 8008f8c:	d008      	beq.n	8008fa0 <UART_SetConfig+0x8f0>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	2b0b      	cmp	r3, #11
 8008f94:	d102      	bne.n	8008f9c <UART_SetConfig+0x8ec>
 8008f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f9a:	e016      	b.n	8008fca <UART_SetConfig+0x91a>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e014      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fa0:	2380      	movs	r3, #128	; 0x80
 8008fa2:	e012      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fa4:	2340      	movs	r3, #64	; 0x40
 8008fa6:	e010      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fa8:	2320      	movs	r3, #32
 8008faa:	e00e      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fac:	2310      	movs	r3, #16
 8008fae:	e00c      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fb0:	230c      	movs	r3, #12
 8008fb2:	e00a      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fb4:	230a      	movs	r3, #10
 8008fb6:	e008      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fb8:	2308      	movs	r3, #8
 8008fba:	e006      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fbc:	2306      	movs	r3, #6
 8008fbe:	e004      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	e002      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e000      	b.n	8008fca <UART_SetConfig+0x91a>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fd0:	e1cb      	b.n	800936a <UART_SetConfig+0xcba>
 8008fd2:	bf00      	nop
 8008fd4:	40007c00 	.word	0x40007c00
 8008fd8:	58024400 	.word	0x58024400
 8008fdc:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fe fc2d 	bl	8007844 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d044      	beq.n	800907e <UART_SetConfig+0x9ce>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d03e      	beq.n	800907a <UART_SetConfig+0x9ca>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2b02      	cmp	r3, #2
 8009002:	d038      	beq.n	8009076 <UART_SetConfig+0x9c6>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b03      	cmp	r3, #3
 800900a:	d032      	beq.n	8009072 <UART_SetConfig+0x9c2>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	2b04      	cmp	r3, #4
 8009012:	d02c      	beq.n	800906e <UART_SetConfig+0x9be>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	2b05      	cmp	r3, #5
 800901a:	d026      	beq.n	800906a <UART_SetConfig+0x9ba>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2b06      	cmp	r3, #6
 8009022:	d020      	beq.n	8009066 <UART_SetConfig+0x9b6>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	2b07      	cmp	r3, #7
 800902a:	d01a      	beq.n	8009062 <UART_SetConfig+0x9b2>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	2b08      	cmp	r3, #8
 8009032:	d014      	beq.n	800905e <UART_SetConfig+0x9ae>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b09      	cmp	r3, #9
 800903a:	d00e      	beq.n	800905a <UART_SetConfig+0x9aa>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2b0a      	cmp	r3, #10
 8009042:	d008      	beq.n	8009056 <UART_SetConfig+0x9a6>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b0b      	cmp	r3, #11
 800904a:	d102      	bne.n	8009052 <UART_SetConfig+0x9a2>
 800904c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009050:	e016      	b.n	8009080 <UART_SetConfig+0x9d0>
 8009052:	2301      	movs	r3, #1
 8009054:	e014      	b.n	8009080 <UART_SetConfig+0x9d0>
 8009056:	2380      	movs	r3, #128	; 0x80
 8009058:	e012      	b.n	8009080 <UART_SetConfig+0x9d0>
 800905a:	2340      	movs	r3, #64	; 0x40
 800905c:	e010      	b.n	8009080 <UART_SetConfig+0x9d0>
 800905e:	2320      	movs	r3, #32
 8009060:	e00e      	b.n	8009080 <UART_SetConfig+0x9d0>
 8009062:	2310      	movs	r3, #16
 8009064:	e00c      	b.n	8009080 <UART_SetConfig+0x9d0>
 8009066:	230c      	movs	r3, #12
 8009068:	e00a      	b.n	8009080 <UART_SetConfig+0x9d0>
 800906a:	230a      	movs	r3, #10
 800906c:	e008      	b.n	8009080 <UART_SetConfig+0x9d0>
 800906e:	2308      	movs	r3, #8
 8009070:	e006      	b.n	8009080 <UART_SetConfig+0x9d0>
 8009072:	2306      	movs	r3, #6
 8009074:	e004      	b.n	8009080 <UART_SetConfig+0x9d0>
 8009076:	2304      	movs	r3, #4
 8009078:	e002      	b.n	8009080 <UART_SetConfig+0x9d0>
 800907a:	2302      	movs	r3, #2
 800907c:	e000      	b.n	8009080 <UART_SetConfig+0x9d0>
 800907e:	2301      	movs	r3, #1
 8009080:	fbb2 f3f3 	udiv	r3, r2, r3
 8009084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009086:	e170      	b.n	800936a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009088:	4b79      	ldr	r3, [pc, #484]	; (8009270 <UART_SetConfig+0xbc0>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	d054      	beq.n	800913e <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009094:	4b76      	ldr	r3, [pc, #472]	; (8009270 <UART_SetConfig+0xbc0>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	08db      	lsrs	r3, r3, #3
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	4a75      	ldr	r2, [pc, #468]	; (8009274 <UART_SetConfig+0xbc4>)
 80090a0:	40da      	lsrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d044      	beq.n	8009134 <UART_SetConfig+0xa84>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d03e      	beq.n	8009130 <UART_SetConfig+0xa80>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d038      	beq.n	800912c <UART_SetConfig+0xa7c>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d032      	beq.n	8009128 <UART_SetConfig+0xa78>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d02c      	beq.n	8009124 <UART_SetConfig+0xa74>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2b05      	cmp	r3, #5
 80090d0:	d026      	beq.n	8009120 <UART_SetConfig+0xa70>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	2b06      	cmp	r3, #6
 80090d8:	d020      	beq.n	800911c <UART_SetConfig+0xa6c>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b07      	cmp	r3, #7
 80090e0:	d01a      	beq.n	8009118 <UART_SetConfig+0xa68>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	2b08      	cmp	r3, #8
 80090e8:	d014      	beq.n	8009114 <UART_SetConfig+0xa64>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ee:	2b09      	cmp	r3, #9
 80090f0:	d00e      	beq.n	8009110 <UART_SetConfig+0xa60>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	2b0a      	cmp	r3, #10
 80090f8:	d008      	beq.n	800910c <UART_SetConfig+0xa5c>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	2b0b      	cmp	r3, #11
 8009100:	d102      	bne.n	8009108 <UART_SetConfig+0xa58>
 8009102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009106:	e016      	b.n	8009136 <UART_SetConfig+0xa86>
 8009108:	2301      	movs	r3, #1
 800910a:	e014      	b.n	8009136 <UART_SetConfig+0xa86>
 800910c:	2380      	movs	r3, #128	; 0x80
 800910e:	e012      	b.n	8009136 <UART_SetConfig+0xa86>
 8009110:	2340      	movs	r3, #64	; 0x40
 8009112:	e010      	b.n	8009136 <UART_SetConfig+0xa86>
 8009114:	2320      	movs	r3, #32
 8009116:	e00e      	b.n	8009136 <UART_SetConfig+0xa86>
 8009118:	2310      	movs	r3, #16
 800911a:	e00c      	b.n	8009136 <UART_SetConfig+0xa86>
 800911c:	230c      	movs	r3, #12
 800911e:	e00a      	b.n	8009136 <UART_SetConfig+0xa86>
 8009120:	230a      	movs	r3, #10
 8009122:	e008      	b.n	8009136 <UART_SetConfig+0xa86>
 8009124:	2308      	movs	r3, #8
 8009126:	e006      	b.n	8009136 <UART_SetConfig+0xa86>
 8009128:	2306      	movs	r3, #6
 800912a:	e004      	b.n	8009136 <UART_SetConfig+0xa86>
 800912c:	2304      	movs	r3, #4
 800912e:	e002      	b.n	8009136 <UART_SetConfig+0xa86>
 8009130:	2302      	movs	r3, #2
 8009132:	e000      	b.n	8009136 <UART_SetConfig+0xa86>
 8009134:	2301      	movs	r3, #1
 8009136:	fbb2 f3f3 	udiv	r3, r2, r3
 800913a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800913c:	e115      	b.n	800936a <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	2b00      	cmp	r3, #0
 8009144:	d043      	beq.n	80091ce <UART_SetConfig+0xb1e>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	2b01      	cmp	r3, #1
 800914c:	d03d      	beq.n	80091ca <UART_SetConfig+0xb1a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	2b02      	cmp	r3, #2
 8009154:	d037      	beq.n	80091c6 <UART_SetConfig+0xb16>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	2b03      	cmp	r3, #3
 800915c:	d031      	beq.n	80091c2 <UART_SetConfig+0xb12>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b04      	cmp	r3, #4
 8009164:	d02b      	beq.n	80091be <UART_SetConfig+0xb0e>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	2b05      	cmp	r3, #5
 800916c:	d025      	beq.n	80091ba <UART_SetConfig+0xb0a>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	2b06      	cmp	r3, #6
 8009174:	d01f      	beq.n	80091b6 <UART_SetConfig+0xb06>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2b07      	cmp	r3, #7
 800917c:	d019      	beq.n	80091b2 <UART_SetConfig+0xb02>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	2b08      	cmp	r3, #8
 8009184:	d013      	beq.n	80091ae <UART_SetConfig+0xafe>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	2b09      	cmp	r3, #9
 800918c:	d00d      	beq.n	80091aa <UART_SetConfig+0xafa>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	2b0a      	cmp	r3, #10
 8009194:	d007      	beq.n	80091a6 <UART_SetConfig+0xaf6>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	2b0b      	cmp	r3, #11
 800919c:	d101      	bne.n	80091a2 <UART_SetConfig+0xaf2>
 800919e:	4b36      	ldr	r3, [pc, #216]	; (8009278 <UART_SetConfig+0xbc8>)
 80091a0:	e016      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091a2:	4b34      	ldr	r3, [pc, #208]	; (8009274 <UART_SetConfig+0xbc4>)
 80091a4:	e014      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091a6:	4b35      	ldr	r3, [pc, #212]	; (800927c <UART_SetConfig+0xbcc>)
 80091a8:	e012      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091aa:	4b35      	ldr	r3, [pc, #212]	; (8009280 <UART_SetConfig+0xbd0>)
 80091ac:	e010      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091ae:	4b35      	ldr	r3, [pc, #212]	; (8009284 <UART_SetConfig+0xbd4>)
 80091b0:	e00e      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091b2:	4b35      	ldr	r3, [pc, #212]	; (8009288 <UART_SetConfig+0xbd8>)
 80091b4:	e00c      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091b6:	4b35      	ldr	r3, [pc, #212]	; (800928c <UART_SetConfig+0xbdc>)
 80091b8:	e00a      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091ba:	4b35      	ldr	r3, [pc, #212]	; (8009290 <UART_SetConfig+0xbe0>)
 80091bc:	e008      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091be:	4b35      	ldr	r3, [pc, #212]	; (8009294 <UART_SetConfig+0xbe4>)
 80091c0:	e006      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091c2:	4b35      	ldr	r3, [pc, #212]	; (8009298 <UART_SetConfig+0xbe8>)
 80091c4:	e004      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091c6:	4b35      	ldr	r3, [pc, #212]	; (800929c <UART_SetConfig+0xbec>)
 80091c8:	e002      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091ca:	4b35      	ldr	r3, [pc, #212]	; (80092a0 <UART_SetConfig+0xbf0>)
 80091cc:	e000      	b.n	80091d0 <UART_SetConfig+0xb20>
 80091ce:	4b29      	ldr	r3, [pc, #164]	; (8009274 <UART_SetConfig+0xbc4>)
 80091d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091d2:	e0ca      	b.n	800936a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d046      	beq.n	800926a <UART_SetConfig+0xbba>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d040      	beq.n	8009266 <UART_SetConfig+0xbb6>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d03a      	beq.n	8009262 <UART_SetConfig+0xbb2>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d034      	beq.n	800925e <UART_SetConfig+0xbae>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d02e      	beq.n	800925a <UART_SetConfig+0xbaa>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	2b05      	cmp	r3, #5
 8009202:	d028      	beq.n	8009256 <UART_SetConfig+0xba6>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b06      	cmp	r3, #6
 800920a:	d022      	beq.n	8009252 <UART_SetConfig+0xba2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	2b07      	cmp	r3, #7
 8009212:	d01c      	beq.n	800924e <UART_SetConfig+0xb9e>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	2b08      	cmp	r3, #8
 800921a:	d016      	beq.n	800924a <UART_SetConfig+0xb9a>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	2b09      	cmp	r3, #9
 8009222:	d00f      	beq.n	8009244 <UART_SetConfig+0xb94>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	2b0a      	cmp	r3, #10
 800922a:	d008      	beq.n	800923e <UART_SetConfig+0xb8e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	2b0b      	cmp	r3, #11
 8009232:	d102      	bne.n	800923a <UART_SetConfig+0xb8a>
 8009234:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009238:	e018      	b.n	800926c <UART_SetConfig+0xbbc>
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <UART_SetConfig+0xbd8>)
 800923c:	e016      	b.n	800926c <UART_SetConfig+0xbbc>
 800923e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009242:	e013      	b.n	800926c <UART_SetConfig+0xbbc>
 8009244:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009248:	e010      	b.n	800926c <UART_SetConfig+0xbbc>
 800924a:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <UART_SetConfig+0xbf4>)
 800924c:	e00e      	b.n	800926c <UART_SetConfig+0xbbc>
 800924e:	4b0a      	ldr	r3, [pc, #40]	; (8009278 <UART_SetConfig+0xbc8>)
 8009250:	e00c      	b.n	800926c <UART_SetConfig+0xbbc>
 8009252:	4b15      	ldr	r3, [pc, #84]	; (80092a8 <UART_SetConfig+0xbf8>)
 8009254:	e00a      	b.n	800926c <UART_SetConfig+0xbbc>
 8009256:	4b15      	ldr	r3, [pc, #84]	; (80092ac <UART_SetConfig+0xbfc>)
 8009258:	e008      	b.n	800926c <UART_SetConfig+0xbbc>
 800925a:	4b08      	ldr	r3, [pc, #32]	; (800927c <UART_SetConfig+0xbcc>)
 800925c:	e006      	b.n	800926c <UART_SetConfig+0xbbc>
 800925e:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <UART_SetConfig+0xc00>)
 8009260:	e004      	b.n	800926c <UART_SetConfig+0xbbc>
 8009262:	4b07      	ldr	r3, [pc, #28]	; (8009280 <UART_SetConfig+0xbd0>)
 8009264:	e002      	b.n	800926c <UART_SetConfig+0xbbc>
 8009266:	4b07      	ldr	r3, [pc, #28]	; (8009284 <UART_SetConfig+0xbd4>)
 8009268:	e000      	b.n	800926c <UART_SetConfig+0xbbc>
 800926a:	4b07      	ldr	r3, [pc, #28]	; (8009288 <UART_SetConfig+0xbd8>)
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800926e:	e07c      	b.n	800936a <UART_SetConfig+0xcba>
 8009270:	58024400 	.word	0x58024400
 8009274:	03d09000 	.word	0x03d09000
 8009278:	0003d090 	.word	0x0003d090
 800927c:	0007a120 	.word	0x0007a120
 8009280:	000f4240 	.word	0x000f4240
 8009284:	001e8480 	.word	0x001e8480
 8009288:	003d0900 	.word	0x003d0900
 800928c:	00516155 	.word	0x00516155
 8009290:	0061a800 	.word	0x0061a800
 8009294:	007a1200 	.word	0x007a1200
 8009298:	00a2c2aa 	.word	0x00a2c2aa
 800929c:	00f42400 	.word	0x00f42400
 80092a0:	01e84800 	.word	0x01e84800
 80092a4:	0001e848 	.word	0x0001e848
 80092a8:	00051615 	.word	0x00051615
 80092ac:	00061a80 	.word	0x00061a80
 80092b0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d04e      	beq.n	800935a <UART_SetConfig+0xcaa>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d047      	beq.n	8009354 <UART_SetConfig+0xca4>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d040      	beq.n	800934e <UART_SetConfig+0xc9e>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d039      	beq.n	8009348 <UART_SetConfig+0xc98>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b04      	cmp	r3, #4
 80092da:	d032      	beq.n	8009342 <UART_SetConfig+0xc92>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b05      	cmp	r3, #5
 80092e2:	d02b      	beq.n	800933c <UART_SetConfig+0xc8c>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	2b06      	cmp	r3, #6
 80092ea:	d024      	beq.n	8009336 <UART_SetConfig+0xc86>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	2b07      	cmp	r3, #7
 80092f2:	d01d      	beq.n	8009330 <UART_SetConfig+0xc80>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d016      	beq.n	800932a <UART_SetConfig+0xc7a>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b09      	cmp	r3, #9
 8009302:	d00f      	beq.n	8009324 <UART_SetConfig+0xc74>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	2b0a      	cmp	r3, #10
 800930a:	d008      	beq.n	800931e <UART_SetConfig+0xc6e>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b0b      	cmp	r3, #11
 8009312:	d101      	bne.n	8009318 <UART_SetConfig+0xc68>
 8009314:	2380      	movs	r3, #128	; 0x80
 8009316:	e022      	b.n	800935e <UART_SetConfig+0xcae>
 8009318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800931c:	e01f      	b.n	800935e <UART_SetConfig+0xcae>
 800931e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009322:	e01c      	b.n	800935e <UART_SetConfig+0xcae>
 8009324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009328:	e019      	b.n	800935e <UART_SetConfig+0xcae>
 800932a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800932e:	e016      	b.n	800935e <UART_SetConfig+0xcae>
 8009330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009334:	e013      	b.n	800935e <UART_SetConfig+0xcae>
 8009336:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800933a:	e010      	b.n	800935e <UART_SetConfig+0xcae>
 800933c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009340:	e00d      	b.n	800935e <UART_SetConfig+0xcae>
 8009342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009346:	e00a      	b.n	800935e <UART_SetConfig+0xcae>
 8009348:	f241 5355 	movw	r3, #5461	; 0x1555
 800934c:	e007      	b.n	800935e <UART_SetConfig+0xcae>
 800934e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009352:	e004      	b.n	800935e <UART_SetConfig+0xcae>
 8009354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009358:	e001      	b.n	800935e <UART_SetConfig+0xcae>
 800935a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009360:	e003      	b.n	800936a <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009368:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	2b00      	cmp	r3, #0
 800936e:	f001 83e8 	beq.w	800ab42 <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	4413      	add	r3, r2
 800937c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937e:	429a      	cmp	r2, r3
 8009380:	d305      	bcc.n	800938e <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800938a:	429a      	cmp	r2, r3
 800938c:	d904      	bls.n	8009398 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009394:	f001 bbd5 	b.w	800ab42 <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8009398:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800939c:	2b08      	cmp	r3, #8
 800939e:	f000 8154 	beq.w	800964a <UART_SetConfig+0xf9a>
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	dc06      	bgt.n	80093b4 <UART_SetConfig+0xd04>
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d00f      	beq.n	80093ca <UART_SetConfig+0xd1a>
 80093aa:	2b04      	cmp	r3, #4
 80093ac:	f000 80ac 	beq.w	8009508 <UART_SetConfig+0xe58>
 80093b0:	f000 bc30 	b.w	8009c14 <UART_SetConfig+0x1564>
 80093b4:	2b20      	cmp	r3, #32
 80093b6:	f000 832d 	beq.w	8009a14 <UART_SetConfig+0x1364>
 80093ba:	2b40      	cmp	r3, #64	; 0x40
 80093bc:	f000 83a5 	beq.w	8009b0a <UART_SetConfig+0x145a>
 80093c0:	2b10      	cmp	r3, #16
 80093c2:	f000 81e3 	beq.w	800978c <UART_SetConfig+0x10dc>
 80093c6:	f000 bc25 	b.w	8009c14 <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093ca:	f7fe f8d9 	bl	8007580 <HAL_RCCEx_GetD3PCLK1Freq>
 80093ce:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	4618      	mov	r0, r3
 80093d4:	f04f 0100 	mov.w	r1, #0
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d067      	beq.n	80094b0 <UART_SetConfig+0xe00>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d05e      	beq.n	80094a6 <UART_SetConfig+0xdf6>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d055      	beq.n	800949c <UART_SetConfig+0xdec>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d04c      	beq.n	8009492 <UART_SetConfig+0xde2>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d043      	beq.n	8009488 <UART_SetConfig+0xdd8>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	2b05      	cmp	r3, #5
 8009406:	d03a      	beq.n	800947e <UART_SetConfig+0xdce>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	2b06      	cmp	r3, #6
 800940e:	d031      	beq.n	8009474 <UART_SetConfig+0xdc4>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	2b07      	cmp	r3, #7
 8009416:	d028      	beq.n	800946a <UART_SetConfig+0xdba>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941c:	2b08      	cmp	r3, #8
 800941e:	d01f      	beq.n	8009460 <UART_SetConfig+0xdb0>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	2b09      	cmp	r3, #9
 8009426:	d016      	beq.n	8009456 <UART_SetConfig+0xda6>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942c:	2b0a      	cmp	r3, #10
 800942e:	d00d      	beq.n	800944c <UART_SetConfig+0xd9c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	2b0b      	cmp	r3, #11
 8009436:	d104      	bne.n	8009442 <UART_SetConfig+0xd92>
 8009438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800943c:	f04f 0400 	mov.w	r4, #0
 8009440:	e03a      	b.n	80094b8 <UART_SetConfig+0xe08>
 8009442:	f04f 0301 	mov.w	r3, #1
 8009446:	f04f 0400 	mov.w	r4, #0
 800944a:	e035      	b.n	80094b8 <UART_SetConfig+0xe08>
 800944c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009450:	f04f 0400 	mov.w	r4, #0
 8009454:	e030      	b.n	80094b8 <UART_SetConfig+0xe08>
 8009456:	f04f 0340 	mov.w	r3, #64	; 0x40
 800945a:	f04f 0400 	mov.w	r4, #0
 800945e:	e02b      	b.n	80094b8 <UART_SetConfig+0xe08>
 8009460:	f04f 0320 	mov.w	r3, #32
 8009464:	f04f 0400 	mov.w	r4, #0
 8009468:	e026      	b.n	80094b8 <UART_SetConfig+0xe08>
 800946a:	f04f 0310 	mov.w	r3, #16
 800946e:	f04f 0400 	mov.w	r4, #0
 8009472:	e021      	b.n	80094b8 <UART_SetConfig+0xe08>
 8009474:	f04f 030c 	mov.w	r3, #12
 8009478:	f04f 0400 	mov.w	r4, #0
 800947c:	e01c      	b.n	80094b8 <UART_SetConfig+0xe08>
 800947e:	f04f 030a 	mov.w	r3, #10
 8009482:	f04f 0400 	mov.w	r4, #0
 8009486:	e017      	b.n	80094b8 <UART_SetConfig+0xe08>
 8009488:	f04f 0308 	mov.w	r3, #8
 800948c:	f04f 0400 	mov.w	r4, #0
 8009490:	e012      	b.n	80094b8 <UART_SetConfig+0xe08>
 8009492:	f04f 0306 	mov.w	r3, #6
 8009496:	f04f 0400 	mov.w	r4, #0
 800949a:	e00d      	b.n	80094b8 <UART_SetConfig+0xe08>
 800949c:	f04f 0304 	mov.w	r3, #4
 80094a0:	f04f 0400 	mov.w	r4, #0
 80094a4:	e008      	b.n	80094b8 <UART_SetConfig+0xe08>
 80094a6:	f04f 0302 	mov.w	r3, #2
 80094aa:	f04f 0400 	mov.w	r4, #0
 80094ae:	e003      	b.n	80094b8 <UART_SetConfig+0xe08>
 80094b0:	f04f 0301 	mov.w	r3, #1
 80094b4:	f04f 0400 	mov.w	r4, #0
 80094b8:	461a      	mov	r2, r3
 80094ba:	4623      	mov	r3, r4
 80094bc:	f7f6 ff0c 	bl	80002d8 <__aeabi_uldivmod>
 80094c0:	4603      	mov	r3, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	4619      	mov	r1, r3
 80094c6:	4622      	mov	r2, r4
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	f04f 0400 	mov.w	r4, #0
 80094d0:	0214      	lsls	r4, r2, #8
 80094d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80094d6:	020b      	lsls	r3, r1, #8
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6852      	ldr	r2, [r2, #4]
 80094dc:	0852      	lsrs	r2, r2, #1
 80094de:	4611      	mov	r1, r2
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	eb13 0b01 	adds.w	fp, r3, r1
 80094e8:	eb44 0c02 	adc.w	ip, r4, r2
 80094ec:	4658      	mov	r0, fp
 80094ee:	4661      	mov	r1, ip
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f04f 0400 	mov.w	r4, #0
 80094f8:	461a      	mov	r2, r3
 80094fa:	4623      	mov	r3, r4
 80094fc:	f7f6 feec 	bl	80002d8 <__aeabi_uldivmod>
 8009500:	4603      	mov	r3, r0
 8009502:	460c      	mov	r4, r1
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009506:	e389      	b.n	8009c1c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009508:	f107 0318 	add.w	r3, r7, #24
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe f84d 	bl	80075ac <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	4618      	mov	r0, r3
 8009516:	f04f 0100 	mov.w	r1, #0
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	d067      	beq.n	80095f2 <UART_SetConfig+0xf42>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	2b01      	cmp	r3, #1
 8009528:	d05e      	beq.n	80095e8 <UART_SetConfig+0xf38>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	2b02      	cmp	r3, #2
 8009530:	d055      	beq.n	80095de <UART_SetConfig+0xf2e>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	2b03      	cmp	r3, #3
 8009538:	d04c      	beq.n	80095d4 <UART_SetConfig+0xf24>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	2b04      	cmp	r3, #4
 8009540:	d043      	beq.n	80095ca <UART_SetConfig+0xf1a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	2b05      	cmp	r3, #5
 8009548:	d03a      	beq.n	80095c0 <UART_SetConfig+0xf10>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	2b06      	cmp	r3, #6
 8009550:	d031      	beq.n	80095b6 <UART_SetConfig+0xf06>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	2b07      	cmp	r3, #7
 8009558:	d028      	beq.n	80095ac <UART_SetConfig+0xefc>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	2b08      	cmp	r3, #8
 8009560:	d01f      	beq.n	80095a2 <UART_SetConfig+0xef2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	2b09      	cmp	r3, #9
 8009568:	d016      	beq.n	8009598 <UART_SetConfig+0xee8>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	2b0a      	cmp	r3, #10
 8009570:	d00d      	beq.n	800958e <UART_SetConfig+0xede>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	2b0b      	cmp	r3, #11
 8009578:	d104      	bne.n	8009584 <UART_SetConfig+0xed4>
 800957a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800957e:	f04f 0400 	mov.w	r4, #0
 8009582:	e03a      	b.n	80095fa <UART_SetConfig+0xf4a>
 8009584:	f04f 0301 	mov.w	r3, #1
 8009588:	f04f 0400 	mov.w	r4, #0
 800958c:	e035      	b.n	80095fa <UART_SetConfig+0xf4a>
 800958e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009592:	f04f 0400 	mov.w	r4, #0
 8009596:	e030      	b.n	80095fa <UART_SetConfig+0xf4a>
 8009598:	f04f 0340 	mov.w	r3, #64	; 0x40
 800959c:	f04f 0400 	mov.w	r4, #0
 80095a0:	e02b      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095a2:	f04f 0320 	mov.w	r3, #32
 80095a6:	f04f 0400 	mov.w	r4, #0
 80095aa:	e026      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095ac:	f04f 0310 	mov.w	r3, #16
 80095b0:	f04f 0400 	mov.w	r4, #0
 80095b4:	e021      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095b6:	f04f 030c 	mov.w	r3, #12
 80095ba:	f04f 0400 	mov.w	r4, #0
 80095be:	e01c      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095c0:	f04f 030a 	mov.w	r3, #10
 80095c4:	f04f 0400 	mov.w	r4, #0
 80095c8:	e017      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095ca:	f04f 0308 	mov.w	r3, #8
 80095ce:	f04f 0400 	mov.w	r4, #0
 80095d2:	e012      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095d4:	f04f 0306 	mov.w	r3, #6
 80095d8:	f04f 0400 	mov.w	r4, #0
 80095dc:	e00d      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095de:	f04f 0304 	mov.w	r3, #4
 80095e2:	f04f 0400 	mov.w	r4, #0
 80095e6:	e008      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095e8:	f04f 0302 	mov.w	r3, #2
 80095ec:	f04f 0400 	mov.w	r4, #0
 80095f0:	e003      	b.n	80095fa <UART_SetConfig+0xf4a>
 80095f2:	f04f 0301 	mov.w	r3, #1
 80095f6:	f04f 0400 	mov.w	r4, #0
 80095fa:	461a      	mov	r2, r3
 80095fc:	4623      	mov	r3, r4
 80095fe:	f7f6 fe6b 	bl	80002d8 <__aeabi_uldivmod>
 8009602:	4603      	mov	r3, r0
 8009604:	460c      	mov	r4, r1
 8009606:	4619      	mov	r1, r3
 8009608:	4622      	mov	r2, r4
 800960a:	f04f 0300 	mov.w	r3, #0
 800960e:	f04f 0400 	mov.w	r4, #0
 8009612:	0214      	lsls	r4, r2, #8
 8009614:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009618:	020b      	lsls	r3, r1, #8
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	6852      	ldr	r2, [r2, #4]
 800961e:	0852      	lsrs	r2, r2, #1
 8009620:	4611      	mov	r1, r2
 8009622:	f04f 0200 	mov.w	r2, #0
 8009626:	eb13 0b01 	adds.w	fp, r3, r1
 800962a:	eb44 0c02 	adc.w	ip, r4, r2
 800962e:	4658      	mov	r0, fp
 8009630:	4661      	mov	r1, ip
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f04f 0400 	mov.w	r4, #0
 800963a:	461a      	mov	r2, r3
 800963c:	4623      	mov	r3, r4
 800963e:	f7f6 fe4b 	bl	80002d8 <__aeabi_uldivmod>
 8009642:	4603      	mov	r3, r0
 8009644:	460c      	mov	r4, r1
 8009646:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009648:	e2e8      	b.n	8009c1c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800964a:	f107 030c 	add.w	r3, r7, #12
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe f8f8 	bl	8007844 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	4618      	mov	r0, r3
 8009658:	f04f 0100 	mov.w	r1, #0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	2b00      	cmp	r3, #0
 8009662:	d067      	beq.n	8009734 <UART_SetConfig+0x1084>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	2b01      	cmp	r3, #1
 800966a:	d05e      	beq.n	800972a <UART_SetConfig+0x107a>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	2b02      	cmp	r3, #2
 8009672:	d055      	beq.n	8009720 <UART_SetConfig+0x1070>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	2b03      	cmp	r3, #3
 800967a:	d04c      	beq.n	8009716 <UART_SetConfig+0x1066>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	2b04      	cmp	r3, #4
 8009682:	d043      	beq.n	800970c <UART_SetConfig+0x105c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	2b05      	cmp	r3, #5
 800968a:	d03a      	beq.n	8009702 <UART_SetConfig+0x1052>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	2b06      	cmp	r3, #6
 8009692:	d031      	beq.n	80096f8 <UART_SetConfig+0x1048>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	2b07      	cmp	r3, #7
 800969a:	d028      	beq.n	80096ee <UART_SetConfig+0x103e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d01f      	beq.n	80096e4 <UART_SetConfig+0x1034>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	2b09      	cmp	r3, #9
 80096aa:	d016      	beq.n	80096da <UART_SetConfig+0x102a>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b0:	2b0a      	cmp	r3, #10
 80096b2:	d00d      	beq.n	80096d0 <UART_SetConfig+0x1020>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	2b0b      	cmp	r3, #11
 80096ba:	d104      	bne.n	80096c6 <UART_SetConfig+0x1016>
 80096bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096c0:	f04f 0400 	mov.w	r4, #0
 80096c4:	e03a      	b.n	800973c <UART_SetConfig+0x108c>
 80096c6:	f04f 0301 	mov.w	r3, #1
 80096ca:	f04f 0400 	mov.w	r4, #0
 80096ce:	e035      	b.n	800973c <UART_SetConfig+0x108c>
 80096d0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80096d4:	f04f 0400 	mov.w	r4, #0
 80096d8:	e030      	b.n	800973c <UART_SetConfig+0x108c>
 80096da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80096de:	f04f 0400 	mov.w	r4, #0
 80096e2:	e02b      	b.n	800973c <UART_SetConfig+0x108c>
 80096e4:	f04f 0320 	mov.w	r3, #32
 80096e8:	f04f 0400 	mov.w	r4, #0
 80096ec:	e026      	b.n	800973c <UART_SetConfig+0x108c>
 80096ee:	f04f 0310 	mov.w	r3, #16
 80096f2:	f04f 0400 	mov.w	r4, #0
 80096f6:	e021      	b.n	800973c <UART_SetConfig+0x108c>
 80096f8:	f04f 030c 	mov.w	r3, #12
 80096fc:	f04f 0400 	mov.w	r4, #0
 8009700:	e01c      	b.n	800973c <UART_SetConfig+0x108c>
 8009702:	f04f 030a 	mov.w	r3, #10
 8009706:	f04f 0400 	mov.w	r4, #0
 800970a:	e017      	b.n	800973c <UART_SetConfig+0x108c>
 800970c:	f04f 0308 	mov.w	r3, #8
 8009710:	f04f 0400 	mov.w	r4, #0
 8009714:	e012      	b.n	800973c <UART_SetConfig+0x108c>
 8009716:	f04f 0306 	mov.w	r3, #6
 800971a:	f04f 0400 	mov.w	r4, #0
 800971e:	e00d      	b.n	800973c <UART_SetConfig+0x108c>
 8009720:	f04f 0304 	mov.w	r3, #4
 8009724:	f04f 0400 	mov.w	r4, #0
 8009728:	e008      	b.n	800973c <UART_SetConfig+0x108c>
 800972a:	f04f 0302 	mov.w	r3, #2
 800972e:	f04f 0400 	mov.w	r4, #0
 8009732:	e003      	b.n	800973c <UART_SetConfig+0x108c>
 8009734:	f04f 0301 	mov.w	r3, #1
 8009738:	f04f 0400 	mov.w	r4, #0
 800973c:	461a      	mov	r2, r3
 800973e:	4623      	mov	r3, r4
 8009740:	f7f6 fdca 	bl	80002d8 <__aeabi_uldivmod>
 8009744:	4603      	mov	r3, r0
 8009746:	460c      	mov	r4, r1
 8009748:	4619      	mov	r1, r3
 800974a:	4622      	mov	r2, r4
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	f04f 0400 	mov.w	r4, #0
 8009754:	0214      	lsls	r4, r2, #8
 8009756:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800975a:	020b      	lsls	r3, r1, #8
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	6852      	ldr	r2, [r2, #4]
 8009760:	0852      	lsrs	r2, r2, #1
 8009762:	4611      	mov	r1, r2
 8009764:	f04f 0200 	mov.w	r2, #0
 8009768:	eb13 0b01 	adds.w	fp, r3, r1
 800976c:	eb44 0c02 	adc.w	ip, r4, r2
 8009770:	4658      	mov	r0, fp
 8009772:	4661      	mov	r1, ip
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f04f 0400 	mov.w	r4, #0
 800977c:	461a      	mov	r2, r3
 800977e:	4623      	mov	r3, r4
 8009780:	f7f6 fdaa 	bl	80002d8 <__aeabi_uldivmod>
 8009784:	4603      	mov	r3, r0
 8009786:	460c      	mov	r4, r1
 8009788:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800978a:	e247      	b.n	8009c1c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800978c:	4b96      	ldr	r3, [pc, #600]	; (80099e8 <UART_SetConfig+0x1338>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0320 	and.w	r3, r3, #32
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80a3 	beq.w	80098e0 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800979a:	4b93      	ldr	r3, [pc, #588]	; (80099e8 <UART_SetConfig+0x1338>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	08db      	lsrs	r3, r3, #3
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	4a91      	ldr	r2, [pc, #580]	; (80099ec <UART_SetConfig+0x133c>)
 80097a6:	fa22 f303 	lsr.w	r3, r2, r3
 80097aa:	4618      	mov	r0, r3
 80097ac:	f04f 0100 	mov.w	r1, #0
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d067      	beq.n	8009888 <UART_SetConfig+0x11d8>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d05e      	beq.n	800987e <UART_SetConfig+0x11ce>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d055      	beq.n	8009874 <UART_SetConfig+0x11c4>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d04c      	beq.n	800986a <UART_SetConfig+0x11ba>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d043      	beq.n	8009860 <UART_SetConfig+0x11b0>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d03a      	beq.n	8009856 <UART_SetConfig+0x11a6>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	2b06      	cmp	r3, #6
 80097e6:	d031      	beq.n	800984c <UART_SetConfig+0x119c>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	d028      	beq.n	8009842 <UART_SetConfig+0x1192>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	2b08      	cmp	r3, #8
 80097f6:	d01f      	beq.n	8009838 <UART_SetConfig+0x1188>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	d016      	beq.n	800982e <UART_SetConfig+0x117e>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b0a      	cmp	r3, #10
 8009806:	d00d      	beq.n	8009824 <UART_SetConfig+0x1174>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b0b      	cmp	r3, #11
 800980e:	d104      	bne.n	800981a <UART_SetConfig+0x116a>
 8009810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009814:	f04f 0400 	mov.w	r4, #0
 8009818:	e03a      	b.n	8009890 <UART_SetConfig+0x11e0>
 800981a:	f04f 0301 	mov.w	r3, #1
 800981e:	f04f 0400 	mov.w	r4, #0
 8009822:	e035      	b.n	8009890 <UART_SetConfig+0x11e0>
 8009824:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009828:	f04f 0400 	mov.w	r4, #0
 800982c:	e030      	b.n	8009890 <UART_SetConfig+0x11e0>
 800982e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009832:	f04f 0400 	mov.w	r4, #0
 8009836:	e02b      	b.n	8009890 <UART_SetConfig+0x11e0>
 8009838:	f04f 0320 	mov.w	r3, #32
 800983c:	f04f 0400 	mov.w	r4, #0
 8009840:	e026      	b.n	8009890 <UART_SetConfig+0x11e0>
 8009842:	f04f 0310 	mov.w	r3, #16
 8009846:	f04f 0400 	mov.w	r4, #0
 800984a:	e021      	b.n	8009890 <UART_SetConfig+0x11e0>
 800984c:	f04f 030c 	mov.w	r3, #12
 8009850:	f04f 0400 	mov.w	r4, #0
 8009854:	e01c      	b.n	8009890 <UART_SetConfig+0x11e0>
 8009856:	f04f 030a 	mov.w	r3, #10
 800985a:	f04f 0400 	mov.w	r4, #0
 800985e:	e017      	b.n	8009890 <UART_SetConfig+0x11e0>
 8009860:	f04f 0308 	mov.w	r3, #8
 8009864:	f04f 0400 	mov.w	r4, #0
 8009868:	e012      	b.n	8009890 <UART_SetConfig+0x11e0>
 800986a:	f04f 0306 	mov.w	r3, #6
 800986e:	f04f 0400 	mov.w	r4, #0
 8009872:	e00d      	b.n	8009890 <UART_SetConfig+0x11e0>
 8009874:	f04f 0304 	mov.w	r3, #4
 8009878:	f04f 0400 	mov.w	r4, #0
 800987c:	e008      	b.n	8009890 <UART_SetConfig+0x11e0>
 800987e:	f04f 0302 	mov.w	r3, #2
 8009882:	f04f 0400 	mov.w	r4, #0
 8009886:	e003      	b.n	8009890 <UART_SetConfig+0x11e0>
 8009888:	f04f 0301 	mov.w	r3, #1
 800988c:	f04f 0400 	mov.w	r4, #0
 8009890:	461a      	mov	r2, r3
 8009892:	4623      	mov	r3, r4
 8009894:	f7f6 fd20 	bl	80002d8 <__aeabi_uldivmod>
 8009898:	4603      	mov	r3, r0
 800989a:	460c      	mov	r4, r1
 800989c:	4619      	mov	r1, r3
 800989e:	4622      	mov	r2, r4
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	f04f 0400 	mov.w	r4, #0
 80098a8:	0214      	lsls	r4, r2, #8
 80098aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80098ae:	020b      	lsls	r3, r1, #8
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6852      	ldr	r2, [r2, #4]
 80098b4:	0852      	lsrs	r2, r2, #1
 80098b6:	4611      	mov	r1, r2
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	eb13 0b01 	adds.w	fp, r3, r1
 80098c0:	eb44 0c02 	adc.w	ip, r4, r2
 80098c4:	4658      	mov	r0, fp
 80098c6:	4661      	mov	r1, ip
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f04f 0400 	mov.w	r4, #0
 80098d0:	461a      	mov	r2, r3
 80098d2:	4623      	mov	r3, r4
 80098d4:	f7f6 fd00 	bl	80002d8 <__aeabi_uldivmod>
 80098d8:	4603      	mov	r3, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80098de:	e19d      	b.n	8009c1c <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d05b      	beq.n	80099a0 <UART_SetConfig+0x12f0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d053      	beq.n	8009998 <UART_SetConfig+0x12e8>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d04b      	beq.n	8009990 <UART_SetConfig+0x12e0>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d043      	beq.n	8009988 <UART_SetConfig+0x12d8>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	2b04      	cmp	r3, #4
 8009906:	d03b      	beq.n	8009980 <UART_SetConfig+0x12d0>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	2b05      	cmp	r3, #5
 800990e:	d033      	beq.n	8009978 <UART_SetConfig+0x12c8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	2b06      	cmp	r3, #6
 8009916:	d02b      	beq.n	8009970 <UART_SetConfig+0x12c0>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b07      	cmp	r3, #7
 800991e:	d023      	beq.n	8009968 <UART_SetConfig+0x12b8>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	2b08      	cmp	r3, #8
 8009926:	d01b      	beq.n	8009960 <UART_SetConfig+0x12b0>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	2b09      	cmp	r3, #9
 800992e:	d013      	beq.n	8009958 <UART_SetConfig+0x12a8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	2b0a      	cmp	r3, #10
 8009936:	d00b      	beq.n	8009950 <UART_SetConfig+0x12a0>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b0b      	cmp	r3, #11
 800993e:	d103      	bne.n	8009948 <UART_SetConfig+0x1298>
 8009940:	4b2a      	ldr	r3, [pc, #168]	; (80099ec <UART_SetConfig+0x133c>)
 8009942:	f04f 0400 	mov.w	r4, #0
 8009946:	e02e      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009948:	4b29      	ldr	r3, [pc, #164]	; (80099f0 <UART_SetConfig+0x1340>)
 800994a:	f04f 0403 	mov.w	r4, #3
 800994e:	e02a      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009950:	4b28      	ldr	r3, [pc, #160]	; (80099f4 <UART_SetConfig+0x1344>)
 8009952:	f04f 0400 	mov.w	r4, #0
 8009956:	e026      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009958:	4b27      	ldr	r3, [pc, #156]	; (80099f8 <UART_SetConfig+0x1348>)
 800995a:	f04f 0400 	mov.w	r4, #0
 800995e:	e022      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009960:	4b26      	ldr	r3, [pc, #152]	; (80099fc <UART_SetConfig+0x134c>)
 8009962:	f04f 0400 	mov.w	r4, #0
 8009966:	e01e      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009968:	4b25      	ldr	r3, [pc, #148]	; (8009a00 <UART_SetConfig+0x1350>)
 800996a:	f04f 0400 	mov.w	r4, #0
 800996e:	e01a      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009970:	a419      	add	r4, pc, #100	; (adr r4, 80099d8 <UART_SetConfig+0x1328>)
 8009972:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009976:	e016      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009978:	4b22      	ldr	r3, [pc, #136]	; (8009a04 <UART_SetConfig+0x1354>)
 800997a:	f04f 0400 	mov.w	r4, #0
 800997e:	e012      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009980:	4b21      	ldr	r3, [pc, #132]	; (8009a08 <UART_SetConfig+0x1358>)
 8009982:	f04f 0400 	mov.w	r4, #0
 8009986:	e00e      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009988:	a415      	add	r4, pc, #84	; (adr r4, 80099e0 <UART_SetConfig+0x1330>)
 800998a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800998e:	e00a      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009990:	4b1e      	ldr	r3, [pc, #120]	; (8009a0c <UART_SetConfig+0x135c>)
 8009992:	f04f 0400 	mov.w	r4, #0
 8009996:	e006      	b.n	80099a6 <UART_SetConfig+0x12f6>
 8009998:	4b1d      	ldr	r3, [pc, #116]	; (8009a10 <UART_SetConfig+0x1360>)
 800999a:	f04f 0401 	mov.w	r4, #1
 800999e:	e002      	b.n	80099a6 <UART_SetConfig+0x12f6>
 80099a0:	4b13      	ldr	r3, [pc, #76]	; (80099f0 <UART_SetConfig+0x1340>)
 80099a2:	f04f 0403 	mov.w	r4, #3
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6852      	ldr	r2, [r2, #4]
 80099aa:	0852      	lsrs	r2, r2, #1
 80099ac:	4611      	mov	r1, r2
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	eb13 0b01 	adds.w	fp, r3, r1
 80099b6:	eb44 0c02 	adc.w	ip, r4, r2
 80099ba:	4658      	mov	r0, fp
 80099bc:	4661      	mov	r1, ip
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f04f 0400 	mov.w	r4, #0
 80099c6:	461a      	mov	r2, r3
 80099c8:	4623      	mov	r3, r4
 80099ca:	f7f6 fc85 	bl	80002d8 <__aeabi_uldivmod>
 80099ce:	4603      	mov	r3, r0
 80099d0:	460c      	mov	r4, r1
 80099d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80099d4:	e122      	b.n	8009c1c <UART_SetConfig+0x156c>
 80099d6:	bf00      	nop
 80099d8:	51615500 	.word	0x51615500
 80099dc:	00000000 	.word	0x00000000
 80099e0:	a2c2aa00 	.word	0xa2c2aa00
 80099e4:	00000000 	.word	0x00000000
 80099e8:	58024400 	.word	0x58024400
 80099ec:	03d09000 	.word	0x03d09000
 80099f0:	d0900000 	.word	0xd0900000
 80099f4:	07a12000 	.word	0x07a12000
 80099f8:	0f424000 	.word	0x0f424000
 80099fc:	1e848000 	.word	0x1e848000
 8009a00:	3d090000 	.word	0x3d090000
 8009a04:	61a80000 	.word	0x61a80000
 8009a08:	7a120000 	.word	0x7a120000
 8009a0c:	f4240000 	.word	0xf4240000
 8009a10:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d05b      	beq.n	8009ad4 <UART_SetConfig+0x1424>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d053      	beq.n	8009acc <UART_SetConfig+0x141c>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d04b      	beq.n	8009ac4 <UART_SetConfig+0x1414>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d043      	beq.n	8009abc <UART_SetConfig+0x140c>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d03b      	beq.n	8009ab4 <UART_SetConfig+0x1404>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b05      	cmp	r3, #5
 8009a42:	d033      	beq.n	8009aac <UART_SetConfig+0x13fc>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	2b06      	cmp	r3, #6
 8009a4a:	d02b      	beq.n	8009aa4 <UART_SetConfig+0x13f4>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	2b07      	cmp	r3, #7
 8009a52:	d023      	beq.n	8009a9c <UART_SetConfig+0x13ec>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d01b      	beq.n	8009a94 <UART_SetConfig+0x13e4>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b09      	cmp	r3, #9
 8009a62:	d013      	beq.n	8009a8c <UART_SetConfig+0x13dc>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b0a      	cmp	r3, #10
 8009a6a:	d00b      	beq.n	8009a84 <UART_SetConfig+0x13d4>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b0b      	cmp	r3, #11
 8009a72:	d103      	bne.n	8009a7c <UART_SetConfig+0x13cc>
 8009a74:	4bc0      	ldr	r3, [pc, #768]	; (8009d78 <UART_SetConfig+0x16c8>)
 8009a76:	f04f 0400 	mov.w	r4, #0
 8009a7a:	e02e      	b.n	8009ada <UART_SetConfig+0x142a>
 8009a7c:	4bbf      	ldr	r3, [pc, #764]	; (8009d7c <UART_SetConfig+0x16cc>)
 8009a7e:	f04f 0400 	mov.w	r4, #0
 8009a82:	e02a      	b.n	8009ada <UART_SetConfig+0x142a>
 8009a84:	4bbe      	ldr	r3, [pc, #760]	; (8009d80 <UART_SetConfig+0x16d0>)
 8009a86:	f04f 0400 	mov.w	r4, #0
 8009a8a:	e026      	b.n	8009ada <UART_SetConfig+0x142a>
 8009a8c:	4bbd      	ldr	r3, [pc, #756]	; (8009d84 <UART_SetConfig+0x16d4>)
 8009a8e:	f04f 0400 	mov.w	r4, #0
 8009a92:	e022      	b.n	8009ada <UART_SetConfig+0x142a>
 8009a94:	4bbc      	ldr	r3, [pc, #752]	; (8009d88 <UART_SetConfig+0x16d8>)
 8009a96:	f04f 0400 	mov.w	r4, #0
 8009a9a:	e01e      	b.n	8009ada <UART_SetConfig+0x142a>
 8009a9c:	4bbb      	ldr	r3, [pc, #748]	; (8009d8c <UART_SetConfig+0x16dc>)
 8009a9e:	f04f 0400 	mov.w	r4, #0
 8009aa2:	e01a      	b.n	8009ada <UART_SetConfig+0x142a>
 8009aa4:	a4b0      	add	r4, pc, #704	; (adr r4, 8009d68 <UART_SetConfig+0x16b8>)
 8009aa6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009aaa:	e016      	b.n	8009ada <UART_SetConfig+0x142a>
 8009aac:	4bb8      	ldr	r3, [pc, #736]	; (8009d90 <UART_SetConfig+0x16e0>)
 8009aae:	f04f 0400 	mov.w	r4, #0
 8009ab2:	e012      	b.n	8009ada <UART_SetConfig+0x142a>
 8009ab4:	4bb7      	ldr	r3, [pc, #732]	; (8009d94 <UART_SetConfig+0x16e4>)
 8009ab6:	f04f 0400 	mov.w	r4, #0
 8009aba:	e00e      	b.n	8009ada <UART_SetConfig+0x142a>
 8009abc:	a4ac      	add	r4, pc, #688	; (adr r4, 8009d70 <UART_SetConfig+0x16c0>)
 8009abe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009ac2:	e00a      	b.n	8009ada <UART_SetConfig+0x142a>
 8009ac4:	4bb4      	ldr	r3, [pc, #720]	; (8009d98 <UART_SetConfig+0x16e8>)
 8009ac6:	f04f 0400 	mov.w	r4, #0
 8009aca:	e006      	b.n	8009ada <UART_SetConfig+0x142a>
 8009acc:	4bb3      	ldr	r3, [pc, #716]	; (8009d9c <UART_SetConfig+0x16ec>)
 8009ace:	f04f 0400 	mov.w	r4, #0
 8009ad2:	e002      	b.n	8009ada <UART_SetConfig+0x142a>
 8009ad4:	4ba9      	ldr	r3, [pc, #676]	; (8009d7c <UART_SetConfig+0x16cc>)
 8009ad6:	f04f 0400 	mov.w	r4, #0
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	6852      	ldr	r2, [r2, #4]
 8009ade:	0852      	lsrs	r2, r2, #1
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	eb13 0b01 	adds.w	fp, r3, r1
 8009aea:	eb44 0c02 	adc.w	ip, r4, r2
 8009aee:	4658      	mov	r0, fp
 8009af0:	4661      	mov	r1, ip
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f04f 0400 	mov.w	r4, #0
 8009afa:	461a      	mov	r2, r3
 8009afc:	4623      	mov	r3, r4
 8009afe:	f7f6 fbeb 	bl	80002d8 <__aeabi_uldivmod>
 8009b02:	4603      	mov	r3, r0
 8009b04:	460c      	mov	r4, r1
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b08:	e088      	b.n	8009c1c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d064      	beq.n	8009bdc <UART_SetConfig+0x152c>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d05b      	beq.n	8009bd2 <UART_SetConfig+0x1522>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d052      	beq.n	8009bc8 <UART_SetConfig+0x1518>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d04a      	beq.n	8009bc0 <UART_SetConfig+0x1510>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	d041      	beq.n	8009bb6 <UART_SetConfig+0x1506>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	2b05      	cmp	r3, #5
 8009b38:	d039      	beq.n	8009bae <UART_SetConfig+0x14fe>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	2b06      	cmp	r3, #6
 8009b40:	d031      	beq.n	8009ba6 <UART_SetConfig+0x14f6>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	2b07      	cmp	r3, #7
 8009b48:	d028      	beq.n	8009b9c <UART_SetConfig+0x14ec>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	2b08      	cmp	r3, #8
 8009b50:	d01f      	beq.n	8009b92 <UART_SetConfig+0x14e2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	2b09      	cmp	r3, #9
 8009b58:	d016      	beq.n	8009b88 <UART_SetConfig+0x14d8>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	2b0a      	cmp	r3, #10
 8009b60:	d00d      	beq.n	8009b7e <UART_SetConfig+0x14ce>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	2b0b      	cmp	r3, #11
 8009b68:	d104      	bne.n	8009b74 <UART_SetConfig+0x14c4>
 8009b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b6e:	f04f 0400 	mov.w	r4, #0
 8009b72:	e037      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009b74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009b78:	f04f 0400 	mov.w	r4, #0
 8009b7c:	e032      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b82:	f04f 0400 	mov.w	r4, #0
 8009b86:	e02d      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b8c:	f04f 0400 	mov.w	r4, #0
 8009b90:	e028      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009b92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b96:	f04f 0400 	mov.w	r4, #0
 8009b9a:	e023      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009b9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ba0:	f04f 0400 	mov.w	r4, #0
 8009ba4:	e01e      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009ba6:	4b7e      	ldr	r3, [pc, #504]	; (8009da0 <UART_SetConfig+0x16f0>)
 8009ba8:	f04f 0400 	mov.w	r4, #0
 8009bac:	e01a      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009bae:	4b7d      	ldr	r3, [pc, #500]	; (8009da4 <UART_SetConfig+0x16f4>)
 8009bb0:	f04f 0400 	mov.w	r4, #0
 8009bb4:	e016      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009bb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009bba:	f04f 0400 	mov.w	r4, #0
 8009bbe:	e011      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009bc0:	4b79      	ldr	r3, [pc, #484]	; (8009da8 <UART_SetConfig+0x16f8>)
 8009bc2:	f04f 0400 	mov.w	r4, #0
 8009bc6:	e00d      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009bc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009bcc:	f04f 0400 	mov.w	r4, #0
 8009bd0:	e008      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009bd6:	f04f 0400 	mov.w	r4, #0
 8009bda:	e003      	b.n	8009be4 <UART_SetConfig+0x1534>
 8009bdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009be0:	f04f 0400 	mov.w	r4, #0
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6852      	ldr	r2, [r2, #4]
 8009be8:	0852      	lsrs	r2, r2, #1
 8009bea:	4611      	mov	r1, r2
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	eb13 0b01 	adds.w	fp, r3, r1
 8009bf4:	eb44 0c02 	adc.w	ip, r4, r2
 8009bf8:	4658      	mov	r0, fp
 8009bfa:	4661      	mov	r1, ip
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f04f 0400 	mov.w	r4, #0
 8009c04:	461a      	mov	r2, r3
 8009c06:	4623      	mov	r3, r4
 8009c08:	f7f6 fb66 	bl	80002d8 <__aeabi_uldivmod>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	460c      	mov	r4, r1
 8009c10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c12:	e003      	b.n	8009c1c <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8009c1a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c22:	d309      	bcc.n	8009c38 <UART_SetConfig+0x1588>
 8009c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c2a:	d205      	bcs.n	8009c38 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c32:	60da      	str	r2, [r3, #12]
 8009c34:	f000 bf85 	b.w	800ab42 <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	f000 bf80 	b.w	800ab42 <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c4a:	f040 83da 	bne.w	800a402 <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 8009c4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c52:	2b40      	cmp	r3, #64	; 0x40
 8009c54:	f200 83b3 	bhi.w	800a3be <UART_SetConfig+0x1d0e>
 8009c58:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <UART_SetConfig+0x15b0>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009dad 	.word	0x08009dad
 8009c64:	08009e65 	.word	0x08009e65
 8009c68:	0800a3bf 	.word	0x0800a3bf
 8009c6c:	0800a3bf 	.word	0x0800a3bf
 8009c70:	08009f1d 	.word	0x08009f1d
 8009c74:	0800a3bf 	.word	0x0800a3bf
 8009c78:	0800a3bf 	.word	0x0800a3bf
 8009c7c:	0800a3bf 	.word	0x0800a3bf
 8009c80:	08009fd9 	.word	0x08009fd9
 8009c84:	0800a3bf 	.word	0x0800a3bf
 8009c88:	0800a3bf 	.word	0x0800a3bf
 8009c8c:	0800a3bf 	.word	0x0800a3bf
 8009c90:	0800a3bf 	.word	0x0800a3bf
 8009c94:	0800a3bf 	.word	0x0800a3bf
 8009c98:	0800a3bf 	.word	0x0800a3bf
 8009c9c:	0800a3bf 	.word	0x0800a3bf
 8009ca0:	0800a095 	.word	0x0800a095
 8009ca4:	0800a3bf 	.word	0x0800a3bf
 8009ca8:	0800a3bf 	.word	0x0800a3bf
 8009cac:	0800a3bf 	.word	0x0800a3bf
 8009cb0:	0800a3bf 	.word	0x0800a3bf
 8009cb4:	0800a3bf 	.word	0x0800a3bf
 8009cb8:	0800a3bf 	.word	0x0800a3bf
 8009cbc:	0800a3bf 	.word	0x0800a3bf
 8009cc0:	0800a3bf 	.word	0x0800a3bf
 8009cc4:	0800a3bf 	.word	0x0800a3bf
 8009cc8:	0800a3bf 	.word	0x0800a3bf
 8009ccc:	0800a3bf 	.word	0x0800a3bf
 8009cd0:	0800a3bf 	.word	0x0800a3bf
 8009cd4:	0800a3bf 	.word	0x0800a3bf
 8009cd8:	0800a3bf 	.word	0x0800a3bf
 8009cdc:	0800a3bf 	.word	0x0800a3bf
 8009ce0:	0800a207 	.word	0x0800a207
 8009ce4:	0800a3bf 	.word	0x0800a3bf
 8009ce8:	0800a3bf 	.word	0x0800a3bf
 8009cec:	0800a3bf 	.word	0x0800a3bf
 8009cf0:	0800a3bf 	.word	0x0800a3bf
 8009cf4:	0800a3bf 	.word	0x0800a3bf
 8009cf8:	0800a3bf 	.word	0x0800a3bf
 8009cfc:	0800a3bf 	.word	0x0800a3bf
 8009d00:	0800a3bf 	.word	0x0800a3bf
 8009d04:	0800a3bf 	.word	0x0800a3bf
 8009d08:	0800a3bf 	.word	0x0800a3bf
 8009d0c:	0800a3bf 	.word	0x0800a3bf
 8009d10:	0800a3bf 	.word	0x0800a3bf
 8009d14:	0800a3bf 	.word	0x0800a3bf
 8009d18:	0800a3bf 	.word	0x0800a3bf
 8009d1c:	0800a3bf 	.word	0x0800a3bf
 8009d20:	0800a3bf 	.word	0x0800a3bf
 8009d24:	0800a3bf 	.word	0x0800a3bf
 8009d28:	0800a3bf 	.word	0x0800a3bf
 8009d2c:	0800a3bf 	.word	0x0800a3bf
 8009d30:	0800a3bf 	.word	0x0800a3bf
 8009d34:	0800a3bf 	.word	0x0800a3bf
 8009d38:	0800a3bf 	.word	0x0800a3bf
 8009d3c:	0800a3bf 	.word	0x0800a3bf
 8009d40:	0800a3bf 	.word	0x0800a3bf
 8009d44:	0800a3bf 	.word	0x0800a3bf
 8009d48:	0800a3bf 	.word	0x0800a3bf
 8009d4c:	0800a3bf 	.word	0x0800a3bf
 8009d50:	0800a3bf 	.word	0x0800a3bf
 8009d54:	0800a3bf 	.word	0x0800a3bf
 8009d58:	0800a3bf 	.word	0x0800a3bf
 8009d5c:	0800a3bf 	.word	0x0800a3bf
 8009d60:	0800a2fd 	.word	0x0800a2fd
 8009d64:	f3af 8000 	nop.w
 8009d68:	05161500 	.word	0x05161500
 8009d6c:	00000000 	.word	0x00000000
 8009d70:	0a2c2a00 	.word	0x0a2c2a00
 8009d74:	00000000 	.word	0x00000000
 8009d78:	003d0900 	.word	0x003d0900
 8009d7c:	3d090000 	.word	0x3d090000
 8009d80:	007a1200 	.word	0x007a1200
 8009d84:	00f42400 	.word	0x00f42400
 8009d88:	01e84800 	.word	0x01e84800
 8009d8c:	03d09000 	.word	0x03d09000
 8009d90:	061a8000 	.word	0x061a8000
 8009d94:	07a12000 	.word	0x07a12000
 8009d98:	0f424000 	.word	0x0f424000
 8009d9c:	1e848000 	.word	0x1e848000
 8009da0:	000aaa00 	.word	0x000aaa00
 8009da4:	000ccc00 	.word	0x000ccc00
 8009da8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dac:	f7fc fa1a 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 8009db0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d044      	beq.n	8009e44 <UART_SetConfig+0x1794>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d03e      	beq.n	8009e40 <UART_SetConfig+0x1790>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d038      	beq.n	8009e3c <UART_SetConfig+0x178c>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d032      	beq.n	8009e38 <UART_SetConfig+0x1788>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2b04      	cmp	r3, #4
 8009dd8:	d02c      	beq.n	8009e34 <UART_SetConfig+0x1784>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d026      	beq.n	8009e30 <UART_SetConfig+0x1780>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de6:	2b06      	cmp	r3, #6
 8009de8:	d020      	beq.n	8009e2c <UART_SetConfig+0x177c>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	2b07      	cmp	r3, #7
 8009df0:	d01a      	beq.n	8009e28 <UART_SetConfig+0x1778>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b08      	cmp	r3, #8
 8009df8:	d014      	beq.n	8009e24 <UART_SetConfig+0x1774>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	2b09      	cmp	r3, #9
 8009e00:	d00e      	beq.n	8009e20 <UART_SetConfig+0x1770>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	2b0a      	cmp	r3, #10
 8009e08:	d008      	beq.n	8009e1c <UART_SetConfig+0x176c>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	2b0b      	cmp	r3, #11
 8009e10:	d102      	bne.n	8009e18 <UART_SetConfig+0x1768>
 8009e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e16:	e016      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e014      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e1c:	2380      	movs	r3, #128	; 0x80
 8009e1e:	e012      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e20:	2340      	movs	r3, #64	; 0x40
 8009e22:	e010      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e24:	2320      	movs	r3, #32
 8009e26:	e00e      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e28:	2310      	movs	r3, #16
 8009e2a:	e00c      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e2c:	230c      	movs	r3, #12
 8009e2e:	e00a      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e30:	230a      	movs	r3, #10
 8009e32:	e008      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e34:	2308      	movs	r3, #8
 8009e36:	e006      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e38:	2306      	movs	r3, #6
 8009e3a:	e004      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	e002      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e40:	2302      	movs	r3, #2
 8009e42:	e000      	b.n	8009e46 <UART_SetConfig+0x1796>
 8009e44:	2301      	movs	r3, #1
 8009e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4c:	005a      	lsls	r2, r3, #1
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	085b      	lsrs	r3, r3, #1
 8009e54:	441a      	add	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e62:	e2b0      	b.n	800a3c6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e64:	f7fc f9d4 	bl	8006210 <HAL_RCC_GetPCLK2Freq>
 8009e68:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d044      	beq.n	8009efc <UART_SetConfig+0x184c>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d03e      	beq.n	8009ef8 <UART_SetConfig+0x1848>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d038      	beq.n	8009ef4 <UART_SetConfig+0x1844>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d032      	beq.n	8009ef0 <UART_SetConfig+0x1840>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d02c      	beq.n	8009eec <UART_SetConfig+0x183c>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	d026      	beq.n	8009ee8 <UART_SetConfig+0x1838>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	2b06      	cmp	r3, #6
 8009ea0:	d020      	beq.n	8009ee4 <UART_SetConfig+0x1834>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	2b07      	cmp	r3, #7
 8009ea8:	d01a      	beq.n	8009ee0 <UART_SetConfig+0x1830>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	d014      	beq.n	8009edc <UART_SetConfig+0x182c>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d00e      	beq.n	8009ed8 <UART_SetConfig+0x1828>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebe:	2b0a      	cmp	r3, #10
 8009ec0:	d008      	beq.n	8009ed4 <UART_SetConfig+0x1824>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	2b0b      	cmp	r3, #11
 8009ec8:	d102      	bne.n	8009ed0 <UART_SetConfig+0x1820>
 8009eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ece:	e016      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e014      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ed4:	2380      	movs	r3, #128	; 0x80
 8009ed6:	e012      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	e010      	b.n	8009efe <UART_SetConfig+0x184e>
 8009edc:	2320      	movs	r3, #32
 8009ede:	e00e      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	e00c      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ee4:	230c      	movs	r3, #12
 8009ee6:	e00a      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ee8:	230a      	movs	r3, #10
 8009eea:	e008      	b.n	8009efe <UART_SetConfig+0x184e>
 8009eec:	2308      	movs	r3, #8
 8009eee:	e006      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ef0:	2306      	movs	r3, #6
 8009ef2:	e004      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	e002      	b.n	8009efe <UART_SetConfig+0x184e>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e000      	b.n	8009efe <UART_SetConfig+0x184e>
 8009efc:	2301      	movs	r3, #1
 8009efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f04:	005a      	lsls	r2, r3, #1
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	085b      	lsrs	r3, r3, #1
 8009f0c:	441a      	add	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f1a:	e254      	b.n	800a3c6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1c:	f107 0318 	add.w	r3, r7, #24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fd fb43 	bl	80075ac <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f26:	69fa      	ldr	r2, [r7, #28]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d044      	beq.n	8009fba <UART_SetConfig+0x190a>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d03e      	beq.n	8009fb6 <UART_SetConfig+0x1906>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d038      	beq.n	8009fb2 <UART_SetConfig+0x1902>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d032      	beq.n	8009fae <UART_SetConfig+0x18fe>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d02c      	beq.n	8009faa <UART_SetConfig+0x18fa>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	2b05      	cmp	r3, #5
 8009f56:	d026      	beq.n	8009fa6 <UART_SetConfig+0x18f6>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2b06      	cmp	r3, #6
 8009f5e:	d020      	beq.n	8009fa2 <UART_SetConfig+0x18f2>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	2b07      	cmp	r3, #7
 8009f66:	d01a      	beq.n	8009f9e <UART_SetConfig+0x18ee>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d014      	beq.n	8009f9a <UART_SetConfig+0x18ea>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d00e      	beq.n	8009f96 <UART_SetConfig+0x18e6>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	2b0a      	cmp	r3, #10
 8009f7e:	d008      	beq.n	8009f92 <UART_SetConfig+0x18e2>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	2b0b      	cmp	r3, #11
 8009f86:	d102      	bne.n	8009f8e <UART_SetConfig+0x18de>
 8009f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f8c:	e016      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e014      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009f92:	2380      	movs	r3, #128	; 0x80
 8009f94:	e012      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009f96:	2340      	movs	r3, #64	; 0x40
 8009f98:	e010      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009f9a:	2320      	movs	r3, #32
 8009f9c:	e00e      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009f9e:	2310      	movs	r3, #16
 8009fa0:	e00c      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	e00a      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009fa6:	230a      	movs	r3, #10
 8009fa8:	e008      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009faa:	2308      	movs	r3, #8
 8009fac:	e006      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009fae:	2306      	movs	r3, #6
 8009fb0:	e004      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009fb2:	2304      	movs	r3, #4
 8009fb4:	e002      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	e000      	b.n	8009fbc <UART_SetConfig+0x190c>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc0:	005a      	lsls	r2, r3, #1
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	085b      	lsrs	r3, r3, #1
 8009fc8:	441a      	add	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fd6:	e1f6      	b.n	800a3c6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fd8:	f107 030c 	add.w	r3, r7, #12
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fd fc31 	bl	8007844 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d044      	beq.n	800a076 <UART_SetConfig+0x19c6>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d03e      	beq.n	800a072 <UART_SetConfig+0x19c2>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d038      	beq.n	800a06e <UART_SetConfig+0x19be>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	2b03      	cmp	r3, #3
 800a002:	d032      	beq.n	800a06a <UART_SetConfig+0x19ba>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	2b04      	cmp	r3, #4
 800a00a:	d02c      	beq.n	800a066 <UART_SetConfig+0x19b6>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	2b05      	cmp	r3, #5
 800a012:	d026      	beq.n	800a062 <UART_SetConfig+0x19b2>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	2b06      	cmp	r3, #6
 800a01a:	d020      	beq.n	800a05e <UART_SetConfig+0x19ae>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2b07      	cmp	r3, #7
 800a022:	d01a      	beq.n	800a05a <UART_SetConfig+0x19aa>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	2b08      	cmp	r3, #8
 800a02a:	d014      	beq.n	800a056 <UART_SetConfig+0x19a6>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	2b09      	cmp	r3, #9
 800a032:	d00e      	beq.n	800a052 <UART_SetConfig+0x19a2>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	2b0a      	cmp	r3, #10
 800a03a:	d008      	beq.n	800a04e <UART_SetConfig+0x199e>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b0b      	cmp	r3, #11
 800a042:	d102      	bne.n	800a04a <UART_SetConfig+0x199a>
 800a044:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a048:	e016      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e014      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a04e:	2380      	movs	r3, #128	; 0x80
 800a050:	e012      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a052:	2340      	movs	r3, #64	; 0x40
 800a054:	e010      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a056:	2320      	movs	r3, #32
 800a058:	e00e      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a05a:	2310      	movs	r3, #16
 800a05c:	e00c      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a05e:	230c      	movs	r3, #12
 800a060:	e00a      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a062:	230a      	movs	r3, #10
 800a064:	e008      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a066:	2308      	movs	r3, #8
 800a068:	e006      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a06a:	2306      	movs	r3, #6
 800a06c:	e004      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a06e:	2304      	movs	r3, #4
 800a070:	e002      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a072:	2302      	movs	r3, #2
 800a074:	e000      	b.n	800a078 <UART_SetConfig+0x19c8>
 800a076:	2301      	movs	r3, #1
 800a078:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07c:	005a      	lsls	r2, r3, #1
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	085b      	lsrs	r3, r3, #1
 800a084:	441a      	add	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a08e:	b29b      	uxth	r3, r3
 800a090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a092:	e198      	b.n	800a3c6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a094:	4b87      	ldr	r3, [pc, #540]	; (800a2b4 <UART_SetConfig+0x1c04>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d05e      	beq.n	800a15e <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0a0:	4b84      	ldr	r3, [pc, #528]	; (800a2b4 <UART_SetConfig+0x1c04>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	08db      	lsrs	r3, r3, #3
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	4a83      	ldr	r2, [pc, #524]	; (800a2b8 <UART_SetConfig+0x1c08>)
 800a0ac:	40da      	lsrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d044      	beq.n	800a140 <UART_SetConfig+0x1a90>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d03e      	beq.n	800a13c <UART_SetConfig+0x1a8c>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d038      	beq.n	800a138 <UART_SetConfig+0x1a88>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d032      	beq.n	800a134 <UART_SetConfig+0x1a84>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d02c      	beq.n	800a130 <UART_SetConfig+0x1a80>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0da:	2b05      	cmp	r3, #5
 800a0dc:	d026      	beq.n	800a12c <UART_SetConfig+0x1a7c>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	2b06      	cmp	r3, #6
 800a0e4:	d020      	beq.n	800a128 <UART_SetConfig+0x1a78>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	2b07      	cmp	r3, #7
 800a0ec:	d01a      	beq.n	800a124 <UART_SetConfig+0x1a74>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	2b08      	cmp	r3, #8
 800a0f4:	d014      	beq.n	800a120 <UART_SetConfig+0x1a70>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	2b09      	cmp	r3, #9
 800a0fc:	d00e      	beq.n	800a11c <UART_SetConfig+0x1a6c>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	2b0a      	cmp	r3, #10
 800a104:	d008      	beq.n	800a118 <UART_SetConfig+0x1a68>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	2b0b      	cmp	r3, #11
 800a10c:	d102      	bne.n	800a114 <UART_SetConfig+0x1a64>
 800a10e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a112:	e016      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a114:	2301      	movs	r3, #1
 800a116:	e014      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	e012      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a11c:	2340      	movs	r3, #64	; 0x40
 800a11e:	e010      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a120:	2320      	movs	r3, #32
 800a122:	e00e      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a124:	2310      	movs	r3, #16
 800a126:	e00c      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a128:	230c      	movs	r3, #12
 800a12a:	e00a      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a12c:	230a      	movs	r3, #10
 800a12e:	e008      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a130:	2308      	movs	r3, #8
 800a132:	e006      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a134:	2306      	movs	r3, #6
 800a136:	e004      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a138:	2304      	movs	r3, #4
 800a13a:	e002      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a13c:	2302      	movs	r3, #2
 800a13e:	e000      	b.n	800a142 <UART_SetConfig+0x1a92>
 800a140:	2301      	movs	r3, #1
 800a142:	fbb2 f3f3 	udiv	r3, r2, r3
 800a146:	005a      	lsls	r2, r3, #1
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	085b      	lsrs	r3, r3, #1
 800a14e:	441a      	add	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	fbb2 f3f3 	udiv	r3, r2, r3
 800a158:	b29b      	uxth	r3, r3
 800a15a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a15c:	e133      	b.n	800a3c6 <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	d043      	beq.n	800a1ee <UART_SetConfig+0x1b3e>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d03d      	beq.n	800a1ea <UART_SetConfig+0x1b3a>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a172:	2b02      	cmp	r3, #2
 800a174:	d037      	beq.n	800a1e6 <UART_SetConfig+0x1b36>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d031      	beq.n	800a1e2 <UART_SetConfig+0x1b32>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	2b04      	cmp	r3, #4
 800a184:	d02b      	beq.n	800a1de <UART_SetConfig+0x1b2e>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	2b05      	cmp	r3, #5
 800a18c:	d025      	beq.n	800a1da <UART_SetConfig+0x1b2a>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	2b06      	cmp	r3, #6
 800a194:	d01f      	beq.n	800a1d6 <UART_SetConfig+0x1b26>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	2b07      	cmp	r3, #7
 800a19c:	d019      	beq.n	800a1d2 <UART_SetConfig+0x1b22>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	2b08      	cmp	r3, #8
 800a1a4:	d013      	beq.n	800a1ce <UART_SetConfig+0x1b1e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1aa:	2b09      	cmp	r3, #9
 800a1ac:	d00d      	beq.n	800a1ca <UART_SetConfig+0x1b1a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	2b0a      	cmp	r3, #10
 800a1b4:	d007      	beq.n	800a1c6 <UART_SetConfig+0x1b16>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ba:	2b0b      	cmp	r3, #11
 800a1bc:	d101      	bne.n	800a1c2 <UART_SetConfig+0x1b12>
 800a1be:	4b3f      	ldr	r3, [pc, #252]	; (800a2bc <UART_SetConfig+0x1c0c>)
 800a1c0:	e016      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1c2:	4b3f      	ldr	r3, [pc, #252]	; (800a2c0 <UART_SetConfig+0x1c10>)
 800a1c4:	e014      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1c6:	4b3f      	ldr	r3, [pc, #252]	; (800a2c4 <UART_SetConfig+0x1c14>)
 800a1c8:	e012      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1ca:	4b3f      	ldr	r3, [pc, #252]	; (800a2c8 <UART_SetConfig+0x1c18>)
 800a1cc:	e010      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1ce:	4b3f      	ldr	r3, [pc, #252]	; (800a2cc <UART_SetConfig+0x1c1c>)
 800a1d0:	e00e      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1d2:	4b3f      	ldr	r3, [pc, #252]	; (800a2d0 <UART_SetConfig+0x1c20>)
 800a1d4:	e00c      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1d6:	4b3f      	ldr	r3, [pc, #252]	; (800a2d4 <UART_SetConfig+0x1c24>)
 800a1d8:	e00a      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1da:	4b3f      	ldr	r3, [pc, #252]	; (800a2d8 <UART_SetConfig+0x1c28>)
 800a1dc:	e008      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1de:	4b3f      	ldr	r3, [pc, #252]	; (800a2dc <UART_SetConfig+0x1c2c>)
 800a1e0:	e006      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1e2:	4b3f      	ldr	r3, [pc, #252]	; (800a2e0 <UART_SetConfig+0x1c30>)
 800a1e4:	e004      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1e6:	4b3f      	ldr	r3, [pc, #252]	; (800a2e4 <UART_SetConfig+0x1c34>)
 800a1e8:	e002      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1ea:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <UART_SetConfig+0x1c08>)
 800a1ec:	e000      	b.n	800a1f0 <UART_SetConfig+0x1b40>
 800a1ee:	4b34      	ldr	r3, [pc, #208]	; (800a2c0 <UART_SetConfig+0x1c10>)
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	6852      	ldr	r2, [r2, #4]
 800a1f4:	0852      	lsrs	r2, r2, #1
 800a1f6:	441a      	add	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a200:	b29b      	uxth	r3, r3
 800a202:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a204:	e0df      	b.n	800a3c6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d045      	beq.n	800a29a <UART_SetConfig+0x1bea>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	2b01      	cmp	r3, #1
 800a214:	d03f      	beq.n	800a296 <UART_SetConfig+0x1be6>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d039      	beq.n	800a292 <UART_SetConfig+0x1be2>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2b03      	cmp	r3, #3
 800a224:	d033      	beq.n	800a28e <UART_SetConfig+0x1bde>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	d02d      	beq.n	800a28a <UART_SetConfig+0x1bda>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	2b05      	cmp	r3, #5
 800a234:	d027      	beq.n	800a286 <UART_SetConfig+0x1bd6>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b06      	cmp	r3, #6
 800a23c:	d021      	beq.n	800a282 <UART_SetConfig+0x1bd2>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a242:	2b07      	cmp	r3, #7
 800a244:	d01b      	beq.n	800a27e <UART_SetConfig+0x1bce>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b08      	cmp	r3, #8
 800a24c:	d015      	beq.n	800a27a <UART_SetConfig+0x1bca>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a252:	2b09      	cmp	r3, #9
 800a254:	d00f      	beq.n	800a276 <UART_SetConfig+0x1bc6>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25a:	2b0a      	cmp	r3, #10
 800a25c:	d008      	beq.n	800a270 <UART_SetConfig+0x1bc0>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	2b0b      	cmp	r3, #11
 800a264:	d102      	bne.n	800a26c <UART_SetConfig+0x1bbc>
 800a266:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a26a:	e017      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a26c:	4b18      	ldr	r3, [pc, #96]	; (800a2d0 <UART_SetConfig+0x1c20>)
 800a26e:	e015      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a270:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a274:	e012      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a276:	4b1c      	ldr	r3, [pc, #112]	; (800a2e8 <UART_SetConfig+0x1c38>)
 800a278:	e010      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a27a:	4b1c      	ldr	r3, [pc, #112]	; (800a2ec <UART_SetConfig+0x1c3c>)
 800a27c:	e00e      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a27e:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <UART_SetConfig+0x1c0c>)
 800a280:	e00c      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a282:	4b1b      	ldr	r3, [pc, #108]	; (800a2f0 <UART_SetConfig+0x1c40>)
 800a284:	e00a      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a286:	4b1b      	ldr	r3, [pc, #108]	; (800a2f4 <UART_SetConfig+0x1c44>)
 800a288:	e008      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a28a:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <UART_SetConfig+0x1c14>)
 800a28c:	e006      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a28e:	4b1a      	ldr	r3, [pc, #104]	; (800a2f8 <UART_SetConfig+0x1c48>)
 800a290:	e004      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a292:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <UART_SetConfig+0x1c18>)
 800a294:	e002      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a296:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <UART_SetConfig+0x1c1c>)
 800a298:	e000      	b.n	800a29c <UART_SetConfig+0x1bec>
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <UART_SetConfig+0x1c20>)
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	6852      	ldr	r2, [r2, #4]
 800a2a0:	0852      	lsrs	r2, r2, #1
 800a2a2:	441a      	add	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2b0:	e089      	b.n	800a3c6 <UART_SetConfig+0x1d16>
 800a2b2:	bf00      	nop
 800a2b4:	58024400 	.word	0x58024400
 800a2b8:	03d09000 	.word	0x03d09000
 800a2bc:	0007a120 	.word	0x0007a120
 800a2c0:	07a12000 	.word	0x07a12000
 800a2c4:	000f4240 	.word	0x000f4240
 800a2c8:	001e8480 	.word	0x001e8480
 800a2cc:	003d0900 	.word	0x003d0900
 800a2d0:	007a1200 	.word	0x007a1200
 800a2d4:	00a2c2aa 	.word	0x00a2c2aa
 800a2d8:	00c35000 	.word	0x00c35000
 800a2dc:	00f42400 	.word	0x00f42400
 800a2e0:	01458554 	.word	0x01458554
 800a2e4:	01e84800 	.word	0x01e84800
 800a2e8:	0001e848 	.word	0x0001e848
 800a2ec:	0003d090 	.word	0x0003d090
 800a2f0:	000a2c2a 	.word	0x000a2c2a
 800a2f4:	000c3500 	.word	0x000c3500
 800a2f8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	d04f      	beq.n	800a3a4 <UART_SetConfig+0x1cf4>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d048      	beq.n	800a39e <UART_SetConfig+0x1cee>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	2b02      	cmp	r3, #2
 800a312:	d041      	beq.n	800a398 <UART_SetConfig+0x1ce8>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d03a      	beq.n	800a392 <UART_SetConfig+0x1ce2>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b04      	cmp	r3, #4
 800a322:	d033      	beq.n	800a38c <UART_SetConfig+0x1cdc>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	2b05      	cmp	r3, #5
 800a32a:	d02c      	beq.n	800a386 <UART_SetConfig+0x1cd6>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b06      	cmp	r3, #6
 800a332:	d025      	beq.n	800a380 <UART_SetConfig+0x1cd0>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b07      	cmp	r3, #7
 800a33a:	d01e      	beq.n	800a37a <UART_SetConfig+0x1cca>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b08      	cmp	r3, #8
 800a342:	d017      	beq.n	800a374 <UART_SetConfig+0x1cc4>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b09      	cmp	r3, #9
 800a34a:	d010      	beq.n	800a36e <UART_SetConfig+0x1cbe>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	2b0a      	cmp	r3, #10
 800a352:	d009      	beq.n	800a368 <UART_SetConfig+0x1cb8>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	2b0b      	cmp	r3, #11
 800a35a:	d102      	bne.n	800a362 <UART_SetConfig+0x1cb2>
 800a35c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a360:	e022      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a366:	e01f      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a36c:	e01c      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a36e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a372:	e019      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a378:	e016      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a37a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a37e:	e013      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a380:	f241 5354 	movw	r3, #5460	; 0x1554
 800a384:	e010      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a386:	f641 1398 	movw	r3, #6552	; 0x1998
 800a38a:	e00d      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a38c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a390:	e00a      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a392:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a396:	e007      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a39c:	e004      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a39e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3a2:	e001      	b.n	800a3a8 <UART_SetConfig+0x1cf8>
 800a3a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6852      	ldr	r2, [r2, #4]
 800a3ac:	0852      	lsrs	r2, r2, #1
 800a3ae:	441a      	add	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3bc:	e003      	b.n	800a3c6 <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a3c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c8:	2b0f      	cmp	r3, #15
 800a3ca:	d916      	bls.n	800a3fa <UART_SetConfig+0x1d4a>
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3d2:	d212      	bcs.n	800a3fa <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	f023 030f 	bic.w	r3, r3, #15
 800a3dc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	f003 0307 	and.w	r3, r3, #7
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a3f6:	60da      	str	r2, [r3, #12]
 800a3f8:	e3a3      	b.n	800ab42 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a400:	e39f      	b.n	800ab42 <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 800a402:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a406:	2b40      	cmp	r3, #64	; 0x40
 800a408:	f200 8388 	bhi.w	800ab1c <UART_SetConfig+0x246c>
 800a40c:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <UART_SetConfig+0x1d64>)
 800a40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a412:	bf00      	nop
 800a414:	0800a519 	.word	0x0800a519
 800a418:	0800a5cf 	.word	0x0800a5cf
 800a41c:	0800ab1d 	.word	0x0800ab1d
 800a420:	0800ab1d 	.word	0x0800ab1d
 800a424:	0800a685 	.word	0x0800a685
 800a428:	0800ab1d 	.word	0x0800ab1d
 800a42c:	0800ab1d 	.word	0x0800ab1d
 800a430:	0800ab1d 	.word	0x0800ab1d
 800a434:	0800a73f 	.word	0x0800a73f
 800a438:	0800ab1d 	.word	0x0800ab1d
 800a43c:	0800ab1d 	.word	0x0800ab1d
 800a440:	0800ab1d 	.word	0x0800ab1d
 800a444:	0800ab1d 	.word	0x0800ab1d
 800a448:	0800ab1d 	.word	0x0800ab1d
 800a44c:	0800ab1d 	.word	0x0800ab1d
 800a450:	0800ab1d 	.word	0x0800ab1d
 800a454:	0800a7f9 	.word	0x0800a7f9
 800a458:	0800ab1d 	.word	0x0800ab1d
 800a45c:	0800ab1d 	.word	0x0800ab1d
 800a460:	0800ab1d 	.word	0x0800ab1d
 800a464:	0800ab1d 	.word	0x0800ab1d
 800a468:	0800ab1d 	.word	0x0800ab1d
 800a46c:	0800ab1d 	.word	0x0800ab1d
 800a470:	0800ab1d 	.word	0x0800ab1d
 800a474:	0800ab1d 	.word	0x0800ab1d
 800a478:	0800ab1d 	.word	0x0800ab1d
 800a47c:	0800ab1d 	.word	0x0800ab1d
 800a480:	0800ab1d 	.word	0x0800ab1d
 800a484:	0800ab1d 	.word	0x0800ab1d
 800a488:	0800ab1d 	.word	0x0800ab1d
 800a48c:	0800ab1d 	.word	0x0800ab1d
 800a490:	0800ab1d 	.word	0x0800ab1d
 800a494:	0800a969 	.word	0x0800a969
 800a498:	0800ab1d 	.word	0x0800ab1d
 800a49c:	0800ab1d 	.word	0x0800ab1d
 800a4a0:	0800ab1d 	.word	0x0800ab1d
 800a4a4:	0800ab1d 	.word	0x0800ab1d
 800a4a8:	0800ab1d 	.word	0x0800ab1d
 800a4ac:	0800ab1d 	.word	0x0800ab1d
 800a4b0:	0800ab1d 	.word	0x0800ab1d
 800a4b4:	0800ab1d 	.word	0x0800ab1d
 800a4b8:	0800ab1d 	.word	0x0800ab1d
 800a4bc:	0800ab1d 	.word	0x0800ab1d
 800a4c0:	0800ab1d 	.word	0x0800ab1d
 800a4c4:	0800ab1d 	.word	0x0800ab1d
 800a4c8:	0800ab1d 	.word	0x0800ab1d
 800a4cc:	0800ab1d 	.word	0x0800ab1d
 800a4d0:	0800ab1d 	.word	0x0800ab1d
 800a4d4:	0800ab1d 	.word	0x0800ab1d
 800a4d8:	0800ab1d 	.word	0x0800ab1d
 800a4dc:	0800ab1d 	.word	0x0800ab1d
 800a4e0:	0800ab1d 	.word	0x0800ab1d
 800a4e4:	0800ab1d 	.word	0x0800ab1d
 800a4e8:	0800ab1d 	.word	0x0800ab1d
 800a4ec:	0800ab1d 	.word	0x0800ab1d
 800a4f0:	0800ab1d 	.word	0x0800ab1d
 800a4f4:	0800ab1d 	.word	0x0800ab1d
 800a4f8:	0800ab1d 	.word	0x0800ab1d
 800a4fc:	0800ab1d 	.word	0x0800ab1d
 800a500:	0800ab1d 	.word	0x0800ab1d
 800a504:	0800ab1d 	.word	0x0800ab1d
 800a508:	0800ab1d 	.word	0x0800ab1d
 800a50c:	0800ab1d 	.word	0x0800ab1d
 800a510:	0800ab1d 	.word	0x0800ab1d
 800a514:	0800aa5d 	.word	0x0800aa5d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a518:	f7fb fe64 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 800a51c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	2b00      	cmp	r3, #0
 800a524:	d044      	beq.n	800a5b0 <UART_SetConfig+0x1f00>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d03e      	beq.n	800a5ac <UART_SetConfig+0x1efc>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	2b02      	cmp	r3, #2
 800a534:	d038      	beq.n	800a5a8 <UART_SetConfig+0x1ef8>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d032      	beq.n	800a5a4 <UART_SetConfig+0x1ef4>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a542:	2b04      	cmp	r3, #4
 800a544:	d02c      	beq.n	800a5a0 <UART_SetConfig+0x1ef0>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b05      	cmp	r3, #5
 800a54c:	d026      	beq.n	800a59c <UART_SetConfig+0x1eec>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	2b06      	cmp	r3, #6
 800a554:	d020      	beq.n	800a598 <UART_SetConfig+0x1ee8>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	2b07      	cmp	r3, #7
 800a55c:	d01a      	beq.n	800a594 <UART_SetConfig+0x1ee4>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	2b08      	cmp	r3, #8
 800a564:	d014      	beq.n	800a590 <UART_SetConfig+0x1ee0>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	2b09      	cmp	r3, #9
 800a56c:	d00e      	beq.n	800a58c <UART_SetConfig+0x1edc>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	2b0a      	cmp	r3, #10
 800a574:	d008      	beq.n	800a588 <UART_SetConfig+0x1ed8>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2b0b      	cmp	r3, #11
 800a57c:	d102      	bne.n	800a584 <UART_SetConfig+0x1ed4>
 800a57e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a582:	e016      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a584:	2301      	movs	r3, #1
 800a586:	e014      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a588:	2380      	movs	r3, #128	; 0x80
 800a58a:	e012      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a58c:	2340      	movs	r3, #64	; 0x40
 800a58e:	e010      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a590:	2320      	movs	r3, #32
 800a592:	e00e      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a594:	2310      	movs	r3, #16
 800a596:	e00c      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a598:	230c      	movs	r3, #12
 800a59a:	e00a      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a59c:	230a      	movs	r3, #10
 800a59e:	e008      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a5a0:	2308      	movs	r3, #8
 800a5a2:	e006      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a5a4:	2306      	movs	r3, #6
 800a5a6:	e004      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a5a8:	2304      	movs	r3, #4
 800a5aa:	e002      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	e000      	b.n	800a5b2 <UART_SetConfig+0x1f02>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	085b      	lsrs	r3, r3, #1
 800a5be:	441a      	add	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a5cc:	e2aa      	b.n	800ab24 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5ce:	f7fb fe1f 	bl	8006210 <HAL_RCC_GetPCLK2Freq>
 800a5d2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d044      	beq.n	800a666 <UART_SetConfig+0x1fb6>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d03e      	beq.n	800a662 <UART_SetConfig+0x1fb2>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d038      	beq.n	800a65e <UART_SetConfig+0x1fae>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d032      	beq.n	800a65a <UART_SetConfig+0x1faa>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	2b04      	cmp	r3, #4
 800a5fa:	d02c      	beq.n	800a656 <UART_SetConfig+0x1fa6>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a600:	2b05      	cmp	r3, #5
 800a602:	d026      	beq.n	800a652 <UART_SetConfig+0x1fa2>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	2b06      	cmp	r3, #6
 800a60a:	d020      	beq.n	800a64e <UART_SetConfig+0x1f9e>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	2b07      	cmp	r3, #7
 800a612:	d01a      	beq.n	800a64a <UART_SetConfig+0x1f9a>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	2b08      	cmp	r3, #8
 800a61a:	d014      	beq.n	800a646 <UART_SetConfig+0x1f96>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	2b09      	cmp	r3, #9
 800a622:	d00e      	beq.n	800a642 <UART_SetConfig+0x1f92>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	2b0a      	cmp	r3, #10
 800a62a:	d008      	beq.n	800a63e <UART_SetConfig+0x1f8e>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b0b      	cmp	r3, #11
 800a632:	d102      	bne.n	800a63a <UART_SetConfig+0x1f8a>
 800a634:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a638:	e016      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e014      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a63e:	2380      	movs	r3, #128	; 0x80
 800a640:	e012      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a642:	2340      	movs	r3, #64	; 0x40
 800a644:	e010      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a646:	2320      	movs	r3, #32
 800a648:	e00e      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a64a:	2310      	movs	r3, #16
 800a64c:	e00c      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a64e:	230c      	movs	r3, #12
 800a650:	e00a      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a652:	230a      	movs	r3, #10
 800a654:	e008      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a656:	2308      	movs	r3, #8
 800a658:	e006      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a65a:	2306      	movs	r3, #6
 800a65c:	e004      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a65e:	2304      	movs	r3, #4
 800a660:	e002      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a662:	2302      	movs	r3, #2
 800a664:	e000      	b.n	800a668 <UART_SetConfig+0x1fb8>
 800a666:	2301      	movs	r3, #1
 800a668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a66a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	085b      	lsrs	r3, r3, #1
 800a674:	441a      	add	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67e:	b29b      	uxth	r3, r3
 800a680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a682:	e24f      	b.n	800ab24 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a684:	f107 0318 	add.w	r3, r7, #24
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fc ff8f 	bl	80075ac <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	2b00      	cmp	r3, #0
 800a696:	d044      	beq.n	800a722 <UART_SetConfig+0x2072>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d03e      	beq.n	800a71e <UART_SetConfig+0x206e>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d038      	beq.n	800a71a <UART_SetConfig+0x206a>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	d032      	beq.n	800a716 <UART_SetConfig+0x2066>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d02c      	beq.n	800a712 <UART_SetConfig+0x2062>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	2b05      	cmp	r3, #5
 800a6be:	d026      	beq.n	800a70e <UART_SetConfig+0x205e>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b06      	cmp	r3, #6
 800a6c6:	d020      	beq.n	800a70a <UART_SetConfig+0x205a>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	2b07      	cmp	r3, #7
 800a6ce:	d01a      	beq.n	800a706 <UART_SetConfig+0x2056>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	2b08      	cmp	r3, #8
 800a6d6:	d014      	beq.n	800a702 <UART_SetConfig+0x2052>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	2b09      	cmp	r3, #9
 800a6de:	d00e      	beq.n	800a6fe <UART_SetConfig+0x204e>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e4:	2b0a      	cmp	r3, #10
 800a6e6:	d008      	beq.n	800a6fa <UART_SetConfig+0x204a>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	2b0b      	cmp	r3, #11
 800a6ee:	d102      	bne.n	800a6f6 <UART_SetConfig+0x2046>
 800a6f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6f4:	e016      	b.n	800a724 <UART_SetConfig+0x2074>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e014      	b.n	800a724 <UART_SetConfig+0x2074>
 800a6fa:	2380      	movs	r3, #128	; 0x80
 800a6fc:	e012      	b.n	800a724 <UART_SetConfig+0x2074>
 800a6fe:	2340      	movs	r3, #64	; 0x40
 800a700:	e010      	b.n	800a724 <UART_SetConfig+0x2074>
 800a702:	2320      	movs	r3, #32
 800a704:	e00e      	b.n	800a724 <UART_SetConfig+0x2074>
 800a706:	2310      	movs	r3, #16
 800a708:	e00c      	b.n	800a724 <UART_SetConfig+0x2074>
 800a70a:	230c      	movs	r3, #12
 800a70c:	e00a      	b.n	800a724 <UART_SetConfig+0x2074>
 800a70e:	230a      	movs	r3, #10
 800a710:	e008      	b.n	800a724 <UART_SetConfig+0x2074>
 800a712:	2308      	movs	r3, #8
 800a714:	e006      	b.n	800a724 <UART_SetConfig+0x2074>
 800a716:	2306      	movs	r3, #6
 800a718:	e004      	b.n	800a724 <UART_SetConfig+0x2074>
 800a71a:	2304      	movs	r3, #4
 800a71c:	e002      	b.n	800a724 <UART_SetConfig+0x2074>
 800a71e:	2302      	movs	r3, #2
 800a720:	e000      	b.n	800a724 <UART_SetConfig+0x2074>
 800a722:	2301      	movs	r3, #1
 800a724:	fbb2 f2f3 	udiv	r2, r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	085b      	lsrs	r3, r3, #1
 800a72e:	441a      	add	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	fbb2 f3f3 	udiv	r3, r2, r3
 800a738:	b29b      	uxth	r3, r3
 800a73a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a73c:	e1f2      	b.n	800ab24 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a73e:	f107 030c 	add.w	r3, r7, #12
 800a742:	4618      	mov	r0, r3
 800a744:	f7fd f87e 	bl	8007844 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d044      	beq.n	800a7dc <UART_SetConfig+0x212c>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b01      	cmp	r3, #1
 800a758:	d03e      	beq.n	800a7d8 <UART_SetConfig+0x2128>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d038      	beq.n	800a7d4 <UART_SetConfig+0x2124>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b03      	cmp	r3, #3
 800a768:	d032      	beq.n	800a7d0 <UART_SetConfig+0x2120>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d02c      	beq.n	800a7cc <UART_SetConfig+0x211c>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b05      	cmp	r3, #5
 800a778:	d026      	beq.n	800a7c8 <UART_SetConfig+0x2118>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b06      	cmp	r3, #6
 800a780:	d020      	beq.n	800a7c4 <UART_SetConfig+0x2114>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b07      	cmp	r3, #7
 800a788:	d01a      	beq.n	800a7c0 <UART_SetConfig+0x2110>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b08      	cmp	r3, #8
 800a790:	d014      	beq.n	800a7bc <UART_SetConfig+0x210c>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b09      	cmp	r3, #9
 800a798:	d00e      	beq.n	800a7b8 <UART_SetConfig+0x2108>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b0a      	cmp	r3, #10
 800a7a0:	d008      	beq.n	800a7b4 <UART_SetConfig+0x2104>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b0b      	cmp	r3, #11
 800a7a8:	d102      	bne.n	800a7b0 <UART_SetConfig+0x2100>
 800a7aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7ae:	e016      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e014      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7b4:	2380      	movs	r3, #128	; 0x80
 800a7b6:	e012      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7b8:	2340      	movs	r3, #64	; 0x40
 800a7ba:	e010      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7bc:	2320      	movs	r3, #32
 800a7be:	e00e      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7c0:	2310      	movs	r3, #16
 800a7c2:	e00c      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	e00a      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7c8:	230a      	movs	r3, #10
 800a7ca:	e008      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	e006      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7d0:	2306      	movs	r3, #6
 800a7d2:	e004      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	e002      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e000      	b.n	800a7de <UART_SetConfig+0x212e>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	085b      	lsrs	r3, r3, #1
 800a7e8:	441a      	add	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7f6:	e195      	b.n	800ab24 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f8:	4b87      	ldr	r3, [pc, #540]	; (800aa18 <UART_SetConfig+0x2368>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0320 	and.w	r3, r3, #32
 800a800:	2b00      	cmp	r3, #0
 800a802:	d05d      	beq.n	800a8c0 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a804:	4b84      	ldr	r3, [pc, #528]	; (800aa18 <UART_SetConfig+0x2368>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	08db      	lsrs	r3, r3, #3
 800a80a:	f003 0303 	and.w	r3, r3, #3
 800a80e:	4a83      	ldr	r2, [pc, #524]	; (800aa1c <UART_SetConfig+0x236c>)
 800a810:	40da      	lsrs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	2b00      	cmp	r3, #0
 800a818:	d044      	beq.n	800a8a4 <UART_SetConfig+0x21f4>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d03e      	beq.n	800a8a0 <UART_SetConfig+0x21f0>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	2b02      	cmp	r3, #2
 800a828:	d038      	beq.n	800a89c <UART_SetConfig+0x21ec>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d032      	beq.n	800a898 <UART_SetConfig+0x21e8>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a836:	2b04      	cmp	r3, #4
 800a838:	d02c      	beq.n	800a894 <UART_SetConfig+0x21e4>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2b05      	cmp	r3, #5
 800a840:	d026      	beq.n	800a890 <UART_SetConfig+0x21e0>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	2b06      	cmp	r3, #6
 800a848:	d020      	beq.n	800a88c <UART_SetConfig+0x21dc>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84e:	2b07      	cmp	r3, #7
 800a850:	d01a      	beq.n	800a888 <UART_SetConfig+0x21d8>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	2b08      	cmp	r3, #8
 800a858:	d014      	beq.n	800a884 <UART_SetConfig+0x21d4>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	2b09      	cmp	r3, #9
 800a860:	d00e      	beq.n	800a880 <UART_SetConfig+0x21d0>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	2b0a      	cmp	r3, #10
 800a868:	d008      	beq.n	800a87c <UART_SetConfig+0x21cc>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86e:	2b0b      	cmp	r3, #11
 800a870:	d102      	bne.n	800a878 <UART_SetConfig+0x21c8>
 800a872:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a876:	e016      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a878:	2301      	movs	r3, #1
 800a87a:	e014      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a87c:	2380      	movs	r3, #128	; 0x80
 800a87e:	e012      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a880:	2340      	movs	r3, #64	; 0x40
 800a882:	e010      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a884:	2320      	movs	r3, #32
 800a886:	e00e      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a888:	2310      	movs	r3, #16
 800a88a:	e00c      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a88c:	230c      	movs	r3, #12
 800a88e:	e00a      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a890:	230a      	movs	r3, #10
 800a892:	e008      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a894:	2308      	movs	r3, #8
 800a896:	e006      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a898:	2306      	movs	r3, #6
 800a89a:	e004      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a89c:	2304      	movs	r3, #4
 800a89e:	e002      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	e000      	b.n	800a8a6 <UART_SetConfig+0x21f6>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	085b      	lsrs	r3, r3, #1
 800a8b0:	441a      	add	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a8be:	e131      	b.n	800ab24 <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d043      	beq.n	800a950 <UART_SetConfig+0x22a0>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d03d      	beq.n	800a94c <UART_SetConfig+0x229c>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d037      	beq.n	800a948 <UART_SetConfig+0x2298>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d031      	beq.n	800a944 <UART_SetConfig+0x2294>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d02b      	beq.n	800a940 <UART_SetConfig+0x2290>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b05      	cmp	r3, #5
 800a8ee:	d025      	beq.n	800a93c <UART_SetConfig+0x228c>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b06      	cmp	r3, #6
 800a8f6:	d01f      	beq.n	800a938 <UART_SetConfig+0x2288>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b07      	cmp	r3, #7
 800a8fe:	d019      	beq.n	800a934 <UART_SetConfig+0x2284>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	2b08      	cmp	r3, #8
 800a906:	d013      	beq.n	800a930 <UART_SetConfig+0x2280>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d00d      	beq.n	800a92c <UART_SetConfig+0x227c>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	2b0a      	cmp	r3, #10
 800a916:	d007      	beq.n	800a928 <UART_SetConfig+0x2278>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91c:	2b0b      	cmp	r3, #11
 800a91e:	d101      	bne.n	800a924 <UART_SetConfig+0x2274>
 800a920:	4b3f      	ldr	r3, [pc, #252]	; (800aa20 <UART_SetConfig+0x2370>)
 800a922:	e016      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a924:	4b3d      	ldr	r3, [pc, #244]	; (800aa1c <UART_SetConfig+0x236c>)
 800a926:	e014      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a928:	4b3e      	ldr	r3, [pc, #248]	; (800aa24 <UART_SetConfig+0x2374>)
 800a92a:	e012      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a92c:	4b3e      	ldr	r3, [pc, #248]	; (800aa28 <UART_SetConfig+0x2378>)
 800a92e:	e010      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a930:	4b3e      	ldr	r3, [pc, #248]	; (800aa2c <UART_SetConfig+0x237c>)
 800a932:	e00e      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a934:	4b3e      	ldr	r3, [pc, #248]	; (800aa30 <UART_SetConfig+0x2380>)
 800a936:	e00c      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a938:	4b3e      	ldr	r3, [pc, #248]	; (800aa34 <UART_SetConfig+0x2384>)
 800a93a:	e00a      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a93c:	4b3e      	ldr	r3, [pc, #248]	; (800aa38 <UART_SetConfig+0x2388>)
 800a93e:	e008      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a940:	4b3e      	ldr	r3, [pc, #248]	; (800aa3c <UART_SetConfig+0x238c>)
 800a942:	e006      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a944:	4b3e      	ldr	r3, [pc, #248]	; (800aa40 <UART_SetConfig+0x2390>)
 800a946:	e004      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a948:	4b3e      	ldr	r3, [pc, #248]	; (800aa44 <UART_SetConfig+0x2394>)
 800a94a:	e002      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a94c:	4b3e      	ldr	r3, [pc, #248]	; (800aa48 <UART_SetConfig+0x2398>)
 800a94e:	e000      	b.n	800a952 <UART_SetConfig+0x22a2>
 800a950:	4b32      	ldr	r3, [pc, #200]	; (800aa1c <UART_SetConfig+0x236c>)
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6852      	ldr	r2, [r2, #4]
 800a956:	0852      	lsrs	r2, r2, #1
 800a958:	441a      	add	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a962:	b29b      	uxth	r3, r3
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a966:	e0dd      	b.n	800ab24 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d046      	beq.n	800a9fe <UART_SetConfig+0x234e>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	2b01      	cmp	r3, #1
 800a976:	d040      	beq.n	800a9fa <UART_SetConfig+0x234a>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d03a      	beq.n	800a9f6 <UART_SetConfig+0x2346>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a984:	2b03      	cmp	r3, #3
 800a986:	d034      	beq.n	800a9f2 <UART_SetConfig+0x2342>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d02e      	beq.n	800a9ee <UART_SetConfig+0x233e>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a994:	2b05      	cmp	r3, #5
 800a996:	d028      	beq.n	800a9ea <UART_SetConfig+0x233a>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	2b06      	cmp	r3, #6
 800a99e:	d022      	beq.n	800a9e6 <UART_SetConfig+0x2336>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2b07      	cmp	r3, #7
 800a9a6:	d01c      	beq.n	800a9e2 <UART_SetConfig+0x2332>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	2b08      	cmp	r3, #8
 800a9ae:	d016      	beq.n	800a9de <UART_SetConfig+0x232e>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	2b09      	cmp	r3, #9
 800a9b6:	d00f      	beq.n	800a9d8 <UART_SetConfig+0x2328>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9bc:	2b0a      	cmp	r3, #10
 800a9be:	d008      	beq.n	800a9d2 <UART_SetConfig+0x2322>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c4:	2b0b      	cmp	r3, #11
 800a9c6:	d102      	bne.n	800a9ce <UART_SetConfig+0x231e>
 800a9c8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a9cc:	e018      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9ce:	4b18      	ldr	r3, [pc, #96]	; (800aa30 <UART_SetConfig+0x2380>)
 800a9d0:	e016      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9d2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a9d6:	e013      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a9dc:	e010      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9de:	4b1b      	ldr	r3, [pc, #108]	; (800aa4c <UART_SetConfig+0x239c>)
 800a9e0:	e00e      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9e2:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <UART_SetConfig+0x2370>)
 800a9e4:	e00c      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9e6:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <UART_SetConfig+0x23a0>)
 800a9e8:	e00a      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9ea:	4b1a      	ldr	r3, [pc, #104]	; (800aa54 <UART_SetConfig+0x23a4>)
 800a9ec:	e008      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <UART_SetConfig+0x2374>)
 800a9f0:	e006      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9f2:	4b19      	ldr	r3, [pc, #100]	; (800aa58 <UART_SetConfig+0x23a8>)
 800a9f4:	e004      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	; (800aa28 <UART_SetConfig+0x2378>)
 800a9f8:	e002      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9fa:	4b0c      	ldr	r3, [pc, #48]	; (800aa2c <UART_SetConfig+0x237c>)
 800a9fc:	e000      	b.n	800aa00 <UART_SetConfig+0x2350>
 800a9fe:	4b0c      	ldr	r3, [pc, #48]	; (800aa30 <UART_SetConfig+0x2380>)
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6852      	ldr	r2, [r2, #4]
 800aa04:	0852      	lsrs	r2, r2, #1
 800aa06:	441a      	add	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa14:	e086      	b.n	800ab24 <UART_SetConfig+0x2474>
 800aa16:	bf00      	nop
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	03d09000 	.word	0x03d09000
 800aa20:	0003d090 	.word	0x0003d090
 800aa24:	0007a120 	.word	0x0007a120
 800aa28:	000f4240 	.word	0x000f4240
 800aa2c:	001e8480 	.word	0x001e8480
 800aa30:	003d0900 	.word	0x003d0900
 800aa34:	00516155 	.word	0x00516155
 800aa38:	0061a800 	.word	0x0061a800
 800aa3c:	007a1200 	.word	0x007a1200
 800aa40:	00a2c2aa 	.word	0x00a2c2aa
 800aa44:	00f42400 	.word	0x00f42400
 800aa48:	01e84800 	.word	0x01e84800
 800aa4c:	0001e848 	.word	0x0001e848
 800aa50:	00051615 	.word	0x00051615
 800aa54:	00061a80 	.word	0x00061a80
 800aa58:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d04e      	beq.n	800ab02 <UART_SetConfig+0x2452>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d047      	beq.n	800aafc <UART_SetConfig+0x244c>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d040      	beq.n	800aaf6 <UART_SetConfig+0x2446>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d039      	beq.n	800aaf0 <UART_SetConfig+0x2440>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d032      	beq.n	800aaea <UART_SetConfig+0x243a>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa88:	2b05      	cmp	r3, #5
 800aa8a:	d02b      	beq.n	800aae4 <UART_SetConfig+0x2434>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	2b06      	cmp	r3, #6
 800aa92:	d024      	beq.n	800aade <UART_SetConfig+0x242e>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	2b07      	cmp	r3, #7
 800aa9a:	d01d      	beq.n	800aad8 <UART_SetConfig+0x2428>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	2b08      	cmp	r3, #8
 800aaa2:	d016      	beq.n	800aad2 <UART_SetConfig+0x2422>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa8:	2b09      	cmp	r3, #9
 800aaaa:	d00f      	beq.n	800aacc <UART_SetConfig+0x241c>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	2b0a      	cmp	r3, #10
 800aab2:	d008      	beq.n	800aac6 <UART_SetConfig+0x2416>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	2b0b      	cmp	r3, #11
 800aaba:	d101      	bne.n	800aac0 <UART_SetConfig+0x2410>
 800aabc:	2380      	movs	r3, #128	; 0x80
 800aabe:	e022      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aac4:	e01f      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaca:	e01c      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aacc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aad0:	e019      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad6:	e016      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aad8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aadc:	e013      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aade:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800aae2:	e010      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aae4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800aae8:	e00d      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aaea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaee:	e00a      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aaf0:	f241 5355 	movw	r3, #5461	; 0x1555
 800aaf4:	e007      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aaf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aafa:	e004      	b.n	800ab06 <UART_SetConfig+0x2456>
 800aafc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab00:	e001      	b.n	800ab06 <UART_SetConfig+0x2456>
 800ab02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	6852      	ldr	r2, [r2, #4]
 800ab0a:	0852      	lsrs	r2, r2, #1
 800ab0c:	441a      	add	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab1a:	e003      	b.n	800ab24 <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ab22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab26:	2b0f      	cmp	r3, #15
 800ab28:	d908      	bls.n	800ab3c <UART_SetConfig+0x248c>
 800ab2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab30:	d204      	bcs.n	800ab3c <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab38:	60da      	str	r2, [r3, #12]
 800ab3a:	e002      	b.n	800ab42 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ab5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3740      	adds	r7, #64	; 0x40
 800ab66:	46bd      	mov	sp, r7
 800ab68:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ab6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab78:	2bff      	cmp	r3, #255	; 0xff
 800ab7a:	d904      	bls.n	800ab86 <UART_AdvFeatureConfig+0x1a>
 800ab7c:	f640 4149 	movw	r1, #3145	; 0xc49
 800ab80:	4899      	ldr	r0, [pc, #612]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800ab82:	f7f6 f92e 	bl	8000de2 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d018      	beq.n	800abc4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <UART_AdvFeatureConfig+0x42>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aba2:	d004      	beq.n	800abae <UART_AdvFeatureConfig+0x42>
 800aba4:	f640 414e 	movw	r1, #3150	; 0xc4e
 800aba8:	488f      	ldr	r0, [pc, #572]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800abaa:	f7f6 f91a 	bl	8000de2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	430a      	orrs	r2, r1
 800abc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d018      	beq.n	800ac02 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d009      	beq.n	800abec <UART_AdvFeatureConfig+0x80>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe0:	d004      	beq.n	800abec <UART_AdvFeatureConfig+0x80>
 800abe2:	f640 4155 	movw	r1, #3157	; 0xc55
 800abe6:	4880      	ldr	r0, [pc, #512]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800abe8:	f7f6 f8fb 	bl	8000de2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d018      	beq.n	800ac40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d009      	beq.n	800ac2a <UART_AdvFeatureConfig+0xbe>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac1e:	d004      	beq.n	800ac2a <UART_AdvFeatureConfig+0xbe>
 800ac20:	f640 415c 	movw	r1, #3164	; 0xc5c
 800ac24:	4870      	ldr	r0, [pc, #448]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800ac26:	f7f6 f8dc 	bl	8000de2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac44:	f003 0308 	and.w	r3, r3, #8
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d018      	beq.n	800ac7e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d009      	beq.n	800ac68 <UART_AdvFeatureConfig+0xfc>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac5c:	d004      	beq.n	800ac68 <UART_AdvFeatureConfig+0xfc>
 800ac5e:	f640 4163 	movw	r1, #3171	; 0xc63
 800ac62:	4861      	ldr	r0, [pc, #388]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800ac64:	f7f6 f8bd 	bl	8000de2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac82:	f003 0310 	and.w	r3, r3, #16
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d018      	beq.n	800acbc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <UART_AdvFeatureConfig+0x13a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac9a:	d004      	beq.n	800aca6 <UART_AdvFeatureConfig+0x13a>
 800ac9c:	f640 416a 	movw	r1, #3178	; 0xc6a
 800aca0:	4851      	ldr	r0, [pc, #324]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800aca2:	f7f6 f89e 	bl	8000de2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	430a      	orrs	r2, r1
 800acba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc0:	f003 0320 	and.w	r3, r3, #32
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d018      	beq.n	800acfa <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800accc:	2b00      	cmp	r3, #0
 800acce:	d009      	beq.n	800ace4 <UART_AdvFeatureConfig+0x178>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd8:	d004      	beq.n	800ace4 <UART_AdvFeatureConfig+0x178>
 800acda:	f640 4171 	movw	r1, #3185	; 0xc71
 800acde:	4842      	ldr	r0, [pc, #264]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800ace0:	f7f6 f87f 	bl	8000de2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	430a      	orrs	r2, r1
 800acf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 8082 	beq.w	800ae0c <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a37      	ldr	r2, [pc, #220]	; (800adec <UART_AdvFeatureConfig+0x280>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d027      	beq.n	800ad62 <UART_AdvFeatureConfig+0x1f6>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a36      	ldr	r2, [pc, #216]	; (800adf0 <UART_AdvFeatureConfig+0x284>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d022      	beq.n	800ad62 <UART_AdvFeatureConfig+0x1f6>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a34      	ldr	r2, [pc, #208]	; (800adf4 <UART_AdvFeatureConfig+0x288>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d01d      	beq.n	800ad62 <UART_AdvFeatureConfig+0x1f6>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a33      	ldr	r2, [pc, #204]	; (800adf8 <UART_AdvFeatureConfig+0x28c>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d018      	beq.n	800ad62 <UART_AdvFeatureConfig+0x1f6>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a31      	ldr	r2, [pc, #196]	; (800adfc <UART_AdvFeatureConfig+0x290>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d013      	beq.n	800ad62 <UART_AdvFeatureConfig+0x1f6>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a30      	ldr	r2, [pc, #192]	; (800ae00 <UART_AdvFeatureConfig+0x294>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d00e      	beq.n	800ad62 <UART_AdvFeatureConfig+0x1f6>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a2e      	ldr	r2, [pc, #184]	; (800ae04 <UART_AdvFeatureConfig+0x298>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d009      	beq.n	800ad62 <UART_AdvFeatureConfig+0x1f6>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a2d      	ldr	r2, [pc, #180]	; (800ae08 <UART_AdvFeatureConfig+0x29c>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d004      	beq.n	800ad62 <UART_AdvFeatureConfig+0x1f6>
 800ad58:	f640 4178 	movw	r1, #3192	; 0xc78
 800ad5c:	4822      	ldr	r0, [pc, #136]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800ad5e:	f7f6 f840 	bl	8000de2 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d009      	beq.n	800ad7e <UART_AdvFeatureConfig+0x212>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad72:	d004      	beq.n	800ad7e <UART_AdvFeatureConfig+0x212>
 800ad74:	f640 4179 	movw	r1, #3193	; 0xc79
 800ad78:	481b      	ldr	r0, [pc, #108]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800ad7a:	f7f6 f832 	bl	8000de2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad9c:	d136      	bne.n	800ae0c <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d013      	beq.n	800adce <UART_AdvFeatureConfig+0x262>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adae:	d00e      	beq.n	800adce <UART_AdvFeatureConfig+0x262>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adb8:	d009      	beq.n	800adce <UART_AdvFeatureConfig+0x262>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adc2:	d004      	beq.n	800adce <UART_AdvFeatureConfig+0x262>
 800adc4:	f640 417e 	movw	r1, #3198	; 0xc7e
 800adc8:	4807      	ldr	r0, [pc, #28]	; (800ade8 <UART_AdvFeatureConfig+0x27c>)
 800adca:	f7f6 f80a 	bl	8000de2 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	430a      	orrs	r2, r1
 800ade2:	605a      	str	r2, [r3, #4]
 800ade4:	e012      	b.n	800ae0c <UART_AdvFeatureConfig+0x2a0>
 800ade6:	bf00      	nop
 800ade8:	0800b7c8 	.word	0x0800b7c8
 800adec:	40011000 	.word	0x40011000
 800adf0:	40004400 	.word	0x40004400
 800adf4:	40004800 	.word	0x40004800
 800adf8:	40004c00 	.word	0x40004c00
 800adfc:	40005000 	.word	0x40005000
 800ae00:	40011400 	.word	0x40011400
 800ae04:	40007800 	.word	0x40007800
 800ae08:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d018      	beq.n	800ae4a <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <UART_AdvFeatureConfig+0x2c8>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ae28:	d004      	beq.n	800ae34 <UART_AdvFeatureConfig+0x2c8>
 800ae2a:	f640 4186 	movw	r1, #3206	; 0xc86
 800ae2e:	4809      	ldr	r0, [pc, #36]	; (800ae54 <UART_AdvFeatureConfig+0x2e8>)
 800ae30:	f7f5 ffd7 	bl	8000de2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	605a      	str	r2, [r3, #4]
  }
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	0800b7c8 	.word	0x0800b7c8

0800ae58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae68:	f7f6 fa6e 	bl	8001348 <HAL_GetTick>
 800ae6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d10e      	bne.n	800ae9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f82c 	bl	800aee8 <UART_WaitOnFlagUntilTimeout>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e022      	b.n	800aee0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d10e      	bne.n	800aec6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f816 	bl	800aee8 <UART_WaitOnFlagUntilTimeout>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d001      	beq.n	800aec6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e00c      	b.n	800aee0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2220      	movs	r2, #32
 800aed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	4613      	mov	r3, r2
 800aef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aef8:	e062      	b.n	800afc0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d05e      	beq.n	800afc0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af02:	f7f6 fa21 	bl	8001348 <HAL_GetTick>
 800af06:	4602      	mov	r2, r0
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	69ba      	ldr	r2, [r7, #24]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d302      	bcc.n	800af18 <UART_WaitOnFlagUntilTimeout+0x30>
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d11d      	bne.n	800af54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689a      	ldr	r2, [r3, #8]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f022 0201 	bic.w	r2, r2, #1
 800af36:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2220      	movs	r2, #32
 800af3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800af50:	2303      	movs	r3, #3
 800af52:	e045      	b.n	800afe0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0304 	and.w	r3, r3, #4
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d02e      	beq.n	800afc0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	69db      	ldr	r3, [r3, #28]
 800af68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af70:	d126      	bne.n	800afc0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af7a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af8a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	689a      	ldr	r2, [r3, #8]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f022 0201 	bic.w	r2, r2, #1
 800af9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2220      	movs	r2, #32
 800afa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2220      	movs	r2, #32
 800afb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800afbc:	2303      	movs	r3, #3
 800afbe:	e00f      	b.n	800afe0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	69da      	ldr	r2, [r3, #28]
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	4013      	ands	r3, r2
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	429a      	cmp	r2, r3
 800afce:	bf0c      	ite	eq
 800afd0:	2301      	moveq	r3, #1
 800afd2:	2300      	movne	r3, #0
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	461a      	mov	r2, r3
 800afd8:	79fb      	ldrb	r3, [r7, #7]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d08d      	beq.n	800aefa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a2e      	ldr	r2, [pc, #184]	; (800b0b0 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d027      	beq.n	800b04a <HAL_UARTEx_DisableFifoMode+0x62>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a2d      	ldr	r2, [pc, #180]	; (800b0b4 <HAL_UARTEx_DisableFifoMode+0xcc>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d022      	beq.n	800b04a <HAL_UARTEx_DisableFifoMode+0x62>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a2b      	ldr	r2, [pc, #172]	; (800b0b8 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d01d      	beq.n	800b04a <HAL_UARTEx_DisableFifoMode+0x62>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a2a      	ldr	r2, [pc, #168]	; (800b0bc <HAL_UARTEx_DisableFifoMode+0xd4>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d018      	beq.n	800b04a <HAL_UARTEx_DisableFifoMode+0x62>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a28      	ldr	r2, [pc, #160]	; (800b0c0 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d013      	beq.n	800b04a <HAL_UARTEx_DisableFifoMode+0x62>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a27      	ldr	r2, [pc, #156]	; (800b0c4 <HAL_UARTEx_DisableFifoMode+0xdc>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d00e      	beq.n	800b04a <HAL_UARTEx_DisableFifoMode+0x62>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a25      	ldr	r2, [pc, #148]	; (800b0c8 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d009      	beq.n	800b04a <HAL_UARTEx_DisableFifoMode+0x62>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a24      	ldr	r2, [pc, #144]	; (800b0cc <HAL_UARTEx_DisableFifoMode+0xe4>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d004      	beq.n	800b04a <HAL_UARTEx_DisableFifoMode+0x62>
 800b040:	f240 2111 	movw	r1, #529	; 0x211
 800b044:	4822      	ldr	r0, [pc, #136]	; (800b0d0 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800b046:	f7f5 fecc 	bl	8000de2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b050:	2b01      	cmp	r3, #1
 800b052:	d101      	bne.n	800b058 <HAL_UARTEx_DisableFifoMode+0x70>
 800b054:	2302      	movs	r3, #2
 800b056:	e027      	b.n	800b0a8 <HAL_UARTEx_DisableFifoMode+0xc0>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2224      	movs	r2, #36	; 0x24
 800b064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f022 0201 	bic.w	r2, r2, #1
 800b07e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b086:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2220      	movs	r2, #32
 800b09a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	40011000 	.word	0x40011000
 800b0b4:	40004400 	.word	0x40004400
 800b0b8:	40004800 	.word	0x40004800
 800b0bc:	40004c00 	.word	0x40004c00
 800b0c0:	40005000 	.word	0x40005000
 800b0c4:	40011400 	.word	0x40011400
 800b0c8:	40007800 	.word	0x40007800
 800b0cc:	40007c00 	.word	0x40007c00
 800b0d0:	0800b804 	.word	0x0800b804

0800b0d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a40      	ldr	r2, [pc, #256]	; (800b1e4 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d027      	beq.n	800b138 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a3e      	ldr	r2, [pc, #248]	; (800b1e8 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d022      	beq.n	800b138 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a3d      	ldr	r2, [pc, #244]	; (800b1ec <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d01d      	beq.n	800b138 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a3b      	ldr	r2, [pc, #236]	; (800b1f0 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d018      	beq.n	800b138 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a3a      	ldr	r2, [pc, #232]	; (800b1f4 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d013      	beq.n	800b138 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a38      	ldr	r2, [pc, #224]	; (800b1f8 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d00e      	beq.n	800b138 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a37      	ldr	r2, [pc, #220]	; (800b1fc <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d009      	beq.n	800b138 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a35      	ldr	r2, [pc, #212]	; (800b200 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d004      	beq.n	800b138 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b12e:	f240 213f 	movw	r1, #575	; 0x23f
 800b132:	4834      	ldr	r0, [pc, #208]	; (800b204 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800b134:	f7f5 fe55 	bl	8000de2 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d018      	beq.n	800b170 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b144:	d014      	beq.n	800b170 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b14c:	d010      	beq.n	800b170 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b154:	d00c      	beq.n	800b170 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b15c:	d008      	beq.n	800b170 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800b164:	d004      	beq.n	800b170 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b166:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b16a:	4826      	ldr	r0, [pc, #152]	; (800b204 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800b16c:	f7f5 fe39 	bl	8000de2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b176:	2b01      	cmp	r3, #1
 800b178:	d101      	bne.n	800b17e <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800b17a:	2302      	movs	r3, #2
 800b17c:	e02d      	b.n	800b1da <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2224      	movs	r2, #36	; 0x24
 800b18a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0201 	bic.w	r2, r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f8be 	bl	800b33c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	40011000 	.word	0x40011000
 800b1e8:	40004400 	.word	0x40004400
 800b1ec:	40004800 	.word	0x40004800
 800b1f0:	40004c00 	.word	0x40004c00
 800b1f4:	40005000 	.word	0x40005000
 800b1f8:	40011400 	.word	0x40011400
 800b1fc:	40007800 	.word	0x40007800
 800b200:	40007c00 	.word	0x40007c00
 800b204:	0800b804 	.word	0x0800b804

0800b208 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a40      	ldr	r2, [pc, #256]	; (800b318 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d027      	beq.n	800b26c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a3e      	ldr	r2, [pc, #248]	; (800b31c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d022      	beq.n	800b26c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a3d      	ldr	r2, [pc, #244]	; (800b320 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d01d      	beq.n	800b26c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a3b      	ldr	r2, [pc, #236]	; (800b324 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d018      	beq.n	800b26c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a3a      	ldr	r2, [pc, #232]	; (800b328 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d013      	beq.n	800b26c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a38      	ldr	r2, [pc, #224]	; (800b32c <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d00e      	beq.n	800b26c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a37      	ldr	r2, [pc, #220]	; (800b330 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d009      	beq.n	800b26c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a35      	ldr	r2, [pc, #212]	; (800b334 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d004      	beq.n	800b26c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800b262:	f44f 711c 	mov.w	r1, #624	; 0x270
 800b266:	4834      	ldr	r0, [pc, #208]	; (800b338 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800b268:	f7f5 fdbb 	bl	8000de2 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d018      	beq.n	800b2a4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b278:	d014      	beq.n	800b2a4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b280:	d010      	beq.n	800b2a4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800b288:	d00c      	beq.n	800b2a4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b290:	d008      	beq.n	800b2a4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800b298:	d004      	beq.n	800b2a4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800b29a:	f240 2171 	movw	r1, #625	; 0x271
 800b29e:	4826      	ldr	r0, [pc, #152]	; (800b338 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800b2a0:	f7f5 fd9f 	bl	8000de2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d101      	bne.n	800b2b2 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	e02d      	b.n	800b30e <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2224      	movs	r2, #36	; 0x24
 800b2be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0201 	bic.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f824 	bl	800b33c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	40011000 	.word	0x40011000
 800b31c:	40004400 	.word	0x40004400
 800b320:	40004800 	.word	0x40004800
 800b324:	40004c00 	.word	0x40004c00
 800b328:	40005000 	.word	0x40005000
 800b32c:	40011400 	.word	0x40011400
 800b330:	40007800 	.word	0x40007800
 800b334:	40007c00 	.word	0x40007c00
 800b338:	0800b804 	.word	0x0800b804

0800b33c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b089      	sub	sp, #36	; 0x24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b344:	4a2f      	ldr	r2, [pc, #188]	; (800b404 <UARTEx_SetNbDataToProcess+0xc8>)
 800b346:	f107 0314 	add.w	r3, r7, #20
 800b34a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b34e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b352:	4a2d      	ldr	r2, [pc, #180]	; (800b408 <UARTEx_SetNbDataToProcess+0xcc>)
 800b354:	f107 030c 	add.w	r3, r7, #12
 800b358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b35c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b364:	2b00      	cmp	r3, #0
 800b366:	d108      	bne.n	800b37a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b378:	e03d      	b.n	800b3f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b37a:	2308      	movs	r3, #8
 800b37c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b37e:	2308      	movs	r3, #8
 800b380:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	0e5b      	lsrs	r3, r3, #25
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	f003 0307 	and.w	r3, r3, #7
 800b390:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	0f5b      	lsrs	r3, r3, #29
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	f003 0307 	and.w	r3, r3, #7
 800b3a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b3a2:	7fbb      	ldrb	r3, [r7, #30]
 800b3a4:	7f3a      	ldrb	r2, [r7, #28]
 800b3a6:	f107 0120 	add.w	r1, r7, #32
 800b3aa:	440a      	add	r2, r1
 800b3ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b3b0:	fb02 f303 	mul.w	r3, r2, r3
 800b3b4:	7f3a      	ldrb	r2, [r7, #28]
 800b3b6:	f107 0120 	add.w	r1, r7, #32
 800b3ba:	440a      	add	r2, r1
 800b3bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b3c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b3cc:	7ffb      	ldrb	r3, [r7, #31]
 800b3ce:	7f7a      	ldrb	r2, [r7, #29]
 800b3d0:	f107 0120 	add.w	r1, r7, #32
 800b3d4:	440a      	add	r2, r1
 800b3d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b3da:	fb02 f303 	mul.w	r3, r2, r3
 800b3de:	7f7a      	ldrb	r2, [r7, #29]
 800b3e0:	f107 0120 	add.w	r1, r7, #32
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b3ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3f6:	bf00      	nop
 800b3f8:	3724      	adds	r7, #36	; 0x24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	0800b840 	.word	0x0800b840
 800b408:	0800b848 	.word	0x0800b848

0800b40c <chip_isr>:
//static 	EXTI_ConfigTypeDef g_ExtiConfig = {NULL};



void chip_isr(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
 800b410:	4b04      	ldr	r3, [pc, #16]	; (800b424 <chip_isr+0x18>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <chip_isr+0x12>
		gpfIsr();
 800b418:	4b02      	ldr	r3, [pc, #8]	; (800b424 <chip_isr+0x18>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4798      	blx	r3
	}
}
 800b41e:	bf00      	nop
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	2400002c 	.word	0x2400002c

0800b428 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	af00      	add	r7, sp, #0
//	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
//	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);

// ================= SO: =================
	// WAKE PIN IN IRRELEVANT HERE SINCE ITS NOT CONNECTED TO MCU
	HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800b42c:	2200      	movs	r2, #0
 800b42e:	2120      	movs	r1, #32
 800b430:	4805      	ldr	r0, [pc, #20]	; (800b448 <init_chip_pins+0x20>)
 800b432:	f7f8 fc81 	bl	8003d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 800b436:	2200      	movs	r2, #0
 800b438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b43c:	4803      	ldr	r0, [pc, #12]	; (800b44c <init_chip_pins+0x24>)
 800b43e:	f7f8 fc7b 	bl	8003d38 <HAL_GPIO_WritePin>



}
 800b442:	bf00      	nop
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	58020000 	.word	0x58020000
 800b44c:	58020c00 	.word	0x58020c00

0800b450 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
 800b454:	4b03      	ldr	r3, [pc, #12]	; (800b464 <nm_bsp_init+0x14>)
 800b456:	2200      	movs	r2, #0
 800b458:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
 800b45a:	f7ff ffe5 	bl	800b428 <init_chip_pins>
//	    delay_init();
//    }

//	system_interrupt_enable_global(); // TODO: SO: make sure INT_N is well defined

	return M2M_SUCCESS;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	bd80      	pop	{r7, pc}
 800b464:	2400002c 	.word	0x2400002c

0800b468 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	af00      	add	r7, sp, #0
//	nm_bsp_sleep(1);
//	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
//	nm_bsp_sleep(10);
//	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);

	HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 800b46c:	2200      	movs	r2, #0
 800b46e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b472:	480d      	ldr	r0, [pc, #52]	; (800b4a8 <nm_bsp_reset+0x40>)
 800b474:	f7f8 fc60 	bl	8003d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800b478:	2200      	movs	r2, #0
 800b47a:	2120      	movs	r1, #32
 800b47c:	480b      	ldr	r0, [pc, #44]	; (800b4ac <nm_bsp_reset+0x44>)
 800b47e:	f7f8 fc5b 	bl	8003d38 <HAL_GPIO_WritePin>
	nm_bsp_sleep(1);
 800b482:	2001      	movs	r0, #1
 800b484:	f000 f814 	bl	800b4b0 <nm_bsp_sleep>
	HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_SET);
 800b488:	2201      	movs	r2, #1
 800b48a:	2120      	movs	r1, #32
 800b48c:	4807      	ldr	r0, [pc, #28]	; (800b4ac <nm_bsp_reset+0x44>)
 800b48e:	f7f8 fc53 	bl	8003d38 <HAL_GPIO_WritePin>
	nm_bsp_sleep(10);
 800b492:	200a      	movs	r0, #10
 800b494:	f000 f80c 	bl	800b4b0 <nm_bsp_sleep>
	HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_SET);
 800b498:	2201      	movs	r2, #1
 800b49a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b49e:	4802      	ldr	r0, [pc, #8]	; (800b4a8 <nm_bsp_reset+0x40>)
 800b4a0:	f7f8 fc4a 	bl	8003d38 <HAL_GPIO_WritePin>
}
 800b4a4:	bf00      	nop
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	58020c00 	.word	0x58020c00
 800b4ac:	58020000 	.word	0x58020000

0800b4b0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32TimeMsec);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7f5 ff51 	bl	8001360 <HAL_Delay>
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
//	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
//			EXTINT_CALLBACK_TYPE_DETECT);
//	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
//			EXTINT_CALLBACK_TYPE_DETECT);

	gpfIsr = pfIsr;
 800b4d0:	4a04      	ldr	r2, [pc, #16]	; (800b4e4 <nm_bsp_register_isr+0x1c>)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6013      	str	r3, [r2, #0]
//	assert_param(result != HAL_OK);
//
//	result = HAL_EXTI_RegisterCallback(phexti, HAL_EXTI_COMMON_CB_ID ,phexti->PendingCallback);
//	assert_param(result != HAL_OK);

}
 800b4d6:	bf00      	nop
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	2400002c 	.word	0x2400002c

0800b4e8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	73fb      	strb	r3, [r7, #15]
//	}
//#endif

	//===========================  SO code ===========================

	MX_SPI2_Init();
 800b4f4:	f7f5 fc80 	bl	8000df8 <MX_SPI2_Init>



	// ========================= End of  SO code =====================

	nm_bsp_reset();
 800b4f8:	f7ff ffb6 	bl	800b468 <nm_bsp_reset>
	nm_bsp_sleep(1);
 800b4fc:	2001      	movs	r0, #1
 800b4fe:	f7ff ffd7 	bl	800b4b0 <nm_bsp_sleep>
//#endif
	return result;
 800b502:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
	...

0800b510 <__libc_init_array>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	4e0d      	ldr	r6, [pc, #52]	; (800b548 <__libc_init_array+0x38>)
 800b514:	4c0d      	ldr	r4, [pc, #52]	; (800b54c <__libc_init_array+0x3c>)
 800b516:	1ba4      	subs	r4, r4, r6
 800b518:	10a4      	asrs	r4, r4, #2
 800b51a:	2500      	movs	r5, #0
 800b51c:	42a5      	cmp	r5, r4
 800b51e:	d109      	bne.n	800b534 <__libc_init_array+0x24>
 800b520:	4e0b      	ldr	r6, [pc, #44]	; (800b550 <__libc_init_array+0x40>)
 800b522:	4c0c      	ldr	r4, [pc, #48]	; (800b554 <__libc_init_array+0x44>)
 800b524:	f000 f820 	bl	800b568 <_init>
 800b528:	1ba4      	subs	r4, r4, r6
 800b52a:	10a4      	asrs	r4, r4, #2
 800b52c:	2500      	movs	r5, #0
 800b52e:	42a5      	cmp	r5, r4
 800b530:	d105      	bne.n	800b53e <__libc_init_array+0x2e>
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b538:	4798      	blx	r3
 800b53a:	3501      	adds	r5, #1
 800b53c:	e7ee      	b.n	800b51c <__libc_init_array+0xc>
 800b53e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b542:	4798      	blx	r3
 800b544:	3501      	adds	r5, #1
 800b546:	e7f2      	b.n	800b52e <__libc_init_array+0x1e>
 800b548:	0800ba90 	.word	0x0800ba90
 800b54c:	0800ba90 	.word	0x0800ba90
 800b550:	0800ba90 	.word	0x0800ba90
 800b554:	0800ba94 	.word	0x0800ba94

0800b558 <memset>:
 800b558:	4402      	add	r2, r0
 800b55a:	4603      	mov	r3, r0
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d100      	bne.n	800b562 <memset+0xa>
 800b560:	4770      	bx	lr
 800b562:	f803 1b01 	strb.w	r1, [r3], #1
 800b566:	e7f9      	b.n	800b55c <memset+0x4>

0800b568 <_init>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	bf00      	nop
 800b56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56e:	bc08      	pop	{r3}
 800b570:	469e      	mov	lr, r3
 800b572:	4770      	bx	lr

0800b574 <_fini>:
 800b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b576:	bf00      	nop
 800b578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b57a:	bc08      	pop	{r3}
 800b57c:	469e      	mov	lr, r3
 800b57e:	4770      	bx	lr
