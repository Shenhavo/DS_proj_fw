
open-mv-camh7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb88  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800be20  0800be20  0001be20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c328  0800c328  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800c328  0800c328  0001c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c330  0800c330  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c330  0800c330  0001c330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c334  0800c334  0001c334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800c338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  24000010  0800c348  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002b4  0800c348  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e77  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004321  00000000  00000000  00048eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  0004d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  0004e500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000383f9  00000000  00000000  0004f670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000182f1  00000000  00000000  00087a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015bac5  00000000  00000000  0009fd5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fb81f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dcc  00000000  00000000  001fb89c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800be08 	.word	0x0800be08

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800be08 	.word	0x0800be08

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_DCMI_Init+0x64>)
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <MX_DCMI_Init+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_DCMI_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_DCMI_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_DCMI_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_DCMI_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_DCMI_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_DCMI_Init+0x64>)
 8000602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000606:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_DCMI_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_DCMI_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_DCMI_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_DCMI_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_DCMI_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_DCMI_Init+0x64>)
 8000628:	f001 f832 	bl	8001690 <HAL_DCMI_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 8000632:	f000 fbfb 	bl	8000e2c <Error_Handler>
  }

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	240000a8 	.word	0x240000a8
 8000640:	48020000 	.word	0x48020000

08000644 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a65      	ldr	r2, [pc, #404]	; (80007f8 <HAL_DCMI_MspInit+0x1b4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	f040 80c3 	bne.w	80007ee <HAL_DCMI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000668:	4b64      	ldr	r3, [pc, #400]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800066a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800066e:	4a63      	ldr	r2, [pc, #396]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000678:	4b60      	ldr	r3, [pc, #384]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800067a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
 8000684:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a5b      	ldr	r2, [pc, #364]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b59      	ldr	r3, [pc, #356]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0310 	and.w	r3, r3, #16
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b55      	ldr	r3, [pc, #340]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	4a54      	ldr	r2, [pc, #336]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b4:	4b51      	ldr	r3, [pc, #324]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b4e      	ldr	r3, [pc, #312]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	4a4c      	ldr	r2, [pc, #304]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	4b46      	ldr	r3, [pc, #280]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	4a45      	ldr	r2, [pc, #276]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f0:	4b42      	ldr	r3, [pc, #264]	; (80007fc <HAL_DCMI_MspInit+0x1b8>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
 80006fe:	2373      	movs	r3, #115	; 0x73
 8000700:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800070e:	230d      	movs	r3, #13
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4839      	ldr	r0, [pc, #228]	; (8000800 <HAL_DCMI_MspInit+0x1bc>)
 800071a:	f003 f889 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800071e:	2350      	movs	r3, #80	; 0x50
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800072e:	230d      	movs	r3, #13
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4832      	ldr	r0, [pc, #200]	; (8000804 <HAL_DCMI_MspInit+0x1c0>)
 800073a:	f003 f879 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800073e:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000750:	230d      	movs	r3, #13
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	482b      	ldr	r0, [pc, #172]	; (8000808 <HAL_DCMI_MspInit+0x1c4>)
 800075c:	f003 f868 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000760:	23c0      	movs	r3, #192	; 0xc0
 8000762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000770:	230d      	movs	r3, #13
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4824      	ldr	r0, [pc, #144]	; (800080c <HAL_DCMI_MspInit+0x1c8>)
 800077c:	f003 f858 	bl	8003830 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <HAL_DCMI_MspInit+0x1d0>)
 8000784:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000788:	224b      	movs	r2, #75	; 0x4b
 800078a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 800079a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007c4:	f001 f94e 	bl	8001a64 <HAL_DMA_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_DCMI_MspInit+0x18e>
    {
      Error_Handler();
 80007ce:	f000 fb2d 	bl	8000e2c <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007d6:	649a      	str	r2, [r3, #72]	; 0x48
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <HAL_DCMI_MspInit+0x1cc>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	204e      	movs	r0, #78	; 0x4e
 80007e4:	f000 ff06 	bl	80015f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f000 ff2d 	bl	8001648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80007ee:	bf00      	nop
 80007f0:	3730      	adds	r7, #48	; 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	48020000 	.word	0x48020000
 80007fc:	58024400 	.word	0x58024400
 8000800:	58021000 	.word	0x58021000
 8000804:	58020000 	.word	0x58020000
 8000808:	58020800 	.word	0x58020800
 800080c:	58020400 	.word	0x58020400
 8000810:	24000030 	.word	0x24000030
 8000814:	40020010 	.word	0x40020010

08000818 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_DMA_Init+0x3c>)
 8000820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <MX_DMA_Init+0x3c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_DMA_Init+0x3c>)
 8000830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	200b      	movs	r0, #11
 8000842:	f000 fed7 	bl	80015f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000846:	200b      	movs	r0, #11
 8000848:	f000 fefe 	bl	8001648 <HAL_NVIC_EnableIRQ>

}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024400 	.word	0x58024400

08000858 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086e:	4b77      	ldr	r3, [pc, #476]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	4a75      	ldr	r2, [pc, #468]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087e:	4b73      	ldr	r3, [pc, #460]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	4b6f      	ldr	r3, [pc, #444]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	4a6e      	ldr	r2, [pc, #440]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089c:	4b6b      	ldr	r3, [pc, #428]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b68      	ldr	r3, [pc, #416]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	4a66      	ldr	r2, [pc, #408]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ba:	4b64      	ldr	r3, [pc, #400]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b60      	ldr	r3, [pc, #384]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a5f      	ldr	r2, [pc, #380]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b5c      	ldr	r3, [pc, #368]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b59      	ldr	r3, [pc, #356]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	4a57      	ldr	r2, [pc, #348]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f6:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000904:	4b51      	ldr	r3, [pc, #324]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	4a50      	ldr	r2, [pc, #320]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <MX_GPIO_Init+0x1f4>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2107      	movs	r1, #7
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 8000928:	f003 fa32 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2120      	movs	r1, #32
 8000930:	4848      	ldr	r0, [pc, #288]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 8000932:	f003 fa2d 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093c:	4846      	ldr	r0, [pc, #280]	; (8000a58 <MX_GPIO_Init+0x200>)
 800093e:	f003 fa27 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE7 PE8 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8 
 8000942:	f64f 738c 	movw	r3, #65420	; 0xff8c
 8000946:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4841      	ldr	r0, [pc, #260]	; (8000a5c <MX_GPIO_Init+0x204>)
 8000958:	f002 ff6a 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC3 
                           PC4 PC5 PC8 PC9 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
 800095c:	f64e 3338 	movw	r3, #60216	; 0xeb38
 8000960:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4837      	ldr	r0, [pc, #220]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 8000972:	f002 ff5d 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000976:	2307      	movs	r3, #7
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4830      	ldr	r0, [pc, #192]	; (8000a50 <MX_GPIO_Init+0x1f8>)
 800098e:	f002 ff4f 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000992:	f649 738f 	movw	r3, #40847	; 0x9f8f
 8000996:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	482b      	ldr	r0, [pc, #172]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 80009a8:	f002 ff42 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_CHIP_EN_Pin;
 80009ac:	2320      	movs	r3, #32
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WIFI_CHIP_EN_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4824      	ldr	r0, [pc, #144]	; (8000a54 <MX_GPIO_Init+0x1fc>)
 80009c4:	f002 ff34 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80009c8:	f640 433f 	movw	r3, #3135	; 0xc3f
 80009cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <MX_GPIO_Init+0x208>)
 80009de:	f002 ff27 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80009e2:	f64c 739f 	movw	r3, #53151	; 0xcf9f
 80009e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_GPIO_Init+0x200>)
 80009f8:	f002 ff1a 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RESET_N_Pin;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WIFI_RESET_N_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4810      	ldr	r0, [pc, #64]	; (8000a58 <MX_GPIO_Init+0x200>)
 8000a16:	f002 ff0b 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_INT_N_Pin;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x20c>)
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WIFI_INT_N_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480a      	ldr	r0, [pc, #40]	; (8000a58 <MX_GPIO_Init+0x200>)
 8000a30:	f002 fefe 	bl	8003830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2028      	movs	r0, #40	; 0x28
 8000a3a:	f000 fddb 	bl	80015f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a3e:	2028      	movs	r0, #40	; 0x28
 8000a40:	f000 fe02 	bl	8001648 <HAL_NVIC_EnableIRQ>

}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58020000 	.word	0x58020000
 8000a58:	58020c00 	.word	0x58020c00
 8000a5c:	58021000 	.word	0x58021000
 8000a60:	58020400 	.word	0x58020400
 8000a64:	11210000 	.word	0x11210000

08000a68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_I2C1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x7c>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_I2C1_Init+0x74>)
 8000aa4:	f003 f9ea 	bl	8003e7c <HAL_I2C_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aae:	f000 f9bd 	bl	8000e2c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ab6:	f003 fb03 	bl	80040c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f000 f9b4 	bl	8000e2c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ac8:	f003 fb70 	bl	80041ac <HAL_I2CEx_ConfigDigitalFilter>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f9ab 	bl	8000e2c <Error_Handler>
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	240000f8 	.word	0x240000f8
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	10707dbc 	.word	0x10707dbc

08000ae8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12e      	bne.n	8000b68 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <HAL_I2C_MspInit+0x90>)
 8000b46:	f002 fe73 	bl	8003830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020400 	.word	0x58020400

08000b7c <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  hjpeg.Instance = JPEG;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_JPEG_Init+0x20>)
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <MX_JPEG_Init+0x24>)
 8000b84:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_JPEG_Init+0x20>)
 8000b88:	f003 fb84 	bl	8004294 <HAL_JPEG_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b92:	f000 f94b 	bl	8000e2c <Error_Handler>
  }

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24000144 	.word	0x24000144
 8000ba0:	52003000 	.word	0x52003000

08000ba4 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_JPEG_MspInit+0x3c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10e      	bne.n	8000bd4 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bbc:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_JPEG_MspInit+0x40>)
 8000bc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bcc:	f003 0320 	and.w	r3, r3, #32
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	52003000 	.word	0x52003000
 8000be4:	58024400 	.word	0x58024400

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0a4      	sub	sp, #144	; 0x90
 8000bec:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f000 fb55 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f845 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f7ff fe2f 	bl	8000858 <MX_GPIO_Init>
  MX_DCMI_Init();
 8000bfa:	f7ff fced 	bl	80005d8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000bfe:	f7ff ff33 	bl	8000a68 <MX_I2C1_Init>
  MX_JPEG_Init();
 8000c02:	f7ff ffbb 	bl	8000b7c <MX_JPEG_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8000c06:	f000 fa89 	bl	800111c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000c0a:	f7ff fe05 	bl	8000818 <MX_DMA_Init>

  /* USER CODE BEGIN 2 */
  nm_bsp_init();
 8000c0e:	f00b f813 	bl	800bc38 <nm_bsp_init>
  nm_bsp_register_isr(my_int);
 8000c12:	4819      	ldr	r0, [pc, #100]	; (8000c78 <main+0x90>)
 8000c14:	f00b f84c 	bl	800bcb0 <nm_bsp_register_isr>
  nm_bus_init(NULL);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f00b f883 	bl	800bd24 <nm_bus_init>
  /* USER CODE END 2 */
  /* USER CODE BEGIN 3 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t TxBuff[BUFF_SIZE]={0};
 8000c1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c22:	2240      	movs	r2, #64	; 0x40
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00b f8e6 	bl	800bdf8 <memset>
  uint8_t RxBuff[BUFF_SIZE]={0};
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	2240      	movs	r2, #64	; 0x40
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f00b f8df 	bl	800bdf8 <memset>
  tstrNmSpiRw stSpi = {NULL};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  stSpi.pu8InBuf = RxBuff;
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	607b      	str	r3, [r7, #4]
  stSpi.pu8OutBuf = TxBuff;
 8000c4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c4e:	60bb      	str	r3, [r7, #8]
  stSpi.u16Sz = BUFF_SIZE;
 8000c50:	2340      	movs	r3, #64	; 0x40
 8000c52:	81bb      	strh	r3, [r7, #12]

//  HAL_StatusTypeDef result = HAL_OK;
  while (1)
  {

	  HAL_Delay(333);
 8000c54:	f240 104d 	movw	r0, #333	; 0x14d
 8000c58:	f000 fbae 	bl	80013b8 <HAL_Delay>
	 if( nm_bus_ioctl(NULL,(void*) &stSpi) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2000      	movs	r0, #0
 8000c62:	f00b f873 	bl	800bd4c <nm_bus_ioctl>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f3      	beq.n	8000c54 <main+0x6c>
	 {
		 HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <main+0x94>)
 8000c70:	f003 f8c2 	bl	8003df8 <HAL_GPIO_TogglePin>
	  HAL_Delay(333);
 8000c74:	e7ee      	b.n	8000c54 <main+0x6c>
 8000c76:	bf00      	nop
 8000c78:	08000e19 	.word	0x08000e19
 8000c7c:	58020800 	.word	0x58020800

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0cc      	sub	sp, #304	; 0x130
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c8a:	224c      	movs	r2, #76	; 0x4c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f00b f8b2 	bl	800bdf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c98:	2220      	movs	r2, #32
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f00b f8ab 	bl	800bdf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	23bc      	movs	r3, #188	; 0xbc
 8000caa:	461a      	mov	r2, r3
 8000cac:	2100      	movs	r1, #0
 8000cae:	f00b f8a3 	bl	800bdf8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f004 f8b2 	bl	8004e1c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <SystemClock_Config+0x170>)
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	4a4b      	ldr	r2, [pc, #300]	; (8000df0 <SystemClock_Config+0x170>)
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cca:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <SystemClock_Config+0x170>)
 8000ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cce:	f003 0201 	and.w	r2, r3, #1
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <SystemClock_Config+0x174>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cde:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <SystemClock_Config+0x174>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <SystemClock_Config+0x174>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf6:	bf00      	nop
 8000cf8:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <SystemClock_Config+0x174>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d04:	d1f8      	bne.n	8000cf8 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d12:	2320      	movs	r3, #32
 8000d14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000d24:	2320      	movs	r3, #32
 8000d26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000d2a:	2381      	movs	r3, #129	; 0x81
 8000d2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d42:	2304      	movs	r3, #4
 8000d44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 f8a3 	bl	8004ea4 <HAL_RCC_OscConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d64:	f000 f862 	bl	8000e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d68:	233f      	movs	r3, #63	; 0x3f
 8000d6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 fd60 	bl	8005864 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000daa:	f000 f83f 	bl	8000e2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SPI2
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	f241 020a 	movw	r2, #4106	; 0x100a
 8000db6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fa5c 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000de2:	f000 f823 	bl	8000e2c <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58000400 	.word	0x58000400
 8000df4:	58024800 	.word	0x58024800

08000df8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == GPIO_PIN_13)
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e08:	d101      	bne.n	8000e0e <HAL_GPIO_EXTI_Callback+0x16>
	{
		chip_isr(); // SO: in case of WIFI event go to internal pFunction
 8000e0a:	f00a fef3 	bl	800bbf4 <chip_isr>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <my_int>:


void my_int(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4802      	ldr	r0, [pc, #8]	; (8000e28 <my_int+0x10>)
 8000e20:	f002 ffea 	bl	8003df8 <HAL_GPIO_TogglePin>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58020800 	.word	0x58020800

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e56:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <MX_SPI2_Init+0xa8>)
 8000e58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH; //SO: it seems like its rising edge
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS =  SPI_NSS_HARD_OUTPUT; // SPI_NSS_SOFT;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e7e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_SPI2_Init+0xa4>)
 8000ee2:	f007 f88b 	bl	8007ffc <HAL_SPI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000eec:	f7ff ff9e 	bl	8000e2c <Error_Handler>
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2400019c 	.word	0x2400019c
 8000ef8:	40003800 	.word	0x40003800

08000efc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12e      	bne.n	8000f7c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f24:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f5a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_SPI_MspInit+0x90>)
 8000f78:	f002 fc5a 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40003800 	.word	0x40003800
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020400 	.word	0x58020400

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_MspInit+0x30>)
 8000f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x30>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x30>)
 8000fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	58024400 	.word	0x58024400

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f9ae 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA1_Stream0_IRQHandler+0x10>)
 8001026:	f001 fa9d 	bl	8002564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000030 	.word	0x24000030

08001034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001038:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800103c:	f002 ff06 	bl	8003e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DCMI_IRQHandler+0x10>)
 800104a:	f000 fc43 	bl	80018d4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	240000a8 	.word	0x240000a8

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <SystemInit+0xac>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a28      	ldr	r2, [pc, #160]	; (8001104 <SystemInit+0xac>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <SystemInit+0xb0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a25      	ldr	r2, [pc, #148]	; (8001108 <SystemInit+0xb0>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <SystemInit+0xb0>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <SystemInit+0xb0>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4921      	ldr	r1, [pc, #132]	; (8001108 <SystemInit+0xb0>)
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <SystemInit+0xb4>)
 8001086:	4013      	ands	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <SystemInit+0xb0>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <SystemInit+0xb0>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <SystemInit+0xb0>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <SystemInit+0xb0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <SystemInit+0xb0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <SystemInit+0xb0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <SystemInit+0xb0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <SystemInit+0xb0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <SystemInit+0xb0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <SystemInit+0xb0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <SystemInit+0xb0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <SystemInit+0xb0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <SystemInit+0xb0>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <SystemInit+0xb0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <SystemInit+0xb8>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <SystemInit+0xbc>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ea:	d202      	bcs.n	80010f2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <SystemInit+0xc0>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SystemInit+0xac>)
 80010f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	58024400 	.word	0x58024400
 800110c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001110:	5c001000 	.word	0x5c001000
 8001114:	ffff0000 	.word	0xffff0000
 8001118:	51008108 	.word	0x51008108

0800111c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <MX_USART2_UART_Init+0x94>)
 8001124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001166:	f007 fdc9 	bl	8008cfc <HAL_UART_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001170:	f7ff fe5c 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001178:	f00a fba0 	bl	800b8bc <HAL_UARTEx_SetTxFifoThreshold>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001182:	f7ff fe53 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800118a:	f00a fc31 	bl	800b9f0 <HAL_UARTEx_SetRxFifoThreshold>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001194:	f7ff fe4a 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800119a:	f00a fb19 	bl	800b7d0 <HAL_UARTEx_DisableFifoMode>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011a4:	f7ff fe42 	bl	8000e2c <Error_Handler>
  }

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	24000224 	.word	0x24000224
 80011b0:	40004400 	.word	0x40004400

080011b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_UART_MspInit+0x88>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12d      	bne.n	8001232 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_UART_MspInit+0x8c>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001212:	2360      	movs	r3, #96	; 0x60
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001222:	2307      	movs	r3, #7
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_UART_MspInit+0x90>)
 800122e:	f002 faff 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40004400 	.word	0x40004400
 8001240:	58024400 	.word	0x58024400
 8001244:	58020c00 	.word	0x58020c00

08001248 <Reset_Handler>:
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x14>
 800124c:	2100      	movs	r1, #0
 800124e:	e003      	b.n	8001258 <LoopCopyDataInit>

08001250 <CopyDataInit>:
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <LoopFillZerobss+0x18>)
 8001252:	585b      	ldr	r3, [r3, r1]
 8001254:	5043      	str	r3, [r0, r1]
 8001256:	3104      	adds	r1, #4

08001258 <LoopCopyDataInit>:
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <LoopFillZerobss+0x1c>)
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <LoopFillZerobss+0x20>)
 800125c:	1842      	adds	r2, r0, r1
 800125e:	429a      	cmp	r2, r3
 8001260:	d3f6      	bcc.n	8001250 <CopyDataInit>
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x24>)
 8001264:	e002      	b.n	800126c <LoopFillZerobss>

08001266 <FillZerobss>:
 8001266:	2300      	movs	r3, #0
 8001268:	f842 3b04 	str.w	r3, [r2], #4

0800126c <LoopFillZerobss>:
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <LoopFillZerobss+0x28>)
 800126e:	429a      	cmp	r2, r3
 8001270:	d3f9      	bcc.n	8001266 <FillZerobss>
 8001272:	f7ff fef1 	bl	8001058 <SystemInit>
 8001276:	f00a fd9b 	bl	800bdb0 <__libc_init_array>
 800127a:	f7ff fcb5 	bl	8000be8 <main>
 800127e:	4770      	bx	lr
 8001280:	24080000 	.word	0x24080000
 8001284:	0800c338 	.word	0x0800c338
 8001288:	24000000 	.word	0x24000000
 800128c:	24000010 	.word	0x24000010
 8001290:	24000010 	.word	0x24000010
 8001294:	240002b4 	.word	0x240002b4

08001298 <ADC3_IRQHandler>:
 8001298:	e7fe      	b.n	8001298 <ADC3_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f987 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a6:	f004 fe3b 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 80012aa:	4601      	mov	r1, r0
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_Init+0x60>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_Init+0x64>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	fa21 f303 	lsr.w	r3, r1, r3
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_Init+0x68>)
 80012c4:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_Init+0x68>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_Init+0x60>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	490b      	ldr	r1, [pc, #44]	; (8001300 <HAL_Init+0x64>)
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_Init+0x6c>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f812 	bl	800130c <HAL_InitTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e002      	b.n	80012f8 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012f2:	f7ff fe4d 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400
 8001300:	0800c0f0 	.word	0x0800c0f0
 8001304:	24000000 	.word	0x24000000
 8001308:	24000004 	.word	0x24000004

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e021      	b.n	8001364 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_InitTick+0x64>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_InitTick+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f99e 	bl	8001678 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f94e 	bl	80015f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x68>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2400000c 	.word	0x2400000c
 8001370:	24000000 	.word	0x24000000
 8001374:	24000008 	.word	0x24000008

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2400000c 	.word	0x2400000c
 800139c:	240002b0 	.word	0x240002b0

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	240002b0 	.word	0x240002b0

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_Delay+0x40>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2400000c 	.word	0x2400000c

080013fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetREVID+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0c1b      	lsrs	r3, r3, #16
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	5c001000 	.word	0x5c001000

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <__NVIC_SetPriorityGrouping+0x40>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	4313      	orrs	r3, r2
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x40>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00
 8001458:	05fa0000 	.word	0x05fa0000

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b07      	cmp	r3, #7
 80015c0:	d00f      	beq.n	80015e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b06      	cmp	r3, #6
 80015c6:	d00c      	beq.n	80015e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d009      	beq.n	80015e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d006      	beq.n	80015e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d003      	beq.n	80015e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015da:	2192      	movs	r1, #146	; 0x92
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80015de:	f7ff fc2c 	bl	8000e3a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff16 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	0800be20 	.word	0x0800be20

080015f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d903      	bls.n	8001610 <HAL_NVIC_SetPriority+0x1c>
 8001608:	21aa      	movs	r1, #170	; 0xaa
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <HAL_NVIC_SetPriority+0x50>)
 800160c:	f7ff fc15 	bl	8000e3a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b0f      	cmp	r3, #15
 8001614:	d903      	bls.n	800161e <HAL_NVIC_SetPriority+0x2a>
 8001616:	21ab      	movs	r1, #171	; 0xab
 8001618:	480a      	ldr	r0, [pc, #40]	; (8001644 <HAL_NVIC_SetPriority+0x50>)
 800161a:	f7ff fc0e 	bl	8000e3a <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800161e:	f7ff ff1d 	bl	800145c <__NVIC_GetPriorityGrouping>
 8001622:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	6978      	ldr	r0, [r7, #20]
 800162a:	f7ff ff6d 	bl	8001508 <NVIC_EncodePriority>
 800162e:	4602      	mov	r2, r0
 8001630:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff3c 	bl	80014b4 <__NVIC_SetPriority>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	0800be20 	.word	0x0800be20

08001648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001656:	2b00      	cmp	r3, #0
 8001658:	da03      	bge.n	8001662 <HAL_NVIC_EnableIRQ+0x1a>
 800165a:	21be      	movs	r1, #190	; 0xbe
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_NVIC_EnableIRQ+0x2c>)
 800165e:	f7ff fbec 	bl	8000e3a <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff06 	bl	8001478 <__NVIC_EnableIRQ>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	0800be20 	.word	0x0800be20

08001678 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff75 	bl	8001570 <SysTick_Config>
 8001686:	4603      	mov	r3, r0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e10e      	b.n	80018c0 <HAL_DCMI_Init+0x230>
  }

  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a88      	ldr	r2, [pc, #544]	; (80018c8 <HAL_DCMI_Init+0x238>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d003      	beq.n	80016b4 <HAL_DCMI_Init+0x24>
 80016ac:	21b6      	movs	r1, #182	; 0xb6
 80016ae:	4887      	ldr	r0, [pc, #540]	; (80018cc <HAL_DCMI_Init+0x23c>)
 80016b0:	f7ff fbc3 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_DCMI_Init+0x3c>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d003      	beq.n	80016cc <HAL_DCMI_Init+0x3c>
 80016c4:	21b7      	movs	r1, #183	; 0xb7
 80016c6:	4881      	ldr	r0, [pc, #516]	; (80018cc <HAL_DCMI_Init+0x23c>)
 80016c8:	f7ff fbb7 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d007      	beq.n	80016e4 <HAL_DCMI_Init+0x54>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b80      	cmp	r3, #128	; 0x80
 80016da:	d003      	beq.n	80016e4 <HAL_DCMI_Init+0x54>
 80016dc:	21b8      	movs	r1, #184	; 0xb8
 80016de:	487b      	ldr	r0, [pc, #492]	; (80018cc <HAL_DCMI_Init+0x23c>)
 80016e0:	f7ff fbab 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_DCMI_Init+0x6c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b40      	cmp	r3, #64	; 0x40
 80016f2:	d003      	beq.n	80016fc <HAL_DCMI_Init+0x6c>
 80016f4:	21b9      	movs	r1, #185	; 0xb9
 80016f6:	4875      	ldr	r0, [pc, #468]	; (80018cc <HAL_DCMI_Init+0x23c>)
 80016f8:	f7ff fb9f 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <HAL_DCMI_Init+0x84>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b10      	cmp	r3, #16
 800170a:	d003      	beq.n	8001714 <HAL_DCMI_Init+0x84>
 800170c:	21ba      	movs	r1, #186	; 0xba
 800170e:	486f      	ldr	r0, [pc, #444]	; (80018cc <HAL_DCMI_Init+0x23c>)
 8001710:	f7ff fb93 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00d      	beq.n	8001738 <HAL_DCMI_Init+0xa8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001724:	d008      	beq.n	8001738 <HAL_DCMI_Init+0xa8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172e:	d003      	beq.n	8001738 <HAL_DCMI_Init+0xa8>
 8001730:	21bb      	movs	r1, #187	; 0xbb
 8001732:	4866      	ldr	r0, [pc, #408]	; (80018cc <HAL_DCMI_Init+0x23c>)
 8001734:	f7ff fb81 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d012      	beq.n	8001766 <HAL_DCMI_Init+0xd6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001748:	d00d      	beq.n	8001766 <HAL_DCMI_Init+0xd6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001752:	d008      	beq.n	8001766 <HAL_DCMI_Init+0xd6>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800175c:	d003      	beq.n	8001766 <HAL_DCMI_Init+0xd6>
 800175e:	21bc      	movs	r1, #188	; 0xbc
 8001760:	485a      	ldr	r0, [pc, #360]	; (80018cc <HAL_DCMI_Init+0x23c>)
 8001762:	f7ff fb6a 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_DCMI_Init+0xee>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	2b08      	cmp	r3, #8
 8001774:	d003      	beq.n	800177e <HAL_DCMI_Init+0xee>
 8001776:	21bd      	movs	r1, #189	; 0xbd
 8001778:	4854      	ldr	r0, [pc, #336]	; (80018cc <HAL_DCMI_Init+0x23c>)
 800177a:	f7ff fb5e 	bl	8000e3a <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	2b00      	cmp	r3, #0
 8001784:	d012      	beq.n	80017ac <HAL_DCMI_Init+0x11c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178e:	d00d      	beq.n	80017ac <HAL_DCMI_Init+0x11c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001798:	d008      	beq.n	80017ac <HAL_DCMI_Init+0x11c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80017a2:	d003      	beq.n	80017ac <HAL_DCMI_Init+0x11c>
 80017a4:	21bf      	movs	r1, #191	; 0xbf
 80017a6:	4849      	ldr	r0, [pc, #292]	; (80018cc <HAL_DCMI_Init+0x23c>)
 80017a8:	f7ff fb47 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_DCMI_Init+0x136>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017bc:	d003      	beq.n	80017c6 <HAL_DCMI_Init+0x136>
 80017be:	21c0      	movs	r1, #192	; 0xc0
 80017c0:	4842      	ldr	r0, [pc, #264]	; (80018cc <HAL_DCMI_Init+0x23c>)
 80017c2:	f7ff fb3a 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d008      	beq.n	80017e0 <HAL_DCMI_Init+0x150>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017d6:	d003      	beq.n	80017e0 <HAL_DCMI_Init+0x150>
 80017d8:	21c1      	movs	r1, #193	; 0xc1
 80017da:	483c      	ldr	r0, [pc, #240]	; (80018cc <HAL_DCMI_Init+0x23c>)
 80017dc:	f7ff fb2d 	bl	8000e3a <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_DCMI_Init+0x16a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017f0:	d003      	beq.n	80017fa <HAL_DCMI_Init+0x16a>
 80017f2:	21c2      	movs	r1, #194	; 0xc2
 80017f4:	4835      	ldr	r0, [pc, #212]	; (80018cc <HAL_DCMI_Init+0x23c>)
 80017f6:	f7ff fb20 	bl	8000e3a <assert_failed>
    /* Init the low level hardware */
    hdcmi->MspInitCallback(hdcmi);
  }

#else
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_DCMI_Init+0x17c>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7fe ff1c 	bl	8000644 <HAL_DCMI_MspInit>
  }
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_DCMI_Init+0x240>)
 8001820:	400b      	ands	r3, r1
 8001822:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001838:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001844:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001850:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800185c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001868:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b10      	cmp	r3, #16
 8001878:	d112      	bne.n	80018a0 <HAL_DCMI_Init+0x210>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7f1b      	ldrb	r3, [r3, #28]
 800187e:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7f5b      	ldrb	r3, [r3, #29]
 8001884:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001886:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7f9b      	ldrb	r3, [r3, #30]
 800188c:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800188e:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7fdb      	ldrb	r3, [r3, #31]
 8001896:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800189c:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800189e:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 021e 	orr.w	r2, r2, #30
 80018ae:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	48020000 	.word	0x48020000
 80018cc:	0800be5c 	.word	0x0800be5c
 80018d0:	ffe0f007 	.word	0xffe0f007

080018d4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d016      	beq.n	800191c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2204      	movs	r2, #4
 80018f4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f043 0202 	orr.w	r2, r3, #2
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2204      	movs	r2, #4
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190e:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <HAL_DCMI_IRQHandler+0x100>)
 8001910:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fc8e 	bl	8002238 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d016      	beq.n	8001954 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2202      	movs	r2, #2
 800192c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2204      	movs	r2, #4
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <HAL_DCMI_IRQHandler+0x100>)
 8001948:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fc72 	bl	8002238 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2210      	movs	r2, #16
 8001964:	615a      	str	r2, [r3, #20]

    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f840 	bl	80019ec <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2208      	movs	r2, #8
 800197c:	615a      	str	r2, [r3, #20]

    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f83e 	bl	8001a00 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d01d      	beq.n	80019ca <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b02      	cmp	r3, #2
 800199a:	d107      	bne.n	80019ac <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 021e 	bic.w	r2, r2, #30
 80019aa:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2201      	movs	r2, #1
 80019c2:	615a      	str	r2, [r3, #20]

    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f825 	bl	8001a14 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08001a29 	.word	0x08001a29

080019d8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	60fb      	str	r3, [r7, #12]

  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d009      	beq.n	8001a54 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f7ff ffbf 	bl	80019d8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fc98 	bl	80013a0 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e3d8      	b.n	800222e <HAL_DMA_Init+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a96      	ldr	r2, [pc, #600]	; (8001cdc <HAL_DMA_Init+0x278>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d076      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a95      	ldr	r2, [pc, #596]	; (8001ce0 <HAL_DMA_Init+0x27c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d071      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a93      	ldr	r2, [pc, #588]	; (8001ce4 <HAL_DMA_Init+0x280>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d06c      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a92      	ldr	r2, [pc, #584]	; (8001ce8 <HAL_DMA_Init+0x284>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d067      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a90      	ldr	r2, [pc, #576]	; (8001cec <HAL_DMA_Init+0x288>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d062      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a8f      	ldr	r2, [pc, #572]	; (8001cf0 <HAL_DMA_Init+0x28c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d05d      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a8d      	ldr	r2, [pc, #564]	; (8001cf4 <HAL_DMA_Init+0x290>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d058      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a8c      	ldr	r2, [pc, #560]	; (8001cf8 <HAL_DMA_Init+0x294>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d053      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a8a      	ldr	r2, [pc, #552]	; (8001cfc <HAL_DMA_Init+0x298>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d04e      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a89      	ldr	r2, [pc, #548]	; (8001d00 <HAL_DMA_Init+0x29c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d049      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a87      	ldr	r2, [pc, #540]	; (8001d04 <HAL_DMA_Init+0x2a0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d044      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a86      	ldr	r2, [pc, #536]	; (8001d08 <HAL_DMA_Init+0x2a4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d03f      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a84      	ldr	r2, [pc, #528]	; (8001d0c <HAL_DMA_Init+0x2a8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d03a      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a83      	ldr	r2, [pc, #524]	; (8001d10 <HAL_DMA_Init+0x2ac>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d035      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a81      	ldr	r2, [pc, #516]	; (8001d14 <HAL_DMA_Init+0x2b0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d030      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a80      	ldr	r2, [pc, #512]	; (8001d18 <HAL_DMA_Init+0x2b4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d02b      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a7e      	ldr	r2, [pc, #504]	; (8001d1c <HAL_DMA_Init+0x2b8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d026      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a7d      	ldr	r2, [pc, #500]	; (8001d20 <HAL_DMA_Init+0x2bc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d021      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a7b      	ldr	r2, [pc, #492]	; (8001d24 <HAL_DMA_Init+0x2c0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01c      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7a      	ldr	r2, [pc, #488]	; (8001d28 <HAL_DMA_Init+0x2c4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d017      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a78      	ldr	r2, [pc, #480]	; (8001d2c <HAL_DMA_Init+0x2c8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d012      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a77      	ldr	r2, [pc, #476]	; (8001d30 <HAL_DMA_Init+0x2cc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00d      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_DMA_Init+0x2d0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d008      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a74      	ldr	r2, [pc, #464]	; (8001d38 <HAL_DMA_Init+0x2d4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_Init+0x110>
 8001b6c:	21d4      	movs	r1, #212	; 0xd4
 8001b6e:	4873      	ldr	r0, [pc, #460]	; (8001d3c <HAL_DMA_Init+0x2d8>)
 8001b70:	f7ff f963 	bl	8000e3a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <HAL_DMA_Init+0x130>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d007      	beq.n	8001b94 <HAL_DMA_Init+0x130>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b80      	cmp	r3, #128	; 0x80
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_Init+0x130>
 8001b8c:	21d5      	movs	r1, #213	; 0xd5
 8001b8e:	486b      	ldr	r0, [pc, #428]	; (8001d3c <HAL_DMA_Init+0x2d8>)
 8001b90:	f7ff f953 	bl	8000e3a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9c:	d007      	beq.n	8001bae <HAL_DMA_Init+0x14a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_DMA_Init+0x14a>
 8001ba6:	21d6      	movs	r1, #214	; 0xd6
 8001ba8:	4864      	ldr	r0, [pc, #400]	; (8001d3c <HAL_DMA_Init+0x2d8>)
 8001baa:	f7ff f946 	bl	8000e3a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d007      	beq.n	8001bc8 <HAL_DMA_Init+0x164>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_DMA_Init+0x164>
 8001bc0:	21d7      	movs	r1, #215	; 0xd7
 8001bc2:	485e      	ldr	r0, [pc, #376]	; (8001d3c <HAL_DMA_Init+0x2d8>)
 8001bc4:	f7ff f939 	bl	8000e3a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <HAL_DMA_Init+0x188>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd8:	d008      	beq.n	8001bec <HAL_DMA_Init+0x188>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_Init+0x188>
 8001be4:	21d8      	movs	r1, #216	; 0xd8
 8001be6:	4855      	ldr	r0, [pc, #340]	; (8001d3c <HAL_DMA_Init+0x2d8>)
 8001be8:	f7ff f927 	bl	8000e3a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <HAL_DMA_Init+0x1ac>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfc:	d008      	beq.n	8001c10 <HAL_DMA_Init+0x1ac>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c06:	d003      	beq.n	8001c10 <HAL_DMA_Init+0x1ac>
 8001c08:	21d9      	movs	r1, #217	; 0xd9
 8001c0a:	484c      	ldr	r0, [pc, #304]	; (8001d3c <HAL_DMA_Init+0x2d8>)
 8001c0c:	f7ff f915 	bl	8000e3a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d016      	beq.n	8001c46 <HAL_DMA_Init+0x1e2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c20:	d011      	beq.n	8001c46 <HAL_DMA_Init+0x1e2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	d00d      	beq.n	8001c46 <HAL_DMA_Init+0x1e2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c32:	d008      	beq.n	8001c46 <HAL_DMA_Init+0x1e2>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001c3c:	d003      	beq.n	8001c46 <HAL_DMA_Init+0x1e2>
 8001c3e:	21da      	movs	r1, #218	; 0xda
 8001c40:	483e      	ldr	r0, [pc, #248]	; (8001d3c <HAL_DMA_Init+0x2d8>)
 8001c42:	f7ff f8fa 	bl	8000e3a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d012      	beq.n	8001c74 <HAL_DMA_Init+0x210>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c56:	d00d      	beq.n	8001c74 <HAL_DMA_Init+0x210>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c60:	d008      	beq.n	8001c74 <HAL_DMA_Init+0x210>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c6a:	d003      	beq.n	8001c74 <HAL_DMA_Init+0x210>
 8001c6c:	21db      	movs	r1, #219	; 0xdb
 8001c6e:	4833      	ldr	r0, [pc, #204]	; (8001d3c <HAL_DMA_Init+0x2d8>)
 8001c70:	f7ff f8e3 	bl	8000e3a <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_DMA_Init+0x278>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d07e      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_DMA_Init+0x27c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d079      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <HAL_DMA_Init+0x280>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d074      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_DMA_Init+0x284>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d06f      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_DMA_Init+0x288>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d06a      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <HAL_DMA_Init+0x28c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d065      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_DMA_Init+0x290>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d060      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_DMA_Init+0x294>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d05b      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <HAL_DMA_Init+0x298>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d056      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_DMA_Init+0x29c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d051      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001cd8:	e032      	b.n	8001d40 <HAL_DMA_Init+0x2dc>
 8001cda:	bf00      	nop
 8001cdc:	40020010 	.word	0x40020010
 8001ce0:	40020028 	.word	0x40020028
 8001ce4:	40020040 	.word	0x40020040
 8001ce8:	40020058 	.word	0x40020058
 8001cec:	40020070 	.word	0x40020070
 8001cf0:	40020088 	.word	0x40020088
 8001cf4:	400200a0 	.word	0x400200a0
 8001cf8:	400200b8 	.word	0x400200b8
 8001cfc:	40020410 	.word	0x40020410
 8001d00:	40020428 	.word	0x40020428
 8001d04:	40020440 	.word	0x40020440
 8001d08:	40020458 	.word	0x40020458
 8001d0c:	40020470 	.word	0x40020470
 8001d10:	40020488 	.word	0x40020488
 8001d14:	400204a0 	.word	0x400204a0
 8001d18:	400204b8 	.word	0x400204b8
 8001d1c:	58025408 	.word	0x58025408
 8001d20:	5802541c 	.word	0x5802541c
 8001d24:	58025430 	.word	0x58025430
 8001d28:	58025444 	.word	0x58025444
 8001d2c:	58025458 	.word	0x58025458
 8001d30:	5802546c 	.word	0x5802546c
 8001d34:	58025480 	.word	0x58025480
 8001d38:	58025494 	.word	0x58025494
 8001d3c:	0800be98 	.word	0x0800be98
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a7a      	ldr	r2, [pc, #488]	; (8001f30 <HAL_DMA_Init+0x4cc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d018      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a79      	ldr	r2, [pc, #484]	; (8001f34 <HAL_DMA_Init+0x4d0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a77      	ldr	r2, [pc, #476]	; (8001f38 <HAL_DMA_Init+0x4d4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00e      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a76      	ldr	r2, [pc, #472]	; (8001f3c <HAL_DMA_Init+0x4d8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d009      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a74      	ldr	r2, [pc, #464]	; (8001f40 <HAL_DMA_Init+0x4dc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d004      	beq.n	8001d7c <HAL_DMA_Init+0x318>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a73      	ldr	r2, [pc, #460]	; (8001f44 <HAL_DMA_Init+0x4e0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_DMA_Init+0x31c>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_DMA_Init+0x31e>
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8167 	beq.w	8002056 <HAL_DMA_Init+0x5f2>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b73      	cmp	r3, #115	; 0x73
 8001d8e:	d903      	bls.n	8001d98 <HAL_DMA_Init+0x334>
 8001d90:	21df      	movs	r1, #223	; 0xdf
 8001d92:	486d      	ldr	r0, [pc, #436]	; (8001f48 <HAL_DMA_Init+0x4e4>)
 8001d94:	f7ff f851 	bl	8000e3a <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_DMA_Init+0x34c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d003      	beq.n	8001db0 <HAL_DMA_Init+0x34c>
 8001da8:	21e0      	movs	r1, #224	; 0xe0
 8001daa:	4867      	ldr	r0, [pc, #412]	; (8001f48 <HAL_DMA_Init+0x4e4>)
 8001dac:	f7ff f845 	bl	8000e3a <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d041      	beq.n	8001e3c <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00f      	beq.n	8001de0 <HAL_DMA_Init+0x37c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d00b      	beq.n	8001de0 <HAL_DMA_Init+0x37c>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d007      	beq.n	8001de0 <HAL_DMA_Init+0x37c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d003      	beq.n	8001de0 <HAL_DMA_Init+0x37c>
 8001dd8:	21e5      	movs	r1, #229	; 0xe5
 8001dda:	485b      	ldr	r0, [pc, #364]	; (8001f48 <HAL_DMA_Init+0x4e4>)
 8001ddc:	f7ff f82d 	bl	8000e3a <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d012      	beq.n	8001e0e <HAL_DMA_Init+0x3aa>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001df0:	d00d      	beq.n	8001e0e <HAL_DMA_Init+0x3aa>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfa:	d008      	beq.n	8001e0e <HAL_DMA_Init+0x3aa>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e04:	d003      	beq.n	8001e0e <HAL_DMA_Init+0x3aa>
 8001e06:	21e6      	movs	r1, #230	; 0xe6
 8001e08:	484f      	ldr	r0, [pc, #316]	; (8001f48 <HAL_DMA_Init+0x4e4>)
 8001e0a:	f7ff f816 	bl	8000e3a <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <HAL_DMA_Init+0x3d8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e1e:	d00d      	beq.n	8001e3c <HAL_DMA_Init+0x3d8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e28:	d008      	beq.n	8001e3c <HAL_DMA_Init+0x3d8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001e32:	d003      	beq.n	8001e3c <HAL_DMA_Init+0x3d8>
 8001e34:	21e7      	movs	r1, #231	; 0xe7
 8001e36:	4844      	ldr	r0, [pc, #272]	; (8001f48 <HAL_DMA_Init+0x4e4>)
 8001e38:	f7fe ffff 	bl	8000e3a <assert_failed>
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a3e      	ldr	r2, [pc, #248]	; (8001f4c <HAL_DMA_Init+0x4e8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d04a      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a3d      	ldr	r2, [pc, #244]	; (8001f50 <HAL_DMA_Init+0x4ec>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d045      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a3b      	ldr	r2, [pc, #236]	; (8001f54 <HAL_DMA_Init+0x4f0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d040      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <HAL_DMA_Init+0x4f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d03b      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_DMA_Init+0x4f8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d036      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a37      	ldr	r2, [pc, #220]	; (8001f60 <HAL_DMA_Init+0x4fc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d031      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a35      	ldr	r2, [pc, #212]	; (8001f64 <HAL_DMA_Init+0x500>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d02c      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <HAL_DMA_Init+0x504>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d027      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <HAL_DMA_Init+0x508>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d022      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <HAL_DMA_Init+0x50c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d01d      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_DMA_Init+0x4cc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d018      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_DMA_Init+0x4d0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d013      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_DMA_Init+0x4d4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00e      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_DMA_Init+0x4d8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <HAL_DMA_Init+0x4dc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_DMA_Init+0x488>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <HAL_DMA_Init+0x4e0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d108      	bne.n	8001efe <HAL_DMA_Init+0x49a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_DMA_Init+0x4aa>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f0e:	e031      	b.n	8001f74 <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f10:	f7ff fa46 	bl	80013a0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d92a      	bls.n	8001f74 <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2203      	movs	r2, #3
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e17e      	b.n	800222e <HAL_DMA_Init+0x7ca>
 8001f30:	40020440 	.word	0x40020440
 8001f34:	40020458 	.word	0x40020458
 8001f38:	40020470 	.word	0x40020470
 8001f3c:	40020488 	.word	0x40020488
 8001f40:	400204a0 	.word	0x400204a0
 8001f44:	400204b8 	.word	0x400204b8
 8001f48:	0800be98 	.word	0x0800be98
 8001f4c:	40020010 	.word	0x40020010
 8001f50:	40020028 	.word	0x40020028
 8001f54:	40020040 	.word	0x40020040
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	40020070 	.word	0x40020070
 8001f60:	40020088 	.word	0x40020088
 8001f64:	400200a0 	.word	0x400200a0
 8001f68:	400200b8 	.word	0x400200b8
 8001f6c:	40020410 	.word	0x40020410
 8001f70:	40020428 	.word	0x40020428
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1c6      	bne.n	8001f10 <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_DMA_Init+0x774>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d117      	bne.n	8002032 <HAL_DMA_Init+0x5ce>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Init+0x5ce>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f001 fa81 	bl	800351c <DMA_CheckFifoParam>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Init+0x5ce>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0fd      	b.n	800222e <HAL_DMA_Init+0x7ca>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f001 f9bc 	bl	80033b8 <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	223f      	movs	r2, #63	; 0x3f
 800204e:	409a      	lsls	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	e095      	b.n	8002182 <HAL_DMA_Init+0x71e>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_DMA_Init+0x778>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <HAL_DMA_Init+0x642>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5e      	ldr	r2, [pc, #376]	; (80021e0 <HAL_DMA_Init+0x77c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01d      	beq.n	80020a6 <HAL_DMA_Init+0x642>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a5d      	ldr	r2, [pc, #372]	; (80021e4 <HAL_DMA_Init+0x780>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d018      	beq.n	80020a6 <HAL_DMA_Init+0x642>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a5b      	ldr	r2, [pc, #364]	; (80021e8 <HAL_DMA_Init+0x784>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_DMA_Init+0x642>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a5a      	ldr	r2, [pc, #360]	; (80021ec <HAL_DMA_Init+0x788>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00e      	beq.n	80020a6 <HAL_DMA_Init+0x642>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_DMA_Init+0x78c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_DMA_Init+0x642>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a57      	ldr	r2, [pc, #348]	; (80021f4 <HAL_DMA_Init+0x790>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_DMA_Init+0x642>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a55      	ldr	r2, [pc, #340]	; (80021f8 <HAL_DMA_Init+0x794>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_DMA_Init+0x646>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_DMA_Init+0x648>
 80020aa:	2300      	movs	r3, #0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d05f      	beq.n	8002170 <HAL_DMA_Init+0x70c>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b11      	cmp	r3, #17
 80020b6:	d904      	bls.n	80020c2 <HAL_DMA_Init+0x65e>
 80020b8:	f240 1149 	movw	r1, #329	; 0x149
 80020bc:	484f      	ldr	r0, [pc, #316]	; (80021fc <HAL_DMA_Init+0x798>)
 80020be:	f7fe febc 	bl	8000e3a <assert_failed>

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4b48      	ldr	r3, [pc, #288]	; (8002200 <HAL_DMA_Init+0x79c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b40      	cmp	r3, #64	; 0x40
 80020e8:	d008      	beq.n	80020fc <HAL_DMA_Init+0x698>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d102      	bne.n	80020f8 <HAL_DMA_Init+0x694>
 80020f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020f6:	e002      	b.n	80020fe <HAL_DMA_Init+0x69a>
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_DMA_Init+0x69a>
 80020fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68d2      	ldr	r2, [r2, #12]
 8002102:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 800210c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 800211c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 800212c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_DMA_Init+0x7a0>)
 8002144:	4413      	add	r3, r2
 8002146:	4a30      	ldr	r2, [pc, #192]	; (8002208 <HAL_DMA_Init+0x7a4>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f001 f92f 	bl	80033b8 <DMA_CalcBaseAndBitshift>
 800215a:	4603      	mov	r3, r0
 800215c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2201      	movs	r2, #1
 8002168:	409a      	lsls	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	e008      	b.n	8002182 <HAL_DMA_Init+0x71e>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2240      	movs	r2, #64	; 0x40
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2203      	movs	r2, #3
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e055      	b.n	800222e <HAL_DMA_Init+0x7ca>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f001 fa46 	bl	8003614 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b80      	cmp	r3, #128	; 0x80
 800218e:	d102      	bne.n	8002196 <HAL_DMA_Init+0x732>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021aa:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02b      	beq.n	800220c <HAL_DMA_Init+0x7a8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d827      	bhi.n	800220c <HAL_DMA_Init+0x7a8>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f001 fac3 	bl	8003748 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	e023      	b.n	800221e <HAL_DMA_Init+0x7ba>
 80021d6:	bf00      	nop
 80021d8:	fe10803f 	.word	0xfe10803f
 80021dc:	58025408 	.word	0x58025408
 80021e0:	5802541c 	.word	0x5802541c
 80021e4:	58025430 	.word	0x58025430
 80021e8:	58025444 	.word	0x58025444
 80021ec:	58025458 	.word	0x58025458
 80021f0:	5802546c 	.word	0x5802546c
 80021f4:	58025480 	.word	0x58025480
 80021f8:	58025494 	.word	0x58025494
 80021fc:	0800be98 	.word	0x0800be98
 8002200:	fffe000f 	.word	0xfffe000f
 8002204:	a7fdabf8 	.word	0xa7fdabf8
 8002208:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e188      	b.n	800255c <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d004      	beq.n	8002260 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e17d      	b.n	800255c <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a8c      	ldr	r2, [pc, #560]	; (8002498 <HAL_DMA_Abort_IT+0x260>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d04a      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a8b      	ldr	r2, [pc, #556]	; (800249c <HAL_DMA_Abort_IT+0x264>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d045      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a89      	ldr	r2, [pc, #548]	; (80024a0 <HAL_DMA_Abort_IT+0x268>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d040      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a88      	ldr	r2, [pc, #544]	; (80024a4 <HAL_DMA_Abort_IT+0x26c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d03b      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a86      	ldr	r2, [pc, #536]	; (80024a8 <HAL_DMA_Abort_IT+0x270>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d036      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a85      	ldr	r2, [pc, #532]	; (80024ac <HAL_DMA_Abort_IT+0x274>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d031      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a83      	ldr	r2, [pc, #524]	; (80024b0 <HAL_DMA_Abort_IT+0x278>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02c      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a82      	ldr	r2, [pc, #520]	; (80024b4 <HAL_DMA_Abort_IT+0x27c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d027      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a80      	ldr	r2, [pc, #512]	; (80024b8 <HAL_DMA_Abort_IT+0x280>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d022      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <HAL_DMA_Abort_IT+0x284>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d01d      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a7d      	ldr	r2, [pc, #500]	; (80024c0 <HAL_DMA_Abort_IT+0x288>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d018      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7c      	ldr	r2, [pc, #496]	; (80024c4 <HAL_DMA_Abort_IT+0x28c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a7a      	ldr	r2, [pc, #488]	; (80024c8 <HAL_DMA_Abort_IT+0x290>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00e      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a79      	ldr	r2, [pc, #484]	; (80024cc <HAL_DMA_Abort_IT+0x294>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d009      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a77      	ldr	r2, [pc, #476]	; (80024d0 <HAL_DMA_Abort_IT+0x298>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a76      	ldr	r2, [pc, #472]	; (80024d4 <HAL_DMA_Abort_IT+0x29c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Abort_IT+0xcc>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_DMA_Abort_IT+0xce>
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d065      	beq.n	80023d6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2204      	movs	r2, #4
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a60      	ldr	r2, [pc, #384]	; (8002498 <HAL_DMA_Abort_IT+0x260>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d04a      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a5e      	ldr	r2, [pc, #376]	; (800249c <HAL_DMA_Abort_IT+0x264>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d045      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a5d      	ldr	r2, [pc, #372]	; (80024a0 <HAL_DMA_Abort_IT+0x268>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d040      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a5b      	ldr	r2, [pc, #364]	; (80024a4 <HAL_DMA_Abort_IT+0x26c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d03b      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_DMA_Abort_IT+0x270>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d036      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_DMA_Abort_IT+0x274>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d031      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a57      	ldr	r2, [pc, #348]	; (80024b0 <HAL_DMA_Abort_IT+0x278>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d02c      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a55      	ldr	r2, [pc, #340]	; (80024b4 <HAL_DMA_Abort_IT+0x27c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d027      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a54      	ldr	r2, [pc, #336]	; (80024b8 <HAL_DMA_Abort_IT+0x280>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_DMA_Abort_IT+0x284>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01d      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <HAL_DMA_Abort_IT+0x288>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d018      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a4f      	ldr	r2, [pc, #316]	; (80024c4 <HAL_DMA_Abort_IT+0x28c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a4e      	ldr	r2, [pc, #312]	; (80024c8 <HAL_DMA_Abort_IT+0x290>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_DMA_Abort_IT+0x294>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <HAL_DMA_Abort_IT+0x298>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x17a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a49      	ldr	r2, [pc, #292]	; (80024d4 <HAL_DMA_Abort_IT+0x29c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d108      	bne.n	80023c4 <HAL_DMA_Abort_IT+0x18c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e0ca      	b.n	800255a <HAL_DMA_Abort_IT+0x322>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e0c1      	b.n	800255a <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 020e 	bic.w	r2, r2, #14
 80023e4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <HAL_DMA_Abort_IT+0x260>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d04a      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_DMA_Abort_IT+0x264>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d045      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <HAL_DMA_Abort_IT+0x268>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d040      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_DMA_Abort_IT+0x26c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d03b      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <HAL_DMA_Abort_IT+0x270>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d036      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a23      	ldr	r2, [pc, #140]	; (80024ac <HAL_DMA_Abort_IT+0x274>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d031      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_DMA_Abort_IT+0x278>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d02c      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <HAL_DMA_Abort_IT+0x27c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d027      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_DMA_Abort_IT+0x280>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d022      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <HAL_DMA_Abort_IT+0x284>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01d      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <HAL_DMA_Abort_IT+0x288>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d018      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_DMA_Abort_IT+0x28c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_DMA_Abort_IT+0x290>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00e      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_DMA_Abort_IT+0x294>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d009      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_DMA_Abort_IT+0x298>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_DMA_Abort_IT+0x24e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <HAL_DMA_Abort_IT+0x29c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d128      	bne.n	80024d8 <HAL_DMA_Abort_IT+0x2a0>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e027      	b.n	80024e8 <HAL_DMA_Abort_IT+0x2b0>
 8002498:	40020010 	.word	0x40020010
 800249c:	40020028 	.word	0x40020028
 80024a0:	40020040 	.word	0x40020040
 80024a4:	40020058 	.word	0x40020058
 80024a8:	40020070 	.word	0x40020070
 80024ac:	40020088 	.word	0x40020088
 80024b0:	400200a0 	.word	0x400200a0
 80024b4:	400200b8 	.word	0x400200b8
 80024b8:	40020410 	.word	0x40020410
 80024bc:	40020428 	.word	0x40020428
 80024c0:	40020440 	.word	0x40020440
 80024c4:	40020458 	.word	0x40020458
 80024c8:	40020470 	.word	0x40020470
 80024cc:	40020488 	.word	0x40020488
 80024d0:	400204a0 	.word	0x400204a0
 80024d4:	400204b8 	.word	0x400204b8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002516:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00c      	beq.n	800253a <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800252e:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002538:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002570:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_DMA_IRQHandler+0x1ac>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a67      	ldr	r2, [pc, #412]	; (8002714 <HAL_DMA_IRQHandler+0x1b0>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5f      	ldr	r2, [pc, #380]	; (8002718 <HAL_DMA_IRQHandler+0x1b4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04a      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a5d      	ldr	r2, [pc, #372]	; (800271c <HAL_DMA_IRQHandler+0x1b8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d045      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5c      	ldr	r2, [pc, #368]	; (8002720 <HAL_DMA_IRQHandler+0x1bc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d040      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a5a      	ldr	r2, [pc, #360]	; (8002724 <HAL_DMA_IRQHandler+0x1c0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d03b      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a59      	ldr	r2, [pc, #356]	; (8002728 <HAL_DMA_IRQHandler+0x1c4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_DMA_IRQHandler+0x1c8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d031      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a56      	ldr	r2, [pc, #344]	; (8002730 <HAL_DMA_IRQHandler+0x1cc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02c      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a54      	ldr	r2, [pc, #336]	; (8002734 <HAL_DMA_IRQHandler+0x1d0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a53      	ldr	r2, [pc, #332]	; (8002738 <HAL_DMA_IRQHandler+0x1d4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a51      	ldr	r2, [pc, #324]	; (800273c <HAL_DMA_IRQHandler+0x1d8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a50      	ldr	r2, [pc, #320]	; (8002740 <HAL_DMA_IRQHandler+0x1dc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d018      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <HAL_DMA_IRQHandler+0x1e0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <HAL_DMA_IRQHandler+0x1e4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a4b      	ldr	r2, [pc, #300]	; (800274c <HAL_DMA_IRQHandler+0x1e8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a4a      	ldr	r2, [pc, #296]	; (8002750 <HAL_DMA_IRQHandler+0x1ec>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_IRQHandler+0xd2>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a48      	ldr	r2, [pc, #288]	; (8002754 <HAL_DMA_IRQHandler+0x1f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_DMA_IRQHandler+0xd6>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_DMA_IRQHandler+0xd8>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 842b 	beq.w	8002e98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2208      	movs	r2, #8
 800264c:	409a      	lsls	r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80a2 	beq.w	800279c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <HAL_DMA_IRQHandler+0x1b4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d04a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a2d      	ldr	r2, [pc, #180]	; (800271c <HAL_DMA_IRQHandler+0x1b8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d045      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <HAL_DMA_IRQHandler+0x1bc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d040      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <HAL_DMA_IRQHandler+0x1c0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d03b      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a28      	ldr	r2, [pc, #160]	; (8002728 <HAL_DMA_IRQHandler+0x1c4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d036      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a27      	ldr	r2, [pc, #156]	; (800272c <HAL_DMA_IRQHandler+0x1c8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d031      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a25      	ldr	r2, [pc, #148]	; (8002730 <HAL_DMA_IRQHandler+0x1cc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02c      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a24      	ldr	r2, [pc, #144]	; (8002734 <HAL_DMA_IRQHandler+0x1d0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d027      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_DMA_IRQHandler+0x1d4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a21      	ldr	r2, [pc, #132]	; (800273c <HAL_DMA_IRQHandler+0x1d8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01d      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_DMA_IRQHandler+0x1dc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <HAL_DMA_IRQHandler+0x1e0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_DMA_IRQHandler+0x1e4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_DMA_IRQHandler+0x1e8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_DMA_IRQHandler+0x1ec>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x194>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_DMA_IRQHandler+0x1f0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d12f      	bne.n	8002758 <HAL_DMA_IRQHandler+0x1f4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	e02e      	b.n	800276c <HAL_DMA_IRQHandler+0x208>
 800270e:	bf00      	nop
 8002710:	24000000 	.word	0x24000000
 8002714:	1b4e81b5 	.word	0x1b4e81b5
 8002718:	40020010 	.word	0x40020010
 800271c:	40020028 	.word	0x40020028
 8002720:	40020040 	.word	0x40020040
 8002724:	40020058 	.word	0x40020058
 8002728:	40020070 	.word	0x40020070
 800272c:	40020088 	.word	0x40020088
 8002730:	400200a0 	.word	0x400200a0
 8002734:	400200b8 	.word	0x400200b8
 8002738:	40020410 	.word	0x40020410
 800273c:	40020428 	.word	0x40020428
 8002740:	40020440 	.word	0x40020440
 8002744:	40020458 	.word	0x40020458
 8002748:	40020470 	.word	0x40020470
 800274c:	40020488 	.word	0x40020488
 8002750:	400204a0 	.word	0x400204a0
 8002754:	400204b8 	.word	0x400204b8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d015      	beq.n	800279c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	2208      	movs	r2, #8
 800278a:	409a      	lsls	r2, r3
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d06e      	beq.n	8002890 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a69      	ldr	r2, [pc, #420]	; (800295c <HAL_DMA_IRQHandler+0x3f8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04a      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a67      	ldr	r2, [pc, #412]	; (8002960 <HAL_DMA_IRQHandler+0x3fc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d045      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a66      	ldr	r2, [pc, #408]	; (8002964 <HAL_DMA_IRQHandler+0x400>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d040      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a64      	ldr	r2, [pc, #400]	; (8002968 <HAL_DMA_IRQHandler+0x404>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d03b      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a63      	ldr	r2, [pc, #396]	; (800296c <HAL_DMA_IRQHandler+0x408>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d036      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a61      	ldr	r2, [pc, #388]	; (8002970 <HAL_DMA_IRQHandler+0x40c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a60      	ldr	r2, [pc, #384]	; (8002974 <HAL_DMA_IRQHandler+0x410>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d02c      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5e      	ldr	r2, [pc, #376]	; (8002978 <HAL_DMA_IRQHandler+0x414>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d027      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a5d      	ldr	r2, [pc, #372]	; (800297c <HAL_DMA_IRQHandler+0x418>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a5b      	ldr	r2, [pc, #364]	; (8002980 <HAL_DMA_IRQHandler+0x41c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01d      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5a      	ldr	r2, [pc, #360]	; (8002984 <HAL_DMA_IRQHandler+0x420>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d018      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_DMA_IRQHandler+0x424>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a57      	ldr	r2, [pc, #348]	; (800298c <HAL_DMA_IRQHandler+0x428>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a55      	ldr	r2, [pc, #340]	; (8002990 <HAL_DMA_IRQHandler+0x42c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a54      	ldr	r2, [pc, #336]	; (8002994 <HAL_DMA_IRQHandler+0x430>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2ee>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_DMA_IRQHandler+0x434>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10a      	bne.n	8002868 <HAL_DMA_IRQHandler+0x304>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e003      	b.n	8002870 <HAL_DMA_IRQHandler+0x30c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00d      	beq.n	8002890 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2201      	movs	r2, #1
 800287e:	409a      	lsls	r2, r3
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0202 	orr.w	r2, r3, #2
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2204      	movs	r2, #4
 800289a:	409a      	lsls	r2, r3
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 808f 	beq.w	80029c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2c      	ldr	r2, [pc, #176]	; (800295c <HAL_DMA_IRQHandler+0x3f8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d04a      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <HAL_DMA_IRQHandler+0x3fc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d045      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a29      	ldr	r2, [pc, #164]	; (8002964 <HAL_DMA_IRQHandler+0x400>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d040      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a27      	ldr	r2, [pc, #156]	; (8002968 <HAL_DMA_IRQHandler+0x404>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d03b      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a26      	ldr	r2, [pc, #152]	; (800296c <HAL_DMA_IRQHandler+0x408>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d036      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a24      	ldr	r2, [pc, #144]	; (8002970 <HAL_DMA_IRQHandler+0x40c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d031      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a23      	ldr	r2, [pc, #140]	; (8002974 <HAL_DMA_IRQHandler+0x410>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d02c      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a21      	ldr	r2, [pc, #132]	; (8002978 <HAL_DMA_IRQHandler+0x414>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d027      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a20      	ldr	r2, [pc, #128]	; (800297c <HAL_DMA_IRQHandler+0x418>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_DMA_IRQHandler+0x41c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01d      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_DMA_IRQHandler+0x420>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d018      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_DMA_IRQHandler+0x424>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <HAL_DMA_IRQHandler+0x428>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_DMA_IRQHandler+0x42c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d009      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_DMA_IRQHandler+0x430>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d004      	beq.n	8002946 <HAL_DMA_IRQHandler+0x3e2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <HAL_DMA_IRQHandler+0x434>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d12a      	bne.n	800299c <HAL_DMA_IRQHandler+0x438>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e023      	b.n	80029a4 <HAL_DMA_IRQHandler+0x440>
 800295c:	40020010 	.word	0x40020010
 8002960:	40020028 	.word	0x40020028
 8002964:	40020040 	.word	0x40020040
 8002968:	40020058 	.word	0x40020058
 800296c:	40020070 	.word	0x40020070
 8002970:	40020088 	.word	0x40020088
 8002974:	400200a0 	.word	0x400200a0
 8002978:	400200b8 	.word	0x400200b8
 800297c:	40020410 	.word	0x40020410
 8002980:	40020428 	.word	0x40020428
 8002984:	40020440 	.word	0x40020440
 8002988:	40020458 	.word	0x40020458
 800298c:	40020470 	.word	0x40020470
 8002990:	40020488 	.word	0x40020488
 8002994:	400204a0 	.word	0x400204a0
 8002998:	400204b8 	.word	0x400204b8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2204      	movs	r2, #4
 80029b2:	409a      	lsls	r2, r3
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	2210      	movs	r2, #16
 80029ce:	409a      	lsls	r2, r3
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a6 	beq.w	8002b26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a85      	ldr	r2, [pc, #532]	; (8002bf4 <HAL_DMA_IRQHandler+0x690>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d04a      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a83      	ldr	r2, [pc, #524]	; (8002bf8 <HAL_DMA_IRQHandler+0x694>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d045      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a82      	ldr	r2, [pc, #520]	; (8002bfc <HAL_DMA_IRQHandler+0x698>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d040      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a80      	ldr	r2, [pc, #512]	; (8002c00 <HAL_DMA_IRQHandler+0x69c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d03b      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7f      	ldr	r2, [pc, #508]	; (8002c04 <HAL_DMA_IRQHandler+0x6a0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d036      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a7d      	ldr	r2, [pc, #500]	; (8002c08 <HAL_DMA_IRQHandler+0x6a4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d031      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7c      	ldr	r2, [pc, #496]	; (8002c0c <HAL_DMA_IRQHandler+0x6a8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02c      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <HAL_DMA_IRQHandler+0x6ac>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d027      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a79      	ldr	r2, [pc, #484]	; (8002c14 <HAL_DMA_IRQHandler+0x6b0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d022      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a77      	ldr	r2, [pc, #476]	; (8002c18 <HAL_DMA_IRQHandler+0x6b4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a76      	ldr	r2, [pc, #472]	; (8002c1c <HAL_DMA_IRQHandler+0x6b8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d018      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a74      	ldr	r2, [pc, #464]	; (8002c20 <HAL_DMA_IRQHandler+0x6bc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a73      	ldr	r2, [pc, #460]	; (8002c24 <HAL_DMA_IRQHandler+0x6c0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a71      	ldr	r2, [pc, #452]	; (8002c28 <HAL_DMA_IRQHandler+0x6c4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a70      	ldr	r2, [pc, #448]	; (8002c2c <HAL_DMA_IRQHandler+0x6c8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x516>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <HAL_DMA_IRQHandler+0x6cc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10a      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x52c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e009      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x540>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d03e      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d018      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d024      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
 8002ae4:	e01f      	b.n	8002b26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01b      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
 8002af6:	e016      	b.n	8002b26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0208 	bic.w	r2, r2, #8
 8002b14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2220      	movs	r2, #32
 8002b30:	409a      	lsls	r2, r3
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8110 	beq.w	8002d5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2c      	ldr	r2, [pc, #176]	; (8002bf4 <HAL_DMA_IRQHandler+0x690>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04a      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <HAL_DMA_IRQHandler+0x694>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d045      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <HAL_DMA_IRQHandler+0x698>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d040      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <HAL_DMA_IRQHandler+0x69c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d03b      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <HAL_DMA_IRQHandler+0x6a0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d036      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <HAL_DMA_IRQHandler+0x6a4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d031      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <HAL_DMA_IRQHandler+0x6a8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d02c      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <HAL_DMA_IRQHandler+0x6ac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d027      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <HAL_DMA_IRQHandler+0x6b0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <HAL_DMA_IRQHandler+0x6b4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d01d      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_DMA_IRQHandler+0x6b8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_DMA_IRQHandler+0x6bc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_DMA_IRQHandler+0x6c0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <HAL_DMA_IRQHandler+0x6c4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_DMA_IRQHandler+0x6c8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x678>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <HAL_DMA_IRQHandler+0x6cc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d12b      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x6d0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	e02a      	b.n	8002c48 <HAL_DMA_IRQHandler+0x6e4>
 8002bf2:	bf00      	nop
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8087 	beq.w	8002d5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2220      	movs	r2, #32
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d139      	bne.n	8002cde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0216 	bic.w	r2, r2, #22
 8002c78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x736>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0208 	bic.w	r2, r2, #8
 8002ca8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	223f      	movs	r2, #63	; 0x3f
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 834a 	beq.w	8003368 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
          }
          return;
 8002cdc:	e344      	b.n	8003368 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02c      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
 8002d0a:	e027      	b.n	8002d5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d023      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
 8002d1c:	e01e      	b.n	8002d5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0210 	bic.w	r2, r2, #16
 8002d3a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8306 	beq.w	8003372 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8088 	beq.w	8002e84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2204      	movs	r2, #4
 8002d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7a      	ldr	r2, [pc, #488]	; (8002f6c <HAL_DMA_IRQHandler+0xa08>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d04a      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a79      	ldr	r2, [pc, #484]	; (8002f70 <HAL_DMA_IRQHandler+0xa0c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d045      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a77      	ldr	r2, [pc, #476]	; (8002f74 <HAL_DMA_IRQHandler+0xa10>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d040      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a76      	ldr	r2, [pc, #472]	; (8002f78 <HAL_DMA_IRQHandler+0xa14>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d03b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a74      	ldr	r2, [pc, #464]	; (8002f7c <HAL_DMA_IRQHandler+0xa18>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d036      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a73      	ldr	r2, [pc, #460]	; (8002f80 <HAL_DMA_IRQHandler+0xa1c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d031      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a71      	ldr	r2, [pc, #452]	; (8002f84 <HAL_DMA_IRQHandler+0xa20>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02c      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <HAL_DMA_IRQHandler+0xa24>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d027      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6e      	ldr	r2, [pc, #440]	; (8002f8c <HAL_DMA_IRQHandler+0xa28>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d022      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6d      	ldr	r2, [pc, #436]	; (8002f90 <HAL_DMA_IRQHandler+0xa2c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d01d      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a6b      	ldr	r2, [pc, #428]	; (8002f94 <HAL_DMA_IRQHandler+0xa30>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d018      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_DMA_IRQHandler+0xa34>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <HAL_DMA_IRQHandler+0xa38>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <HAL_DMA_IRQHandler+0xa3c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a65      	ldr	r2, [pc, #404]	; (8002fa4 <HAL_DMA_IRQHandler+0xa40>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x8b8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a64      	ldr	r2, [pc, #400]	; (8002fa8 <HAL_DMA_IRQHandler+0xa44>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d108      	bne.n	8002e2e <HAL_DMA_IRQHandler+0x8ca>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e007      	b.n	8002e3e <HAL_DMA_IRQHandler+0x8da>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d307      	bcc.n	8002e5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f2      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x8da>
 8002e58:	e000      	b.n	8002e5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e5a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2203      	movs	r2, #3
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e7a:	e003      	b.n	8002e84 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8272 	beq.w	8003372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
 8002e96:	e26c      	b.n	8003372 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a43      	ldr	r2, [pc, #268]	; (8002fac <HAL_DMA_IRQHandler+0xa48>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d022      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x984>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a42      	ldr	r2, [pc, #264]	; (8002fb0 <HAL_DMA_IRQHandler+0xa4c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d01d      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x984>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a40      	ldr	r2, [pc, #256]	; (8002fb4 <HAL_DMA_IRQHandler+0xa50>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d018      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x984>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a3f      	ldr	r2, [pc, #252]	; (8002fb8 <HAL_DMA_IRQHandler+0xa54>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d013      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x984>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3d      	ldr	r2, [pc, #244]	; (8002fbc <HAL_DMA_IRQHandler+0xa58>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x984>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3c      	ldr	r2, [pc, #240]	; (8002fc0 <HAL_DMA_IRQHandler+0xa5c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x984>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a3a      	ldr	r2, [pc, #232]	; (8002fc4 <HAL_DMA_IRQHandler+0xa60>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x984>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a39      	ldr	r2, [pc, #228]	; (8002fc8 <HAL_DMA_IRQHandler+0xa64>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_DMA_IRQHandler+0x988>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_DMA_IRQHandler+0x98a>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 823f 	beq.w	8003372 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2204      	movs	r2, #4
 8002f06:	409a      	lsls	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80cd 	beq.w	80030ac <HAL_DMA_IRQHandler+0xb48>
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80c7 	beq.w	80030ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2204      	movs	r2, #4
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d049      	beq.n	8002fcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8210 	beq.w	800336c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f54:	e20a      	b.n	800336c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8206 	beq.w	800336c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f68:	e200      	b.n	800336c <HAL_DMA_IRQHandler+0xe08>
 8002f6a:	bf00      	nop
 8002f6c:	40020010 	.word	0x40020010
 8002f70:	40020028 	.word	0x40020028
 8002f74:	40020040 	.word	0x40020040
 8002f78:	40020058 	.word	0x40020058
 8002f7c:	40020070 	.word	0x40020070
 8002f80:	40020088 	.word	0x40020088
 8002f84:	400200a0 	.word	0x400200a0
 8002f88:	400200b8 	.word	0x400200b8
 8002f8c:	40020410 	.word	0x40020410
 8002f90:	40020428 	.word	0x40020428
 8002f94:	40020440 	.word	0x40020440
 8002f98:	40020458 	.word	0x40020458
 8002f9c:	40020470 	.word	0x40020470
 8002fa0:	40020488 	.word	0x40020488
 8002fa4:	400204a0 	.word	0x400204a0
 8002fa8:	400204b8 	.word	0x400204b8
 8002fac:	58025408 	.word	0x58025408
 8002fb0:	5802541c 	.word	0x5802541c
 8002fb4:	58025430 	.word	0x58025430
 8002fb8:	58025444 	.word	0x58025444
 8002fbc:	58025458 	.word	0x58025458
 8002fc0:	5802546c 	.word	0x5802546c
 8002fc4:	58025480 	.word	0x58025480
 8002fc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d160      	bne.n	8003098 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a8c      	ldr	r2, [pc, #560]	; (800320c <HAL_DMA_IRQHandler+0xca8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d04a      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a8a      	ldr	r2, [pc, #552]	; (8003210 <HAL_DMA_IRQHandler+0xcac>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d045      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a89      	ldr	r2, [pc, #548]	; (8003214 <HAL_DMA_IRQHandler+0xcb0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d040      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a87      	ldr	r2, [pc, #540]	; (8003218 <HAL_DMA_IRQHandler+0xcb4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d03b      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a86      	ldr	r2, [pc, #536]	; (800321c <HAL_DMA_IRQHandler+0xcb8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d036      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a84      	ldr	r2, [pc, #528]	; (8003220 <HAL_DMA_IRQHandler+0xcbc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a83      	ldr	r2, [pc, #524]	; (8003224 <HAL_DMA_IRQHandler+0xcc0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d02c      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a81      	ldr	r2, [pc, #516]	; (8003228 <HAL_DMA_IRQHandler+0xcc4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d027      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a80      	ldr	r2, [pc, #512]	; (800322c <HAL_DMA_IRQHandler+0xcc8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a7e      	ldr	r2, [pc, #504]	; (8003230 <HAL_DMA_IRQHandler+0xccc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7d      	ldr	r2, [pc, #500]	; (8003234 <HAL_DMA_IRQHandler+0xcd0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d018      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7b      	ldr	r2, [pc, #492]	; (8003238 <HAL_DMA_IRQHandler+0xcd4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7a      	ldr	r2, [pc, #488]	; (800323c <HAL_DMA_IRQHandler+0xcd8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a78      	ldr	r2, [pc, #480]	; (8003240 <HAL_DMA_IRQHandler+0xcdc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a77      	ldr	r2, [pc, #476]	; (8003244 <HAL_DMA_IRQHandler+0xce0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_DMA_IRQHandler+0xb12>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_DMA_IRQHandler+0xce4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <HAL_DMA_IRQHandler+0xb24>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0208 	bic.w	r2, r2, #8
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e007      	b.n	8003098 <HAL_DMA_IRQHandler+0xb34>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0204 	bic.w	r2, r2, #4
 8003096:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8165 	beq.w	800336c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030aa:	e15f      	b.n	800336c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2202      	movs	r2, #2
 80030b6:	409a      	lsls	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80c5 	beq.w	800324c <HAL_DMA_IRQHandler+0xce8>
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80bf 	beq.w	800324c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2202      	movs	r2, #2
 80030d8:	409a      	lsls	r2, r3
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d018      	beq.n	800311a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 813a 	beq.w	8003370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003104:	e134      	b.n	8003370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8130 	beq.w	8003370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003118:	e12a      	b.n	8003370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d168      	bne.n	80031f6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a38      	ldr	r2, [pc, #224]	; (800320c <HAL_DMA_IRQHandler+0xca8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d04a      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a37      	ldr	r2, [pc, #220]	; (8003210 <HAL_DMA_IRQHandler+0xcac>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d045      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a35      	ldr	r2, [pc, #212]	; (8003214 <HAL_DMA_IRQHandler+0xcb0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d040      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a34      	ldr	r2, [pc, #208]	; (8003218 <HAL_DMA_IRQHandler+0xcb4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d03b      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a32      	ldr	r2, [pc, #200]	; (800321c <HAL_DMA_IRQHandler+0xcb8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d036      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a31      	ldr	r2, [pc, #196]	; (8003220 <HAL_DMA_IRQHandler+0xcbc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d031      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2f      	ldr	r2, [pc, #188]	; (8003224 <HAL_DMA_IRQHandler+0xcc0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d02c      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2e      	ldr	r2, [pc, #184]	; (8003228 <HAL_DMA_IRQHandler+0xcc4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d027      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2c      	ldr	r2, [pc, #176]	; (800322c <HAL_DMA_IRQHandler+0xcc8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d022      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2b      	ldr	r2, [pc, #172]	; (8003230 <HAL_DMA_IRQHandler+0xccc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d01d      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a29      	ldr	r2, [pc, #164]	; (8003234 <HAL_DMA_IRQHandler+0xcd0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a28      	ldr	r2, [pc, #160]	; (8003238 <HAL_DMA_IRQHandler+0xcd4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a26      	ldr	r2, [pc, #152]	; (800323c <HAL_DMA_IRQHandler+0xcd8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a25      	ldr	r2, [pc, #148]	; (8003240 <HAL_DMA_IRQHandler+0xcdc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a23      	ldr	r2, [pc, #140]	; (8003244 <HAL_DMA_IRQHandler+0xce0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xc60>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a22      	ldr	r2, [pc, #136]	; (8003248 <HAL_DMA_IRQHandler+0xce4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d108      	bne.n	80031d6 <HAL_DMA_IRQHandler+0xc72>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0214 	bic.w	r2, r2, #20
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e007      	b.n	80031e6 <HAL_DMA_IRQHandler+0xc82>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020a 	bic.w	r2, r2, #10
 80031e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80b8 	beq.w	8003370 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003208:	e0b2      	b.n	8003370 <HAL_DMA_IRQHandler+0xe0c>
 800320a:	bf00      	nop
 800320c:	40020010 	.word	0x40020010
 8003210:	40020028 	.word	0x40020028
 8003214:	40020040 	.word	0x40020040
 8003218:	40020058 	.word	0x40020058
 800321c:	40020070 	.word	0x40020070
 8003220:	40020088 	.word	0x40020088
 8003224:	400200a0 	.word	0x400200a0
 8003228:	400200b8 	.word	0x400200b8
 800322c:	40020410 	.word	0x40020410
 8003230:	40020428 	.word	0x40020428
 8003234:	40020440 	.word	0x40020440
 8003238:	40020458 	.word	0x40020458
 800323c:	40020470 	.word	0x40020470
 8003240:	40020488 	.word	0x40020488
 8003244:	400204a0 	.word	0x400204a0
 8003248:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2208      	movs	r2, #8
 8003256:	409a      	lsls	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8088 	beq.w	8003372 <HAL_DMA_IRQHandler+0xe0e>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8082 	beq.w	8003372 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a41      	ldr	r2, [pc, #260]	; (8003378 <HAL_DMA_IRQHandler+0xe14>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d04a      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3f      	ldr	r2, [pc, #252]	; (800337c <HAL_DMA_IRQHandler+0xe18>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d045      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3e      	ldr	r2, [pc, #248]	; (8003380 <HAL_DMA_IRQHandler+0xe1c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d040      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <HAL_DMA_IRQHandler+0xe20>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d03b      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <HAL_DMA_IRQHandler+0xe24>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d036      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a39      	ldr	r2, [pc, #228]	; (800338c <HAL_DMA_IRQHandler+0xe28>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a38      	ldr	r2, [pc, #224]	; (8003390 <HAL_DMA_IRQHandler+0xe2c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02c      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a36      	ldr	r2, [pc, #216]	; (8003394 <HAL_DMA_IRQHandler+0xe30>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d027      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a35      	ldr	r2, [pc, #212]	; (8003398 <HAL_DMA_IRQHandler+0xe34>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d022      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a33      	ldr	r2, [pc, #204]	; (800339c <HAL_DMA_IRQHandler+0xe38>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01d      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a32      	ldr	r2, [pc, #200]	; (80033a0 <HAL_DMA_IRQHandler+0xe3c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a30      	ldr	r2, [pc, #192]	; (80033a4 <HAL_DMA_IRQHandler+0xe40>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <HAL_DMA_IRQHandler+0xe44>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00e      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <HAL_DMA_IRQHandler+0xe48>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <HAL_DMA_IRQHandler+0xe4c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_DMA_IRQHandler+0xdaa>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <HAL_DMA_IRQHandler+0xe50>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <HAL_DMA_IRQHandler+0xdbc>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 021c 	bic.w	r2, r2, #28
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e007      	b.n	8003330 <HAL_DMA_IRQHandler+0xdcc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 020e 	bic.w	r2, r2, #14
 800332e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2201      	movs	r2, #1
 800333a:	409a      	lsls	r2, r3
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e004      	b.n	8003372 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003370:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003372:	3728      	adds	r7, #40	; 0x28
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40020010 	.word	0x40020010
 800337c:	40020028 	.word	0x40020028
 8003380:	40020040 	.word	0x40020040
 8003384:	40020058 	.word	0x40020058
 8003388:	40020070 	.word	0x40020070
 800338c:	40020088 	.word	0x40020088
 8003390:	400200a0 	.word	0x400200a0
 8003394:	400200b8 	.word	0x400200b8
 8003398:	40020410 	.word	0x40020410
 800339c:	40020428 	.word	0x40020428
 80033a0:	40020440 	.word	0x40020440
 80033a4:	40020458 	.word	0x40020458
 80033a8:	40020470 	.word	0x40020470
 80033ac:	40020488 	.word	0x40020488
 80033b0:	400204a0 	.word	0x400204a0
 80033b4:	400204b8 	.word	0x400204b8

080033b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a42      	ldr	r2, [pc, #264]	; (80034d0 <DMA_CalcBaseAndBitshift+0x118>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04a      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a41      	ldr	r2, [pc, #260]	; (80034d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d045      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <DMA_CalcBaseAndBitshift+0x120>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d040      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a3e      	ldr	r2, [pc, #248]	; (80034dc <DMA_CalcBaseAndBitshift+0x124>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d03b      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a3c      	ldr	r2, [pc, #240]	; (80034e0 <DMA_CalcBaseAndBitshift+0x128>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d036      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a3b      	ldr	r2, [pc, #236]	; (80034e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d031      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a39      	ldr	r2, [pc, #228]	; (80034e8 <DMA_CalcBaseAndBitshift+0x130>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02c      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a38      	ldr	r2, [pc, #224]	; (80034ec <DMA_CalcBaseAndBitshift+0x134>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d027      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <DMA_CalcBaseAndBitshift+0x138>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a35      	ldr	r2, [pc, #212]	; (80034f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d01d      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a33      	ldr	r2, [pc, #204]	; (80034f8 <DMA_CalcBaseAndBitshift+0x140>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d018      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a32      	ldr	r2, [pc, #200]	; (80034fc <DMA_CalcBaseAndBitshift+0x144>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a30      	ldr	r2, [pc, #192]	; (8003500 <DMA_CalcBaseAndBitshift+0x148>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2f      	ldr	r2, [pc, #188]	; (8003504 <DMA_CalcBaseAndBitshift+0x14c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2d      	ldr	r2, [pc, #180]	; (8003508 <DMA_CalcBaseAndBitshift+0x150>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <DMA_CalcBaseAndBitshift+0xa8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2c      	ldr	r2, [pc, #176]	; (800350c <DMA_CalcBaseAndBitshift+0x154>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <DMA_CalcBaseAndBitshift+0xac>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <DMA_CalcBaseAndBitshift+0xae>
 8003464:	2300      	movs	r3, #0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d024      	beq.n	80034b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3b10      	subs	r3, #16
 8003472:	4a27      	ldr	r2, [pc, #156]	; (8003510 <DMA_CalcBaseAndBitshift+0x158>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	4a24      	ldr	r2, [pc, #144]	; (8003514 <DMA_CalcBaseAndBitshift+0x15c>)
 8003484:	5cd3      	ldrb	r3, [r2, r3]
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d908      	bls.n	80034a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <DMA_CalcBaseAndBitshift+0x160>)
 800349a:	4013      	ands	r3, r2
 800349c:	1d1a      	adds	r2, r3, #4
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	659a      	str	r2, [r3, #88]	; 0x58
 80034a2:	e00d      	b.n	80034c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <DMA_CalcBaseAndBitshift+0x160>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6593      	str	r3, [r2, #88]	; 0x58
 80034b2:	e005      	b.n	80034c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
 8003510:	aaaaaaab 	.word	0xaaaaaaab
 8003514:	0800c100 	.word	0x0800c100
 8003518:	fffffc00 	.word	0xfffffc00

0800351c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d120      	bne.n	8003572 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	2b03      	cmp	r3, #3
 8003536:	d858      	bhi.n	80035ea <DMA_CheckFifoParam+0xce>
 8003538:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <DMA_CheckFifoParam+0x24>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003551 	.word	0x08003551
 8003544:	08003563 	.word	0x08003563
 8003548:	08003551 	.word	0x08003551
 800354c:	080035eb 	.word	0x080035eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d048      	beq.n	80035ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003560:	e045      	b.n	80035ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800356a:	d142      	bne.n	80035f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003570:	e03f      	b.n	80035f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357a:	d123      	bne.n	80035c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	2b03      	cmp	r3, #3
 8003582:	d838      	bhi.n	80035f6 <DMA_CheckFifoParam+0xda>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <DMA_CheckFifoParam+0x70>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	0800359d 	.word	0x0800359d
 8003590:	080035a3 	.word	0x080035a3
 8003594:	0800359d 	.word	0x0800359d
 8003598:	080035b5 	.word	0x080035b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
        break;
 80035a0:	e030      	b.n	8003604 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d025      	beq.n	80035fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035b2:	e022      	b.n	80035fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035bc:	d11f      	bne.n	80035fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035c2:	e01c      	b.n	80035fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d902      	bls.n	80035d2 <DMA_CheckFifoParam+0xb6>
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d003      	beq.n	80035d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80035d0:	e018      	b.n	8003604 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
        break;
 80035d6:	e015      	b.n	8003604 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
    break;
 80035e8:	e00b      	b.n	8003602 <DMA_CheckFifoParam+0xe6>
        break;
 80035ea:	bf00      	nop
 80035ec:	e00a      	b.n	8003604 <DMA_CheckFifoParam+0xe8>
        break;
 80035ee:	bf00      	nop
 80035f0:	e008      	b.n	8003604 <DMA_CheckFifoParam+0xe8>
        break;
 80035f2:	bf00      	nop
 80035f4:	e006      	b.n	8003604 <DMA_CheckFifoParam+0xe8>
        break;
 80035f6:	bf00      	nop
 80035f8:	e004      	b.n	8003604 <DMA_CheckFifoParam+0xe8>
        break;
 80035fa:	bf00      	nop
 80035fc:	e002      	b.n	8003604 <DMA_CheckFifoParam+0xe8>
        break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <DMA_CheckFifoParam+0xe8>
    break;
 8003602:	bf00      	nop
    }
  }

  return status;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop

08003614 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a38      	ldr	r2, [pc, #224]	; (8003708 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a36      	ldr	r2, [pc, #216]	; (800370c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01d      	beq.n	8003672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a35      	ldr	r2, [pc, #212]	; (8003710 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d018      	beq.n	8003672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a33      	ldr	r2, [pc, #204]	; (8003714 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a32      	ldr	r2, [pc, #200]	; (8003718 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a30      	ldr	r2, [pc, #192]	; (800371c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01a      	beq.n	80036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3b08      	subs	r3, #8
 8003684:	4a28      	ldr	r2, [pc, #160]	; (8003728 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4b26      	ldr	r3, [pc, #152]	; (800372c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a24      	ldr	r2, [pc, #144]	; (8003730 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80036a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2201      	movs	r2, #1
 80036aa:	409a      	lsls	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80036b0:	e024      	b.n	80036fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3b10      	subs	r3, #16
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d806      	bhi.n	80036da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	; (800373c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d902      	bls.n	80036da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3308      	adds	r3, #8
 80036d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4b18      	ldr	r3, [pc, #96]	; (8003740 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	461a      	mov	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a16      	ldr	r2, [pc, #88]	; (8003744 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80036ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	2201      	movs	r2, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	58025408 	.word	0x58025408
 800370c:	5802541c 	.word	0x5802541c
 8003710:	58025430 	.word	0x58025430
 8003714:	58025444 	.word	0x58025444
 8003718:	58025458 	.word	0x58025458
 800371c:	5802546c 	.word	0x5802546c
 8003720:	58025480 	.word	0x58025480
 8003724:	58025494 	.word	0x58025494
 8003728:	cccccccd 	.word	0xcccccccd
 800372c:	16009600 	.word	0x16009600
 8003730:	58025880 	.word	0x58025880
 8003734:	aaaaaaab 	.word	0xaaaaaaab
 8003738:	400204b8 	.word	0x400204b8
 800373c:	4002040f 	.word	0x4002040f
 8003740:	10008200 	.word	0x10008200
 8003744:	40020880 	.word	0x40020880

08003748 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d04a      	beq.n	80037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d847      	bhi.n	80037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d022      	beq.n	80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a24      	ldr	r2, [pc, #144]	; (8003804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d01d      	beq.n	80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a22      	ldr	r2, [pc, #136]	; (8003808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a21      	ldr	r2, [pc, #132]	; (800380c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1e      	ldr	r2, [pc, #120]	; (8003814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	461a      	mov	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80037d0:	671a      	str	r2, [r3, #112]	; 0x70
 80037d2:	e009      	b.n	80037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4b14      	ldr	r3, [pc, #80]	; (8003828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a11      	ldr	r2, [pc, #68]	; (800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80037e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	58025408 	.word	0x58025408
 8003804:	5802541c 	.word	0x5802541c
 8003808:	58025430 	.word	0x58025430
 800380c:	58025444 	.word	0x58025444
 8003810:	58025458 	.word	0x58025458
 8003814:	5802546c 	.word	0x5802546c
 8003818:	58025480 	.word	0x58025480
 800381c:	58025494 	.word	0x58025494
 8003820:	1600963f 	.word	0x1600963f
 8003824:	58025940 	.word	0x58025940
 8003828:	1000823f 	.word	0x1000823f
 800382c:	40020940 	.word	0x40020940

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800383e:	4b47      	ldr	r3, [pc, #284]	; (800395c <HAL_GPIO_Init+0x12c>)
 8003840:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a46      	ldr	r2, [pc, #280]	; (8003960 <HAL_GPIO_Init+0x130>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02b      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a45      	ldr	r2, [pc, #276]	; (8003964 <HAL_GPIO_Init+0x134>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d027      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a44      	ldr	r2, [pc, #272]	; (8003968 <HAL_GPIO_Init+0x138>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d023      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a43      	ldr	r2, [pc, #268]	; (800396c <HAL_GPIO_Init+0x13c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a42      	ldr	r2, [pc, #264]	; (8003970 <HAL_GPIO_Init+0x140>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01b      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a41      	ldr	r2, [pc, #260]	; (8003974 <HAL_GPIO_Init+0x144>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d017      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a40      	ldr	r2, [pc, #256]	; (8003978 <HAL_GPIO_Init+0x148>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a3f      	ldr	r2, [pc, #252]	; (800397c <HAL_GPIO_Init+0x14c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00f      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a3e      	ldr	r2, [pc, #248]	; (8003980 <HAL_GPIO_Init+0x150>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00b      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a3d      	ldr	r2, [pc, #244]	; (8003984 <HAL_GPIO_Init+0x154>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a3c      	ldr	r2, [pc, #240]	; (8003988 <HAL_GPIO_Init+0x158>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x72>
 800389a:	21bb      	movs	r1, #187	; 0xbb
 800389c:	483b      	ldr	r0, [pc, #236]	; (800398c <HAL_GPIO_Init+0x15c>)
 800389e:	f7fd facc 	bl	8000e3a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_GPIO_Init+0x88>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_GPIO_Init+0x160>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x90>
 80038b8:	21bc      	movs	r1, #188	; 0xbc
 80038ba:	4834      	ldr	r0, [pc, #208]	; (800398c <HAL_GPIO_Init+0x15c>)
 80038bc:	f7fd fabd 	bl	8000e3a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d035      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d031      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b11      	cmp	r3, #17
 80038d6:	d02d      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d029      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b12      	cmp	r3, #18
 80038e6:	d025      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_GPIO_Init+0x164>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d020      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4a28      	ldr	r2, [pc, #160]	; (8003998 <HAL_GPIO_Init+0x168>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d01b      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a26      	ldr	r2, [pc, #152]	; (800399c <HAL_GPIO_Init+0x16c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d016      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <HAL_GPIO_Init+0x170>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d011      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <HAL_GPIO_Init+0x174>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00c      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <HAL_GPIO_Init+0x178>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x104>
 800392c:	21bd      	movs	r1, #189	; 0xbd
 800392e:	4817      	ldr	r0, [pc, #92]	; (800398c <HAL_GPIO_Init+0x15c>)
 8003930:	f7fd fa83 	bl	8000e3a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 821a 	beq.w	8003d72 <HAL_GPIO_Init+0x542>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b01      	cmp	r3, #1
 8003944:	f000 8215 	beq.w	8003d72 <HAL_GPIO_Init+0x542>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b02      	cmp	r3, #2
 800394e:	f000 8210 	beq.w	8003d72 <HAL_GPIO_Init+0x542>
 8003952:	21be      	movs	r1, #190	; 0xbe
 8003954:	480d      	ldr	r0, [pc, #52]	; (800398c <HAL_GPIO_Init+0x15c>)
 8003956:	f7fd fa70 	bl	8000e3a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800395a:	e20a      	b.n	8003d72 <HAL_GPIO_Init+0x542>
 800395c:	58000080 	.word	0x58000080
 8003960:	58020000 	.word	0x58020000
 8003964:	58020400 	.word	0x58020400
 8003968:	58020800 	.word	0x58020800
 800396c:	58020c00 	.word	0x58020c00
 8003970:	58021000 	.word	0x58021000
 8003974:	58021400 	.word	0x58021400
 8003978:	58021800 	.word	0x58021800
 800397c:	58021c00 	.word	0x58021c00
 8003980:	58022000 	.word	0x58022000
 8003984:	58022400 	.word	0x58022400
 8003988:	58022800 	.word	0x58022800
 800398c:	0800bed0 	.word	0x0800bed0
 8003990:	ffff0000 	.word	0xffff0000
 8003994:	11110000 	.word	0x11110000
 8003998:	11210000 	.word	0x11210000
 800399c:	11310000 	.word	0x11310000
 80039a0:	11120000 	.word	0x11120000
 80039a4:	11220000 	.word	0x11220000
 80039a8:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	fa01 f303 	lsl.w	r3, r1, r3
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 81d4 	beq.w	8003d6c <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x1a4>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b12      	cmp	r3, #18
 80039d2:	d15b      	bne.n	8003a8c <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4aa2      	ldr	r2, [pc, #648]	; (8003c60 <HAL_GPIO_Init+0x430>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d02b      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4aa1      	ldr	r2, [pc, #644]	; (8003c64 <HAL_GPIO_Init+0x434>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d027      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4aa0      	ldr	r2, [pc, #640]	; (8003c68 <HAL_GPIO_Init+0x438>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d023      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a9f      	ldr	r2, [pc, #636]	; (8003c6c <HAL_GPIO_Init+0x43c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01f      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a9e      	ldr	r2, [pc, #632]	; (8003c70 <HAL_GPIO_Init+0x440>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d01b      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a9d      	ldr	r2, [pc, #628]	; (8003c74 <HAL_GPIO_Init+0x444>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d017      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a9c      	ldr	r2, [pc, #624]	; (8003c78 <HAL_GPIO_Init+0x448>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a9b      	ldr	r2, [pc, #620]	; (8003c7c <HAL_GPIO_Init+0x44c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00f      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a9a      	ldr	r2, [pc, #616]	; (8003c80 <HAL_GPIO_Init+0x450>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a99      	ldr	r2, [pc, #612]	; (8003c84 <HAL_GPIO_Init+0x454>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a98      	ldr	r2, [pc, #608]	; (8003c88 <HAL_GPIO_Init+0x458>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a2c:	21cd      	movs	r1, #205	; 0xcd
 8003a2e:	4897      	ldr	r0, [pc, #604]	; (8003c8c <HAL_GPIO_Init+0x45c>)
 8003a30:	f7fd fa03 	bl	8000e3a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b0f      	cmp	r3, #15
 8003a3a:	d903      	bls.n	8003a44 <HAL_GPIO_Init+0x214>
 8003a3c:	21ce      	movs	r1, #206	; 0xce
 8003a3e:	4893      	ldr	r0, [pc, #588]	; (8003c8c <HAL_GPIO_Init+0x45c>)
 8003a40:	f7fd f9fb 	bl	8000e3a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	08da      	lsrs	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3208      	adds	r2, #8
 8003a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	08da      	lsrs	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3208      	adds	r2, #8
 8003a86:	69b9      	ldr	r1, [r7, #24]
 8003a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_GPIO_Init+0x2b0>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d007      	beq.n	8003ae0 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ad4:	2b11      	cmp	r3, #17
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b12      	cmp	r3, #18
 8003ade:	d144      	bne.n	8003b6a <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00f      	beq.n	8003b08 <HAL_GPIO_Init+0x2d8>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d00b      	beq.n	8003b08 <HAL_GPIO_Init+0x2d8>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d007      	beq.n	8003b08 <HAL_GPIO_Init+0x2d8>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x2d8>
 8003b00:	21e2      	movs	r1, #226	; 0xe2
 8003b02:	4862      	ldr	r0, [pc, #392]	; (8003c8c <HAL_GPIO_Init+0x45c>)
 8003b04:	f7fd f999 	bl	8000e3a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b3e:	2201      	movs	r2, #1
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f003 0201 	and.w	r2, r3, #1
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80e2 	beq.w	8003d6c <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <HAL_GPIO_Init+0x460>)
 8003baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bae:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_GPIO_Init+0x460>)
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bb8:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <HAL_GPIO_Init+0x460>)
 8003bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc6:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <HAL_GPIO_Init+0x464>)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	3302      	adds	r3, #2
 8003bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	220f      	movs	r2, #15
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_GPIO_Init+0x430>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d054      	beq.n	8003c9c <HAL_GPIO_Init+0x46c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1b      	ldr	r2, [pc, #108]	; (8003c64 <HAL_GPIO_Init+0x434>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d04e      	beq.n	8003c98 <HAL_GPIO_Init+0x468>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <HAL_GPIO_Init+0x438>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02b      	beq.n	8003c5a <HAL_GPIO_Init+0x42a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <HAL_GPIO_Init+0x43c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d025      	beq.n	8003c56 <HAL_GPIO_Init+0x426>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_GPIO_Init+0x440>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01f      	beq.n	8003c52 <HAL_GPIO_Init+0x422>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_GPIO_Init+0x444>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d019      	beq.n	8003c4e <HAL_GPIO_Init+0x41e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <HAL_GPIO_Init+0x448>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_GPIO_Init+0x41a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <HAL_GPIO_Init+0x44c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00d      	beq.n	8003c46 <HAL_GPIO_Init+0x416>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <HAL_GPIO_Init+0x450>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <HAL_GPIO_Init+0x412>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <HAL_GPIO_Init+0x454>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_GPIO_Init+0x40e>
 8003c3a:	2309      	movs	r3, #9
 8003c3c:	e02f      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c3e:	230a      	movs	r3, #10
 8003c40:	e02d      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c42:	2308      	movs	r3, #8
 8003c44:	e02b      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c46:	2307      	movs	r3, #7
 8003c48:	e029      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c4a:	2306      	movs	r3, #6
 8003c4c:	e027      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c4e:	2305      	movs	r3, #5
 8003c50:	e025      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c52:	2304      	movs	r3, #4
 8003c54:	e023      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c56:	2303      	movs	r3, #3
 8003c58:	e021      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e01f      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c5e:	bf00      	nop
 8003c60:	58020000 	.word	0x58020000
 8003c64:	58020400 	.word	0x58020400
 8003c68:	58020800 	.word	0x58020800
 8003c6c:	58020c00 	.word	0x58020c00
 8003c70:	58021000 	.word	0x58021000
 8003c74:	58021400 	.word	0x58021400
 8003c78:	58021800 	.word	0x58021800
 8003c7c:	58021c00 	.word	0x58021c00
 8003c80:	58022000 	.word	0x58022000
 8003c84:	58022400 	.word	0x58022400
 8003c88:	58022800 	.word	0x58022800
 8003c8c:	0800bed0 	.word	0x0800bed0
 8003c90:	58024400 	.word	0x58024400
 8003c94:	58000400 	.word	0x58000400
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_GPIO_Init+0x46e>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	f002 0203 	and.w	r2, r2, #3
 8003ca4:	0092      	lsls	r2, r2, #2
 8003ca6:	4093      	lsls	r3, r2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cae:	4937      	ldr	r1, [pc, #220]	; (8003d8c <HAL_GPIO_Init+0x55c>)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f ae15 	bne.w	80039ac <HAL_GPIO_Init+0x17c>
  }
}
 8003d82:	bf00      	nop
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	58000400 	.word	0x58000400

08003d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_GPIO_WritePin+0x20>
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_GPIO_WritePin+0x60>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_GPIO_WritePin+0x2a>
 8003db0:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003db4:	480f      	ldr	r0, [pc, #60]	; (8003df4 <HAL_GPIO_WritePin+0x64>)
 8003db6:	f7fd f840 	bl	8000e3a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003dba:	787b      	ldrb	r3, [r7, #1]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_GPIO_WritePin+0x40>
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d004      	beq.n	8003dd0 <HAL_GPIO_WritePin+0x40>
 8003dc6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003dca:	480a      	ldr	r0, [pc, #40]	; (8003df4 <HAL_GPIO_WritePin+0x64>)
 8003dcc:	f7fd f835 	bl	8000e3a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003dd0:	787b      	ldrb	r3, [r7, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ddc:	e003      	b.n	8003de6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	041a      	lsls	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	619a      	str	r2, [r3, #24]
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	ffff0000 	.word	0xffff0000
 8003df4:	0800bed0 	.word	0x0800bed0

08003df8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e04:	887b      	ldrh	r3, [r7, #2]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_GPIO_TogglePin+0x1c>
 8003e0a:	887a      	ldrh	r2, [r7, #2]
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <HAL_GPIO_TogglePin+0x4c>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_GPIO_TogglePin+0x26>
 8003e14:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003e18:	480b      	ldr	r0, [pc, #44]	; (8003e48 <HAL_GPIO_TogglePin+0x50>)
 8003e1a:	f7fd f80e 	bl	8000e3a <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	401a      	ands	r2, r3
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d104      	bne.n	8003e36 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	041a      	lsls	r2, r3, #16
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	ffff0000 	.word	0xffff0000
 8003e48:	0800bed0 	.word	0x0800bed0

08003e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e62:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc ffc4 	bl	8000df8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	58000080 	.word	0x58000080

08003e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e107      	b.n	800409e <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a85      	ldr	r2, [pc, #532]	; (80040a8 <HAL_I2C_Init+0x22c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <HAL_I2C_Init+0x44>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a83      	ldr	r2, [pc, #524]	; (80040ac <HAL_I2C_Init+0x230>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_I2C_Init+0x44>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a82      	ldr	r2, [pc, #520]	; (80040b0 <HAL_I2C_Init+0x234>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <HAL_I2C_Init+0x44>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a80      	ldr	r2, [pc, #512]	; (80040b4 <HAL_I2C_Init+0x238>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_I2C_Init+0x44>
 8003eb6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003eba:	487f      	ldr	r0, [pc, #508]	; (80040b8 <HAL_I2C_Init+0x23c>)
 8003ebc:	f7fc ffbd 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d304      	bcc.n	8003ed4 <HAL_I2C_Init+0x58>
 8003eca:	f240 11df 	movw	r1, #479	; 0x1df
 8003ece:	487a      	ldr	r0, [pc, #488]	; (80040b8 <HAL_I2C_Init+0x23c>)
 8003ed0:	f7fc ffb3 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d008      	beq.n	8003eee <HAL_I2C_Init+0x72>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d004      	beq.n	8003eee <HAL_I2C_Init+0x72>
 8003ee4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003ee8:	4873      	ldr	r0, [pc, #460]	; (80040b8 <HAL_I2C_Init+0x23c>)
 8003eea:	f7fc ffa6 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_I2C_Init+0x8e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efe:	d004      	beq.n	8003f0a <HAL_I2C_Init+0x8e>
 8003f00:	f240 11e1 	movw	r1, #481	; 0x1e1
 8003f04:	486c      	ldr	r0, [pc, #432]	; (80040b8 <HAL_I2C_Init+0x23c>)
 8003f06:	f7fc ff98 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2bff      	cmp	r3, #255	; 0xff
 8003f10:	d904      	bls.n	8003f1c <HAL_I2C_Init+0xa0>
 8003f12:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003f16:	4868      	ldr	r0, [pc, #416]	; (80040b8 <HAL_I2C_Init+0x23c>)
 8003f18:	f7fc ff8f 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_I2C_Init+0xea>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d01c      	beq.n	8003f66 <HAL_I2C_Init+0xea>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d018      	beq.n	8003f66 <HAL_I2C_Init+0xea>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d014      	beq.n	8003f66 <HAL_I2C_Init+0xea>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d010      	beq.n	8003f66 <HAL_I2C_Init+0xea>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d00c      	beq.n	8003f66 <HAL_I2C_Init+0xea>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d008      	beq.n	8003f66 <HAL_I2C_Init+0xea>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b07      	cmp	r3, #7
 8003f5a:	d004      	beq.n	8003f66 <HAL_I2C_Init+0xea>
 8003f5c:	f240 11e3 	movw	r1, #483	; 0x1e3
 8003f60:	4855      	ldr	r0, [pc, #340]	; (80040b8 <HAL_I2C_Init+0x23c>)
 8003f62:	f7fc ff6a 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_I2C_Init+0x106>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f76:	d004      	beq.n	8003f82 <HAL_I2C_Init+0x106>
 8003f78:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8003f7c:	484e      	ldr	r0, [pc, #312]	; (80040b8 <HAL_I2C_Init+0x23c>)
 8003f7e:	f7fc ff5c 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_I2C_Init+0x122>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f92:	d004      	beq.n	8003f9e <HAL_I2C_Init+0x122>
 8003f94:	f240 11e5 	movw	r1, #485	; 0x1e5
 8003f98:	4847      	ldr	r0, [pc, #284]	; (80040b8 <HAL_I2C_Init+0x23c>)
 8003f9a:	f7fc ff4e 	bl	8000e3a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fc fd98 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	; 0x24
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	e006      	b.n	8004014 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d104      	bne.n	8004026 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b22      	ldr	r3, [pc, #136]	; (80040bc <HAL_I2C_Init+0x240>)
 8004032:	430b      	orrs	r3, r1
 8004034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	ea42 0103 	orr.w	r1, r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	021a      	lsls	r2, r3, #8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69d9      	ldr	r1, [r3, #28]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40005400 	.word	0x40005400
 80040ac:	40005800 	.word	0x40005800
 80040b0:	40005c00 	.word	0x40005c00
 80040b4:	58001c00 	.word	0x58001c00
 80040b8:	0800bf0c 	.word	0x0800bf0c
 80040bc:	02008000 	.word	0x02008000

080040c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a32      	ldr	r2, [pc, #200]	; (8004198 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d012      	beq.n	80040fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a30      	ldr	r2, [pc, #192]	; (800419c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00d      	beq.n	80040fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d008      	beq.n	80040fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80040f2:	2164      	movs	r1, #100	; 0x64
 80040f4:	482c      	ldr	r0, [pc, #176]	; (80041a8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80040f6:	f7fc fea0 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d003      	beq.n	8004110 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004108:	2165      	movs	r1, #101	; 0x65
 800410a:	4827      	ldr	r0, [pc, #156]	; (80041a8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800410c:	f7fc fe95 	bl	8000e3a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	d138      	bne.n	800418e <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8004126:	2302      	movs	r3, #2
 8004128:	e032      	b.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2224      	movs	r2, #36	; 0x24
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004158:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40005400 	.word	0x40005400
 800419c:	40005800 	.word	0x40005800
 80041a0:	40005c00 	.word	0x40005c00
 80041a4:	58001c00 	.word	0x58001c00
 80041a8:	0800bf44 	.word	0x0800bf44

080041ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a31      	ldr	r2, [pc, #196]	; (8004280 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d012      	beq.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2f      	ldr	r2, [pc, #188]	; (8004284 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00d      	beq.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2e      	ldr	r2, [pc, #184]	; (8004288 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d008      	beq.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80041de:	2192      	movs	r1, #146	; 0x92
 80041e0:	482b      	ldr	r0, [pc, #172]	; (8004290 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80041e2:	f7fc fe2a 	bl	8000e3a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d903      	bls.n	80041f4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80041ec:	2193      	movs	r1, #147	; 0x93
 80041ee:	4828      	ldr	r0, [pc, #160]	; (8004290 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80041f0:	f7fc fe23 	bl	8000e3a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d139      	bne.n	8004274 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800420a:	2302      	movs	r3, #2
 800420c:	e033      	b.n	8004276 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2224      	movs	r2, #36	; 0x24
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800423c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40005400 	.word	0x40005400
 8004284:	40005800 	.word	0x40005800
 8004288:	40005c00 	.word	0x40005c00
 800428c:	58001c00 	.word	0x58001c00
 8004290:	0800bf44 	.word	0x0800bf44

08004294 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e070      	b.n	8004388 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc fc72 	bl	8000ba4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004316:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004326:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_JPEG_Init+0xfc>)
 800432c:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_JPEG_Init+0x100>)
 8004332:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fae9 	bl	8004918 <JPEG_Set_HuffEnc_Mem>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e018      	b.n	8004388 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004364:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	0800c2a8 	.word	0x0800c2a8
 8004394:	0800c2e8 	.word	0x0800c2e8

08004398 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004398:	b480      	push	{r7}
 800439a:	b08b      	sub	sp, #44	; 0x2c
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e020      	b.n	80043f2 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 80043ba:	6a3a      	ldr	r2, [r7, #32]
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	4413      	add	r3, r2
 80043c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c4:	d90f      	bls.n	80043e6 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e055      	b.n	8004476 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	440b      	add	r3, r1
 80043d4:	3201      	adds	r2, #1
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
      p++;
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	3301      	adds	r3, #1
 80043de:	623b      	str	r3, [r7, #32]
      i--;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	3b01      	subs	r3, #1
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ee      	bne.n	80043ca <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b0f      	cmp	r3, #15
 80043f6:	d9db      	bls.n	80043b0 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	4413      	add	r3, r2
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	617b      	str	r3, [r7, #20]
  p = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8004416:	e027      	b.n	8004468 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	601a      	str	r2, [r3, #0]
      p++;
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	3301      	adds	r3, #1
 8004428:	623b      	str	r3, [r7, #32]
      code++;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	3301      	adds	r3, #1
 800442e:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	4413      	add	r3, r2
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4293      	cmp	r3, r2
 800443e:	d0eb      	beq.n	8004418 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2b1f      	cmp	r3, #31
 8004444:	d901      	bls.n	800444a <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e015      	b.n	8004476 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800444a:	2201      	movs	r2, #1
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	429a      	cmp	r2, r3
 8004456:	d301      	bcc.n	800445c <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e00c      	b.n	8004476 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
    si++;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	3301      	adds	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	4413      	add	r3, r2
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1dd      	bne.n	8004430 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	372c      	adds	r7, #44	; 0x2c
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8004488:	af00      	add	r7, sp, #0
 800448a:	1d3b      	adds	r3, r7, #4
 800448c:	6018      	str	r0, [r3, #0]
 800448e:	463b      	mov	r3, r7
 8004490:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004492:	1d3b      	adds	r3, r7, #4
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	f107 0308 	add.w	r3, r7, #8
 800449a:	f107 020c 	add.w	r2, r7, #12
 800449e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80044a2:	f7ff ff79 	bl	8004398 <JPEG_Bits_To_SizeCodes>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 80044ac:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 80044b4:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80044b8:	e066      	b.n	8004588 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 80044c0:	e05a      	b.n	8004578 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80044ca:	4413      	add	r3, r2
 80044cc:	3310      	adds	r3, #16
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 80044d4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d103      	bne.n	80044e4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 80044dc:	23a0      	movs	r3, #160	; 0xa0
 80044de:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80044e2:	e021      	b.n	8004528 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80044e4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80044e8:	2bf0      	cmp	r3, #240	; 0xf0
 80044ea:	d103      	bne.n	80044f4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 80044ec:	23a1      	movs	r3, #161	; 0xa1
 80044ee:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80044f2:	e019      	b.n	8004528 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80044f4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8004502:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800450e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	461a      	mov	r2, r3
 800451c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004520:	4413      	add	r3, r2
 8004522:	3b01      	subs	r3, #1
 8004524:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004528:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800452c:	2ba1      	cmp	r3, #161	; 0xa1
 800452e:	d901      	bls.n	8004534 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004530:	2301      	movs	r3, #1
 8004532:	e029      	b.n	8004588 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800453c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004540:	463b      	mov	r3, r7
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004548:	3328      	adds	r3, #40	; 0x28
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004550:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004554:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004558:	4413      	add	r3, r2
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	3b01      	subs	r3, #1
 800455e:	b2d9      	uxtb	r1, r3
 8004560:	463b      	mov	r3, r7
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004568:	4413      	add	r3, r2
 800456a:	460a      	mov	r2, r1
 800456c:	701a      	strb	r2, [r3, #0]
      k++;
 800456e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004572:	3301      	adds	r3, #1
 8004574:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8004578:	f107 0308 	add.w	r3, r7, #8
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004582:	429a      	cmp	r2, r3
 8004584:	d39d      	bcc.n	80044c2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8004598:	af00      	add	r7, sp, #0
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	6018      	str	r0, [r3, #0]
 800459e:	463b      	mov	r3, r7
 80045a0:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80045aa:	f107 0208 	add.w	r2, r7, #8
 80045ae:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 80045b2:	f7ff fef1 	bl	8004398 <JPEG_Bits_To_SizeCodes>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80045bc:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 80045c4:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80045c8:	e03b      	b.n	8004642 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 80045d0:	e030      	b.n	8004634 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80045d2:	1d3b      	adds	r3, r7, #4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80045da:	4413      	add	r3, r2
 80045dc:	3310      	adds	r3, #16
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80045e4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80045e8:	2b0b      	cmp	r3, #11
 80045ea:	d901      	bls.n	80045f0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80045ec:	2301      	movs	r3, #1
 80045ee:	e028      	b.n	8004642 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80045f0:	f107 0308 	add.w	r3, r7, #8
 80045f4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80045f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045fc:	463b      	mov	r3, r7
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004604:	3302      	adds	r3, #2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800460c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8004610:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004614:	4413      	add	r3, r2
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	3b01      	subs	r3, #1
 800461a:	b2d9      	uxtb	r1, r3
 800461c:	463b      	mov	r3, r7
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004624:	4413      	add	r3, r2
 8004626:	460a      	mov	r2, r1
 8004628:	701a      	strb	r2, [r3, #0]
      k++;
 800462a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800462e:	3301      	adds	r3, #1
 8004630:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004634:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8004638:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800463c:	429a      	cmp	r2, r3
 800463e:	d3c8      	bcc.n	80045d2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b09a      	sub	sp, #104	; 0x68
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d106      	bne.n	8004674 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800466e:	3318      	adds	r3, #24
 8004670:	663b      	str	r3, [r7, #96]	; 0x60
 8004672:	e00f      	b.n	8004694 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	d106      	bne.n	8004690 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800468a:	3318      	adds	r3, #24
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
 800468e:	e001      	b.n	8004694 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e05b      	b.n	800474c <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d057      	beq.n	800474a <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800469a:	f107 0314 	add.w	r3, r7, #20
 800469e:	4619      	mov	r1, r3
 80046a0:	68b8      	ldr	r0, [r7, #8]
 80046a2:	f7ff ff76 	bl	8004592 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 80046ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80046b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046b8:	e048      	b.n	800474c <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 80046ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046bc:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 80046be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c0:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80046c4:	601a      	str	r2, [r3, #0]
    addressDef++;
 80046c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c8:	3304      	adds	r3, #4
 80046ca:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 80046cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ce:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80046d2:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80046d4:	230c      	movs	r3, #12
 80046d6:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 80046d8:	e034      	b.n	8004744 <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 80046da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046dc:	3b01      	subs	r3, #1
 80046de:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 80046e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e2:	3b04      	subs	r3, #4
 80046e4:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80046e6:	f107 0214 	add.w	r2, r7, #20
 80046ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80046f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f8:	3302      	adds	r3, #2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004700:	440b      	add	r3, r1
 8004702:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4313      	orrs	r3, r2
 800470a:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800470c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800470e:	3b01      	subs	r3, #1
 8004710:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004712:	f107 0214 	add.w	r2, r7, #20
 8004716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004718:	4413      	add	r3, r2
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004724:	3302      	adds	r3, #2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800472c:	440b      	add	r3, r1
 800472e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	4313      	orrs	r3, r2
 8004736:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473a:	041a      	lsls	r2, r3, #16
 800473c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473e:	431a      	orrs	r2, r3
 8004740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004742:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004746:	2b01      	cmp	r3, #1
 8004748:	d8c7      	bhi.n	80046da <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3768      	adds	r7, #104	; 0x68
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800475a:	af00      	add	r7, sp, #0
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	6018      	str	r0, [r3, #0]
 8004762:	f107 0308 	add.w	r3, r7, #8
 8004766:	6019      	str	r1, [r3, #0]
 8004768:	1d3b      	adds	r3, r7, #4
 800476a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	1d3a      	adds	r2, r7, #4
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d10a      	bne.n	8004796 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004780:	f107 030c 	add.w	r3, r7, #12
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004790:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004794:	e016      	b.n	80047c4 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004796:	f107 030c 	add.w	r3, r7, #12
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80047a2:	1d3a      	adds	r2, r7, #4
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d10a      	bne.n	80047c0 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80047b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80047ba:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80047be:	e001      	b.n	80047c4 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e09c      	b.n	80048fe <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 80047c4:	f107 0308 	add.w	r3, r7, #8
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8096 	beq.w	80048fc <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 80047d0:	f107 0214 	add.w	r2, r7, #20
 80047d4:	f107 0308 	add.w	r3, r7, #8
 80047d8:	4611      	mov	r1, r2
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	f7ff fe51 	bl	8004482 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 80047e6:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 80047ee:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 80047f2:	e084      	b.n	80048fe <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80047f4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80047f8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004802:	e00e      	b.n	8004822 <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8004804:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004808:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800480c:	601a      	str	r2, [r3, #0]
      addressDef++;
 800480e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004812:	3304      	adds	r3, #4
 8004814:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004818:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800481c:	3301      	adds	r3, #1
 800481e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004822:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004826:	2b02      	cmp	r3, #2
 8004828:	d9ec      	bls.n	8004804 <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 800482a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800482e:	4a36      	ldr	r2, [pc, #216]	; (8004908 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8004830:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004832:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004836:	3304      	adds	r3, #4
 8004838:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800483c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004840:	4a32      	ldr	r2, [pc, #200]	; (800490c <JPEG_Set_HuffAC_Mem+0x1b8>)
 8004842:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004844:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004848:	3304      	adds	r3, #4
 800484a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800484e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004852:	4a2f      	ldr	r2, [pc, #188]	; (8004910 <JPEG_Set_HuffAC_Mem+0x1bc>)
 8004854:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004856:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800485a:	3304      	adds	r3, #4
 800485c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004860:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004864:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <JPEG_Set_HuffAC_Mem+0x1c0>)
 8004866:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004868:	23a2      	movs	r3, #162	; 0xa2
 800486a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 800486e:	e041      	b.n	80048f4 <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8004870:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004874:	3b01      	subs	r3, #1
 8004876:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 800487a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800487e:	3b04      	subs	r3, #4
 8004880:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004884:	f107 0214 	add.w	r2, r7, #20
 8004888:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800488c:	4413      	add	r3, r2
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004896:	f107 0114 	add.w	r1, r7, #20
 800489a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800489e:	3328      	adds	r3, #40	; 0x28
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 80048ae:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80048b8:	f107 0214 	add.w	r2, r7, #20
 80048bc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80048c0:	4413      	add	r3, r2
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80048ca:	f107 0114 	add.w	r1, r7, #20
 80048ce:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80048d2:	3328      	adds	r3, #40	; 0x28
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80048e2:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80048e6:	041a      	lsls	r2, r3, #16
 80048e8:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80048ec:	431a      	orrs	r2, r3
 80048ee:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80048f2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80048f4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d8b9      	bhi.n	8004870 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	0fd10fd0 	.word	0x0fd10fd0
 800490c:	0fd30fd2 	.word	0x0fd30fd2
 8004910:	0fd50fd4 	.word	0x0fd50fd4
 8004914:	0fd70fd6 	.word	0x0fd70fd6

08004918 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f84d 	bl	80049c0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800492e:	461a      	mov	r2, r3
 8004930:	491f      	ldr	r1, [pc, #124]	; (80049b0 <JPEG_Set_HuffEnc_Mem+0x98>)
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ff0e 	bl	8004754 <JPEG_Set_HuffAC_Mem>
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	e030      	b.n	80049a8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800494e:	461a      	mov	r2, r3
 8004950:	4918      	ldr	r1, [pc, #96]	; (80049b4 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fefe 	bl	8004754 <JPEG_Set_HuffAC_Mem>
 8004958:	4603      	mov	r3, r0
 800495a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	e020      	b.n	80049a8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800496e:	461a      	mov	r2, r3
 8004970:	4911      	ldr	r1, [pc, #68]	; (80049b8 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fe6a 	bl	800464c <JPEG_Set_HuffDC_Mem>
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	e010      	b.n	80049a8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800498e:	461a      	mov	r2, r3
 8004990:	490a      	ldr	r1, [pc, #40]	; (80049bc <JPEG_Set_HuffEnc_Mem+0xa4>)
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fe5a 	bl	800464c <JPEG_Set_HuffDC_Mem>
 8004998:	4603      	mov	r3, r0
 800499a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	e000      	b.n	80049a8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	0800c140 	.word	0x0800c140
 80049b4:	0800c1f4 	.word	0x0800c1f4
 80049b8:	0800c108 	.word	0x0800c108
 80049bc:	0800c124 	.word	0x0800c124

080049c0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b08b      	sub	sp, #44	; 0x2c
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80049c8:	4b80      	ldr	r3, [pc, #512]	; (8004bcc <JPEG_Set_Huff_DHTMem+0x20c>)
 80049ca:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80049cc:	4b80      	ldr	r3, [pc, #512]	; (8004bd0 <JPEG_Set_Huff_DHTMem+0x210>)
 80049ce:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80049d0:	4b80      	ldr	r3, [pc, #512]	; (8004bd4 <JPEG_Set_Huff_DHTMem+0x214>)
 80049d2:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80049d4:	4b80      	ldr	r3, [pc, #512]	; (8004bd8 <JPEG_Set_Huff_DHTMem+0x218>)
 80049d6:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80049e0:	330c      	adds	r3, #12
 80049e2:	623b      	str	r3, [r7, #32]
  index = 16;
 80049e4:	2310      	movs	r3, #16
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80049e8:	e01d      	b.n	8004a26 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	3b01      	subs	r3, #1
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
 80049f2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	3b02      	subs	r3, #2
 80049f8:	6979      	ldr	r1, [r7, #20]
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80049fe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	3b03      	subs	r3, #3
 8004a04:	6979      	ldr	r1, [r7, #20]
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004a0a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	3a04      	subs	r2, #4
 8004a10:	6979      	ldr	r1, [r7, #20]
 8004a12:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004a14:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	601a      	str	r2, [r3, #0]
    address--;
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	3b04      	subs	r3, #4
 8004a1e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	3b04      	subs	r3, #4
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d8de      	bhi.n	80049ea <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a34:	3318      	adds	r3, #24
 8004a36:	623b      	str	r3, [r7, #32]
  index = 12;
 8004a38:	230c      	movs	r3, #12
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a3c:	e021      	b.n	8004a82 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	3b01      	subs	r3, #1
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4413      	add	r3, r2
 8004a46:	7c1b      	ldrb	r3, [r3, #16]
 8004a48:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	3b02      	subs	r3, #2
 8004a4e:	6979      	ldr	r1, [r7, #20]
 8004a50:	440b      	add	r3, r1
 8004a52:	7c1b      	ldrb	r3, [r3, #16]
 8004a54:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004a56:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	3b03      	subs	r3, #3
 8004a5c:	6979      	ldr	r1, [r7, #20]
 8004a5e:	440b      	add	r3, r1
 8004a60:	7c1b      	ldrb	r3, [r3, #16]
 8004a62:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004a64:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a68:	3a04      	subs	r2, #4
 8004a6a:	6979      	ldr	r1, [r7, #20]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004a70:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	601a      	str	r2, [r3, #0]
    address--;
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	3b04      	subs	r3, #4
 8004a7a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	3b04      	subs	r3, #4
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d8da      	bhi.n	8004a3e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a90:	3328      	adds	r3, #40	; 0x28
 8004a92:	623b      	str	r3, [r7, #32]
  index = 16;
 8004a94:	2310      	movs	r3, #16
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a98:	e01d      	b.n	8004ad6 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	5cd3      	ldrb	r3, [r2, r3]
 8004aa2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	3b02      	subs	r3, #2
 8004aa8:	69f9      	ldr	r1, [r7, #28]
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004aae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	3b03      	subs	r3, #3
 8004ab4:	69f9      	ldr	r1, [r7, #28]
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004aba:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	3a04      	subs	r2, #4
 8004ac0:	69f9      	ldr	r1, [r7, #28]
 8004ac2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004ac4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	601a      	str	r2, [r3, #0]
    address--;
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	3b04      	subs	r3, #4
 8004ace:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	3b04      	subs	r3, #4
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d8de      	bhi.n	8004a9a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004ae4:	33cc      	adds	r3, #204	; 0xcc
 8004ae6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4b3b      	ldr	r3, [pc, #236]	; (8004bdc <JPEG_Set_Huff_DHTMem+0x21c>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004af8:	021a      	lsls	r2, r3, #8
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	3b04      	subs	r3, #4
 8004b12:	623b      	str	r3, [r7, #32]
  index = 160;
 8004b14:	23a0      	movs	r3, #160	; 0xa0
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004b18:	e021      	b.n	8004b5e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	7c1b      	ldrb	r3, [r3, #16]
 8004b24:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	3b02      	subs	r3, #2
 8004b2a:	69f9      	ldr	r1, [r7, #28]
 8004b2c:	440b      	add	r3, r1
 8004b2e:	7c1b      	ldrb	r3, [r3, #16]
 8004b30:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004b32:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	3b03      	subs	r3, #3
 8004b38:	69f9      	ldr	r1, [r7, #28]
 8004b3a:	440b      	add	r3, r1
 8004b3c:	7c1b      	ldrb	r3, [r3, #16]
 8004b3e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004b40:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b44:	3a04      	subs	r2, #4
 8004b46:	69f9      	ldr	r1, [r7, #28]
 8004b48:	440a      	add	r2, r1
 8004b4a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004b4c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	601a      	str	r2, [r3, #0]
    address--;
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	3b04      	subs	r3, #4
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d8da      	bhi.n	8004b1a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004b6c:	33cc      	adds	r3, #204	; 0xcc
 8004b6e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	061a      	lsls	r2, r3, #24
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004b9a:	33dc      	adds	r3, #220	; 0xdc
 8004b9c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <JPEG_Set_Huff_DHTMem+0x21c>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	7bdb      	ldrb	r3, [r3, #15]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	7b92      	ldrb	r2, [r2, #14]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	623b      	str	r3, [r7, #32]
  index = 12;
 8004bc6:	230c      	movs	r3, #12
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004bca:	e027      	b.n	8004c1c <JPEG_Set_Huff_DHTMem+0x25c>
 8004bcc:	0800c140 	.word	0x0800c140
 8004bd0:	0800c1f4 	.word	0x0800c1f4
 8004bd4:	0800c108 	.word	0x0800c108
 8004bd8:	0800c124 	.word	0x0800c124
 8004bdc:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	3301      	adds	r3, #1
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	5cd3      	ldrb	r3, [r2, r3]
 8004be8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004bea:	6939      	ldr	r1, [r7, #16]
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	440b      	add	r3, r1
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004bf4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	6939      	ldr	r1, [r7, #16]
 8004bfc:	5ccb      	ldrb	r3, [r1, r3]
 8004bfe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004c00:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	3a02      	subs	r2, #2
 8004c06:	6939      	ldr	r1, [r7, #16]
 8004c08:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004c0a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	601a      	str	r2, [r3, #0]
    address--;
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	3b04      	subs	r3, #4
 8004c14:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	3b04      	subs	r3, #4
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d8de      	bhi.n	8004be0 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c2a:	33dc      	adds	r3, #220	; 0xdc
 8004c2c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	7c5b      	ldrb	r3, [r3, #17]
 8004c3a:	061a      	lsls	r2, r3, #24
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	7c1b      	ldrb	r3, [r3, #16]
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c58:	33e8      	adds	r3, #232	; 0xe8
 8004c5a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b6d      	ldr	r3, [pc, #436]	; (8004e18 <JPEG_Set_Huff_DHTMem+0x458>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	7edb      	ldrb	r3, [r3, #27]
 8004c6a:	021a      	lsls	r2, r3, #8
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	7e92      	ldrb	r2, [r2, #26]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	3b04      	subs	r3, #4
 8004c82:	623b      	str	r3, [r7, #32]
  index = 8;
 8004c84:	2308      	movs	r3, #8
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004c88:	e021      	b.n	8004cce <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4413      	add	r3, r2
 8004c92:	7c1b      	ldrb	r3, [r3, #16]
 8004c94:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004c96:	6939      	ldr	r1, [r7, #16]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3310      	adds	r3, #16
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004ca2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	6939      	ldr	r1, [r7, #16]
 8004caa:	440b      	add	r3, r1
 8004cac:	7c1b      	ldrb	r3, [r3, #16]
 8004cae:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004cb0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	3a02      	subs	r2, #2
 8004cb6:	6939      	ldr	r1, [r7, #16]
 8004cb8:	440a      	add	r2, r1
 8004cba:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004cbc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	601a      	str	r2, [r3, #0]
    address--;
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	3b04      	subs	r3, #4
 8004cc6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d8da      	bhi.n	8004c8a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004cdc:	33e8      	adds	r3, #232	; 0xe8
 8004cde:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	041b      	lsls	r3, r3, #16
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d0a:	33f8      	adds	r3, #248	; 0xf8
 8004d0c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <JPEG_Set_Huff_DHTMem+0x458>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	7bdb      	ldrb	r3, [r3, #15]
 8004d1c:	021a      	lsls	r2, r3, #8
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	7b92      	ldrb	r2, [r2, #14]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	3b04      	subs	r3, #4
 8004d34:	623b      	str	r3, [r7, #32]
  index = 12;
 8004d36:	230c      	movs	r3, #12
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d3a:	e01d      	b.n	8004d78 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	3301      	adds	r3, #1
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	5cd3      	ldrb	r3, [r2, r3]
 8004d44:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004d46:	69b9      	ldr	r1, [r7, #24]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	440b      	add	r3, r1
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d50:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	3b01      	subs	r3, #1
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	5ccb      	ldrb	r3, [r1, r3]
 8004d5a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004d5c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d60:	3a02      	subs	r2, #2
 8004d62:	69b9      	ldr	r1, [r7, #24]
 8004d64:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004d66:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	601a      	str	r2, [r3, #0]
    address--;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	3b04      	subs	r3, #4
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d8de      	bhi.n	8004d3c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d86:	33f8      	adds	r3, #248	; 0xf8
 8004d88:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	7c5b      	ldrb	r3, [r3, #17]
 8004d96:	061a      	lsls	r2, r3, #24
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	7c1b      	ldrb	r3, [r3, #16]
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004db4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004db8:	623b      	str	r3, [r7, #32]
  index = 160;
 8004dba:	23a0      	movs	r3, #160	; 0xa0
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004dbe:	e021      	b.n	8004e04 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	7c1b      	ldrb	r3, [r3, #16]
 8004dca:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004dcc:	69b9      	ldr	r1, [r7, #24]
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004dd8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	69b9      	ldr	r1, [r7, #24]
 8004de0:	440b      	add	r3, r1
 8004de2:	7c1b      	ldrb	r3, [r3, #16]
 8004de4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004de6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	3a02      	subs	r2, #2
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	440a      	add	r2, r1
 8004df0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004df2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	601a      	str	r2, [r3, #0]
    address--;
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	3b04      	subs	r3, #4
 8004dfc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	3b04      	subs	r3, #4
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d8da      	bhi.n	8004dc0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8004e0a:	bf00      	nop
 8004e0c:	372c      	adds	r7, #44	; 0x2c
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	ffff0000 	.word	0xffff0000

08004e1c <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d006      	beq.n	8004e38 <HAL_PWREx_ConfigSupply+0x1c>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d003      	beq.n	8004e38 <HAL_PWREx_ConfigSupply+0x1c>
 8004e30:	21ef      	movs	r1, #239	; 0xef
 8004e32:	481a      	ldr	r0, [pc, #104]	; (8004e9c <HAL_PWREx_ConfigSupply+0x80>)
 8004e34:	f7fc f801 	bl	8000e3a <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_PWREx_ConfigSupply+0x84>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d008      	beq.n	8004e56 <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <HAL_PWREx_ConfigSupply+0x84>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d001      	beq.n	8004e56 <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e01d      	b.n	8004e92 <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_PWREx_ConfigSupply+0x84>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f023 0207 	bic.w	r2, r3, #7
 8004e5e:	4910      	ldr	r1, [pc, #64]	; (8004ea0 <HAL_PWREx_ConfigSupply+0x84>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e66:	f7fc fa9b 	bl	80013a0 <HAL_GetTick>
 8004e6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004e6c:	e009      	b.n	8004e82 <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8004e6e:	f7fc fa97 	bl	80013a0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e7c:	d901      	bls.n	8004e82 <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e007      	b.n	8004e92 <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004e82:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <HAL_PWREx_ConfigSupply+0x84>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e8e:	d1ee      	bne.n	8004e6e <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	0800bf80 	.word	0x0800bf80
 8004ea0:	58024800 	.word	0x58024800

08004ea4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f000 bcc9 	b.w	800584a <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d028      	beq.n	8004f12 <HAL_RCC_OscConfig+0x6e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d122      	bne.n	8004f12 <HAL_RCC_OscConfig+0x6e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11c      	bne.n	8004f12 <HAL_RCC_OscConfig+0x6e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d116      	bne.n	8004f12 <HAL_RCC_OscConfig+0x6e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d110      	bne.n	8004f12 <HAL_RCC_OscConfig+0x6e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <HAL_RCC_OscConfig+0x6e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <HAL_RCC_OscConfig+0x6e>
 8004f08:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8004f0c:	48a2      	ldr	r0, [pc, #648]	; (8005198 <HAL_RCC_OscConfig+0x2f4>)
 8004f0e:	f7fb ff94 	bl	8000e3a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 809d 	beq.w	800505a <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <HAL_RCC_OscConfig+0xa2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f30:	d009      	beq.n	8004f46 <HAL_RCC_OscConfig+0xa2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f3a:	d004      	beq.n	8004f46 <HAL_RCC_OscConfig+0xa2>
 8004f3c:	f240 1175 	movw	r1, #373	; 0x175
 8004f40:	4895      	ldr	r0, [pc, #596]	; (8005198 <HAL_RCC_OscConfig+0x2f4>)
 8004f42:	f7fb ff7a 	bl	8000e3a <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f46:	4b95      	ldr	r3, [pc, #596]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f50:	4b92      	ldr	r3, [pc, #584]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d007      	beq.n	8004f6c <HAL_RCC_OscConfig+0xc8>
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	2b18      	cmp	r3, #24
 8004f60:	d111      	bne.n	8004f86 <HAL_RCC_OscConfig+0xe2>
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	4b8b      	ldr	r3, [pc, #556]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d06f      	beq.n	8005058 <HAL_RCC_OscConfig+0x1b4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d16b      	bne.n	8005058 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f000 bc62 	b.w	800584a <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8e:	d106      	bne.n	8004f9e <HAL_RCC_OscConfig+0xfa>
 8004f90:	4b82      	ldr	r3, [pc, #520]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a81      	ldr	r2, [pc, #516]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e02e      	b.n	8004ffc <HAL_RCC_OscConfig+0x158>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x11c>
 8004fa6:	4b7d      	ldr	r3, [pc, #500]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a7c      	ldr	r2, [pc, #496]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	4b7a      	ldr	r3, [pc, #488]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a79      	ldr	r2, [pc, #484]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e01d      	b.n	8004ffc <HAL_RCC_OscConfig+0x158>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x140>
 8004fca:	4b74      	ldr	r3, [pc, #464]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a73      	ldr	r2, [pc, #460]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	4b71      	ldr	r3, [pc, #452]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a70      	ldr	r2, [pc, #448]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e00b      	b.n	8004ffc <HAL_RCC_OscConfig+0x158>
 8004fe4:	4b6d      	ldr	r3, [pc, #436]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a6c      	ldr	r2, [pc, #432]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	4b6a      	ldr	r3, [pc, #424]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a69      	ldr	r2, [pc, #420]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8004ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d014      	beq.n	800502e <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fc f9cc 	bl	80013a0 <HAL_GetTick>
 8005008:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800500a:	e009      	b.n	8005020 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800500c:	f7fc f9c8 	bl	80013a0 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	; 0x64
 8005018:	d902      	bls.n	8005020 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	f000 bc15 	b.w	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005020:	4b5e      	ldr	r3, [pc, #376]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ef      	beq.n	800500c <HAL_RCC_OscConfig+0x168>
 800502c:	e015      	b.n	800505a <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fc f9b7 	bl	80013a0 <HAL_GetTick>
 8005032:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005034:	e009      	b.n	800504a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005036:	f7fc f9b3 	bl	80013a0 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b64      	cmp	r3, #100	; 0x64
 8005042:	d902      	bls.n	800504a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	f000 bc00 	b.w	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800504a:	4b54      	ldr	r3, [pc, #336]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1ef      	bne.n	8005036 <HAL_RCC_OscConfig+0x192>
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80d8 	beq.w	8005218 <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d018      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1fe>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d014      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1fe>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d010      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1fe>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b09      	cmp	r3, #9
 8005086:	d00c      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1fe>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b11      	cmp	r3, #17
 800508e:	d008      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1fe>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b19      	cmp	r3, #25
 8005096:	d004      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1fe>
 8005098:	f240 11a9 	movw	r1, #425	; 0x1a9
 800509c:	483e      	ldr	r0, [pc, #248]	; (8005198 <HAL_RCC_OscConfig+0x2f4>)
 800509e:	f7fb fecc 	bl	8000e3a <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b7f      	cmp	r3, #127	; 0x7f
 80050a8:	d904      	bls.n	80050b4 <HAL_RCC_OscConfig+0x210>
 80050aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050ae:	483a      	ldr	r0, [pc, #232]	; (8005198 <HAL_RCC_OscConfig+0x2f4>)
 80050b0:	f7fb fec3 	bl	8000e3a <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050b4:	4b39      	ldr	r3, [pc, #228]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050be:	4b37      	ldr	r3, [pc, #220]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_RCC_OscConfig+0x236>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b18      	cmp	r3, #24
 80050ce:	d149      	bne.n	8005164 <HAL_RCC_OscConfig+0x2c0>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d144      	bne.n	8005164 <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050da:	4b30      	ldr	r3, [pc, #192]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_RCC_OscConfig+0x24e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e3ab      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050f2:	4b2a      	ldr	r3, [pc, #168]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 0219 	bic.w	r2, r3, #25
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4927      	ldr	r1, [pc, #156]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fc f94c 	bl	80013a0 <HAL_GetTick>
 8005108:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510c:	f7fc f948 	bl	80013a0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e395      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800511e:	4b1f      	ldr	r3, [pc, #124]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512a:	f7fc f967 	bl	80013fc <HAL_GetREVID>
 800512e:	4602      	mov	r2, r0
 8005130:	f241 0303 	movw	r3, #4099	; 0x1003
 8005134:	429a      	cmp	r2, r3
 8005136:	d80a      	bhi.n	800514e <HAL_RCC_OscConfig+0x2aa>
 8005138:	4b18      	ldr	r3, [pc, #96]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	4915      	ldr	r1, [pc, #84]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800514c:	e064      	b.n	8005218 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	061b      	lsls	r3, r3, #24
 800515c:	490f      	ldr	r1, [pc, #60]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 800515e:	4313      	orrs	r3, r2
 8005160:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005162:	e059      	b.n	8005218 <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d03c      	beq.n	80051e6 <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 0219 	bic.w	r2, r3, #25
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4908      	ldr	r1, [pc, #32]	; (800519c <HAL_RCC_OscConfig+0x2f8>)
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517e:	f7fc f90f 	bl	80013a0 <HAL_GetTick>
 8005182:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005184:	e00c      	b.n	80051a0 <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005186:	f7fc f90b 	bl	80013a0 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d905      	bls.n	80051a0 <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e358      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
 8005198:	0800bfbc 	.word	0x0800bfbc
 800519c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a0:	4b95      	ldr	r3, [pc, #596]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ec      	beq.n	8005186 <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	f7fc f926 	bl	80013fc <HAL_GetREVID>
 80051b0:	4602      	mov	r2, r0
 80051b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d80a      	bhi.n	80051d0 <HAL_RCC_OscConfig+0x32c>
 80051ba:	4b8f      	ldr	r3, [pc, #572]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	031b      	lsls	r3, r3, #12
 80051c8:	498b      	ldr	r1, [pc, #556]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	604b      	str	r3, [r1, #4]
 80051ce:	e023      	b.n	8005218 <HAL_RCC_OscConfig+0x374>
 80051d0:	4b89      	ldr	r3, [pc, #548]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	061b      	lsls	r3, r3, #24
 80051de:	4986      	ldr	r1, [pc, #536]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
 80051e4:	e018      	b.n	8005218 <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e6:	4b84      	ldr	r3, [pc, #528]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a83      	ldr	r2, [pc, #524]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f2:	f7fc f8d5 	bl	80013a0 <HAL_GetTick>
 80051f6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fa:	f7fc f8d1 	bl	80013a0 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e31e      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800520c:	4b7a      	ldr	r3, [pc, #488]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f0      	bne.n	80051fa <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a5 	beq.w	8005370 <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_RCC_OscConfig+0x39c>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d004      	beq.n	8005240 <HAL_RCC_OscConfig+0x39c>
 8005236:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800523a:	4870      	ldr	r0, [pc, #448]	; (80053fc <HAL_RCC_OscConfig+0x558>)
 800523c:	f7fb fdfd 	bl	8000e3a <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	2b1f      	cmp	r3, #31
 8005246:	d904      	bls.n	8005252 <HAL_RCC_OscConfig+0x3ae>
 8005248:	f240 11fb 	movw	r1, #507	; 0x1fb
 800524c:	486b      	ldr	r0, [pc, #428]	; (80053fc <HAL_RCC_OscConfig+0x558>)
 800524e:	f7fb fdf4 	bl	8000e3a <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005252:	4b69      	ldr	r3, [pc, #420]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800525a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800525c:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b08      	cmp	r3, #8
 8005266:	d007      	beq.n	8005278 <HAL_RCC_OscConfig+0x3d4>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b18      	cmp	r3, #24
 800526c:	d12d      	bne.n	80052ca <HAL_RCC_OscConfig+0x426>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d128      	bne.n	80052ca <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005278:	4b5f      	ldr	r3, [pc, #380]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_OscConfig+0x3ec>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	d001      	beq.n	8005290 <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e2dc      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005290:	f7fc f8b4 	bl	80013fc <HAL_GetREVID>
 8005294:	4602      	mov	r2, r0
 8005296:	f241 0303 	movw	r3, #4099	; 0x1003
 800529a:	429a      	cmp	r2, r3
 800529c:	d80a      	bhi.n	80052b4 <HAL_RCC_OscConfig+0x410>
 800529e:	4b56      	ldr	r3, [pc, #344]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	069b      	lsls	r3, r3, #26
 80052ac:	4952      	ldr	r1, [pc, #328]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052b2:	e05d      	b.n	8005370 <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052b4:	4b50      	ldr	r3, [pc, #320]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	494d      	ldr	r1, [pc, #308]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052c8:	e052      	b.n	8005370 <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d035      	beq.n	800533e <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052d2:	4b49      	ldr	r3, [pc, #292]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a48      	ldr	r2, [pc, #288]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052de:	f7fc f85f 	bl	80013a0 <HAL_GetTick>
 80052e2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052e6:	f7fc f85b 	bl	80013a0 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e2a8      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052f8:	4b3f      	ldr	r3, [pc, #252]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005304:	f7fc f87a 	bl	80013fc <HAL_GetREVID>
 8005308:	4602      	mov	r2, r0
 800530a:	f241 0303 	movw	r3, #4099	; 0x1003
 800530e:	429a      	cmp	r2, r3
 8005310:	d80a      	bhi.n	8005328 <HAL_RCC_OscConfig+0x484>
 8005312:	4b39      	ldr	r3, [pc, #228]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	069b      	lsls	r3, r3, #26
 8005320:	4935      	ldr	r1, [pc, #212]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 8005322:	4313      	orrs	r3, r2
 8005324:	604b      	str	r3, [r1, #4]
 8005326:	e023      	b.n	8005370 <HAL_RCC_OscConfig+0x4cc>
 8005328:	4b33      	ldr	r3, [pc, #204]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	061b      	lsls	r3, r3, #24
 8005336:	4930      	ldr	r1, [pc, #192]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 8005338:	4313      	orrs	r3, r2
 800533a:	60cb      	str	r3, [r1, #12]
 800533c:	e018      	b.n	8005370 <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800533e:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2d      	ldr	r2, [pc, #180]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 8005344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534a:	f7fc f829 	bl	80013a0 <HAL_GetTick>
 800534e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005352:	f7fc f825 	bl	80013a0 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e272      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d047      	beq.n	800540c <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCC_OscConfig+0x4f2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d004      	beq.n	8005396 <HAL_RCC_OscConfig+0x4f2>
 800538c:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8005390:	481a      	ldr	r0, [pc, #104]	; (80053fc <HAL_RCC_OscConfig+0x558>)
 8005392:	f7fb fd52 	bl	8000e3a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d019      	beq.n	80053d2 <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539e:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80053a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fb fff9 	bl	80013a0 <HAL_GetTick>
 80053ae:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053b2:	f7fb fff5 	bl	80013a0 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e242      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80053c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCC_OscConfig+0x50e>
 80053d0:	e01c      	b.n	800540c <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80053d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d6:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <HAL_RCC_OscConfig+0x554>)
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053de:	f7fb ffdf 	bl	80013a0 <HAL_GetTick>
 80053e2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053e4:	e00c      	b.n	8005400 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053e6:	f7fb ffdb 	bl	80013a0 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d905      	bls.n	8005400 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e228      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
 80053f8:	58024400 	.word	0x58024400
 80053fc:	0800bfbc 	.word	0x0800bfbc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005400:	4b71      	ldr	r3, [pc, #452]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ec      	bne.n	80053e6 <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d043      	beq.n	80054a0 <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_RCC_OscConfig+0x58e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d004      	beq.n	8005432 <HAL_RCC_OscConfig+0x58e>
 8005428:	f240 2167 	movw	r1, #615	; 0x267
 800542c:	4867      	ldr	r0, [pc, #412]	; (80055cc <HAL_RCC_OscConfig+0x728>)
 800542e:	f7fb fd04 	bl	8000e3a <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d019      	beq.n	800546e <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800543a:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a62      	ldr	r2, [pc, #392]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005444:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005446:	f7fb ffab 	bl	80013a0 <HAL_GetTick>
 800544a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800544e:	f7fb ffa7 	bl	80013a0 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e1f4      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005460:	4b59      	ldr	r3, [pc, #356]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x5aa>
 800546c:	e018      	b.n	80054a0 <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800546e:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a55      	ldr	r2, [pc, #340]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005474:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005478:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800547a:	f7fb ff91 	bl	80013a0 <HAL_GetTick>
 800547e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005482:	f7fb ff8d 	bl	80013a0 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e1da      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005494:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f0      	bne.n	8005482 <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8099 	beq.w	80055e0 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x62c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d008      	beq.n	80054d0 <HAL_RCC_OscConfig+0x62c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	d004      	beq.n	80054d0 <HAL_RCC_OscConfig+0x62c>
 80054c6:	f240 2191 	movw	r1, #657	; 0x291
 80054ca:	4840      	ldr	r0, [pc, #256]	; (80055cc <HAL_RCC_OscConfig+0x728>)
 80054cc:	f7fb fcb5 	bl	8000e3a <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054d0:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCC_OscConfig+0x72c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <HAL_RCC_OscConfig+0x72c>)
 80054d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054dc:	f7fb ff60 	bl	80013a0 <HAL_GetTick>
 80054e0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054e4:	f7fb ff5c 	bl	80013a0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e1a9      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054f6:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <HAL_RCC_OscConfig+0x72c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d106      	bne.n	8005518 <HAL_RCC_OscConfig+0x674>
 800550a:	4b2f      	ldr	r3, [pc, #188]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	6713      	str	r3, [r2, #112]	; 0x70
 8005516:	e02d      	b.n	8005574 <HAL_RCC_OscConfig+0x6d0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10c      	bne.n	800553a <HAL_RCC_OscConfig+0x696>
 8005520:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	6713      	str	r3, [r2, #112]	; 0x70
 800552c:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005532:	f023 0304 	bic.w	r3, r3, #4
 8005536:	6713      	str	r3, [r2, #112]	; 0x70
 8005538:	e01c      	b.n	8005574 <HAL_RCC_OscConfig+0x6d0>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b05      	cmp	r3, #5
 8005540:	d10c      	bne.n	800555c <HAL_RCC_OscConfig+0x6b8>
 8005542:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	4a20      	ldr	r2, [pc, #128]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005548:	f043 0304 	orr.w	r3, r3, #4
 800554c:	6713      	str	r3, [r2, #112]	; 0x70
 800554e:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6713      	str	r3, [r2, #112]	; 0x70
 800555a:	e00b      	b.n	8005574 <HAL_RCC_OscConfig+0x6d0>
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	4a19      	ldr	r2, [pc, #100]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	6713      	str	r3, [r2, #112]	; 0x70
 8005568:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 800556e:	f023 0304 	bic.w	r3, r3, #4
 8005572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fb ff10 	bl	80013a0 <HAL_GetTick>
 8005580:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005582:	e00a      	b.n	800559a <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005584:	f7fb ff0c 	bl	80013a0 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e157      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_OscConfig+0x724>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ee      	beq.n	8005584 <HAL_RCC_OscConfig+0x6e0>
 80055a6:	e01b      	b.n	80055e0 <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a8:	f7fb fefa 	bl	80013a0 <HAL_GetTick>
 80055ac:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055ae:	e011      	b.n	80055d4 <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b0:	f7fb fef6 	bl	80013a0 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80055be:	4293      	cmp	r3, r2
 80055c0:	d908      	bls.n	80055d4 <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e141      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
 80055cc:	0800bfbc 	.word	0x0800bfbc
 80055d0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055d4:	4b9f      	ldr	r3, [pc, #636]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e7      	bne.n	80055b0 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00c      	beq.n	8005602 <HAL_RCC_OscConfig+0x75e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_OscConfig+0x75e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d004      	beq.n	8005602 <HAL_RCC_OscConfig+0x75e>
 80055f8:	f240 21c3 	movw	r1, #707	; 0x2c3
 80055fc:	4896      	ldr	r0, [pc, #600]	; (8005858 <HAL_RCC_OscConfig+0x9b4>)
 80055fe:	f7fb fc1c 	bl	8000e3a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 811e 	beq.w	8005848 <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800560c:	4b91      	ldr	r3, [pc, #580]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005614:	2b18      	cmp	r3, #24
 8005616:	f000 8115 	beq.w	8005844 <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b02      	cmp	r3, #2
 8005620:	f040 80f6 	bne.w	8005810 <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	2b01      	cmp	r3, #1
 800562a:	d010      	beq.n	800564e <HAL_RCC_OscConfig+0x7aa>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <HAL_RCC_OscConfig+0x7aa>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	2b03      	cmp	r3, #3
 800563a:	d008      	beq.n	800564e <HAL_RCC_OscConfig+0x7aa>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	2b02      	cmp	r3, #2
 8005642:	d004      	beq.n	800564e <HAL_RCC_OscConfig+0x7aa>
 8005644:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005648:	4883      	ldr	r0, [pc, #524]	; (8005858 <HAL_RCC_OscConfig+0x9b4>)
 800564a:	f7fb fbf6 	bl	8000e3a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_RCC_OscConfig+0x7ba>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	2b3f      	cmp	r3, #63	; 0x3f
 800565c:	d904      	bls.n	8005668 <HAL_RCC_OscConfig+0x7c4>
 800565e:	f240 21cd 	movw	r1, #717	; 0x2cd
 8005662:	487d      	ldr	r0, [pc, #500]	; (8005858 <HAL_RCC_OscConfig+0x9b4>)
 8005664:	f7fb fbe9 	bl	8000e3a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	2b03      	cmp	r3, #3
 800566e:	d904      	bls.n	800567a <HAL_RCC_OscConfig+0x7d6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005678:	d904      	bls.n	8005684 <HAL_RCC_OscConfig+0x7e0>
 800567a:	f240 21ce 	movw	r1, #718	; 0x2ce
 800567e:	4876      	ldr	r0, [pc, #472]	; (8005858 <HAL_RCC_OscConfig+0x9b4>)
 8005680:	f7fb fbdb 	bl	8000e3a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_RCC_OscConfig+0x7f0>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	2b80      	cmp	r3, #128	; 0x80
 8005692:	d904      	bls.n	800569e <HAL_RCC_OscConfig+0x7fa>
 8005694:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005698:	486f      	ldr	r0, [pc, #444]	; (8005858 <HAL_RCC_OscConfig+0x9b4>)
 800569a:	f7fb fbce 	bl	8000e3a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_RCC_OscConfig+0x80a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	2b80      	cmp	r3, #128	; 0x80
 80056ac:	d904      	bls.n	80056b8 <HAL_RCC_OscConfig+0x814>
 80056ae:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80056b2:	4869      	ldr	r0, [pc, #420]	; (8005858 <HAL_RCC_OscConfig+0x9b4>)
 80056b4:	f7fb fbc1 	bl	8000e3a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_RCC_OscConfig+0x824>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d904      	bls.n	80056d2 <HAL_RCC_OscConfig+0x82e>
 80056c8:	f240 21d1 	movw	r1, #721	; 0x2d1
 80056cc:	4862      	ldr	r0, [pc, #392]	; (8005858 <HAL_RCC_OscConfig+0x9b4>)
 80056ce:	f7fb fbb4 	bl	8000e3a <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056da:	d304      	bcc.n	80056e6 <HAL_RCC_OscConfig+0x842>
 80056dc:	f240 21d2 	movw	r1, #722	; 0x2d2
 80056e0:	485d      	ldr	r0, [pc, #372]	; (8005858 <HAL_RCC_OscConfig+0x9b4>)
 80056e2:	f7fb fbaa 	bl	8000e3a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e6:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a5a      	ldr	r2, [pc, #360]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80056ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f2:	f7fb fe55 	bl	80013a0 <HAL_GetTick>
 80056f6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fa:	f7fb fe51 	bl	80013a0 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e09e      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800570c:	4b51      	ldr	r3, [pc, #324]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005718:	4b4e      	ldr	r3, [pc, #312]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 800571a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800571c:	4b4f      	ldr	r3, [pc, #316]	; (800585c <HAL_RCC_OscConfig+0x9b8>)
 800571e:	4013      	ands	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005728:	0112      	lsls	r2, r2, #4
 800572a:	430a      	orrs	r2, r1
 800572c:	4949      	ldr	r1, [pc, #292]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 800572e:	4313      	orrs	r3, r2
 8005730:	628b      	str	r3, [r1, #40]	; 0x28
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	3b01      	subs	r3, #1
 8005738:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	3b01      	subs	r3, #1
 8005742:	025b      	lsls	r3, r3, #9
 8005744:	b29b      	uxth	r3, r3
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	3b01      	subs	r3, #1
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575a:	3b01      	subs	r3, #1
 800575c:	061b      	lsls	r3, r3, #24
 800575e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005762:	493c      	ldr	r1, [pc, #240]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005768:	4b3a      	ldr	r3, [pc, #232]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	4a39      	ldr	r2, [pc, #228]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005774:	4b37      	ldr	r3, [pc, #220]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 8005776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005778:	4b39      	ldr	r3, [pc, #228]	; (8005860 <HAL_RCC_OscConfig+0x9bc>)
 800577a:	4013      	ands	r3, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005780:	00d2      	lsls	r2, r2, #3
 8005782:	4934      	ldr	r1, [pc, #208]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 8005784:	4313      	orrs	r3, r2
 8005786:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005788:	4b32      	ldr	r3, [pc, #200]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	f023 020c 	bic.w	r2, r3, #12
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	492f      	ldr	r1, [pc, #188]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 8005796:	4313      	orrs	r3, r2
 8005798:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800579a:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	f023 0202 	bic.w	r2, r3, #2
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	492b      	ldr	r1, [pc, #172]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057ac:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b8:	4b26      	ldr	r3, [pc, #152]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	4a25      	ldr	r2, [pc, #148]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057c4:	4b23      	ldr	r3, [pc, #140]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80057d0:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057dc:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 80057e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fb fdda 	bl	80013a0 <HAL_GetTick>
 80057ec:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fb fdd6 	bl	80013a0 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e023      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005802:	4b14      	ldr	r3, [pc, #80]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x94c>
 800580e:	e01b      	b.n	8005848 <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005810:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a0f      	ldr	r2, [pc, #60]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 8005816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800581a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fb fdc0 	bl	80013a0 <HAL_GetTick>
 8005820:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005824:	f7fb fdbc 	bl	80013a0 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e009      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005836:	4b07      	ldr	r3, [pc, #28]	; (8005854 <HAL_RCC_OscConfig+0x9b0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x980>
 8005842:	e001      	b.n	8005848 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	58024400 	.word	0x58024400
 8005858:	0800bfbc 	.word	0x0800bfbc
 800585c:	fffffc0c 	.word	0xfffffc0c
 8005860:	ffff0007 	.word	0xffff0007

08005864 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e345      	b.n	8005f04 <HAL_RCC_ClockConfig+0x6a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_RCC_ClockConfig+0x24>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b3f      	cmp	r3, #63	; 0x3f
 8005886:	d904      	bls.n	8005892 <HAL_RCC_ClockConfig+0x2e>
 8005888:	f240 3152 	movw	r1, #850	; 0x352
 800588c:	4827      	ldr	r0, [pc, #156]	; (800592c <HAL_RCC_ClockConfig+0xc8>)
 800588e:	f7fb fad4 	bl	8000e3a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d031      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d02e      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d02b      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d028      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d025      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b05      	cmp	r3, #5
 80058b4:	d022      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b06      	cmp	r3, #6
 80058ba:	d01f      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b07      	cmp	r3, #7
 80058c0:	d01c      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d019      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b09      	cmp	r3, #9
 80058cc:	d016      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b0a      	cmp	r3, #10
 80058d2:	d013      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b0b      	cmp	r3, #11
 80058d8:	d010      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b0c      	cmp	r3, #12
 80058de:	d00d      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b0d      	cmp	r3, #13
 80058e4:	d00a      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b0e      	cmp	r3, #14
 80058ea:	d007      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	d004      	beq.n	80058fc <HAL_RCC_ClockConfig+0x98>
 80058f2:	f240 3153 	movw	r1, #851	; 0x353
 80058f6:	480d      	ldr	r0, [pc, #52]	; (800592c <HAL_RCC_ClockConfig+0xc8>)
 80058f8:	f7fb fa9f 	bl	8000e3a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058fc:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <HAL_RCC_ClockConfig+0xcc>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d914      	bls.n	8005934 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_ClockConfig+0xcc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f023 020f 	bic.w	r2, r3, #15
 8005912:	4907      	ldr	r1, [pc, #28]	; (8005930 <HAL_RCC_ClockConfig+0xcc>)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	4313      	orrs	r3, r2
 8005918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCC_ClockConfig+0xcc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e2eb      	b.n	8005f04 <HAL_RCC_ClockConfig+0x6a0>
 800592c:	0800bfbc 	.word	0x0800bfbc
 8005930:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d029      	beq.n	8005994 <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	4b9a      	ldr	r3, [pc, #616]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800594c:	429a      	cmp	r2, r3
 800594e:	d921      	bls.n	8005994 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d014      	beq.n	8005982 <HAL_RCC_ClockConfig+0x11e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d010      	beq.n	8005982 <HAL_RCC_ClockConfig+0x11e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b50      	cmp	r3, #80	; 0x50
 8005966:	d00c      	beq.n	8005982 <HAL_RCC_ClockConfig+0x11e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b60      	cmp	r3, #96	; 0x60
 800596e:	d008      	beq.n	8005982 <HAL_RCC_ClockConfig+0x11e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	d004      	beq.n	8005982 <HAL_RCC_ClockConfig+0x11e>
 8005978:	f240 316e 	movw	r1, #878	; 0x36e
 800597c:	488d      	ldr	r0, [pc, #564]	; (8005bb4 <HAL_RCC_ClockConfig+0x350>)
 800597e:	f7fb fa5c 	bl	8000e3a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005982:	4b8b      	ldr	r3, [pc, #556]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	4988      	ldr	r1, [pc, #544]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005990:	4313      	orrs	r3, r2
 8005992:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d029      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	4b82      	ldr	r3, [pc, #520]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d921      	bls.n	80059f4 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d014      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x17e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d010      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x17e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	2b50      	cmp	r3, #80	; 0x50
 80059c6:	d00c      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x17e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	2b60      	cmp	r3, #96	; 0x60
 80059ce:	d008      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x17e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	2b70      	cmp	r3, #112	; 0x70
 80059d6:	d004      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x17e>
 80059d8:	f44f 715e 	mov.w	r1, #888	; 0x378
 80059dc:	4875      	ldr	r0, [pc, #468]	; (8005bb4 <HAL_RCC_ClockConfig+0x350>)
 80059de:	f7fb fa2c 	bl	8000e3a <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059e2:	4b73      	ldr	r3, [pc, #460]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4970      	ldr	r1, [pc, #448]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d02d      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	4b6a      	ldr	r3, [pc, #424]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d925      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d018      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x1e6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a20:	d013      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x1e6>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005a2a:	d00e      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x1e6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a34:	d009      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x1e6>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a3e:	d004      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x1e6>
 8005a40:	f240 3182 	movw	r1, #898	; 0x382
 8005a44:	485b      	ldr	r0, [pc, #364]	; (8005bb4 <HAL_RCC_ClockConfig+0x350>)
 8005a46:	f7fb f9f8 	bl	8000e3a <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a4a:	4b59      	ldr	r3, [pc, #356]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	4956      	ldr	r1, [pc, #344]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d029      	beq.n	8005abc <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	4b50      	ldr	r3, [pc, #320]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d921      	bls.n	8005abc <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d014      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x246>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d010      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x246>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	2b50      	cmp	r3, #80	; 0x50
 8005a8e:	d00c      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x246>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	2b60      	cmp	r3, #96	; 0x60
 8005a96:	d008      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x246>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	2b70      	cmp	r3, #112	; 0x70
 8005a9e:	d004      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x246>
 8005aa0:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8005aa4:	4843      	ldr	r0, [pc, #268]	; (8005bb4 <HAL_RCC_ClockConfig+0x350>)
 8005aa6:	f7fb f9c8 	bl	8000e3a <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005aaa:	4b41      	ldr	r3, [pc, #260]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	493e      	ldr	r1, [pc, #248]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d039      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	4b38      	ldr	r3, [pc, #224]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d931      	bls.n	8005b3c <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d024      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	2b09      	cmp	r3, #9
 8005aee:	d01c      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b0a      	cmp	r3, #10
 8005af6:	d018      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b0b      	cmp	r3, #11
 8005afe:	d014      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d010      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b0d      	cmp	r3, #13
 8005b0e:	d00c      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b0e      	cmp	r3, #14
 8005b16:	d008      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b0f      	cmp	r3, #15
 8005b1e:	d004      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c6>
 8005b20:	f240 3197 	movw	r1, #919	; 0x397
 8005b24:	4823      	ldr	r0, [pc, #140]	; (8005bb4 <HAL_RCC_ClockConfig+0x350>)
 8005b26:	f7fb f988 	bl	8000e3a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b2a:	4b21      	ldr	r3, [pc, #132]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f023 020f 	bic.w	r2, r3, #15
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	491e      	ldr	r1, [pc, #120]	; (8005bb0 <HAL_RCC_ClockConfig+0x34c>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80a2 	beq.w	8005c8e <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d032      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b5a:	d02d      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005b64:	d028      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b6e:	d023      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005b78:	d01e      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b82:	d019      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005b8c:	d014      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005b96:	d00f      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005ba2:	f240 319f 	movw	r1, #927	; 0x39f
 8005ba6:	4803      	ldr	r0, [pc, #12]	; (8005bb4 <HAL_RCC_ClockConfig+0x350>)
 8005ba8:	f7fb f947 	bl	8000e3a <assert_failed>
 8005bac:	e004      	b.n	8005bb8 <HAL_RCC_ClockConfig+0x354>
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	0800bfbc 	.word	0x0800bfbc
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d010      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x37e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00c      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x37e>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d008      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x37e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d004      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x37e>
 8005bd8:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8005bdc:	4858      	ldr	r0, [pc, #352]	; (8005d40 <HAL_RCC_ClockConfig+0x4dc>)
 8005bde:	f7fb f92c 	bl	8000e3a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005be2:	4b58      	ldr	r3, [pc, #352]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	4955      	ldr	r1, [pc, #340]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d107      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bfc:	4b51      	ldr	r3, [pc, #324]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d121      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e17b      	b.n	8005f04 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d107      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c14:	4b4b      	ldr	r3, [pc, #300]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d115      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e16f      	b.n	8005f04 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d107      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c2c:	4b45      	ldr	r3, [pc, #276]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d109      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e163      	b.n	8005f04 <HAL_RCC_ClockConfig+0x6a0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c3c:	4b41      	ldr	r3, [pc, #260]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e15b      	b.n	8005f04 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c4c:	4b3d      	ldr	r3, [pc, #244]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f023 0207 	bic.w	r2, r3, #7
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	493a      	ldr	r1, [pc, #232]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5e:	f7fb fb9f 	bl	80013a0 <HAL_GetTick>
 8005c62:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c64:	e00a      	b.n	8005c7c <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c66:	f7fb fb9b 	bl	80013a0 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e143      	b.n	8005f04 <HAL_RCC_ClockConfig+0x6a0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c7c:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d1eb      	bne.n	8005c66 <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d039      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	4b29      	ldr	r3, [pc, #164]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d231      	bcs.n	8005d0e <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d024      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d020      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b09      	cmp	r3, #9
 8005cc0:	d01c      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	2b0a      	cmp	r3, #10
 8005cc8:	d018      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2b0b      	cmp	r3, #11
 8005cd0:	d014      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b0c      	cmp	r3, #12
 8005cd8:	d010      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b0d      	cmp	r3, #13
 8005ce0:	d00c      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b0e      	cmp	r3, #14
 8005ce8:	d008      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b0f      	cmp	r3, #15
 8005cf0:	d004      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x498>
 8005cf2:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8005cf6:	4812      	ldr	r0, [pc, #72]	; (8005d40 <HAL_RCC_ClockConfig+0x4dc>)
 8005cf8:	f7fb f89f 	bl	8000e3a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cfc:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f023 020f 	bic.w	r2, r3, #15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	490e      	ldr	r1, [pc, #56]	; (8005d44 <HAL_RCC_ClockConfig+0x4e0>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <HAL_RCC_ClockConfig+0x4e4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d217      	bcs.n	8005d4c <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <HAL_RCC_ClockConfig+0x4e4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f023 020f 	bic.w	r2, r3, #15
 8005d24:	4908      	ldr	r1, [pc, #32]	; (8005d48 <HAL_RCC_ClockConfig+0x4e4>)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_RCC_ClockConfig+0x4e4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d008      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e0e2      	b.n	8005f04 <HAL_RCC_ClockConfig+0x6a0>
 8005d3e:	bf00      	nop
 8005d40:	0800bfbc 	.word	0x0800bfbc
 8005d44:	58024400 	.word	0x58024400
 8005d48:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d029      	beq.n	8005dac <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	4b6b      	ldr	r3, [pc, #428]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d221      	bcs.n	8005dac <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d014      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x536>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d010      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x536>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b50      	cmp	r3, #80	; 0x50
 8005d7e:	d00c      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x536>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b60      	cmp	r3, #96	; 0x60
 8005d86:	d008      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x536>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b70      	cmp	r3, #112	; 0x70
 8005d8e:	d004      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x536>
 8005d90:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8005d94:	485e      	ldr	r0, [pc, #376]	; (8005f10 <HAL_RCC_ClockConfig+0x6ac>)
 8005d96:	f7fb f850 	bl	8000e3a <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d9a:	4b5c      	ldr	r3, [pc, #368]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	4959      	ldr	r1, [pc, #356]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d029      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	4b53      	ldr	r3, [pc, #332]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d221      	bcs.n	8005e0c <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d014      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x596>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d010      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x596>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	2b50      	cmp	r3, #80	; 0x50
 8005dde:	d00c      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x596>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	2b60      	cmp	r3, #96	; 0x60
 8005de6:	d008      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x596>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	2b70      	cmp	r3, #112	; 0x70
 8005dee:	d004      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x596>
 8005df0:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005df4:	4846      	ldr	r0, [pc, #280]	; (8005f10 <HAL_RCC_ClockConfig+0x6ac>)
 8005df6:	f7fb f820 	bl	8000e3a <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dfa:	4b44      	ldr	r3, [pc, #272]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	4941      	ldr	r1, [pc, #260]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02d      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	4b3b      	ldr	r3, [pc, #236]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d225      	bcs.n	8005e74 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d018      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x5fe>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e38:	d013      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x5fe>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e42:	d00e      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x5fe>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x5fe>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e56:	d004      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x5fe>
 8005e58:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8005e5c:	482c      	ldr	r0, [pc, #176]	; (8005f10 <HAL_RCC_ClockConfig+0x6ac>)
 8005e5e:	f7fa ffec 	bl	8000e3a <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e62:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	4927      	ldr	r1, [pc, #156]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d029      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	4b21      	ldr	r3, [pc, #132]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d221      	bcs.n	8005ed4 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d014      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x65e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d010      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x65e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d00c      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x65e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	2b60      	cmp	r3, #96	; 0x60
 8005eae:	d008      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x65e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	2b70      	cmp	r3, #112	; 0x70
 8005eb6:	d004      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x65e>
 8005eb8:	f240 4112 	movw	r1, #1042	; 0x412
 8005ebc:	4814      	ldr	r0, [pc, #80]	; (8005f10 <HAL_RCC_ClockConfig+0x6ac>)
 8005ebe:	f7fa ffbc 	bl	8000e3a <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	490f      	ldr	r1, [pc, #60]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ed4:	f000 f824 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8005ed8:	4601      	mov	r1, r0
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <HAL_RCC_ClockConfig+0x6a8>)
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	0a1b      	lsrs	r3, r3, #8
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	4a0b      	ldr	r2, [pc, #44]	; (8005f14 <HAL_RCC_ClockConfig+0x6b0>)
 8005ee6:	5cd3      	ldrb	r3, [r2, r3]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	fa21 f303 	lsr.w	r3, r1, r3
 8005ef0:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <HAL_RCC_ClockConfig+0x6b4>)
 8005ef2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_RCC_ClockConfig+0x6b8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fb fa07 	bl	800130c <HAL_InitTick>
 8005efe:	4603      	mov	r3, r0
 8005f00:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	0800bfbc 	.word	0x0800bfbc
 8005f14:	0800c0f0 	.word	0x0800c0f0
 8005f18:	24000000 	.word	0x24000000
 8005f1c:	24000008 	.word	0x24000008

08005f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b089      	sub	sp, #36	; 0x24
 8005f24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f26:	4baf      	ldr	r3, [pc, #700]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f2e:	2b18      	cmp	r3, #24
 8005f30:	f200 814e 	bhi.w	80061d0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005fa1 	.word	0x08005fa1
 8005f40:	080061d1 	.word	0x080061d1
 8005f44:	080061d1 	.word	0x080061d1
 8005f48:	080061d1 	.word	0x080061d1
 8005f4c:	080061d1 	.word	0x080061d1
 8005f50:	080061d1 	.word	0x080061d1
 8005f54:	080061d1 	.word	0x080061d1
 8005f58:	080061d1 	.word	0x080061d1
 8005f5c:	08005fc7 	.word	0x08005fc7
 8005f60:	080061d1 	.word	0x080061d1
 8005f64:	080061d1 	.word	0x080061d1
 8005f68:	080061d1 	.word	0x080061d1
 8005f6c:	080061d1 	.word	0x080061d1
 8005f70:	080061d1 	.word	0x080061d1
 8005f74:	080061d1 	.word	0x080061d1
 8005f78:	080061d1 	.word	0x080061d1
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	080061d1 	.word	0x080061d1
 8005f84:	080061d1 	.word	0x080061d1
 8005f88:	080061d1 	.word	0x080061d1
 8005f8c:	080061d1 	.word	0x080061d1
 8005f90:	080061d1 	.word	0x080061d1
 8005f94:	080061d1 	.word	0x080061d1
 8005f98:	080061d1 	.word	0x080061d1
 8005f9c:	08005fd3 	.word	0x08005fd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fa0:	4b90      	ldr	r3, [pc, #576]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fac:	4b8d      	ldr	r3, [pc, #564]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	08db      	lsrs	r3, r3, #3
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	4a8c      	ldr	r2, [pc, #560]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fbe:	e10a      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fc0:	4b89      	ldr	r3, [pc, #548]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fc2:	61bb      	str	r3, [r7, #24]
    break;
 8005fc4:	e107      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fc6:	4b89      	ldr	r3, [pc, #548]	; (80061ec <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005fc8:	61bb      	str	r3, [r7, #24]
    break;
 8005fca:	e104      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fcc:	4b88      	ldr	r3, [pc, #544]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005fce:	61bb      	str	r3, [r7, #24]
    break;
 8005fd0:	e101      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fd2:	4b84      	ldr	r3, [pc, #528]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fdc:	4b81      	ldr	r3, [pc, #516]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fe8:	4b7e      	ldr	r3, [pc, #504]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ff2:	4b7c      	ldr	r3, [pc, #496]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff6:	08db      	lsrs	r3, r3, #3
 8005ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80da 	beq.w	80061ca <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d05a      	beq.n	80060d2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800601c:	2b01      	cmp	r3, #1
 800601e:	d302      	bcc.n	8006026 <HAL_RCC_GetSysClockFreq+0x106>
 8006020:	2b02      	cmp	r3, #2
 8006022:	d078      	beq.n	8006116 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006024:	e099      	b.n	800615a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006026:	4b6f      	ldr	r3, [pc, #444]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d02d      	beq.n	800608e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006032:	4b6c      	ldr	r3, [pc, #432]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	4a6a      	ldr	r2, [pc, #424]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800603e:	fa22 f303 	lsr.w	r3, r2, r3
 8006042:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	ee07 3a90 	vmov	s15, r3
 8006054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605c:	4b61      	ldr	r3, [pc, #388]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006070:	eddf 5a60 	vldr	s11, [pc, #384]	; 80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006088:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800608c:	e087      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006098:	eddf 6a57 	vldr	s13, [pc, #348]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800609c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a0:	4b50      	ldr	r3, [pc, #320]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060d0:	e065      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060dc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80061fc <HAL_RCC_GetSysClockFreq+0x2dc>
 80060e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e4:	4b3f      	ldr	r3, [pc, #252]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80060f8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006110:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006114:	e043      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006120:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006128:	4b2e      	ldr	r3, [pc, #184]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006138:	ed97 6a02 	vldr	s12, [r7, #8]
 800613c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006154:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006158:	e021      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006164:	eddf 6a25 	vldr	s13, [pc, #148]	; 80061fc <HAL_RCC_GetSysClockFreq+0x2dc>
 8006168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616c:	4b1d      	ldr	r3, [pc, #116]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006180:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006198:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800619c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	0a5b      	lsrs	r3, r3, #9
 80061a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a8:	3301      	adds	r3, #1
 80061aa:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c2:	ee17 3a90 	vmov	r3, s15
 80061c6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061c8:	e005      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61bb      	str	r3, [r7, #24]
    break;
 80061ce:	e002      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80061d0:	4b06      	ldr	r3, [pc, #24]	; (80061ec <HAL_RCC_GetSysClockFreq+0x2cc>)
 80061d2:	61bb      	str	r3, [r7, #24]
    break;
 80061d4:	bf00      	nop
  }

  return sysclockfreq;
 80061d6:	69bb      	ldr	r3, [r7, #24]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3724      	adds	r7, #36	; 0x24
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	58024400 	.word	0x58024400
 80061e8:	03d09000 	.word	0x03d09000
 80061ec:	003d0900 	.word	0x003d0900
 80061f0:	00b71b00 	.word	0x00b71b00
 80061f4:	46000000 	.word	0x46000000
 80061f8:	4c742400 	.word	0x4c742400
 80061fc:	4a742400 	.word	0x4a742400
 8006200:	4b371b00 	.word	0x4b371b00

08006204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006208:	f001 fc94 	bl	8007b34 <HAL_RCCEx_GetD1SysClockFreq>
 800620c:	4601      	mov	r1, r0
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	4a07      	ldr	r2, [pc, #28]	; (8006234 <HAL_RCC_GetHCLKFreq+0x30>)
 8006218:	5cd3      	ldrb	r3, [r2, r3]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	fa21 f303 	lsr.w	r3, r1, r3
 8006222:	4a05      	ldr	r2, [pc, #20]	; (8006238 <HAL_RCC_GetHCLKFreq+0x34>)
 8006224:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8006226:	4b04      	ldr	r3, [pc, #16]	; (8006238 <HAL_RCC_GetHCLKFreq+0x34>)
 8006228:	681b      	ldr	r3, [r3, #0]
}
 800622a:	4618      	mov	r0, r3
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	58024400 	.word	0x58024400
 8006234:	0800c0f0 	.word	0x0800c0f0
 8006238:	24000004 	.word	0x24000004

0800623c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006240:	f7ff ffe0 	bl	8006204 <HAL_RCC_GetHCLKFreq>
 8006244:	4601      	mov	r1, r0
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	091b      	lsrs	r3, r3, #4
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	4a04      	ldr	r2, [pc, #16]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	fa21 f303 	lsr.w	r3, r1, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	58024400 	.word	0x58024400
 8006264:	0800c0f0 	.word	0x0800c0f0

08006268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800626c:	f7ff ffca 	bl	8006204 <HAL_RCC_GetHCLKFreq>
 8006270:	4601      	mov	r1, r0
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4a04      	ldr	r2, [pc, #16]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800627e:	5cd3      	ldrb	r3, [r2, r3]
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	58024400 	.word	0x58024400
 8006290:	0800c0f0 	.word	0x0800c0f0

08006294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800629c:	2300      	movs	r3, #0
 800629e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062a0:	2300      	movs	r3, #0
 80062a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d03d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b8:	d013      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80062ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062be:	d802      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80062c4:	e01f      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80062c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062ca:	d013      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80062cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062d0:	d01c      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80062d2:	e018      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d4:	4baf      	ldr	r3, [pc, #700]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4aae      	ldr	r2, [pc, #696]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062e0:	e015      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	2102      	movs	r1, #2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 fc3f 	bl	8007b6c <RCCEx_PLL2_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062f2:	e00c      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3324      	adds	r3, #36	; 0x24
 80062f8:	2102      	movs	r1, #2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fd58 	bl	8007db0 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
      break;
 800630a:	e000      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800630c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006314:	4b9f      	ldr	r3, [pc, #636]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006320:	499c      	ldr	r1, [pc, #624]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006322:	4313      	orrs	r3, r2
 8006324:	650b      	str	r3, [r1, #80]	; 0x50
 8006326:	e001      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d03d      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	2b04      	cmp	r3, #4
 800633e:	d826      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	0800635d 	.word	0x0800635d
 800634c:	0800636b 	.word	0x0800636b
 8006350:	0800637d 	.word	0x0800637d
 8006354:	08006395 	.word	0x08006395
 8006358:	08006395 	.word	0x08006395
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635c:	4b8d      	ldr	r3, [pc, #564]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	4a8c      	ldr	r2, [pc, #560]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006368:	e015      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f001 fbfb 	bl	8007b6c <RCCEx_PLL2_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800637a:	e00c      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3324      	adds	r3, #36	; 0x24
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f001 fd14 	bl	8007db0 <RCCEx_PLL3_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800638c:	e003      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
      break;
 8006392:	e000      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800639c:	4b7d      	ldr	r3, [pc, #500]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	f023 0207 	bic.w	r2, r3, #7
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a8:	497a      	ldr	r1, [pc, #488]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	650b      	str	r3, [r1, #80]	; 0x50
 80063ae:	e001      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d03e      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d01c      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80063c8:	2b80      	cmp	r3, #128	; 0x80
 80063ca:	d804      	bhi.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d00d      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80063d4:	e01e      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80063d6:	2bc0      	cmp	r3, #192	; 0xc0
 80063d8:	d01f      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80063da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063de:	d01e      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063e0:	e018      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e2:	4b6c      	ldr	r3, [pc, #432]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	4a6b      	ldr	r2, [pc, #428]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063ee:	e017      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3304      	adds	r3, #4
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 fbb8 	bl	8007b6c <RCCEx_PLL2_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006400:	e00e      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3324      	adds	r3, #36	; 0x24
 8006406:	2100      	movs	r1, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f001 fcd1 	bl	8007db0 <RCCEx_PLL3_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006412:	e005      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	75fb      	strb	r3, [r7, #23]
      break;
 8006418:	e002      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800641e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006426:	4b5b      	ldr	r3, [pc, #364]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006432:	4958      	ldr	r1, [pc, #352]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006434:	4313      	orrs	r3, r2
 8006436:	650b      	str	r3, [r1, #80]	; 0x50
 8006438:	e001      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006446:	2b00      	cmp	r3, #0
 8006448:	d044      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006454:	d01f      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800645a:	d805      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006464:	d00e      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006466:	e01f      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006468:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800646c:	d01f      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800646e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006472:	d01e      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006474:	e018      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006476:	4b47      	ldr	r3, [pc, #284]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800647c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006480:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006482:	e017      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f001 fb6e 	bl	8007b6c <RCCEx_PLL2_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006494:	e00e      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3324      	adds	r3, #36	; 0x24
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f001 fc87 	bl	8007db0 <RCCEx_PLL3_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064a6:	e005      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	75fb      	strb	r3, [r7, #23]
      break;
 80064ac:	e002      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80064ae:	bf00      	nop
 80064b0:	e000      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80064b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064ba:	4b36      	ldr	r3, [pc, #216]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064be:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064c8:	4932      	ldr	r1, [pc, #200]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	658b      	str	r3, [r1, #88]	; 0x58
 80064ce:	e001      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d044      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ea:	d01f      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80064ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064f0:	d805      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x278>
 80064f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064fa:	d00e      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80064fc:	e01f      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80064fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006502:	d01f      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006508:	d01e      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800650a:	e018      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4b21      	ldr	r3, [pc, #132]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a20      	ldr	r2, [pc, #128]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006518:	e017      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2100      	movs	r1, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fb23 	bl	8007b6c <RCCEx_PLL2_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800652a:	e00e      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3324      	adds	r3, #36	; 0x24
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f001 fc3c 	bl	8007db0 <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800653c:	e005      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
      break;
 8006542:	e002      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006544:	bf00      	nop
 8006546:	e000      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006550:	4b10      	ldr	r3, [pc, #64]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006554:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800655e:	490d      	ldr	r1, [pc, #52]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006560:	4313      	orrs	r3, r2
 8006562:	658b      	str	r3, [r1, #88]	; 0x58
 8006564:	e001      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d035      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800657a:	2b10      	cmp	r3, #16
 800657c:	d00c      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800657e:	2b10      	cmp	r3, #16
 8006580:	d802      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01b      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006586:	e017      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006588:	2b20      	cmp	r3, #32
 800658a:	d00c      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800658c:	2b30      	cmp	r3, #48	; 0x30
 800658e:	d018      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006590:	e012      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006592:	bf00      	nop
 8006594:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006598:	4baf      	ldr	r3, [pc, #700]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	4aae      	ldr	r2, [pc, #696]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800659e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065a4:	e00e      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3304      	adds	r3, #4
 80065aa:	2102      	movs	r1, #2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 fadd 	bl	8007b6c <RCCEx_PLL2_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065b6:	e005      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	75fb      	strb	r3, [r7, #23]
      break;
 80065bc:	e002      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80065c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065ca:	4ba3      	ldr	r3, [pc, #652]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d6:	49a0      	ldr	r1, [pc, #640]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065dc:	e001      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d042      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f6:	d01f      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80065f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fc:	d805      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	d00e      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006608:	e01f      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800660a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800660e:	d01f      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006614:	d01e      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006616:	e018      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006618:	4b8f      	ldr	r3, [pc, #572]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a8e      	ldr	r2, [pc, #568]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800661e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006624:	e017      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3304      	adds	r3, #4
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f001 fa9d 	bl	8007b6c <RCCEx_PLL2_Config>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006636:	e00e      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3324      	adds	r3, #36	; 0x24
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f001 fbb6 	bl	8007db0 <RCCEx_PLL3_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006648:	e005      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
      break;
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800665c:	4b7e      	ldr	r3, [pc, #504]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800665e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006660:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006668:	497b      	ldr	r1, [pc, #492]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800666a:	4313      	orrs	r3, r2
 800666c:	650b      	str	r3, [r1, #80]	; 0x50
 800666e:	e001      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d042      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006688:	d01b      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800668a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800668e:	d805      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d022      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006698:	d00a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800669a:	e01b      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800669c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066a0:	d01d      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80066a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a6:	d01c      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80066a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066ac:	d01b      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80066ae:	e011      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	2101      	movs	r1, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 fa58 	bl	8007b6c <RCCEx_PLL2_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066c0:	e012      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3324      	adds	r3, #36	; 0x24
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 fb71 	bl	8007db0 <RCCEx_PLL3_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066d2:	e009      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	75fb      	strb	r3, [r7, #23]
      break;
 80066d8:	e006      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066da:	bf00      	nop
 80066dc:	e004      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066de:	bf00      	nop
 80066e0:	e002      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066e2:	bf00      	nop
 80066e4:	e000      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066ee:	4b5a      	ldr	r3, [pc, #360]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fa:	4957      	ldr	r1, [pc, #348]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	650b      	str	r3, [r1, #80]	; 0x50
 8006700:	e001      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d044      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671c:	d01b      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800671e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006722:	d805      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d022      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800672e:	e01b      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006734:	d01d      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800673a:	d01c      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800673c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006740:	d01b      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006742:	e011      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	2101      	movs	r1, #1
 800674a:	4618      	mov	r0, r3
 800674c:	f001 fa0e 	bl	8007b6c <RCCEx_PLL2_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006754:	e012      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3324      	adds	r3, #36	; 0x24
 800675a:	2101      	movs	r1, #1
 800675c:	4618      	mov	r0, r3
 800675e:	f001 fb27 	bl	8007db0 <RCCEx_PLL3_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006766:	e009      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	75fb      	strb	r3, [r7, #23]
      break;
 800676c:	e006      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800676e:	bf00      	nop
 8006770:	e004      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006772:	bf00      	nop
 8006774:	e002      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006776:	bf00      	nop
 8006778:	e000      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800677a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006782:	4b35      	ldr	r3, [pc, #212]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006786:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006790:	4931      	ldr	r1, [pc, #196]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006792:	4313      	orrs	r3, r2
 8006794:	658b      	str	r3, [r1, #88]	; 0x58
 8006796:	e001      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d02d      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067b0:	d005      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80067b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b6:	d009      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d013      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80067bc:	e00f      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067be:	4b26      	ldr	r3, [pc, #152]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	4a25      	ldr	r2, [pc, #148]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067ca:	e00c      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3304      	adds	r3, #4
 80067d0:	2101      	movs	r1, #1
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 f9ca 	bl	8007b6c <RCCEx_PLL2_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067dc:	e003      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
      break;
 80067e2:	e000      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80067e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067ec:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	4917      	ldr	r1, [pc, #92]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	650b      	str	r3, [r1, #80]	; 0x50
 80067fe:	e001      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d037      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006814:	2b03      	cmp	r3, #3
 8006816:	d81b      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	0800685d 	.word	0x0800685d
 8006824:	08006831 	.word	0x08006831
 8006828:	0800683f 	.word	0x0800683f
 800682c:	0800685d 	.word	0x0800685d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006830:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	4a08      	ldr	r2, [pc, #32]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800683c:	e00f      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3304      	adds	r3, #4
 8006842:	2102      	movs	r1, #2
 8006844:	4618      	mov	r0, r3
 8006846:	f001 f991 	bl	8007b6c <RCCEx_PLL2_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800684e:	e006      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
      break;
 8006854:	e003      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006856:	bf00      	nop
 8006858:	58024400 	.word	0x58024400
      break;
 800685c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006868:	f023 0203 	bic.w	r2, r3, #3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006870:	4901      	ldr	r1, [pc, #4]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006872:	4313      	orrs	r3, r2
 8006874:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006876:	e003      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8006878:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 829b 	beq.w	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006898:	f000 81a9 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a6:	f000 81a2 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068b0:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 80068b4:	f000 819b 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068be:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 80068c2:	f000 8194 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068cc:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 80068d0:	f000 818d 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068da:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 80068de:	f000 8186 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068e8:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 80068ec:	f000 817f 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068f6:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 80068fa:	f000 8178 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006904:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8006908:	f000 8171 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006912:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8006916:	f000 816a 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006920:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8006924:	f000 8163 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800692e:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8006932:	f000 815c 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800693c:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8006940:	f000 8155 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800694a:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 800694e:	f000 814e 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006958:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 800695c:	f000 8147 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006966:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 800696a:	f000 8140 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006974:	4aa8      	ldr	r2, [pc, #672]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006976:	4293      	cmp	r3, r2
 8006978:	f000 8139 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006982:	4aa6      	ldr	r2, [pc, #664]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8006984:	4293      	cmp	r3, r2
 8006986:	f000 8132 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006990:	4aa3      	ldr	r2, [pc, #652]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	f000 812b 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800699e:	4aa1      	ldr	r2, [pc, #644]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	f000 8124 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ac:	4a9e      	ldr	r2, [pc, #632]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	f000 811d 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ba:	4a9c      	ldr	r2, [pc, #624]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x998>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	f000 8116 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069c8:	4a99      	ldr	r2, [pc, #612]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	f000 810f 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069d6:	4a97      	ldr	r2, [pc, #604]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	f000 8108 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069e4:	4a94      	ldr	r2, [pc, #592]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	f000 8101 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069f2:	4a92      	ldr	r2, [pc, #584]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	f000 80fa 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a00:	4a8f      	ldr	r2, [pc, #572]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	f000 80f3 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a0e:	4a8d      	ldr	r2, [pc, #564]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	f000 80ec 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a1c:	4a8a      	ldr	r2, [pc, #552]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f000 80e5 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a2a:	4a88      	ldr	r2, [pc, #544]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	f000 80de 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a38:	4a85      	ldr	r2, [pc, #532]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	f000 80d7 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a46:	4a83      	ldr	r2, [pc, #524]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	f000 80d0 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a54:	4a80      	ldr	r2, [pc, #512]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	f000 80c9 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a62:	4a7e      	ldr	r2, [pc, #504]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	f000 80c2 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a70:	4a7b      	ldr	r2, [pc, #492]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	f000 80bb 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a7e:	4a79      	ldr	r2, [pc, #484]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	f000 80b4 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a8c:	4a76      	ldr	r2, [pc, #472]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	f000 80ad 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a9a:	4a74      	ldr	r2, [pc, #464]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	f000 80a6 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aa8:	4a71      	ldr	r2, [pc, #452]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	f000 809f 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ab6:	4a6f      	ldr	r2, [pc, #444]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	f000 8098 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ac4:	4a6c      	ldr	r2, [pc, #432]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	f000 8091 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ad2:	4a6a      	ldr	r2, [pc, #424]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	f000 808a 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ae0:	4a67      	ldr	r2, [pc, #412]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	f000 8083 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aee:	4a65      	ldr	r2, [pc, #404]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d07c      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006afa:	4a63      	ldr	r2, [pc, #396]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d076      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b06:	4a61      	ldr	r2, [pc, #388]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d070      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b12:	4a5f      	ldr	r2, [pc, #380]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d06a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b1e:	4a5d      	ldr	r2, [pc, #372]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d064      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b2a:	4a5b      	ldr	r2, [pc, #364]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d05e      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b36:	4a59      	ldr	r2, [pc, #356]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d058      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b42:	4a57      	ldr	r2, [pc, #348]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d052      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b4e:	4a55      	ldr	r2, [pc, #340]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d04c      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b5a:	4a53      	ldr	r2, [pc, #332]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d046      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b66:	4a51      	ldr	r2, [pc, #324]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d040      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b72:	4a4f      	ldr	r2, [pc, #316]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d03a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b7e:	4a4d      	ldr	r2, [pc, #308]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d034      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b8a:	4a4b      	ldr	r2, [pc, #300]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d02e      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b96:	4a49      	ldr	r2, [pc, #292]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d028      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ba2:	4a47      	ldr	r2, [pc, #284]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bae:	4a45      	ldr	r2, [pc, #276]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d01c      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bba:	4a43      	ldr	r2, [pc, #268]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d016      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bc6:	4a41      	ldr	r2, [pc, #260]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d010      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bd2:	4a3f      	ldr	r2, [pc, #252]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bde:	4a3d      	ldr	r2, [pc, #244]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006be4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006be8:	483b      	ldr	r0, [pc, #236]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8006bea:	f7fa f926 	bl	8000e3a <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bee:	4b3b      	ldr	r3, [pc, #236]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3a      	ldr	r2, [pc, #232]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8006bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bfa:	f7fa fbd1 	bl	80013a0 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c00:	e06e      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c02:	f7fa fbcd 	bl	80013a0 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b64      	cmp	r3, #100	; 0x64
 8006c0e:	d967      	bls.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	75fb      	strb	r3, [r7, #23]
        break;
 8006c14:	e06a      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8006c16:	bf00      	nop
 8006c18:	00010300 	.word	0x00010300
 8006c1c:	00011300 	.word	0x00011300
 8006c20:	00012300 	.word	0x00012300
 8006c24:	00013300 	.word	0x00013300
 8006c28:	00014300 	.word	0x00014300
 8006c2c:	00015300 	.word	0x00015300
 8006c30:	00016300 	.word	0x00016300
 8006c34:	00017300 	.word	0x00017300
 8006c38:	00018300 	.word	0x00018300
 8006c3c:	00019300 	.word	0x00019300
 8006c40:	0001a300 	.word	0x0001a300
 8006c44:	0001b300 	.word	0x0001b300
 8006c48:	0001c300 	.word	0x0001c300
 8006c4c:	0001d300 	.word	0x0001d300
 8006c50:	0001e300 	.word	0x0001e300
 8006c54:	0001f300 	.word	0x0001f300
 8006c58:	00020300 	.word	0x00020300
 8006c5c:	00021300 	.word	0x00021300
 8006c60:	00022300 	.word	0x00022300
 8006c64:	00023300 	.word	0x00023300
 8006c68:	00024300 	.word	0x00024300
 8006c6c:	00025300 	.word	0x00025300
 8006c70:	00026300 	.word	0x00026300
 8006c74:	00027300 	.word	0x00027300
 8006c78:	00028300 	.word	0x00028300
 8006c7c:	00029300 	.word	0x00029300
 8006c80:	0002a300 	.word	0x0002a300
 8006c84:	0002b300 	.word	0x0002b300
 8006c88:	0002c300 	.word	0x0002c300
 8006c8c:	0002d300 	.word	0x0002d300
 8006c90:	0002e300 	.word	0x0002e300
 8006c94:	0002f300 	.word	0x0002f300
 8006c98:	00030300 	.word	0x00030300
 8006c9c:	00031300 	.word	0x00031300
 8006ca0:	00032300 	.word	0x00032300
 8006ca4:	00033300 	.word	0x00033300
 8006ca8:	00034300 	.word	0x00034300
 8006cac:	00035300 	.word	0x00035300
 8006cb0:	00036300 	.word	0x00036300
 8006cb4:	00037300 	.word	0x00037300
 8006cb8:	00038300 	.word	0x00038300
 8006cbc:	00039300 	.word	0x00039300
 8006cc0:	0003a300 	.word	0x0003a300
 8006cc4:	0003b300 	.word	0x0003b300
 8006cc8:	0003c300 	.word	0x0003c300
 8006ccc:	0003d300 	.word	0x0003d300
 8006cd0:	0003e300 	.word	0x0003e300
 8006cd4:	0003f300 	.word	0x0003f300
 8006cd8:	0800bff4 	.word	0x0800bff4
 8006cdc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ce0:	4bb9      	ldr	r3, [pc, #740]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d08a      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d166      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006cf2:	4bb6      	ldr	r3, [pc, #728]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cfc:	4053      	eors	r3, r2
 8006cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d013      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d06:	4bb1      	ldr	r3, [pc, #708]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d10:	4bae      	ldr	r3, [pc, #696]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	4aad      	ldr	r2, [pc, #692]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d1c:	4bab      	ldr	r3, [pc, #684]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d20:	4aaa      	ldr	r2, [pc, #680]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d28:	4aa8      	ldr	r2, [pc, #672]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d38:	d115      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3a:	f7fa fb31 	bl	80013a0 <HAL_GetTick>
 8006d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d40:	e00b      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d42:	f7fa fb2d 	bl	80013a0 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d902      	bls.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	75fb      	strb	r3, [r7, #23]
            break;
 8006d58:	e005      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d5a:	4b9c      	ldr	r3, [pc, #624]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0ed      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d126      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d7a:	d10d      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8006d7c:	4b93      	ldr	r3, [pc, #588]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d8a:	0919      	lsrs	r1, r3, #4
 8006d8c:	4b90      	ldr	r3, [pc, #576]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006d8e:	400b      	ands	r3, r1
 8006d90:	498e      	ldr	r1, [pc, #568]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	610b      	str	r3, [r1, #16]
 8006d96:	e005      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8006d98:	4b8c      	ldr	r3, [pc, #560]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	4a8b      	ldr	r2, [pc, #556]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006da2:	6113      	str	r3, [r2, #16]
 8006da4:	4b89      	ldr	r3, [pc, #548]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db2:	4986      	ldr	r1, [pc, #536]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	670b      	str	r3, [r1, #112]	; 0x70
 8006db8:	e004      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	75bb      	strb	r3, [r7, #22]
 8006dbe:	e001      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d07e      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dd4:	2b28      	cmp	r3, #40	; 0x28
 8006dd6:	d867      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006eaf 	.word	0x08006eaf
 8006de4:	08006ea9 	.word	0x08006ea9
 8006de8:	08006ea9 	.word	0x08006ea9
 8006dec:	08006ea9 	.word	0x08006ea9
 8006df0:	08006ea9 	.word	0x08006ea9
 8006df4:	08006ea9 	.word	0x08006ea9
 8006df8:	08006ea9 	.word	0x08006ea9
 8006dfc:	08006ea9 	.word	0x08006ea9
 8006e00:	08006e85 	.word	0x08006e85
 8006e04:	08006ea9 	.word	0x08006ea9
 8006e08:	08006ea9 	.word	0x08006ea9
 8006e0c:	08006ea9 	.word	0x08006ea9
 8006e10:	08006ea9 	.word	0x08006ea9
 8006e14:	08006ea9 	.word	0x08006ea9
 8006e18:	08006ea9 	.word	0x08006ea9
 8006e1c:	08006ea9 	.word	0x08006ea9
 8006e20:	08006e97 	.word	0x08006e97
 8006e24:	08006ea9 	.word	0x08006ea9
 8006e28:	08006ea9 	.word	0x08006ea9
 8006e2c:	08006ea9 	.word	0x08006ea9
 8006e30:	08006ea9 	.word	0x08006ea9
 8006e34:	08006ea9 	.word	0x08006ea9
 8006e38:	08006ea9 	.word	0x08006ea9
 8006e3c:	08006ea9 	.word	0x08006ea9
 8006e40:	08006eaf 	.word	0x08006eaf
 8006e44:	08006ea9 	.word	0x08006ea9
 8006e48:	08006ea9 	.word	0x08006ea9
 8006e4c:	08006ea9 	.word	0x08006ea9
 8006e50:	08006ea9 	.word	0x08006ea9
 8006e54:	08006ea9 	.word	0x08006ea9
 8006e58:	08006ea9 	.word	0x08006ea9
 8006e5c:	08006ea9 	.word	0x08006ea9
 8006e60:	08006eaf 	.word	0x08006eaf
 8006e64:	08006ea9 	.word	0x08006ea9
 8006e68:	08006ea9 	.word	0x08006ea9
 8006e6c:	08006ea9 	.word	0x08006ea9
 8006e70:	08006ea9 	.word	0x08006ea9
 8006e74:	08006ea9 	.word	0x08006ea9
 8006e78:	08006ea9 	.word	0x08006ea9
 8006e7c:	08006ea9 	.word	0x08006ea9
 8006e80:	08006eaf 	.word	0x08006eaf
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	2101      	movs	r1, #1
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fe6e 	bl	8007b6c <RCCEx_PLL2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e94:	e00c      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3324      	adds	r3, #36	; 0x24
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 ff87 	bl	8007db0 <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006eac:	e000      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8006eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006eb6:	4b45      	ldr	r3, [pc, #276]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec2:	4942      	ldr	r1, [pc, #264]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ec8:	e001      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d037      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	d820      	bhi.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8006ee2:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006f2b 	.word	0x08006f2b
 8006eec:	08006f01 	.word	0x08006f01
 8006ef0:	08006f13 	.word	0x08006f13
 8006ef4:	08006f2b 	.word	0x08006f2b
 8006ef8:	08006f2b 	.word	0x08006f2b
 8006efc:	08006f2b 	.word	0x08006f2b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3304      	adds	r3, #4
 8006f04:	2101      	movs	r1, #1
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fe30 	bl	8007b6c <RCCEx_PLL2_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f10:	e00c      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3324      	adds	r3, #36	; 0x24
 8006f16:	2101      	movs	r1, #1
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 ff49 	bl	8007db0 <RCCEx_PLL3_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f22:	e003      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
      break;
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8006f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f32:	4b26      	ldr	r3, [pc, #152]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	f023 0207 	bic.w	r2, r3, #7
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f3e:	4923      	ldr	r1, [pc, #140]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	654b      	str	r3, [r1, #84]	; 0x54
 8006f44:	e001      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d040      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5c:	2b05      	cmp	r3, #5
 8006f5e:	d821      	bhi.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006f60:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006fab 	.word	0x08006fab
 8006f6c:	08006f81 	.word	0x08006f81
 8006f70:	08006f93 	.word	0x08006f93
 8006f74:	08006fab 	.word	0x08006fab
 8006f78:	08006fab 	.word	0x08006fab
 8006f7c:	08006fab 	.word	0x08006fab
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	2101      	movs	r1, #1
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fdf0 	bl	8007b6c <RCCEx_PLL2_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f90:	e00c      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3324      	adds	r3, #36	; 0x24
 8006f96:	2101      	movs	r1, #1
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 ff09 	bl	8007db0 <RCCEx_PLL3_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fa2:	e003      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa8:	e000      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d110      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	f023 0207 	bic.w	r2, r3, #7
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	4902      	ldr	r1, [pc, #8]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	658b      	str	r3, [r1, #88]	; 0x58
 8006fc6:	e007      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006fc8:	58024800 	.word	0x58024800
 8006fcc:	58024400 	.word	0x58024400
 8006fd0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d044      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fee:	d01b      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff4:	d805      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d022      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8006ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ffe:	d00a      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007000:	e01b      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xda6>
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007006:	d01d      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8007008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800700c:	d01c      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800700e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007012:	d01b      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8007014:	e011      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3304      	adds	r3, #4
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fda5 	bl	8007b6c <RCCEx_PLL2_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007026:	e012      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3324      	adds	r3, #36	; 0x24
 800702c:	2102      	movs	r1, #2
 800702e:	4618      	mov	r0, r3
 8007030:	f000 febe 	bl	8007db0 <RCCEx_PLL3_Config>
 8007034:	4603      	mov	r3, r0
 8007036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007038:	e009      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
      break;
 800703e:	e006      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007040:	bf00      	nop
 8007042:	e004      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 800704c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007054:	4bb7      	ldr	r3, [pc, #732]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007062:	49b4      	ldr	r1, [pc, #720]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007064:	4313      	orrs	r3, r2
 8007066:	654b      	str	r3, [r1, #84]	; 0x54
 8007068:	e001      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d044      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007084:	d01b      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 8007086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708a:	d805      	bhi.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d022      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8007090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007094:	d00a      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8007096:	e01b      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8007098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800709c:	d01d      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xe46>
 800709e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070a2:	d01c      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 80070a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070a8:	d01b      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 80070aa:	e011      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3304      	adds	r3, #4
 80070b0:	2100      	movs	r1, #0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fd5a 	bl	8007b6c <RCCEx_PLL2_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070bc:	e012      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3324      	adds	r3, #36	; 0x24
 80070c2:	2102      	movs	r1, #2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fe73 	bl	8007db0 <RCCEx_PLL3_Config>
 80070ca:	4603      	mov	r3, r0
 80070cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070ce:	e009      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	75fb      	strb	r3, [r7, #23]
      break;
 80070d4:	e006      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80070d6:	bf00      	nop
 80070d8:	e004      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80070da:	bf00      	nop
 80070dc:	e002      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80070de:	bf00      	nop
 80070e0:	e000      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80070e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10a      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070ea:	4b92      	ldr	r3, [pc, #584]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80070ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070f8:	498e      	ldr	r1, [pc, #568]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	658b      	str	r3, [r1, #88]	; 0x58
 80070fe:	e001      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b00      	cmp	r3, #0
 800710e:	d044      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800711a:	d01b      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 800711c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007120:	d805      	bhi.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d022      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8007126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800712a:	d00a      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 800712c:	e01b      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xed2>
 800712e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007132:	d01d      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007134:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007138:	d01c      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 800713a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800713e:	d01b      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8007140:	e011      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3304      	adds	r3, #4
 8007146:	2100      	movs	r1, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fd0f 	bl	8007b6c <RCCEx_PLL2_Config>
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007152:	e012      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3324      	adds	r3, #36	; 0x24
 8007158:	2102      	movs	r1, #2
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fe28 	bl	8007db0 <RCCEx_PLL3_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007164:	e009      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]
      break;
 800716a:	e006      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800716c:	bf00      	nop
 800716e:	e004      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007170:	bf00      	nop
 8007172:	e002      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007174:	bf00      	nop
 8007176:	e000      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007180:	4b6c      	ldr	r3, [pc, #432]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007184:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800718e:	4969      	ldr	r1, [pc, #420]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007190:	4313      	orrs	r3, r2
 8007192:	658b      	str	r3, [r1, #88]	; 0x58
 8007194:	e001      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d037      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b0:	d015      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071bc:	d00f      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071d2:	d004      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80071d4:	f240 413a 	movw	r1, #1082	; 0x43a
 80071d8:	4857      	ldr	r0, [pc, #348]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 80071da:	f7f9 fe2e 	bl	8000e3a <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e8:	d10b      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3324      	adds	r3, #36	; 0x24
 80071ee:	2102      	movs	r1, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fddd 	bl	8007db0 <RCCEx_PLL3_Config>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00c      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	75bb      	strb	r3, [r7, #22]
 8007200:	e009      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007202:	4b4c      	ldr	r3, [pc, #304]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007210:	4948      	ldr	r1, [pc, #288]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007212:	4313      	orrs	r3, r2
 8007214:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b00      	cmp	r3, #0
 8007220:	d037      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722c:	d015      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007238:	d00f      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800724a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800724e:	d004      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007250:	f240 414f 	movw	r1, #1103	; 0x44f
 8007254:	4838      	ldr	r0, [pc, #224]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8007256:	f7f9 fdf0 	bl	8000e3a <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007264:	d10b      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3324      	adds	r3, #36	; 0x24
 800726a:	2102      	movs	r1, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fd9f 	bl	8007db0 <RCCEx_PLL3_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00c      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75bb      	strb	r3, [r7, #22]
 800727c:	e009      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800727e:	4b2d      	ldr	r3, [pc, #180]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800728c:	4929      	ldr	r1, [pc, #164]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800728e:	4313      	orrs	r3, r2
 8007290:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d030      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a8:	d00d      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1032>
 80072aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ae:	d016      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x104a>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d111      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fc56 	bl	8007b6c <RCCEx_PLL2_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072c4:	e00c      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3324      	adds	r3, #36	; 0x24
 80072ca:	2102      	movs	r1, #2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd6f 	bl	8007db0 <RCCEx_PLL3_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072d6:	e003      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	e000      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 80072de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072e6:	4b13      	ldr	r3, [pc, #76]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80072e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072f4:	490f      	ldr	r1, [pc, #60]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	658b      	str	r3, [r1, #88]	; 0x58
 80072fa:	e001      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
 80072fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d034      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007316:	d011      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8007318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800731c:	d01a      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800731e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007322:	d114      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007324:	4b03      	ldr	r3, [pc, #12]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a02      	ldr	r2, [pc, #8]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800732a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007330:	e011      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 8007332:	bf00      	nop
 8007334:	58024400 	.word	0x58024400
 8007338:	0800bff4 	.word	0x0800bff4

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3324      	adds	r3, #36	; 0x24
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fd34 	bl	8007db0 <RCCEx_PLL3_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800734c:	e003      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	75fb      	strb	r3, [r7, #23]
      break;
 8007352:	e000      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8007354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800735c:	4b9c      	ldr	r3, [pc, #624]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800735e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007360:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736a:	4999      	ldr	r1, [pc, #612]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800736c:	4313      	orrs	r3, r2
 800736e:	654b      	str	r3, [r1, #84]	; 0x54
 8007370:	e001      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d037      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x110a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007392:	d004      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8007394:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8007398:	488e      	ldr	r0, [pc, #568]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800739a:	f7f9 fd4e 	bl	8000e3a <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80073a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073aa:	d007      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80073ac:	e00f      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ae:	4b88      	ldr	r3, [pc, #544]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	4a87      	ldr	r2, [pc, #540]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80073ba:	e00b      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fbd2 	bl	8007b6c <RCCEx_PLL2_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80073cc:	e002      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]
      break;
 80073d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073da:	4b7d      	ldr	r3, [pc, #500]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e6:	497a      	ldr	r1, [pc, #488]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073ec:	e001      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3324      	adds	r3, #36	; 0x24
 8007402:	2102      	movs	r1, #2
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fcd3 	bl	8007db0 <RCCEx_PLL3_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02f      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007428:	d00c      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 800742a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800742e:	d802      	bhi.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d011      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8007434:	e00d      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x11be>
 8007436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743a:	d00f      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800743c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007440:	d00e      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 8007442:	e006      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007444:	4b62      	ldr	r3, [pc, #392]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	4a61      	ldr	r2, [pc, #388]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800744a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800744e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007450:	e007      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	75fb      	strb	r3, [r7, #23]
      break;
 8007456:	e004      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007458:	bf00      	nop
 800745a:	e002      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d109      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007468:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800746a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007474:	4956      	ldr	r1, [pc, #344]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007476:	4313      	orrs	r3, r2
 8007478:	654b      	str	r3, [r1, #84]	; 0x54
 800747a:	e001      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d016      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	2b00      	cmp	r3, #0
 8007492:	d009      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800749c:	d004      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 800749e:	f240 5116 	movw	r1, #1302	; 0x516
 80074a2:	484c      	ldr	r0, [pc, #304]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80074a4:	f7f9 fcc9 	bl	8000e3a <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074a8:	4b49      	ldr	r3, [pc, #292]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b4:	4946      	ldr	r1, [pc, #280]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d019      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074da:	d004      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80074dc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80074e0:	483c      	ldr	r0, [pc, #240]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80074e2:	f7f9 fcaa 	bl	8000e3a <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80074e6:	4b3a      	ldr	r3, [pc, #232]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074f4:	4936      	ldr	r1, [pc, #216]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d016      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007516:	d004      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 8007518:	f240 512a 	movw	r1, #1322	; 0x52a
 800751c:	482d      	ldr	r0, [pc, #180]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800751e:	f7f9 fc8c 	bl	8000e3a <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007522:	4b2b      	ldr	r3, [pc, #172]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007526:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800752e:	4928      	ldr	r1, [pc, #160]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007530:	4313      	orrs	r3, r2
 8007532:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01d      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007554:	d004      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8007556:	f240 5134 	movw	r1, #1332	; 0x534
 800755a:	481e      	ldr	r0, [pc, #120]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800755c:	f7f9 fc6d 	bl	8000e3a <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	4a1a      	ldr	r2, [pc, #104]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007566:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800756a:	6113      	str	r3, [r2, #16]
 800756c:	4b18      	ldr	r3, [pc, #96]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007576:	4916      	ldr	r1, [pc, #88]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007578:	4313      	orrs	r3, r2
 800757a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	da1b      	bge.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00e      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x1316>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007594:	d009      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800759e:	d004      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x1316>
 80075a0:	f240 513e 	movw	r1, #1342	; 0x53e
 80075a4:	480b      	ldr	r0, [pc, #44]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80075a6:	f7f9 fc48 	bl	8000e3a <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80075aa:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b6:	4906      	ldr	r1, [pc, #24]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80075bc:	7dbb      	ldrb	r3, [r7, #22]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e000      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	58024400 	.word	0x58024400
 80075d4:	0800bff4 	.word	0x0800bff4

080075d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075dc:	f7fe fe12 	bl	8006204 <HAL_RCC_GetHCLKFreq>
 80075e0:	4601      	mov	r1, r0
 80075e2:	4b06      	ldr	r3, [pc, #24]	; (80075fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	4a04      	ldr	r2, [pc, #16]	; (8007600 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075ee:	5cd3      	ldrb	r3, [r2, r3]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	58024400 	.word	0x58024400
 8007600:	0800c0f0 	.word	0x0800c0f0

08007604 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800760c:	4b9d      	ldr	r3, [pc, #628]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8007616:	4b9b      	ldr	r3, [pc, #620]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	0b1b      	lsrs	r3, r3, #12
 800761c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007620:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8007622:	4b98      	ldr	r3, [pc, #608]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800762c:	4b95      	ldr	r3, [pc, #596]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	08db      	lsrs	r3, r3, #3
 8007632:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	fb02 f303 	mul.w	r3, r2, r3
 800763c:	ee07 3a90 	vmov	s15, r3
 8007640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007644:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 810a 	beq.w	8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d05a      	beq.n	800770c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8007656:	2b01      	cmp	r3, #1
 8007658:	d302      	bcc.n	8007660 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 800765a:	2b02      	cmp	r3, #2
 800765c:	d078      	beq.n	8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800765e:	e099      	b.n	8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007660:	4b88      	ldr	r3, [pc, #544]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d02d      	beq.n	80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800766c:	4b85      	ldr	r3, [pc, #532]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	08db      	lsrs	r3, r3, #3
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	4a84      	ldr	r2, [pc, #528]	; (8007888 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	ee07 3a90 	vmov	s15, r3
 8007684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b7b      	ldr	r3, [pc, #492]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076c6:	e087      	b.n	80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007890 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80076d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076da:	4b6a      	ldr	r3, [pc, #424]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007706:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800770a:	e065      	b.n	80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800771a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771e:	4b59      	ldr	r3, [pc, #356]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007732:	eddf 5a56 	vldr	s11, [pc, #344]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800774e:	e043      	b.n	80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007898 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800775e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007762:	4b48      	ldr	r3, [pc, #288]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007772:	ed97 6a03 	vldr	s12, [r7, #12]
 8007776:	eddf 5a45 	vldr	s11, [pc, #276]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800777a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007792:	e021      	b.n	80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80077a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a6:	4b37      	ldr	r3, [pc, #220]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80077be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80077d8:	4b2a      	ldr	r3, [pc, #168]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	0a5b      	lsrs	r3, r3, #9
 80077de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fe:	ee17 2a90 	vmov	r2, s15
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007806:	4b1f      	ldr	r3, [pc, #124]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	0c1b      	lsrs	r3, r3, #16
 800780c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800781c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007820:	edd7 6a07 	vldr	s13, [r7, #28]
 8007824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800782c:	ee17 2a90 	vmov	r2, s15
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007834:	4b13      	ldr	r3, [pc, #76]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	0e1b      	lsrs	r3, r3, #24
 800783a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800784a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800784e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785a:	ee17 2a90 	vmov	r2, s15
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007862:	e008      	b.n	8007876 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	609a      	str	r2, [r3, #8]
}
 8007876:	bf00      	nop
 8007878:	3724      	adds	r7, #36	; 0x24
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	58024400 	.word	0x58024400
 8007888:	03d09000 	.word	0x03d09000
 800788c:	46000000 	.word	0x46000000
 8007890:	4c742400 	.word	0x4c742400
 8007894:	4a742400 	.word	0x4a742400
 8007898:	4b371b00 	.word	0x4b371b00

0800789c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800789c:	b480      	push	{r7}
 800789e:	b089      	sub	sp, #36	; 0x24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078a4:	4b9d      	ldr	r3, [pc, #628]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80078ae:	4b9b      	ldr	r3, [pc, #620]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	0d1b      	lsrs	r3, r3, #20
 80078b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b8:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80078ba:	4b98      	ldr	r3, [pc, #608]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c2:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078c4:	4b95      	ldr	r3, [pc, #596]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	08db      	lsrs	r3, r3, #3
 80078ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	fb02 f303 	mul.w	r3, r2, r3
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 810a 	beq.w	8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d05a      	beq.n	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d302      	bcc.n	80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d078      	beq.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80078f6:	e099      	b.n	8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078f8:	4b88      	ldr	r3, [pc, #544]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d02d      	beq.n	8007960 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007904:	4b85      	ldr	r3, [pc, #532]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	08db      	lsrs	r3, r3, #3
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	4a84      	ldr	r2, [pc, #528]	; (8007b20 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007910:	fa22 f303 	lsr.w	r3, r2, r3
 8007914:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	ee07 3a90 	vmov	s15, r3
 800791c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792e:	4b7b      	ldr	r3, [pc, #492]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007942:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800795e:	e087      	b.n	8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800796e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007972:	4b6a      	ldr	r3, [pc, #424]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007982:	ed97 6a03 	vldr	s12, [r7, #12]
 8007986:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800798a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079a2:	e065      	b.n	8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80079b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b6:	4b59      	ldr	r3, [pc, #356]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079e6:	e043      	b.n	8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80079f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fa:	4b48      	ldr	r3, [pc, #288]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a2a:	e021      	b.n	8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a3e:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a70:	4b2a      	ldr	r3, [pc, #168]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	0a5b      	lsrs	r3, r3, #9
 8007a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a96:	ee17 2a90 	vmov	r2, s15
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a9e:	4b1f      	ldr	r3, [pc, #124]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa8:	ee07 3a90 	vmov	s15, r3
 8007aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac4:	ee17 2a90 	vmov	r2, s15
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007acc:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad0:	0e1b      	lsrs	r3, r3, #24
 8007ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af2:	ee17 2a90 	vmov	r2, s15
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007afa:	e008      	b.n	8007b0e <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	609a      	str	r2, [r3, #8]
}
 8007b0e:	bf00      	nop
 8007b10:	3724      	adds	r7, #36	; 0x24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	58024400 	.word	0x58024400
 8007b20:	03d09000 	.word	0x03d09000
 8007b24:	46000000 	.word	0x46000000
 8007b28:	4c742400 	.word	0x4c742400
 8007b2c:	4a742400 	.word	0x4a742400
 8007b30:	4b371b00 	.word	0x4b371b00

08007b34 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b38:	f7fe f9f2 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	0a1b      	lsrs	r3, r3, #8
 8007b44:	f003 030f 	and.w	r3, r3, #15
 8007b48:	4a06      	ldr	r2, [pc, #24]	; (8007b64 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007b4a:	5cd3      	ldrb	r3, [r2, r3]
 8007b4c:	f003 031f 	and.w	r3, r3, #31
 8007b50:	fa21 f303 	lsr.w	r3, r1, r3
 8007b54:	4a04      	ldr	r2, [pc, #16]	; (8007b68 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007b56:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007b58:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	58024400 	.word	0x58024400
 8007b64:	0800c0f0 	.word	0x0800c0f0
 8007b68:	24000000 	.word	0x24000000

08007b6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <RCCEx_PLL2_Config+0x1e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b3f      	cmp	r3, #63	; 0x3f
 8007b88:	d904      	bls.n	8007b94 <RCCEx_PLL2_Config+0x28>
 8007b8a:	f640 2186 	movw	r1, #2694	; 0xa86
 8007b8e:	4885      	ldr	r0, [pc, #532]	; (8007da4 <RCCEx_PLL2_Config+0x238>)
 8007b90:	f7f9 f953 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d904      	bls.n	8007ba6 <RCCEx_PLL2_Config+0x3a>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba4:	d904      	bls.n	8007bb0 <RCCEx_PLL2_Config+0x44>
 8007ba6:	f640 2187 	movw	r1, #2695	; 0xa87
 8007baa:	487e      	ldr	r0, [pc, #504]	; (8007da4 <RCCEx_PLL2_Config+0x238>)
 8007bac:	f7f9 f945 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <RCCEx_PLL2_Config+0x54>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	2b80      	cmp	r3, #128	; 0x80
 8007bbe:	d904      	bls.n	8007bca <RCCEx_PLL2_Config+0x5e>
 8007bc0:	f640 2188 	movw	r1, #2696	; 0xa88
 8007bc4:	4877      	ldr	r0, [pc, #476]	; (8007da4 <RCCEx_PLL2_Config+0x238>)
 8007bc6:	f7f9 f938 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <RCCEx_PLL2_Config+0x6e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b80      	cmp	r3, #128	; 0x80
 8007bd8:	d904      	bls.n	8007be4 <RCCEx_PLL2_Config+0x78>
 8007bda:	f640 2189 	movw	r1, #2697	; 0xa89
 8007bde:	4871      	ldr	r0, [pc, #452]	; (8007da4 <RCCEx_PLL2_Config+0x238>)
 8007be0:	f7f9 f92b 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <RCCEx_PLL2_Config+0x88>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	2b80      	cmp	r3, #128	; 0x80
 8007bf2:	d904      	bls.n	8007bfe <RCCEx_PLL2_Config+0x92>
 8007bf4:	f640 218a 	movw	r1, #2698	; 0xa8a
 8007bf8:	486a      	ldr	r0, [pc, #424]	; (8007da4 <RCCEx_PLL2_Config+0x238>)
 8007bfa:	f7f9 f91e 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d010      	beq.n	8007c28 <RCCEx_PLL2_Config+0xbc>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d00c      	beq.n	8007c28 <RCCEx_PLL2_Config+0xbc>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	2b80      	cmp	r3, #128	; 0x80
 8007c14:	d008      	beq.n	8007c28 <RCCEx_PLL2_Config+0xbc>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c1c:	d004      	beq.n	8007c28 <RCCEx_PLL2_Config+0xbc>
 8007c1e:	f640 218b 	movw	r1, #2699	; 0xa8b
 8007c22:	4860      	ldr	r0, [pc, #384]	; (8007da4 <RCCEx_PLL2_Config+0x238>)
 8007c24:	f7f9 f909 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d008      	beq.n	8007c42 <RCCEx_PLL2_Config+0xd6>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	d004      	beq.n	8007c42 <RCCEx_PLL2_Config+0xd6>
 8007c38:	f640 218c 	movw	r1, #2700	; 0xa8c
 8007c3c:	4859      	ldr	r0, [pc, #356]	; (8007da4 <RCCEx_PLL2_Config+0x238>)
 8007c3e:	f7f9 f8fc 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c4a:	d304      	bcc.n	8007c56 <RCCEx_PLL2_Config+0xea>
 8007c4c:	f640 218d 	movw	r1, #2701	; 0xa8d
 8007c50:	4854      	ldr	r0, [pc, #336]	; (8007da4 <RCCEx_PLL2_Config+0x238>)
 8007c52:	f7f9 f8f2 	bl	8000e3a <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c56:	4b54      	ldr	r3, [pc, #336]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d101      	bne.n	8007c66 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e099      	b.n	8007d9a <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c66:	4b50      	ldr	r3, [pc, #320]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a4f      	ldr	r2, [pc, #316]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007c6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c72:	f7f9 fb95 	bl	80013a0 <HAL_GetTick>
 8007c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c78:	e008      	b.n	8007c8c <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c7a:	f7f9 fb91 	bl	80013a0 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e086      	b.n	8007d9a <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c8c:	4b46      	ldr	r3, [pc, #280]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f0      	bne.n	8007c7a <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c98:	4b43      	ldr	r3, [pc, #268]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	031b      	lsls	r3, r3, #12
 8007ca6:	4940      	ldr	r1, [pc, #256]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	628b      	str	r3, [r1, #40]	; 0x28
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	025b      	lsls	r3, r3, #9
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	041b      	lsls	r3, r3, #16
 8007cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	061b      	lsls	r3, r3, #24
 8007cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cdc:	4932      	ldr	r1, [pc, #200]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ce2:	4b31      	ldr	r3, [pc, #196]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	492e      	ldr	r1, [pc, #184]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cf4:	4b2c      	ldr	r3, [pc, #176]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	f023 0220 	bic.w	r2, r3, #32
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	4929      	ldr	r1, [pc, #164]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d06:	4b28      	ldr	r3, [pc, #160]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d0c:	f023 0310 	bic.w	r3, r3, #16
 8007d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d12:	4b25      	ldr	r3, [pc, #148]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d16:	4b25      	ldr	r3, [pc, #148]	; (8007dac <RCCEx_PLL2_Config+0x240>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	69d2      	ldr	r2, [r2, #28]
 8007d1e:	00d2      	lsls	r2, r2, #3
 8007d20:	4921      	ldr	r1, [pc, #132]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d26:	4b20      	ldr	r3, [pc, #128]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	4a1f      	ldr	r2, [pc, #124]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d2c:	f043 0310 	orr.w	r3, r3, #16
 8007d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d106      	bne.n	8007d46 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d38:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	4a1a      	ldr	r2, [pc, #104]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d44:	e00f      	b.n	8007d66 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d106      	bne.n	8007d5a <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d4c:	4b16      	ldr	r3, [pc, #88]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d58:	e005      	b.n	8007d66 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d5a:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	4a12      	ldr	r2, [pc, #72]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d66:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a0f      	ldr	r2, [pc, #60]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d72:	f7f9 fb15 	bl	80013a0 <HAL_GetTick>
 8007d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d78:	e008      	b.n	8007d8c <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d7a:	f7f9 fb11 	bl	80013a0 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d901      	bls.n	8007d8c <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e006      	b.n	8007d9a <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <RCCEx_PLL2_Config+0x23c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0f0      	beq.n	8007d7a <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	0800bff4 	.word	0x0800bff4
 8007da8:	58024400 	.word	0x58024400
 8007dac:	ffff0007 	.word	0xffff0007

08007db0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <RCCEx_PLL3_Config+0x1e>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b3f      	cmp	r3, #63	; 0x3f
 8007dcc:	d904      	bls.n	8007dd8 <RCCEx_PLL3_Config+0x28>
 8007dce:	f640 21ee 	movw	r1, #2798	; 0xaee
 8007dd2:	4887      	ldr	r0, [pc, #540]	; (8007ff0 <RCCEx_PLL3_Config+0x240>)
 8007dd4:	f7f9 f831 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d904      	bls.n	8007dea <RCCEx_PLL3_Config+0x3a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de8:	d904      	bls.n	8007df4 <RCCEx_PLL3_Config+0x44>
 8007dea:	f640 21ef 	movw	r1, #2799	; 0xaef
 8007dee:	4880      	ldr	r0, [pc, #512]	; (8007ff0 <RCCEx_PLL3_Config+0x240>)
 8007df0:	f7f9 f823 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <RCCEx_PLL3_Config+0x54>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	2b80      	cmp	r3, #128	; 0x80
 8007e02:	d904      	bls.n	8007e0e <RCCEx_PLL3_Config+0x5e>
 8007e04:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8007e08:	4879      	ldr	r0, [pc, #484]	; (8007ff0 <RCCEx_PLL3_Config+0x240>)
 8007e0a:	f7f9 f816 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <RCCEx_PLL3_Config+0x6e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b80      	cmp	r3, #128	; 0x80
 8007e1c:	d904      	bls.n	8007e28 <RCCEx_PLL3_Config+0x78>
 8007e1e:	f640 21f1 	movw	r1, #2801	; 0xaf1
 8007e22:	4873      	ldr	r0, [pc, #460]	; (8007ff0 <RCCEx_PLL3_Config+0x240>)
 8007e24:	f7f9 f809 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <RCCEx_PLL3_Config+0x88>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	2b80      	cmp	r3, #128	; 0x80
 8007e36:	d904      	bls.n	8007e42 <RCCEx_PLL3_Config+0x92>
 8007e38:	f640 21f2 	movw	r1, #2802	; 0xaf2
 8007e3c:	486c      	ldr	r0, [pc, #432]	; (8007ff0 <RCCEx_PLL3_Config+0x240>)
 8007e3e:	f7f8 fffc 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d013      	beq.n	8007e72 <RCCEx_PLL3_Config+0xc2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e52:	d00e      	beq.n	8007e72 <RCCEx_PLL3_Config+0xc2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e5c:	d009      	beq.n	8007e72 <RCCEx_PLL3_Config+0xc2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e66:	d004      	beq.n	8007e72 <RCCEx_PLL3_Config+0xc2>
 8007e68:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8007e6c:	4860      	ldr	r0, [pc, #384]	; (8007ff0 <RCCEx_PLL3_Config+0x240>)
 8007e6e:	f7f8 ffe4 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <RCCEx_PLL3_Config+0xde>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e82:	d004      	beq.n	8007e8e <RCCEx_PLL3_Config+0xde>
 8007e84:	f640 21f4 	movw	r1, #2804	; 0xaf4
 8007e88:	4859      	ldr	r0, [pc, #356]	; (8007ff0 <RCCEx_PLL3_Config+0x240>)
 8007e8a:	f7f8 ffd6 	bl	8000e3a <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e96:	d304      	bcc.n	8007ea2 <RCCEx_PLL3_Config+0xf2>
 8007e98:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8007e9c:	4854      	ldr	r0, [pc, #336]	; (8007ff0 <RCCEx_PLL3_Config+0x240>)
 8007e9e:	f7f8 ffcc 	bl	8000e3a <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ea2:	4b54      	ldr	r3, [pc, #336]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d101      	bne.n	8007eb2 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e099      	b.n	8007fe6 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007eb2:	4b50      	ldr	r3, [pc, #320]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a4f      	ldr	r2, [pc, #316]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ebe:	f7f9 fa6f 	bl	80013a0 <HAL_GetTick>
 8007ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ec4:	e008      	b.n	8007ed8 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ec6:	f7f9 fa6b 	bl	80013a0 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d901      	bls.n	8007ed8 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e086      	b.n	8007fe6 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ed8:	4b46      	ldr	r3, [pc, #280]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1f0      	bne.n	8007ec6 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ee4:	4b43      	ldr	r3, [pc, #268]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	051b      	lsls	r3, r3, #20
 8007ef2:	4940      	ldr	r1, [pc, #256]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	025b      	lsls	r3, r3, #9
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	041b      	lsls	r3, r3, #16
 8007f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	061b      	lsls	r3, r3, #24
 8007f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f28:	4932      	ldr	r1, [pc, #200]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f2e:	4b31      	ldr	r3, [pc, #196]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	492e      	ldr	r1, [pc, #184]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f40:	4b2c      	ldr	r3, [pc, #176]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	4929      	ldr	r1, [pc, #164]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f52:	4b28      	ldr	r3, [pc, #160]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	4a27      	ldr	r2, [pc, #156]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f5e:	4b25      	ldr	r3, [pc, #148]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f62:	4b25      	ldr	r3, [pc, #148]	; (8007ff8 <RCCEx_PLL3_Config+0x248>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	69d2      	ldr	r2, [r2, #28]
 8007f6a:	00d2      	lsls	r2, r2, #3
 8007f6c:	4921      	ldr	r1, [pc, #132]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f72:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f84:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f90:	e00f      	b.n	8007fb2 <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d106      	bne.n	8007fa6 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f98:	4b16      	ldr	r3, [pc, #88]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	4a15      	ldr	r2, [pc, #84]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fa4:	e005      	b.n	8007fb2 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007fa6:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007faa:	4a12      	ldr	r2, [pc, #72]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007fb2:	4b10      	ldr	r3, [pc, #64]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a0f      	ldr	r2, [pc, #60]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fbe:	f7f9 f9ef 	bl	80013a0 <HAL_GetTick>
 8007fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fc4:	e008      	b.n	8007fd8 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007fc6:	f7f9 f9eb 	bl	80013a0 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e006      	b.n	8007fe6 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <RCCEx_PLL3_Config+0x244>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f0      	beq.n	8007fc6 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	0800bff4 	.word	0x0800bff4
 8007ff4:	58024400 	.word	0x58024400
 8007ff8:	ffff0007 	.word	0xffff0007

08007ffc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e284      	b.n	800851c <HAL_SPI_Init+0x520>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a96      	ldr	r2, [pc, #600]	; (8008270 <HAL_SPI_Init+0x274>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d01c      	beq.n	8008056 <HAL_SPI_Init+0x5a>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a94      	ldr	r2, [pc, #592]	; (8008274 <HAL_SPI_Init+0x278>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d017      	beq.n	8008056 <HAL_SPI_Init+0x5a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a93      	ldr	r2, [pc, #588]	; (8008278 <HAL_SPI_Init+0x27c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d012      	beq.n	8008056 <HAL_SPI_Init+0x5a>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a91      	ldr	r2, [pc, #580]	; (800827c <HAL_SPI_Init+0x280>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00d      	beq.n	8008056 <HAL_SPI_Init+0x5a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a90      	ldr	r2, [pc, #576]	; (8008280 <HAL_SPI_Init+0x284>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d008      	beq.n	8008056 <HAL_SPI_Init+0x5a>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a8e      	ldr	r2, [pc, #568]	; (8008284 <HAL_SPI_Init+0x288>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d003      	beq.n	8008056 <HAL_SPI_Init+0x5a>
 800804e:	21f6      	movs	r1, #246	; 0xf6
 8008050:	488d      	ldr	r0, [pc, #564]	; (8008288 <HAL_SPI_Init+0x28c>)
 8008052:	f7f8 fef2 	bl	8000e3a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d008      	beq.n	8008070 <HAL_SPI_Init+0x74>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008066:	d003      	beq.n	8008070 <HAL_SPI_Init+0x74>
 8008068:	21f7      	movs	r1, #247	; 0xf7
 800806a:	4887      	ldr	r0, [pc, #540]	; (8008288 <HAL_SPI_Init+0x28c>)
 800806c:	f7f8 fee5 	bl	8000e3a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d012      	beq.n	800809e <HAL_SPI_Init+0xa2>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008080:	d00d      	beq.n	800809e <HAL_SPI_Init+0xa2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800808a:	d008      	beq.n	800809e <HAL_SPI_Init+0xa2>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008094:	d003      	beq.n	800809e <HAL_SPI_Init+0xa2>
 8008096:	21f8      	movs	r1, #248	; 0xf8
 8008098:	487b      	ldr	r0, [pc, #492]	; (8008288 <HAL_SPI_Init+0x28c>)
 800809a:	f7f8 fece 	bl	8000e3a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b1f      	cmp	r3, #31
 80080a4:	d077      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	2b1e      	cmp	r3, #30
 80080ac:	d073      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b1d      	cmp	r3, #29
 80080b4:	d06f      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	2b1c      	cmp	r3, #28
 80080bc:	d06b      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2b1b      	cmp	r3, #27
 80080c4:	d067      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	2b1a      	cmp	r3, #26
 80080cc:	d063      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	2b19      	cmp	r3, #25
 80080d4:	d05f      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b18      	cmp	r3, #24
 80080dc:	d05b      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2b17      	cmp	r3, #23
 80080e4:	d057      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b16      	cmp	r3, #22
 80080ec:	d053      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b15      	cmp	r3, #21
 80080f4:	d04f      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b14      	cmp	r3, #20
 80080fc:	d04b      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b13      	cmp	r3, #19
 8008104:	d047      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	2b15      	cmp	r3, #21
 800810c:	d043      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	2b12      	cmp	r3, #18
 8008114:	d03f      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	2b11      	cmp	r3, #17
 800811c:	d03b      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	2b10      	cmp	r3, #16
 8008124:	d037      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	2b0f      	cmp	r3, #15
 800812c:	d033      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b0e      	cmp	r3, #14
 8008134:	d02f      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b0d      	cmp	r3, #13
 800813c:	d02b      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	2b0c      	cmp	r3, #12
 8008144:	d027      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	2b0b      	cmp	r3, #11
 800814c:	d023      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	2b0a      	cmp	r3, #10
 8008154:	d01f      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	2b09      	cmp	r3, #9
 800815c:	d01b      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	2b08      	cmp	r3, #8
 8008164:	d017      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	2b07      	cmp	r3, #7
 800816c:	d013      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b06      	cmp	r3, #6
 8008174:	d00f      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	2b05      	cmp	r3, #5
 800817c:	d00b      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	2b04      	cmp	r3, #4
 8008184:	d007      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2b03      	cmp	r3, #3
 800818c:	d003      	beq.n	8008196 <HAL_SPI_Init+0x19a>
 800818e:	21f9      	movs	r1, #249	; 0xf9
 8008190:	483d      	ldr	r0, [pc, #244]	; (8008288 <HAL_SPI_Init+0x28c>)
 8008192:	f7f8 fe52 	bl	8000e3a <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d047      	beq.n	800822e <HAL_SPI_Init+0x232>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	2b20      	cmp	r3, #32
 80081a4:	d043      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081aa:	2b40      	cmp	r3, #64	; 0x40
 80081ac:	d03f      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	2b60      	cmp	r3, #96	; 0x60
 80081b4:	d03b      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ba:	2b80      	cmp	r3, #128	; 0x80
 80081bc:	d037      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	2ba0      	cmp	r3, #160	; 0xa0
 80081c4:	d033      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	2bc0      	cmp	r3, #192	; 0xc0
 80081cc:	d02f      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	2be0      	cmp	r3, #224	; 0xe0
 80081d4:	d02b      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081de:	d026      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80081e8:	d021      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80081f2:	d01c      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f8:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 80081fc:	d017      	beq.n	800822e <HAL_SPI_Init+0x232>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008206:	d012      	beq.n	800822e <HAL_SPI_Init+0x232>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820c:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8008210:	d00d      	beq.n	800822e <HAL_SPI_Init+0x232>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800821a:	d008      	beq.n	800822e <HAL_SPI_Init+0x232>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008220:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8008224:	d003      	beq.n	800822e <HAL_SPI_Init+0x232>
 8008226:	21fa      	movs	r1, #250	; 0xfa
 8008228:	4817      	ldr	r0, [pc, #92]	; (8008288 <HAL_SPI_Init+0x28c>)
 800822a:	f7f8 fe06 	bl	8000e3a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008236:	d00c      	beq.n	8008252 <HAL_SPI_Init+0x256>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d008      	beq.n	8008252 <HAL_SPI_Init+0x256>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008248:	d003      	beq.n	8008252 <HAL_SPI_Init+0x256>
 800824a:	21fb      	movs	r1, #251	; 0xfb
 800824c:	480e      	ldr	r0, [pc, #56]	; (8008288 <HAL_SPI_Init+0x28c>)
 800824e:	f7f8 fdf4 	bl	8000e3a <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825a:	d017      	beq.n	800828c <HAL_SPI_Init+0x290>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008260:	2b00      	cmp	r3, #0
 8008262:	d013      	beq.n	800828c <HAL_SPI_Init+0x290>
 8008264:	21fc      	movs	r1, #252	; 0xfc
 8008266:	4808      	ldr	r0, [pc, #32]	; (8008288 <HAL_SPI_Init+0x28c>)
 8008268:	f7f8 fde7 	bl	8000e3a <assert_failed>
 800826c:	e00e      	b.n	800828c <HAL_SPI_Init+0x290>
 800826e:	bf00      	nop
 8008270:	40013000 	.word	0x40013000
 8008274:	40003800 	.word	0x40003800
 8008278:	40003c00 	.word	0x40003c00
 800827c:	40013400 	.word	0x40013400
 8008280:	40015000 	.word	0x40015000
 8008284:	58001400 	.word	0x58001400
 8008288:	0800c030 	.word	0x0800c030
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d026      	beq.n	80082e2 <HAL_SPI_Init+0x2e6>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800829c:	d021      	beq.n	80082e2 <HAL_SPI_Init+0x2e6>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a6:	d01c      	beq.n	80082e2 <HAL_SPI_Init+0x2e6>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082b0:	d017      	beq.n	80082e2 <HAL_SPI_Init+0x2e6>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ba:	d012      	beq.n	80082e2 <HAL_SPI_Init+0x2e6>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082c4:	d00d      	beq.n	80082e2 <HAL_SPI_Init+0x2e6>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80082ce:	d008      	beq.n	80082e2 <HAL_SPI_Init+0x2e6>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 80082d8:	d003      	beq.n	80082e2 <HAL_SPI_Init+0x2e6>
 80082da:	21fd      	movs	r1, #253	; 0xfd
 80082dc:	4891      	ldr	r0, [pc, #580]	; (8008524 <HAL_SPI_Init+0x528>)
 80082de:	f7f8 fdac 	bl	8000e3a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <HAL_SPI_Init+0x300>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082f2:	d003      	beq.n	80082fc <HAL_SPI_Init+0x300>
 80082f4:	21fe      	movs	r1, #254	; 0xfe
 80082f6:	488b      	ldr	r0, [pc, #556]	; (8008524 <HAL_SPI_Init+0x528>)
 80082f8:	f7f8 fd9f 	bl	8000e3a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	2b00      	cmp	r3, #0
 8008302:	d008      	beq.n	8008316 <HAL_SPI_Init+0x31a>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800830c:	d003      	beq.n	8008316 <HAL_SPI_Init+0x31a>
 800830e:	21ff      	movs	r1, #255	; 0xff
 8008310:	4884      	ldr	r0, [pc, #528]	; (8008524 <HAL_SPI_Init+0x528>)
 8008312:	f7f8 fd92 	bl	8000e3a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	d11b      	bne.n	8008356 <HAL_SPI_Init+0x35a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <HAL_SPI_Init+0x33e>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800832e:	d004      	beq.n	800833a <HAL_SPI_Init+0x33e>
 8008330:	f44f 7181 	mov.w	r1, #258	; 0x102
 8008334:	487b      	ldr	r0, [pc, #492]	; (8008524 <HAL_SPI_Init+0x528>)
 8008336:	f7f8 fd80 	bl	8000e3a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <HAL_SPI_Init+0x35a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800834a:	d004      	beq.n	8008356 <HAL_SPI_Init+0x35a>
 800834c:	f240 1103 	movw	r1, #259	; 0x103
 8008350:	4874      	ldr	r0, [pc, #464]	; (8008524 <HAL_SPI_Init+0x528>)
 8008352:	f7f8 fd72 	bl	8000e3a <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a71      	ldr	r2, [pc, #452]	; (8008528 <HAL_SPI_Init+0x52c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00f      	beq.n	8008386 <HAL_SPI_Init+0x38a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a70      	ldr	r2, [pc, #448]	; (800852c <HAL_SPI_Init+0x530>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00a      	beq.n	8008386 <HAL_SPI_Init+0x38a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a6e      	ldr	r2, [pc, #440]	; (8008530 <HAL_SPI_Init+0x534>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d005      	beq.n	8008386 <HAL_SPI_Init+0x38a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	2b0f      	cmp	r3, #15
 8008380:	d901      	bls.n	8008386 <HAL_SPI_Init+0x38a>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e0ca      	b.n	800851c <HAL_SPI_Init+0x520>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fc9c 	bl	8008cc4 <SPI_GetPacketSize>
 800838c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a65      	ldr	r2, [pc, #404]	; (8008528 <HAL_SPI_Init+0x52c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00c      	beq.n	80083b2 <HAL_SPI_Init+0x3b6>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a63      	ldr	r2, [pc, #396]	; (800852c <HAL_SPI_Init+0x530>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d007      	beq.n	80083b2 <HAL_SPI_Init+0x3b6>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a62      	ldr	r2, [pc, #392]	; (8008530 <HAL_SPI_Init+0x534>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d002      	beq.n	80083b2 <HAL_SPI_Init+0x3b6>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b08      	cmp	r3, #8
 80083b0:	d811      	bhi.n	80083d6 <HAL_SPI_Init+0x3da>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083b6:	4a5c      	ldr	r2, [pc, #368]	; (8008528 <HAL_SPI_Init+0x52c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <HAL_SPI_Init+0x3d4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a5a      	ldr	r2, [pc, #360]	; (800852c <HAL_SPI_Init+0x530>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <HAL_SPI_Init+0x3d4>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a59      	ldr	r2, [pc, #356]	; (8008530 <HAL_SPI_Init+0x534>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d104      	bne.n	80083da <HAL_SPI_Init+0x3de>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b10      	cmp	r3, #16
 80083d4:	d901      	bls.n	80083da <HAL_SPI_Init+0x3de>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e0a0      	b.n	800851c <HAL_SPI_Init+0x520>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <HAL_SPI_Init+0x3f8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7f8 fd84 	bl	8000efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0201 	bic.w	r2, r2, #1
 800840a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008414:	d110      	bne.n	8008438 <HAL_SPI_Init+0x43c>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800841e:	d10b      	bne.n	8008438 <HAL_SPI_Init+0x43c>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d107      	bne.n	8008438 <HAL_SPI_Init+0x43c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008436:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69da      	ldr	r2, [r3, #28]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008440:	431a      	orrs	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	ea42 0103 	orr.w	r1, r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008468:	431a      	orrs	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	431a      	orrs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	431a      	orrs	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008498:	ea42 0103 	orr.w	r1, r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d113      	bne.n	80084d8 <HAL_SPI_Init+0x4dc>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084d6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0201 	bic.w	r2, r2, #1
 80084e6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <HAL_SPI_Init+0x50e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	0800c030 	.word	0x0800c030
 8008528:	40013000 	.word	0x40013000
 800852c:	40003800 	.word	0x40003800
 8008530:	40003c00 	.word	0x40003c00

08008534 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08c      	sub	sp, #48	; 0x30
 8008538:	af02      	add	r7, sp, #8
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t   tmp_mode;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <HAL_SPI_TransmitReceive+0x26>
 8008550:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8008554:	489a      	ldr	r0, [pc, #616]	; (80087c0 <HAL_SPI_TransmitReceive+0x28c>)
 8008556:	f7f8 fc70 	bl	8000e3a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x34>
 8008564:	2302      	movs	r3, #2
 8008566:	e2da      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x5ea>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008570:	f7f8 ff16 	bl	80013a0 <HAL_GetTick>
 8008574:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008576:	887b      	ldrh	r3, [r7, #2]
 8008578:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800857a:	887b      	ldrh	r3, [r7, #2]
 800857c:	84bb      	strh	r3, [r7, #36]	; 0x24
  tmp_state           = hspi->State;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008584:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800858c:	7efb      	ldrb	r3, [r7, #27]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d014      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x88>
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008598:	d106      	bne.n	80085a8 <HAL_SPI_TransmitReceive+0x74>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <HAL_SPI_TransmitReceive+0x74>
 80085a2:	7efb      	ldrb	r3, [r7, #27]
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d009      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 80085a8:	2302      	movs	r3, #2
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80085b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085ba:	e2b0      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x5ea>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <HAL_SPI_TransmitReceive+0x9a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_SPI_TransmitReceive+0x9a>
 80085c8:	887b      	ldrh	r3, [r7, #2]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d109      	bne.n	80085e2 <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80085dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085e0:	e29d      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x5ea>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d003      	beq.n	80085f6 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2205      	movs	r2, #5
 80085f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	887a      	ldrh	r2, [r7, #2]
 8008608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	887a      	ldrh	r2, [r7, #2]
 8008610:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	887a      	ldrh	r2, [r7, #2]
 800861e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	887a      	ldrh	r2, [r7, #2]
 8008626:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	4b61      	ldr	r3, [pc, #388]	; (80087c4 <HAL_SPI_TransmitReceive+0x290>)
 800863e:	4013      	ands	r3, r2
 8008640:	8879      	ldrh	r1, [r7, #2]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	6812      	ldr	r2, [r2, #0]
 8008646:	430b      	orrs	r3, r1
 8008648:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0201 	orr.w	r2, r2, #1
 8008658:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008662:	d107      	bne.n	8008674 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b0f      	cmp	r3, #15
 800867a:	d970      	bls.n	800875e <HAL_SPI_TransmitReceive+0x22a>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800867c:	e044      	b.n	8008708 <HAL_SPI_TransmitReceive+0x1d4>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b02      	cmp	r3, #2
 800868a:	d11a      	bne.n	80086c2 <HAL_SPI_TransmitReceive+0x18e>
 800868c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800868e:	2b00      	cmp	r3, #0
 8008690:	d017      	beq.n	80086c2 <HAL_SPI_TransmitReceive+0x18e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a2:	1d1a      	adds	r2, r3, #4
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086c0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	695a      	ldr	r2, [r3, #20]
 80086c8:	f248 0308 	movw	r3, #32776	; 0x8008
 80086cc:	4013      	ands	r3, r2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01a      	beq.n	8008708 <HAL_SPI_TransmitReceive+0x1d4>
 80086d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d017      	beq.n	8008708 <HAL_SPI_TransmitReceive+0x1d4>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086e2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	3b01      	subs	r3, #1
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008706:	84bb      	strh	r3, [r7, #36]	; 0x24
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1b7      	bne.n	800867e <HAL_SPI_TransmitReceive+0x14a>
 800870e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1b4      	bne.n	800867e <HAL_SPI_TransmitReceive+0x14a>
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008714:	f7f8 fe44 	bl	80013a0 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008720:	429a      	cmp	r2, r3
 8008722:	d803      	bhi.n	800872c <HAL_SPI_TransmitReceive+0x1f8>
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d103      	bne.n	8008734 <HAL_SPI_TransmitReceive+0x200>
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 81ce 	bne.w	8008ad0 <HAL_SPI_TransmitReceive+0x59c>
    {
      /* Call standard close procedure with error check */
      SPI_CloseTransfer(hspi);
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 f9f7 	bl	8008b28 <SPI_CloseTransfer>

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008748:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      hspi->State = HAL_SPI_STATE_READY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e1df      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x5ea>
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2b07      	cmp	r3, #7
 8008764:	f240 81ac 	bls.w	8008ac0 <HAL_SPI_TransmitReceive+0x58c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008768:	e0b0      	b.n	80088cc <HAL_SPI_TransmitReceive+0x398>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b02      	cmp	r3, #2
 8008776:	d140      	bne.n	80087fa <HAL_SPI_TransmitReceive+0x2c6>
 8008778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800877a:	2b00      	cmp	r3, #0
 800877c:	d03d      	beq.n	80087fa <HAL_SPI_TransmitReceive+0x2c6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800877e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008780:	2b01      	cmp	r3, #1
 8008782:	d921      	bls.n	80087c8 <HAL_SPI_TransmitReceive+0x294>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d01d      	beq.n	80087c8 <HAL_SPI_TransmitReceive+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b02      	subs	r3, #2
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80087bc:	e01d      	b.n	80087fa <HAL_SPI_TransmitReceive+0x2c6>
 80087be:	bf00      	nop
 80087c0:	0800c030 	.word	0x0800c030
 80087c4:	ffff0000 	.word	0xffff0000
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3320      	adds	r3, #32
 80087d2:	8812      	ldrh	r2, [r2, #0]
 80087d4:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087da:	1c9a      	adds	r2, r3, #2
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d03d      	beq.n	8008884 <HAL_SPI_TransmitReceive+0x350>
 8008808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800880a:	2b00      	cmp	r3, #0
 800880c:	d03a      	beq.n	8008884 <HAL_SPI_TransmitReceive+0x350>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d018      	beq.n	800884e <HAL_SPI_TransmitReceive+0x31a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008824:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008826:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882c:	1d1a      	adds	r2, r3, #4
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b02      	subs	r3, #2
 800883c:	b29a      	uxth	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800884a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800884c:	e01a      	b.n	8008884 <HAL_SPI_TransmitReceive+0x350>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800885a:	8812      	ldrh	r2, [r2, #0]
 800885c:	b292      	uxth	r2, r2
 800885e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008864:	1c9a      	adds	r2, r3, #2
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008870:	b29b      	uxth	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008882:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008884:	f7f8 fd8c 	bl	80013a0 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008890:	429a      	cmp	r2, r3
 8008892:	d803      	bhi.n	800889c <HAL_SPI_TransmitReceive+0x368>
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889a:	d102      	bne.n	80088a2 <HAL_SPI_TransmitReceive+0x36e>
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d114      	bne.n	80088cc <HAL_SPI_TransmitReceive+0x398>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f940 	bl	8008b28 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e128      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80088cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f47f af4b 	bne.w	800876a <HAL_SPI_TransmitReceive+0x236>
 80088d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f47f af47 	bne.w	800876a <HAL_SPI_TransmitReceive+0x236>
 80088dc:	e0f8      	b.n	8008ad0 <HAL_SPI_TransmitReceive+0x59c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d15c      	bne.n	80089a6 <HAL_SPI_TransmitReceive+0x472>
 80088ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d059      	beq.n	80089a6 <HAL_SPI_TransmitReceive+0x472>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80088f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d91c      	bls.n	8008932 <HAL_SPI_TransmitReceive+0x3fe>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	d918      	bls.n	8008932 <HAL_SPI_TransmitReceive+0x3fe>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6812      	ldr	r2, [r2, #0]
 800890a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008910:	1d1a      	adds	r2, r3, #4
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800891c:	b29b      	uxth	r3, r3
 800891e:	3b04      	subs	r3, #4
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800892e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008930:	e039      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x472>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008932:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008934:	2b01      	cmp	r3, #1
 8008936:	d91d      	bls.n	8008974 <HAL_SPI_TransmitReceive+0x440>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d019      	beq.n	8008974 <HAL_SPI_TransmitReceive+0x440>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3320      	adds	r3, #32
 800894a:	8812      	ldrh	r2, [r2, #0]
 800894c:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008952:	1c9a      	adds	r2, r3, #2
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800895e:	b29b      	uxth	r3, r3
 8008960:	3b02      	subs	r3, #2
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008970:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008972:	e018      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3320      	adds	r3, #32
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008992:	b29b      	uxth	r3, r3
 8008994:	3b01      	subs	r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089a4:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d061      	beq.n	8008a78 <HAL_SPI_TransmitReceive+0x544>
 80089b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d05e      	beq.n	8008a78 <HAL_SPI_TransmitReceive+0x544>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d018      	beq.n	80089fa <HAL_SPI_TransmitReceive+0x4c6>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089d2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d8:	1d1a      	adds	r2, r3, #4
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b04      	subs	r3, #4
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80089f8:	e03e      	b.n	8008a78 <HAL_SPI_TransmitReceive+0x544>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a08:	d91b      	bls.n	8008a42 <HAL_SPI_TransmitReceive+0x50e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a16:	8812      	ldrh	r2, [r2, #0]
 8008a18:	b292      	uxth	r2, r2
 8008a1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a20:	1c9a      	adds	r2, r3, #2
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b02      	subs	r3, #2
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008a40:	e01a      	b.n	8008a78 <HAL_SPI_TransmitReceive+0x544>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a4e:	7812      	ldrb	r2, [r2, #0]
 8008a50:	b2d2      	uxtb	r2, r2
 8008a52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	3b01      	subs	r3, #1
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a76:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a78:	f7f8 fc92 	bl	80013a0 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d803      	bhi.n	8008a90 <HAL_SPI_TransmitReceive+0x55c>
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8e:	d102      	bne.n	8008a96 <HAL_SPI_TransmitReceive+0x562>
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d114      	bne.n	8008ac0 <HAL_SPI_TransmitReceive+0x58c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 f846 	bl	8008b28 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e02e      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ac0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f47f af0b 	bne.w	80088de <HAL_SPI_TransmitReceive+0x3aa>
 8008ac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f47f af07 	bne.w	80088de <HAL_SPI_TransmitReceive+0x3aa>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2108      	movs	r1, #8
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 f8c4 	bl	8008c68 <SPI_WaitOnFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d007      	beq.n	8008af6 <HAL_SPI_TransmitReceive+0x5c2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aec:	f043 0220 	orr.w	r2, r3, #32
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f816 	bl	8008b28 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <HAL_SPI_TransmitReceive+0x5e6>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e001      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x5ea>
  }
  return errorcode;
 8008b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3728      	adds	r7, #40	; 0x28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop

08008b28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699a      	ldr	r2, [r3, #24]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0208 	orr.w	r2, r2, #8
 8008b46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0210 	orr.w	r2, r2, #16
 8008b56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0201 	bic.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6919      	ldr	r1, [r3, #16]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	4b3c      	ldr	r3, [pc, #240]	; (8008c64 <SPI_CloseTransfer+0x13c>)
 8008b74:	400b      	ands	r3, r1
 8008b76:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008b86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d014      	beq.n	8008bbe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00f      	beq.n	8008bbe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f042 0220 	orr.w	r2, r2, #32
 8008bbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d014      	beq.n	8008bf4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00f      	beq.n	8008bf4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bda:	f043 0204 	orr.w	r2, r3, #4
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bf2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00f      	beq.n	8008c1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c04:	f043 0201 	orr.w	r2, r3, #1
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00f      	beq.n	8008c48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c2e:	f043 0208 	orr.w	r2, r3, #8
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008c58:	bf00      	nop
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	fffffc90 	.word	0xfffffc90

08008c68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c78:	e010      	b.n	8008c9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c7a:	f7f8 fb91 	bl	80013a0 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d803      	bhi.n	8008c92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c90:	d102      	bne.n	8008c98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e00f      	b.n	8008cbc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	bf0c      	ite	eq
 8008cac:	2301      	moveq	r3, #1
 8008cae:	2300      	movne	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d0df      	beq.n	8008c7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	08db      	lsrs	r3, r3, #3
 8008ce4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	fb02 f303 	mul.w	r3, r2, r3
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
	...

08008cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e0ab      	b.n	8008e66 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d032      	beq.n	8008d7c <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a55      	ldr	r2, [pc, #340]	; (8008e70 <HAL_UART_Init+0x174>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d05f      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a53      	ldr	r2, [pc, #332]	; (8008e74 <HAL_UART_Init+0x178>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d05a      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a52      	ldr	r2, [pc, #328]	; (8008e78 <HAL_UART_Init+0x17c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d055      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a50      	ldr	r2, [pc, #320]	; (8008e7c <HAL_UART_Init+0x180>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d050      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a4f      	ldr	r2, [pc, #316]	; (8008e80 <HAL_UART_Init+0x184>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d04b      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a4d      	ldr	r2, [pc, #308]	; (8008e84 <HAL_UART_Init+0x188>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d046      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a4c      	ldr	r2, [pc, #304]	; (8008e88 <HAL_UART_Init+0x18c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d041      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a4a      	ldr	r2, [pc, #296]	; (8008e8c <HAL_UART_Init+0x190>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d03c      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a49      	ldr	r2, [pc, #292]	; (8008e90 <HAL_UART_Init+0x194>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d037      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d70:	f44f 7199 	mov.w	r1, #306	; 0x132
 8008d74:	4847      	ldr	r0, [pc, #284]	; (8008e94 <HAL_UART_Init+0x198>)
 8008d76:	f7f8 f860 	bl	8000e3a <assert_failed>
 8008d7a:	e031      	b.n	8008de0 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a3b      	ldr	r2, [pc, #236]	; (8008e70 <HAL_UART_Init+0x174>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d02c      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a3a      	ldr	r2, [pc, #232]	; (8008e74 <HAL_UART_Init+0x178>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d027      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a38      	ldr	r2, [pc, #224]	; (8008e78 <HAL_UART_Init+0x17c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d022      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a37      	ldr	r2, [pc, #220]	; (8008e7c <HAL_UART_Init+0x180>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d01d      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a35      	ldr	r2, [pc, #212]	; (8008e80 <HAL_UART_Init+0x184>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d018      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a34      	ldr	r2, [pc, #208]	; (8008e84 <HAL_UART_Init+0x188>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d013      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a32      	ldr	r2, [pc, #200]	; (8008e88 <HAL_UART_Init+0x18c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00e      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a31      	ldr	r2, [pc, #196]	; (8008e8c <HAL_UART_Init+0x190>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d009      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a2f      	ldr	r2, [pc, #188]	; (8008e90 <HAL_UART_Init+0x194>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d004      	beq.n	8008de0 <HAL_UART_Init+0xe4>
 8008dd6:	f240 1137 	movw	r1, #311	; 0x137
 8008dda:	482e      	ldr	r0, [pc, #184]	; (8008e94 <HAL_UART_Init+0x198>)
 8008ddc:	f7f8 f82d 	bl	8000e3a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f8 f9de 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2224      	movs	r2, #36	; 0x24
 8008dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0201 	bic.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f841 	bl	8008e98 <UART_SetConfig>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e022      	b.n	8008e66 <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f002 fa93 	bl	800b354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0201 	orr.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f002 fbee 	bl	800b640 <UART_CheckIdleState>
 8008e64:	4603      	mov	r3, r0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	40011000 	.word	0x40011000
 8008e74:	40004400 	.word	0x40004400
 8008e78:	40004800 	.word	0x40004800
 8008e7c:	40004c00 	.word	0x40004c00
 8008e80:	40005000 	.word	0x40005000
 8008e84:	40011400 	.word	0x40011400
 8008e88:	40007800 	.word	0x40007800
 8008e8c:	40007c00 	.word	0x40007c00
 8008e90:	58000c00 	.word	0x58000c00
 8008e94:	0800c068 	.word	0x0800c068

08008e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008e9c:	b090      	sub	sp, #64	; 0x40
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <UART_SetConfig+0x7c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d904      	bls.n	8008ec4 <UART_SetConfig+0x2c>
 8008eba:	f640 3134 	movw	r1, #2868	; 0xb34
 8008ebe:	4816      	ldr	r0, [pc, #88]	; (8008f18 <UART_SetConfig+0x80>)
 8008ec0:	f7f7 ffbb 	bl	8000e3a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ecc:	d00d      	beq.n	8008eea <UART_SetConfig+0x52>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d009      	beq.n	8008eea <UART_SetConfig+0x52>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ede:	d004      	beq.n	8008eea <UART_SetConfig+0x52>
 8008ee0:	f640 3135 	movw	r1, #2869	; 0xb35
 8008ee4:	480c      	ldr	r0, [pc, #48]	; (8008f18 <UART_SetConfig+0x80>)
 8008ee6:	f7f7 ffa8 	bl	8000e3a <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a0b      	ldr	r2, [pc, #44]	; (8008f1c <UART_SetConfig+0x84>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d115      	bne.n	8008f20 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d037      	beq.n	8008f6c <UART_SetConfig+0xd4>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f04:	d032      	beq.n	8008f6c <UART_SetConfig+0xd4>
 8008f06:	f640 3138 	movw	r1, #2872	; 0xb38
 8008f0a:	4803      	ldr	r0, [pc, #12]	; (8008f18 <UART_SetConfig+0x80>)
 8008f0c:	f7f7 ff95 	bl	8000e3a <assert_failed>
 8008f10:	e02c      	b.n	8008f6c <UART_SetConfig+0xd4>
 8008f12:	bf00      	nop
 8008f14:	00bebc20 	.word	0x00bebc20
 8008f18:	0800c068 	.word	0x0800c068
 8008f1c:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f28:	d012      	beq.n	8008f50 <UART_SetConfig+0xb8>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00e      	beq.n	8008f50 <UART_SetConfig+0xb8>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f3a:	d009      	beq.n	8008f50 <UART_SetConfig+0xb8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f44:	d004      	beq.n	8008f50 <UART_SetConfig+0xb8>
 8008f46:	f640 313c 	movw	r1, #2876	; 0xb3c
 8008f4a:	48aa      	ldr	r0, [pc, #680]	; (80091f4 <UART_SetConfig+0x35c>)
 8008f4c:	f7f7 ff75 	bl	8000e3a <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <UART_SetConfig+0xd4>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f60:	d004      	beq.n	8008f6c <UART_SetConfig+0xd4>
 8008f62:	f640 313d 	movw	r1, #2877	; 0xb3d
 8008f66:	48a3      	ldr	r0, [pc, #652]	; (80091f4 <UART_SetConfig+0x35c>)
 8008f68:	f7f7 ff67 	bl	8000e3a <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00e      	beq.n	8008f92 <UART_SetConfig+0xfa>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f7c:	d009      	beq.n	8008f92 <UART_SetConfig+0xfa>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008f86:	d004      	beq.n	8008f92 <UART_SetConfig+0xfa>
 8008f88:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8008f8c:	4899      	ldr	r0, [pc, #612]	; (80091f4 <UART_SetConfig+0x35c>)
 8008f8e:	f7f7 ff54 	bl	8000e3a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	f023 030c 	bic.w	r3, r3, #12
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d103      	bne.n	8008fa6 <UART_SetConfig+0x10e>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d104      	bne.n	8008fb0 <UART_SetConfig+0x118>
 8008fa6:	f640 3141 	movw	r1, #2881	; 0xb41
 8008faa:	4892      	ldr	r0, [pc, #584]	; (80091f4 <UART_SetConfig+0x35c>)
 8008fac:	f7f7 ff45 	bl	8000e3a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d013      	beq.n	8008fe0 <UART_SetConfig+0x148>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc0:	d00e      	beq.n	8008fe0 <UART_SetConfig+0x148>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fca:	d009      	beq.n	8008fe0 <UART_SetConfig+0x148>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd4:	d004      	beq.n	8008fe0 <UART_SetConfig+0x148>
 8008fd6:	f640 3142 	movw	r1, #2882	; 0xb42
 8008fda:	4886      	ldr	r0, [pc, #536]	; (80091f4 <UART_SetConfig+0x35c>)
 8008fdc:	f7f7 ff2d 	bl	8000e3a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d009      	beq.n	8008ffc <UART_SetConfig+0x164>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff0:	d004      	beq.n	8008ffc <UART_SetConfig+0x164>
 8008ff2:	f640 3143 	movw	r1, #2883	; 0xb43
 8008ff6:	487f      	ldr	r0, [pc, #508]	; (80091f4 <UART_SetConfig+0x35c>)
 8008ff8:	f7f7 ff1f 	bl	8000e3a <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	d030      	beq.n	8009066 <UART_SetConfig+0x1ce>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b01      	cmp	r3, #1
 800900a:	d02c      	beq.n	8009066 <UART_SetConfig+0x1ce>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	2b02      	cmp	r3, #2
 8009012:	d028      	beq.n	8009066 <UART_SetConfig+0x1ce>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	2b03      	cmp	r3, #3
 800901a:	d024      	beq.n	8009066 <UART_SetConfig+0x1ce>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2b04      	cmp	r3, #4
 8009022:	d020      	beq.n	8009066 <UART_SetConfig+0x1ce>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	2b05      	cmp	r3, #5
 800902a:	d01c      	beq.n	8009066 <UART_SetConfig+0x1ce>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	2b06      	cmp	r3, #6
 8009032:	d018      	beq.n	8009066 <UART_SetConfig+0x1ce>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b07      	cmp	r3, #7
 800903a:	d014      	beq.n	8009066 <UART_SetConfig+0x1ce>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2b08      	cmp	r3, #8
 8009042:	d010      	beq.n	8009066 <UART_SetConfig+0x1ce>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b09      	cmp	r3, #9
 800904a:	d00c      	beq.n	8009066 <UART_SetConfig+0x1ce>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	2b0a      	cmp	r3, #10
 8009052:	d008      	beq.n	8009066 <UART_SetConfig+0x1ce>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	2b0b      	cmp	r3, #11
 800905a:	d004      	beq.n	8009066 <UART_SetConfig+0x1ce>
 800905c:	f640 3144 	movw	r1, #2884	; 0xb44
 8009060:	4864      	ldr	r0, [pc, #400]	; (80091f4 <UART_SetConfig+0x35c>)
 8009062:	f7f7 feea 	bl	8000e3a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689a      	ldr	r2, [r3, #8]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	431a      	orrs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	4313      	orrs	r3, r2
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009082:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009084:	4313      	orrs	r3, r2
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	4b5a      	ldr	r3, [pc, #360]	; (80091f8 <UART_SetConfig+0x360>)
 8009090:	4013      	ands	r3, r2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6812      	ldr	r2, [r2, #0]
 8009096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009098:	430b      	orrs	r3, r1
 800909a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a4f      	ldr	r2, [pc, #316]	; (80091fc <UART_SetConfig+0x364>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d004      	beq.n	80090cc <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090c8:	4313      	orrs	r3, r2
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	4b4b      	ldr	r3, [pc, #300]	; (8009200 <UART_SetConfig+0x368>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	6812      	ldr	r2, [r2, #0]
 80090da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090dc:	430b      	orrs	r3, r1
 80090de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	f023 010f 	bic.w	r1, r3, #15
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a42      	ldr	r2, [pc, #264]	; (8009204 <UART_SetConfig+0x36c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	f040 8085 	bne.w	800920c <UART_SetConfig+0x374>
 8009102:	4b41      	ldr	r3, [pc, #260]	; (8009208 <UART_SetConfig+0x370>)
 8009104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800910a:	2b28      	cmp	r3, #40	; 0x28
 800910c:	d86c      	bhi.n	80091e8 <UART_SetConfig+0x350>
 800910e:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <UART_SetConfig+0x27c>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	080091b9 	.word	0x080091b9
 8009118:	080091e9 	.word	0x080091e9
 800911c:	080091e9 	.word	0x080091e9
 8009120:	080091e9 	.word	0x080091e9
 8009124:	080091e9 	.word	0x080091e9
 8009128:	080091e9 	.word	0x080091e9
 800912c:	080091e9 	.word	0x080091e9
 8009130:	080091e9 	.word	0x080091e9
 8009134:	080091c1 	.word	0x080091c1
 8009138:	080091e9 	.word	0x080091e9
 800913c:	080091e9 	.word	0x080091e9
 8009140:	080091e9 	.word	0x080091e9
 8009144:	080091e9 	.word	0x080091e9
 8009148:	080091e9 	.word	0x080091e9
 800914c:	080091e9 	.word	0x080091e9
 8009150:	080091e9 	.word	0x080091e9
 8009154:	080091c9 	.word	0x080091c9
 8009158:	080091e9 	.word	0x080091e9
 800915c:	080091e9 	.word	0x080091e9
 8009160:	080091e9 	.word	0x080091e9
 8009164:	080091e9 	.word	0x080091e9
 8009168:	080091e9 	.word	0x080091e9
 800916c:	080091e9 	.word	0x080091e9
 8009170:	080091e9 	.word	0x080091e9
 8009174:	080091d1 	.word	0x080091d1
 8009178:	080091e9 	.word	0x080091e9
 800917c:	080091e9 	.word	0x080091e9
 8009180:	080091e9 	.word	0x080091e9
 8009184:	080091e9 	.word	0x080091e9
 8009188:	080091e9 	.word	0x080091e9
 800918c:	080091e9 	.word	0x080091e9
 8009190:	080091e9 	.word	0x080091e9
 8009194:	080091d9 	.word	0x080091d9
 8009198:	080091e9 	.word	0x080091e9
 800919c:	080091e9 	.word	0x080091e9
 80091a0:	080091e9 	.word	0x080091e9
 80091a4:	080091e9 	.word	0x080091e9
 80091a8:	080091e9 	.word	0x080091e9
 80091ac:	080091e9 	.word	0x080091e9
 80091b0:	080091e9 	.word	0x080091e9
 80091b4:	080091e1 	.word	0x080091e1
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091be:	e23b      	b.n	8009638 <UART_SetConfig+0x7a0>
 80091c0:	2304      	movs	r3, #4
 80091c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091c6:	e237      	b.n	8009638 <UART_SetConfig+0x7a0>
 80091c8:	2308      	movs	r3, #8
 80091ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091ce:	e233      	b.n	8009638 <UART_SetConfig+0x7a0>
 80091d0:	2310      	movs	r3, #16
 80091d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091d6:	e22f      	b.n	8009638 <UART_SetConfig+0x7a0>
 80091d8:	2320      	movs	r3, #32
 80091da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091de:	e22b      	b.n	8009638 <UART_SetConfig+0x7a0>
 80091e0:	2340      	movs	r3, #64	; 0x40
 80091e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091e6:	e227      	b.n	8009638 <UART_SetConfig+0x7a0>
 80091e8:	2380      	movs	r3, #128	; 0x80
 80091ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091ee:	bf00      	nop
 80091f0:	e222      	b.n	8009638 <UART_SetConfig+0x7a0>
 80091f2:	bf00      	nop
 80091f4:	0800c068 	.word	0x0800c068
 80091f8:	cfff69f3 	.word	0xcfff69f3
 80091fc:	58000c00 	.word	0x58000c00
 8009200:	11fff4ff 	.word	0x11fff4ff
 8009204:	40011000 	.word	0x40011000
 8009208:	58024400 	.word	0x58024400
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4ac9      	ldr	r2, [pc, #804]	; (8009538 <UART_SetConfig+0x6a0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d131      	bne.n	800927a <UART_SetConfig+0x3e2>
 8009216:	4bc9      	ldr	r3, [pc, #804]	; (800953c <UART_SetConfig+0x6a4>)
 8009218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	2b05      	cmp	r3, #5
 8009220:	d826      	bhi.n	8009270 <UART_SetConfig+0x3d8>
 8009222:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <UART_SetConfig+0x390>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	08009241 	.word	0x08009241
 800922c:	08009249 	.word	0x08009249
 8009230:	08009251 	.word	0x08009251
 8009234:	08009259 	.word	0x08009259
 8009238:	08009261 	.word	0x08009261
 800923c:	08009269 	.word	0x08009269
 8009240:	2300      	movs	r3, #0
 8009242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009246:	e1f7      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009248:	2304      	movs	r3, #4
 800924a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800924e:	e1f3      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009250:	2308      	movs	r3, #8
 8009252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009256:	e1ef      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009258:	2310      	movs	r3, #16
 800925a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800925e:	e1eb      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009260:	2320      	movs	r3, #32
 8009262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009266:	e1e7      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009268:	2340      	movs	r3, #64	; 0x40
 800926a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800926e:	e1e3      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009270:	2380      	movs	r3, #128	; 0x80
 8009272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009276:	bf00      	nop
 8009278:	e1de      	b.n	8009638 <UART_SetConfig+0x7a0>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4ab0      	ldr	r2, [pc, #704]	; (8009540 <UART_SetConfig+0x6a8>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d132      	bne.n	80092ea <UART_SetConfig+0x452>
 8009284:	4bad      	ldr	r3, [pc, #692]	; (800953c <UART_SetConfig+0x6a4>)
 8009286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009288:	f003 0307 	and.w	r3, r3, #7
 800928c:	2b05      	cmp	r3, #5
 800928e:	d827      	bhi.n	80092e0 <UART_SetConfig+0x448>
 8009290:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <UART_SetConfig+0x400>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	080092b1 	.word	0x080092b1
 800929c:	080092b9 	.word	0x080092b9
 80092a0:	080092c1 	.word	0x080092c1
 80092a4:	080092c9 	.word	0x080092c9
 80092a8:	080092d1 	.word	0x080092d1
 80092ac:	080092d9 	.word	0x080092d9
 80092b0:	2300      	movs	r3, #0
 80092b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092b6:	e1bf      	b.n	8009638 <UART_SetConfig+0x7a0>
 80092b8:	2304      	movs	r3, #4
 80092ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092be:	e1bb      	b.n	8009638 <UART_SetConfig+0x7a0>
 80092c0:	2308      	movs	r3, #8
 80092c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092c6:	e1b7      	b.n	8009638 <UART_SetConfig+0x7a0>
 80092c8:	2310      	movs	r3, #16
 80092ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092ce:	e1b3      	b.n	8009638 <UART_SetConfig+0x7a0>
 80092d0:	2320      	movs	r3, #32
 80092d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092d6:	e1af      	b.n	8009638 <UART_SetConfig+0x7a0>
 80092d8:	2340      	movs	r3, #64	; 0x40
 80092da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092de:	e1ab      	b.n	8009638 <UART_SetConfig+0x7a0>
 80092e0:	2380      	movs	r3, #128	; 0x80
 80092e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092e6:	bf00      	nop
 80092e8:	e1a6      	b.n	8009638 <UART_SetConfig+0x7a0>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a95      	ldr	r2, [pc, #596]	; (8009544 <UART_SetConfig+0x6ac>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d132      	bne.n	800935a <UART_SetConfig+0x4c2>
 80092f4:	4b91      	ldr	r3, [pc, #580]	; (800953c <UART_SetConfig+0x6a4>)
 80092f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f8:	f003 0307 	and.w	r3, r3, #7
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d827      	bhi.n	8009350 <UART_SetConfig+0x4b8>
 8009300:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <UART_SetConfig+0x470>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	08009321 	.word	0x08009321
 800930c:	08009329 	.word	0x08009329
 8009310:	08009331 	.word	0x08009331
 8009314:	08009339 	.word	0x08009339
 8009318:	08009341 	.word	0x08009341
 800931c:	08009349 	.word	0x08009349
 8009320:	2300      	movs	r3, #0
 8009322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009326:	e187      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009328:	2304      	movs	r3, #4
 800932a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800932e:	e183      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009330:	2308      	movs	r3, #8
 8009332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009336:	e17f      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009338:	2310      	movs	r3, #16
 800933a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800933e:	e17b      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009340:	2320      	movs	r3, #32
 8009342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009346:	e177      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009348:	2340      	movs	r3, #64	; 0x40
 800934a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800934e:	e173      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009350:	2380      	movs	r3, #128	; 0x80
 8009352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009356:	bf00      	nop
 8009358:	e16e      	b.n	8009638 <UART_SetConfig+0x7a0>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a7a      	ldr	r2, [pc, #488]	; (8009548 <UART_SetConfig+0x6b0>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d132      	bne.n	80093ca <UART_SetConfig+0x532>
 8009364:	4b75      	ldr	r3, [pc, #468]	; (800953c <UART_SetConfig+0x6a4>)
 8009366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	2b05      	cmp	r3, #5
 800936e:	d827      	bhi.n	80093c0 <UART_SetConfig+0x528>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <UART_SetConfig+0x4e0>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	08009391 	.word	0x08009391
 800937c:	08009399 	.word	0x08009399
 8009380:	080093a1 	.word	0x080093a1
 8009384:	080093a9 	.word	0x080093a9
 8009388:	080093b1 	.word	0x080093b1
 800938c:	080093b9 	.word	0x080093b9
 8009390:	2300      	movs	r3, #0
 8009392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009396:	e14f      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009398:	2304      	movs	r3, #4
 800939a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800939e:	e14b      	b.n	8009638 <UART_SetConfig+0x7a0>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093a6:	e147      	b.n	8009638 <UART_SetConfig+0x7a0>
 80093a8:	2310      	movs	r3, #16
 80093aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093ae:	e143      	b.n	8009638 <UART_SetConfig+0x7a0>
 80093b0:	2320      	movs	r3, #32
 80093b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093b6:	e13f      	b.n	8009638 <UART_SetConfig+0x7a0>
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093be:	e13b      	b.n	8009638 <UART_SetConfig+0x7a0>
 80093c0:	2380      	movs	r3, #128	; 0x80
 80093c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093c6:	bf00      	nop
 80093c8:	e136      	b.n	8009638 <UART_SetConfig+0x7a0>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a5f      	ldr	r2, [pc, #380]	; (800954c <UART_SetConfig+0x6b4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d178      	bne.n	80094c6 <UART_SetConfig+0x62e>
 80093d4:	4b59      	ldr	r3, [pc, #356]	; (800953c <UART_SetConfig+0x6a4>)
 80093d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093dc:	2b28      	cmp	r3, #40	; 0x28
 80093de:	d86d      	bhi.n	80094bc <UART_SetConfig+0x624>
 80093e0:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <UART_SetConfig+0x550>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	0800948d 	.word	0x0800948d
 80093ec:	080094bd 	.word	0x080094bd
 80093f0:	080094bd 	.word	0x080094bd
 80093f4:	080094bd 	.word	0x080094bd
 80093f8:	080094bd 	.word	0x080094bd
 80093fc:	080094bd 	.word	0x080094bd
 8009400:	080094bd 	.word	0x080094bd
 8009404:	080094bd 	.word	0x080094bd
 8009408:	08009495 	.word	0x08009495
 800940c:	080094bd 	.word	0x080094bd
 8009410:	080094bd 	.word	0x080094bd
 8009414:	080094bd 	.word	0x080094bd
 8009418:	080094bd 	.word	0x080094bd
 800941c:	080094bd 	.word	0x080094bd
 8009420:	080094bd 	.word	0x080094bd
 8009424:	080094bd 	.word	0x080094bd
 8009428:	0800949d 	.word	0x0800949d
 800942c:	080094bd 	.word	0x080094bd
 8009430:	080094bd 	.word	0x080094bd
 8009434:	080094bd 	.word	0x080094bd
 8009438:	080094bd 	.word	0x080094bd
 800943c:	080094bd 	.word	0x080094bd
 8009440:	080094bd 	.word	0x080094bd
 8009444:	080094bd 	.word	0x080094bd
 8009448:	080094a5 	.word	0x080094a5
 800944c:	080094bd 	.word	0x080094bd
 8009450:	080094bd 	.word	0x080094bd
 8009454:	080094bd 	.word	0x080094bd
 8009458:	080094bd 	.word	0x080094bd
 800945c:	080094bd 	.word	0x080094bd
 8009460:	080094bd 	.word	0x080094bd
 8009464:	080094bd 	.word	0x080094bd
 8009468:	080094ad 	.word	0x080094ad
 800946c:	080094bd 	.word	0x080094bd
 8009470:	080094bd 	.word	0x080094bd
 8009474:	080094bd 	.word	0x080094bd
 8009478:	080094bd 	.word	0x080094bd
 800947c:	080094bd 	.word	0x080094bd
 8009480:	080094bd 	.word	0x080094bd
 8009484:	080094bd 	.word	0x080094bd
 8009488:	080094b5 	.word	0x080094b5
 800948c:	2301      	movs	r3, #1
 800948e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009492:	e0d1      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009494:	2304      	movs	r3, #4
 8009496:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800949a:	e0cd      	b.n	8009638 <UART_SetConfig+0x7a0>
 800949c:	2308      	movs	r3, #8
 800949e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094a2:	e0c9      	b.n	8009638 <UART_SetConfig+0x7a0>
 80094a4:	2310      	movs	r3, #16
 80094a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094aa:	e0c5      	b.n	8009638 <UART_SetConfig+0x7a0>
 80094ac:	2320      	movs	r3, #32
 80094ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094b2:	e0c1      	b.n	8009638 <UART_SetConfig+0x7a0>
 80094b4:	2340      	movs	r3, #64	; 0x40
 80094b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094ba:	e0bd      	b.n	8009638 <UART_SetConfig+0x7a0>
 80094bc:	2380      	movs	r3, #128	; 0x80
 80094be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094c2:	bf00      	nop
 80094c4:	e0b8      	b.n	8009638 <UART_SetConfig+0x7a0>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a21      	ldr	r2, [pc, #132]	; (8009550 <UART_SetConfig+0x6b8>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d141      	bne.n	8009554 <UART_SetConfig+0x6bc>
 80094d0:	4b1a      	ldr	r3, [pc, #104]	; (800953c <UART_SetConfig+0x6a4>)
 80094d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d4:	f003 0307 	and.w	r3, r3, #7
 80094d8:	2b05      	cmp	r3, #5
 80094da:	d827      	bhi.n	800952c <UART_SetConfig+0x694>
 80094dc:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <UART_SetConfig+0x64c>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	080094fd 	.word	0x080094fd
 80094e8:	08009505 	.word	0x08009505
 80094ec:	0800950d 	.word	0x0800950d
 80094f0:	08009515 	.word	0x08009515
 80094f4:	0800951d 	.word	0x0800951d
 80094f8:	08009525 	.word	0x08009525
 80094fc:	2300      	movs	r3, #0
 80094fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009502:	e099      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009504:	2304      	movs	r3, #4
 8009506:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800950a:	e095      	b.n	8009638 <UART_SetConfig+0x7a0>
 800950c:	2308      	movs	r3, #8
 800950e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009512:	e091      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009514:	2310      	movs	r3, #16
 8009516:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800951a:	e08d      	b.n	8009638 <UART_SetConfig+0x7a0>
 800951c:	2320      	movs	r3, #32
 800951e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009522:	e089      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009524:	2340      	movs	r3, #64	; 0x40
 8009526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800952a:	e085      	b.n	8009638 <UART_SetConfig+0x7a0>
 800952c:	2380      	movs	r3, #128	; 0x80
 800952e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009532:	bf00      	nop
 8009534:	e080      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009536:	bf00      	nop
 8009538:	40004400 	.word	0x40004400
 800953c:	58024400 	.word	0x58024400
 8009540:	40004800 	.word	0x40004800
 8009544:	40004c00 	.word	0x40004c00
 8009548:	40005000 	.word	0x40005000
 800954c:	40011400 	.word	0x40011400
 8009550:	40007800 	.word	0x40007800
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a98      	ldr	r2, [pc, #608]	; (80097bc <UART_SetConfig+0x924>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d131      	bne.n	80095c2 <UART_SetConfig+0x72a>
 800955e:	4b98      	ldr	r3, [pc, #608]	; (80097c0 <UART_SetConfig+0x928>)
 8009560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	2b05      	cmp	r3, #5
 8009568:	d826      	bhi.n	80095b8 <UART_SetConfig+0x720>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <UART_SetConfig+0x6d8>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009589 	.word	0x08009589
 8009574:	08009591 	.word	0x08009591
 8009578:	08009599 	.word	0x08009599
 800957c:	080095a1 	.word	0x080095a1
 8009580:	080095a9 	.word	0x080095a9
 8009584:	080095b1 	.word	0x080095b1
 8009588:	2300      	movs	r3, #0
 800958a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800958e:	e053      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009590:	2304      	movs	r3, #4
 8009592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009596:	e04f      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009598:	2308      	movs	r3, #8
 800959a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800959e:	e04b      	b.n	8009638 <UART_SetConfig+0x7a0>
 80095a0:	2310      	movs	r3, #16
 80095a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095a6:	e047      	b.n	8009638 <UART_SetConfig+0x7a0>
 80095a8:	2320      	movs	r3, #32
 80095aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095ae:	e043      	b.n	8009638 <UART_SetConfig+0x7a0>
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095b6:	e03f      	b.n	8009638 <UART_SetConfig+0x7a0>
 80095b8:	2380      	movs	r3, #128	; 0x80
 80095ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095be:	bf00      	nop
 80095c0:	e03a      	b.n	8009638 <UART_SetConfig+0x7a0>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a7f      	ldr	r2, [pc, #508]	; (80097c4 <UART_SetConfig+0x92c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d132      	bne.n	8009632 <UART_SetConfig+0x79a>
 80095cc:	4b7c      	ldr	r3, [pc, #496]	; (80097c0 <UART_SetConfig+0x928>)
 80095ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	2b05      	cmp	r3, #5
 80095d6:	d827      	bhi.n	8009628 <UART_SetConfig+0x790>
 80095d8:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <UART_SetConfig+0x748>)
 80095da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095de:	bf00      	nop
 80095e0:	080095f9 	.word	0x080095f9
 80095e4:	08009601 	.word	0x08009601
 80095e8:	08009609 	.word	0x08009609
 80095ec:	08009611 	.word	0x08009611
 80095f0:	08009619 	.word	0x08009619
 80095f4:	08009621 	.word	0x08009621
 80095f8:	2302      	movs	r3, #2
 80095fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095fe:	e01b      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009600:	2304      	movs	r3, #4
 8009602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009606:	e017      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009608:	2308      	movs	r3, #8
 800960a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800960e:	e013      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009610:	2310      	movs	r3, #16
 8009612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009616:	e00f      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009618:	2320      	movs	r3, #32
 800961a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800961e:	e00b      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009626:	e007      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009628:	2380      	movs	r3, #128	; 0x80
 800962a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800962e:	bf00      	nop
 8009630:	e002      	b.n	8009638 <UART_SetConfig+0x7a0>
 8009632:	2380      	movs	r3, #128	; 0x80
 8009634:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a61      	ldr	r2, [pc, #388]	; (80097c4 <UART_SetConfig+0x92c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	f040 86f3 	bne.w	800a42a <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009644:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009648:	2b08      	cmp	r3, #8
 800964a:	f000 80bd 	beq.w	80097c8 <UART_SetConfig+0x930>
 800964e:	2b08      	cmp	r3, #8
 8009650:	dc04      	bgt.n	800965c <UART_SetConfig+0x7c4>
 8009652:	2b02      	cmp	r3, #2
 8009654:	d00c      	beq.n	8009670 <UART_SetConfig+0x7d8>
 8009656:	2b04      	cmp	r3, #4
 8009658:	d05b      	beq.n	8009712 <UART_SetConfig+0x87a>
 800965a:	e276      	b.n	8009b4a <UART_SetConfig+0xcb2>
 800965c:	2b20      	cmp	r3, #32
 800965e:	f000 81ad 	beq.w	80099bc <UART_SetConfig+0xb24>
 8009662:	2b40      	cmp	r3, #64	; 0x40
 8009664:	f000 821a 	beq.w	8009a9c <UART_SetConfig+0xc04>
 8009668:	2b10      	cmp	r3, #16
 800966a:	f000 8101 	beq.w	8009870 <UART_SetConfig+0x9d8>
 800966e:	e26c      	b.n	8009b4a <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009670:	f7fd ffb2 	bl	80075d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009674:	4602      	mov	r2, r0
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	2b00      	cmp	r3, #0
 800967c:	d044      	beq.n	8009708 <UART_SetConfig+0x870>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009682:	2b01      	cmp	r3, #1
 8009684:	d03e      	beq.n	8009704 <UART_SetConfig+0x86c>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	2b02      	cmp	r3, #2
 800968c:	d038      	beq.n	8009700 <UART_SetConfig+0x868>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	2b03      	cmp	r3, #3
 8009694:	d032      	beq.n	80096fc <UART_SetConfig+0x864>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	2b04      	cmp	r3, #4
 800969c:	d02c      	beq.n	80096f8 <UART_SetConfig+0x860>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d026      	beq.n	80096f4 <UART_SetConfig+0x85c>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	2b06      	cmp	r3, #6
 80096ac:	d020      	beq.n	80096f0 <UART_SetConfig+0x858>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	2b07      	cmp	r3, #7
 80096b4:	d01a      	beq.n	80096ec <UART_SetConfig+0x854>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	2b08      	cmp	r3, #8
 80096bc:	d014      	beq.n	80096e8 <UART_SetConfig+0x850>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	2b09      	cmp	r3, #9
 80096c4:	d00e      	beq.n	80096e4 <UART_SetConfig+0x84c>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ca:	2b0a      	cmp	r3, #10
 80096cc:	d008      	beq.n	80096e0 <UART_SetConfig+0x848>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	2b0b      	cmp	r3, #11
 80096d4:	d102      	bne.n	80096dc <UART_SetConfig+0x844>
 80096d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096da:	e016      	b.n	800970a <UART_SetConfig+0x872>
 80096dc:	2301      	movs	r3, #1
 80096de:	e014      	b.n	800970a <UART_SetConfig+0x872>
 80096e0:	2380      	movs	r3, #128	; 0x80
 80096e2:	e012      	b.n	800970a <UART_SetConfig+0x872>
 80096e4:	2340      	movs	r3, #64	; 0x40
 80096e6:	e010      	b.n	800970a <UART_SetConfig+0x872>
 80096e8:	2320      	movs	r3, #32
 80096ea:	e00e      	b.n	800970a <UART_SetConfig+0x872>
 80096ec:	2310      	movs	r3, #16
 80096ee:	e00c      	b.n	800970a <UART_SetConfig+0x872>
 80096f0:	230c      	movs	r3, #12
 80096f2:	e00a      	b.n	800970a <UART_SetConfig+0x872>
 80096f4:	230a      	movs	r3, #10
 80096f6:	e008      	b.n	800970a <UART_SetConfig+0x872>
 80096f8:	2308      	movs	r3, #8
 80096fa:	e006      	b.n	800970a <UART_SetConfig+0x872>
 80096fc:	2306      	movs	r3, #6
 80096fe:	e004      	b.n	800970a <UART_SetConfig+0x872>
 8009700:	2304      	movs	r3, #4
 8009702:	e002      	b.n	800970a <UART_SetConfig+0x872>
 8009704:	2302      	movs	r3, #2
 8009706:	e000      	b.n	800970a <UART_SetConfig+0x872>
 8009708:	2301      	movs	r3, #1
 800970a:	fbb2 f3f3 	udiv	r3, r2, r3
 800970e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009710:	e21f      	b.n	8009b52 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009712:	f107 0318 	add.w	r3, r7, #24
 8009716:	4618      	mov	r0, r3
 8009718:	f7fd ff74 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	2b00      	cmp	r3, #0
 8009724:	d044      	beq.n	80097b0 <UART_SetConfig+0x918>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	2b01      	cmp	r3, #1
 800972c:	d03e      	beq.n	80097ac <UART_SetConfig+0x914>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	2b02      	cmp	r3, #2
 8009734:	d038      	beq.n	80097a8 <UART_SetConfig+0x910>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	2b03      	cmp	r3, #3
 800973c:	d032      	beq.n	80097a4 <UART_SetConfig+0x90c>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	2b04      	cmp	r3, #4
 8009744:	d02c      	beq.n	80097a0 <UART_SetConfig+0x908>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	2b05      	cmp	r3, #5
 800974c:	d026      	beq.n	800979c <UART_SetConfig+0x904>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	2b06      	cmp	r3, #6
 8009754:	d020      	beq.n	8009798 <UART_SetConfig+0x900>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	2b07      	cmp	r3, #7
 800975c:	d01a      	beq.n	8009794 <UART_SetConfig+0x8fc>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b08      	cmp	r3, #8
 8009764:	d014      	beq.n	8009790 <UART_SetConfig+0x8f8>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	2b09      	cmp	r3, #9
 800976c:	d00e      	beq.n	800978c <UART_SetConfig+0x8f4>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	2b0a      	cmp	r3, #10
 8009774:	d008      	beq.n	8009788 <UART_SetConfig+0x8f0>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	2b0b      	cmp	r3, #11
 800977c:	d102      	bne.n	8009784 <UART_SetConfig+0x8ec>
 800977e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009782:	e016      	b.n	80097b2 <UART_SetConfig+0x91a>
 8009784:	2301      	movs	r3, #1
 8009786:	e014      	b.n	80097b2 <UART_SetConfig+0x91a>
 8009788:	2380      	movs	r3, #128	; 0x80
 800978a:	e012      	b.n	80097b2 <UART_SetConfig+0x91a>
 800978c:	2340      	movs	r3, #64	; 0x40
 800978e:	e010      	b.n	80097b2 <UART_SetConfig+0x91a>
 8009790:	2320      	movs	r3, #32
 8009792:	e00e      	b.n	80097b2 <UART_SetConfig+0x91a>
 8009794:	2310      	movs	r3, #16
 8009796:	e00c      	b.n	80097b2 <UART_SetConfig+0x91a>
 8009798:	230c      	movs	r3, #12
 800979a:	e00a      	b.n	80097b2 <UART_SetConfig+0x91a>
 800979c:	230a      	movs	r3, #10
 800979e:	e008      	b.n	80097b2 <UART_SetConfig+0x91a>
 80097a0:	2308      	movs	r3, #8
 80097a2:	e006      	b.n	80097b2 <UART_SetConfig+0x91a>
 80097a4:	2306      	movs	r3, #6
 80097a6:	e004      	b.n	80097b2 <UART_SetConfig+0x91a>
 80097a8:	2304      	movs	r3, #4
 80097aa:	e002      	b.n	80097b2 <UART_SetConfig+0x91a>
 80097ac:	2302      	movs	r3, #2
 80097ae:	e000      	b.n	80097b2 <UART_SetConfig+0x91a>
 80097b0:	2301      	movs	r3, #1
 80097b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097b8:	e1cb      	b.n	8009b52 <UART_SetConfig+0xcba>
 80097ba:	bf00      	nop
 80097bc:	40007c00 	.word	0x40007c00
 80097c0:	58024400 	.word	0x58024400
 80097c4:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097c8:	f107 030c 	add.w	r3, r7, #12
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe f865 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d044      	beq.n	8009866 <UART_SetConfig+0x9ce>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d03e      	beq.n	8009862 <UART_SetConfig+0x9ca>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d038      	beq.n	800985e <UART_SetConfig+0x9c6>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d032      	beq.n	800985a <UART_SetConfig+0x9c2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d02c      	beq.n	8009856 <UART_SetConfig+0x9be>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	2b05      	cmp	r3, #5
 8009802:	d026      	beq.n	8009852 <UART_SetConfig+0x9ba>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	2b06      	cmp	r3, #6
 800980a:	d020      	beq.n	800984e <UART_SetConfig+0x9b6>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	2b07      	cmp	r3, #7
 8009812:	d01a      	beq.n	800984a <UART_SetConfig+0x9b2>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	2b08      	cmp	r3, #8
 800981a:	d014      	beq.n	8009846 <UART_SetConfig+0x9ae>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	2b09      	cmp	r3, #9
 8009822:	d00e      	beq.n	8009842 <UART_SetConfig+0x9aa>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	2b0a      	cmp	r3, #10
 800982a:	d008      	beq.n	800983e <UART_SetConfig+0x9a6>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	2b0b      	cmp	r3, #11
 8009832:	d102      	bne.n	800983a <UART_SetConfig+0x9a2>
 8009834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009838:	e016      	b.n	8009868 <UART_SetConfig+0x9d0>
 800983a:	2301      	movs	r3, #1
 800983c:	e014      	b.n	8009868 <UART_SetConfig+0x9d0>
 800983e:	2380      	movs	r3, #128	; 0x80
 8009840:	e012      	b.n	8009868 <UART_SetConfig+0x9d0>
 8009842:	2340      	movs	r3, #64	; 0x40
 8009844:	e010      	b.n	8009868 <UART_SetConfig+0x9d0>
 8009846:	2320      	movs	r3, #32
 8009848:	e00e      	b.n	8009868 <UART_SetConfig+0x9d0>
 800984a:	2310      	movs	r3, #16
 800984c:	e00c      	b.n	8009868 <UART_SetConfig+0x9d0>
 800984e:	230c      	movs	r3, #12
 8009850:	e00a      	b.n	8009868 <UART_SetConfig+0x9d0>
 8009852:	230a      	movs	r3, #10
 8009854:	e008      	b.n	8009868 <UART_SetConfig+0x9d0>
 8009856:	2308      	movs	r3, #8
 8009858:	e006      	b.n	8009868 <UART_SetConfig+0x9d0>
 800985a:	2306      	movs	r3, #6
 800985c:	e004      	b.n	8009868 <UART_SetConfig+0x9d0>
 800985e:	2304      	movs	r3, #4
 8009860:	e002      	b.n	8009868 <UART_SetConfig+0x9d0>
 8009862:	2302      	movs	r3, #2
 8009864:	e000      	b.n	8009868 <UART_SetConfig+0x9d0>
 8009866:	2301      	movs	r3, #1
 8009868:	fbb2 f3f3 	udiv	r3, r2, r3
 800986c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800986e:	e170      	b.n	8009b52 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009870:	4b79      	ldr	r3, [pc, #484]	; (8009a58 <UART_SetConfig+0xbc0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b00      	cmp	r3, #0
 800987a:	d054      	beq.n	8009926 <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800987c:	4b76      	ldr	r3, [pc, #472]	; (8009a58 <UART_SetConfig+0xbc0>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	4a75      	ldr	r2, [pc, #468]	; (8009a5c <UART_SetConfig+0xbc4>)
 8009888:	40da      	lsrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	2b00      	cmp	r3, #0
 8009890:	d044      	beq.n	800991c <UART_SetConfig+0xa84>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	2b01      	cmp	r3, #1
 8009898:	d03e      	beq.n	8009918 <UART_SetConfig+0xa80>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d038      	beq.n	8009914 <UART_SetConfig+0xa7c>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d032      	beq.n	8009910 <UART_SetConfig+0xa78>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	d02c      	beq.n	800990c <UART_SetConfig+0xa74>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	d026      	beq.n	8009908 <UART_SetConfig+0xa70>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	2b06      	cmp	r3, #6
 80098c0:	d020      	beq.n	8009904 <UART_SetConfig+0xa6c>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	2b07      	cmp	r3, #7
 80098c8:	d01a      	beq.n	8009900 <UART_SetConfig+0xa68>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	2b08      	cmp	r3, #8
 80098d0:	d014      	beq.n	80098fc <UART_SetConfig+0xa64>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	2b09      	cmp	r3, #9
 80098d8:	d00e      	beq.n	80098f8 <UART_SetConfig+0xa60>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	2b0a      	cmp	r3, #10
 80098e0:	d008      	beq.n	80098f4 <UART_SetConfig+0xa5c>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	2b0b      	cmp	r3, #11
 80098e8:	d102      	bne.n	80098f0 <UART_SetConfig+0xa58>
 80098ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098ee:	e016      	b.n	800991e <UART_SetConfig+0xa86>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e014      	b.n	800991e <UART_SetConfig+0xa86>
 80098f4:	2380      	movs	r3, #128	; 0x80
 80098f6:	e012      	b.n	800991e <UART_SetConfig+0xa86>
 80098f8:	2340      	movs	r3, #64	; 0x40
 80098fa:	e010      	b.n	800991e <UART_SetConfig+0xa86>
 80098fc:	2320      	movs	r3, #32
 80098fe:	e00e      	b.n	800991e <UART_SetConfig+0xa86>
 8009900:	2310      	movs	r3, #16
 8009902:	e00c      	b.n	800991e <UART_SetConfig+0xa86>
 8009904:	230c      	movs	r3, #12
 8009906:	e00a      	b.n	800991e <UART_SetConfig+0xa86>
 8009908:	230a      	movs	r3, #10
 800990a:	e008      	b.n	800991e <UART_SetConfig+0xa86>
 800990c:	2308      	movs	r3, #8
 800990e:	e006      	b.n	800991e <UART_SetConfig+0xa86>
 8009910:	2306      	movs	r3, #6
 8009912:	e004      	b.n	800991e <UART_SetConfig+0xa86>
 8009914:	2304      	movs	r3, #4
 8009916:	e002      	b.n	800991e <UART_SetConfig+0xa86>
 8009918:	2302      	movs	r3, #2
 800991a:	e000      	b.n	800991e <UART_SetConfig+0xa86>
 800991c:	2301      	movs	r3, #1
 800991e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009922:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009924:	e115      	b.n	8009b52 <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	2b00      	cmp	r3, #0
 800992c:	d043      	beq.n	80099b6 <UART_SetConfig+0xb1e>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	2b01      	cmp	r3, #1
 8009934:	d03d      	beq.n	80099b2 <UART_SetConfig+0xb1a>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	2b02      	cmp	r3, #2
 800993c:	d037      	beq.n	80099ae <UART_SetConfig+0xb16>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	2b03      	cmp	r3, #3
 8009944:	d031      	beq.n	80099aa <UART_SetConfig+0xb12>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	2b04      	cmp	r3, #4
 800994c:	d02b      	beq.n	80099a6 <UART_SetConfig+0xb0e>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	2b05      	cmp	r3, #5
 8009954:	d025      	beq.n	80099a2 <UART_SetConfig+0xb0a>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	2b06      	cmp	r3, #6
 800995c:	d01f      	beq.n	800999e <UART_SetConfig+0xb06>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	2b07      	cmp	r3, #7
 8009964:	d019      	beq.n	800999a <UART_SetConfig+0xb02>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	2b08      	cmp	r3, #8
 800996c:	d013      	beq.n	8009996 <UART_SetConfig+0xafe>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	2b09      	cmp	r3, #9
 8009974:	d00d      	beq.n	8009992 <UART_SetConfig+0xafa>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	2b0a      	cmp	r3, #10
 800997c:	d007      	beq.n	800998e <UART_SetConfig+0xaf6>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	2b0b      	cmp	r3, #11
 8009984:	d101      	bne.n	800998a <UART_SetConfig+0xaf2>
 8009986:	4b36      	ldr	r3, [pc, #216]	; (8009a60 <UART_SetConfig+0xbc8>)
 8009988:	e016      	b.n	80099b8 <UART_SetConfig+0xb20>
 800998a:	4b34      	ldr	r3, [pc, #208]	; (8009a5c <UART_SetConfig+0xbc4>)
 800998c:	e014      	b.n	80099b8 <UART_SetConfig+0xb20>
 800998e:	4b35      	ldr	r3, [pc, #212]	; (8009a64 <UART_SetConfig+0xbcc>)
 8009990:	e012      	b.n	80099b8 <UART_SetConfig+0xb20>
 8009992:	4b35      	ldr	r3, [pc, #212]	; (8009a68 <UART_SetConfig+0xbd0>)
 8009994:	e010      	b.n	80099b8 <UART_SetConfig+0xb20>
 8009996:	4b35      	ldr	r3, [pc, #212]	; (8009a6c <UART_SetConfig+0xbd4>)
 8009998:	e00e      	b.n	80099b8 <UART_SetConfig+0xb20>
 800999a:	4b35      	ldr	r3, [pc, #212]	; (8009a70 <UART_SetConfig+0xbd8>)
 800999c:	e00c      	b.n	80099b8 <UART_SetConfig+0xb20>
 800999e:	4b35      	ldr	r3, [pc, #212]	; (8009a74 <UART_SetConfig+0xbdc>)
 80099a0:	e00a      	b.n	80099b8 <UART_SetConfig+0xb20>
 80099a2:	4b35      	ldr	r3, [pc, #212]	; (8009a78 <UART_SetConfig+0xbe0>)
 80099a4:	e008      	b.n	80099b8 <UART_SetConfig+0xb20>
 80099a6:	4b35      	ldr	r3, [pc, #212]	; (8009a7c <UART_SetConfig+0xbe4>)
 80099a8:	e006      	b.n	80099b8 <UART_SetConfig+0xb20>
 80099aa:	4b35      	ldr	r3, [pc, #212]	; (8009a80 <UART_SetConfig+0xbe8>)
 80099ac:	e004      	b.n	80099b8 <UART_SetConfig+0xb20>
 80099ae:	4b35      	ldr	r3, [pc, #212]	; (8009a84 <UART_SetConfig+0xbec>)
 80099b0:	e002      	b.n	80099b8 <UART_SetConfig+0xb20>
 80099b2:	4b35      	ldr	r3, [pc, #212]	; (8009a88 <UART_SetConfig+0xbf0>)
 80099b4:	e000      	b.n	80099b8 <UART_SetConfig+0xb20>
 80099b6:	4b29      	ldr	r3, [pc, #164]	; (8009a5c <UART_SetConfig+0xbc4>)
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099ba:	e0ca      	b.n	8009b52 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d046      	beq.n	8009a52 <UART_SetConfig+0xbba>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d040      	beq.n	8009a4e <UART_SetConfig+0xbb6>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d03a      	beq.n	8009a4a <UART_SetConfig+0xbb2>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d034      	beq.n	8009a46 <UART_SetConfig+0xbae>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d02e      	beq.n	8009a42 <UART_SetConfig+0xbaa>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b05      	cmp	r3, #5
 80099ea:	d028      	beq.n	8009a3e <UART_SetConfig+0xba6>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	2b06      	cmp	r3, #6
 80099f2:	d022      	beq.n	8009a3a <UART_SetConfig+0xba2>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	2b07      	cmp	r3, #7
 80099fa:	d01c      	beq.n	8009a36 <UART_SetConfig+0xb9e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d016      	beq.n	8009a32 <UART_SetConfig+0xb9a>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	d00f      	beq.n	8009a2c <UART_SetConfig+0xb94>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b0a      	cmp	r3, #10
 8009a12:	d008      	beq.n	8009a26 <UART_SetConfig+0xb8e>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b0b      	cmp	r3, #11
 8009a1a:	d102      	bne.n	8009a22 <UART_SetConfig+0xb8a>
 8009a1c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009a20:	e018      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a22:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <UART_SetConfig+0xbd8>)
 8009a24:	e016      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a26:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009a2a:	e013      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a2c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009a30:	e010      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a32:	4b16      	ldr	r3, [pc, #88]	; (8009a8c <UART_SetConfig+0xbf4>)
 8009a34:	e00e      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a36:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <UART_SetConfig+0xbc8>)
 8009a38:	e00c      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a3a:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <UART_SetConfig+0xbf8>)
 8009a3c:	e00a      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a3e:	4b15      	ldr	r3, [pc, #84]	; (8009a94 <UART_SetConfig+0xbfc>)
 8009a40:	e008      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a42:	4b08      	ldr	r3, [pc, #32]	; (8009a64 <UART_SetConfig+0xbcc>)
 8009a44:	e006      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a46:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <UART_SetConfig+0xc00>)
 8009a48:	e004      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <UART_SetConfig+0xbd0>)
 8009a4c:	e002      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a4e:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <UART_SetConfig+0xbd4>)
 8009a50:	e000      	b.n	8009a54 <UART_SetConfig+0xbbc>
 8009a52:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <UART_SetConfig+0xbd8>)
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a56:	e07c      	b.n	8009b52 <UART_SetConfig+0xcba>
 8009a58:	58024400 	.word	0x58024400
 8009a5c:	03d09000 	.word	0x03d09000
 8009a60:	0003d090 	.word	0x0003d090
 8009a64:	0007a120 	.word	0x0007a120
 8009a68:	000f4240 	.word	0x000f4240
 8009a6c:	001e8480 	.word	0x001e8480
 8009a70:	003d0900 	.word	0x003d0900
 8009a74:	00516155 	.word	0x00516155
 8009a78:	0061a800 	.word	0x0061a800
 8009a7c:	007a1200 	.word	0x007a1200
 8009a80:	00a2c2aa 	.word	0x00a2c2aa
 8009a84:	00f42400 	.word	0x00f42400
 8009a88:	01e84800 	.word	0x01e84800
 8009a8c:	0001e848 	.word	0x0001e848
 8009a90:	00051615 	.word	0x00051615
 8009a94:	00061a80 	.word	0x00061a80
 8009a98:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d04e      	beq.n	8009b42 <UART_SetConfig+0xcaa>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d047      	beq.n	8009b3c <UART_SetConfig+0xca4>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d040      	beq.n	8009b36 <UART_SetConfig+0xc9e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d039      	beq.n	8009b30 <UART_SetConfig+0xc98>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d032      	beq.n	8009b2a <UART_SetConfig+0xc92>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	d02b      	beq.n	8009b24 <UART_SetConfig+0xc8c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	2b06      	cmp	r3, #6
 8009ad2:	d024      	beq.n	8009b1e <UART_SetConfig+0xc86>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	2b07      	cmp	r3, #7
 8009ada:	d01d      	beq.n	8009b18 <UART_SetConfig+0xc80>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	2b08      	cmp	r3, #8
 8009ae2:	d016      	beq.n	8009b12 <UART_SetConfig+0xc7a>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b09      	cmp	r3, #9
 8009aea:	d00f      	beq.n	8009b0c <UART_SetConfig+0xc74>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	2b0a      	cmp	r3, #10
 8009af2:	d008      	beq.n	8009b06 <UART_SetConfig+0xc6e>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	2b0b      	cmp	r3, #11
 8009afa:	d101      	bne.n	8009b00 <UART_SetConfig+0xc68>
 8009afc:	2380      	movs	r3, #128	; 0x80
 8009afe:	e022      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b04:	e01f      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0a:	e01c      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b10:	e019      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b16:	e016      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b1c:	e013      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b1e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009b22:	e010      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b24:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009b28:	e00d      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b2e:	e00a      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b30:	f241 5355 	movw	r3, #5461	; 0x1555
 8009b34:	e007      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b3a:	e004      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b40:	e001      	b.n	8009b46 <UART_SetConfig+0xcae>
 8009b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b48:	e003      	b.n	8009b52 <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009b50:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f001 83e8 	beq.w	800b32a <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	4413      	add	r3, r2
 8009b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d305      	bcc.n	8009b76 <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d904      	bls.n	8009b80 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7c:	f001 bbd5 	b.w	800b32a <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8009b80:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	f000 8154 	beq.w	8009e32 <UART_SetConfig+0xf9a>
 8009b8a:	2b08      	cmp	r3, #8
 8009b8c:	dc06      	bgt.n	8009b9c <UART_SetConfig+0xd04>
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d00f      	beq.n	8009bb2 <UART_SetConfig+0xd1a>
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	f000 80ac 	beq.w	8009cf0 <UART_SetConfig+0xe58>
 8009b98:	f000 bc30 	b.w	800a3fc <UART_SetConfig+0x1564>
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	f000 832d 	beq.w	800a1fc <UART_SetConfig+0x1364>
 8009ba2:	2b40      	cmp	r3, #64	; 0x40
 8009ba4:	f000 83a5 	beq.w	800a2f2 <UART_SetConfig+0x145a>
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	f000 81e3 	beq.w	8009f74 <UART_SetConfig+0x10dc>
 8009bae:	f000 bc25 	b.w	800a3fc <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bb2:	f7fd fd11 	bl	80075d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bb6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f04f 0100 	mov.w	r1, #0
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d067      	beq.n	8009c98 <UART_SetConfig+0xe00>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d05e      	beq.n	8009c8e <UART_SetConfig+0xdf6>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d055      	beq.n	8009c84 <UART_SetConfig+0xdec>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d04c      	beq.n	8009c7a <UART_SetConfig+0xde2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d043      	beq.n	8009c70 <UART_SetConfig+0xdd8>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	2b05      	cmp	r3, #5
 8009bee:	d03a      	beq.n	8009c66 <UART_SetConfig+0xdce>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	2b06      	cmp	r3, #6
 8009bf6:	d031      	beq.n	8009c5c <UART_SetConfig+0xdc4>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfc:	2b07      	cmp	r3, #7
 8009bfe:	d028      	beq.n	8009c52 <UART_SetConfig+0xdba>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d01f      	beq.n	8009c48 <UART_SetConfig+0xdb0>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0c:	2b09      	cmp	r3, #9
 8009c0e:	d016      	beq.n	8009c3e <UART_SetConfig+0xda6>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	2b0a      	cmp	r3, #10
 8009c16:	d00d      	beq.n	8009c34 <UART_SetConfig+0xd9c>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	2b0b      	cmp	r3, #11
 8009c1e:	d104      	bne.n	8009c2a <UART_SetConfig+0xd92>
 8009c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c24:	f04f 0400 	mov.w	r4, #0
 8009c28:	e03a      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c2a:	f04f 0301 	mov.w	r3, #1
 8009c2e:	f04f 0400 	mov.w	r4, #0
 8009c32:	e035      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c34:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009c38:	f04f 0400 	mov.w	r4, #0
 8009c3c:	e030      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c3e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009c42:	f04f 0400 	mov.w	r4, #0
 8009c46:	e02b      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c48:	f04f 0320 	mov.w	r3, #32
 8009c4c:	f04f 0400 	mov.w	r4, #0
 8009c50:	e026      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c52:	f04f 0310 	mov.w	r3, #16
 8009c56:	f04f 0400 	mov.w	r4, #0
 8009c5a:	e021      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c5c:	f04f 030c 	mov.w	r3, #12
 8009c60:	f04f 0400 	mov.w	r4, #0
 8009c64:	e01c      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c66:	f04f 030a 	mov.w	r3, #10
 8009c6a:	f04f 0400 	mov.w	r4, #0
 8009c6e:	e017      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c70:	f04f 0308 	mov.w	r3, #8
 8009c74:	f04f 0400 	mov.w	r4, #0
 8009c78:	e012      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c7a:	f04f 0306 	mov.w	r3, #6
 8009c7e:	f04f 0400 	mov.w	r4, #0
 8009c82:	e00d      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c84:	f04f 0304 	mov.w	r3, #4
 8009c88:	f04f 0400 	mov.w	r4, #0
 8009c8c:	e008      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c8e:	f04f 0302 	mov.w	r3, #2
 8009c92:	f04f 0400 	mov.w	r4, #0
 8009c96:	e003      	b.n	8009ca0 <UART_SetConfig+0xe08>
 8009c98:	f04f 0301 	mov.w	r3, #1
 8009c9c:	f04f 0400 	mov.w	r4, #0
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4623      	mov	r3, r4
 8009ca4:	f7f6 fb18 	bl	80002d8 <__aeabi_uldivmod>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	4619      	mov	r1, r3
 8009cae:	4622      	mov	r2, r4
 8009cb0:	f04f 0300 	mov.w	r3, #0
 8009cb4:	f04f 0400 	mov.w	r4, #0
 8009cb8:	0214      	lsls	r4, r2, #8
 8009cba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009cbe:	020b      	lsls	r3, r1, #8
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6852      	ldr	r2, [r2, #4]
 8009cc4:	0852      	lsrs	r2, r2, #1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	f04f 0200 	mov.w	r2, #0
 8009ccc:	eb13 0b01 	adds.w	fp, r3, r1
 8009cd0:	eb44 0c02 	adc.w	ip, r4, r2
 8009cd4:	4658      	mov	r0, fp
 8009cd6:	4661      	mov	r1, ip
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f04f 0400 	mov.w	r4, #0
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	f7f6 faf8 	bl	80002d8 <__aeabi_uldivmod>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009cee:	e389      	b.n	800a404 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf0:	f107 0318 	add.w	r3, r7, #24
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fd fc85 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f04f 0100 	mov.w	r1, #0
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d067      	beq.n	8009dda <UART_SetConfig+0xf42>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d05e      	beq.n	8009dd0 <UART_SetConfig+0xf38>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d055      	beq.n	8009dc6 <UART_SetConfig+0xf2e>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d04c      	beq.n	8009dbc <UART_SetConfig+0xf24>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d043      	beq.n	8009db2 <UART_SetConfig+0xf1a>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b05      	cmp	r3, #5
 8009d30:	d03a      	beq.n	8009da8 <UART_SetConfig+0xf10>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	2b06      	cmp	r3, #6
 8009d38:	d031      	beq.n	8009d9e <UART_SetConfig+0xf06>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	2b07      	cmp	r3, #7
 8009d40:	d028      	beq.n	8009d94 <UART_SetConfig+0xefc>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b08      	cmp	r3, #8
 8009d48:	d01f      	beq.n	8009d8a <UART_SetConfig+0xef2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	2b09      	cmp	r3, #9
 8009d50:	d016      	beq.n	8009d80 <UART_SetConfig+0xee8>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	2b0a      	cmp	r3, #10
 8009d58:	d00d      	beq.n	8009d76 <UART_SetConfig+0xede>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	2b0b      	cmp	r3, #11
 8009d60:	d104      	bne.n	8009d6c <UART_SetConfig+0xed4>
 8009d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d66:	f04f 0400 	mov.w	r4, #0
 8009d6a:	e03a      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009d6c:	f04f 0301 	mov.w	r3, #1
 8009d70:	f04f 0400 	mov.w	r4, #0
 8009d74:	e035      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009d76:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009d7a:	f04f 0400 	mov.w	r4, #0
 8009d7e:	e030      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009d80:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009d84:	f04f 0400 	mov.w	r4, #0
 8009d88:	e02b      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009d8a:	f04f 0320 	mov.w	r3, #32
 8009d8e:	f04f 0400 	mov.w	r4, #0
 8009d92:	e026      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009d94:	f04f 0310 	mov.w	r3, #16
 8009d98:	f04f 0400 	mov.w	r4, #0
 8009d9c:	e021      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009d9e:	f04f 030c 	mov.w	r3, #12
 8009da2:	f04f 0400 	mov.w	r4, #0
 8009da6:	e01c      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009da8:	f04f 030a 	mov.w	r3, #10
 8009dac:	f04f 0400 	mov.w	r4, #0
 8009db0:	e017      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009db2:	f04f 0308 	mov.w	r3, #8
 8009db6:	f04f 0400 	mov.w	r4, #0
 8009dba:	e012      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009dbc:	f04f 0306 	mov.w	r3, #6
 8009dc0:	f04f 0400 	mov.w	r4, #0
 8009dc4:	e00d      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009dc6:	f04f 0304 	mov.w	r3, #4
 8009dca:	f04f 0400 	mov.w	r4, #0
 8009dce:	e008      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009dd0:	f04f 0302 	mov.w	r3, #2
 8009dd4:	f04f 0400 	mov.w	r4, #0
 8009dd8:	e003      	b.n	8009de2 <UART_SetConfig+0xf4a>
 8009dda:	f04f 0301 	mov.w	r3, #1
 8009dde:	f04f 0400 	mov.w	r4, #0
 8009de2:	461a      	mov	r2, r3
 8009de4:	4623      	mov	r3, r4
 8009de6:	f7f6 fa77 	bl	80002d8 <__aeabi_uldivmod>
 8009dea:	4603      	mov	r3, r0
 8009dec:	460c      	mov	r4, r1
 8009dee:	4619      	mov	r1, r3
 8009df0:	4622      	mov	r2, r4
 8009df2:	f04f 0300 	mov.w	r3, #0
 8009df6:	f04f 0400 	mov.w	r4, #0
 8009dfa:	0214      	lsls	r4, r2, #8
 8009dfc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009e00:	020b      	lsls	r3, r1, #8
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6852      	ldr	r2, [r2, #4]
 8009e06:	0852      	lsrs	r2, r2, #1
 8009e08:	4611      	mov	r1, r2
 8009e0a:	f04f 0200 	mov.w	r2, #0
 8009e0e:	eb13 0b01 	adds.w	fp, r3, r1
 8009e12:	eb44 0c02 	adc.w	ip, r4, r2
 8009e16:	4658      	mov	r0, fp
 8009e18:	4661      	mov	r1, ip
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f04f 0400 	mov.w	r4, #0
 8009e22:	461a      	mov	r2, r3
 8009e24:	4623      	mov	r3, r4
 8009e26:	f7f6 fa57 	bl	80002d8 <__aeabi_uldivmod>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e30:	e2e8      	b.n	800a404 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e32:	f107 030c 	add.w	r3, r7, #12
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fd fd30 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f04f 0100 	mov.w	r1, #0
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d067      	beq.n	8009f1c <UART_SetConfig+0x1084>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d05e      	beq.n	8009f12 <UART_SetConfig+0x107a>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d055      	beq.n	8009f08 <UART_SetConfig+0x1070>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	2b03      	cmp	r3, #3
 8009e62:	d04c      	beq.n	8009efe <UART_SetConfig+0x1066>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	d043      	beq.n	8009ef4 <UART_SetConfig+0x105c>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	2b05      	cmp	r3, #5
 8009e72:	d03a      	beq.n	8009eea <UART_SetConfig+0x1052>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2b06      	cmp	r3, #6
 8009e7a:	d031      	beq.n	8009ee0 <UART_SetConfig+0x1048>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2b07      	cmp	r3, #7
 8009e82:	d028      	beq.n	8009ed6 <UART_SetConfig+0x103e>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	2b08      	cmp	r3, #8
 8009e8a:	d01f      	beq.n	8009ecc <UART_SetConfig+0x1034>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	2b09      	cmp	r3, #9
 8009e92:	d016      	beq.n	8009ec2 <UART_SetConfig+0x102a>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b0a      	cmp	r3, #10
 8009e9a:	d00d      	beq.n	8009eb8 <UART_SetConfig+0x1020>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	2b0b      	cmp	r3, #11
 8009ea2:	d104      	bne.n	8009eae <UART_SetConfig+0x1016>
 8009ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ea8:	f04f 0400 	mov.w	r4, #0
 8009eac:	e03a      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009eae:	f04f 0301 	mov.w	r3, #1
 8009eb2:	f04f 0400 	mov.w	r4, #0
 8009eb6:	e035      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009eb8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009ebc:	f04f 0400 	mov.w	r4, #0
 8009ec0:	e030      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009ec2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009ec6:	f04f 0400 	mov.w	r4, #0
 8009eca:	e02b      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009ecc:	f04f 0320 	mov.w	r3, #32
 8009ed0:	f04f 0400 	mov.w	r4, #0
 8009ed4:	e026      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009ed6:	f04f 0310 	mov.w	r3, #16
 8009eda:	f04f 0400 	mov.w	r4, #0
 8009ede:	e021      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009ee0:	f04f 030c 	mov.w	r3, #12
 8009ee4:	f04f 0400 	mov.w	r4, #0
 8009ee8:	e01c      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009eea:	f04f 030a 	mov.w	r3, #10
 8009eee:	f04f 0400 	mov.w	r4, #0
 8009ef2:	e017      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009ef4:	f04f 0308 	mov.w	r3, #8
 8009ef8:	f04f 0400 	mov.w	r4, #0
 8009efc:	e012      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009efe:	f04f 0306 	mov.w	r3, #6
 8009f02:	f04f 0400 	mov.w	r4, #0
 8009f06:	e00d      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009f08:	f04f 0304 	mov.w	r3, #4
 8009f0c:	f04f 0400 	mov.w	r4, #0
 8009f10:	e008      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009f12:	f04f 0302 	mov.w	r3, #2
 8009f16:	f04f 0400 	mov.w	r4, #0
 8009f1a:	e003      	b.n	8009f24 <UART_SetConfig+0x108c>
 8009f1c:	f04f 0301 	mov.w	r3, #1
 8009f20:	f04f 0400 	mov.w	r4, #0
 8009f24:	461a      	mov	r2, r3
 8009f26:	4623      	mov	r3, r4
 8009f28:	f7f6 f9d6 	bl	80002d8 <__aeabi_uldivmod>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	4619      	mov	r1, r3
 8009f32:	4622      	mov	r2, r4
 8009f34:	f04f 0300 	mov.w	r3, #0
 8009f38:	f04f 0400 	mov.w	r4, #0
 8009f3c:	0214      	lsls	r4, r2, #8
 8009f3e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009f42:	020b      	lsls	r3, r1, #8
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6852      	ldr	r2, [r2, #4]
 8009f48:	0852      	lsrs	r2, r2, #1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	eb13 0b01 	adds.w	fp, r3, r1
 8009f54:	eb44 0c02 	adc.w	ip, r4, r2
 8009f58:	4658      	mov	r0, fp
 8009f5a:	4661      	mov	r1, ip
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f04f 0400 	mov.w	r4, #0
 8009f64:	461a      	mov	r2, r3
 8009f66:	4623      	mov	r3, r4
 8009f68:	f7f6 f9b6 	bl	80002d8 <__aeabi_uldivmod>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f72:	e247      	b.n	800a404 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f74:	4b96      	ldr	r3, [pc, #600]	; (800a1d0 <UART_SetConfig+0x1338>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0320 	and.w	r3, r3, #32
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 80a3 	beq.w	800a0c8 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f82:	4b93      	ldr	r3, [pc, #588]	; (800a1d0 <UART_SetConfig+0x1338>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	08db      	lsrs	r3, r3, #3
 8009f88:	f003 0303 	and.w	r3, r3, #3
 8009f8c:	4a91      	ldr	r2, [pc, #580]	; (800a1d4 <UART_SetConfig+0x133c>)
 8009f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f92:	4618      	mov	r0, r3
 8009f94:	f04f 0100 	mov.w	r1, #0
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d067      	beq.n	800a070 <UART_SetConfig+0x11d8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d05e      	beq.n	800a066 <UART_SetConfig+0x11ce>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d055      	beq.n	800a05c <UART_SetConfig+0x11c4>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d04c      	beq.n	800a052 <UART_SetConfig+0x11ba>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	d043      	beq.n	800a048 <UART_SetConfig+0x11b0>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	d03a      	beq.n	800a03e <UART_SetConfig+0x11a6>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	2b06      	cmp	r3, #6
 8009fce:	d031      	beq.n	800a034 <UART_SetConfig+0x119c>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	2b07      	cmp	r3, #7
 8009fd6:	d028      	beq.n	800a02a <UART_SetConfig+0x1192>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d01f      	beq.n	800a020 <UART_SetConfig+0x1188>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	2b09      	cmp	r3, #9
 8009fe6:	d016      	beq.n	800a016 <UART_SetConfig+0x117e>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	2b0a      	cmp	r3, #10
 8009fee:	d00d      	beq.n	800a00c <UART_SetConfig+0x1174>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	2b0b      	cmp	r3, #11
 8009ff6:	d104      	bne.n	800a002 <UART_SetConfig+0x116a>
 8009ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ffc:	f04f 0400 	mov.w	r4, #0
 800a000:	e03a      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a002:	f04f 0301 	mov.w	r3, #1
 800a006:	f04f 0400 	mov.w	r4, #0
 800a00a:	e035      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a00c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a010:	f04f 0400 	mov.w	r4, #0
 800a014:	e030      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a016:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a01a:	f04f 0400 	mov.w	r4, #0
 800a01e:	e02b      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a020:	f04f 0320 	mov.w	r3, #32
 800a024:	f04f 0400 	mov.w	r4, #0
 800a028:	e026      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a02a:	f04f 0310 	mov.w	r3, #16
 800a02e:	f04f 0400 	mov.w	r4, #0
 800a032:	e021      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a034:	f04f 030c 	mov.w	r3, #12
 800a038:	f04f 0400 	mov.w	r4, #0
 800a03c:	e01c      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a03e:	f04f 030a 	mov.w	r3, #10
 800a042:	f04f 0400 	mov.w	r4, #0
 800a046:	e017      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a048:	f04f 0308 	mov.w	r3, #8
 800a04c:	f04f 0400 	mov.w	r4, #0
 800a050:	e012      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a052:	f04f 0306 	mov.w	r3, #6
 800a056:	f04f 0400 	mov.w	r4, #0
 800a05a:	e00d      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a05c:	f04f 0304 	mov.w	r3, #4
 800a060:	f04f 0400 	mov.w	r4, #0
 800a064:	e008      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a066:	f04f 0302 	mov.w	r3, #2
 800a06a:	f04f 0400 	mov.w	r4, #0
 800a06e:	e003      	b.n	800a078 <UART_SetConfig+0x11e0>
 800a070:	f04f 0301 	mov.w	r3, #1
 800a074:	f04f 0400 	mov.w	r4, #0
 800a078:	461a      	mov	r2, r3
 800a07a:	4623      	mov	r3, r4
 800a07c:	f7f6 f92c 	bl	80002d8 <__aeabi_uldivmod>
 800a080:	4603      	mov	r3, r0
 800a082:	460c      	mov	r4, r1
 800a084:	4619      	mov	r1, r3
 800a086:	4622      	mov	r2, r4
 800a088:	f04f 0300 	mov.w	r3, #0
 800a08c:	f04f 0400 	mov.w	r4, #0
 800a090:	0214      	lsls	r4, r2, #8
 800a092:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a096:	020b      	lsls	r3, r1, #8
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	6852      	ldr	r2, [r2, #4]
 800a09c:	0852      	lsrs	r2, r2, #1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	f04f 0200 	mov.w	r2, #0
 800a0a4:	eb13 0b01 	adds.w	fp, r3, r1
 800a0a8:	eb44 0c02 	adc.w	ip, r4, r2
 800a0ac:	4658      	mov	r0, fp
 800a0ae:	4661      	mov	r1, ip
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f04f 0400 	mov.w	r4, #0
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4623      	mov	r3, r4
 800a0bc:	f7f6 f90c 	bl	80002d8 <__aeabi_uldivmod>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a0c6:	e19d      	b.n	800a404 <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d05b      	beq.n	800a188 <UART_SetConfig+0x12f0>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d053      	beq.n	800a180 <UART_SetConfig+0x12e8>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d04b      	beq.n	800a178 <UART_SetConfig+0x12e0>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d043      	beq.n	800a170 <UART_SetConfig+0x12d8>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d03b      	beq.n	800a168 <UART_SetConfig+0x12d0>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f4:	2b05      	cmp	r3, #5
 800a0f6:	d033      	beq.n	800a160 <UART_SetConfig+0x12c8>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	2b06      	cmp	r3, #6
 800a0fe:	d02b      	beq.n	800a158 <UART_SetConfig+0x12c0>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	2b07      	cmp	r3, #7
 800a106:	d023      	beq.n	800a150 <UART_SetConfig+0x12b8>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d01b      	beq.n	800a148 <UART_SetConfig+0x12b0>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	2b09      	cmp	r3, #9
 800a116:	d013      	beq.n	800a140 <UART_SetConfig+0x12a8>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	2b0a      	cmp	r3, #10
 800a11e:	d00b      	beq.n	800a138 <UART_SetConfig+0x12a0>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	2b0b      	cmp	r3, #11
 800a126:	d103      	bne.n	800a130 <UART_SetConfig+0x1298>
 800a128:	4b2a      	ldr	r3, [pc, #168]	; (800a1d4 <UART_SetConfig+0x133c>)
 800a12a:	f04f 0400 	mov.w	r4, #0
 800a12e:	e02e      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a130:	4b29      	ldr	r3, [pc, #164]	; (800a1d8 <UART_SetConfig+0x1340>)
 800a132:	f04f 0403 	mov.w	r4, #3
 800a136:	e02a      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a138:	4b28      	ldr	r3, [pc, #160]	; (800a1dc <UART_SetConfig+0x1344>)
 800a13a:	f04f 0400 	mov.w	r4, #0
 800a13e:	e026      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a140:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <UART_SetConfig+0x1348>)
 800a142:	f04f 0400 	mov.w	r4, #0
 800a146:	e022      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a148:	4b26      	ldr	r3, [pc, #152]	; (800a1e4 <UART_SetConfig+0x134c>)
 800a14a:	f04f 0400 	mov.w	r4, #0
 800a14e:	e01e      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a150:	4b25      	ldr	r3, [pc, #148]	; (800a1e8 <UART_SetConfig+0x1350>)
 800a152:	f04f 0400 	mov.w	r4, #0
 800a156:	e01a      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a158:	a419      	add	r4, pc, #100	; (adr r4, 800a1c0 <UART_SetConfig+0x1328>)
 800a15a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a15e:	e016      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a160:	4b22      	ldr	r3, [pc, #136]	; (800a1ec <UART_SetConfig+0x1354>)
 800a162:	f04f 0400 	mov.w	r4, #0
 800a166:	e012      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a168:	4b21      	ldr	r3, [pc, #132]	; (800a1f0 <UART_SetConfig+0x1358>)
 800a16a:	f04f 0400 	mov.w	r4, #0
 800a16e:	e00e      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a170:	a415      	add	r4, pc, #84	; (adr r4, 800a1c8 <UART_SetConfig+0x1330>)
 800a172:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a176:	e00a      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a178:	4b1e      	ldr	r3, [pc, #120]	; (800a1f4 <UART_SetConfig+0x135c>)
 800a17a:	f04f 0400 	mov.w	r4, #0
 800a17e:	e006      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a180:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <UART_SetConfig+0x1360>)
 800a182:	f04f 0401 	mov.w	r4, #1
 800a186:	e002      	b.n	800a18e <UART_SetConfig+0x12f6>
 800a188:	4b13      	ldr	r3, [pc, #76]	; (800a1d8 <UART_SetConfig+0x1340>)
 800a18a:	f04f 0403 	mov.w	r4, #3
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	6852      	ldr	r2, [r2, #4]
 800a192:	0852      	lsrs	r2, r2, #1
 800a194:	4611      	mov	r1, r2
 800a196:	f04f 0200 	mov.w	r2, #0
 800a19a:	eb13 0b01 	adds.w	fp, r3, r1
 800a19e:	eb44 0c02 	adc.w	ip, r4, r2
 800a1a2:	4658      	mov	r0, fp
 800a1a4:	4661      	mov	r1, ip
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f04f 0400 	mov.w	r4, #0
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4623      	mov	r3, r4
 800a1b2:	f7f6 f891 	bl	80002d8 <__aeabi_uldivmod>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a1bc:	e122      	b.n	800a404 <UART_SetConfig+0x156c>
 800a1be:	bf00      	nop
 800a1c0:	51615500 	.word	0x51615500
 800a1c4:	00000000 	.word	0x00000000
 800a1c8:	a2c2aa00 	.word	0xa2c2aa00
 800a1cc:	00000000 	.word	0x00000000
 800a1d0:	58024400 	.word	0x58024400
 800a1d4:	03d09000 	.word	0x03d09000
 800a1d8:	d0900000 	.word	0xd0900000
 800a1dc:	07a12000 	.word	0x07a12000
 800a1e0:	0f424000 	.word	0x0f424000
 800a1e4:	1e848000 	.word	0x1e848000
 800a1e8:	3d090000 	.word	0x3d090000
 800a1ec:	61a80000 	.word	0x61a80000
 800a1f0:	7a120000 	.word	0x7a120000
 800a1f4:	f4240000 	.word	0xf4240000
 800a1f8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d05b      	beq.n	800a2bc <UART_SetConfig+0x1424>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d053      	beq.n	800a2b4 <UART_SetConfig+0x141c>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	2b02      	cmp	r3, #2
 800a212:	d04b      	beq.n	800a2ac <UART_SetConfig+0x1414>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d043      	beq.n	800a2a4 <UART_SetConfig+0x140c>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	2b04      	cmp	r3, #4
 800a222:	d03b      	beq.n	800a29c <UART_SetConfig+0x1404>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b05      	cmp	r3, #5
 800a22a:	d033      	beq.n	800a294 <UART_SetConfig+0x13fc>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a230:	2b06      	cmp	r3, #6
 800a232:	d02b      	beq.n	800a28c <UART_SetConfig+0x13f4>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	2b07      	cmp	r3, #7
 800a23a:	d023      	beq.n	800a284 <UART_SetConfig+0x13ec>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	2b08      	cmp	r3, #8
 800a242:	d01b      	beq.n	800a27c <UART_SetConfig+0x13e4>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	2b09      	cmp	r3, #9
 800a24a:	d013      	beq.n	800a274 <UART_SetConfig+0x13dc>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	2b0a      	cmp	r3, #10
 800a252:	d00b      	beq.n	800a26c <UART_SetConfig+0x13d4>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	2b0b      	cmp	r3, #11
 800a25a:	d103      	bne.n	800a264 <UART_SetConfig+0x13cc>
 800a25c:	4bc0      	ldr	r3, [pc, #768]	; (800a560 <UART_SetConfig+0x16c8>)
 800a25e:	f04f 0400 	mov.w	r4, #0
 800a262:	e02e      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a264:	4bbf      	ldr	r3, [pc, #764]	; (800a564 <UART_SetConfig+0x16cc>)
 800a266:	f04f 0400 	mov.w	r4, #0
 800a26a:	e02a      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a26c:	4bbe      	ldr	r3, [pc, #760]	; (800a568 <UART_SetConfig+0x16d0>)
 800a26e:	f04f 0400 	mov.w	r4, #0
 800a272:	e026      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a274:	4bbd      	ldr	r3, [pc, #756]	; (800a56c <UART_SetConfig+0x16d4>)
 800a276:	f04f 0400 	mov.w	r4, #0
 800a27a:	e022      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a27c:	4bbc      	ldr	r3, [pc, #752]	; (800a570 <UART_SetConfig+0x16d8>)
 800a27e:	f04f 0400 	mov.w	r4, #0
 800a282:	e01e      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a284:	4bbb      	ldr	r3, [pc, #748]	; (800a574 <UART_SetConfig+0x16dc>)
 800a286:	f04f 0400 	mov.w	r4, #0
 800a28a:	e01a      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a28c:	a4b0      	add	r4, pc, #704	; (adr r4, 800a550 <UART_SetConfig+0x16b8>)
 800a28e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a292:	e016      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a294:	4bb8      	ldr	r3, [pc, #736]	; (800a578 <UART_SetConfig+0x16e0>)
 800a296:	f04f 0400 	mov.w	r4, #0
 800a29a:	e012      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a29c:	4bb7      	ldr	r3, [pc, #732]	; (800a57c <UART_SetConfig+0x16e4>)
 800a29e:	f04f 0400 	mov.w	r4, #0
 800a2a2:	e00e      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a2a4:	a4ac      	add	r4, pc, #688	; (adr r4, 800a558 <UART_SetConfig+0x16c0>)
 800a2a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a2aa:	e00a      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a2ac:	4bb4      	ldr	r3, [pc, #720]	; (800a580 <UART_SetConfig+0x16e8>)
 800a2ae:	f04f 0400 	mov.w	r4, #0
 800a2b2:	e006      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a2b4:	4bb3      	ldr	r3, [pc, #716]	; (800a584 <UART_SetConfig+0x16ec>)
 800a2b6:	f04f 0400 	mov.w	r4, #0
 800a2ba:	e002      	b.n	800a2c2 <UART_SetConfig+0x142a>
 800a2bc:	4ba9      	ldr	r3, [pc, #676]	; (800a564 <UART_SetConfig+0x16cc>)
 800a2be:	f04f 0400 	mov.w	r4, #0
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	6852      	ldr	r2, [r2, #4]
 800a2c6:	0852      	lsrs	r2, r2, #1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	eb13 0b01 	adds.w	fp, r3, r1
 800a2d2:	eb44 0c02 	adc.w	ip, r4, r2
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	4661      	mov	r1, ip
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f04f 0400 	mov.w	r4, #0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4623      	mov	r3, r4
 800a2e6:	f7f5 fff7 	bl	80002d8 <__aeabi_uldivmod>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a2f0:	e088      	b.n	800a404 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d064      	beq.n	800a3c4 <UART_SetConfig+0x152c>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d05b      	beq.n	800a3ba <UART_SetConfig+0x1522>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2b02      	cmp	r3, #2
 800a308:	d052      	beq.n	800a3b0 <UART_SetConfig+0x1518>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d04a      	beq.n	800a3a8 <UART_SetConfig+0x1510>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	2b04      	cmp	r3, #4
 800a318:	d041      	beq.n	800a39e <UART_SetConfig+0x1506>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	2b05      	cmp	r3, #5
 800a320:	d039      	beq.n	800a396 <UART_SetConfig+0x14fe>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b06      	cmp	r3, #6
 800a328:	d031      	beq.n	800a38e <UART_SetConfig+0x14f6>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	2b07      	cmp	r3, #7
 800a330:	d028      	beq.n	800a384 <UART_SetConfig+0x14ec>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	2b08      	cmp	r3, #8
 800a338:	d01f      	beq.n	800a37a <UART_SetConfig+0x14e2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b09      	cmp	r3, #9
 800a340:	d016      	beq.n	800a370 <UART_SetConfig+0x14d8>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	2b0a      	cmp	r3, #10
 800a348:	d00d      	beq.n	800a366 <UART_SetConfig+0x14ce>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	2b0b      	cmp	r3, #11
 800a350:	d104      	bne.n	800a35c <UART_SetConfig+0x14c4>
 800a352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a356:	f04f 0400 	mov.w	r4, #0
 800a35a:	e037      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a35c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a360:	f04f 0400 	mov.w	r4, #0
 800a364:	e032      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a36a:	f04f 0400 	mov.w	r4, #0
 800a36e:	e02d      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a374:	f04f 0400 	mov.w	r4, #0
 800a378:	e028      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a37a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a37e:	f04f 0400 	mov.w	r4, #0
 800a382:	e023      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a384:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a388:	f04f 0400 	mov.w	r4, #0
 800a38c:	e01e      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a38e:	4b7e      	ldr	r3, [pc, #504]	; (800a588 <UART_SetConfig+0x16f0>)
 800a390:	f04f 0400 	mov.w	r4, #0
 800a394:	e01a      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a396:	4b7d      	ldr	r3, [pc, #500]	; (800a58c <UART_SetConfig+0x16f4>)
 800a398:	f04f 0400 	mov.w	r4, #0
 800a39c:	e016      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a39e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a3a2:	f04f 0400 	mov.w	r4, #0
 800a3a6:	e011      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a3a8:	4b79      	ldr	r3, [pc, #484]	; (800a590 <UART_SetConfig+0x16f8>)
 800a3aa:	f04f 0400 	mov.w	r4, #0
 800a3ae:	e00d      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a3b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a3b4:	f04f 0400 	mov.w	r4, #0
 800a3b8:	e008      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a3ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a3be:	f04f 0400 	mov.w	r4, #0
 800a3c2:	e003      	b.n	800a3cc <UART_SetConfig+0x1534>
 800a3c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a3c8:	f04f 0400 	mov.w	r4, #0
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6852      	ldr	r2, [r2, #4]
 800a3d0:	0852      	lsrs	r2, r2, #1
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	f04f 0200 	mov.w	r2, #0
 800a3d8:	eb13 0b01 	adds.w	fp, r3, r1
 800a3dc:	eb44 0c02 	adc.w	ip, r4, r2
 800a3e0:	4658      	mov	r0, fp
 800a3e2:	4661      	mov	r1, ip
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f04f 0400 	mov.w	r4, #0
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	4623      	mov	r3, r4
 800a3f0:	f7f5 ff72 	bl	80002d8 <__aeabi_uldivmod>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a3fa:	e003      	b.n	800a404 <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a402:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a40a:	d309      	bcc.n	800a420 <UART_SetConfig+0x1588>
 800a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a412:	d205      	bcs.n	800a420 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a41a:	60da      	str	r2, [r3, #12]
 800a41c:	f000 bf85 	b.w	800b32a <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a426:	f000 bf80 	b.w	800b32a <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a432:	f040 83da 	bne.w	800abea <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 800a436:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a43a:	2b40      	cmp	r3, #64	; 0x40
 800a43c:	f200 83b3 	bhi.w	800aba6 <UART_SetConfig+0x1d0e>
 800a440:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <UART_SetConfig+0x15b0>)
 800a442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a446:	bf00      	nop
 800a448:	0800a595 	.word	0x0800a595
 800a44c:	0800a64d 	.word	0x0800a64d
 800a450:	0800aba7 	.word	0x0800aba7
 800a454:	0800aba7 	.word	0x0800aba7
 800a458:	0800a705 	.word	0x0800a705
 800a45c:	0800aba7 	.word	0x0800aba7
 800a460:	0800aba7 	.word	0x0800aba7
 800a464:	0800aba7 	.word	0x0800aba7
 800a468:	0800a7c1 	.word	0x0800a7c1
 800a46c:	0800aba7 	.word	0x0800aba7
 800a470:	0800aba7 	.word	0x0800aba7
 800a474:	0800aba7 	.word	0x0800aba7
 800a478:	0800aba7 	.word	0x0800aba7
 800a47c:	0800aba7 	.word	0x0800aba7
 800a480:	0800aba7 	.word	0x0800aba7
 800a484:	0800aba7 	.word	0x0800aba7
 800a488:	0800a87d 	.word	0x0800a87d
 800a48c:	0800aba7 	.word	0x0800aba7
 800a490:	0800aba7 	.word	0x0800aba7
 800a494:	0800aba7 	.word	0x0800aba7
 800a498:	0800aba7 	.word	0x0800aba7
 800a49c:	0800aba7 	.word	0x0800aba7
 800a4a0:	0800aba7 	.word	0x0800aba7
 800a4a4:	0800aba7 	.word	0x0800aba7
 800a4a8:	0800aba7 	.word	0x0800aba7
 800a4ac:	0800aba7 	.word	0x0800aba7
 800a4b0:	0800aba7 	.word	0x0800aba7
 800a4b4:	0800aba7 	.word	0x0800aba7
 800a4b8:	0800aba7 	.word	0x0800aba7
 800a4bc:	0800aba7 	.word	0x0800aba7
 800a4c0:	0800aba7 	.word	0x0800aba7
 800a4c4:	0800aba7 	.word	0x0800aba7
 800a4c8:	0800a9ef 	.word	0x0800a9ef
 800a4cc:	0800aba7 	.word	0x0800aba7
 800a4d0:	0800aba7 	.word	0x0800aba7
 800a4d4:	0800aba7 	.word	0x0800aba7
 800a4d8:	0800aba7 	.word	0x0800aba7
 800a4dc:	0800aba7 	.word	0x0800aba7
 800a4e0:	0800aba7 	.word	0x0800aba7
 800a4e4:	0800aba7 	.word	0x0800aba7
 800a4e8:	0800aba7 	.word	0x0800aba7
 800a4ec:	0800aba7 	.word	0x0800aba7
 800a4f0:	0800aba7 	.word	0x0800aba7
 800a4f4:	0800aba7 	.word	0x0800aba7
 800a4f8:	0800aba7 	.word	0x0800aba7
 800a4fc:	0800aba7 	.word	0x0800aba7
 800a500:	0800aba7 	.word	0x0800aba7
 800a504:	0800aba7 	.word	0x0800aba7
 800a508:	0800aba7 	.word	0x0800aba7
 800a50c:	0800aba7 	.word	0x0800aba7
 800a510:	0800aba7 	.word	0x0800aba7
 800a514:	0800aba7 	.word	0x0800aba7
 800a518:	0800aba7 	.word	0x0800aba7
 800a51c:	0800aba7 	.word	0x0800aba7
 800a520:	0800aba7 	.word	0x0800aba7
 800a524:	0800aba7 	.word	0x0800aba7
 800a528:	0800aba7 	.word	0x0800aba7
 800a52c:	0800aba7 	.word	0x0800aba7
 800a530:	0800aba7 	.word	0x0800aba7
 800a534:	0800aba7 	.word	0x0800aba7
 800a538:	0800aba7 	.word	0x0800aba7
 800a53c:	0800aba7 	.word	0x0800aba7
 800a540:	0800aba7 	.word	0x0800aba7
 800a544:	0800aba7 	.word	0x0800aba7
 800a548:	0800aae5 	.word	0x0800aae5
 800a54c:	f3af 8000 	nop.w
 800a550:	05161500 	.word	0x05161500
 800a554:	00000000 	.word	0x00000000
 800a558:	0a2c2a00 	.word	0x0a2c2a00
 800a55c:	00000000 	.word	0x00000000
 800a560:	003d0900 	.word	0x003d0900
 800a564:	3d090000 	.word	0x3d090000
 800a568:	007a1200 	.word	0x007a1200
 800a56c:	00f42400 	.word	0x00f42400
 800a570:	01e84800 	.word	0x01e84800
 800a574:	03d09000 	.word	0x03d09000
 800a578:	061a8000 	.word	0x061a8000
 800a57c:	07a12000 	.word	0x07a12000
 800a580:	0f424000 	.word	0x0f424000
 800a584:	1e848000 	.word	0x1e848000
 800a588:	000aaa00 	.word	0x000aaa00
 800a58c:	000ccc00 	.word	0x000ccc00
 800a590:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a594:	f7fb fe52 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 800a598:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d044      	beq.n	800a62c <UART_SetConfig+0x1794>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d03e      	beq.n	800a628 <UART_SetConfig+0x1790>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d038      	beq.n	800a624 <UART_SetConfig+0x178c>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d032      	beq.n	800a620 <UART_SetConfig+0x1788>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b04      	cmp	r3, #4
 800a5c0:	d02c      	beq.n	800a61c <UART_SetConfig+0x1784>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	2b05      	cmp	r3, #5
 800a5c8:	d026      	beq.n	800a618 <UART_SetConfig+0x1780>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2b06      	cmp	r3, #6
 800a5d0:	d020      	beq.n	800a614 <UART_SetConfig+0x177c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b07      	cmp	r3, #7
 800a5d8:	d01a      	beq.n	800a610 <UART_SetConfig+0x1778>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	2b08      	cmp	r3, #8
 800a5e0:	d014      	beq.n	800a60c <UART_SetConfig+0x1774>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b09      	cmp	r3, #9
 800a5e8:	d00e      	beq.n	800a608 <UART_SetConfig+0x1770>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	2b0a      	cmp	r3, #10
 800a5f0:	d008      	beq.n	800a604 <UART_SetConfig+0x176c>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	2b0b      	cmp	r3, #11
 800a5f8:	d102      	bne.n	800a600 <UART_SetConfig+0x1768>
 800a5fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5fe:	e016      	b.n	800a62e <UART_SetConfig+0x1796>
 800a600:	2301      	movs	r3, #1
 800a602:	e014      	b.n	800a62e <UART_SetConfig+0x1796>
 800a604:	2380      	movs	r3, #128	; 0x80
 800a606:	e012      	b.n	800a62e <UART_SetConfig+0x1796>
 800a608:	2340      	movs	r3, #64	; 0x40
 800a60a:	e010      	b.n	800a62e <UART_SetConfig+0x1796>
 800a60c:	2320      	movs	r3, #32
 800a60e:	e00e      	b.n	800a62e <UART_SetConfig+0x1796>
 800a610:	2310      	movs	r3, #16
 800a612:	e00c      	b.n	800a62e <UART_SetConfig+0x1796>
 800a614:	230c      	movs	r3, #12
 800a616:	e00a      	b.n	800a62e <UART_SetConfig+0x1796>
 800a618:	230a      	movs	r3, #10
 800a61a:	e008      	b.n	800a62e <UART_SetConfig+0x1796>
 800a61c:	2308      	movs	r3, #8
 800a61e:	e006      	b.n	800a62e <UART_SetConfig+0x1796>
 800a620:	2306      	movs	r3, #6
 800a622:	e004      	b.n	800a62e <UART_SetConfig+0x1796>
 800a624:	2304      	movs	r3, #4
 800a626:	e002      	b.n	800a62e <UART_SetConfig+0x1796>
 800a628:	2302      	movs	r3, #2
 800a62a:	e000      	b.n	800a62e <UART_SetConfig+0x1796>
 800a62c:	2301      	movs	r3, #1
 800a62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a630:	fbb2 f3f3 	udiv	r3, r2, r3
 800a634:	005a      	lsls	r2, r3, #1
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	085b      	lsrs	r3, r3, #1
 800a63c:	441a      	add	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	fbb2 f3f3 	udiv	r3, r2, r3
 800a646:	b29b      	uxth	r3, r3
 800a648:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a64a:	e2b0      	b.n	800abae <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a64c:	f7fb fe0c 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 800a650:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	2b00      	cmp	r3, #0
 800a658:	d044      	beq.n	800a6e4 <UART_SetConfig+0x184c>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d03e      	beq.n	800a6e0 <UART_SetConfig+0x1848>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	2b02      	cmp	r3, #2
 800a668:	d038      	beq.n	800a6dc <UART_SetConfig+0x1844>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d032      	beq.n	800a6d8 <UART_SetConfig+0x1840>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	2b04      	cmp	r3, #4
 800a678:	d02c      	beq.n	800a6d4 <UART_SetConfig+0x183c>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	2b05      	cmp	r3, #5
 800a680:	d026      	beq.n	800a6d0 <UART_SetConfig+0x1838>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	2b06      	cmp	r3, #6
 800a688:	d020      	beq.n	800a6cc <UART_SetConfig+0x1834>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b07      	cmp	r3, #7
 800a690:	d01a      	beq.n	800a6c8 <UART_SetConfig+0x1830>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b08      	cmp	r3, #8
 800a698:	d014      	beq.n	800a6c4 <UART_SetConfig+0x182c>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b09      	cmp	r3, #9
 800a6a0:	d00e      	beq.n	800a6c0 <UART_SetConfig+0x1828>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	2b0a      	cmp	r3, #10
 800a6a8:	d008      	beq.n	800a6bc <UART_SetConfig+0x1824>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b0b      	cmp	r3, #11
 800a6b0:	d102      	bne.n	800a6b8 <UART_SetConfig+0x1820>
 800a6b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6b6:	e016      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e014      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6bc:	2380      	movs	r3, #128	; 0x80
 800a6be:	e012      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6c0:	2340      	movs	r3, #64	; 0x40
 800a6c2:	e010      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6c4:	2320      	movs	r3, #32
 800a6c6:	e00e      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6c8:	2310      	movs	r3, #16
 800a6ca:	e00c      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6cc:	230c      	movs	r3, #12
 800a6ce:	e00a      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6d0:	230a      	movs	r3, #10
 800a6d2:	e008      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	e006      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6d8:	2306      	movs	r3, #6
 800a6da:	e004      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6dc:	2304      	movs	r3, #4
 800a6de:	e002      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e000      	b.n	800a6e6 <UART_SetConfig+0x184e>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ec:	005a      	lsls	r2, r3, #1
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	085b      	lsrs	r3, r3, #1
 800a6f4:	441a      	add	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a702:	e254      	b.n	800abae <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a704:	f107 0318 	add.w	r3, r7, #24
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fc ff7b 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a714:	2b00      	cmp	r3, #0
 800a716:	d044      	beq.n	800a7a2 <UART_SetConfig+0x190a>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d03e      	beq.n	800a79e <UART_SetConfig+0x1906>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	2b02      	cmp	r3, #2
 800a726:	d038      	beq.n	800a79a <UART_SetConfig+0x1902>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d032      	beq.n	800a796 <UART_SetConfig+0x18fe>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	2b04      	cmp	r3, #4
 800a736:	d02c      	beq.n	800a792 <UART_SetConfig+0x18fa>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	2b05      	cmp	r3, #5
 800a73e:	d026      	beq.n	800a78e <UART_SetConfig+0x18f6>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b06      	cmp	r3, #6
 800a746:	d020      	beq.n	800a78a <UART_SetConfig+0x18f2>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b07      	cmp	r3, #7
 800a74e:	d01a      	beq.n	800a786 <UART_SetConfig+0x18ee>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b08      	cmp	r3, #8
 800a756:	d014      	beq.n	800a782 <UART_SetConfig+0x18ea>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b09      	cmp	r3, #9
 800a75e:	d00e      	beq.n	800a77e <UART_SetConfig+0x18e6>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b0a      	cmp	r3, #10
 800a766:	d008      	beq.n	800a77a <UART_SetConfig+0x18e2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b0b      	cmp	r3, #11
 800a76e:	d102      	bne.n	800a776 <UART_SetConfig+0x18de>
 800a770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a774:	e016      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a776:	2301      	movs	r3, #1
 800a778:	e014      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a77a:	2380      	movs	r3, #128	; 0x80
 800a77c:	e012      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a77e:	2340      	movs	r3, #64	; 0x40
 800a780:	e010      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a782:	2320      	movs	r3, #32
 800a784:	e00e      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a786:	2310      	movs	r3, #16
 800a788:	e00c      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a78a:	230c      	movs	r3, #12
 800a78c:	e00a      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a78e:	230a      	movs	r3, #10
 800a790:	e008      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a792:	2308      	movs	r3, #8
 800a794:	e006      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a796:	2306      	movs	r3, #6
 800a798:	e004      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a79a:	2304      	movs	r3, #4
 800a79c:	e002      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e000      	b.n	800a7a4 <UART_SetConfig+0x190c>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a8:	005a      	lsls	r2, r3, #1
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	085b      	lsrs	r3, r3, #1
 800a7b0:	441a      	add	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7be:	e1f6      	b.n	800abae <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7c0:	f107 030c 	add.w	r3, r7, #12
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fd f869 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d044      	beq.n	800a85e <UART_SetConfig+0x19c6>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d03e      	beq.n	800a85a <UART_SetConfig+0x19c2>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d038      	beq.n	800a856 <UART_SetConfig+0x19be>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d032      	beq.n	800a852 <UART_SetConfig+0x19ba>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	d02c      	beq.n	800a84e <UART_SetConfig+0x19b6>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	2b05      	cmp	r3, #5
 800a7fa:	d026      	beq.n	800a84a <UART_SetConfig+0x19b2>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	2b06      	cmp	r3, #6
 800a802:	d020      	beq.n	800a846 <UART_SetConfig+0x19ae>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	2b07      	cmp	r3, #7
 800a80a:	d01a      	beq.n	800a842 <UART_SetConfig+0x19aa>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2b08      	cmp	r3, #8
 800a812:	d014      	beq.n	800a83e <UART_SetConfig+0x19a6>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	2b09      	cmp	r3, #9
 800a81a:	d00e      	beq.n	800a83a <UART_SetConfig+0x19a2>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b0a      	cmp	r3, #10
 800a822:	d008      	beq.n	800a836 <UART_SetConfig+0x199e>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	2b0b      	cmp	r3, #11
 800a82a:	d102      	bne.n	800a832 <UART_SetConfig+0x199a>
 800a82c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a830:	e016      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a832:	2301      	movs	r3, #1
 800a834:	e014      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a836:	2380      	movs	r3, #128	; 0x80
 800a838:	e012      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a83a:	2340      	movs	r3, #64	; 0x40
 800a83c:	e010      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a83e:	2320      	movs	r3, #32
 800a840:	e00e      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a842:	2310      	movs	r3, #16
 800a844:	e00c      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a846:	230c      	movs	r3, #12
 800a848:	e00a      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a84a:	230a      	movs	r3, #10
 800a84c:	e008      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a84e:	2308      	movs	r3, #8
 800a850:	e006      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a852:	2306      	movs	r3, #6
 800a854:	e004      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a856:	2304      	movs	r3, #4
 800a858:	e002      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e000      	b.n	800a860 <UART_SetConfig+0x19c8>
 800a85e:	2301      	movs	r3, #1
 800a860:	fbb2 f3f3 	udiv	r3, r2, r3
 800a864:	005a      	lsls	r2, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	085b      	lsrs	r3, r3, #1
 800a86c:	441a      	add	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	fbb2 f3f3 	udiv	r3, r2, r3
 800a876:	b29b      	uxth	r3, r3
 800a878:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a87a:	e198      	b.n	800abae <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a87c:	4b87      	ldr	r3, [pc, #540]	; (800aa9c <UART_SetConfig+0x1c04>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0320 	and.w	r3, r3, #32
 800a884:	2b00      	cmp	r3, #0
 800a886:	d05e      	beq.n	800a946 <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a888:	4b84      	ldr	r3, [pc, #528]	; (800aa9c <UART_SetConfig+0x1c04>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	08db      	lsrs	r3, r3, #3
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	4a83      	ldr	r2, [pc, #524]	; (800aaa0 <UART_SetConfig+0x1c08>)
 800a894:	40da      	lsrs	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d044      	beq.n	800a928 <UART_SetConfig+0x1a90>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d03e      	beq.n	800a924 <UART_SetConfig+0x1a8c>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d038      	beq.n	800a920 <UART_SetConfig+0x1a88>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	d032      	beq.n	800a91c <UART_SetConfig+0x1a84>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	d02c      	beq.n	800a918 <UART_SetConfig+0x1a80>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	d026      	beq.n	800a914 <UART_SetConfig+0x1a7c>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ca:	2b06      	cmp	r3, #6
 800a8cc:	d020      	beq.n	800a910 <UART_SetConfig+0x1a78>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d2:	2b07      	cmp	r3, #7
 800a8d4:	d01a      	beq.n	800a90c <UART_SetConfig+0x1a74>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	2b08      	cmp	r3, #8
 800a8dc:	d014      	beq.n	800a908 <UART_SetConfig+0x1a70>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	2b09      	cmp	r3, #9
 800a8e4:	d00e      	beq.n	800a904 <UART_SetConfig+0x1a6c>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ea:	2b0a      	cmp	r3, #10
 800a8ec:	d008      	beq.n	800a900 <UART_SetConfig+0x1a68>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	2b0b      	cmp	r3, #11
 800a8f4:	d102      	bne.n	800a8fc <UART_SetConfig+0x1a64>
 800a8f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8fa:	e016      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e014      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	e012      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a904:	2340      	movs	r3, #64	; 0x40
 800a906:	e010      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a908:	2320      	movs	r3, #32
 800a90a:	e00e      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a90c:	2310      	movs	r3, #16
 800a90e:	e00c      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a910:	230c      	movs	r3, #12
 800a912:	e00a      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a914:	230a      	movs	r3, #10
 800a916:	e008      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a918:	2308      	movs	r3, #8
 800a91a:	e006      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a91c:	2306      	movs	r3, #6
 800a91e:	e004      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a920:	2304      	movs	r3, #4
 800a922:	e002      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a924:	2302      	movs	r3, #2
 800a926:	e000      	b.n	800a92a <UART_SetConfig+0x1a92>
 800a928:	2301      	movs	r3, #1
 800a92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92e:	005a      	lsls	r2, r3, #1
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	085b      	lsrs	r3, r3, #1
 800a936:	441a      	add	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a940:	b29b      	uxth	r3, r3
 800a942:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a944:	e133      	b.n	800abae <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d043      	beq.n	800a9d6 <UART_SetConfig+0x1b3e>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a952:	2b01      	cmp	r3, #1
 800a954:	d03d      	beq.n	800a9d2 <UART_SetConfig+0x1b3a>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d037      	beq.n	800a9ce <UART_SetConfig+0x1b36>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	2b03      	cmp	r3, #3
 800a964:	d031      	beq.n	800a9ca <UART_SetConfig+0x1b32>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d02b      	beq.n	800a9c6 <UART_SetConfig+0x1b2e>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	2b05      	cmp	r3, #5
 800a974:	d025      	beq.n	800a9c2 <UART_SetConfig+0x1b2a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	2b06      	cmp	r3, #6
 800a97c:	d01f      	beq.n	800a9be <UART_SetConfig+0x1b26>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a982:	2b07      	cmp	r3, #7
 800a984:	d019      	beq.n	800a9ba <UART_SetConfig+0x1b22>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d013      	beq.n	800a9b6 <UART_SetConfig+0x1b1e>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a992:	2b09      	cmp	r3, #9
 800a994:	d00d      	beq.n	800a9b2 <UART_SetConfig+0x1b1a>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	2b0a      	cmp	r3, #10
 800a99c:	d007      	beq.n	800a9ae <UART_SetConfig+0x1b16>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	2b0b      	cmp	r3, #11
 800a9a4:	d101      	bne.n	800a9aa <UART_SetConfig+0x1b12>
 800a9a6:	4b3f      	ldr	r3, [pc, #252]	; (800aaa4 <UART_SetConfig+0x1c0c>)
 800a9a8:	e016      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9aa:	4b3f      	ldr	r3, [pc, #252]	; (800aaa8 <UART_SetConfig+0x1c10>)
 800a9ac:	e014      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9ae:	4b3f      	ldr	r3, [pc, #252]	; (800aaac <UART_SetConfig+0x1c14>)
 800a9b0:	e012      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9b2:	4b3f      	ldr	r3, [pc, #252]	; (800aab0 <UART_SetConfig+0x1c18>)
 800a9b4:	e010      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9b6:	4b3f      	ldr	r3, [pc, #252]	; (800aab4 <UART_SetConfig+0x1c1c>)
 800a9b8:	e00e      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9ba:	4b3f      	ldr	r3, [pc, #252]	; (800aab8 <UART_SetConfig+0x1c20>)
 800a9bc:	e00c      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9be:	4b3f      	ldr	r3, [pc, #252]	; (800aabc <UART_SetConfig+0x1c24>)
 800a9c0:	e00a      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9c2:	4b3f      	ldr	r3, [pc, #252]	; (800aac0 <UART_SetConfig+0x1c28>)
 800a9c4:	e008      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9c6:	4b3f      	ldr	r3, [pc, #252]	; (800aac4 <UART_SetConfig+0x1c2c>)
 800a9c8:	e006      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9ca:	4b3f      	ldr	r3, [pc, #252]	; (800aac8 <UART_SetConfig+0x1c30>)
 800a9cc:	e004      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9ce:	4b3f      	ldr	r3, [pc, #252]	; (800aacc <UART_SetConfig+0x1c34>)
 800a9d0:	e002      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9d2:	4b33      	ldr	r3, [pc, #204]	; (800aaa0 <UART_SetConfig+0x1c08>)
 800a9d4:	e000      	b.n	800a9d8 <UART_SetConfig+0x1b40>
 800a9d6:	4b34      	ldr	r3, [pc, #208]	; (800aaa8 <UART_SetConfig+0x1c10>)
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	6852      	ldr	r2, [r2, #4]
 800a9dc:	0852      	lsrs	r2, r2, #1
 800a9de:	441a      	add	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9ec:	e0df      	b.n	800abae <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d045      	beq.n	800aa82 <UART_SetConfig+0x1bea>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d03f      	beq.n	800aa7e <UART_SetConfig+0x1be6>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d039      	beq.n	800aa7a <UART_SetConfig+0x1be2>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	d033      	beq.n	800aa76 <UART_SetConfig+0x1bde>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d02d      	beq.n	800aa72 <UART_SetConfig+0x1bda>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	d027      	beq.n	800aa6e <UART_SetConfig+0x1bd6>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa22:	2b06      	cmp	r3, #6
 800aa24:	d021      	beq.n	800aa6a <UART_SetConfig+0x1bd2>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2a:	2b07      	cmp	r3, #7
 800aa2c:	d01b      	beq.n	800aa66 <UART_SetConfig+0x1bce>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa32:	2b08      	cmp	r3, #8
 800aa34:	d015      	beq.n	800aa62 <UART_SetConfig+0x1bca>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3a:	2b09      	cmp	r3, #9
 800aa3c:	d00f      	beq.n	800aa5e <UART_SetConfig+0x1bc6>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa42:	2b0a      	cmp	r3, #10
 800aa44:	d008      	beq.n	800aa58 <UART_SetConfig+0x1bc0>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4a:	2b0b      	cmp	r3, #11
 800aa4c:	d102      	bne.n	800aa54 <UART_SetConfig+0x1bbc>
 800aa4e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800aa52:	e017      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa54:	4b18      	ldr	r3, [pc, #96]	; (800aab8 <UART_SetConfig+0x1c20>)
 800aa56:	e015      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa58:	f24f 4324 	movw	r3, #62500	; 0xf424
 800aa5c:	e012      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa5e:	4b1c      	ldr	r3, [pc, #112]	; (800aad0 <UART_SetConfig+0x1c38>)
 800aa60:	e010      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa62:	4b1c      	ldr	r3, [pc, #112]	; (800aad4 <UART_SetConfig+0x1c3c>)
 800aa64:	e00e      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa66:	4b0f      	ldr	r3, [pc, #60]	; (800aaa4 <UART_SetConfig+0x1c0c>)
 800aa68:	e00c      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa6a:	4b1b      	ldr	r3, [pc, #108]	; (800aad8 <UART_SetConfig+0x1c40>)
 800aa6c:	e00a      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa6e:	4b1b      	ldr	r3, [pc, #108]	; (800aadc <UART_SetConfig+0x1c44>)
 800aa70:	e008      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa72:	4b0e      	ldr	r3, [pc, #56]	; (800aaac <UART_SetConfig+0x1c14>)
 800aa74:	e006      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa76:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <UART_SetConfig+0x1c48>)
 800aa78:	e004      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa7a:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <UART_SetConfig+0x1c18>)
 800aa7c:	e002      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa7e:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <UART_SetConfig+0x1c1c>)
 800aa80:	e000      	b.n	800aa84 <UART_SetConfig+0x1bec>
 800aa82:	4b0d      	ldr	r3, [pc, #52]	; (800aab8 <UART_SetConfig+0x1c20>)
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	6852      	ldr	r2, [r2, #4]
 800aa88:	0852      	lsrs	r2, r2, #1
 800aa8a:	441a      	add	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa98:	e089      	b.n	800abae <UART_SetConfig+0x1d16>
 800aa9a:	bf00      	nop
 800aa9c:	58024400 	.word	0x58024400
 800aaa0:	03d09000 	.word	0x03d09000
 800aaa4:	0007a120 	.word	0x0007a120
 800aaa8:	07a12000 	.word	0x07a12000
 800aaac:	000f4240 	.word	0x000f4240
 800aab0:	001e8480 	.word	0x001e8480
 800aab4:	003d0900 	.word	0x003d0900
 800aab8:	007a1200 	.word	0x007a1200
 800aabc:	00a2c2aa 	.word	0x00a2c2aa
 800aac0:	00c35000 	.word	0x00c35000
 800aac4:	00f42400 	.word	0x00f42400
 800aac8:	01458554 	.word	0x01458554
 800aacc:	01e84800 	.word	0x01e84800
 800aad0:	0001e848 	.word	0x0001e848
 800aad4:	0003d090 	.word	0x0003d090
 800aad8:	000a2c2a 	.word	0x000a2c2a
 800aadc:	000c3500 	.word	0x000c3500
 800aae0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d04f      	beq.n	800ab8c <UART_SetConfig+0x1cf4>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d048      	beq.n	800ab86 <UART_SetConfig+0x1cee>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d041      	beq.n	800ab80 <UART_SetConfig+0x1ce8>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d03a      	beq.n	800ab7a <UART_SetConfig+0x1ce2>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d033      	beq.n	800ab74 <UART_SetConfig+0x1cdc>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b05      	cmp	r3, #5
 800ab12:	d02c      	beq.n	800ab6e <UART_SetConfig+0x1cd6>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b06      	cmp	r3, #6
 800ab1a:	d025      	beq.n	800ab68 <UART_SetConfig+0x1cd0>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b07      	cmp	r3, #7
 800ab22:	d01e      	beq.n	800ab62 <UART_SetConfig+0x1cca>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b08      	cmp	r3, #8
 800ab2a:	d017      	beq.n	800ab5c <UART_SetConfig+0x1cc4>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b09      	cmp	r3, #9
 800ab32:	d010      	beq.n	800ab56 <UART_SetConfig+0x1cbe>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b0a      	cmp	r3, #10
 800ab3a:	d009      	beq.n	800ab50 <UART_SetConfig+0x1cb8>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b0b      	cmp	r3, #11
 800ab42:	d102      	bne.n	800ab4a <UART_SetConfig+0x1cb2>
 800ab44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab48:	e022      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab4e:	e01f      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab54:	e01c      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab5a:	e019      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab60:	e016      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab66:	e013      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab68:	f241 5354 	movw	r3, #5460	; 0x1554
 800ab6c:	e010      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab6e:	f641 1398 	movw	r3, #6552	; 0x1998
 800ab72:	e00d      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab78:	e00a      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab7a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ab7e:	e007      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab84:	e004      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab8a:	e001      	b.n	800ab90 <UART_SetConfig+0x1cf8>
 800ab8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	6852      	ldr	r2, [r2, #4]
 800ab94:	0852      	lsrs	r2, r2, #1
 800ab96:	441a      	add	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aba4:	e003      	b.n	800abae <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800abac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb0:	2b0f      	cmp	r3, #15
 800abb2:	d916      	bls.n	800abe2 <UART_SetConfig+0x1d4a>
 800abb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abba:	d212      	bcs.n	800abe2 <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f023 030f 	bic.w	r3, r3, #15
 800abc4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc8:	085b      	lsrs	r3, r3, #1
 800abca:	b29b      	uxth	r3, r3
 800abcc:	f003 0307 	and.w	r3, r3, #7
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abd4:	4313      	orrs	r3, r2
 800abd6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800abde:	60da      	str	r2, [r3, #12]
 800abe0:	e3a3      	b.n	800b32a <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abe8:	e39f      	b.n	800b32a <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 800abea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abee:	2b40      	cmp	r3, #64	; 0x40
 800abf0:	f200 8388 	bhi.w	800b304 <UART_SetConfig+0x246c>
 800abf4:	a201      	add	r2, pc, #4	; (adr r2, 800abfc <UART_SetConfig+0x1d64>)
 800abf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfa:	bf00      	nop
 800abfc:	0800ad01 	.word	0x0800ad01
 800ac00:	0800adb7 	.word	0x0800adb7
 800ac04:	0800b305 	.word	0x0800b305
 800ac08:	0800b305 	.word	0x0800b305
 800ac0c:	0800ae6d 	.word	0x0800ae6d
 800ac10:	0800b305 	.word	0x0800b305
 800ac14:	0800b305 	.word	0x0800b305
 800ac18:	0800b305 	.word	0x0800b305
 800ac1c:	0800af27 	.word	0x0800af27
 800ac20:	0800b305 	.word	0x0800b305
 800ac24:	0800b305 	.word	0x0800b305
 800ac28:	0800b305 	.word	0x0800b305
 800ac2c:	0800b305 	.word	0x0800b305
 800ac30:	0800b305 	.word	0x0800b305
 800ac34:	0800b305 	.word	0x0800b305
 800ac38:	0800b305 	.word	0x0800b305
 800ac3c:	0800afe1 	.word	0x0800afe1
 800ac40:	0800b305 	.word	0x0800b305
 800ac44:	0800b305 	.word	0x0800b305
 800ac48:	0800b305 	.word	0x0800b305
 800ac4c:	0800b305 	.word	0x0800b305
 800ac50:	0800b305 	.word	0x0800b305
 800ac54:	0800b305 	.word	0x0800b305
 800ac58:	0800b305 	.word	0x0800b305
 800ac5c:	0800b305 	.word	0x0800b305
 800ac60:	0800b305 	.word	0x0800b305
 800ac64:	0800b305 	.word	0x0800b305
 800ac68:	0800b305 	.word	0x0800b305
 800ac6c:	0800b305 	.word	0x0800b305
 800ac70:	0800b305 	.word	0x0800b305
 800ac74:	0800b305 	.word	0x0800b305
 800ac78:	0800b305 	.word	0x0800b305
 800ac7c:	0800b151 	.word	0x0800b151
 800ac80:	0800b305 	.word	0x0800b305
 800ac84:	0800b305 	.word	0x0800b305
 800ac88:	0800b305 	.word	0x0800b305
 800ac8c:	0800b305 	.word	0x0800b305
 800ac90:	0800b305 	.word	0x0800b305
 800ac94:	0800b305 	.word	0x0800b305
 800ac98:	0800b305 	.word	0x0800b305
 800ac9c:	0800b305 	.word	0x0800b305
 800aca0:	0800b305 	.word	0x0800b305
 800aca4:	0800b305 	.word	0x0800b305
 800aca8:	0800b305 	.word	0x0800b305
 800acac:	0800b305 	.word	0x0800b305
 800acb0:	0800b305 	.word	0x0800b305
 800acb4:	0800b305 	.word	0x0800b305
 800acb8:	0800b305 	.word	0x0800b305
 800acbc:	0800b305 	.word	0x0800b305
 800acc0:	0800b305 	.word	0x0800b305
 800acc4:	0800b305 	.word	0x0800b305
 800acc8:	0800b305 	.word	0x0800b305
 800accc:	0800b305 	.word	0x0800b305
 800acd0:	0800b305 	.word	0x0800b305
 800acd4:	0800b305 	.word	0x0800b305
 800acd8:	0800b305 	.word	0x0800b305
 800acdc:	0800b305 	.word	0x0800b305
 800ace0:	0800b305 	.word	0x0800b305
 800ace4:	0800b305 	.word	0x0800b305
 800ace8:	0800b305 	.word	0x0800b305
 800acec:	0800b305 	.word	0x0800b305
 800acf0:	0800b305 	.word	0x0800b305
 800acf4:	0800b305 	.word	0x0800b305
 800acf8:	0800b305 	.word	0x0800b305
 800acfc:	0800b245 	.word	0x0800b245
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad00:	f7fb fa9c 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 800ad04:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d044      	beq.n	800ad98 <UART_SetConfig+0x1f00>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d03e      	beq.n	800ad94 <UART_SetConfig+0x1efc>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d038      	beq.n	800ad90 <UART_SetConfig+0x1ef8>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d032      	beq.n	800ad8c <UART_SetConfig+0x1ef4>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2a:	2b04      	cmp	r3, #4
 800ad2c:	d02c      	beq.n	800ad88 <UART_SetConfig+0x1ef0>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad32:	2b05      	cmp	r3, #5
 800ad34:	d026      	beq.n	800ad84 <UART_SetConfig+0x1eec>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	2b06      	cmp	r3, #6
 800ad3c:	d020      	beq.n	800ad80 <UART_SetConfig+0x1ee8>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad42:	2b07      	cmp	r3, #7
 800ad44:	d01a      	beq.n	800ad7c <UART_SetConfig+0x1ee4>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4a:	2b08      	cmp	r3, #8
 800ad4c:	d014      	beq.n	800ad78 <UART_SetConfig+0x1ee0>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d00e      	beq.n	800ad74 <UART_SetConfig+0x1edc>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	2b0a      	cmp	r3, #10
 800ad5c:	d008      	beq.n	800ad70 <UART_SetConfig+0x1ed8>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	2b0b      	cmp	r3, #11
 800ad64:	d102      	bne.n	800ad6c <UART_SetConfig+0x1ed4>
 800ad66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad6a:	e016      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e014      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad70:	2380      	movs	r3, #128	; 0x80
 800ad72:	e012      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad74:	2340      	movs	r3, #64	; 0x40
 800ad76:	e010      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad78:	2320      	movs	r3, #32
 800ad7a:	e00e      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	e00c      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad80:	230c      	movs	r3, #12
 800ad82:	e00a      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad84:	230a      	movs	r3, #10
 800ad86:	e008      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad88:	2308      	movs	r3, #8
 800ad8a:	e006      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad8c:	2306      	movs	r3, #6
 800ad8e:	e004      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad90:	2304      	movs	r3, #4
 800ad92:	e002      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad94:	2302      	movs	r3, #2
 800ad96:	e000      	b.n	800ad9a <UART_SetConfig+0x1f02>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad9c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	085b      	lsrs	r3, r3, #1
 800ada6:	441a      	add	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adb4:	e2aa      	b.n	800b30c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adb6:	f7fb fa57 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 800adba:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d044      	beq.n	800ae4e <UART_SetConfig+0x1fb6>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d03e      	beq.n	800ae4a <UART_SetConfig+0x1fb2>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b02      	cmp	r3, #2
 800add2:	d038      	beq.n	800ae46 <UART_SetConfig+0x1fae>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b03      	cmp	r3, #3
 800adda:	d032      	beq.n	800ae42 <UART_SetConfig+0x1faa>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b04      	cmp	r3, #4
 800ade2:	d02c      	beq.n	800ae3e <UART_SetConfig+0x1fa6>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	2b05      	cmp	r3, #5
 800adea:	d026      	beq.n	800ae3a <UART_SetConfig+0x1fa2>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	2b06      	cmp	r3, #6
 800adf2:	d020      	beq.n	800ae36 <UART_SetConfig+0x1f9e>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	2b07      	cmp	r3, #7
 800adfa:	d01a      	beq.n	800ae32 <UART_SetConfig+0x1f9a>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	2b08      	cmp	r3, #8
 800ae02:	d014      	beq.n	800ae2e <UART_SetConfig+0x1f96>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	2b09      	cmp	r3, #9
 800ae0a:	d00e      	beq.n	800ae2a <UART_SetConfig+0x1f92>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	2b0a      	cmp	r3, #10
 800ae12:	d008      	beq.n	800ae26 <UART_SetConfig+0x1f8e>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	2b0b      	cmp	r3, #11
 800ae1a:	d102      	bne.n	800ae22 <UART_SetConfig+0x1f8a>
 800ae1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae20:	e016      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae22:	2301      	movs	r3, #1
 800ae24:	e014      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae26:	2380      	movs	r3, #128	; 0x80
 800ae28:	e012      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae2a:	2340      	movs	r3, #64	; 0x40
 800ae2c:	e010      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae2e:	2320      	movs	r3, #32
 800ae30:	e00e      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae32:	2310      	movs	r3, #16
 800ae34:	e00c      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae36:	230c      	movs	r3, #12
 800ae38:	e00a      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae3a:	230a      	movs	r3, #10
 800ae3c:	e008      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae3e:	2308      	movs	r3, #8
 800ae40:	e006      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae42:	2306      	movs	r3, #6
 800ae44:	e004      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae46:	2304      	movs	r3, #4
 800ae48:	e002      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e000      	b.n	800ae50 <UART_SetConfig+0x1fb8>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae52:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	085b      	lsrs	r3, r3, #1
 800ae5c:	441a      	add	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae6a:	e24f      	b.n	800b30c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6c:	f107 0318 	add.w	r3, r7, #24
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fc fbc7 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae76:	69fa      	ldr	r2, [r7, #28]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d044      	beq.n	800af0a <UART_SetConfig+0x2072>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d03e      	beq.n	800af06 <UART_SetConfig+0x206e>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d038      	beq.n	800af02 <UART_SetConfig+0x206a>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d032      	beq.n	800aefe <UART_SetConfig+0x2066>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	2b04      	cmp	r3, #4
 800ae9e:	d02c      	beq.n	800aefa <UART_SetConfig+0x2062>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea4:	2b05      	cmp	r3, #5
 800aea6:	d026      	beq.n	800aef6 <UART_SetConfig+0x205e>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	2b06      	cmp	r3, #6
 800aeae:	d020      	beq.n	800aef2 <UART_SetConfig+0x205a>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb4:	2b07      	cmp	r3, #7
 800aeb6:	d01a      	beq.n	800aeee <UART_SetConfig+0x2056>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebc:	2b08      	cmp	r3, #8
 800aebe:	d014      	beq.n	800aeea <UART_SetConfig+0x2052>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	2b09      	cmp	r3, #9
 800aec6:	d00e      	beq.n	800aee6 <UART_SetConfig+0x204e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	2b0a      	cmp	r3, #10
 800aece:	d008      	beq.n	800aee2 <UART_SetConfig+0x204a>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed4:	2b0b      	cmp	r3, #11
 800aed6:	d102      	bne.n	800aede <UART_SetConfig+0x2046>
 800aed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aedc:	e016      	b.n	800af0c <UART_SetConfig+0x2074>
 800aede:	2301      	movs	r3, #1
 800aee0:	e014      	b.n	800af0c <UART_SetConfig+0x2074>
 800aee2:	2380      	movs	r3, #128	; 0x80
 800aee4:	e012      	b.n	800af0c <UART_SetConfig+0x2074>
 800aee6:	2340      	movs	r3, #64	; 0x40
 800aee8:	e010      	b.n	800af0c <UART_SetConfig+0x2074>
 800aeea:	2320      	movs	r3, #32
 800aeec:	e00e      	b.n	800af0c <UART_SetConfig+0x2074>
 800aeee:	2310      	movs	r3, #16
 800aef0:	e00c      	b.n	800af0c <UART_SetConfig+0x2074>
 800aef2:	230c      	movs	r3, #12
 800aef4:	e00a      	b.n	800af0c <UART_SetConfig+0x2074>
 800aef6:	230a      	movs	r3, #10
 800aef8:	e008      	b.n	800af0c <UART_SetConfig+0x2074>
 800aefa:	2308      	movs	r3, #8
 800aefc:	e006      	b.n	800af0c <UART_SetConfig+0x2074>
 800aefe:	2306      	movs	r3, #6
 800af00:	e004      	b.n	800af0c <UART_SetConfig+0x2074>
 800af02:	2304      	movs	r3, #4
 800af04:	e002      	b.n	800af0c <UART_SetConfig+0x2074>
 800af06:	2302      	movs	r3, #2
 800af08:	e000      	b.n	800af0c <UART_SetConfig+0x2074>
 800af0a:	2301      	movs	r3, #1
 800af0c:	fbb2 f2f3 	udiv	r2, r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	085b      	lsrs	r3, r3, #1
 800af16:	441a      	add	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af20:	b29b      	uxth	r3, r3
 800af22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af24:	e1f2      	b.n	800b30c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af26:	f107 030c 	add.w	r3, r7, #12
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fc fcb6 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	2b00      	cmp	r3, #0
 800af38:	d044      	beq.n	800afc4 <UART_SetConfig+0x212c>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d03e      	beq.n	800afc0 <UART_SetConfig+0x2128>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af46:	2b02      	cmp	r3, #2
 800af48:	d038      	beq.n	800afbc <UART_SetConfig+0x2124>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d032      	beq.n	800afb8 <UART_SetConfig+0x2120>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	2b04      	cmp	r3, #4
 800af58:	d02c      	beq.n	800afb4 <UART_SetConfig+0x211c>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5e:	2b05      	cmp	r3, #5
 800af60:	d026      	beq.n	800afb0 <UART_SetConfig+0x2118>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af66:	2b06      	cmp	r3, #6
 800af68:	d020      	beq.n	800afac <UART_SetConfig+0x2114>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	2b07      	cmp	r3, #7
 800af70:	d01a      	beq.n	800afa8 <UART_SetConfig+0x2110>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af76:	2b08      	cmp	r3, #8
 800af78:	d014      	beq.n	800afa4 <UART_SetConfig+0x210c>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7e:	2b09      	cmp	r3, #9
 800af80:	d00e      	beq.n	800afa0 <UART_SetConfig+0x2108>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	2b0a      	cmp	r3, #10
 800af88:	d008      	beq.n	800af9c <UART_SetConfig+0x2104>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b0b      	cmp	r3, #11
 800af90:	d102      	bne.n	800af98 <UART_SetConfig+0x2100>
 800af92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af96:	e016      	b.n	800afc6 <UART_SetConfig+0x212e>
 800af98:	2301      	movs	r3, #1
 800af9a:	e014      	b.n	800afc6 <UART_SetConfig+0x212e>
 800af9c:	2380      	movs	r3, #128	; 0x80
 800af9e:	e012      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afa0:	2340      	movs	r3, #64	; 0x40
 800afa2:	e010      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afa4:	2320      	movs	r3, #32
 800afa6:	e00e      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afa8:	2310      	movs	r3, #16
 800afaa:	e00c      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afac:	230c      	movs	r3, #12
 800afae:	e00a      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afb0:	230a      	movs	r3, #10
 800afb2:	e008      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afb4:	2308      	movs	r3, #8
 800afb6:	e006      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afb8:	2306      	movs	r3, #6
 800afba:	e004      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afbc:	2304      	movs	r3, #4
 800afbe:	e002      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afc0:	2302      	movs	r3, #2
 800afc2:	e000      	b.n	800afc6 <UART_SetConfig+0x212e>
 800afc4:	2301      	movs	r3, #1
 800afc6:	fbb2 f2f3 	udiv	r2, r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	085b      	lsrs	r3, r3, #1
 800afd0:	441a      	add	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800afda:	b29b      	uxth	r3, r3
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afde:	e195      	b.n	800b30c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afe0:	4b87      	ldr	r3, [pc, #540]	; (800b200 <UART_SetConfig+0x2368>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0320 	and.w	r3, r3, #32
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d05d      	beq.n	800b0a8 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afec:	4b84      	ldr	r3, [pc, #528]	; (800b200 <UART_SetConfig+0x2368>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	08db      	lsrs	r3, r3, #3
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	4a83      	ldr	r2, [pc, #524]	; (800b204 <UART_SetConfig+0x236c>)
 800aff8:	40da      	lsrs	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	d044      	beq.n	800b08c <UART_SetConfig+0x21f4>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b006:	2b01      	cmp	r3, #1
 800b008:	d03e      	beq.n	800b088 <UART_SetConfig+0x21f0>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d038      	beq.n	800b084 <UART_SetConfig+0x21ec>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	2b03      	cmp	r3, #3
 800b018:	d032      	beq.n	800b080 <UART_SetConfig+0x21e8>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d02c      	beq.n	800b07c <UART_SetConfig+0x21e4>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	2b05      	cmp	r3, #5
 800b028:	d026      	beq.n	800b078 <UART_SetConfig+0x21e0>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	2b06      	cmp	r3, #6
 800b030:	d020      	beq.n	800b074 <UART_SetConfig+0x21dc>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b036:	2b07      	cmp	r3, #7
 800b038:	d01a      	beq.n	800b070 <UART_SetConfig+0x21d8>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03e:	2b08      	cmp	r3, #8
 800b040:	d014      	beq.n	800b06c <UART_SetConfig+0x21d4>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	2b09      	cmp	r3, #9
 800b048:	d00e      	beq.n	800b068 <UART_SetConfig+0x21d0>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	2b0a      	cmp	r3, #10
 800b050:	d008      	beq.n	800b064 <UART_SetConfig+0x21cc>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b056:	2b0b      	cmp	r3, #11
 800b058:	d102      	bne.n	800b060 <UART_SetConfig+0x21c8>
 800b05a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b05e:	e016      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b060:	2301      	movs	r3, #1
 800b062:	e014      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b064:	2380      	movs	r3, #128	; 0x80
 800b066:	e012      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b068:	2340      	movs	r3, #64	; 0x40
 800b06a:	e010      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b06c:	2320      	movs	r3, #32
 800b06e:	e00e      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b070:	2310      	movs	r3, #16
 800b072:	e00c      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b074:	230c      	movs	r3, #12
 800b076:	e00a      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b078:	230a      	movs	r3, #10
 800b07a:	e008      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b07c:	2308      	movs	r3, #8
 800b07e:	e006      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b080:	2306      	movs	r3, #6
 800b082:	e004      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b084:	2304      	movs	r3, #4
 800b086:	e002      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b088:	2302      	movs	r3, #2
 800b08a:	e000      	b.n	800b08e <UART_SetConfig+0x21f6>
 800b08c:	2301      	movs	r3, #1
 800b08e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	085b      	lsrs	r3, r3, #1
 800b098:	441a      	add	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b0a6:	e131      	b.n	800b30c <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d043      	beq.n	800b138 <UART_SetConfig+0x22a0>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d03d      	beq.n	800b134 <UART_SetConfig+0x229c>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d037      	beq.n	800b130 <UART_SetConfig+0x2298>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c4:	2b03      	cmp	r3, #3
 800b0c6:	d031      	beq.n	800b12c <UART_SetConfig+0x2294>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	2b04      	cmp	r3, #4
 800b0ce:	d02b      	beq.n	800b128 <UART_SetConfig+0x2290>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d4:	2b05      	cmp	r3, #5
 800b0d6:	d025      	beq.n	800b124 <UART_SetConfig+0x228c>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	2b06      	cmp	r3, #6
 800b0de:	d01f      	beq.n	800b120 <UART_SetConfig+0x2288>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	2b07      	cmp	r3, #7
 800b0e6:	d019      	beq.n	800b11c <UART_SetConfig+0x2284>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	2b08      	cmp	r3, #8
 800b0ee:	d013      	beq.n	800b118 <UART_SetConfig+0x2280>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	2b09      	cmp	r3, #9
 800b0f6:	d00d      	beq.n	800b114 <UART_SetConfig+0x227c>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	2b0a      	cmp	r3, #10
 800b0fe:	d007      	beq.n	800b110 <UART_SetConfig+0x2278>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	2b0b      	cmp	r3, #11
 800b106:	d101      	bne.n	800b10c <UART_SetConfig+0x2274>
 800b108:	4b3f      	ldr	r3, [pc, #252]	; (800b208 <UART_SetConfig+0x2370>)
 800b10a:	e016      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b10c:	4b3d      	ldr	r3, [pc, #244]	; (800b204 <UART_SetConfig+0x236c>)
 800b10e:	e014      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b110:	4b3e      	ldr	r3, [pc, #248]	; (800b20c <UART_SetConfig+0x2374>)
 800b112:	e012      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b114:	4b3e      	ldr	r3, [pc, #248]	; (800b210 <UART_SetConfig+0x2378>)
 800b116:	e010      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b118:	4b3e      	ldr	r3, [pc, #248]	; (800b214 <UART_SetConfig+0x237c>)
 800b11a:	e00e      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b11c:	4b3e      	ldr	r3, [pc, #248]	; (800b218 <UART_SetConfig+0x2380>)
 800b11e:	e00c      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b120:	4b3e      	ldr	r3, [pc, #248]	; (800b21c <UART_SetConfig+0x2384>)
 800b122:	e00a      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b124:	4b3e      	ldr	r3, [pc, #248]	; (800b220 <UART_SetConfig+0x2388>)
 800b126:	e008      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b128:	4b3e      	ldr	r3, [pc, #248]	; (800b224 <UART_SetConfig+0x238c>)
 800b12a:	e006      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b12c:	4b3e      	ldr	r3, [pc, #248]	; (800b228 <UART_SetConfig+0x2390>)
 800b12e:	e004      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b130:	4b3e      	ldr	r3, [pc, #248]	; (800b22c <UART_SetConfig+0x2394>)
 800b132:	e002      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b134:	4b3e      	ldr	r3, [pc, #248]	; (800b230 <UART_SetConfig+0x2398>)
 800b136:	e000      	b.n	800b13a <UART_SetConfig+0x22a2>
 800b138:	4b32      	ldr	r3, [pc, #200]	; (800b204 <UART_SetConfig+0x236c>)
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	6852      	ldr	r2, [r2, #4]
 800b13e:	0852      	lsrs	r2, r2, #1
 800b140:	441a      	add	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	fbb2 f3f3 	udiv	r3, r2, r3
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b14e:	e0dd      	b.n	800b30c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	d046      	beq.n	800b1e6 <UART_SetConfig+0x234e>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d040      	beq.n	800b1e2 <UART_SetConfig+0x234a>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	2b02      	cmp	r3, #2
 800b166:	d03a      	beq.n	800b1de <UART_SetConfig+0x2346>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d034      	beq.n	800b1da <UART_SetConfig+0x2342>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	2b04      	cmp	r3, #4
 800b176:	d02e      	beq.n	800b1d6 <UART_SetConfig+0x233e>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17c:	2b05      	cmp	r3, #5
 800b17e:	d028      	beq.n	800b1d2 <UART_SetConfig+0x233a>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b184:	2b06      	cmp	r3, #6
 800b186:	d022      	beq.n	800b1ce <UART_SetConfig+0x2336>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	2b07      	cmp	r3, #7
 800b18e:	d01c      	beq.n	800b1ca <UART_SetConfig+0x2332>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	2b08      	cmp	r3, #8
 800b196:	d016      	beq.n	800b1c6 <UART_SetConfig+0x232e>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	2b09      	cmp	r3, #9
 800b19e:	d00f      	beq.n	800b1c0 <UART_SetConfig+0x2328>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a4:	2b0a      	cmp	r3, #10
 800b1a6:	d008      	beq.n	800b1ba <UART_SetConfig+0x2322>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	2b0b      	cmp	r3, #11
 800b1ae:	d102      	bne.n	800b1b6 <UART_SetConfig+0x231e>
 800b1b0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b1b4:	e018      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1b6:	4b18      	ldr	r3, [pc, #96]	; (800b218 <UART_SetConfig+0x2380>)
 800b1b8:	e016      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1ba:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b1be:	e013      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1c0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b1c4:	e010      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1c6:	4b1b      	ldr	r3, [pc, #108]	; (800b234 <UART_SetConfig+0x239c>)
 800b1c8:	e00e      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	; (800b208 <UART_SetConfig+0x2370>)
 800b1cc:	e00c      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1ce:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <UART_SetConfig+0x23a0>)
 800b1d0:	e00a      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1d2:	4b1a      	ldr	r3, [pc, #104]	; (800b23c <UART_SetConfig+0x23a4>)
 800b1d4:	e008      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1d6:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <UART_SetConfig+0x2374>)
 800b1d8:	e006      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1da:	4b19      	ldr	r3, [pc, #100]	; (800b240 <UART_SetConfig+0x23a8>)
 800b1dc:	e004      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1de:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <UART_SetConfig+0x2378>)
 800b1e0:	e002      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1e2:	4b0c      	ldr	r3, [pc, #48]	; (800b214 <UART_SetConfig+0x237c>)
 800b1e4:	e000      	b.n	800b1e8 <UART_SetConfig+0x2350>
 800b1e6:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <UART_SetConfig+0x2380>)
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	6852      	ldr	r2, [r2, #4]
 800b1ec:	0852      	lsrs	r2, r2, #1
 800b1ee:	441a      	add	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1fc:	e086      	b.n	800b30c <UART_SetConfig+0x2474>
 800b1fe:	bf00      	nop
 800b200:	58024400 	.word	0x58024400
 800b204:	03d09000 	.word	0x03d09000
 800b208:	0003d090 	.word	0x0003d090
 800b20c:	0007a120 	.word	0x0007a120
 800b210:	000f4240 	.word	0x000f4240
 800b214:	001e8480 	.word	0x001e8480
 800b218:	003d0900 	.word	0x003d0900
 800b21c:	00516155 	.word	0x00516155
 800b220:	0061a800 	.word	0x0061a800
 800b224:	007a1200 	.word	0x007a1200
 800b228:	00a2c2aa 	.word	0x00a2c2aa
 800b22c:	00f42400 	.word	0x00f42400
 800b230:	01e84800 	.word	0x01e84800
 800b234:	0001e848 	.word	0x0001e848
 800b238:	00051615 	.word	0x00051615
 800b23c:	00061a80 	.word	0x00061a80
 800b240:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d04e      	beq.n	800b2ea <UART_SetConfig+0x2452>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	2b01      	cmp	r3, #1
 800b252:	d047      	beq.n	800b2e4 <UART_SetConfig+0x244c>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d040      	beq.n	800b2de <UART_SetConfig+0x2446>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b260:	2b03      	cmp	r3, #3
 800b262:	d039      	beq.n	800b2d8 <UART_SetConfig+0x2440>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d032      	beq.n	800b2d2 <UART_SetConfig+0x243a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b05      	cmp	r3, #5
 800b272:	d02b      	beq.n	800b2cc <UART_SetConfig+0x2434>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	2b06      	cmp	r3, #6
 800b27a:	d024      	beq.n	800b2c6 <UART_SetConfig+0x242e>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	2b07      	cmp	r3, #7
 800b282:	d01d      	beq.n	800b2c0 <UART_SetConfig+0x2428>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d016      	beq.n	800b2ba <UART_SetConfig+0x2422>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	2b09      	cmp	r3, #9
 800b292:	d00f      	beq.n	800b2b4 <UART_SetConfig+0x241c>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	2b0a      	cmp	r3, #10
 800b29a:	d008      	beq.n	800b2ae <UART_SetConfig+0x2416>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	2b0b      	cmp	r3, #11
 800b2a2:	d101      	bne.n	800b2a8 <UART_SetConfig+0x2410>
 800b2a4:	2380      	movs	r3, #128	; 0x80
 800b2a6:	e022      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2ac:	e01f      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2b2:	e01c      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2b8:	e019      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2be:	e016      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2c4:	e013      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2c6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b2ca:	e010      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2cc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b2d0:	e00d      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2d6:	e00a      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2d8:	f241 5355 	movw	r3, #5461	; 0x1555
 800b2dc:	e007      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2e2:	e004      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2e8:	e001      	b.n	800b2ee <UART_SetConfig+0x2456>
 800b2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	6852      	ldr	r2, [r2, #4]
 800b2f2:	0852      	lsrs	r2, r2, #1
 800b2f4:	441a      	add	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b302:	e003      	b.n	800b30c <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b30a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	2b0f      	cmp	r3, #15
 800b310:	d908      	bls.n	800b324 <UART_SetConfig+0x248c>
 800b312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b318:	d204      	bcs.n	800b324 <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b320:	60da      	str	r2, [r3, #12]
 800b322:	e002      	b.n	800b32a <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b346:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3740      	adds	r7, #64	; 0x40
 800b34e:	46bd      	mov	sp, r7
 800b350:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b360:	2bff      	cmp	r3, #255	; 0xff
 800b362:	d904      	bls.n	800b36e <UART_AdvFeatureConfig+0x1a>
 800b364:	f640 4149 	movw	r1, #3145	; 0xc49
 800b368:	4899      	ldr	r0, [pc, #612]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b36a:	f7f5 fd66 	bl	8000e3a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d018      	beq.n	800b3ac <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d009      	beq.n	800b396 <UART_AdvFeatureConfig+0x42>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b38a:	d004      	beq.n	800b396 <UART_AdvFeatureConfig+0x42>
 800b38c:	f640 414e 	movw	r1, #3150	; 0xc4e
 800b390:	488f      	ldr	r0, [pc, #572]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b392:	f7f5 fd52 	bl	8000e3a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d018      	beq.n	800b3ea <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d009      	beq.n	800b3d4 <UART_AdvFeatureConfig+0x80>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3c8:	d004      	beq.n	800b3d4 <UART_AdvFeatureConfig+0x80>
 800b3ca:	f640 4155 	movw	r1, #3157	; 0xc55
 800b3ce:	4880      	ldr	r0, [pc, #512]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b3d0:	f7f5 fd33 	bl	8000e3a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ee:	f003 0304 	and.w	r3, r3, #4
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d018      	beq.n	800b428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <UART_AdvFeatureConfig+0xbe>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b402:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b406:	d004      	beq.n	800b412 <UART_AdvFeatureConfig+0xbe>
 800b408:	f640 415c 	movw	r1, #3164	; 0xc5c
 800b40c:	4870      	ldr	r0, [pc, #448]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b40e:	f7f5 fd14 	bl	8000e3a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	430a      	orrs	r2, r1
 800b426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42c:	f003 0308 	and.w	r3, r3, #8
 800b430:	2b00      	cmp	r3, #0
 800b432:	d018      	beq.n	800b466 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d009      	beq.n	800b450 <UART_AdvFeatureConfig+0xfc>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b444:	d004      	beq.n	800b450 <UART_AdvFeatureConfig+0xfc>
 800b446:	f640 4163 	movw	r1, #3171	; 0xc63
 800b44a:	4861      	ldr	r0, [pc, #388]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b44c:	f7f5 fcf5 	bl	8000e3a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	430a      	orrs	r2, r1
 800b464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46a:	f003 0310 	and.w	r3, r3, #16
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d018      	beq.n	800b4a4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b476:	2b00      	cmp	r3, #0
 800b478:	d009      	beq.n	800b48e <UART_AdvFeatureConfig+0x13a>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b482:	d004      	beq.n	800b48e <UART_AdvFeatureConfig+0x13a>
 800b484:	f640 416a 	movw	r1, #3178	; 0xc6a
 800b488:	4851      	ldr	r0, [pc, #324]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b48a:	f7f5 fcd6 	bl	8000e3a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d018      	beq.n	800b4e2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d009      	beq.n	800b4cc <UART_AdvFeatureConfig+0x178>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c0:	d004      	beq.n	800b4cc <UART_AdvFeatureConfig+0x178>
 800b4c2:	f640 4171 	movw	r1, #3185	; 0xc71
 800b4c6:	4842      	ldr	r0, [pc, #264]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b4c8:	f7f5 fcb7 	bl	8000e3a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 8082 	beq.w	800b5f4 <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a37      	ldr	r2, [pc, #220]	; (800b5d4 <UART_AdvFeatureConfig+0x280>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d027      	beq.n	800b54a <UART_AdvFeatureConfig+0x1f6>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a36      	ldr	r2, [pc, #216]	; (800b5d8 <UART_AdvFeatureConfig+0x284>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d022      	beq.n	800b54a <UART_AdvFeatureConfig+0x1f6>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a34      	ldr	r2, [pc, #208]	; (800b5dc <UART_AdvFeatureConfig+0x288>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d01d      	beq.n	800b54a <UART_AdvFeatureConfig+0x1f6>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a33      	ldr	r2, [pc, #204]	; (800b5e0 <UART_AdvFeatureConfig+0x28c>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d018      	beq.n	800b54a <UART_AdvFeatureConfig+0x1f6>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a31      	ldr	r2, [pc, #196]	; (800b5e4 <UART_AdvFeatureConfig+0x290>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d013      	beq.n	800b54a <UART_AdvFeatureConfig+0x1f6>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a30      	ldr	r2, [pc, #192]	; (800b5e8 <UART_AdvFeatureConfig+0x294>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d00e      	beq.n	800b54a <UART_AdvFeatureConfig+0x1f6>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a2e      	ldr	r2, [pc, #184]	; (800b5ec <UART_AdvFeatureConfig+0x298>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d009      	beq.n	800b54a <UART_AdvFeatureConfig+0x1f6>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a2d      	ldr	r2, [pc, #180]	; (800b5f0 <UART_AdvFeatureConfig+0x29c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d004      	beq.n	800b54a <UART_AdvFeatureConfig+0x1f6>
 800b540:	f640 4178 	movw	r1, #3192	; 0xc78
 800b544:	4822      	ldr	r0, [pc, #136]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b546:	f7f5 fc78 	bl	8000e3a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d009      	beq.n	800b566 <UART_AdvFeatureConfig+0x212>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b55a:	d004      	beq.n	800b566 <UART_AdvFeatureConfig+0x212>
 800b55c:	f640 4179 	movw	r1, #3193	; 0xc79
 800b560:	481b      	ldr	r0, [pc, #108]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b562:	f7f5 fc6a 	bl	8000e3a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	430a      	orrs	r2, r1
 800b57a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b584:	d136      	bne.n	800b5f4 <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d013      	beq.n	800b5b6 <UART_AdvFeatureConfig+0x262>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b596:	d00e      	beq.n	800b5b6 <UART_AdvFeatureConfig+0x262>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b59c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5a0:	d009      	beq.n	800b5b6 <UART_AdvFeatureConfig+0x262>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b5aa:	d004      	beq.n	800b5b6 <UART_AdvFeatureConfig+0x262>
 800b5ac:	f640 417e 	movw	r1, #3198	; 0xc7e
 800b5b0:	4807      	ldr	r0, [pc, #28]	; (800b5d0 <UART_AdvFeatureConfig+0x27c>)
 800b5b2:	f7f5 fc42 	bl	8000e3a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	430a      	orrs	r2, r1
 800b5ca:	605a      	str	r2, [r3, #4]
 800b5cc:	e012      	b.n	800b5f4 <UART_AdvFeatureConfig+0x2a0>
 800b5ce:	bf00      	nop
 800b5d0:	0800c068 	.word	0x0800c068
 800b5d4:	40011000 	.word	0x40011000
 800b5d8:	40004400 	.word	0x40004400
 800b5dc:	40004800 	.word	0x40004800
 800b5e0:	40004c00 	.word	0x40004c00
 800b5e4:	40005000 	.word	0x40005000
 800b5e8:	40011400 	.word	0x40011400
 800b5ec:	40007800 	.word	0x40007800
 800b5f0:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d018      	beq.n	800b632 <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b604:	2b00      	cmp	r3, #0
 800b606:	d009      	beq.n	800b61c <UART_AdvFeatureConfig+0x2c8>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b60c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b610:	d004      	beq.n	800b61c <UART_AdvFeatureConfig+0x2c8>
 800b612:	f640 4186 	movw	r1, #3206	; 0xc86
 800b616:	4809      	ldr	r0, [pc, #36]	; (800b63c <UART_AdvFeatureConfig+0x2e8>)
 800b618:	f7f5 fc0f 	bl	8000e3a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	430a      	orrs	r2, r1
 800b630:	605a      	str	r2, [r3, #4]
  }
}
 800b632:	bf00      	nop
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	0800c068 	.word	0x0800c068

0800b640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af02      	add	r7, sp, #8
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b650:	f7f5 fea6 	bl	80013a0 <HAL_GetTick>
 800b654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0308 	and.w	r3, r3, #8
 800b660:	2b08      	cmp	r3, #8
 800b662:	d10e      	bne.n	800b682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f82c 	bl	800b6d0 <UART_WaitOnFlagUntilTimeout>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e022      	b.n	800b6c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	2b04      	cmp	r3, #4
 800b68e:	d10e      	bne.n	800b6ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b694:	9300      	str	r3, [sp, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f816 	bl	800b6d0 <UART_WaitOnFlagUntilTimeout>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e00c      	b.n	800b6c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2220      	movs	r2, #32
 800b6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	603b      	str	r3, [r7, #0]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6e0:	e062      	b.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e8:	d05e      	beq.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6ea:	f7f5 fe59 	bl	80013a0 <HAL_GetTick>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d302      	bcc.n	800b700 <UART_WaitOnFlagUntilTimeout+0x30>
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d11d      	bne.n	800b73c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b70e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689a      	ldr	r2, [r3, #8]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f022 0201 	bic.w	r2, r2, #1
 800b71e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2220      	movs	r2, #32
 800b724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2220      	movs	r2, #32
 800b72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b738:	2303      	movs	r3, #3
 800b73a:	e045      	b.n	800b7c8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f003 0304 	and.w	r3, r3, #4
 800b746:	2b00      	cmp	r3, #0
 800b748:	d02e      	beq.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	69db      	ldr	r3, [r3, #28]
 800b750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b758:	d126      	bne.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b762:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b772:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689a      	ldr	r2, [r3, #8]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f022 0201 	bic.w	r2, r2, #1
 800b782:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2220      	movs	r2, #32
 800b788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2220      	movs	r2, #32
 800b790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2220      	movs	r2, #32
 800b798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e00f      	b.n	800b7c8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69da      	ldr	r2, [r3, #28]
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	bf0c      	ite	eq
 800b7b8:	2301      	moveq	r3, #1
 800b7ba:	2300      	movne	r3, #0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	461a      	mov	r2, r3
 800b7c0:	79fb      	ldrb	r3, [r7, #7]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d08d      	beq.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a2e      	ldr	r2, [pc, #184]	; (800b898 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d027      	beq.n	800b832 <HAL_UARTEx_DisableFifoMode+0x62>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a2d      	ldr	r2, [pc, #180]	; (800b89c <HAL_UARTEx_DisableFifoMode+0xcc>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d022      	beq.n	800b832 <HAL_UARTEx_DisableFifoMode+0x62>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a2b      	ldr	r2, [pc, #172]	; (800b8a0 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d01d      	beq.n	800b832 <HAL_UARTEx_DisableFifoMode+0x62>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a2a      	ldr	r2, [pc, #168]	; (800b8a4 <HAL_UARTEx_DisableFifoMode+0xd4>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d018      	beq.n	800b832 <HAL_UARTEx_DisableFifoMode+0x62>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a28      	ldr	r2, [pc, #160]	; (800b8a8 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d013      	beq.n	800b832 <HAL_UARTEx_DisableFifoMode+0x62>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a27      	ldr	r2, [pc, #156]	; (800b8ac <HAL_UARTEx_DisableFifoMode+0xdc>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d00e      	beq.n	800b832 <HAL_UARTEx_DisableFifoMode+0x62>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a25      	ldr	r2, [pc, #148]	; (800b8b0 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d009      	beq.n	800b832 <HAL_UARTEx_DisableFifoMode+0x62>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a24      	ldr	r2, [pc, #144]	; (800b8b4 <HAL_UARTEx_DisableFifoMode+0xe4>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d004      	beq.n	800b832 <HAL_UARTEx_DisableFifoMode+0x62>
 800b828:	f240 2111 	movw	r1, #529	; 0x211
 800b82c:	4822      	ldr	r0, [pc, #136]	; (800b8b8 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800b82e:	f7f5 fb04 	bl	8000e3a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d101      	bne.n	800b840 <HAL_UARTEx_DisableFifoMode+0x70>
 800b83c:	2302      	movs	r3, #2
 800b83e:	e027      	b.n	800b890 <HAL_UARTEx_DisableFifoMode+0xc0>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2224      	movs	r2, #36	; 0x24
 800b84c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f022 0201 	bic.w	r2, r2, #1
 800b866:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b86e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2220      	movs	r2, #32
 800b882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	40011000 	.word	0x40011000
 800b89c:	40004400 	.word	0x40004400
 800b8a0:	40004800 	.word	0x40004800
 800b8a4:	40004c00 	.word	0x40004c00
 800b8a8:	40005000 	.word	0x40005000
 800b8ac:	40011400 	.word	0x40011400
 800b8b0:	40007800 	.word	0x40007800
 800b8b4:	40007c00 	.word	0x40007c00
 800b8b8:	0800c0a4 	.word	0x0800c0a4

0800b8bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a40      	ldr	r2, [pc, #256]	; (800b9cc <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d027      	beq.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a3e      	ldr	r2, [pc, #248]	; (800b9d0 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d022      	beq.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a3d      	ldr	r2, [pc, #244]	; (800b9d4 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d01d      	beq.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a3b      	ldr	r2, [pc, #236]	; (800b9d8 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d018      	beq.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a3a      	ldr	r2, [pc, #232]	; (800b9dc <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d013      	beq.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a38      	ldr	r2, [pc, #224]	; (800b9e0 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d00e      	beq.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a37      	ldr	r2, [pc, #220]	; (800b9e4 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d009      	beq.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a35      	ldr	r2, [pc, #212]	; (800b9e8 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d004      	beq.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800b916:	f240 213f 	movw	r1, #575	; 0x23f
 800b91a:	4834      	ldr	r0, [pc, #208]	; (800b9ec <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800b91c:	f7f5 fa8d 	bl	8000e3a <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d018      	beq.n	800b958 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b92c:	d014      	beq.n	800b958 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b934:	d010      	beq.n	800b958 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b93c:	d00c      	beq.n	800b958 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b944:	d008      	beq.n	800b958 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800b94c:	d004      	beq.n	800b958 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800b94e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b952:	4826      	ldr	r0, [pc, #152]	; (800b9ec <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800b954:	f7f5 fa71 	bl	8000e3a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d101      	bne.n	800b966 <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800b962:	2302      	movs	r3, #2
 800b964:	e02d      	b.n	800b9c2 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2224      	movs	r2, #36	; 0x24
 800b972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f022 0201 	bic.w	r2, r2, #1
 800b98c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f8be 	bl	800bb24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	40011000 	.word	0x40011000
 800b9d0:	40004400 	.word	0x40004400
 800b9d4:	40004800 	.word	0x40004800
 800b9d8:	40004c00 	.word	0x40004c00
 800b9dc:	40005000 	.word	0x40005000
 800b9e0:	40011400 	.word	0x40011400
 800b9e4:	40007800 	.word	0x40007800
 800b9e8:	40007c00 	.word	0x40007c00
 800b9ec:	0800c0a4 	.word	0x0800c0a4

0800b9f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a40      	ldr	r2, [pc, #256]	; (800bb00 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d027      	beq.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a3e      	ldr	r2, [pc, #248]	; (800bb04 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d022      	beq.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a3d      	ldr	r2, [pc, #244]	; (800bb08 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d01d      	beq.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a3b      	ldr	r2, [pc, #236]	; (800bb0c <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d018      	beq.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a3a      	ldr	r2, [pc, #232]	; (800bb10 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d013      	beq.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a38      	ldr	r2, [pc, #224]	; (800bb14 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d00e      	beq.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a37      	ldr	r2, [pc, #220]	; (800bb18 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d009      	beq.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a35      	ldr	r2, [pc, #212]	; (800bb1c <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d004      	beq.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800ba4a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800ba4e:	4834      	ldr	r0, [pc, #208]	; (800bb20 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800ba50:	f7f5 f9f3 	bl	8000e3a <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d018      	beq.n	800ba8c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba60:	d014      	beq.n	800ba8c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba68:	d010      	beq.n	800ba8c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800ba70:	d00c      	beq.n	800ba8c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba78:	d008      	beq.n	800ba8c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800ba80:	d004      	beq.n	800ba8c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800ba82:	f240 2171 	movw	r1, #625	; 0x271
 800ba86:	4826      	ldr	r0, [pc, #152]	; (800bb20 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800ba88:	f7f5 f9d7 	bl	8000e3a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800ba96:	2302      	movs	r3, #2
 800ba98:	e02d      	b.n	800baf6 <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2224      	movs	r2, #36	; 0x24
 800baa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0201 	bic.w	r2, r2, #1
 800bac0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f824 	bl	800bb24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2220      	movs	r2, #32
 800bae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	40011000 	.word	0x40011000
 800bb04:	40004400 	.word	0x40004400
 800bb08:	40004800 	.word	0x40004800
 800bb0c:	40004c00 	.word	0x40004c00
 800bb10:	40005000 	.word	0x40005000
 800bb14:	40011400 	.word	0x40011400
 800bb18:	40007800 	.word	0x40007800
 800bb1c:	40007c00 	.word	0x40007c00
 800bb20:	0800c0a4 	.word	0x0800c0a4

0800bb24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b089      	sub	sp, #36	; 0x24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bb2c:	4a2f      	ldr	r2, [pc, #188]	; (800bbec <UARTEx_SetNbDataToProcess+0xc8>)
 800bb2e:	f107 0314 	add.w	r3, r7, #20
 800bb32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb36:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bb3a:	4a2d      	ldr	r2, [pc, #180]	; (800bbf0 <UARTEx_SetNbDataToProcess+0xcc>)
 800bb3c:	f107 030c 	add.w	r3, r7, #12
 800bb40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb44:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d108      	bne.n	800bb62 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb60:	e03d      	b.n	800bbde <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb62:	2308      	movs	r3, #8
 800bb64:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb66:	2308      	movs	r3, #8
 800bb68:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	0e5b      	lsrs	r3, r3, #25
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	f003 0307 	and.w	r3, r3, #7
 800bb78:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	0f5b      	lsrs	r3, r3, #29
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	f003 0307 	and.w	r3, r3, #7
 800bb88:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bb8a:	7fbb      	ldrb	r3, [r7, #30]
 800bb8c:	7f3a      	ldrb	r2, [r7, #28]
 800bb8e:	f107 0120 	add.w	r1, r7, #32
 800bb92:	440a      	add	r2, r1
 800bb94:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bb98:	fb02 f303 	mul.w	r3, r2, r3
 800bb9c:	7f3a      	ldrb	r2, [r7, #28]
 800bb9e:	f107 0120 	add.w	r1, r7, #32
 800bba2:	440a      	add	r2, r1
 800bba4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bba8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bbb4:	7ffb      	ldrb	r3, [r7, #31]
 800bbb6:	7f7a      	ldrb	r2, [r7, #29]
 800bbb8:	f107 0120 	add.w	r1, r7, #32
 800bbbc:	440a      	add	r2, r1
 800bbbe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bbc2:	fb02 f303 	mul.w	r3, r2, r3
 800bbc6:	7f7a      	ldrb	r2, [r7, #29]
 800bbc8:	f107 0120 	add.w	r1, r7, #32
 800bbcc:	440a      	add	r2, r1
 800bbce:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bbd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bbde:	bf00      	nop
 800bbe0:	3724      	adds	r7, #36	; 0x24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	0800c0e0 	.word	0x0800c0e0
 800bbf0:	0800c0e8 	.word	0x0800c0e8

0800bbf4 <chip_isr>:
//static 	EXTI_ConfigTypeDef g_ExtiConfig = {NULL};



void chip_isr(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
	if (gpfIsr) {
 800bbf8:	4b04      	ldr	r3, [pc, #16]	; (800bc0c <chip_isr+0x18>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <chip_isr+0x12>
		gpfIsr();
 800bc00:	4b02      	ldr	r3, [pc, #8]	; (800bc0c <chip_isr+0x18>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4798      	blx	r3
	}
}
 800bc06:	bf00      	nop
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	2400002c 	.word	0x2400002c

0800bc10 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	af00      	add	r7, sp, #0
//	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
//	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);

// ================= SO: =================
	// WAKE PIN IN IRRELEVANT HERE SINCE ITS NOT CONNECTED TO MCU
	HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800bc14:	2200      	movs	r2, #0
 800bc16:	2120      	movs	r1, #32
 800bc18:	4805      	ldr	r0, [pc, #20]	; (800bc30 <init_chip_pins+0x20>)
 800bc1a:	f7f8 f8b9 	bl	8003d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc24:	4803      	ldr	r0, [pc, #12]	; (800bc34 <init_chip_pins+0x24>)
 800bc26:	f7f8 f8b3 	bl	8003d90 <HAL_GPIO_WritePin>



}
 800bc2a:	bf00      	nop
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	58020000 	.word	0x58020000
 800bc34:	58020c00 	.word	0x58020c00

0800bc38 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
 800bc3c:	4b03      	ldr	r3, [pc, #12]	; (800bc4c <nm_bsp_init+0x14>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
 800bc42:	f7ff ffe5 	bl	800bc10 <init_chip_pins>
//	    delay_init();
//    }

//	system_interrupt_enable_global(); // TODO: SO: make sure INT_N is well defined

	return M2M_SUCCESS;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	2400002c 	.word	0x2400002c

0800bc50 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
//	nm_bsp_sleep(1);
//	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
//	nm_bsp_sleep(10);
//	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);

	HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);
 800bc54:	2200      	movs	r2, #0
 800bc56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc5a:	480d      	ldr	r0, [pc, #52]	; (800bc90 <nm_bsp_reset+0x40>)
 800bc5c:	f7f8 f898 	bl	8003d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_RESET);
 800bc60:	2200      	movs	r2, #0
 800bc62:	2120      	movs	r1, #32
 800bc64:	480b      	ldr	r0, [pc, #44]	; (800bc94 <nm_bsp_reset+0x44>)
 800bc66:	f7f8 f893 	bl	8003d90 <HAL_GPIO_WritePin>
	nm_bsp_sleep(1);
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	f000 f814 	bl	800bc98 <nm_bsp_sleep>
	HAL_GPIO_WritePin(WIFI_CHIP_EN_GPIO_Port, WIFI_CHIP_EN_Pin, GPIO_PIN_SET);
 800bc70:	2201      	movs	r2, #1
 800bc72:	2120      	movs	r1, #32
 800bc74:	4807      	ldr	r0, [pc, #28]	; (800bc94 <nm_bsp_reset+0x44>)
 800bc76:	f7f8 f88b 	bl	8003d90 <HAL_GPIO_WritePin>
	nm_bsp_sleep(10);
 800bc7a:	200a      	movs	r0, #10
 800bc7c:	f000 f80c 	bl	800bc98 <nm_bsp_sleep>
	HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_SET);
 800bc80:	2201      	movs	r2, #1
 800bc82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc86:	4802      	ldr	r0, [pc, #8]	; (800bc90 <nm_bsp_reset+0x40>)
 800bc88:	f7f8 f882 	bl	8003d90 <HAL_GPIO_WritePin>
}
 800bc8c:	bf00      	nop
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	58020c00 	.word	0x58020c00
 800bc94:	58020000 	.word	0x58020000

0800bc98 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32TimeMsec);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7f5 fb89 	bl	80013b8 <HAL_Delay>
}
 800bca6:	bf00      	nop
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
	...

0800bcb0 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
//	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
//			EXTINT_CALLBACK_TYPE_DETECT);
//	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
//			EXTINT_CALLBACK_TYPE_DETECT);

	gpfIsr = pfIsr;
 800bcb8:	4a04      	ldr	r2, [pc, #16]	; (800bccc <nm_bsp_register_isr+0x1c>)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6013      	str	r3, [r2, #0]
//	assert_param(result != HAL_OK);
//
//	result = HAL_EXTI_RegisterCallback(phexti, HAL_EXTI_COMMON_CB_ID ,phexti->PendingCallback);
//	assert_param(result != HAL_OK);

}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	2400002c 	.word	0x2400002c

0800bcd0 <spi_rw_pio>:
//	return M2M_SUCCESS;
//}
//#endif //CONF_WINC_SPI_DMA

static inline sint8 spi_rw_pio(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	80fb      	strh	r3, [r7, #6]
//	while (!spi_is_write_complete(&master))
//		;
//
//	spi_select_slave(&master, &slave_inst, false);

	return 		(sint8) HAL_SPI_TransmitReceive(&hspi2, pu8Mosi, pu8Miso, u16Sz, SPI_TIMEOUT);
 800bcde:	88fa      	ldrh	r2, [r7, #6]
 800bce0:	2364      	movs	r3, #100	; 0x64
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	4613      	mov	r3, r2
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	68f9      	ldr	r1, [r7, #12]
 800bcea:	4804      	ldr	r0, [pc, #16]	; (800bcfc <spi_rw_pio+0x2c>)
 800bcec:	f7fc fc22 	bl	8008534 <HAL_SPI_TransmitReceive>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	b25b      	sxtb	r3, r3
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	2400019c 	.word	0x2400019c

0800bd00 <spi_rw>:

sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	80fb      	strh	r3, [r7, #6]
//		return spi_rw_dma(pu8Mosi, pu8Miso, u16Sz);
//	}
//	else
//#endif //CONF_WINC_SPI_DMA

		return spi_rw_pio(pu8Mosi, pu8Miso, u16Sz);
 800bd0e:	88fb      	ldrh	r3, [r7, #6]
 800bd10:	461a      	mov	r2, r3
 800bd12:	68b9      	ldr	r1, [r7, #8]
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f7ff ffdb 	bl	800bcd0 <spi_rw_pio>
 800bd1a:	4603      	mov	r3, r0


}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]
//	}
//#endif

	//===========================  SO code ===========================

	MX_SPI2_Init();
 800bd30:	f7f5 f88e 	bl	8000e50 <MX_SPI2_Init>



	// ========================= End of  SO code =====================

	nm_bsp_reset();
 800bd34:	f7ff ff8c 	bl	800bc50 <nm_bsp_reset>
	nm_bsp_sleep(1);
 800bd38:	2001      	movs	r0, #1
 800bd3a:	f7ff ffad 	bl	800bc98 <nm_bsp_sleep>
//#endif
	return result;
 800bd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <nm_bus_ioctl>:
*					Arbitrary parameter depending on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	6039      	str	r1, [r7, #0]
 800bd56:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
	u8Cmd = NM_BUS_IOCTL_RW;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	71fb      	strb	r3, [r7, #7]
	switch(u8Cmd)
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d119      	bne.n	800bd9a <nm_bus_ioctl+0x4e>
//		}
//		break;
//#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW:
		{
			HAL_GPIO_WritePin(SPI2_NSS_GPIO, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800bd66:	2200      	movs	r2, #0
 800bd68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd6c:	480f      	ldr	r0, [pc, #60]	; (800bdac <nm_bus_ioctl+0x60>)
 800bd6e:	f7f8 f80f 	bl	8003d90 <HAL_GPIO_WritePin>
			tstrNmSpiRw* pstrParam = (tstrNmSpiRw*) pvParameter;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	60bb      	str	r3, [r7, #8]

			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	6859      	ldr	r1, [r3, #4]
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	891b      	ldrh	r3, [r3, #8]
 800bd82:	461a      	mov	r2, r3
 800bd84:	f7ff ffbc 	bl	800bd00 <spi_rw>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]

			HAL_GPIO_WritePin(SPI2_NSS_GPIO, SPI2_NSS_Pin, GPIO_PIN_SET);
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd92:	4806      	ldr	r0, [pc, #24]	; (800bdac <nm_bus_ioctl+0x60>)
 800bd94:	f7f7 fffc 	bl	8003d90 <HAL_GPIO_WritePin>
		}
		break;
 800bd98:	e002      	b.n	800bda0 <nm_bus_ioctl+0x54>
//#endif
		default:
			s8Ret = -1;
 800bd9a:	23ff      	movs	r3, #255	; 0xff
 800bd9c:	73fb      	strb	r3, [r7, #15]
//			M2M_ERR("invalid ioclt cmd\n");
			break;
 800bd9e:	bf00      	nop
	}

	return s8Ret;
 800bda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	58020400 	.word	0x58020400

0800bdb0 <__libc_init_array>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	4e0d      	ldr	r6, [pc, #52]	; (800bde8 <__libc_init_array+0x38>)
 800bdb4:	4c0d      	ldr	r4, [pc, #52]	; (800bdec <__libc_init_array+0x3c>)
 800bdb6:	1ba4      	subs	r4, r4, r6
 800bdb8:	10a4      	asrs	r4, r4, #2
 800bdba:	2500      	movs	r5, #0
 800bdbc:	42a5      	cmp	r5, r4
 800bdbe:	d109      	bne.n	800bdd4 <__libc_init_array+0x24>
 800bdc0:	4e0b      	ldr	r6, [pc, #44]	; (800bdf0 <__libc_init_array+0x40>)
 800bdc2:	4c0c      	ldr	r4, [pc, #48]	; (800bdf4 <__libc_init_array+0x44>)
 800bdc4:	f000 f820 	bl	800be08 <_init>
 800bdc8:	1ba4      	subs	r4, r4, r6
 800bdca:	10a4      	asrs	r4, r4, #2
 800bdcc:	2500      	movs	r5, #0
 800bdce:	42a5      	cmp	r5, r4
 800bdd0:	d105      	bne.n	800bdde <__libc_init_array+0x2e>
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdd8:	4798      	blx	r3
 800bdda:	3501      	adds	r5, #1
 800bddc:	e7ee      	b.n	800bdbc <__libc_init_array+0xc>
 800bdde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bde2:	4798      	blx	r3
 800bde4:	3501      	adds	r5, #1
 800bde6:	e7f2      	b.n	800bdce <__libc_init_array+0x1e>
 800bde8:	0800c330 	.word	0x0800c330
 800bdec:	0800c330 	.word	0x0800c330
 800bdf0:	0800c330 	.word	0x0800c330
 800bdf4:	0800c334 	.word	0x0800c334

0800bdf8 <memset>:
 800bdf8:	4402      	add	r2, r0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d100      	bne.n	800be02 <memset+0xa>
 800be00:	4770      	bx	lr
 800be02:	f803 1b01 	strb.w	r1, [r3], #1
 800be06:	e7f9      	b.n	800bdfc <memset+0x4>

0800be08 <_init>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr

0800be14 <_fini>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	bf00      	nop
 800be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1a:	bc08      	pop	{r3}
 800be1c:	469e      	mov	lr, r3
 800be1e:	4770      	bx	lr
