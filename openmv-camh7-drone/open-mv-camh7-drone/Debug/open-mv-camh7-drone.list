
open-mv-camh7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010594  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  08010834  08010834  00020834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011528  08011528  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08011528  08011528  00021528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011530  08011530  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011530  08011530  00021530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011534  08011534  00021534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  08011538  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa0  24000084  080115bc  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000b24  080115bc  00030b24  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ab35  00000000  00000000  000300b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000601d  00000000  00000000  0006abe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b00  00000000  00000000  00070c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d8  00000000  00000000  00072708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003cb0e  00000000  00000000  000740e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f65c  00000000  00000000  000b0bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00163f13  00000000  00000000  000d024a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0023415d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074c0  00000000  00000000  002341d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801081c 	.word	0x0801081c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0801081c 	.word	0x0801081c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_DCMI_Init+0x64>)
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <MX_DCMI_Init+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_DCMI_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_DCMI_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_DCMI_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_DCMI_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_DCMI_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_DCMI_Init+0x64>)
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_DCMI_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_DCMI_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_DCMI_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_DCMI_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_DCMI_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_DCMI_Init+0x64>)
 80006d0:	f001 fa1e 	bl	8001b10 <HAL_DCMI_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 fbe0 	bl	8000e9e <Error_Handler>
  }

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2400081c 	.word	0x2400081c
 80006e8:	48020000 	.word	0x48020000

080006ec <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a65      	ldr	r2, [pc, #404]	; (80008a0 <HAL_DCMI_MspInit+0x1b4>)
 800070a:	4293      	cmp	r3, r2
 800070c:	f040 80c3 	bne.w	8000896 <HAL_DCMI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000710:	4b64      	ldr	r3, [pc, #400]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000712:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000716:	4a63      	ldr	r2, [pc, #396]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000720:	4b60      	ldr	r3, [pc, #384]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000722:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	4b5d      	ldr	r3, [pc, #372]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	4a5b      	ldr	r2, [pc, #364]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073e:	4b59      	ldr	r3, [pc, #356]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	f003 0310 	and.w	r3, r3, #16
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b55      	ldr	r3, [pc, #340]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075c:	4b51      	ldr	r3, [pc, #324]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	4a4c      	ldr	r2, [pc, #304]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077a:	4b4a      	ldr	r3, [pc, #296]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b46      	ldr	r3, [pc, #280]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	4a45      	ldr	r2, [pc, #276]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000798:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <HAL_DCMI_MspInit+0x1b8>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
 80007a6:	2373      	movs	r3, #115	; 0x73
 80007a8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007b6:	230d      	movs	r3, #13
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4839      	ldr	r0, [pc, #228]	; (80008a8 <HAL_DCMI_MspInit+0x1bc>)
 80007c2:	f003 fa75 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007c6:	2350      	movs	r3, #80	; 0x50
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007d6:	230d      	movs	r3, #13
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4832      	ldr	r0, [pc, #200]	; (80008ac <HAL_DCMI_MspInit+0x1c0>)
 80007e2:	f003 fa65 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80007e6:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f8:	230d      	movs	r3, #13
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	482b      	ldr	r0, [pc, #172]	; (80008b0 <HAL_DCMI_MspInit+0x1c4>)
 8000804:	f003 fa54 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000808:	23c0      	movs	r3, #192	; 0xc0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000818:	230d      	movs	r3, #13
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4824      	ldr	r0, [pc, #144]	; (80008b4 <HAL_DCMI_MspInit+0x1c8>)
 8000824:	f003 fa44 	bl	8003cb0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 800082a:	4a24      	ldr	r2, [pc, #144]	; (80008bc <HAL_DCMI_MspInit+0x1d0>)
 800082c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 8000830:	224b      	movs	r2, #75	; 0x4b
 8000832:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 8000842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 800084a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800086a:	4813      	ldr	r0, [pc, #76]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 800086c:	f001 fb3a 	bl	8001ee4 <HAL_DMA_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_DCMI_MspInit+0x18e>
    {
      Error_Handler();
 8000876:	f000 fb12 	bl	8000e9e <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 800087e:	649a      	str	r2, [r3, #72]	; 0x48
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <HAL_DCMI_MspInit+0x1cc>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	204e      	movs	r0, #78	; 0x4e
 800088c:	f001 f8da 	bl	8001a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000890:	204e      	movs	r0, #78	; 0x4e
 8000892:	f001 f901 	bl	8001a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000896:	bf00      	nop
 8000898:	3730      	adds	r7, #48	; 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	48020000 	.word	0x48020000
 80008a4:	58024400 	.word	0x58024400
 80008a8:	58021000 	.word	0x58021000
 80008ac:	58020000 	.word	0x58020000
 80008b0:	58020800 	.word	0x58020800
 80008b4:	58020400 	.word	0x58020400
 80008b8:	240007a4 	.word	0x240007a4
 80008bc:	40020010 	.word	0x40020010

080008c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_DMA_Init+0x3c>)
 80008c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <MX_DMA_Init+0x3c>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_DMA_Init+0x3c>)
 80008d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	200b      	movs	r0, #11
 80008ea:	f001 f8ab 	bl	8001a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008ee:	200b      	movs	r0, #11
 80008f0:	f001 f8d2 	bl	8001a98 <HAL_NVIC_EnableIRQ>

}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	58024400 	.word	0x58024400

08000900 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	4b5e      	ldr	r3, [pc, #376]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	4a5c      	ldr	r2, [pc, #368]	; (8000a90 <MX_GPIO_Init+0x190>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000926:	4b5a      	ldr	r3, [pc, #360]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	4a55      	ldr	r2, [pc, #340]	; (8000a90 <MX_GPIO_Init+0x190>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000944:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000958:	4a4d      	ldr	r2, [pc, #308]	; (8000a90 <MX_GPIO_Init+0x190>)
 800095a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000962:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000976:	4a46      	ldr	r2, [pc, #280]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000980:	4b43      	ldr	r3, [pc, #268]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a3e      	ldr	r2, [pc, #248]	; (8000a90 <MX_GPIO_Init+0x190>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <MX_GPIO_Init+0x190>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ac:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <MX_GPIO_Init+0x190>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a37      	ldr	r2, [pc, #220]	; (8000a90 <MX_GPIO_Init+0x190>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <MX_GPIO_Init+0x190>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
//  HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE7 PE8 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8 
 80009ca:	f64f 738c 	movw	r3, #65420	; 0xff8c
 80009ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	482d      	ldr	r0, [pc, #180]	; (8000a94 <MX_GPIO_Init+0x194>)
 80009e0:	f003 f966 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC3 
                           PC4 PC5 PC8 PC9 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
 80009e4:	f64e 3338 	movw	r3, #60216	; 0xeb38
 80009e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4827      	ldr	r0, [pc, #156]	; (8000a98 <MX_GPIO_Init+0x198>)
 80009fa:	f003 f959 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80009fe:	2307      	movs	r3, #7
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4820      	ldr	r0, [pc, #128]	; (8000a98 <MX_GPIO_Init+0x198>)
 8000a16:	f003 f94b 	bl	8003cb0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	481e      	ldr	r0, [pc, #120]	; (8000a98 <MX_GPIO_Init+0x198>)
 8000a20:	f003 fbf6 	bl	8004210 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2102      	movs	r1, #2
 8000a28:	481b      	ldr	r0, [pc, #108]	; (8000a98 <MX_GPIO_Init+0x198>)
 8000a2a:	f003 fbf1 	bl	8004210 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2104      	movs	r1, #4
 8000a32:	4819      	ldr	r0, [pc, #100]	; (8000a98 <MX_GPIO_Init+0x198>)
 8000a34:	f003 fbec 	bl	8004210 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000a38:	f649 738f 	movw	r3, #40847	; 0x9f8f
 8000a3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <MX_GPIO_Init+0x19c>)
 8000a4e:	f003 f92f 	bl	8003cb0 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(WIFI_CHIP_EN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000a52:	f640 433f 	movw	r3, #3135	; 0xc3f
 8000a56:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_GPIO_Init+0x1a0>)
 8000a68:	f003 f922 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000a6c:	f64c 739f 	movw	r3, #53151	; 0xcf9f
 8000a70:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_GPIO_Init+0x1a4>)
 8000a82:	f003 f915 	bl	8003cb0 <HAL_GPIO_Init>
//
//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	58024400 	.word	0x58024400
 8000a94:	58021000 	.word	0x58021000
 8000a98:	58020800 	.word	0x58020800
 8000a9c:	58020000 	.word	0x58020000
 8000aa0:	58020400 	.word	0x58020400
 8000aa4:	58020c00 	.word	0x58020c00

08000aa8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <MX_I2C1_Init+0x78>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x7c>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ae4:	f003 fbe0 	bl	80042a8 <HAL_I2C_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aee:	f000 f9d6 	bl	8000e9e <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000af6:	f003 fcf9 	bl	80044ec <HAL_I2CEx_ConfigAnalogFilter>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b00:	f000 f9cd 	bl	8000e9e <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000b08:	f003 fd66 	bl	80045d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b12:	f000 f9c4 	bl	8000e9e <Error_Handler>
  }

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2400086c 	.word	0x2400086c
 8000b20:	40005400 	.word	0x40005400
 8000b24:	10707dbc 	.word	0x10707dbc

08000b28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12e      	bne.n	8000ba8 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6e:	2312      	movs	r3, #18
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <HAL_I2C_MspInit+0x90>)
 8000b86:	f003 f893 	bl	8003cb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020400 	.word	0x58020400

08000bbc <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

  hjpeg.Instance = JPEG;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_JPEG_Init+0x20>)
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <MX_JPEG_Init+0x24>)
 8000bc4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_JPEG_Init+0x20>)
 8000bc8:	f003 fd7a 	bl	80046c0 <HAL_JPEG_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000bd2:	f000 f964 	bl	8000e9e <Error_Handler>
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240008b8 	.word	0x240008b8
 8000be0:	52003000 	.word	0x52003000

08000be4 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_JPEG_MspInit+0x3c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10e      	bne.n	8000c14 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_JPEG_MspInit+0x40>)
 8000bf8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bfc:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <HAL_JPEG_MspInit+0x40>)
 8000bfe:	f043 0320 	orr.w	r3, r3, #32
 8000c02:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_JPEG_MspInit+0x40>)
 8000c08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	52003000 	.word	0x52003000
 8000c24:	58024400 	.word	0x58024400

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	HAL_Init();
 8000c2c:	f000 fd3c 	bl	80016a8 <HAL_Init>
	SystemClock_Config();
 8000c30:	f000 f818 	bl	8000c64 <SystemClock_Config>

	/* Initialize the BSP. */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c34:	f7ff fe64 	bl	8000900 <MX_GPIO_Init>
	MX_DCMI_Init();
 8000c38:	f7ff fd22 	bl	8000680 <MX_DCMI_Init>
	MX_I2C1_Init();
 8000c3c:	f7ff ff34 	bl	8000aa8 <MX_I2C1_Init>
	MX_JPEG_Init();
 8000c40:	f7ff ffbc 	bl	8000bbc <MX_JPEG_Init>
	MX_USART2_UART_Init();
 8000c44:	f000 fa9e 	bl	8001184 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000c48:	f7ff fe3a 	bl	80008c0 <MX_DMA_Init>

	WifiMngr_Init();
 8000c4c:	f000 fb30 	bl	80012b0 <WifiMngr_Init>

	/* connect to router. */
	WifiMngr_Connect(M2M_WIFI_CH_ALL);
 8000c50:	20ff      	movs	r0, #255	; 0xff
 8000c52:	f000 fb69 	bl	8001328 <WifiMngr_Connect>
	while (true)
	{
		/* Handle pending events from network controller. */
		while (WifiMngr_HandleEvents() != M2M_SUCCESS) {
 8000c56:	bf00      	nop
 8000c58:	f000 fb7e 	bl	8001358 <WifiMngr_HandleEvents>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1fa      	bne.n	8000c58 <main+0x30>
 8000c62:	e7f8      	b.n	8000c56 <main+0x2e>

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ce      	sub	sp, #312	; 0x138
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000c6e:	224c      	movs	r2, #76	; 0x4c
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00e fe38 	bl	800f8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f00e fe31 	bl	800f8e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	23bc      	movs	r3, #188	; 0xbc
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2100      	movs	r1, #0
 8000c92:	f00e fe29 	bl	800f8e8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f004 fad6 	bl	8005248 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	4b68      	ldr	r3, [pc, #416]	; (8000e48 <SystemClock_Config+0x1e4>)
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	4a67      	ldr	r2, [pc, #412]	; (8000e48 <SystemClock_Config+0x1e4>)
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cb0:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <SystemClock_Config+0x1e4>)
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb4:	f003 0201 	and.w	r2, r3, #1
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	4b63      	ldr	r3, [pc, #396]	; (8000e4c <SystemClock_Config+0x1e8>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc6:	4a61      	ldr	r2, [pc, #388]	; (8000e4c <SystemClock_Config+0x1e8>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6193      	str	r3, [r2, #24]
 8000cce:	4b5f      	ldr	r3, [pc, #380]	; (8000e4c <SystemClock_Config+0x1e8>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce2:	bf00      	nop
 8000ce4:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <SystemClock_Config+0x1e8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf0:	d1f8      	bne.n	8000ce4 <SystemClock_Config+0x80>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000d10:	2320      	movs	r3, #32
 8000d12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000d16:	2381      	movs	r3, #129	; 0x81
 8000d18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 fac3 	bl	80052d0 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000d50:	f000 f8a5 	bl	8000e9e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	233f      	movs	r3, #63	; 0x3f
 8000d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 ff80 	bl	8005c90 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000d96:	f000 f882 	bl	8000e9e <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SPI2
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	f241 020a 	movw	r2, #4106	; 0x100a
 8000da2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2200      	movs	r2, #0
 8000daa:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2200      	movs	r2, #0
 8000db2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	2200      	movs	r2, #0
 8000dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f005 fc7c 	bl	80066c0 <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x16e>
  {
    Error_Handler();
 8000dce:	f000 f866 	bl	8000e9e <Error_Handler>
  }
	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0204 	and.w	r2, r3, #4
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	681b      	ldr	r3, [r3, #0]
	__GPIOA_CLK_ENABLE();
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
	__GPIOB_CLK_ENABLE();
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <SystemClock_Config+0x1ec>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0202 	and.w	r2, r3, #2
 8000e34:	463b      	mov	r3, r7
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	463b      	mov	r3, r7
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	58000400 	.word	0x58000400
 8000e4c:	58024800 	.word	0x58024800
 8000e50:	58024400 	.word	0x58024400

08000e54 <EXTI15_10_IRQHandler>:

///* USER CODE BEGIN 4 */
void EXTI15_10_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <EXTI15_10_IRQHandler+0x28>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <EXTI15_10_IRQHandler+0x18>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fa02 	bl	8004278 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	58000080 	.word	0x58000080

08000e80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CONF_WINC_SPI_INT_PIN)
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_EXTI_Callback+0x16>
    {
        isr();
 8000e92:	f00b faf1 	bl	800c478 <isr>
    }
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
  while (true)
 8000ea2:	e7fe      	b.n	8000ea2 <Error_Handler+0x4>

08000ea4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
  while (true)
 8000eae:	e7fe      	b.n	8000eae <assert_failed+0xa>

08000eb0 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance==SPI_WIFI)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_SPI_MspInit+0x20>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d102      	bne.n	8000ec8 <HAL_SPI_MspInit+0x18>
	{
	    nm_bus_wifi_spi_init(hspi);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f00b f9c6 	bl	800c254 <nm_bus_wifi_spi_init>
//    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//
//  /* USER CODE BEGIN SPI2_MspInit 1 */
//
//  /* USER CODE END SPI2_MspInit 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40003800 	.word	0x40003800

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_MspInit+0x30>)
 8000edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ee0:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_MspInit+0x30>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x30>)
 8000eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	58024400 	.word	0x58024400

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 fc12 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <DMA1_Stream0_IRQHandler+0x10>)
 8000f6a:	f001 fd3b 	bl	80029e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	240007a4 	.word	0x240007a4

08000f78 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DCMI_IRQHandler+0x10>)
 8000f7e:	f000 fee9 	bl	8001d54 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2400081c 	.word	0x2400081c

08000f8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e00a      	b.n	8000fb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f9e:	f3af 8000 	nop.w
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	60ba      	str	r2, [r7, #8]
 8000faa:	b2ca      	uxtb	r2, r1
 8000fac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbf0      	blt.n	8000f9e <_read+0x12>
	}

return len;
 8000fbc:	687b      	ldr	r3, [r7, #4]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e009      	b.n	8000fec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbf1      	blt.n	8000fd8 <_write+0x12>
	}
	return len;
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_close>:

int _close(int file)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	return -1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001026:	605a      	str	r2, [r3, #4]
	return 0;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_isatty>:

int _isatty(int file)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
	return 1;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x50>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x16>
		heap_end = &end;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <_sbrk+0x50>)
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <_sbrk+0x54>)
 800107c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <_sbrk+0x50>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <_sbrk+0x50>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	466a      	mov	r2, sp
 800108e:	4293      	cmp	r3, r2
 8001090:	d907      	bls.n	80010a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001092:	f00e fbff 	bl	800f894 <__errno>
 8001096:	4602      	mov	r2, r0
 8001098:	230c      	movs	r3, #12
 800109a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	e006      	b.n	80010b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <_sbrk+0x50>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <_sbrk+0x50>)
 80010ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	240000a0 	.word	0x240000a0
 80010bc:	24000b28 	.word	0x24000b28

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <SystemInit+0xac>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a28      	ldr	r2, [pc, #160]	; (800116c <SystemInit+0xac>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <SystemInit+0xb0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a25      	ldr	r2, [pc, #148]	; (8001170 <SystemInit+0xb0>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <SystemInit+0xb0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <SystemInit+0xb0>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4921      	ldr	r1, [pc, #132]	; (8001170 <SystemInit+0xb0>)
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <SystemInit+0xb4>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <SystemInit+0xb0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <SystemInit+0xb0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <SystemInit+0xb0>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <SystemInit+0xb0>)
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <SystemInit+0xb0>)
 800110c:	2200      	movs	r2, #0
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <SystemInit+0xb0>)
 8001112:	2200      	movs	r2, #0
 8001114:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <SystemInit+0xb0>)
 8001118:	2200      	movs	r2, #0
 800111a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <SystemInit+0xb0>)
 800111e:	2200      	movs	r2, #0
 8001120:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <SystemInit+0xb0>)
 8001124:	2200      	movs	r2, #0
 8001126:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <SystemInit+0xb0>)
 800112a:	2200      	movs	r2, #0
 800112c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <SystemInit+0xb0>)
 8001130:	2200      	movs	r2, #0
 8001132:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <SystemInit+0xb0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <SystemInit+0xb0>)
 800113a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <SystemInit+0xb0>)
 8001142:	2200      	movs	r2, #0
 8001144:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <SystemInit+0xb8>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <SystemInit+0xbc>)
 800114c:	4013      	ands	r3, r2
 800114e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001152:	d202      	bcs.n	800115a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <SystemInit+0xc0>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SystemInit+0xac>)
 800115c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001160:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00
 8001170:	58024400 	.word	0x58024400
 8001174:	eaf6ed7f 	.word	0xeaf6ed7f
 8001178:	5c001000 	.word	0x5c001000
 800117c:	ffff0000 	.word	0xffff0000
 8001180:	51008108 	.word	0x51008108

08001184 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_USART2_UART_Init+0x90>)
 800118a:	4a23      	ldr	r2, [pc, #140]	; (8001218 <MX_USART2_UART_Init+0x94>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_USART2_UART_Init+0x90>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_USART2_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_USART2_UART_Init+0x90>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011cc:	4811      	ldr	r0, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011ce:	f007 ffad 	bl	800912c <HAL_UART_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011d8:	f7ff fe61 	bl	8000e9e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011dc:	2100      	movs	r1, #0
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011e0:	f00a fd84 	bl	800bcec <HAL_UARTEx_SetTxFifoThreshold>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011ea:	f7ff fe58 	bl	8000e9e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011f2:	f00a fe15 	bl	800be20 <HAL_UARTEx_SetRxFifoThreshold>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011fc:	f7ff fe4f 	bl	8000e9e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_USART2_UART_Init+0x90>)
 8001202:	f00a fcfd 	bl	800bc00 <HAL_UARTEx_DisableFifoMode>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800120c:	f7ff fe47 	bl	8000e9e <Error_Handler>
  }

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	24000910 	.word	0x24000910
 8001218:	40004400 	.word	0x40004400

0800121c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_UART_MspInit+0x88>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12d      	bne.n	800129a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800127a:	2360      	movs	r3, #96	; 0x60
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800128a:	2307      	movs	r3, #7
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001296:	f002 fd0b 	bl	8003cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40004400 	.word	0x40004400
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58020c00 	.word	0x58020c00

080012b0 <WifiMngr_Init>:

/* ================
int8_t WifiMngr_Init(void)
================ */
int8_t WifiMngr_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <WifiMngr_Init+0x68>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	801a      	strh	r2, [r3, #0]
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <WifiMngr_Init+0x68>)
 80012be:	f640 221a 	movw	r2, #2586	; 0xa1a
 80012c2:	805a      	strh	r2, [r3, #2]
	addr.sin_addr.s_addr = 0;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <WifiMngr_Init+0x68>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]



	nm_bsp_init();
 80012ca:	f00a fed9 	bl	800c080 <nm_bsp_init>

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2218      	movs	r2, #24
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00e fb07 	bl	800f8e8 <memset>

	/* =================  Initialize Wi-Fi driver with data and status callbacks. ================= */
	//param.pfAppWifiCb = wifi_cb;
	param.pfAppWifiCb = (tpfAppWifiCb)wifi_cb;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <WifiMngr_Init+0x6c>)
 80012dc:	607b      	str	r3, [r7, #4]
	ret = m2m_wifi_init(&param);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00b ff9d 	bl	800d220 <m2m_wifi_init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	77fb      	strb	r3, [r7, #31]
	if (M2M_SUCCESS != ret)
 80012ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <WifiMngr_Init+0x50>
	{
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 80012f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <WifiMngr_Init+0x70>)
 80012fa:	f00e fafd 	bl	800f8f8 <iprintf>
		while (true)
 80012fe:	e7fe      	b.n	80012fe <WifiMngr_Init+0x4e>
		{
		}
	}

	/* Initialize socket module */
	socketInit();
 8001300:	f00d fef2 	bl	800f0e8 <socketInit>
	registerSocketCallback(socket_cb, NULL);
 8001304:	2100      	movs	r1, #0
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <WifiMngr_Init+0x74>)
 8001308:	f00d ff0e 	bl	800f128 <registerSocketCallback>

	return ret;
 800130c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2400099c 	.word	0x2400099c
 800131c:	080013d1 	.word	0x080013d1
 8001320:	08010834 	.word	0x08010834
 8001324:	0800147d 	.word	0x0800147d

08001328 <WifiMngr_Connect>:

/* ================
WifiMngr_Connect(tenuM2mScanCh a_e_tenuM2mScanCh)
================ */
sint8 WifiMngr_Connect(tenuM2mScanCh a_e_tenuM2mScanCh)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af02      	add	r7, sp, #8
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	/* Connect to router. */
	return m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),\
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	b29b      	uxth	r3, r3
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <WifiMngr_Connect+0x28>)
 800133a:	2202      	movs	r2, #2
 800133c:	210e      	movs	r1, #14
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <WifiMngr_Connect+0x2c>)
 8001340:	f00b fffd 	bl	800d33e <m2m_wifi_connect>
 8001344:	4603      	mov	r3, r0
							MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK,\
							a_e_tenuM2mScanCh);
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0801085c 	.word	0x0801085c
 8001354:	08010868 	.word	0x08010868

08001358 <WifiMngr_HandleEvents>:

/* ================
 void	WifiMngr_HandleEvents(void)
================ */
sint8	WifiMngr_HandleEvents(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
//	return m2m_wifi_handle_events(NULL);

	sint8 ret = m2m_wifi_handle_events(NULL);
 800135e:	2000      	movs	r0, #0
 8001360:	f00b ffe2 	bl	800d328 <m2m_wifi_handle_events>
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]

	if (wifi_connected == M2M_WIFI_CONNECTED) {
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <WifiMngr_HandleEvents+0x68>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d120      	bne.n	80013b2 <WifiMngr_HandleEvents+0x5a>
		if (tcp_server_socket < 0) {
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <WifiMngr_HandleEvents+0x6c>)
 8001372:	f993 3000 	ldrsb.w	r3, [r3]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da1b      	bge.n	80013b2 <WifiMngr_HandleEvents+0x5a>
			/* Open TCP server socket */
			if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	2002      	movs	r0, #2
 8001380:	f00d fee8 	bl	800f154 <socket>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <WifiMngr_HandleEvents+0x6c>)
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <WifiMngr_HandleEvents+0x6c>)
 800138e:	f993 3000 	ldrsb.w	r3, [r3]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da05      	bge.n	80013a2 <WifiMngr_HandleEvents+0x4a>
				printf("main: failed to create TCP server socket error!\r\n");
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <WifiMngr_HandleEvents+0x70>)
 8001398:	f00e fb36 	bl	800fa08 <puts>
				return ret;
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	e009      	b.n	80013b6 <WifiMngr_HandleEvents+0x5e>
			}

			/* Bind service*/
			bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <WifiMngr_HandleEvents+0x6c>)
 80013a4:	f993 3000 	ldrsb.w	r3, [r3]
 80013a8:	2210      	movs	r2, #16
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <WifiMngr_HandleEvents+0x74>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00d ff8f 	bl	800f2d0 <bind>
		}
	}
	return ret;
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000658 	.word	0x24000658
 80013c4:	24000011 	.word	0x24000011
 80013c8:	08010878 	.word	0x08010878
 80013cc:	2400099c 	.word	0x2400099c

080013d0 <wifi_cb>:

/* ================
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
================ */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	2b2c      	cmp	r3, #44	; 0x2c
 80013e0:	d002      	beq.n	80013e8 <wifi_cb+0x18>
 80013e2:	2b32      	cmp	r3, #50	; 0x32
 80013e4:	d01f      	beq.n	8001426 <wifi_cb+0x56>
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
	}
	break;

	default:
		break;
 80013e6:	e038      	b.n	800145a <wifi_cb+0x8a>
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	60bb      	str	r3, [r7, #8]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d105      	bne.n	8001400 <wifi_cb+0x30>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
 80013f4:	481b      	ldr	r0, [pc, #108]	; (8001464 <wifi_cb+0x94>)
 80013f6:	f00e fb07 	bl	800fa08 <puts>
			m2m_wifi_request_dhcp_client();
 80013fa:	f00c f8e8 	bl	800d5ce <m2m_wifi_request_dhcp_client>
	break;
 80013fe:	e02b      	b.n	8001458 <wifi_cb+0x88>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d127      	bne.n	8001458 <wifi_cb+0x88>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <wifi_cb+0x98>)
 800140a:	f00e fafd 	bl	800fa08 <puts>
			wifi_connected = 0;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <wifi_cb+0x9c>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
 8001414:	23ff      	movs	r3, #255	; 0xff
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <wifi_cb+0xa0>)
 800141a:	2202      	movs	r2, #2
 800141c:	210e      	movs	r1, #14
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <wifi_cb+0xa4>)
 8001420:	f00b ff8d 	bl	800d33e <m2m_wifi_connect>
	break;
 8001424:	e018      	b.n	8001458 <wifi_cb+0x88>
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	60fb      	str	r3, [r7, #12]
		wifi_connected = 1;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <wifi_cb+0x9c>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
 8001434:	4619      	mov	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
 800143c:	461a      	mov	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3302      	adds	r3, #2
 8001442:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
 8001444:	4618      	mov	r0, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3303      	adds	r3, #3
 800144a:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4603      	mov	r3, r0
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <wifi_cb+0xa8>)
 8001452:	f00e fa51 	bl	800f8f8 <iprintf>
	break;
 8001456:	e000      	b.n	800145a <wifi_cb+0x8a>
	break;
 8001458:	bf00      	nop
	}
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	080108ac 	.word	0x080108ac
 8001468:	080108e4 	.word	0x080108e4
 800146c:	24000658 	.word	0x24000658
 8001470:	0801085c 	.word	0x0801085c
 8001474:	08010868 	.word	0x08010868
 8001478:	0801091c 	.word	0x0801091c

0800147c <socket_cb>:

/* ================
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
================ */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	603a      	str	r2, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	460b      	mov	r3, r1
 800148a:	71bb      	strb	r3, [r7, #6]
	switch (u8Msg) {
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	3b01      	subs	r3, #1
 8001490:	2b06      	cmp	r3, #6
 8001492:	f200 80bb 	bhi.w	800160c <socket_cb+0x190>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <socket_cb+0x20>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014b9 	.word	0x080014b9
 80014a0:	080014fd 	.word	0x080014fd
 80014a4:	0800160d 	.word	0x0800160d
 80014a8:	08001543 	.word	0x08001543
 80014ac:	0800160d 	.word	0x0800160d
 80014b0:	080015c7 	.word	0x080015c7
 80014b4:	0800159b 	.word	0x0800159b
	/* Socket bind */
	case SOCKET_MSG_BIND:
	{
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	60bb      	str	r3, [r7, #8]
		if (pstrBind && pstrBind->status == 0) {
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00f      	beq.n	80014e2 <socket_cb+0x66>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f993 3000 	ldrsb.w	r3, [r3]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10a      	bne.n	80014e2 <socket_cb+0x66>
			printf("socket_cb: bind success!\r\n");
 80014cc:	4852      	ldr	r0, [pc, #328]	; (8001618 <socket_cb+0x19c>)
 80014ce:	f00e fa9b 	bl	800fa08 <puts>
			listen(tcp_server_socket, 0);
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <socket_cb+0x1a0>)
 80014d4:	f993 3000 	ldrsb.w	r3, [r3]
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f00d ff56 	bl	800f38c <listen>
			printf("socket_cb: bind error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
	break;
 80014e0:	e095      	b.n	800160e <socket_cb+0x192>
			printf("socket_cb: bind error!\r\n");
 80014e2:	484f      	ldr	r0, [pc, #316]	; (8001620 <socket_cb+0x1a4>)
 80014e4:	f00e fa90 	bl	800fa08 <puts>
			close(tcp_server_socket);
 80014e8:	4b4c      	ldr	r3, [pc, #304]	; (800161c <socket_cb+0x1a0>)
 80014ea:	f993 3000 	ldrsb.w	r3, [r3]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00e f8ae 	bl	800f650 <close>
			tcp_server_socket = -1;
 80014f4:	4b49      	ldr	r3, [pc, #292]	; (800161c <socket_cb+0x1a0>)
 80014f6:	22ff      	movs	r2, #255	; 0xff
 80014f8:	701a      	strb	r2, [r3, #0]
	break;
 80014fa:	e088      	b.n	800160e <socket_cb+0x192>

	/* Socket listen */
	case SOCKET_MSG_LISTEN:
	{
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	60fb      	str	r3, [r7, #12]
		if (pstrListen && pstrListen->status == 0) {
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d010      	beq.n	8001528 <socket_cb+0xac>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f993 3000 	ldrsb.w	r3, [r3]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10b      	bne.n	8001528 <socket_cb+0xac>
			printf("socket_cb: listen success!\r\n");
 8001510:	4844      	ldr	r0, [pc, #272]	; (8001624 <socket_cb+0x1a8>)
 8001512:	f00e fa79 	bl	800fa08 <puts>
			accept(tcp_server_socket, NULL, NULL);
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <socket_cb+0x1a0>)
 8001518:	f993 3000 	ldrsb.w	r3, [r3]
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00d ff75 	bl	800f410 <accept>
			printf("socket_cb: listen error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
	break;
 8001526:	e072      	b.n	800160e <socket_cb+0x192>
			printf("socket_cb: listen error!\r\n");
 8001528:	483f      	ldr	r0, [pc, #252]	; (8001628 <socket_cb+0x1ac>)
 800152a:	f00e fa6d 	bl	800fa08 <puts>
			close(tcp_server_socket);
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <socket_cb+0x1a0>)
 8001530:	f993 3000 	ldrsb.w	r3, [r3]
 8001534:	4618      	mov	r0, r3
 8001536:	f00e f88b 	bl	800f650 <close>
			tcp_server_socket = -1;
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <socket_cb+0x1a0>)
 800153c:	22ff      	movs	r2, #255	; 0xff
 800153e:	701a      	strb	r2, [r3, #0]
	break;
 8001540:	e065      	b.n	800160e <socket_cb+0x192>

	/* Connect accept */
	case SOCKET_MSG_ACCEPT:
	{
		tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	613b      	str	r3, [r7, #16]
		if (pstrAccept) {
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d019      	beq.n	8001580 <socket_cb+0x104>
			printf("socket_cb: accept success!\r\n");
 800154c:	4837      	ldr	r0, [pc, #220]	; (800162c <socket_cb+0x1b0>)
 800154e:	f00e fa5b 	bl	800fa08 <puts>
			accept(tcp_server_socket, NULL, NULL);
 8001552:	4b32      	ldr	r3, [pc, #200]	; (800161c <socket_cb+0x1a0>)
 8001554:	f993 3000 	ldrsb.w	r3, [r3]
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f00d ff57 	bl	800f410 <accept>
			tcp_client_socket = pstrAccept->sock;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f993 2000 	ldrsb.w	r2, [r3]
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <socket_cb+0x1b4>)
 800156a:	701a      	strb	r2, [r3, #0]
			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
 800156c:	4b30      	ldr	r3, [pc, #192]	; (8001630 <socket_cb+0x1b4>)
 800156e:	f993 0000 	ldrsb.w	r0, [r3]
 8001572:	2300      	movs	r3, #0
 8001574:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001578:	492e      	ldr	r1, [pc, #184]	; (8001634 <socket_cb+0x1b8>)
 800157a:	f00d ffe3 	bl	800f544 <recv>
			printf("socket_cb: accept error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}
	break;
 800157e:	e046      	b.n	800160e <socket_cb+0x192>
			printf("socket_cb: accept error!\r\n");
 8001580:	482d      	ldr	r0, [pc, #180]	; (8001638 <socket_cb+0x1bc>)
 8001582:	f00e fa41 	bl	800fa08 <puts>
			close(tcp_server_socket);
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <socket_cb+0x1a0>)
 8001588:	f993 3000 	ldrsb.w	r3, [r3]
 800158c:	4618      	mov	r0, r3
 800158e:	f00e f85f 	bl	800f650 <close>
			tcp_server_socket = -1;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <socket_cb+0x1a0>)
 8001594:	22ff      	movs	r2, #255	; 0xff
 8001596:	701a      	strb	r2, [r3, #0]
	break;
 8001598:	e039      	b.n	800160e <socket_cb+0x192>

	/* Message send */
	case SOCKET_MSG_SEND:
	{
		printf("socket_cb: send success!\r\n");
 800159a:	4828      	ldr	r0, [pc, #160]	; (800163c <socket_cb+0x1c0>)
 800159c:	f00e fa34 	bl	800fa08 <puts>
		printf("TCP Server Test Complete!\r\n");
 80015a0:	4827      	ldr	r0, [pc, #156]	; (8001640 <socket_cb+0x1c4>)
 80015a2:	f00e fa31 	bl	800fa08 <puts>
//
//		send(tcp_client_socket, TxBuff, 12, 0);
//		send(tcp_client_socket, TxBuff, 12, 0);
//		send(tcp_client_socket, TxBuff, 12, 0);
		printf("close socket\n");
 80015a6:	4827      	ldr	r0, [pc, #156]	; (8001644 <socket_cb+0x1c8>)
 80015a8:	f00e fa2e 	bl	800fa08 <puts>
		close(tcp_client_socket);
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <socket_cb+0x1b4>)
 80015ae:	f993 3000 	ldrsb.w	r3, [r3]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00e f84c 	bl	800f650 <close>
		close(tcp_server_socket);
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <socket_cb+0x1a0>)
 80015ba:	f993 3000 	ldrsb.w	r3, [r3]
 80015be:	4618      	mov	r0, r3
 80015c0:	f00e f846 	bl	800f650 <close>
	}
	break;
 80015c4:	e023      	b.n	800160e <socket_cb+0x192>

	/* Message receive */
	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	617b      	str	r3, [r7, #20]
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d010      	beq.n	80015f2 <socket_cb+0x176>
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dd0b      	ble.n	80015f2 <socket_cb+0x176>
			printf("socket_cb: recv success!\r\n");
 80015da:	481b      	ldr	r0, [pc, #108]	; (8001648 <socket_cb+0x1cc>)
 80015dc:	f00e fa14 	bl	800fa08 <puts>
			send(tcp_client_socket, &msg_wifi_product, sizeof(t_msg_wifi_product), 0);
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <socket_cb+0x1b4>)
 80015e2:	f993 0000 	ldrsb.w	r0, [r3]
 80015e6:	2300      	movs	r3, #0
 80015e8:	2209      	movs	r2, #9
 80015ea:	4918      	ldr	r1, [pc, #96]	; (800164c <socket_cb+0x1d0>)
 80015ec:	f00d ff34 	bl	800f458 <send>
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}

	break;
 80015f0:	e00d      	b.n	800160e <socket_cb+0x192>
			printf("socket_cb: recv error!\r\n");
 80015f2:	4817      	ldr	r0, [pc, #92]	; (8001650 <socket_cb+0x1d4>)
 80015f4:	f00e fa08 	bl	800fa08 <puts>
			close(tcp_server_socket);
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <socket_cb+0x1a0>)
 80015fa:	f993 3000 	ldrsb.w	r3, [r3]
 80015fe:	4618      	mov	r0, r3
 8001600:	f00e f826 	bl	800f650 <close>
			tcp_server_socket = -1;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <socket_cb+0x1a0>)
 8001606:	22ff      	movs	r2, #255	; 0xff
 8001608:	701a      	strb	r2, [r3, #0]
	break;
 800160a:	e000      	b.n	800160e <socket_cb+0x192>

	default:
		break;
 800160c:	bf00      	nop
	}
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	08010954 	.word	0x08010954
 800161c:	24000011 	.word	0x24000011
 8001620:	08010970 	.word	0x08010970
 8001624:	08010988 	.word	0x08010988
 8001628:	080109a4 	.word	0x080109a4
 800162c:	080109c0 	.word	0x080109c0
 8001630:	24000012 	.word	0x24000012
 8001634:	240000a4 	.word	0x240000a4
 8001638:	080109dc 	.word	0x080109dc
 800163c:	080109f8 	.word	0x080109f8
 8001640:	08010a14 	.word	0x08010a14
 8001644:	08010a30 	.word	0x08010a30
 8001648:	08010a40 	.word	0x08010a40
 800164c:	24000008 	.word	0x24000008
 8001650:	08010a5c 	.word	0x08010a5c

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001658:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800165a:	e003      	b.n	8001664 <LoopCopyDataInit>

0800165c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800165e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001660:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001662:	3104      	adds	r1, #4

08001664 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001668:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800166a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800166c:	d3f6      	bcc.n	800165c <CopyDataInit>
  ldr  r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001670:	e002      	b.n	8001678 <LoopFillZerobss>

08001672 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001672:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001674:	f842 3b04 	str.w	r3, [r2], #4

08001678 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800167a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800167c:	d3f9      	bcc.n	8001672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800167e:	f7ff fd1f 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f00e f90d 	bl	800f8a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff facf 	bl	8000c28 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001690:	08011538 	.word	0x08011538
  ldr  r0, =_sdata
 8001694:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001698:	24000084 	.word	0x24000084
  ldr  r2, =_sbss
 800169c:	24000084 	.word	0x24000084
  ldr  r3, = _ebss
 80016a0:	24000b24 	.word	0x24000b24

080016a4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC3_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f9a9 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b2:	f004 fe4b 	bl	800634c <HAL_RCC_GetSysClockFreq>
 80016b6:	4601      	mov	r1, r0
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_Init+0x60>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <HAL_Init+0x64>)
 80016c4:	5cd3      	ldrb	r3, [r2, r3]
 80016c6:	f003 031f 	and.w	r3, r3, #31
 80016ca:	fa21 f303 	lsr.w	r3, r1, r3
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_Init+0x68>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_Init+0x68>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_Init+0x60>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	490b      	ldr	r1, [pc, #44]	; (800170c <HAL_Init+0x64>)
 80016e0:	5ccb      	ldrb	r3, [r1, r3]
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_Init+0x6c>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f812 	bl	8001718 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e002      	b.n	8001704 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016fe:	f7ff fbe9 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	58024400 	.word	0x58024400
 800170c:	08011118 	.word	0x08011118
 8001710:	24000000 	.word	0x24000000
 8001714:	24000004 	.word	0x24000004

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_InitTick+0x60>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e021      	b.n	8001770 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_InitTick+0x64>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_InitTick+0x60>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f9d8 	bl	8001af8 <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f970 	bl	8001a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x68>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	24000018 	.word	0x24000018
 800177c:	24000000 	.word	0x24000000
 8001780:	24000014 	.word	0x24000014

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	24000018 	.word	0x24000018
 80017a8:	240009ac 	.word	0x240009ac

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	240009ac 	.word	0x240009ac

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_Delay+0x40>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	24000018 	.word	0x24000018

08001808 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetREVID+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0c1b      	lsrs	r3, r3, #16
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	5c001000 	.word	0x5c001000

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <__NVIC_SetPriorityGrouping+0x40>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	4313      	orrs	r3, r2
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x40>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00
 8001864:	05fa0000 	.word	0x05fa0000

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db10      	blt.n	80018f4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4909      	ldr	r1, [pc, #36]	; (8001900 <__NVIC_DisableIRQ+0x40>)
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	3320      	adds	r3, #32
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b07      	cmp	r3, #7
 8001a10:	d00f      	beq.n	8001a32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b06      	cmp	r3, #6
 8001a16:	d00c      	beq.n	8001a32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d009      	beq.n	8001a32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d006      	beq.n	8001a32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d003      	beq.n	8001a32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a2a:	2192      	movs	r1, #146	; 0x92
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001a2e:	f7ff fa39 	bl	8000ea4 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fef4 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	08010a74 	.word	0x08010a74

08001a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d903      	bls.n	8001a60 <HAL_NVIC_SetPriority+0x1c>
 8001a58:	21aa      	movs	r1, #170	; 0xaa
 8001a5a:	480e      	ldr	r0, [pc, #56]	; (8001a94 <HAL_NVIC_SetPriority+0x50>)
 8001a5c:	f7ff fa22 	bl	8000ea4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	d903      	bls.n	8001a6e <HAL_NVIC_SetPriority+0x2a>
 8001a66:	21ab      	movs	r1, #171	; 0xab
 8001a68:	480a      	ldr	r0, [pc, #40]	; (8001a94 <HAL_NVIC_SetPriority+0x50>)
 8001a6a:	f7ff fa1b 	bl	8000ea4 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6e:	f7ff fefb 	bl	8001868 <__NVIC_GetPriorityGrouping>
 8001a72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	6978      	ldr	r0, [r7, #20]
 8001a7a:	f7ff ff6d 	bl	8001958 <NVIC_EncodePriority>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff3c 	bl	8001904 <__NVIC_SetPriority>
}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	08010a74 	.word	0x08010a74

08001a98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da03      	bge.n	8001ab2 <HAL_NVIC_EnableIRQ+0x1a>
 8001aaa:	21be      	movs	r1, #190	; 0xbe
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_NVIC_EnableIRQ+0x2c>)
 8001aae:	f7ff f9f9 	bl	8000ea4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fee4 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	08010a74 	.word	0x08010a74

08001ac8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da03      	bge.n	8001ae2 <HAL_NVIC_DisableIRQ+0x1a>
 8001ada:	21ce      	movs	r1, #206	; 0xce
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_NVIC_DisableIRQ+0x2c>)
 8001ade:	f7ff f9e1 	bl	8000ea4 <assert_failed>

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff feea 	bl	80018c0 <__NVIC_DisableIRQ>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	08010a74 	.word	0x08010a74

08001af8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff5d 	bl	80019c0 <SysTick_Config>
 8001b06:	4603      	mov	r3, r0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e10e      	b.n	8001d40 <HAL_DCMI_Init+0x230>
  }

  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a88      	ldr	r2, [pc, #544]	; (8001d48 <HAL_DCMI_Init+0x238>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d003      	beq.n	8001b34 <HAL_DCMI_Init+0x24>
 8001b2c:	21b6      	movs	r1, #182	; 0xb6
 8001b2e:	4887      	ldr	r0, [pc, #540]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001b30:	f7ff f9b8 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_DCMI_Init+0x3c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d003      	beq.n	8001b4c <HAL_DCMI_Init+0x3c>
 8001b44:	21b7      	movs	r1, #183	; 0xb7
 8001b46:	4881      	ldr	r0, [pc, #516]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001b48:	f7ff f9ac 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <HAL_DCMI_Init+0x54>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b80      	cmp	r3, #128	; 0x80
 8001b5a:	d003      	beq.n	8001b64 <HAL_DCMI_Init+0x54>
 8001b5c:	21b8      	movs	r1, #184	; 0xb8
 8001b5e:	487b      	ldr	r0, [pc, #492]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001b60:	f7ff f9a0 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_DCMI_Init+0x6c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d003      	beq.n	8001b7c <HAL_DCMI_Init+0x6c>
 8001b74:	21b9      	movs	r1, #185	; 0xb9
 8001b76:	4875      	ldr	r0, [pc, #468]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001b78:	f7ff f994 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_DCMI_Init+0x84>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b10      	cmp	r3, #16
 8001b8a:	d003      	beq.n	8001b94 <HAL_DCMI_Init+0x84>
 8001b8c:	21ba      	movs	r1, #186	; 0xba
 8001b8e:	486f      	ldr	r0, [pc, #444]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001b90:	f7ff f988 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_DCMI_Init+0xa8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba4:	d008      	beq.n	8001bb8 <HAL_DCMI_Init+0xa8>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bae:	d003      	beq.n	8001bb8 <HAL_DCMI_Init+0xa8>
 8001bb0:	21bb      	movs	r1, #187	; 0xbb
 8001bb2:	4866      	ldr	r0, [pc, #408]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001bb4:	f7ff f976 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <HAL_DCMI_Init+0xd6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc8:	d00d      	beq.n	8001be6 <HAL_DCMI_Init+0xd6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd2:	d008      	beq.n	8001be6 <HAL_DCMI_Init+0xd6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001bdc:	d003      	beq.n	8001be6 <HAL_DCMI_Init+0xd6>
 8001bde:	21bc      	movs	r1, #188	; 0xbc
 8001be0:	485a      	ldr	r0, [pc, #360]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001be2:	f7ff f95f 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_DCMI_Init+0xee>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d003      	beq.n	8001bfe <HAL_DCMI_Init+0xee>
 8001bf6:	21bd      	movs	r1, #189	; 0xbd
 8001bf8:	4854      	ldr	r0, [pc, #336]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001bfa:	f7ff f953 	bl	8000ea4 <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d012      	beq.n	8001c2c <HAL_DCMI_Init+0x11c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0e:	d00d      	beq.n	8001c2c <HAL_DCMI_Init+0x11c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c18:	d008      	beq.n	8001c2c <HAL_DCMI_Init+0x11c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c22:	d003      	beq.n	8001c2c <HAL_DCMI_Init+0x11c>
 8001c24:	21bf      	movs	r1, #191	; 0xbf
 8001c26:	4849      	ldr	r0, [pc, #292]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001c28:	f7ff f93c 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_DCMI_Init+0x136>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c3c:	d003      	beq.n	8001c46 <HAL_DCMI_Init+0x136>
 8001c3e:	21c0      	movs	r1, #192	; 0xc0
 8001c40:	4842      	ldr	r0, [pc, #264]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001c42:	f7ff f92f 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_DCMI_Init+0x150>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c56:	d003      	beq.n	8001c60 <HAL_DCMI_Init+0x150>
 8001c58:	21c1      	movs	r1, #193	; 0xc1
 8001c5a:	483c      	ldr	r0, [pc, #240]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001c5c:	f7ff f922 	bl	8000ea4 <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_DCMI_Init+0x16a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c70:	d003      	beq.n	8001c7a <HAL_DCMI_Init+0x16a>
 8001c72:	21c2      	movs	r1, #194	; 0xc2
 8001c74:	4835      	ldr	r0, [pc, #212]	; (8001d4c <HAL_DCMI_Init+0x23c>)
 8001c76:	f7ff f915 	bl	8000ea4 <assert_failed>
    /* Init the low level hardware */
    hdcmi->MspInitCallback(hdcmi);
  }

#else
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <HAL_DCMI_Init+0x17c>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe fd30 	bl	80006ec <HAL_DCMI_MspInit>
  }
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_DCMI_Init+0x240>)
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001cb8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001cc4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001cd0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001cdc:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ce8:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d112      	bne.n	8001d20 <HAL_DCMI_Init+0x210>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7f1b      	ldrb	r3, [r3, #28]
 8001cfe:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7f5b      	ldrb	r3, [r3, #29]
 8001d04:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001d06:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7f9b      	ldrb	r3, [r3, #30]
 8001d0c:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001d0e:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7fdb      	ldrb	r3, [r3, #31]
 8001d16:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001d1c:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001d1e:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 021e 	orr.w	r2, r2, #30
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	48020000 	.word	0x48020000
 8001d4c:	08010ab0 	.word	0x08010ab0
 8001d50:	ffe0f007 	.word	0xffe0f007

08001d54 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d016      	beq.n	8001d9c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2204      	movs	r2, #4
 8001d74:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f043 0202 	orr.w	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2204      	movs	r2, #4
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8e:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <HAL_DCMI_IRQHandler+0x100>)
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fc8e 	bl	80026b8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d016      	beq.n	8001dd4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_DCMI_IRQHandler+0x100>)
 8001dc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fc72 	bl	80026b8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2210      	movs	r2, #16
 8001de4:	615a      	str	r2, [r3, #20]

    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f840 	bl	8001e6c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	615a      	str	r2, [r3, #20]

    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f83e 	bl	8001e80 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01d      	beq.n	8001e4a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d107      	bne.n	8001e2c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 021e 	bic.w	r2, r2, #30
 8001e2a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	615a      	str	r2, [r3, #20]

    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f825 	bl	8001e94 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08001ea9 	.word	0x08001ea9

08001e58 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	60fb      	str	r3, [r7, #12]

  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d009      	beq.n	8001ed4 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff ffbf 	bl	8001e58 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fc5e 	bl	80017ac <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e3d8      	b.n	80026ae <HAL_DMA_Init+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a96      	ldr	r2, [pc, #600]	; (800215c <HAL_DMA_Init+0x278>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d076      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a95      	ldr	r2, [pc, #596]	; (8002160 <HAL_DMA_Init+0x27c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d071      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a93      	ldr	r2, [pc, #588]	; (8002164 <HAL_DMA_Init+0x280>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d06c      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a92      	ldr	r2, [pc, #584]	; (8002168 <HAL_DMA_Init+0x284>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d067      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a90      	ldr	r2, [pc, #576]	; (800216c <HAL_DMA_Init+0x288>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d062      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a8f      	ldr	r2, [pc, #572]	; (8002170 <HAL_DMA_Init+0x28c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d05d      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a8d      	ldr	r2, [pc, #564]	; (8002174 <HAL_DMA_Init+0x290>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d058      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a8c      	ldr	r2, [pc, #560]	; (8002178 <HAL_DMA_Init+0x294>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d053      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a8a      	ldr	r2, [pc, #552]	; (800217c <HAL_DMA_Init+0x298>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d04e      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a89      	ldr	r2, [pc, #548]	; (8002180 <HAL_DMA_Init+0x29c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d049      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a87      	ldr	r2, [pc, #540]	; (8002184 <HAL_DMA_Init+0x2a0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d044      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a86      	ldr	r2, [pc, #536]	; (8002188 <HAL_DMA_Init+0x2a4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d03f      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a84      	ldr	r2, [pc, #528]	; (800218c <HAL_DMA_Init+0x2a8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03a      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a83      	ldr	r2, [pc, #524]	; (8002190 <HAL_DMA_Init+0x2ac>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d035      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a81      	ldr	r2, [pc, #516]	; (8002194 <HAL_DMA_Init+0x2b0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d030      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a80      	ldr	r2, [pc, #512]	; (8002198 <HAL_DMA_Init+0x2b4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02b      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a7e      	ldr	r2, [pc, #504]	; (800219c <HAL_DMA_Init+0x2b8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d026      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a7d      	ldr	r2, [pc, #500]	; (80021a0 <HAL_DMA_Init+0x2bc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d021      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a7b      	ldr	r2, [pc, #492]	; (80021a4 <HAL_DMA_Init+0x2c0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01c      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7a      	ldr	r2, [pc, #488]	; (80021a8 <HAL_DMA_Init+0x2c4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d017      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a78      	ldr	r2, [pc, #480]	; (80021ac <HAL_DMA_Init+0x2c8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d012      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a77      	ldr	r2, [pc, #476]	; (80021b0 <HAL_DMA_Init+0x2cc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_DMA_Init+0x2d0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d008      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a74      	ldr	r2, [pc, #464]	; (80021b8 <HAL_DMA_Init+0x2d4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_Init+0x110>
 8001fec:	21d4      	movs	r1, #212	; 0xd4
 8001fee:	4873      	ldr	r0, [pc, #460]	; (80021bc <HAL_DMA_Init+0x2d8>)
 8001ff0:	f7fe ff58 	bl	8000ea4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_DMA_Init+0x130>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b40      	cmp	r3, #64	; 0x40
 8002002:	d007      	beq.n	8002014 <HAL_DMA_Init+0x130>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d003      	beq.n	8002014 <HAL_DMA_Init+0x130>
 800200c:	21d5      	movs	r1, #213	; 0xd5
 800200e:	486b      	ldr	r0, [pc, #428]	; (80021bc <HAL_DMA_Init+0x2d8>)
 8002010:	f7fe ff48 	bl	8000ea4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800201c:	d007      	beq.n	800202e <HAL_DMA_Init+0x14a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_DMA_Init+0x14a>
 8002026:	21d6      	movs	r1, #214	; 0xd6
 8002028:	4864      	ldr	r0, [pc, #400]	; (80021bc <HAL_DMA_Init+0x2d8>)
 800202a:	f7fe ff3b 	bl	8000ea4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Init+0x164>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_DMA_Init+0x164>
 8002040:	21d7      	movs	r1, #215	; 0xd7
 8002042:	485e      	ldr	r0, [pc, #376]	; (80021bc <HAL_DMA_Init+0x2d8>)
 8002044:	f7fe ff2e 	bl	8000ea4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00d      	beq.n	800206c <HAL_DMA_Init+0x188>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002058:	d008      	beq.n	800206c <HAL_DMA_Init+0x188>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002062:	d003      	beq.n	800206c <HAL_DMA_Init+0x188>
 8002064:	21d8      	movs	r1, #216	; 0xd8
 8002066:	4855      	ldr	r0, [pc, #340]	; (80021bc <HAL_DMA_Init+0x2d8>)
 8002068:	f7fe ff1c 	bl	8000ea4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_DMA_Init+0x1ac>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207c:	d008      	beq.n	8002090 <HAL_DMA_Init+0x1ac>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002086:	d003      	beq.n	8002090 <HAL_DMA_Init+0x1ac>
 8002088:	21d9      	movs	r1, #217	; 0xd9
 800208a:	484c      	ldr	r0, [pc, #304]	; (80021bc <HAL_DMA_Init+0x2d8>)
 800208c:	f7fe ff0a 	bl	8000ea4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d016      	beq.n	80020c6 <HAL_DMA_Init+0x1e2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a0:	d011      	beq.n	80020c6 <HAL_DMA_Init+0x1e2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d00d      	beq.n	80020c6 <HAL_DMA_Init+0x1e2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Init+0x1e2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020bc:	d003      	beq.n	80020c6 <HAL_DMA_Init+0x1e2>
 80020be:	21da      	movs	r1, #218	; 0xda
 80020c0:	483e      	ldr	r0, [pc, #248]	; (80021bc <HAL_DMA_Init+0x2d8>)
 80020c2:	f7fe feef 	bl	8000ea4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d012      	beq.n	80020f4 <HAL_DMA_Init+0x210>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d00d      	beq.n	80020f4 <HAL_DMA_Init+0x210>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020e0:	d008      	beq.n	80020f4 <HAL_DMA_Init+0x210>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020ea:	d003      	beq.n	80020f4 <HAL_DMA_Init+0x210>
 80020ec:	21db      	movs	r1, #219	; 0xdb
 80020ee:	4833      	ldr	r0, [pc, #204]	; (80021bc <HAL_DMA_Init+0x2d8>)
 80020f0:	f7fe fed8 	bl	8000ea4 <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_DMA_Init+0x278>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d07e      	beq.n	80021fc <HAL_DMA_Init+0x318>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_DMA_Init+0x27c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d079      	beq.n	80021fc <HAL_DMA_Init+0x318>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <HAL_DMA_Init+0x280>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d074      	beq.n	80021fc <HAL_DMA_Init+0x318>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_DMA_Init+0x284>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d06f      	beq.n	80021fc <HAL_DMA_Init+0x318>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_DMA_Init+0x288>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d06a      	beq.n	80021fc <HAL_DMA_Init+0x318>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_DMA_Init+0x28c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d065      	beq.n	80021fc <HAL_DMA_Init+0x318>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_DMA_Init+0x290>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d060      	beq.n	80021fc <HAL_DMA_Init+0x318>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_DMA_Init+0x294>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d05b      	beq.n	80021fc <HAL_DMA_Init+0x318>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_DMA_Init+0x298>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d056      	beq.n	80021fc <HAL_DMA_Init+0x318>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_DMA_Init+0x29c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d051      	beq.n	80021fc <HAL_DMA_Init+0x318>
 8002158:	e032      	b.n	80021c0 <HAL_DMA_Init+0x2dc>
 800215a:	bf00      	nop
 800215c:	40020010 	.word	0x40020010
 8002160:	40020028 	.word	0x40020028
 8002164:	40020040 	.word	0x40020040
 8002168:	40020058 	.word	0x40020058
 800216c:	40020070 	.word	0x40020070
 8002170:	40020088 	.word	0x40020088
 8002174:	400200a0 	.word	0x400200a0
 8002178:	400200b8 	.word	0x400200b8
 800217c:	40020410 	.word	0x40020410
 8002180:	40020428 	.word	0x40020428
 8002184:	40020440 	.word	0x40020440
 8002188:	40020458 	.word	0x40020458
 800218c:	40020470 	.word	0x40020470
 8002190:	40020488 	.word	0x40020488
 8002194:	400204a0 	.word	0x400204a0
 8002198:	400204b8 	.word	0x400204b8
 800219c:	58025408 	.word	0x58025408
 80021a0:	5802541c 	.word	0x5802541c
 80021a4:	58025430 	.word	0x58025430
 80021a8:	58025444 	.word	0x58025444
 80021ac:	58025458 	.word	0x58025458
 80021b0:	5802546c 	.word	0x5802546c
 80021b4:	58025480 	.word	0x58025480
 80021b8:	58025494 	.word	0x58025494
 80021bc:	08010aec 	.word	0x08010aec
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a7a      	ldr	r2, [pc, #488]	; (80023b0 <HAL_DMA_Init+0x4cc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d018      	beq.n	80021fc <HAL_DMA_Init+0x318>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a79      	ldr	r2, [pc, #484]	; (80023b4 <HAL_DMA_Init+0x4d0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d013      	beq.n	80021fc <HAL_DMA_Init+0x318>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a77      	ldr	r2, [pc, #476]	; (80023b8 <HAL_DMA_Init+0x4d4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00e      	beq.n	80021fc <HAL_DMA_Init+0x318>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a76      	ldr	r2, [pc, #472]	; (80023bc <HAL_DMA_Init+0x4d8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d009      	beq.n	80021fc <HAL_DMA_Init+0x318>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a74      	ldr	r2, [pc, #464]	; (80023c0 <HAL_DMA_Init+0x4dc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_DMA_Init+0x318>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a73      	ldr	r2, [pc, #460]	; (80023c4 <HAL_DMA_Init+0x4e0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_DMA_Init+0x31c>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_DMA_Init+0x31e>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8167 	beq.w	80024d6 <HAL_DMA_Init+0x5f2>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b73      	cmp	r3, #115	; 0x73
 800220e:	d903      	bls.n	8002218 <HAL_DMA_Init+0x334>
 8002210:	21df      	movs	r1, #223	; 0xdf
 8002212:	486d      	ldr	r0, [pc, #436]	; (80023c8 <HAL_DMA_Init+0x4e4>)
 8002214:	f7fe fe46 	bl	8000ea4 <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_DMA_Init+0x34c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2b04      	cmp	r3, #4
 8002226:	d003      	beq.n	8002230 <HAL_DMA_Init+0x34c>
 8002228:	21e0      	movs	r1, #224	; 0xe0
 800222a:	4867      	ldr	r0, [pc, #412]	; (80023c8 <HAL_DMA_Init+0x4e4>)
 800222c:	f7fe fe3a 	bl	8000ea4 <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d041      	beq.n	80022bc <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00f      	beq.n	8002260 <HAL_DMA_Init+0x37c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	2b01      	cmp	r3, #1
 8002246:	d00b      	beq.n	8002260 <HAL_DMA_Init+0x37c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	2b02      	cmp	r3, #2
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Init+0x37c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	2b03      	cmp	r3, #3
 8002256:	d003      	beq.n	8002260 <HAL_DMA_Init+0x37c>
 8002258:	21e5      	movs	r1, #229	; 0xe5
 800225a:	485b      	ldr	r0, [pc, #364]	; (80023c8 <HAL_DMA_Init+0x4e4>)
 800225c:	f7fe fe22 	bl	8000ea4 <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d012      	beq.n	800228e <HAL_DMA_Init+0x3aa>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002270:	d00d      	beq.n	800228e <HAL_DMA_Init+0x3aa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227a:	d008      	beq.n	800228e <HAL_DMA_Init+0x3aa>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002284:	d003      	beq.n	800228e <HAL_DMA_Init+0x3aa>
 8002286:	21e6      	movs	r1, #230	; 0xe6
 8002288:	484f      	ldr	r0, [pc, #316]	; (80023c8 <HAL_DMA_Init+0x4e4>)
 800228a:	f7fe fe0b 	bl	8000ea4 <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	2b00      	cmp	r3, #0
 8002294:	d012      	beq.n	80022bc <HAL_DMA_Init+0x3d8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800229e:	d00d      	beq.n	80022bc <HAL_DMA_Init+0x3d8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a8:	d008      	beq.n	80022bc <HAL_DMA_Init+0x3d8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022b2:	d003      	beq.n	80022bc <HAL_DMA_Init+0x3d8>
 80022b4:	21e7      	movs	r1, #231	; 0xe7
 80022b6:	4844      	ldr	r0, [pc, #272]	; (80023c8 <HAL_DMA_Init+0x4e4>)
 80022b8:	f7fe fdf4 	bl	8000ea4 <assert_failed>
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a3e      	ldr	r2, [pc, #248]	; (80023cc <HAL_DMA_Init+0x4e8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d04a      	beq.n	800236c <HAL_DMA_Init+0x488>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a3d      	ldr	r2, [pc, #244]	; (80023d0 <HAL_DMA_Init+0x4ec>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d045      	beq.n	800236c <HAL_DMA_Init+0x488>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a3b      	ldr	r2, [pc, #236]	; (80023d4 <HAL_DMA_Init+0x4f0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d040      	beq.n	800236c <HAL_DMA_Init+0x488>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <HAL_DMA_Init+0x4f4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d03b      	beq.n	800236c <HAL_DMA_Init+0x488>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a38      	ldr	r2, [pc, #224]	; (80023dc <HAL_DMA_Init+0x4f8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d036      	beq.n	800236c <HAL_DMA_Init+0x488>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_DMA_Init+0x4fc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d031      	beq.n	800236c <HAL_DMA_Init+0x488>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <HAL_DMA_Init+0x500>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d02c      	beq.n	800236c <HAL_DMA_Init+0x488>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a34      	ldr	r2, [pc, #208]	; (80023e8 <HAL_DMA_Init+0x504>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d027      	beq.n	800236c <HAL_DMA_Init+0x488>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a32      	ldr	r2, [pc, #200]	; (80023ec <HAL_DMA_Init+0x508>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d022      	beq.n	800236c <HAL_DMA_Init+0x488>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <HAL_DMA_Init+0x50c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d01d      	beq.n	800236c <HAL_DMA_Init+0x488>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_DMA_Init+0x4cc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d018      	beq.n	800236c <HAL_DMA_Init+0x488>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_DMA_Init+0x4d0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_DMA_Init+0x488>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_DMA_Init+0x4d4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00e      	beq.n	800236c <HAL_DMA_Init+0x488>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_DMA_Init+0x4d8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d009      	beq.n	800236c <HAL_DMA_Init+0x488>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_DMA_Init+0x4dc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_DMA_Init+0x488>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_DMA_Init+0x4e0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d108      	bne.n	800237e <HAL_DMA_Init+0x49a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e007      	b.n	800238e <HAL_DMA_Init+0x4aa>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800238e:	e031      	b.n	80023f4 <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002390:	f7ff fa0c 	bl	80017ac <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b05      	cmp	r3, #5
 800239c:	d92a      	bls.n	80023f4 <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2203      	movs	r2, #3
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e17e      	b.n	80026ae <HAL_DMA_Init+0x7ca>
 80023b0:	40020440 	.word	0x40020440
 80023b4:	40020458 	.word	0x40020458
 80023b8:	40020470 	.word	0x40020470
 80023bc:	40020488 	.word	0x40020488
 80023c0:	400204a0 	.word	0x400204a0
 80023c4:	400204b8 	.word	0x400204b8
 80023c8:	08010aec 	.word	0x08010aec
 80023cc:	40020010 	.word	0x40020010
 80023d0:	40020028 	.word	0x40020028
 80023d4:	40020040 	.word	0x40020040
 80023d8:	40020058 	.word	0x40020058
 80023dc:	40020070 	.word	0x40020070
 80023e0:	40020088 	.word	0x40020088
 80023e4:	400200a0 	.word	0x400200a0
 80023e8:	400200b8 	.word	0x400200b8
 80023ec:	40020410 	.word	0x40020410
 80023f0:	40020428 	.word	0x40020428
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1c6      	bne.n	8002390 <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4b92      	ldr	r3, [pc, #584]	; (8002658 <HAL_DMA_Init+0x774>)
 800240e:	4013      	ands	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800241a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2b04      	cmp	r3, #4
 8002446:	d107      	bne.n	8002458 <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4313      	orrs	r3, r2
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f023 0307 	bic.w	r3, r3, #7
 800246e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	2b04      	cmp	r3, #4
 8002480:	d117      	bne.n	80024b2 <HAL_DMA_Init+0x5ce>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <HAL_DMA_Init+0x5ce>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f001 fa81 	bl	800399c <DMA_CheckFifoParam>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_DMA_Init+0x5ce>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0fd      	b.n	80026ae <HAL_DMA_Init+0x7ca>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f001 f9bc 	bl	8003838 <DMA_CalcBaseAndBitshift>
 80024c0:	4603      	mov	r3, r0
 80024c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	223f      	movs	r2, #63	; 0x3f
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e095      	b.n	8002602 <HAL_DMA_Init+0x71e>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a60      	ldr	r2, [pc, #384]	; (800265c <HAL_DMA_Init+0x778>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <HAL_DMA_Init+0x642>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5e      	ldr	r2, [pc, #376]	; (8002660 <HAL_DMA_Init+0x77c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01d      	beq.n	8002526 <HAL_DMA_Init+0x642>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <HAL_DMA_Init+0x780>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d018      	beq.n	8002526 <HAL_DMA_Init+0x642>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a5b      	ldr	r2, [pc, #364]	; (8002668 <HAL_DMA_Init+0x784>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_DMA_Init+0x642>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a5a      	ldr	r2, [pc, #360]	; (800266c <HAL_DMA_Init+0x788>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00e      	beq.n	8002526 <HAL_DMA_Init+0x642>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a58      	ldr	r2, [pc, #352]	; (8002670 <HAL_DMA_Init+0x78c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_DMA_Init+0x642>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a57      	ldr	r2, [pc, #348]	; (8002674 <HAL_DMA_Init+0x790>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_DMA_Init+0x642>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a55      	ldr	r2, [pc, #340]	; (8002678 <HAL_DMA_Init+0x794>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d101      	bne.n	800252a <HAL_DMA_Init+0x646>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_DMA_Init+0x648>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05f      	beq.n	80025f0 <HAL_DMA_Init+0x70c>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b11      	cmp	r3, #17
 8002536:	d904      	bls.n	8002542 <HAL_DMA_Init+0x65e>
 8002538:	f240 1149 	movw	r1, #329	; 0x149
 800253c:	484f      	ldr	r0, [pc, #316]	; (800267c <HAL_DMA_Init+0x798>)
 800253e:	f7fe fcb1 	bl	8000ea4 <assert_failed>

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <HAL_DMA_Init+0x79c>)
 800255e:	4013      	ands	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d008      	beq.n	800257c <HAL_DMA_Init+0x698>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b80      	cmp	r3, #128	; 0x80
 8002570:	d102      	bne.n	8002578 <HAL_DMA_Init+0x694>
 8002572:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002576:	e002      	b.n	800257e <HAL_DMA_Init+0x69a>
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_DMA_Init+0x69a>
 800257c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 800258c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002594:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 800259c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 80025a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 80025ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_DMA_Init+0x7a0>)
 80025c4:	4413      	add	r3, r2
 80025c6:	4a30      	ldr	r2, [pc, #192]	; (8002688 <HAL_DMA_Init+0x7a4>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	009a      	lsls	r2, r3, #2
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f001 f92f 	bl	8003838 <DMA_CalcBaseAndBitshift>
 80025da:	4603      	mov	r3, r0
 80025dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2201      	movs	r2, #1
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e008      	b.n	8002602 <HAL_DMA_Init+0x71e>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e055      	b.n	80026ae <HAL_DMA_Init+0x7ca>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f001 fa46 	bl	8003a94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d102      	bne.n	8002616 <HAL_DMA_Init+0x732>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800262a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d02b      	beq.n	800268c <HAL_DMA_Init+0x7a8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d827      	bhi.n	800268c <HAL_DMA_Init+0x7a8>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f001 fac3 	bl	8003bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	e023      	b.n	800269e <HAL_DMA_Init+0x7ba>
 8002656:	bf00      	nop
 8002658:	fe10803f 	.word	0xfe10803f
 800265c:	58025408 	.word	0x58025408
 8002660:	5802541c 	.word	0x5802541c
 8002664:	58025430 	.word	0x58025430
 8002668:	58025444 	.word	0x58025444
 800266c:	58025458 	.word	0x58025458
 8002670:	5802546c 	.word	0x5802546c
 8002674:	58025480 	.word	0x58025480
 8002678:	58025494 	.word	0x58025494
 800267c:	08010aec 	.word	0x08010aec
 8002680:	fffe000f 	.word	0xfffe000f
 8002684:	a7fdabf8 	.word	0xa7fdabf8
 8002688:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop

080026b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e188      	b.n	80029dc <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d004      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e17d      	b.n	80029dc <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a8c      	ldr	r2, [pc, #560]	; (8002918 <HAL_DMA_Abort_IT+0x260>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d04a      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a8b      	ldr	r2, [pc, #556]	; (800291c <HAL_DMA_Abort_IT+0x264>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d045      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a89      	ldr	r2, [pc, #548]	; (8002920 <HAL_DMA_Abort_IT+0x268>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d040      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a88      	ldr	r2, [pc, #544]	; (8002924 <HAL_DMA_Abort_IT+0x26c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d03b      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a86      	ldr	r2, [pc, #536]	; (8002928 <HAL_DMA_Abort_IT+0x270>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d036      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a85      	ldr	r2, [pc, #532]	; (800292c <HAL_DMA_Abort_IT+0x274>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d031      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a83      	ldr	r2, [pc, #524]	; (8002930 <HAL_DMA_Abort_IT+0x278>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02c      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a82      	ldr	r2, [pc, #520]	; (8002934 <HAL_DMA_Abort_IT+0x27c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d027      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a80      	ldr	r2, [pc, #512]	; (8002938 <HAL_DMA_Abort_IT+0x280>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d022      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7f      	ldr	r2, [pc, #508]	; (800293c <HAL_DMA_Abort_IT+0x284>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d01d      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a7d      	ldr	r2, [pc, #500]	; (8002940 <HAL_DMA_Abort_IT+0x288>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d018      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7c      	ldr	r2, [pc, #496]	; (8002944 <HAL_DMA_Abort_IT+0x28c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d013      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a7a      	ldr	r2, [pc, #488]	; (8002948 <HAL_DMA_Abort_IT+0x290>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00e      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a79      	ldr	r2, [pc, #484]	; (800294c <HAL_DMA_Abort_IT+0x294>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a77      	ldr	r2, [pc, #476]	; (8002950 <HAL_DMA_Abort_IT+0x298>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a76      	ldr	r2, [pc, #472]	; (8002954 <HAL_DMA_Abort_IT+0x29c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_DMA_Abort_IT+0xcc>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_DMA_Abort_IT+0xce>
 8002784:	2300      	movs	r3, #0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d065      	beq.n	8002856 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a60      	ldr	r2, [pc, #384]	; (8002918 <HAL_DMA_Abort_IT+0x260>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d04a      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5e      	ldr	r2, [pc, #376]	; (800291c <HAL_DMA_Abort_IT+0x264>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d045      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5d      	ldr	r2, [pc, #372]	; (8002920 <HAL_DMA_Abort_IT+0x268>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d040      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5b      	ldr	r2, [pc, #364]	; (8002924 <HAL_DMA_Abort_IT+0x26c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d03b      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5a      	ldr	r2, [pc, #360]	; (8002928 <HAL_DMA_Abort_IT+0x270>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d036      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_DMA_Abort_IT+0x274>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d031      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a57      	ldr	r2, [pc, #348]	; (8002930 <HAL_DMA_Abort_IT+0x278>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d02c      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a55      	ldr	r2, [pc, #340]	; (8002934 <HAL_DMA_Abort_IT+0x27c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d027      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_DMA_Abort_IT+0x280>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d022      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_DMA_Abort_IT+0x284>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01d      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a51      	ldr	r2, [pc, #324]	; (8002940 <HAL_DMA_Abort_IT+0x288>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d018      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4f      	ldr	r2, [pc, #316]	; (8002944 <HAL_DMA_Abort_IT+0x28c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a4e      	ldr	r2, [pc, #312]	; (8002948 <HAL_DMA_Abort_IT+0x290>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00e      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_DMA_Abort_IT+0x294>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d009      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <HAL_DMA_Abort_IT+0x298>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_DMA_Abort_IT+0x17a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a49      	ldr	r2, [pc, #292]	; (8002954 <HAL_DMA_Abort_IT+0x29c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d108      	bne.n	8002844 <HAL_DMA_Abort_IT+0x18c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0201 	bic.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e0ca      	b.n	80029da <HAL_DMA_Abort_IT+0x322>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e0c1      	b.n	80029da <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 020e 	bic.w	r2, r2, #14
 8002864:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <HAL_DMA_Abort_IT+0x260>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04a      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a29      	ldr	r2, [pc, #164]	; (800291c <HAL_DMA_Abort_IT+0x264>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d045      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a28      	ldr	r2, [pc, #160]	; (8002920 <HAL_DMA_Abort_IT+0x268>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d040      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a26      	ldr	r2, [pc, #152]	; (8002924 <HAL_DMA_Abort_IT+0x26c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d03b      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a25      	ldr	r2, [pc, #148]	; (8002928 <HAL_DMA_Abort_IT+0x270>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d036      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a23      	ldr	r2, [pc, #140]	; (800292c <HAL_DMA_Abort_IT+0x274>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d031      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a22      	ldr	r2, [pc, #136]	; (8002930 <HAL_DMA_Abort_IT+0x278>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d02c      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_DMA_Abort_IT+0x27c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d027      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HAL_DMA_Abort_IT+0x280>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <HAL_DMA_Abort_IT+0x284>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01d      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_DMA_Abort_IT+0x288>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_DMA_Abort_IT+0x28c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_DMA_Abort_IT+0x290>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00e      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_DMA_Abort_IT+0x294>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_DMA_Abort_IT+0x298>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_Abort_IT+0x24e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_DMA_Abort_IT+0x29c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d128      	bne.n	8002958 <HAL_DMA_Abort_IT+0x2a0>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e027      	b.n	8002968 <HAL_DMA_Abort_IT+0x2b0>
 8002918:	40020010 	.word	0x40020010
 800291c:	40020028 	.word	0x40020028
 8002920:	40020040 	.word	0x40020040
 8002924:	40020058 	.word	0x40020058
 8002928:	40020070 	.word	0x40020070
 800292c:	40020088 	.word	0x40020088
 8002930:	400200a0 	.word	0x400200a0
 8002934:	400200b8 	.word	0x400200b8
 8002938:	40020410 	.word	0x40020410
 800293c:	40020428 	.word	0x40020428
 8002940:	40020440 	.word	0x40020440
 8002944:	40020458 	.word	0x40020458
 8002948:	40020470 	.word	0x40020470
 800294c:	40020488 	.word	0x40020488
 8002950:	400204a0 	.word	0x400204a0
 8002954:	400204b8 	.word	0x400204b8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002976:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	2201      	movs	r2, #1
 8002988:	409a      	lsls	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002996:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00c      	beq.n	80029ba <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ae:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029b8:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029f0:	4b67      	ldr	r3, [pc, #412]	; (8002b90 <HAL_DMA_IRQHandler+0x1ac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_DMA_IRQHandler+0x1b0>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0a9b      	lsrs	r3, r3, #10
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a5f      	ldr	r2, [pc, #380]	; (8002b98 <HAL_DMA_IRQHandler+0x1b4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d04a      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5d      	ldr	r2, [pc, #372]	; (8002b9c <HAL_DMA_IRQHandler+0x1b8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d045      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ba0 <HAL_DMA_IRQHandler+0x1bc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d040      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_DMA_IRQHandler+0x1c0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d03b      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a59      	ldr	r2, [pc, #356]	; (8002ba8 <HAL_DMA_IRQHandler+0x1c4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d036      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a57      	ldr	r2, [pc, #348]	; (8002bac <HAL_DMA_IRQHandler+0x1c8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d031      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a56      	ldr	r2, [pc, #344]	; (8002bb0 <HAL_DMA_IRQHandler+0x1cc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d02c      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <HAL_DMA_IRQHandler+0x1d0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d027      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a53      	ldr	r2, [pc, #332]	; (8002bb8 <HAL_DMA_IRQHandler+0x1d4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <HAL_DMA_IRQHandler+0x1d8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d01d      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a50      	ldr	r2, [pc, #320]	; (8002bc0 <HAL_DMA_IRQHandler+0x1dc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d018      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <HAL_DMA_IRQHandler+0x1e0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a4d      	ldr	r2, [pc, #308]	; (8002bc8 <HAL_DMA_IRQHandler+0x1e4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00e      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <HAL_DMA_IRQHandler+0x1e8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <HAL_DMA_IRQHandler+0x1ec>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xd2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a48      	ldr	r2, [pc, #288]	; (8002bd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_DMA_IRQHandler+0xd6>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_DMA_IRQHandler+0xd8>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 842b 	beq.w	8003318 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2208      	movs	r2, #8
 8002acc:	409a      	lsls	r2, r3
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80a2 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <HAL_DMA_IRQHandler+0x1b4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d04a      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2d      	ldr	r2, [pc, #180]	; (8002b9c <HAL_DMA_IRQHandler+0x1b8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d045      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_DMA_IRQHandler+0x1bc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d040      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <HAL_DMA_IRQHandler+0x1c0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d03b      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a28      	ldr	r2, [pc, #160]	; (8002ba8 <HAL_DMA_IRQHandler+0x1c4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d036      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_DMA_IRQHandler+0x1c8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d031      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <HAL_DMA_IRQHandler+0x1cc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d02c      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_DMA_IRQHandler+0x1d0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d027      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <HAL_DMA_IRQHandler+0x1d4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d022      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <HAL_DMA_IRQHandler+0x1d8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d01d      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_DMA_IRQHandler+0x1dc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d018      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <HAL_DMA_IRQHandler+0x1e0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d013      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <HAL_DMA_IRQHandler+0x1e4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00e      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <HAL_DMA_IRQHandler+0x1e8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d009      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_DMA_IRQHandler+0x1ec>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x194>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d12f      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x1f4>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e02e      	b.n	8002bec <HAL_DMA_IRQHandler+0x208>
 8002b8e:	bf00      	nop
 8002b90:	24000000 	.word	0x24000000
 8002b94:	1b4e81b5 	.word	0x1b4e81b5
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0204 	bic.w	r2, r2, #4
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2208      	movs	r2, #8
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d06e      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a69      	ldr	r2, [pc, #420]	; (8002ddc <HAL_DMA_IRQHandler+0x3f8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d04a      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a67      	ldr	r2, [pc, #412]	; (8002de0 <HAL_DMA_IRQHandler+0x3fc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d045      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a66      	ldr	r2, [pc, #408]	; (8002de4 <HAL_DMA_IRQHandler+0x400>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d040      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a64      	ldr	r2, [pc, #400]	; (8002de8 <HAL_DMA_IRQHandler+0x404>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d03b      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a63      	ldr	r2, [pc, #396]	; (8002dec <HAL_DMA_IRQHandler+0x408>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d036      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a61      	ldr	r2, [pc, #388]	; (8002df0 <HAL_DMA_IRQHandler+0x40c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d031      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a60      	ldr	r2, [pc, #384]	; (8002df4 <HAL_DMA_IRQHandler+0x410>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d02c      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <HAL_DMA_IRQHandler+0x414>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d027      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5d      	ldr	r2, [pc, #372]	; (8002dfc <HAL_DMA_IRQHandler+0x418>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a5b      	ldr	r2, [pc, #364]	; (8002e00 <HAL_DMA_IRQHandler+0x41c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01d      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a5a      	ldr	r2, [pc, #360]	; (8002e04 <HAL_DMA_IRQHandler+0x420>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d018      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_DMA_IRQHandler+0x424>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a57      	ldr	r2, [pc, #348]	; (8002e0c <HAL_DMA_IRQHandler+0x428>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_DMA_IRQHandler+0x42c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a54      	ldr	r2, [pc, #336]	; (8002e14 <HAL_DMA_IRQHandler+0x430>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x2ee>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_DMA_IRQHandler+0x434>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x304>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e003      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x30c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2204      	movs	r2, #4
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 808f 	beq.w	8002e44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2c      	ldr	r2, [pc, #176]	; (8002ddc <HAL_DMA_IRQHandler+0x3f8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d04a      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2a      	ldr	r2, [pc, #168]	; (8002de0 <HAL_DMA_IRQHandler+0x3fc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d045      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <HAL_DMA_IRQHandler+0x400>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d040      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_DMA_IRQHandler+0x404>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d03b      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_DMA_IRQHandler+0x408>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d036      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <HAL_DMA_IRQHandler+0x40c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d031      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_DMA_IRQHandler+0x410>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d02c      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <HAL_DMA_IRQHandler+0x414>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d027      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <HAL_DMA_IRQHandler+0x418>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_DMA_IRQHandler+0x41c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <HAL_DMA_IRQHandler+0x420>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_DMA_IRQHandler+0x424>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <HAL_DMA_IRQHandler+0x428>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_DMA_IRQHandler+0x42c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <HAL_DMA_IRQHandler+0x430>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x3e2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <HAL_DMA_IRQHandler+0x434>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d12a      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x438>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e023      	b.n	8002e24 <HAL_DMA_IRQHandler+0x440>
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	40020028 	.word	0x40020028
 8002de4:	40020040 	.word	0x40020040
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40020070 	.word	0x40020070
 8002df0:	40020088 	.word	0x40020088
 8002df4:	400200a0 	.word	0x400200a0
 8002df8:	400200b8 	.word	0x400200b8
 8002dfc:	40020410 	.word	0x40020410
 8002e00:	40020428 	.word	0x40020428
 8002e04:	40020440 	.word	0x40020440
 8002e08:	40020458 	.word	0x40020458
 8002e0c:	40020470 	.word	0x40020470
 8002e10:	40020488 	.word	0x40020488
 8002e14:	400204a0 	.word	0x400204a0
 8002e18:	400204b8 	.word	0x400204b8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2204      	movs	r2, #4
 8002e32:	409a      	lsls	r2, r3
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	f043 0204 	orr.w	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80a6 	beq.w	8002fa6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a85      	ldr	r2, [pc, #532]	; (8003074 <HAL_DMA_IRQHandler+0x690>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04a      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a83      	ldr	r2, [pc, #524]	; (8003078 <HAL_DMA_IRQHandler+0x694>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d045      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a82      	ldr	r2, [pc, #520]	; (800307c <HAL_DMA_IRQHandler+0x698>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d040      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a80      	ldr	r2, [pc, #512]	; (8003080 <HAL_DMA_IRQHandler+0x69c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d03b      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7f      	ldr	r2, [pc, #508]	; (8003084 <HAL_DMA_IRQHandler+0x6a0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d036      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a7d      	ldr	r2, [pc, #500]	; (8003088 <HAL_DMA_IRQHandler+0x6a4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d031      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7c      	ldr	r2, [pc, #496]	; (800308c <HAL_DMA_IRQHandler+0x6a8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d02c      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a7a      	ldr	r2, [pc, #488]	; (8003090 <HAL_DMA_IRQHandler+0x6ac>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d027      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a79      	ldr	r2, [pc, #484]	; (8003094 <HAL_DMA_IRQHandler+0x6b0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a77      	ldr	r2, [pc, #476]	; (8003098 <HAL_DMA_IRQHandler+0x6b4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01d      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a76      	ldr	r2, [pc, #472]	; (800309c <HAL_DMA_IRQHandler+0x6b8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a74      	ldr	r2, [pc, #464]	; (80030a0 <HAL_DMA_IRQHandler+0x6bc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a73      	ldr	r2, [pc, #460]	; (80030a4 <HAL_DMA_IRQHandler+0x6c0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a71      	ldr	r2, [pc, #452]	; (80030a8 <HAL_DMA_IRQHandler+0x6c4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a70      	ldr	r2, [pc, #448]	; (80030ac <HAL_DMA_IRQHandler+0x6c8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_DMA_IRQHandler+0x516>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_DMA_IRQHandler+0x6cc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10a      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x52c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e009      	b.n	8002f24 <HAL_DMA_IRQHandler+0x540>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03e      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2210      	movs	r2, #16
 8002f32:	409a      	lsls	r2, r3
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d018      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d108      	bne.n	8002f66 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d024      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
 8002f64:	e01f      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01b      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
 8002f76:	e016      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0208 	bic.w	r2, r2, #8
 8002f94:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2220      	movs	r2, #32
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8110 	beq.w	80031dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <HAL_DMA_IRQHandler+0x690>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d04a      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <HAL_DMA_IRQHandler+0x694>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d045      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a29      	ldr	r2, [pc, #164]	; (800307c <HAL_DMA_IRQHandler+0x698>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d040      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a28      	ldr	r2, [pc, #160]	; (8003080 <HAL_DMA_IRQHandler+0x69c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d03b      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a26      	ldr	r2, [pc, #152]	; (8003084 <HAL_DMA_IRQHandler+0x6a0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d036      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_DMA_IRQHandler+0x6a4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d031      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_DMA_IRQHandler+0x6a8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d02c      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a22      	ldr	r2, [pc, #136]	; (8003090 <HAL_DMA_IRQHandler+0x6ac>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d027      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <HAL_DMA_IRQHandler+0x6b0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d022      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_DMA_IRQHandler+0x6b4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d01d      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_DMA_IRQHandler+0x6b8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d018      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <HAL_DMA_IRQHandler+0x6bc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d013      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <HAL_DMA_IRQHandler+0x6c0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00e      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_DMA_IRQHandler+0x6c4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a17      	ldr	r2, [pc, #92]	; (80030ac <HAL_DMA_IRQHandler+0x6c8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_DMA_IRQHandler+0x678>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_DMA_IRQHandler+0x6cc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d12b      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x6d0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	e02a      	b.n	80030c8 <HAL_DMA_IRQHandler+0x6e4>
 8003072:	bf00      	nop
 8003074:	40020010 	.word	0x40020010
 8003078:	40020028 	.word	0x40020028
 800307c:	40020040 	.word	0x40020040
 8003080:	40020058 	.word	0x40020058
 8003084:	40020070 	.word	0x40020070
 8003088:	40020088 	.word	0x40020088
 800308c:	400200a0 	.word	0x400200a0
 8003090:	400200b8 	.word	0x400200b8
 8003094:	40020410 	.word	0x40020410
 8003098:	40020428 	.word	0x40020428
 800309c:	40020440 	.word	0x40020440
 80030a0:	40020458 	.word	0x40020458
 80030a4:	40020470 	.word	0x40020470
 80030a8:	40020488 	.word	0x40020488
 80030ac:	400204a0 	.word	0x400204a0
 80030b0:	400204b8 	.word	0x400204b8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8087 	beq.w	80031dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2220      	movs	r2, #32
 80030d8:	409a      	lsls	r2, r3
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d139      	bne.n	800315e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0216 	bic.w	r2, r2, #22
 80030f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003108:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <HAL_DMA_IRQHandler+0x736>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0208 	bic.w	r2, r2, #8
 8003128:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	223f      	movs	r2, #63	; 0x3f
 8003134:	409a      	lsls	r2, r3
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 834a 	beq.w	80037e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
          }
          return;
 800315c:	e344      	b.n	80037e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d018      	beq.n	800319e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02c      	beq.n	80031dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
 800318a:	e027      	b.n	80031dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d023      	beq.n	80031dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
 800319c:	e01e      	b.n	80031dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10f      	bne.n	80031cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0210 	bic.w	r2, r2, #16
 80031ba:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8306 	beq.w	80037f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8088 	beq.w	8003304 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2204      	movs	r2, #4
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a7a      	ldr	r2, [pc, #488]	; (80033ec <HAL_DMA_IRQHandler+0xa08>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d04a      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a79      	ldr	r2, [pc, #484]	; (80033f0 <HAL_DMA_IRQHandler+0xa0c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d045      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a77      	ldr	r2, [pc, #476]	; (80033f4 <HAL_DMA_IRQHandler+0xa10>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d040      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a76      	ldr	r2, [pc, #472]	; (80033f8 <HAL_DMA_IRQHandler+0xa14>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d03b      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a74      	ldr	r2, [pc, #464]	; (80033fc <HAL_DMA_IRQHandler+0xa18>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d036      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a73      	ldr	r2, [pc, #460]	; (8003400 <HAL_DMA_IRQHandler+0xa1c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d031      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a71      	ldr	r2, [pc, #452]	; (8003404 <HAL_DMA_IRQHandler+0xa20>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02c      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a70      	ldr	r2, [pc, #448]	; (8003408 <HAL_DMA_IRQHandler+0xa24>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d027      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6e      	ldr	r2, [pc, #440]	; (800340c <HAL_DMA_IRQHandler+0xa28>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d022      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6d      	ldr	r2, [pc, #436]	; (8003410 <HAL_DMA_IRQHandler+0xa2c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d01d      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6b      	ldr	r2, [pc, #428]	; (8003414 <HAL_DMA_IRQHandler+0xa30>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d018      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_DMA_IRQHandler+0xa34>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a68      	ldr	r2, [pc, #416]	; (800341c <HAL_DMA_IRQHandler+0xa38>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00e      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a67      	ldr	r2, [pc, #412]	; (8003420 <HAL_DMA_IRQHandler+0xa3c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a65      	ldr	r2, [pc, #404]	; (8003424 <HAL_DMA_IRQHandler+0xa40>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_DMA_IRQHandler+0x8b8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a64      	ldr	r2, [pc, #400]	; (8003428 <HAL_DMA_IRQHandler+0xa44>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d108      	bne.n	80032ae <HAL_DMA_IRQHandler+0x8ca>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e007      	b.n	80032be <HAL_DMA_IRQHandler+0x8da>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3301      	adds	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d307      	bcc.n	80032da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f2      	bne.n	80032be <HAL_DMA_IRQHandler+0x8da>
 80032d8:	e000      	b.n	80032dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80032da:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2203      	movs	r2, #3
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032fa:	e003      	b.n	8003304 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8272 	beq.w	80037f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
 8003316:	e26c      	b.n	80037f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a43      	ldr	r2, [pc, #268]	; (800342c <HAL_DMA_IRQHandler+0xa48>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d022      	beq.n	8003368 <HAL_DMA_IRQHandler+0x984>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a42      	ldr	r2, [pc, #264]	; (8003430 <HAL_DMA_IRQHandler+0xa4c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01d      	beq.n	8003368 <HAL_DMA_IRQHandler+0x984>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a40      	ldr	r2, [pc, #256]	; (8003434 <HAL_DMA_IRQHandler+0xa50>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <HAL_DMA_IRQHandler+0x984>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <HAL_DMA_IRQHandler+0xa54>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_DMA_IRQHandler+0x984>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a3d      	ldr	r2, [pc, #244]	; (800343c <HAL_DMA_IRQHandler+0xa58>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <HAL_DMA_IRQHandler+0x984>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a3c      	ldr	r2, [pc, #240]	; (8003440 <HAL_DMA_IRQHandler+0xa5c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_DMA_IRQHandler+0x984>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3a      	ldr	r2, [pc, #232]	; (8003444 <HAL_DMA_IRQHandler+0xa60>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_DMA_IRQHandler+0x984>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a39      	ldr	r2, [pc, #228]	; (8003448 <HAL_DMA_IRQHandler+0xa64>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_DMA_IRQHandler+0x988>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_DMA_IRQHandler+0x98a>
 800336c:	2300      	movs	r3, #0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 823f 	beq.w	80037f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2204      	movs	r2, #4
 8003386:	409a      	lsls	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80cd 	beq.w	800352c <HAL_DMA_IRQHandler+0xb48>
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80c7 	beq.w	800352c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2204      	movs	r2, #4
 80033a8:	409a      	lsls	r2, r3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d049      	beq.n	800344c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8210 	beq.w	80037ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033d4:	e20a      	b.n	80037ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8206 	beq.w	80037ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033e8:	e200      	b.n	80037ec <HAL_DMA_IRQHandler+0xe08>
 80033ea:	bf00      	nop
 80033ec:	40020010 	.word	0x40020010
 80033f0:	40020028 	.word	0x40020028
 80033f4:	40020040 	.word	0x40020040
 80033f8:	40020058 	.word	0x40020058
 80033fc:	40020070 	.word	0x40020070
 8003400:	40020088 	.word	0x40020088
 8003404:	400200a0 	.word	0x400200a0
 8003408:	400200b8 	.word	0x400200b8
 800340c:	40020410 	.word	0x40020410
 8003410:	40020428 	.word	0x40020428
 8003414:	40020440 	.word	0x40020440
 8003418:	40020458 	.word	0x40020458
 800341c:	40020470 	.word	0x40020470
 8003420:	40020488 	.word	0x40020488
 8003424:	400204a0 	.word	0x400204a0
 8003428:	400204b8 	.word	0x400204b8
 800342c:	58025408 	.word	0x58025408
 8003430:	5802541c 	.word	0x5802541c
 8003434:	58025430 	.word	0x58025430
 8003438:	58025444 	.word	0x58025444
 800343c:	58025458 	.word	0x58025458
 8003440:	5802546c 	.word	0x5802546c
 8003444:	58025480 	.word	0x58025480
 8003448:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d160      	bne.n	8003518 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a8c      	ldr	r2, [pc, #560]	; (800368c <HAL_DMA_IRQHandler+0xca8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d04a      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a8a      	ldr	r2, [pc, #552]	; (8003690 <HAL_DMA_IRQHandler+0xcac>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d045      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a89      	ldr	r2, [pc, #548]	; (8003694 <HAL_DMA_IRQHandler+0xcb0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d040      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a87      	ldr	r2, [pc, #540]	; (8003698 <HAL_DMA_IRQHandler+0xcb4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d03b      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a86      	ldr	r2, [pc, #536]	; (800369c <HAL_DMA_IRQHandler+0xcb8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d036      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a84      	ldr	r2, [pc, #528]	; (80036a0 <HAL_DMA_IRQHandler+0xcbc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d031      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a83      	ldr	r2, [pc, #524]	; (80036a4 <HAL_DMA_IRQHandler+0xcc0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d02c      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a81      	ldr	r2, [pc, #516]	; (80036a8 <HAL_DMA_IRQHandler+0xcc4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d027      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a80      	ldr	r2, [pc, #512]	; (80036ac <HAL_DMA_IRQHandler+0xcc8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a7e      	ldr	r2, [pc, #504]	; (80036b0 <HAL_DMA_IRQHandler+0xccc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01d      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7d      	ldr	r2, [pc, #500]	; (80036b4 <HAL_DMA_IRQHandler+0xcd0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a7b      	ldr	r2, [pc, #492]	; (80036b8 <HAL_DMA_IRQHandler+0xcd4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7a      	ldr	r2, [pc, #488]	; (80036bc <HAL_DMA_IRQHandler+0xcd8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a78      	ldr	r2, [pc, #480]	; (80036c0 <HAL_DMA_IRQHandler+0xcdc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a77      	ldr	r2, [pc, #476]	; (80036c4 <HAL_DMA_IRQHandler+0xce0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xb12>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a75      	ldr	r2, [pc, #468]	; (80036c8 <HAL_DMA_IRQHandler+0xce4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d108      	bne.n	8003508 <HAL_DMA_IRQHandler+0xb24>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0208 	bic.w	r2, r2, #8
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e007      	b.n	8003518 <HAL_DMA_IRQHandler+0xb34>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8165 	beq.w	80037ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800352a:	e15f      	b.n	80037ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2202      	movs	r2, #2
 8003536:	409a      	lsls	r2, r3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80c5 	beq.w	80036cc <HAL_DMA_IRQHandler+0xce8>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80bf 	beq.w	80036cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2202      	movs	r2, #2
 8003558:	409a      	lsls	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d018      	beq.n	800359a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 813a 	beq.w	80037f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003584:	e134      	b.n	80037f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8130 	beq.w	80037f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003598:	e12a      	b.n	80037f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d168      	bne.n	8003676 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a38      	ldr	r2, [pc, #224]	; (800368c <HAL_DMA_IRQHandler+0xca8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d04a      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a37      	ldr	r2, [pc, #220]	; (8003690 <HAL_DMA_IRQHandler+0xcac>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d045      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a35      	ldr	r2, [pc, #212]	; (8003694 <HAL_DMA_IRQHandler+0xcb0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d040      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a34      	ldr	r2, [pc, #208]	; (8003698 <HAL_DMA_IRQHandler+0xcb4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d03b      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a32      	ldr	r2, [pc, #200]	; (800369c <HAL_DMA_IRQHandler+0xcb8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d036      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <HAL_DMA_IRQHandler+0xcbc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d031      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2f      	ldr	r2, [pc, #188]	; (80036a4 <HAL_DMA_IRQHandler+0xcc0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02c      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2e      	ldr	r2, [pc, #184]	; (80036a8 <HAL_DMA_IRQHandler+0xcc4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d027      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2c      	ldr	r2, [pc, #176]	; (80036ac <HAL_DMA_IRQHandler+0xcc8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d022      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2b      	ldr	r2, [pc, #172]	; (80036b0 <HAL_DMA_IRQHandler+0xccc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d01d      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <HAL_DMA_IRQHandler+0xcd0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_DMA_IRQHandler+0xcd4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a26      	ldr	r2, [pc, #152]	; (80036bc <HAL_DMA_IRQHandler+0xcd8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <HAL_DMA_IRQHandler+0xcdc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <HAL_DMA_IRQHandler+0xce0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_DMA_IRQHandler+0xc60>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <HAL_DMA_IRQHandler+0xce4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <HAL_DMA_IRQHandler+0xc72>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0214 	bic.w	r2, r2, #20
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e007      	b.n	8003666 <HAL_DMA_IRQHandler+0xc82>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 020a 	bic.w	r2, r2, #10
 8003664:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80b8 	beq.w	80037f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003688:	e0b2      	b.n	80037f0 <HAL_DMA_IRQHandler+0xe0c>
 800368a:	bf00      	nop
 800368c:	40020010 	.word	0x40020010
 8003690:	40020028 	.word	0x40020028
 8003694:	40020040 	.word	0x40020040
 8003698:	40020058 	.word	0x40020058
 800369c:	40020070 	.word	0x40020070
 80036a0:	40020088 	.word	0x40020088
 80036a4:	400200a0 	.word	0x400200a0
 80036a8:	400200b8 	.word	0x400200b8
 80036ac:	40020410 	.word	0x40020410
 80036b0:	40020428 	.word	0x40020428
 80036b4:	40020440 	.word	0x40020440
 80036b8:	40020458 	.word	0x40020458
 80036bc:	40020470 	.word	0x40020470
 80036c0:	40020488 	.word	0x40020488
 80036c4:	400204a0 	.word	0x400204a0
 80036c8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2208      	movs	r2, #8
 80036d6:	409a      	lsls	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8088 	beq.w	80037f2 <HAL_DMA_IRQHandler+0xe0e>
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8082 	beq.w	80037f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a41      	ldr	r2, [pc, #260]	; (80037f8 <HAL_DMA_IRQHandler+0xe14>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d04a      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3f      	ldr	r2, [pc, #252]	; (80037fc <HAL_DMA_IRQHandler+0xe18>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d045      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a3e      	ldr	r2, [pc, #248]	; (8003800 <HAL_DMA_IRQHandler+0xe1c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d040      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <HAL_DMA_IRQHandler+0xe20>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d03b      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3b      	ldr	r2, [pc, #236]	; (8003808 <HAL_DMA_IRQHandler+0xe24>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d036      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_DMA_IRQHandler+0xe28>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a38      	ldr	r2, [pc, #224]	; (8003810 <HAL_DMA_IRQHandler+0xe2c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02c      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a36      	ldr	r2, [pc, #216]	; (8003814 <HAL_DMA_IRQHandler+0xe30>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d027      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a35      	ldr	r2, [pc, #212]	; (8003818 <HAL_DMA_IRQHandler+0xe34>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a33      	ldr	r2, [pc, #204]	; (800381c <HAL_DMA_IRQHandler+0xe38>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01d      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a32      	ldr	r2, [pc, #200]	; (8003820 <HAL_DMA_IRQHandler+0xe3c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a30      	ldr	r2, [pc, #192]	; (8003824 <HAL_DMA_IRQHandler+0xe40>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <HAL_DMA_IRQHandler+0xe44>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2d      	ldr	r2, [pc, #180]	; (800382c <HAL_DMA_IRQHandler+0xe48>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <HAL_DMA_IRQHandler+0xe4c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_DMA_IRQHandler+0xdaa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2a      	ldr	r2, [pc, #168]	; (8003834 <HAL_DMA_IRQHandler+0xe50>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d108      	bne.n	80037a0 <HAL_DMA_IRQHandler+0xdbc>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 021c 	bic.w	r2, r2, #28
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e007      	b.n	80037b0 <HAL_DMA_IRQHandler+0xdcc>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 020e 	bic.w	r2, r2, #14
 80037ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2201      	movs	r2, #1
 80037ba:	409a      	lsls	r2, r3
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
 80037e6:	e004      	b.n	80037f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037f2:	3728      	adds	r7, #40	; 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40020010 	.word	0x40020010
 80037fc:	40020028 	.word	0x40020028
 8003800:	40020040 	.word	0x40020040
 8003804:	40020058 	.word	0x40020058
 8003808:	40020070 	.word	0x40020070
 800380c:	40020088 	.word	0x40020088
 8003810:	400200a0 	.word	0x400200a0
 8003814:	400200b8 	.word	0x400200b8
 8003818:	40020410 	.word	0x40020410
 800381c:	40020428 	.word	0x40020428
 8003820:	40020440 	.word	0x40020440
 8003824:	40020458 	.word	0x40020458
 8003828:	40020470 	.word	0x40020470
 800382c:	40020488 	.word	0x40020488
 8003830:	400204a0 	.word	0x400204a0
 8003834:	400204b8 	.word	0x400204b8

08003838 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a42      	ldr	r2, [pc, #264]	; (8003950 <DMA_CalcBaseAndBitshift+0x118>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d04a      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a41      	ldr	r2, [pc, #260]	; (8003954 <DMA_CalcBaseAndBitshift+0x11c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d045      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3f      	ldr	r2, [pc, #252]	; (8003958 <DMA_CalcBaseAndBitshift+0x120>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d040      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a3e      	ldr	r2, [pc, #248]	; (800395c <DMA_CalcBaseAndBitshift+0x124>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d03b      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <DMA_CalcBaseAndBitshift+0x128>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d036      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <DMA_CalcBaseAndBitshift+0x12c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d031      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a39      	ldr	r2, [pc, #228]	; (8003968 <DMA_CalcBaseAndBitshift+0x130>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02c      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a38      	ldr	r2, [pc, #224]	; (800396c <DMA_CalcBaseAndBitshift+0x134>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d027      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a36      	ldr	r2, [pc, #216]	; (8003970 <DMA_CalcBaseAndBitshift+0x138>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d022      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a35      	ldr	r2, [pc, #212]	; (8003974 <DMA_CalcBaseAndBitshift+0x13c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d01d      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a33      	ldr	r2, [pc, #204]	; (8003978 <DMA_CalcBaseAndBitshift+0x140>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d018      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a32      	ldr	r2, [pc, #200]	; (800397c <DMA_CalcBaseAndBitshift+0x144>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a30      	ldr	r2, [pc, #192]	; (8003980 <DMA_CalcBaseAndBitshift+0x148>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <DMA_CalcBaseAndBitshift+0x14c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2d      	ldr	r2, [pc, #180]	; (8003988 <DMA_CalcBaseAndBitshift+0x150>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <DMA_CalcBaseAndBitshift+0xa8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2c      	ldr	r2, [pc, #176]	; (800398c <DMA_CalcBaseAndBitshift+0x154>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <DMA_CalcBaseAndBitshift+0xac>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <DMA_CalcBaseAndBitshift+0xae>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d024      	beq.n	8003934 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	3b10      	subs	r3, #16
 80038f2:	4a27      	ldr	r2, [pc, #156]	; (8003990 <DMA_CalcBaseAndBitshift+0x158>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	4a24      	ldr	r2, [pc, #144]	; (8003994 <DMA_CalcBaseAndBitshift+0x15c>)
 8003904:	5cd3      	ldrb	r3, [r2, r3]
 8003906:	461a      	mov	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d908      	bls.n	8003924 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <DMA_CalcBaseAndBitshift+0x160>)
 800391a:	4013      	ands	r3, r2
 800391c:	1d1a      	adds	r2, r3, #4
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	659a      	str	r2, [r3, #88]	; 0x58
 8003922:	e00d      	b.n	8003940 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <DMA_CalcBaseAndBitshift+0x160>)
 800392c:	4013      	ands	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6593      	str	r3, [r2, #88]	; 0x58
 8003932:	e005      	b.n	8003940 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40020010 	.word	0x40020010
 8003954:	40020028 	.word	0x40020028
 8003958:	40020040 	.word	0x40020040
 800395c:	40020058 	.word	0x40020058
 8003960:	40020070 	.word	0x40020070
 8003964:	40020088 	.word	0x40020088
 8003968:	400200a0 	.word	0x400200a0
 800396c:	400200b8 	.word	0x400200b8
 8003970:	40020410 	.word	0x40020410
 8003974:	40020428 	.word	0x40020428
 8003978:	40020440 	.word	0x40020440
 800397c:	40020458 	.word	0x40020458
 8003980:	40020470 	.word	0x40020470
 8003984:	40020488 	.word	0x40020488
 8003988:	400204a0 	.word	0x400204a0
 800398c:	400204b8 	.word	0x400204b8
 8003990:	aaaaaaab 	.word	0xaaaaaaab
 8003994:	08011128 	.word	0x08011128
 8003998:	fffffc00 	.word	0xfffffc00

0800399c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d120      	bne.n	80039f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d858      	bhi.n	8003a6a <DMA_CheckFifoParam+0xce>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <DMA_CheckFifoParam+0x24>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039e3 	.word	0x080039e3
 80039c8:	080039d1 	.word	0x080039d1
 80039cc:	08003a6b 	.word	0x08003a6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d048      	beq.n	8003a6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039e0:	e045      	b.n	8003a6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039ea:	d142      	bne.n	8003a72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039f0:	e03f      	b.n	8003a72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fa:	d123      	bne.n	8003a44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d838      	bhi.n	8003a76 <DMA_CheckFifoParam+0xda>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <DMA_CheckFifoParam+0x70>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a23 	.word	0x08003a23
 8003a14:	08003a1d 	.word	0x08003a1d
 8003a18:	08003a35 	.word	0x08003a35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a20:	e030      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d025      	beq.n	8003a7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a32:	e022      	b.n	8003a7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a3c:	d11f      	bne.n	8003a7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a42:	e01c      	b.n	8003a7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d902      	bls.n	8003a52 <DMA_CheckFifoParam+0xb6>
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d003      	beq.n	8003a58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a50:	e018      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
        break;
 8003a56:	e015      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00e      	beq.n	8003a82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
    break;
 8003a68:	e00b      	b.n	8003a82 <DMA_CheckFifoParam+0xe6>
        break;
 8003a6a:	bf00      	nop
 8003a6c:	e00a      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>
        break;
 8003a6e:	bf00      	nop
 8003a70:	e008      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>
        break;
 8003a72:	bf00      	nop
 8003a74:	e006      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>
        break;
 8003a76:	bf00      	nop
 8003a78:	e004      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e002      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>
        break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <DMA_CheckFifoParam+0xe8>
    break;
 8003a82:	bf00      	nop
    }
  }

  return status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop

08003a94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a38      	ldr	r2, [pc, #224]	; (8003b88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d022      	beq.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a36      	ldr	r2, [pc, #216]	; (8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01d      	beq.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a35      	ldr	r2, [pc, #212]	; (8003b90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d018      	beq.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2d      	ldr	r2, [pc, #180]	; (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01a      	beq.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	3b08      	subs	r3, #8
 8003b04:	4a28      	ldr	r2, [pc, #160]	; (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4b26      	ldr	r3, [pc, #152]	; (8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	461a      	mov	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b30:	e024      	b.n	8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	3b10      	subs	r3, #16
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d806      	bhi.n	8003b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d902      	bls.n	8003b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3308      	adds	r3, #8
 8003b58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4b18      	ldr	r3, [pc, #96]	; (8003bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	461a      	mov	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	58025408 	.word	0x58025408
 8003b8c:	5802541c 	.word	0x5802541c
 8003b90:	58025430 	.word	0x58025430
 8003b94:	58025444 	.word	0x58025444
 8003b98:	58025458 	.word	0x58025458
 8003b9c:	5802546c 	.word	0x5802546c
 8003ba0:	58025480 	.word	0x58025480
 8003ba4:	58025494 	.word	0x58025494
 8003ba8:	cccccccd 	.word	0xcccccccd
 8003bac:	16009600 	.word	0x16009600
 8003bb0:	58025880 	.word	0x58025880
 8003bb4:	aaaaaaab 	.word	0xaaaaaaab
 8003bb8:	400204b8 	.word	0x400204b8
 8003bbc:	4002040f 	.word	0x4002040f
 8003bc0:	10008200 	.word	0x10008200
 8003bc4:	40020880 	.word	0x40020880

08003bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04a      	beq.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d847      	bhi.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d022      	beq.n	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d01d      	beq.n	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d018      	beq.n	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	461a      	mov	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c50:	671a      	str	r2, [r3, #112]	; 0x70
 8003c52:	e009      	b.n	8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	58025408 	.word	0x58025408
 8003c84:	5802541c 	.word	0x5802541c
 8003c88:	58025430 	.word	0x58025430
 8003c8c:	58025444 	.word	0x58025444
 8003c90:	58025458 	.word	0x58025458
 8003c94:	5802546c 	.word	0x5802546c
 8003c98:	58025480 	.word	0x58025480
 8003c9c:	58025494 	.word	0x58025494
 8003ca0:	1600963f 	.word	0x1600963f
 8003ca4:	58025940 	.word	0x58025940
 8003ca8:	1000823f 	.word	0x1000823f
 8003cac:	40020940 	.word	0x40020940

08003cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cbe:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_GPIO_Init+0x12c>)
 8003cc0:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a46      	ldr	r2, [pc, #280]	; (8003de0 <HAL_GPIO_Init+0x130>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02b      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a45      	ldr	r2, [pc, #276]	; (8003de4 <HAL_GPIO_Init+0x134>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d027      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a44      	ldr	r2, [pc, #272]	; (8003de8 <HAL_GPIO_Init+0x138>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d023      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a43      	ldr	r2, [pc, #268]	; (8003dec <HAL_GPIO_Init+0x13c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01f      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a42      	ldr	r2, [pc, #264]	; (8003df0 <HAL_GPIO_Init+0x140>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01b      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a41      	ldr	r2, [pc, #260]	; (8003df4 <HAL_GPIO_Init+0x144>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d017      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <HAL_GPIO_Init+0x148>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a3f      	ldr	r2, [pc, #252]	; (8003dfc <HAL_GPIO_Init+0x14c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00f      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a3e      	ldr	r2, [pc, #248]	; (8003e00 <HAL_GPIO_Init+0x150>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00b      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a3d      	ldr	r2, [pc, #244]	; (8003e04 <HAL_GPIO_Init+0x154>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d007      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a3c      	ldr	r2, [pc, #240]	; (8003e08 <HAL_GPIO_Init+0x158>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_Init+0x72>
 8003d1a:	21bb      	movs	r1, #187	; 0xbb
 8003d1c:	483b      	ldr	r0, [pc, #236]	; (8003e0c <HAL_GPIO_Init+0x15c>)
 8003d1e:	f7fd f8c1 	bl	8000ea4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_GPIO_Init+0x88>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <HAL_GPIO_Init+0x160>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x90>
 8003d38:	21bc      	movs	r1, #188	; 0xbc
 8003d3a:	4834      	ldr	r0, [pc, #208]	; (8003e0c <HAL_GPIO_Init+0x15c>)
 8003d3c:	f7fd f8b2 	bl	8000ea4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d035      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d031      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b11      	cmp	r3, #17
 8003d56:	d02d      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d029      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b12      	cmp	r3, #18
 8003d66:	d025      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <HAL_GPIO_Init+0x164>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d020      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <HAL_GPIO_Init+0x168>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01b      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a26      	ldr	r2, [pc, #152]	; (8003e1c <HAL_GPIO_Init+0x16c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d016      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4a25      	ldr	r2, [pc, #148]	; (8003e20 <HAL_GPIO_Init+0x170>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d011      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <HAL_GPIO_Init+0x174>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00c      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_GPIO_Init+0x178>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x104>
 8003dac:	21bd      	movs	r1, #189	; 0xbd
 8003dae:	4817      	ldr	r0, [pc, #92]	; (8003e0c <HAL_GPIO_Init+0x15c>)
 8003db0:	f7fd f878 	bl	8000ea4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 821a 	beq.w	80041f2 <HAL_GPIO_Init+0x542>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	f000 8215 	beq.w	80041f2 <HAL_GPIO_Init+0x542>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	f000 8210 	beq.w	80041f2 <HAL_GPIO_Init+0x542>
 8003dd2:	21be      	movs	r1, #190	; 0xbe
 8003dd4:	480d      	ldr	r0, [pc, #52]	; (8003e0c <HAL_GPIO_Init+0x15c>)
 8003dd6:	f7fd f865 	bl	8000ea4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dda:	e20a      	b.n	80041f2 <HAL_GPIO_Init+0x542>
 8003ddc:	58000080 	.word	0x58000080
 8003de0:	58020000 	.word	0x58020000
 8003de4:	58020400 	.word	0x58020400
 8003de8:	58020800 	.word	0x58020800
 8003dec:	58020c00 	.word	0x58020c00
 8003df0:	58021000 	.word	0x58021000
 8003df4:	58021400 	.word	0x58021400
 8003df8:	58021800 	.word	0x58021800
 8003dfc:	58021c00 	.word	0x58021c00
 8003e00:	58022000 	.word	0x58022000
 8003e04:	58022400 	.word	0x58022400
 8003e08:	58022800 	.word	0x58022800
 8003e0c:	08010b24 	.word	0x08010b24
 8003e10:	ffff0000 	.word	0xffff0000
 8003e14:	11110000 	.word	0x11110000
 8003e18:	11210000 	.word	0x11210000
 8003e1c:	11310000 	.word	0x11310000
 8003e20:	11120000 	.word	0x11120000
 8003e24:	11220000 	.word	0x11220000
 8003e28:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 81d4 	beq.w	80041ec <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x1a4>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b12      	cmp	r3, #18
 8003e52:	d15b      	bne.n	8003f0c <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4aa2      	ldr	r2, [pc, #648]	; (80040e0 <HAL_GPIO_Init+0x430>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d02b      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4aa1      	ldr	r2, [pc, #644]	; (80040e4 <HAL_GPIO_Init+0x434>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d027      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4aa0      	ldr	r2, [pc, #640]	; (80040e8 <HAL_GPIO_Init+0x438>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d023      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a9f      	ldr	r2, [pc, #636]	; (80040ec <HAL_GPIO_Init+0x43c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d01f      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a9e      	ldr	r2, [pc, #632]	; (80040f0 <HAL_GPIO_Init+0x440>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d01b      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a9d      	ldr	r2, [pc, #628]	; (80040f4 <HAL_GPIO_Init+0x444>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d017      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a9c      	ldr	r2, [pc, #624]	; (80040f8 <HAL_GPIO_Init+0x448>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a9b      	ldr	r2, [pc, #620]	; (80040fc <HAL_GPIO_Init+0x44c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00f      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a9a      	ldr	r2, [pc, #616]	; (8004100 <HAL_GPIO_Init+0x450>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a99      	ldr	r2, [pc, #612]	; (8004104 <HAL_GPIO_Init+0x454>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a98      	ldr	r2, [pc, #608]	; (8004108 <HAL_GPIO_Init+0x458>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x204>
 8003eac:	21cd      	movs	r1, #205	; 0xcd
 8003eae:	4897      	ldr	r0, [pc, #604]	; (800410c <HAL_GPIO_Init+0x45c>)
 8003eb0:	f7fc fff8 	bl	8000ea4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b0f      	cmp	r3, #15
 8003eba:	d903      	bls.n	8003ec4 <HAL_GPIO_Init+0x214>
 8003ebc:	21ce      	movs	r1, #206	; 0xce
 8003ebe:	4893      	ldr	r0, [pc, #588]	; (800410c <HAL_GPIO_Init+0x45c>)
 8003ec0:	f7fc fff0 	bl	8000ea4 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0203 	and.w	r2, r3, #3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d00b      	beq.n	8003f60 <HAL_GPIO_Init+0x2b0>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d007      	beq.n	8003f60 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f54:	2b11      	cmp	r3, #17
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b12      	cmp	r3, #18
 8003f5e:	d144      	bne.n	8003fea <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00f      	beq.n	8003f88 <HAL_GPIO_Init+0x2d8>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d00b      	beq.n	8003f88 <HAL_GPIO_Init+0x2d8>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d007      	beq.n	8003f88 <HAL_GPIO_Init+0x2d8>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x2d8>
 8003f80:	21e2      	movs	r1, #226	; 0xe2
 8003f82:	4862      	ldr	r0, [pc, #392]	; (800410c <HAL_GPIO_Init+0x45c>)
 8003f84:	f7fc ff8e 	bl	8000ea4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 0201 	and.w	r2, r3, #1
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80e2 	beq.w	80041ec <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004028:	4b39      	ldr	r3, [pc, #228]	; (8004110 <HAL_GPIO_Init+0x460>)
 800402a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800402e:	4a38      	ldr	r2, [pc, #224]	; (8004110 <HAL_GPIO_Init+0x460>)
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <HAL_GPIO_Init+0x460>)
 800403a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004046:	4a33      	ldr	r2, [pc, #204]	; (8004114 <HAL_GPIO_Init+0x464>)
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	3302      	adds	r3, #2
 800404e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <HAL_GPIO_Init+0x430>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d054      	beq.n	800411c <HAL_GPIO_Init+0x46c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_GPIO_Init+0x434>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d04e      	beq.n	8004118 <HAL_GPIO_Init+0x468>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_GPIO_Init+0x438>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02b      	beq.n	80040da <HAL_GPIO_Init+0x42a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <HAL_GPIO_Init+0x43c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d025      	beq.n	80040d6 <HAL_GPIO_Init+0x426>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_GPIO_Init+0x440>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <HAL_GPIO_Init+0x422>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <HAL_GPIO_Init+0x444>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d019      	beq.n	80040ce <HAL_GPIO_Init+0x41e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_GPIO_Init+0x448>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_GPIO_Init+0x41a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a15      	ldr	r2, [pc, #84]	; (80040fc <HAL_GPIO_Init+0x44c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_GPIO_Init+0x416>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <HAL_GPIO_Init+0x450>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_Init+0x412>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a13      	ldr	r2, [pc, #76]	; (8004104 <HAL_GPIO_Init+0x454>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_GPIO_Init+0x40e>
 80040ba:	2309      	movs	r3, #9
 80040bc:	e02f      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040be:	230a      	movs	r3, #10
 80040c0:	e02d      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040c2:	2308      	movs	r3, #8
 80040c4:	e02b      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040c6:	2307      	movs	r3, #7
 80040c8:	e029      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040ca:	2306      	movs	r3, #6
 80040cc:	e027      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040ce:	2305      	movs	r3, #5
 80040d0:	e025      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040d2:	2304      	movs	r3, #4
 80040d4:	e023      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040d6:	2303      	movs	r3, #3
 80040d8:	e021      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040da:	2302      	movs	r3, #2
 80040dc:	e01f      	b.n	800411e <HAL_GPIO_Init+0x46e>
 80040de:	bf00      	nop
 80040e0:	58020000 	.word	0x58020000
 80040e4:	58020400 	.word	0x58020400
 80040e8:	58020800 	.word	0x58020800
 80040ec:	58020c00 	.word	0x58020c00
 80040f0:	58021000 	.word	0x58021000
 80040f4:	58021400 	.word	0x58021400
 80040f8:	58021800 	.word	0x58021800
 80040fc:	58021c00 	.word	0x58021c00
 8004100:	58022000 	.word	0x58022000
 8004104:	58022400 	.word	0x58022400
 8004108:	58022800 	.word	0x58022800
 800410c:	08010b24 	.word	0x08010b24
 8004110:	58024400 	.word	0x58024400
 8004114:	58000400 	.word	0x58000400
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_GPIO_Init+0x46e>
 800411c:	2300      	movs	r3, #0
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	4093      	lsls	r3, r2
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800412e:	4937      	ldr	r1, [pc, #220]	; (800420c <HAL_GPIO_Init+0x55c>)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80041e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	3301      	adds	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f47f ae15 	bne.w	8003e2c <HAL_GPIO_Init+0x17c>
  }
}
 8004202:	bf00      	nop
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	58000400 	.word	0x58000400

08004210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
 800421c:	4613      	mov	r3, r2
 800421e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004220:	887b      	ldrh	r3, [r7, #2]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_GPIO_WritePin+0x20>
 8004226:	887a      	ldrh	r2, [r7, #2]
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_GPIO_WritePin+0x60>)
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <HAL_GPIO_WritePin+0x2a>
 8004230:	f240 11ad 	movw	r1, #429	; 0x1ad
 8004234:	480f      	ldr	r0, [pc, #60]	; (8004274 <HAL_GPIO_WritePin+0x64>)
 8004236:	f7fc fe35 	bl	8000ea4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800423a:	787b      	ldrb	r3, [r7, #1]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <HAL_GPIO_WritePin+0x40>
 8004240:	787b      	ldrb	r3, [r7, #1]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d004      	beq.n	8004250 <HAL_GPIO_WritePin+0x40>
 8004246:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800424a:	480a      	ldr	r0, [pc, #40]	; (8004274 <HAL_GPIO_WritePin+0x64>)
 800424c:	f7fc fe2a 	bl	8000ea4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004250:	787b      	ldrb	r3, [r7, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800425c:	e003      	b.n	8004266 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	041a      	lsls	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	619a      	str	r2, [r3, #24]
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	ffff0000 	.word	0xffff0000
 8004274:	08010b24 	.word	0x08010b24

08004278 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800428e:	4a05      	ldr	r2, [pc, #20]	; (80042a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc fdf2 	bl	8000e80 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	58000080 	.word	0x58000080

080042a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e107      	b.n	80044ca <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a85      	ldr	r2, [pc, #532]	; (80044d4 <HAL_I2C_Init+0x22c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_I2C_Init+0x44>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a83      	ldr	r2, [pc, #524]	; (80044d8 <HAL_I2C_Init+0x230>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00e      	beq.n	80042ec <HAL_I2C_Init+0x44>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a82      	ldr	r2, [pc, #520]	; (80044dc <HAL_I2C_Init+0x234>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_I2C_Init+0x44>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a80      	ldr	r2, [pc, #512]	; (80044e0 <HAL_I2C_Init+0x238>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_I2C_Init+0x44>
 80042e2:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80042e6:	487f      	ldr	r0, [pc, #508]	; (80044e4 <HAL_I2C_Init+0x23c>)
 80042e8:	f7fc fddc 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d304      	bcc.n	8004300 <HAL_I2C_Init+0x58>
 80042f6:	f240 11df 	movw	r1, #479	; 0x1df
 80042fa:	487a      	ldr	r0, [pc, #488]	; (80044e4 <HAL_I2C_Init+0x23c>)
 80042fc:	f7fc fdd2 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d008      	beq.n	800431a <HAL_I2C_Init+0x72>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d004      	beq.n	800431a <HAL_I2C_Init+0x72>
 8004310:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004314:	4873      	ldr	r0, [pc, #460]	; (80044e4 <HAL_I2C_Init+0x23c>)
 8004316:	f7fc fdc5 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_I2C_Init+0x8e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432a:	d004      	beq.n	8004336 <HAL_I2C_Init+0x8e>
 800432c:	f240 11e1 	movw	r1, #481	; 0x1e1
 8004330:	486c      	ldr	r0, [pc, #432]	; (80044e4 <HAL_I2C_Init+0x23c>)
 8004332:	f7fc fdb7 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2bff      	cmp	r3, #255	; 0xff
 800433c:	d904      	bls.n	8004348 <HAL_I2C_Init+0xa0>
 800433e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004342:	4868      	ldr	r0, [pc, #416]	; (80044e4 <HAL_I2C_Init+0x23c>)
 8004344:	f7fc fdae 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_I2C_Init+0xea>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d01c      	beq.n	8004392 <HAL_I2C_Init+0xea>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d018      	beq.n	8004392 <HAL_I2C_Init+0xea>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d014      	beq.n	8004392 <HAL_I2C_Init+0xea>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d010      	beq.n	8004392 <HAL_I2C_Init+0xea>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b05      	cmp	r3, #5
 8004376:	d00c      	beq.n	8004392 <HAL_I2C_Init+0xea>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b06      	cmp	r3, #6
 800437e:	d008      	beq.n	8004392 <HAL_I2C_Init+0xea>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b07      	cmp	r3, #7
 8004386:	d004      	beq.n	8004392 <HAL_I2C_Init+0xea>
 8004388:	f240 11e3 	movw	r1, #483	; 0x1e3
 800438c:	4855      	ldr	r0, [pc, #340]	; (80044e4 <HAL_I2C_Init+0x23c>)
 800438e:	f7fc fd89 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_I2C_Init+0x106>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043a2:	d004      	beq.n	80043ae <HAL_I2C_Init+0x106>
 80043a4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80043a8:	484e      	ldr	r0, [pc, #312]	; (80044e4 <HAL_I2C_Init+0x23c>)
 80043aa:	f7fc fd7b 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_I2C_Init+0x122>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043be:	d004      	beq.n	80043ca <HAL_I2C_Init+0x122>
 80043c0:	f240 11e5 	movw	r1, #485	; 0x1e5
 80043c4:	4847      	ldr	r0, [pc, #284]	; (80044e4 <HAL_I2C_Init+0x23c>)
 80043c6:	f7fc fd6d 	bl	8000ea4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc fba2 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2224      	movs	r2, #36	; 0x24
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004408:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004418:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	e006      	b.n	8004440 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800443e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d104      	bne.n	8004452 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_I2C_Init+0x240>)
 800445e:	430b      	orrs	r3, r1
 8004460:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004470:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	ea42 0103 	orr.w	r1, r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	021a      	lsls	r2, r3, #8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40005400 	.word	0x40005400
 80044d8:	40005800 	.word	0x40005800
 80044dc:	40005c00 	.word	0x40005c00
 80044e0:	58001c00 	.word	0x58001c00
 80044e4:	08010b60 	.word	0x08010b60
 80044e8:	02008000 	.word	0x02008000

080044ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a32      	ldr	r2, [pc, #200]	; (80045c4 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d012      	beq.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a30      	ldr	r2, [pc, #192]	; (80045c8 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00d      	beq.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2f      	ldr	r2, [pc, #188]	; (80045cc <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d008      	beq.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2d      	ldr	r2, [pc, #180]	; (80045d0 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800451e:	2164      	movs	r1, #100	; 0x64
 8004520:	482c      	ldr	r0, [pc, #176]	; (80045d4 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8004522:	f7fc fcbf 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004532:	d003      	beq.n	800453c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004534:	2165      	movs	r1, #101	; 0x65
 8004536:	4827      	ldr	r0, [pc, #156]	; (80045d4 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8004538:	f7fc fcb4 	bl	8000ea4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b20      	cmp	r3, #32
 8004546:	d138      	bne.n	80045ba <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8004552:	2302      	movs	r3, #2
 8004554:	e032      	b.n	80045bc <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2224      	movs	r2, #36	; 0x24
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004584:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e000      	b.n	80045bc <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40005400 	.word	0x40005400
 80045c8:	40005800 	.word	0x40005800
 80045cc:	40005c00 	.word	0x40005c00
 80045d0:	58001c00 	.word	0x58001c00
 80045d4:	08010b98 	.word	0x08010b98

080045d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a31      	ldr	r2, [pc, #196]	; (80046ac <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d012      	beq.n	8004612 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	; (80046b0 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00d      	beq.n	8004612 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2e      	ldr	r2, [pc, #184]	; (80046b4 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d008      	beq.n	8004612 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2c      	ldr	r2, [pc, #176]	; (80046b8 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800460a:	2192      	movs	r1, #146	; 0x92
 800460c:	482b      	ldr	r0, [pc, #172]	; (80046bc <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800460e:	f7fc fc49 	bl	8000ea4 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b0f      	cmp	r3, #15
 8004616:	d903      	bls.n	8004620 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8004618:	2193      	movs	r1, #147	; 0x93
 800461a:	4828      	ldr	r0, [pc, #160]	; (80046bc <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800461c:	f7fc fc42 	bl	8000ea4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	d139      	bne.n	80046a0 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8004636:	2302      	movs	r3, #2
 8004638:	e033      	b.n	80046a2 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2224      	movs	r2, #36	; 0x24
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004668:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40005400 	.word	0x40005400
 80046b0:	40005800 	.word	0x40005800
 80046b4:	40005c00 	.word	0x40005c00
 80046b8:	58001c00 	.word	0x58001c00
 80046bc:	08010b98 	.word	0x08010b98

080046c0 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e070      	b.n	80047b4 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc fa7c 	bl	8000be4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8004722:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004742:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004752:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a19      	ldr	r2, [pc, #100]	; (80047bc <HAL_JPEG_Init+0xfc>)
 8004758:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <HAL_JPEG_Init+0x100>)
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fae9 	bl	8004d44 <JPEG_Set_HuffEnc_Mem>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e018      	b.n	80047b4 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004790:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	080112d0 	.word	0x080112d0
 80047c0:	08011310 	.word	0x08011310

080047c4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b08b      	sub	sp, #44	; 0x2c
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e020      	b.n	800481e <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 80047e6:	6a3a      	ldr	r2, [r7, #32]
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	4413      	add	r3, r2
 80047ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f0:	d90f      	bls.n	8004812 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e055      	b.n	80048a2 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	440b      	add	r3, r1
 8004800:	3201      	adds	r2, #1
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
      p++;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	3301      	adds	r3, #1
 800480a:	623b      	str	r3, [r7, #32]
      i--;
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	3b01      	subs	r3, #1
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ee      	bne.n	80047f6 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	3301      	adds	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2b0f      	cmp	r3, #15
 8004822:	d9db      	bls.n	80047dc <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	4413      	add	r3, r2
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	617b      	str	r3, [r7, #20]
  p = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8004842:	e027      	b.n	8004894 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	4413      	add	r3, r2
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	601a      	str	r2, [r3, #0]
      p++;
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	3301      	adds	r3, #1
 8004854:	623b      	str	r3, [r7, #32]
      code++;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3301      	adds	r3, #1
 800485a:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	4413      	add	r3, r2
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4293      	cmp	r3, r2
 800486a:	d0eb      	beq.n	8004844 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b1f      	cmp	r3, #31
 8004870:	d901      	bls.n	8004876 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e015      	b.n	80048a2 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004876:	2201      	movs	r2, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	429a      	cmp	r2, r3
 8004882:	d301      	bcc.n	8004888 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e00c      	b.n	80048a2 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
    si++;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	3301      	adds	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	4413      	add	r3, r2
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1dd      	bne.n	800485c <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	372c      	adds	r7, #44	; 0x2c
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	6018      	str	r0, [r3, #0]
 80048ba:	463b      	mov	r3, r7
 80048bc:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	f107 0308 	add.w	r3, r7, #8
 80048c6:	f107 020c 	add.w	r2, r7, #12
 80048ca:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80048ce:	f7ff ff79 	bl	80047c4 <JPEG_Bits_To_SizeCodes>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 80048d8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 80048e0:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80048e4:	e066      	b.n	80049b4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 80048ec:	e05a      	b.n	80049a4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80048f6:	4413      	add	r3, r2
 80048f8:	3310      	adds	r3, #16
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8004900:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 8004908:	23a0      	movs	r3, #160	; 0xa0
 800490a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800490e:	e021      	b.n	8004954 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004910:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004914:	2bf0      	cmp	r3, #240	; 0xf0
 8004916:	d103      	bne.n	8004920 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 8004918:	23a1      	movs	r3, #161	; 0xa1
 800491a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800491e:	e019      	b.n	8004954 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8004920:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800492e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800493a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	461a      	mov	r2, r3
 8004948:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800494c:	4413      	add	r3, r2
 800494e:	3b01      	subs	r3, #1
 8004950:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004954:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004958:	2ba1      	cmp	r3, #161	; 0xa1
 800495a:	d901      	bls.n	8004960 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800495c:	2301      	movs	r3, #1
 800495e:	e029      	b.n	80049b4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004960:	f107 030c 	add.w	r3, r7, #12
 8004964:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004968:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800496c:	463b      	mov	r3, r7
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004974:	3328      	adds	r3, #40	; 0x28
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800497c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004980:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004984:	4413      	add	r3, r2
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	3b01      	subs	r3, #1
 800498a:	b2d9      	uxtb	r1, r3
 800498c:	463b      	mov	r3, r7
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004994:	4413      	add	r3, r2
 8004996:	460a      	mov	r2, r1
 8004998:	701a      	strb	r2, [r3, #0]
      k++;
 800499a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800499e:	3301      	adds	r3, #1
 80049a0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 80049a4:	f107 0308 	add.w	r3, r7, #8
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d39d      	bcc.n	80048ee <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	1d3b      	adds	r3, r7, #4
 80049c8:	6018      	str	r0, [r3, #0]
 80049ca:	463b      	mov	r3, r7
 80049cc:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80049d6:	f107 0208 	add.w	r2, r7, #8
 80049da:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 80049de:	f7ff fef1 	bl	80047c4 <JPEG_Bits_To_SizeCodes>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80049e8:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 80049f0:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80049f4:	e03b      	b.n	8004a6e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 80049fc:	e030      	b.n	8004a60 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004a06:	4413      	add	r3, r2
 8004a08:	3310      	adds	r3, #16
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004a10:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004a14:	2b0b      	cmp	r3, #11
 8004a16:	d901      	bls.n	8004a1c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e028      	b.n	8004a6e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004a24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a28:	463b      	mov	r3, r7
 8004a2a:	6819      	ldr	r1, [r3, #0]
 8004a2c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004a30:	3302      	adds	r3, #2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004a38:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8004a3c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004a40:	4413      	add	r3, r2
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b2d9      	uxtb	r1, r3
 8004a48:	463b      	mov	r3, r7
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004a50:	4413      	add	r3, r2
 8004a52:	460a      	mov	r2, r1
 8004a54:	701a      	strb	r2, [r3, #0]
      k++;
 8004a56:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004a60:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8004a64:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d3c8      	bcc.n	80049fe <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b09a      	sub	sp, #104	; 0x68
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d106      	bne.n	8004aa0 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9e:	e00f      	b.n	8004ac0 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d106      	bne.n	8004abc <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004ab6:	3318      	adds	r3, #24
 8004ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8004aba:	e001      	b.n	8004ac0 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e05b      	b.n	8004b78 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d057      	beq.n	8004b76 <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004ac6:	f107 0314 	add.w	r3, r7, #20
 8004aca:	4619      	mov	r1, r3
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f7ff ff76 	bl	80049be <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ae4:	e048      	b.n	8004b78 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 8004ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae8:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aec:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004af0:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af4:	3304      	adds	r3, #4
 8004af6:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004afa:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004afe:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004b00:	230c      	movs	r3, #12
 8004b02:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8004b04:	e034      	b.n	8004b70 <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8004b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004b12:	f107 0214 	add.w	r2, r7, #20
 8004b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b18:	4413      	add	r3, r2
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b24:	3302      	adds	r3, #2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004b2c:	440b      	add	r3, r1
 8004b2e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	4313      	orrs	r3, r2
 8004b36:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8004b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004b3e:	f107 0214 	add.w	r2, r7, #20
 8004b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b50:	3302      	adds	r3, #2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004b58:	440b      	add	r3, r1
 8004b5a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4313      	orrs	r3, r2
 8004b62:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b66:	041a      	lsls	r2, r3, #16
 8004b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b6e:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d8c7      	bhi.n	8004b06 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3768      	adds	r7, #104	; 0x68
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	6018      	str	r0, [r3, #0]
 8004b8e:	f107 0308 	add.w	r3, r7, #8
 8004b92:	6019      	str	r1, [r3, #0]
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba4:	1d3a      	adds	r2, r7, #4
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d10a      	bne.n	8004bc2 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004bbc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004bc0:	e016      	b.n	8004bf0 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004bc2:	f107 030c 	add.w	r3, r7, #12
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004bce:	1d3a      	adds	r2, r7, #4
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d10a      	bne.n	8004bec <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004bd6:	f107 030c 	add.w	r3, r7, #12
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004be2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004be6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004bea:	e001      	b.n	8004bf0 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e09c      	b.n	8004d2a <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8096 	beq.w	8004d28 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004bfc:	f107 0214 	add.w	r2, r7, #20
 8004c00:	f107 0308 	add.w	r3, r7, #8
 8004c04:	4611      	mov	r1, r2
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	f7ff fe51 	bl	80048ae <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8004c12:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8004c1a:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004c1e:	e084      	b.n	8004d2a <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004c20:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004c24:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004c2e:	e00e      	b.n	8004c4e <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8004c30:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c34:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004c38:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004c3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c3e:	3304      	adds	r3, #4
 8004c40:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004c44:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004c4e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d9ec      	bls.n	8004c30 <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8004c56:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c5a:	4a36      	ldr	r2, [pc, #216]	; (8004d34 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8004c5c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c5e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c62:	3304      	adds	r3, #4
 8004c64:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8004c68:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c6c:	4a32      	ldr	r2, [pc, #200]	; (8004d38 <JPEG_Set_HuffAC_Mem+0x1b8>)
 8004c6e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c70:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c74:	3304      	adds	r3, #4
 8004c76:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8004c7a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <JPEG_Set_HuffAC_Mem+0x1bc>)
 8004c80:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c82:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c86:	3304      	adds	r3, #4
 8004c88:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004c8c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c90:	4a2b      	ldr	r2, [pc, #172]	; (8004d40 <JPEG_Set_HuffAC_Mem+0x1c0>)
 8004c92:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004c94:	23a2      	movs	r3, #162	; 0xa2
 8004c96:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8004c9a:	e041      	b.n	8004d20 <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8004c9c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8004ca6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004caa:	3b04      	subs	r3, #4
 8004cac:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004cb0:	f107 0214 	add.w	r2, r7, #20
 8004cb4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cb8:	4413      	add	r3, r2
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004cc2:	f107 0114 	add.w	r1, r7, #20
 8004cc6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cca:	3328      	adds	r3, #40	; 0x28
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004cda:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004ce4:	f107 0214 	add.w	r2, r7, #20
 8004ce8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cec:	4413      	add	r3, r2
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004cf6:	f107 0114 	add.w	r1, r7, #20
 8004cfa:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cfe:	3328      	adds	r3, #40	; 0x28
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004d0e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8004d12:	041a      	lsls	r2, r3, #16
 8004d14:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004d1e:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004d20:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d8b9      	bhi.n	8004c9c <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	0fd10fd0 	.word	0x0fd10fd0
 8004d38:	0fd30fd2 	.word	0x0fd30fd2
 8004d3c:	0fd50fd4 	.word	0x0fd50fd4
 8004d40:	0fd70fd6 	.word	0x0fd70fd6

08004d44 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f84d 	bl	8004dec <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	491f      	ldr	r1, [pc, #124]	; (8004ddc <JPEG_Set_HuffEnc_Mem+0x98>)
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ff0e 	bl	8004b80 <JPEG_Set_HuffAC_Mem>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	e030      	b.n	8004dd4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4918      	ldr	r1, [pc, #96]	; (8004de0 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fefe 	bl	8004b80 <JPEG_Set_HuffAC_Mem>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	e020      	b.n	8004dd4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4911      	ldr	r1, [pc, #68]	; (8004de4 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fe6a 	bl	8004a78 <JPEG_Set_HuffDC_Mem>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	e010      	b.n	8004dd4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004dba:	461a      	mov	r2, r3
 8004dbc:	490a      	ldr	r1, [pc, #40]	; (8004de8 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fe5a 	bl	8004a78 <JPEG_Set_HuffDC_Mem>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	e000      	b.n	8004dd4 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08011168 	.word	0x08011168
 8004de0:	0801121c 	.word	0x0801121c
 8004de4:	08011130 	.word	0x08011130
 8004de8:	0801114c 	.word	0x0801114c

08004dec <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b08b      	sub	sp, #44	; 0x2c
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8004df4:	4b80      	ldr	r3, [pc, #512]	; (8004ff8 <JPEG_Set_Huff_DHTMem+0x20c>)
 8004df6:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004df8:	4b80      	ldr	r3, [pc, #512]	; (8004ffc <JPEG_Set_Huff_DHTMem+0x210>)
 8004dfa:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004dfc:	4b80      	ldr	r3, [pc, #512]	; (8005000 <JPEG_Set_Huff_DHTMem+0x214>)
 8004dfe:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8004e00:	4b80      	ldr	r3, [pc, #512]	; (8005004 <JPEG_Set_Huff_DHTMem+0x218>)
 8004e02:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	623b      	str	r3, [r7, #32]
  index = 16;
 8004e10:	2310      	movs	r3, #16
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e14:	e01d      	b.n	8004e52 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	5cd3      	ldrb	r3, [r2, r3]
 8004e1e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	3b02      	subs	r3, #2
 8004e24:	6979      	ldr	r1, [r7, #20]
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004e2a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	3b03      	subs	r3, #3
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004e36:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	3a04      	subs	r2, #4
 8004e3c:	6979      	ldr	r1, [r7, #20]
 8004e3e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004e40:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	601a      	str	r2, [r3, #0]
    address--;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	3b04      	subs	r3, #4
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d8de      	bhi.n	8004e16 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004e60:	3318      	adds	r3, #24
 8004e62:	623b      	str	r3, [r7, #32]
  index = 12;
 8004e64:	230c      	movs	r3, #12
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e68:	e021      	b.n	8004eae <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4413      	add	r3, r2
 8004e72:	7c1b      	ldrb	r3, [r3, #16]
 8004e74:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	3b02      	subs	r3, #2
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	440b      	add	r3, r1
 8004e7e:	7c1b      	ldrb	r3, [r3, #16]
 8004e80:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e82:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	3b03      	subs	r3, #3
 8004e88:	6979      	ldr	r1, [r7, #20]
 8004e8a:	440b      	add	r3, r1
 8004e8c:	7c1b      	ldrb	r3, [r3, #16]
 8004e8e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e90:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e94:	3a04      	subs	r2, #4
 8004e96:	6979      	ldr	r1, [r7, #20]
 8004e98:	440a      	add	r2, r1
 8004e9a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e9c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	601a      	str	r2, [r3, #0]
    address--;
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	3b04      	subs	r3, #4
 8004ea6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	3b04      	subs	r3, #4
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d8da      	bhi.n	8004e6a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004ebc:	3328      	adds	r3, #40	; 0x28
 8004ebe:	623b      	str	r3, [r7, #32]
  index = 16;
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ec4:	e01d      	b.n	8004f02 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	5cd3      	ldrb	r3, [r2, r3]
 8004ece:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	3b02      	subs	r3, #2
 8004ed4:	69f9      	ldr	r1, [r7, #28]
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004eda:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	3b03      	subs	r3, #3
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004ee6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	3a04      	subs	r2, #4
 8004eec:	69f9      	ldr	r1, [r7, #28]
 8004eee:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004ef0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	601a      	str	r2, [r3, #0]
    address--;
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	3b04      	subs	r3, #4
 8004efa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	3b04      	subs	r3, #4
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d8de      	bhi.n	8004ec6 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f10:	33cc      	adds	r3, #204	; 0xcc
 8004f12:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b3b      	ldr	r3, [pc, #236]	; (8005008 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004f24:	021a      	lsls	r2, r3, #8
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	3b04      	subs	r3, #4
 8004f3e:	623b      	str	r3, [r7, #32]
  index = 160;
 8004f40:	23a0      	movs	r3, #160	; 0xa0
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004f44:	e021      	b.n	8004f8a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	7c1b      	ldrb	r3, [r3, #16]
 8004f50:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	3b02      	subs	r3, #2
 8004f56:	69f9      	ldr	r1, [r7, #28]
 8004f58:	440b      	add	r3, r1
 8004f5a:	7c1b      	ldrb	r3, [r3, #16]
 8004f5c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f5e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	3b03      	subs	r3, #3
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	440b      	add	r3, r1
 8004f68:	7c1b      	ldrb	r3, [r3, #16]
 8004f6a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004f6c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	3a04      	subs	r2, #4
 8004f72:	69f9      	ldr	r1, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004f78:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	601a      	str	r2, [r3, #0]
    address--;
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	3b04      	subs	r3, #4
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d8da      	bhi.n	8004f46 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f98:	33cc      	adds	r3, #204	; 0xcc
 8004f9a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	061a      	lsls	r2, r3, #24
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	041b      	lsls	r3, r3, #16
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004fc6:	33dc      	adds	r3, #220	; 0xdc
 8004fc8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	7bdb      	ldrb	r3, [r3, #15]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	7b92      	ldrb	r2, [r2, #14]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	3b04      	subs	r3, #4
 8004ff0:	623b      	str	r3, [r7, #32]
  index = 12;
 8004ff2:	230c      	movs	r3, #12
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ff6:	e027      	b.n	8005048 <JPEG_Set_Huff_DHTMem+0x25c>
 8004ff8:	08011168 	.word	0x08011168
 8004ffc:	0801121c 	.word	0x0801121c
 8005000:	08011130 	.word	0x08011130
 8005004:	0801114c 	.word	0x0801114c
 8005008:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	3301      	adds	r3, #1
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	5cd3      	ldrb	r3, [r2, r3]
 8005014:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005016:	6939      	ldr	r1, [r7, #16]
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	440b      	add	r3, r1
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005020:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	3b01      	subs	r3, #1
 8005026:	6939      	ldr	r1, [r7, #16]
 8005028:	5ccb      	ldrb	r3, [r1, r3]
 800502a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800502c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800502e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005030:	3a02      	subs	r2, #2
 8005032:	6939      	ldr	r1, [r7, #16]
 8005034:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005036:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	601a      	str	r2, [r3, #0]
    address--;
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	3b04      	subs	r3, #4
 8005040:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	3b04      	subs	r3, #4
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	2b03      	cmp	r3, #3
 800504c:	d8de      	bhi.n	800500c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005056:	33dc      	adds	r3, #220	; 0xdc
 8005058:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	7c5b      	ldrb	r3, [r3, #17]
 8005066:	061a      	lsls	r2, r3, #24
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	431a      	orrs	r2, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	7c1b      	ldrb	r3, [r3, #16]
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005084:	33e8      	adds	r3, #232	; 0xe8
 8005086:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b6d      	ldr	r3, [pc, #436]	; (8005244 <JPEG_Set_Huff_DHTMem+0x458>)
 800508e:	4013      	ands	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	7edb      	ldrb	r3, [r3, #27]
 8005096:	021a      	lsls	r2, r3, #8
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	7e92      	ldrb	r2, [r2, #26]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	3b04      	subs	r3, #4
 80050ae:	623b      	str	r3, [r7, #32]
  index = 8;
 80050b0:	2308      	movs	r3, #8
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050b4:	e021      	b.n	80050fa <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	3301      	adds	r3, #1
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	7c1b      	ldrb	r3, [r3, #16]
 80050c0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80050c2:	6939      	ldr	r1, [r7, #16]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	440b      	add	r3, r1
 80050c8:	3310      	adds	r3, #16
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050ce:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	3b01      	subs	r3, #1
 80050d4:	6939      	ldr	r1, [r7, #16]
 80050d6:	440b      	add	r3, r1
 80050d8:	7c1b      	ldrb	r3, [r3, #16]
 80050da:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80050dc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	3a02      	subs	r2, #2
 80050e2:	6939      	ldr	r1, [r7, #16]
 80050e4:	440a      	add	r2, r1
 80050e6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80050e8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	601a      	str	r2, [r3, #0]
    address--;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	3b04      	subs	r3, #4
 80050f2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	3b04      	subs	r3, #4
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d8da      	bhi.n	80050b6 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005108:	33e8      	adds	r3, #232	; 0xe8
 800510a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	061a      	lsls	r2, r3, #24
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	431a      	orrs	r2, r3
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005136:	33f8      	adds	r3, #248	; 0xf8
 8005138:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <JPEG_Set_Huff_DHTMem+0x458>)
 8005140:	4013      	ands	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	7bdb      	ldrb	r3, [r3, #15]
 8005148:	021a      	lsls	r2, r3, #8
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	7b92      	ldrb	r2, [r2, #14]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	3b04      	subs	r3, #4
 8005160:	623b      	str	r3, [r7, #32]
  index = 12;
 8005162:	230c      	movs	r3, #12
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005166:	e01d      	b.n	80051a4 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	3301      	adds	r3, #1
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	5cd3      	ldrb	r3, [r2, r3]
 8005170:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	440b      	add	r3, r1
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800517c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	3b01      	subs	r3, #1
 8005182:	69b9      	ldr	r1, [r7, #24]
 8005184:	5ccb      	ldrb	r3, [r1, r3]
 8005186:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005188:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	3a02      	subs	r2, #2
 800518e:	69b9      	ldr	r1, [r7, #24]
 8005190:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005192:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	601a      	str	r2, [r3, #0]
    address--;
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	3b04      	subs	r3, #4
 800519c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	3b04      	subs	r3, #4
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d8de      	bhi.n	8005168 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80051b2:	33f8      	adds	r3, #248	; 0xf8
 80051b4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	7c5b      	ldrb	r3, [r3, #17]
 80051c2:	061a      	lsls	r2, r3, #24
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	7c1b      	ldrb	r3, [r3, #16]
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80051e0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80051e4:	623b      	str	r3, [r7, #32]
  index = 160;
 80051e6:	23a0      	movs	r3, #160	; 0xa0
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80051ea:	e021      	b.n	8005230 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	3301      	adds	r3, #1
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4413      	add	r3, r2
 80051f4:	7c1b      	ldrb	r3, [r3, #16]
 80051f6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80051f8:	69b9      	ldr	r1, [r7, #24]
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	440b      	add	r3, r1
 80051fe:	3310      	adds	r3, #16
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005204:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	3b01      	subs	r3, #1
 800520a:	69b9      	ldr	r1, [r7, #24]
 800520c:	440b      	add	r3, r1
 800520e:	7c1b      	ldrb	r3, [r3, #16]
 8005210:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005212:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	3a02      	subs	r2, #2
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	440a      	add	r2, r1
 800521c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800521e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	601a      	str	r2, [r3, #0]
    address--;
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	3b04      	subs	r3, #4
 8005228:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	3b04      	subs	r3, #4
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	2b03      	cmp	r3, #3
 8005234:	d8da      	bhi.n	80051ec <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8005236:	bf00      	nop
 8005238:	372c      	adds	r7, #44	; 0x2c
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	ffff0000 	.word	0xffff0000

08005248 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d006      	beq.n	8005264 <HAL_PWREx_ConfigSupply+0x1c>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d003      	beq.n	8005264 <HAL_PWREx_ConfigSupply+0x1c>
 800525c:	21ef      	movs	r1, #239	; 0xef
 800525e:	481a      	ldr	r0, [pc, #104]	; (80052c8 <HAL_PWREx_ConfigSupply+0x80>)
 8005260:	f7fb fe20 	bl	8000ea4 <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <HAL_PWREx_ConfigSupply+0x84>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d008      	beq.n	8005282 <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005270:	4b16      	ldr	r3, [pc, #88]	; (80052cc <HAL_PWREx_ConfigSupply+0x84>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d001      	beq.n	8005282 <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e01d      	b.n	80052be <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005282:	4b12      	ldr	r3, [pc, #72]	; (80052cc <HAL_PWREx_ConfigSupply+0x84>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f023 0207 	bic.w	r2, r3, #7
 800528a:	4910      	ldr	r1, [pc, #64]	; (80052cc <HAL_PWREx_ConfigSupply+0x84>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4313      	orrs	r3, r2
 8005290:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005292:	f7fc fa8b 	bl	80017ac <HAL_GetTick>
 8005296:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8005298:	e009      	b.n	80052ae <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800529a:	f7fc fa87 	bl	80017ac <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a8:	d901      	bls.n	80052ae <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e007      	b.n	80052be <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <HAL_PWREx_ConfigSupply+0x84>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ba:	d1ee      	bne.n	800529a <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	08010bd4 	.word	0x08010bd4
 80052cc:	58024800 	.word	0x58024800

080052d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f000 bcc9 	b.w	8005c76 <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d028      	beq.n	800533e <HAL_RCC_OscConfig+0x6e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d122      	bne.n	800533e <HAL_RCC_OscConfig+0x6e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11c      	bne.n	800533e <HAL_RCC_OscConfig+0x6e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	d116      	bne.n	800533e <HAL_RCC_OscConfig+0x6e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d110      	bne.n	800533e <HAL_RCC_OscConfig+0x6e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <HAL_RCC_OscConfig+0x6e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_RCC_OscConfig+0x6e>
 8005334:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8005338:	48a2      	ldr	r0, [pc, #648]	; (80055c4 <HAL_RCC_OscConfig+0x2f4>)
 800533a:	f7fb fdb3 	bl	8000ea4 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 809d 	beq.w	8005486 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00e      	beq.n	8005372 <HAL_RCC_OscConfig+0xa2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535c:	d009      	beq.n	8005372 <HAL_RCC_OscConfig+0xa2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005366:	d004      	beq.n	8005372 <HAL_RCC_OscConfig+0xa2>
 8005368:	f240 1175 	movw	r1, #373	; 0x175
 800536c:	4895      	ldr	r0, [pc, #596]	; (80055c4 <HAL_RCC_OscConfig+0x2f4>)
 800536e:	f7fb fd99 	bl	8000ea4 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005372:	4b95      	ldr	r3, [pc, #596]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800537c:	4b92      	ldr	r3, [pc, #584]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2b10      	cmp	r3, #16
 8005386:	d007      	beq.n	8005398 <HAL_RCC_OscConfig+0xc8>
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	2b18      	cmp	r3, #24
 800538c:	d111      	bne.n	80053b2 <HAL_RCC_OscConfig+0xe2>
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d10c      	bne.n	80053b2 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	4b8b      	ldr	r3, [pc, #556]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d06f      	beq.n	8005484 <HAL_RCC_OscConfig+0x1b4>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d16b      	bne.n	8005484 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f000 bc62 	b.w	8005c76 <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_OscConfig+0xfa>
 80053bc:	4b82      	ldr	r3, [pc, #520]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a81      	ldr	r2, [pc, #516]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80053c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e02e      	b.n	8005428 <HAL_RCC_OscConfig+0x158>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x11c>
 80053d2:	4b7d      	ldr	r3, [pc, #500]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a7c      	ldr	r2, [pc, #496]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b7a      	ldr	r3, [pc, #488]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a79      	ldr	r2, [pc, #484]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80053e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e01d      	b.n	8005428 <HAL_RCC_OscConfig+0x158>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f4:	d10c      	bne.n	8005410 <HAL_RCC_OscConfig+0x140>
 80053f6:	4b74      	ldr	r3, [pc, #464]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a73      	ldr	r2, [pc, #460]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80053fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	4b71      	ldr	r3, [pc, #452]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a70      	ldr	r2, [pc, #448]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e00b      	b.n	8005428 <HAL_RCC_OscConfig+0x158>
 8005410:	4b6d      	ldr	r3, [pc, #436]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a6c      	ldr	r2, [pc, #432]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	4b6a      	ldr	r3, [pc, #424]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a69      	ldr	r2, [pc, #420]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d014      	beq.n	800545a <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fc f9bc 	bl	80017ac <HAL_GetTick>
 8005434:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005436:	e009      	b.n	800544c <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005438:	f7fc f9b8 	bl	80017ac <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d902      	bls.n	800544c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	f000 bc15 	b.w	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800544c:	4b5e      	ldr	r3, [pc, #376]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ef      	beq.n	8005438 <HAL_RCC_OscConfig+0x168>
 8005458:	e015      	b.n	8005486 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7fc f9a7 	bl	80017ac <HAL_GetTick>
 800545e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005460:	e009      	b.n	8005476 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005462:	f7fc f9a3 	bl	80017ac <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b64      	cmp	r3, #100	; 0x64
 800546e:	d902      	bls.n	8005476 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	f000 bc00 	b.w	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005476:	4b54      	ldr	r3, [pc, #336]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1ef      	bne.n	8005462 <HAL_RCC_OscConfig+0x192>
 8005482:	e000      	b.n	8005486 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80d8 	beq.w	8005644 <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d018      	beq.n	80054ce <HAL_RCC_OscConfig+0x1fe>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d014      	beq.n	80054ce <HAL_RCC_OscConfig+0x1fe>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d010      	beq.n	80054ce <HAL_RCC_OscConfig+0x1fe>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b09      	cmp	r3, #9
 80054b2:	d00c      	beq.n	80054ce <HAL_RCC_OscConfig+0x1fe>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b11      	cmp	r3, #17
 80054ba:	d008      	beq.n	80054ce <HAL_RCC_OscConfig+0x1fe>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b19      	cmp	r3, #25
 80054c2:	d004      	beq.n	80054ce <HAL_RCC_OscConfig+0x1fe>
 80054c4:	f240 11a9 	movw	r1, #425	; 0x1a9
 80054c8:	483e      	ldr	r0, [pc, #248]	; (80055c4 <HAL_RCC_OscConfig+0x2f4>)
 80054ca:	f7fb fceb 	bl	8000ea4 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b7f      	cmp	r3, #127	; 0x7f
 80054d4:	d904      	bls.n	80054e0 <HAL_RCC_OscConfig+0x210>
 80054d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054da:	483a      	ldr	r0, [pc, #232]	; (80055c4 <HAL_RCC_OscConfig+0x2f4>)
 80054dc:	f7fb fce2 	bl	8000ea4 <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e0:	4b39      	ldr	r3, [pc, #228]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054ea:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <HAL_RCC_OscConfig+0x236>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b18      	cmp	r3, #24
 80054fa:	d149      	bne.n	8005590 <HAL_RCC_OscConfig+0x2c0>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d144      	bne.n	8005590 <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005506:	4b30      	ldr	r3, [pc, #192]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x24e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e3ab      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800551e:	4b2a      	ldr	r3, [pc, #168]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 0219 	bic.w	r2, r3, #25
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4927      	ldr	r1, [pc, #156]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fc f93c 	bl	80017ac <HAL_GetTick>
 8005534:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005538:	f7fc f938 	bl	80017ac <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e395      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800554a:	4b1f      	ldr	r3, [pc, #124]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005556:	f7fc f957 	bl	8001808 <HAL_GetREVID>
 800555a:	4602      	mov	r2, r0
 800555c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005560:	429a      	cmp	r2, r3
 8005562:	d80a      	bhi.n	800557a <HAL_RCC_OscConfig+0x2aa>
 8005564:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	4915      	ldr	r1, [pc, #84]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 8005574:	4313      	orrs	r3, r2
 8005576:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005578:	e064      	b.n	8005644 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	490f      	ldr	r1, [pc, #60]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800558a:	4313      	orrs	r3, r2
 800558c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800558e:	e059      	b.n	8005644 <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d03c      	beq.n	8005612 <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 0219 	bic.w	r2, r3, #25
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4908      	ldr	r1, [pc, #32]	; (80055c8 <HAL_RCC_OscConfig+0x2f8>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055aa:	f7fc f8ff 	bl	80017ac <HAL_GetTick>
 80055ae:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055b0:	e00c      	b.n	80055cc <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055b2:	f7fc f8fb 	bl	80017ac <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d905      	bls.n	80055cc <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e358      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
 80055c4:	08010c10 	.word	0x08010c10
 80055c8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055cc:	4b95      	ldr	r3, [pc, #596]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0ec      	beq.n	80055b2 <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	f7fc f916 	bl	8001808 <HAL_GetREVID>
 80055dc:	4602      	mov	r2, r0
 80055de:	f241 0303 	movw	r3, #4099	; 0x1003
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d80a      	bhi.n	80055fc <HAL_RCC_OscConfig+0x32c>
 80055e6:	4b8f      	ldr	r3, [pc, #572]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	031b      	lsls	r3, r3, #12
 80055f4:	498b      	ldr	r1, [pc, #556]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
 80055fa:	e023      	b.n	8005644 <HAL_RCC_OscConfig+0x374>
 80055fc:	4b89      	ldr	r3, [pc, #548]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	061b      	lsls	r3, r3, #24
 800560a:	4986      	ldr	r1, [pc, #536]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	e018      	b.n	8005644 <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005612:	4b84      	ldr	r3, [pc, #528]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a83      	ldr	r2, [pc, #524]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fc f8c5 	bl	80017ac <HAL_GetTick>
 8005622:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005626:	f7fc f8c1 	bl	80017ac <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e31e      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005638:	4b7a      	ldr	r3, [pc, #488]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f0      	bne.n	8005626 <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80a5 	beq.w	800579c <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_RCC_OscConfig+0x39c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	2b80      	cmp	r3, #128	; 0x80
 8005660:	d004      	beq.n	800566c <HAL_RCC_OscConfig+0x39c>
 8005662:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8005666:	4870      	ldr	r0, [pc, #448]	; (8005828 <HAL_RCC_OscConfig+0x558>)
 8005668:	f7fb fc1c 	bl	8000ea4 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	2b1f      	cmp	r3, #31
 8005672:	d904      	bls.n	800567e <HAL_RCC_OscConfig+0x3ae>
 8005674:	f240 11fb 	movw	r1, #507	; 0x1fb
 8005678:	486b      	ldr	r0, [pc, #428]	; (8005828 <HAL_RCC_OscConfig+0x558>)
 800567a:	f7fb fc13 	bl	8000ea4 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800567e:	4b69      	ldr	r3, [pc, #420]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005686:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005688:	4b66      	ldr	r3, [pc, #408]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d007      	beq.n	80056a4 <HAL_RCC_OscConfig+0x3d4>
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b18      	cmp	r3, #24
 8005698:	d12d      	bne.n	80056f6 <HAL_RCC_OscConfig+0x426>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d128      	bne.n	80056f6 <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056a4:	4b5f      	ldr	r3, [pc, #380]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_RCC_OscConfig+0x3ec>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e2dc      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056bc:	f7fc f8a4 	bl	8001808 <HAL_GetREVID>
 80056c0:	4602      	mov	r2, r0
 80056c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d80a      	bhi.n	80056e0 <HAL_RCC_OscConfig+0x410>
 80056ca:	4b56      	ldr	r3, [pc, #344]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	069b      	lsls	r3, r3, #26
 80056d8:	4952      	ldr	r1, [pc, #328]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056de:	e05d      	b.n	800579c <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056e0:	4b50      	ldr	r3, [pc, #320]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	061b      	lsls	r3, r3, #24
 80056ee:	494d      	ldr	r1, [pc, #308]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056f4:	e052      	b.n	800579c <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d035      	beq.n	800576a <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056fe:	4b49      	ldr	r3, [pc, #292]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a48      	ldr	r2, [pc, #288]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570a:	f7fc f84f 	bl	80017ac <HAL_GetTick>
 800570e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005712:	f7fc f84b 	bl	80017ac <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e2a8      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005724:	4b3f      	ldr	r3, [pc, #252]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005730:	f7fc f86a 	bl	8001808 <HAL_GetREVID>
 8005734:	4602      	mov	r2, r0
 8005736:	f241 0303 	movw	r3, #4099	; 0x1003
 800573a:	429a      	cmp	r2, r3
 800573c:	d80a      	bhi.n	8005754 <HAL_RCC_OscConfig+0x484>
 800573e:	4b39      	ldr	r3, [pc, #228]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	069b      	lsls	r3, r3, #26
 800574c:	4935      	ldr	r1, [pc, #212]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 800574e:	4313      	orrs	r3, r2
 8005750:	604b      	str	r3, [r1, #4]
 8005752:	e023      	b.n	800579c <HAL_RCC_OscConfig+0x4cc>
 8005754:	4b33      	ldr	r3, [pc, #204]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	061b      	lsls	r3, r3, #24
 8005762:	4930      	ldr	r1, [pc, #192]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005764:	4313      	orrs	r3, r2
 8005766:	60cb      	str	r3, [r1, #12]
 8005768:	e018      	b.n	800579c <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800576a:	4b2e      	ldr	r3, [pc, #184]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2d      	ldr	r2, [pc, #180]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005776:	f7fc f819 	bl	80017ac <HAL_GetTick>
 800577a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800577e:	f7fc f815 	bl	80017ac <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e272      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005790:	4b24      	ldr	r3, [pc, #144]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f0      	bne.n	800577e <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d047      	beq.n	8005838 <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_RCC_OscConfig+0x4f2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d004      	beq.n	80057c2 <HAL_RCC_OscConfig+0x4f2>
 80057b8:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80057bc:	481a      	ldr	r0, [pc, #104]	; (8005828 <HAL_RCC_OscConfig+0x558>)
 80057be:	f7fb fb71 	bl	8000ea4 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d019      	beq.n	80057fe <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ca:	4b16      	ldr	r3, [pc, #88]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80057cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ce:	4a15      	ldr	r2, [pc, #84]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d6:	f7fb ffe9 	bl	80017ac <HAL_GetTick>
 80057da:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057de:	f7fb ffe5 	bl	80017ac <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e242      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057f0:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 80057f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCC_OscConfig+0x50e>
 80057fc:	e01c      	b.n	8005838 <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057fe:	4b09      	ldr	r3, [pc, #36]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005802:	4a08      	ldr	r2, [pc, #32]	; (8005824 <HAL_RCC_OscConfig+0x554>)
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fb ffcf 	bl	80017ac <HAL_GetTick>
 800580e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005810:	e00c      	b.n	800582c <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005812:	f7fb ffcb 	bl	80017ac <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d905      	bls.n	800582c <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e228      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
 8005824:	58024400 	.word	0x58024400
 8005828:	08010c10 	.word	0x08010c10
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800582c:	4b71      	ldr	r3, [pc, #452]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800582e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ec      	bne.n	8005812 <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d043      	beq.n	80058cc <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_RCC_OscConfig+0x58e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d004      	beq.n	800585e <HAL_RCC_OscConfig+0x58e>
 8005854:	f240 2167 	movw	r1, #615	; 0x267
 8005858:	4867      	ldr	r0, [pc, #412]	; (80059f8 <HAL_RCC_OscConfig+0x728>)
 800585a:	f7fb fb23 	bl	8000ea4 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d019      	beq.n	800589a <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005866:	4b63      	ldr	r3, [pc, #396]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a62      	ldr	r2, [pc, #392]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800586c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005872:	f7fb ff9b 	bl	80017ac <HAL_GetTick>
 8005876:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800587a:	f7fb ff97 	bl	80017ac <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e1f4      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800588c:	4b59      	ldr	r3, [pc, #356]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCC_OscConfig+0x5aa>
 8005898:	e018      	b.n	80058cc <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800589a:	4b56      	ldr	r3, [pc, #344]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a55      	ldr	r2, [pc, #340]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 80058a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058a6:	f7fb ff81 	bl	80017ac <HAL_GetTick>
 80058aa:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058ae:	f7fb ff7d 	bl	80017ac <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e1da      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058c0:	4b4c      	ldr	r3, [pc, #304]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f0      	bne.n	80058ae <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8099 	beq.w	8005a0c <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <HAL_RCC_OscConfig+0x62c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d008      	beq.n	80058fc <HAL_RCC_OscConfig+0x62c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d004      	beq.n	80058fc <HAL_RCC_OscConfig+0x62c>
 80058f2:	f240 2191 	movw	r1, #657	; 0x291
 80058f6:	4840      	ldr	r0, [pc, #256]	; (80059f8 <HAL_RCC_OscConfig+0x728>)
 80058f8:	f7fb fad4 	bl	8000ea4 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058fc:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <HAL_RCC_OscConfig+0x72c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3e      	ldr	r2, [pc, #248]	; (80059fc <HAL_RCC_OscConfig+0x72c>)
 8005902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005908:	f7fb ff50 	bl	80017ac <HAL_GetTick>
 800590c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005910:	f7fb ff4c 	bl	80017ac <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b64      	cmp	r3, #100	; 0x64
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e1a9      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005922:	4b36      	ldr	r3, [pc, #216]	; (80059fc <HAL_RCC_OscConfig+0x72c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d106      	bne.n	8005944 <HAL_RCC_OscConfig+0x674>
 8005936:	4b2f      	ldr	r3, [pc, #188]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593a:	4a2e      	ldr	r2, [pc, #184]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	6713      	str	r3, [r2, #112]	; 0x70
 8005942:	e02d      	b.n	80059a0 <HAL_RCC_OscConfig+0x6d0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10c      	bne.n	8005966 <HAL_RCC_OscConfig+0x696>
 800594c:	4b29      	ldr	r3, [pc, #164]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	6713      	str	r3, [r2, #112]	; 0x70
 8005958:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	4a25      	ldr	r2, [pc, #148]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800595e:	f023 0304 	bic.w	r3, r3, #4
 8005962:	6713      	str	r3, [r2, #112]	; 0x70
 8005964:	e01c      	b.n	80059a0 <HAL_RCC_OscConfig+0x6d0>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b05      	cmp	r3, #5
 800596c:	d10c      	bne.n	8005988 <HAL_RCC_OscConfig+0x6b8>
 800596e:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 8005974:	f043 0304 	orr.w	r3, r3, #4
 8005978:	6713      	str	r3, [r2, #112]	; 0x70
 800597a:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	6713      	str	r3, [r2, #112]	; 0x70
 8005986:	e00b      	b.n	80059a0 <HAL_RCC_OscConfig+0x6d0>
 8005988:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800598a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598c:	4a19      	ldr	r2, [pc, #100]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	6713      	str	r3, [r2, #112]	; 0x70
 8005994:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	4a16      	ldr	r2, [pc, #88]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 800599a:	f023 0304 	bic.w	r3, r3, #4
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fb ff00 	bl	80017ac <HAL_GetTick>
 80059ac:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b0:	f7fb fefc 	bl	80017ac <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e157      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_RCC_OscConfig+0x724>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0ee      	beq.n	80059b0 <HAL_RCC_OscConfig+0x6e0>
 80059d2:	e01b      	b.n	8005a0c <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d4:	f7fb feea 	bl	80017ac <HAL_GetTick>
 80059d8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059da:	e011      	b.n	8005a00 <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059dc:	f7fb fee6 	bl	80017ac <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d908      	bls.n	8005a00 <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e141      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	08010c10 	.word	0x08010c10
 80059fc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a00:	4b9f      	ldr	r3, [pc, #636]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e7      	bne.n	80059dc <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00c      	beq.n	8005a2e <HAL_RCC_OscConfig+0x75e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d008      	beq.n	8005a2e <HAL_RCC_OscConfig+0x75e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d004      	beq.n	8005a2e <HAL_RCC_OscConfig+0x75e>
 8005a24:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005a28:	4896      	ldr	r0, [pc, #600]	; (8005c84 <HAL_RCC_OscConfig+0x9b4>)
 8005a2a:	f7fb fa3b 	bl	8000ea4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 811e 	beq.w	8005c74 <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a38:	4b91      	ldr	r3, [pc, #580]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a40:	2b18      	cmp	r3, #24
 8005a42:	f000 8115 	beq.w	8005c70 <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	f040 80f6 	bne.w	8005c3c <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d010      	beq.n	8005a7a <HAL_RCC_OscConfig+0x7aa>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00c      	beq.n	8005a7a <HAL_RCC_OscConfig+0x7aa>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d008      	beq.n	8005a7a <HAL_RCC_OscConfig+0x7aa>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d004      	beq.n	8005a7a <HAL_RCC_OscConfig+0x7aa>
 8005a70:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005a74:	4883      	ldr	r0, [pc, #524]	; (8005c84 <HAL_RCC_OscConfig+0x9b4>)
 8005a76:	f7fb fa15 	bl	8000ea4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_RCC_OscConfig+0x7ba>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	2b3f      	cmp	r3, #63	; 0x3f
 8005a88:	d904      	bls.n	8005a94 <HAL_RCC_OscConfig+0x7c4>
 8005a8a:	f240 21cd 	movw	r1, #717	; 0x2cd
 8005a8e:	487d      	ldr	r0, [pc, #500]	; (8005c84 <HAL_RCC_OscConfig+0x9b4>)
 8005a90:	f7fb fa08 	bl	8000ea4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d904      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x7d6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa4:	d904      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x7e0>
 8005aa6:	f240 21ce 	movw	r1, #718	; 0x2ce
 8005aaa:	4876      	ldr	r0, [pc, #472]	; (8005c84 <HAL_RCC_OscConfig+0x9b4>)
 8005aac:	f7fb f9fa 	bl	8000ea4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x7f0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	2b80      	cmp	r3, #128	; 0x80
 8005abe:	d904      	bls.n	8005aca <HAL_RCC_OscConfig+0x7fa>
 8005ac0:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005ac4:	486f      	ldr	r0, [pc, #444]	; (8005c84 <HAL_RCC_OscConfig+0x9b4>)
 8005ac6:	f7fb f9ed 	bl	8000ea4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_RCC_OscConfig+0x80a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d904      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x814>
 8005ada:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8005ade:	4869      	ldr	r0, [pc, #420]	; (8005c84 <HAL_RCC_OscConfig+0x9b4>)
 8005ae0:	f7fb f9e0 	bl	8000ea4 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_RCC_OscConfig+0x824>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	2b80      	cmp	r3, #128	; 0x80
 8005af2:	d904      	bls.n	8005afe <HAL_RCC_OscConfig+0x82e>
 8005af4:	f240 21d1 	movw	r1, #721	; 0x2d1
 8005af8:	4862      	ldr	r0, [pc, #392]	; (8005c84 <HAL_RCC_OscConfig+0x9b4>)
 8005afa:	f7fb f9d3 	bl	8000ea4 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b06:	d304      	bcc.n	8005b12 <HAL_RCC_OscConfig+0x842>
 8005b08:	f240 21d2 	movw	r1, #722	; 0x2d2
 8005b0c:	485d      	ldr	r0, [pc, #372]	; (8005c84 <HAL_RCC_OscConfig+0x9b4>)
 8005b0e:	f7fb f9c9 	bl	8000ea4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b12:	4b5b      	ldr	r3, [pc, #364]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a5a      	ldr	r2, [pc, #360]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005b18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1e:	f7fb fe45 	bl	80017ac <HAL_GetTick>
 8005b22:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b26:	f7fb fe41 	bl	80017ac <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e09e      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b38:	4b51      	ldr	r3, [pc, #324]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f0      	bne.n	8005b26 <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b44:	4b4e      	ldr	r3, [pc, #312]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b48:	4b4f      	ldr	r3, [pc, #316]	; (8005c88 <HAL_RCC_OscConfig+0x9b8>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b54:	0112      	lsls	r2, r2, #4
 8005b56:	430a      	orrs	r2, r1
 8005b58:	4949      	ldr	r1, [pc, #292]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	628b      	str	r3, [r1, #40]	; 0x28
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	3b01      	subs	r3, #1
 8005b64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	025b      	lsls	r3, r3, #9
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b86:	3b01      	subs	r3, #1
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b8e:	493c      	ldr	r1, [pc, #240]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005b94:	4b3a      	ldr	r3, [pc, #232]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a39      	ldr	r2, [pc, #228]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ba0:	4b37      	ldr	r3, [pc, #220]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba4:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <HAL_RCC_OscConfig+0x9bc>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005bac:	00d2      	lsls	r2, r2, #3
 8005bae:	4934      	ldr	r1, [pc, #208]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bb4:	4b32      	ldr	r3, [pc, #200]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	f023 020c 	bic.w	r2, r3, #12
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	492f      	ldr	r1, [pc, #188]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bc6:	4b2e      	ldr	r3, [pc, #184]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f023 0202 	bic.w	r2, r3, #2
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	492b      	ldr	r1, [pc, #172]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bd8:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	4a28      	ldr	r2, [pc, #160]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be4:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005bf0:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	4a22      	ldr	r2, [pc, #136]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005bfc:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c08:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c14:	f7fb fdca 	bl	80017ac <HAL_GetTick>
 8005c18:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1c:	f7fb fdc6 	bl	80017ac <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e023      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c2e:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x94c>
 8005c3a:	e01b      	b.n	8005c74 <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0f      	ldr	r2, [pc, #60]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fb fdb0 	bl	80017ac <HAL_GetTick>
 8005c4c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c50:	f7fb fdac 	bl	80017ac <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e009      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c62:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <HAL_RCC_OscConfig+0x9b0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f0      	bne.n	8005c50 <HAL_RCC_OscConfig+0x980>
 8005c6e:	e001      	b.n	8005c74 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3728      	adds	r7, #40	; 0x28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	58024400 	.word	0x58024400
 8005c84:	08010c10 	.word	0x08010c10
 8005c88:	fffffc0c 	.word	0xfffffc0c
 8005c8c:	ffff0007 	.word	0xffff0007

08005c90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e345      	b.n	8006330 <HAL_RCC_ClockConfig+0x6a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x24>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b3f      	cmp	r3, #63	; 0x3f
 8005cb2:	d904      	bls.n	8005cbe <HAL_RCC_ClockConfig+0x2e>
 8005cb4:	f240 3152 	movw	r1, #850	; 0x352
 8005cb8:	4827      	ldr	r0, [pc, #156]	; (8005d58 <HAL_RCC_ClockConfig+0xc8>)
 8005cba:	f7fb f8f3 	bl	8000ea4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d031      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d02e      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d02b      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d028      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d025      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d022      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b06      	cmp	r3, #6
 8005ce6:	d01f      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b07      	cmp	r3, #7
 8005cec:	d01c      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d019      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b09      	cmp	r3, #9
 8005cf8:	d016      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b0a      	cmp	r3, #10
 8005cfe:	d013      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	d010      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d00d      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b0d      	cmp	r3, #13
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b0e      	cmp	r3, #14
 8005d16:	d007      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b0f      	cmp	r3, #15
 8005d1c:	d004      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x98>
 8005d1e:	f240 3153 	movw	r1, #851	; 0x353
 8005d22:	480d      	ldr	r0, [pc, #52]	; (8005d58 <HAL_RCC_ClockConfig+0xc8>)
 8005d24:	f7fb f8be 	bl	8000ea4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d28:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <HAL_RCC_ClockConfig+0xcc>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d914      	bls.n	8005d60 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <HAL_RCC_ClockConfig+0xcc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f023 020f 	bic.w	r2, r3, #15
 8005d3e:	4907      	ldr	r1, [pc, #28]	; (8005d5c <HAL_RCC_ClockConfig+0xcc>)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <HAL_RCC_ClockConfig+0xcc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d005      	beq.n	8005d60 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e2eb      	b.n	8006330 <HAL_RCC_ClockConfig+0x6a0>
 8005d58:	08010c10 	.word	0x08010c10
 8005d5c:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d029      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	4b9a      	ldr	r3, [pc, #616]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d921      	bls.n	8005dc0 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d014      	beq.n	8005dae <HAL_RCC_ClockConfig+0x11e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d010      	beq.n	8005dae <HAL_RCC_ClockConfig+0x11e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b50      	cmp	r3, #80	; 0x50
 8005d92:	d00c      	beq.n	8005dae <HAL_RCC_ClockConfig+0x11e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b60      	cmp	r3, #96	; 0x60
 8005d9a:	d008      	beq.n	8005dae <HAL_RCC_ClockConfig+0x11e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b70      	cmp	r3, #112	; 0x70
 8005da2:	d004      	beq.n	8005dae <HAL_RCC_ClockConfig+0x11e>
 8005da4:	f240 316e 	movw	r1, #878	; 0x36e
 8005da8:	488d      	ldr	r0, [pc, #564]	; (8005fe0 <HAL_RCC_ClockConfig+0x350>)
 8005daa:	f7fb f87b 	bl	8000ea4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dae:	4b8b      	ldr	r3, [pc, #556]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	4988      	ldr	r1, [pc, #544]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d029      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695a      	ldr	r2, [r3, #20]
 8005dd0:	4b82      	ldr	r3, [pc, #520]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d921      	bls.n	8005e20 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d014      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x17e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d010      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x17e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	2b50      	cmp	r3, #80	; 0x50
 8005df2:	d00c      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x17e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	2b60      	cmp	r3, #96	; 0x60
 8005dfa:	d008      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x17e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	2b70      	cmp	r3, #112	; 0x70
 8005e02:	d004      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x17e>
 8005e04:	f44f 715e 	mov.w	r1, #888	; 0x378
 8005e08:	4875      	ldr	r0, [pc, #468]	; (8005fe0 <HAL_RCC_ClockConfig+0x350>)
 8005e0a:	f7fb f84b 	bl	8000ea4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e0e:	4b73      	ldr	r3, [pc, #460]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	4970      	ldr	r1, [pc, #448]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02d      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	4b6a      	ldr	r3, [pc, #424]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d925      	bls.n	8005e88 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d018      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x1e6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4c:	d013      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x1e6>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e56:	d00e      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x1e6>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e60:	d009      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x1e6>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e6a:	d004      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x1e6>
 8005e6c:	f240 3182 	movw	r1, #898	; 0x382
 8005e70:	485b      	ldr	r0, [pc, #364]	; (8005fe0 <HAL_RCC_ClockConfig+0x350>)
 8005e72:	f7fb f817 	bl	8000ea4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e76:	4b59      	ldr	r3, [pc, #356]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	4956      	ldr	r1, [pc, #344]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d029      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	4b50      	ldr	r3, [pc, #320]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d921      	bls.n	8005ee8 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d014      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x246>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d010      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x246>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	2b50      	cmp	r3, #80	; 0x50
 8005eba:	d00c      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x246>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	2b60      	cmp	r3, #96	; 0x60
 8005ec2:	d008      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x246>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	2b70      	cmp	r3, #112	; 0x70
 8005eca:	d004      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x246>
 8005ecc:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8005ed0:	4843      	ldr	r0, [pc, #268]	; (8005fe0 <HAL_RCC_ClockConfig+0x350>)
 8005ed2:	f7fa ffe7 	bl	8000ea4 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ed6:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	493e      	ldr	r1, [pc, #248]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d039      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	4b38      	ldr	r3, [pc, #224]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d931      	bls.n	8005f68 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d024      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d020      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b09      	cmp	r3, #9
 8005f1a:	d01c      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	2b0a      	cmp	r3, #10
 8005f22:	d018      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	2b0b      	cmp	r3, #11
 8005f2a:	d014      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b0c      	cmp	r3, #12
 8005f32:	d010      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b0d      	cmp	r3, #13
 8005f3a:	d00c      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b0e      	cmp	r3, #14
 8005f42:	d008      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b0f      	cmp	r3, #15
 8005f4a:	d004      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2c6>
 8005f4c:	f240 3197 	movw	r1, #919	; 0x397
 8005f50:	4823      	ldr	r0, [pc, #140]	; (8005fe0 <HAL_RCC_ClockConfig+0x350>)
 8005f52:	f7fa ffa7 	bl	8000ea4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f56:	4b21      	ldr	r3, [pc, #132]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	f023 020f 	bic.w	r2, r3, #15
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	491e      	ldr	r1, [pc, #120]	; (8005fdc <HAL_RCC_ClockConfig+0x34c>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80a2 	beq.w	80060ba <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d032      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f86:	d02d      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005f90:	d028      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f9a:	d023      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005fa4:	d01e      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fae:	d019      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005fb8:	d014      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005fc2:	d00f      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005fce:	f240 319f 	movw	r1, #927	; 0x39f
 8005fd2:	4803      	ldr	r0, [pc, #12]	; (8005fe0 <HAL_RCC_ClockConfig+0x350>)
 8005fd4:	f7fa ff66 	bl	8000ea4 <assert_failed>
 8005fd8:	e004      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x354>
 8005fda:	bf00      	nop
 8005fdc:	58024400 	.word	0x58024400
 8005fe0:	08010c10 	.word	0x08010c10
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d010      	beq.n	800600e <HAL_RCC_ClockConfig+0x37e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00c      	beq.n	800600e <HAL_RCC_ClockConfig+0x37e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d008      	beq.n	800600e <HAL_RCC_ClockConfig+0x37e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b03      	cmp	r3, #3
 8006002:	d004      	beq.n	800600e <HAL_RCC_ClockConfig+0x37e>
 8006004:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8006008:	4858      	ldr	r0, [pc, #352]	; (800616c <HAL_RCC_ClockConfig+0x4dc>)
 800600a:	f7fa ff4b 	bl	8000ea4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800600e:	4b58      	ldr	r3, [pc, #352]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	4955      	ldr	r1, [pc, #340]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 800601c:	4313      	orrs	r3, r2
 800601e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d107      	bne.n	8006038 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006028:	4b51      	ldr	r3, [pc, #324]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d121      	bne.n	8006078 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e17b      	b.n	8006330 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b03      	cmp	r3, #3
 800603e:	d107      	bne.n	8006050 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006040:	4b4b      	ldr	r3, [pc, #300]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d115      	bne.n	8006078 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e16f      	b.n	8006330 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d107      	bne.n	8006068 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006058:	4b45      	ldr	r3, [pc, #276]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e163      	b.n	8006330 <HAL_RCC_ClockConfig+0x6a0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006068:	4b41      	ldr	r3, [pc, #260]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e15b      	b.n	8006330 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006078:	4b3d      	ldr	r3, [pc, #244]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f023 0207 	bic.w	r2, r3, #7
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	493a      	ldr	r1, [pc, #232]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 8006086:	4313      	orrs	r3, r2
 8006088:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608a:	f7fb fb8f 	bl	80017ac <HAL_GetTick>
 800608e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006090:	e00a      	b.n	80060a8 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006092:	f7fb fb8b 	bl	80017ac <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e143      	b.n	8006330 <HAL_RCC_ClockConfig+0x6a0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a8:	4b31      	ldr	r3, [pc, #196]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d1eb      	bne.n	8006092 <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d039      	beq.n	800613a <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	4b29      	ldr	r3, [pc, #164]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d231      	bcs.n	800613a <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d024      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d020      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b09      	cmp	r3, #9
 80060ec:	d01c      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	2b0a      	cmp	r3, #10
 80060f4:	d018      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b0b      	cmp	r3, #11
 80060fc:	d014      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b0c      	cmp	r3, #12
 8006104:	d010      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b0d      	cmp	r3, #13
 800610c:	d00c      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b0e      	cmp	r3, #14
 8006114:	d008      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d004      	beq.n	8006128 <HAL_RCC_ClockConfig+0x498>
 800611e:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8006122:	4812      	ldr	r0, [pc, #72]	; (800616c <HAL_RCC_ClockConfig+0x4dc>)
 8006124:	f7fa febe 	bl	8000ea4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f023 020f 	bic.w	r2, r3, #15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	490e      	ldr	r1, [pc, #56]	; (8006170 <HAL_RCC_ClockConfig+0x4e0>)
 8006136:	4313      	orrs	r3, r2
 8006138:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800613a:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <HAL_RCC_ClockConfig+0x4e4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d217      	bcs.n	8006178 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <HAL_RCC_ClockConfig+0x4e4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f023 020f 	bic.w	r2, r3, #15
 8006150:	4908      	ldr	r1, [pc, #32]	; (8006174 <HAL_RCC_ClockConfig+0x4e4>)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	4313      	orrs	r3, r2
 8006156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_RCC_ClockConfig+0x4e4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d008      	beq.n	8006178 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e0e2      	b.n	8006330 <HAL_RCC_ClockConfig+0x6a0>
 800616a:	bf00      	nop
 800616c:	08010c10 	.word	0x08010c10
 8006170:	58024400 	.word	0x58024400
 8006174:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d029      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	4b6b      	ldr	r3, [pc, #428]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006190:	429a      	cmp	r2, r3
 8006192:	d221      	bcs.n	80061d8 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d014      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x536>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b40      	cmp	r3, #64	; 0x40
 80061a2:	d010      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x536>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b50      	cmp	r3, #80	; 0x50
 80061aa:	d00c      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x536>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b60      	cmp	r3, #96	; 0x60
 80061b2:	d008      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x536>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b70      	cmp	r3, #112	; 0x70
 80061ba:	d004      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x536>
 80061bc:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80061c0:	485e      	ldr	r0, [pc, #376]	; (800633c <HAL_RCC_ClockConfig+0x6ac>)
 80061c2:	f7fa fe6f 	bl	8000ea4 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061c6:	4b5c      	ldr	r3, [pc, #368]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	4959      	ldr	r1, [pc, #356]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d029      	beq.n	8006238 <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	4b53      	ldr	r3, [pc, #332]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d221      	bcs.n	8006238 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d014      	beq.n	8006226 <HAL_RCC_ClockConfig+0x596>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	2b40      	cmp	r3, #64	; 0x40
 8006202:	d010      	beq.n	8006226 <HAL_RCC_ClockConfig+0x596>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	2b50      	cmp	r3, #80	; 0x50
 800620a:	d00c      	beq.n	8006226 <HAL_RCC_ClockConfig+0x596>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	2b60      	cmp	r3, #96	; 0x60
 8006212:	d008      	beq.n	8006226 <HAL_RCC_ClockConfig+0x596>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	2b70      	cmp	r3, #112	; 0x70
 800621a:	d004      	beq.n	8006226 <HAL_RCC_ClockConfig+0x596>
 800621c:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006220:	4846      	ldr	r0, [pc, #280]	; (800633c <HAL_RCC_ClockConfig+0x6ac>)
 8006222:	f7fa fe3f 	bl	8000ea4 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006226:	4b44      	ldr	r3, [pc, #272]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	4941      	ldr	r1, [pc, #260]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 8006234:	4313      	orrs	r3, r2
 8006236:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	d02d      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	4b3b      	ldr	r3, [pc, #236]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006250:	429a      	cmp	r2, r3
 8006252:	d225      	bcs.n	80062a0 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d018      	beq.n	800628e <HAL_RCC_ClockConfig+0x5fe>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006264:	d013      	beq.n	800628e <HAL_RCC_ClockConfig+0x5fe>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800626e:	d00e      	beq.n	800628e <HAL_RCC_ClockConfig+0x5fe>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006278:	d009      	beq.n	800628e <HAL_RCC_ClockConfig+0x5fe>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006282:	d004      	beq.n	800628e <HAL_RCC_ClockConfig+0x5fe>
 8006284:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8006288:	482c      	ldr	r0, [pc, #176]	; (800633c <HAL_RCC_ClockConfig+0x6ac>)
 800628a:	f7fa fe0b 	bl	8000ea4 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800628e:	4b2a      	ldr	r3, [pc, #168]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	4927      	ldr	r1, [pc, #156]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 800629c:	4313      	orrs	r3, r2
 800629e:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d029      	beq.n	8006300 <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	4b21      	ldr	r3, [pc, #132]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d221      	bcs.n	8006300 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d014      	beq.n	80062ee <HAL_RCC_ClockConfig+0x65e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d010      	beq.n	80062ee <HAL_RCC_ClockConfig+0x65e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	2b50      	cmp	r3, #80	; 0x50
 80062d2:	d00c      	beq.n	80062ee <HAL_RCC_ClockConfig+0x65e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	2b60      	cmp	r3, #96	; 0x60
 80062da:	d008      	beq.n	80062ee <HAL_RCC_ClockConfig+0x65e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	2b70      	cmp	r3, #112	; 0x70
 80062e2:	d004      	beq.n	80062ee <HAL_RCC_ClockConfig+0x65e>
 80062e4:	f240 4112 	movw	r1, #1042	; 0x412
 80062e8:	4814      	ldr	r0, [pc, #80]	; (800633c <HAL_RCC_ClockConfig+0x6ac>)
 80062ea:	f7fa fddb 	bl	8000ea4 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	490f      	ldr	r1, [pc, #60]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006300:	f000 f824 	bl	800634c <HAL_RCC_GetSysClockFreq>
 8006304:	4601      	mov	r1, r0
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <HAL_RCC_ClockConfig+0x6a8>)
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	4a0b      	ldr	r2, [pc, #44]	; (8006340 <HAL_RCC_ClockConfig+0x6b0>)
 8006312:	5cd3      	ldrb	r3, [r2, r3]
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	fa21 f303 	lsr.w	r3, r1, r3
 800631c:	4a09      	ldr	r2, [pc, #36]	; (8006344 <HAL_RCC_ClockConfig+0x6b4>)
 800631e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006320:	4b09      	ldr	r3, [pc, #36]	; (8006348 <HAL_RCC_ClockConfig+0x6b8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f7fb f9f7 	bl	8001718 <HAL_InitTick>
 800632a:	4603      	mov	r3, r0
 800632c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800632e:	7afb      	ldrb	r3, [r7, #11]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	58024400 	.word	0x58024400
 800633c:	08010c10 	.word	0x08010c10
 8006340:	08011118 	.word	0x08011118
 8006344:	24000000 	.word	0x24000000
 8006348:	24000014 	.word	0x24000014

0800634c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800634c:	b480      	push	{r7}
 800634e:	b089      	sub	sp, #36	; 0x24
 8006350:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006352:	4baf      	ldr	r3, [pc, #700]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800635a:	2b18      	cmp	r3, #24
 800635c:	f200 814e 	bhi.w	80065fc <HAL_RCC_GetSysClockFreq+0x2b0>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	080063cd 	.word	0x080063cd
 800636c:	080065fd 	.word	0x080065fd
 8006370:	080065fd 	.word	0x080065fd
 8006374:	080065fd 	.word	0x080065fd
 8006378:	080065fd 	.word	0x080065fd
 800637c:	080065fd 	.word	0x080065fd
 8006380:	080065fd 	.word	0x080065fd
 8006384:	080065fd 	.word	0x080065fd
 8006388:	080063f3 	.word	0x080063f3
 800638c:	080065fd 	.word	0x080065fd
 8006390:	080065fd 	.word	0x080065fd
 8006394:	080065fd 	.word	0x080065fd
 8006398:	080065fd 	.word	0x080065fd
 800639c:	080065fd 	.word	0x080065fd
 80063a0:	080065fd 	.word	0x080065fd
 80063a4:	080065fd 	.word	0x080065fd
 80063a8:	080063f9 	.word	0x080063f9
 80063ac:	080065fd 	.word	0x080065fd
 80063b0:	080065fd 	.word	0x080065fd
 80063b4:	080065fd 	.word	0x080065fd
 80063b8:	080065fd 	.word	0x080065fd
 80063bc:	080065fd 	.word	0x080065fd
 80063c0:	080065fd 	.word	0x080065fd
 80063c4:	080065fd 	.word	0x080065fd
 80063c8:	080063ff 	.word	0x080063ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063cc:	4b90      	ldr	r3, [pc, #576]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063d8:	4b8d      	ldr	r3, [pc, #564]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	08db      	lsrs	r3, r3, #3
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	4a8c      	ldr	r2, [pc, #560]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80063ea:	e10a      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063ec:	4b89      	ldr	r3, [pc, #548]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80063ee:	61bb      	str	r3, [r7, #24]
    break;
 80063f0:	e107      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80063f2:	4b89      	ldr	r3, [pc, #548]	; (8006618 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80063f4:	61bb      	str	r3, [r7, #24]
    break;
 80063f6:	e104      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80063f8:	4b88      	ldr	r3, [pc, #544]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80063fa:	61bb      	str	r3, [r7, #24]
    break;
 80063fc:	e101      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063fe:	4b84      	ldr	r3, [pc, #528]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006408:	4b81      	ldr	r3, [pc, #516]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	091b      	lsrs	r3, r3, #4
 800640e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006412:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006414:	4b7e      	ldr	r3, [pc, #504]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800641e:	4b7c      	ldr	r3, [pc, #496]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	08db      	lsrs	r3, r3, #3
 8006424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80da 	beq.w	80065f6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d05a      	beq.n	80064fe <HAL_RCC_GetSysClockFreq+0x1b2>
 8006448:	2b01      	cmp	r3, #1
 800644a:	d302      	bcc.n	8006452 <HAL_RCC_GetSysClockFreq+0x106>
 800644c:	2b02      	cmp	r3, #2
 800644e:	d078      	beq.n	8006542 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006450:	e099      	b.n	8006586 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006452:	4b6f      	ldr	r3, [pc, #444]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d02d      	beq.n	80064ba <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800645e:	4b6c      	ldr	r3, [pc, #432]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	08db      	lsrs	r3, r3, #3
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	4a6a      	ldr	r2, [pc, #424]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006488:	4b61      	ldr	r3, [pc, #388]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006498:	ed97 6a02 	vldr	s12, [r7, #8]
 800649c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006620 <HAL_RCC_GetSysClockFreq+0x2d4>
 80064a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80064b8:	e087      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	ee07 3a90 	vmov	s15, r3
 80064c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006624 <HAL_RCC_GetSysClockFreq+0x2d8>
 80064c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064cc:	4b50      	ldr	r3, [pc, #320]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80064e0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006620 <HAL_RCC_GetSysClockFreq+0x2d4>
 80064e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064fc:	e065      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	ee07 3a90 	vmov	s15, r3
 8006504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006508:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006628 <HAL_RCC_GetSysClockFreq+0x2dc>
 800650c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006510:	4b3f      	ldr	r3, [pc, #252]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006518:	ee07 3a90 	vmov	s15, r3
 800651c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006520:	ed97 6a02 	vldr	s12, [r7, #8]
 8006524:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006620 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006540:	e043      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	ee07 3a90 	vmov	s15, r3
 8006548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800662c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006554:	4b2e      	ldr	r3, [pc, #184]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006564:	ed97 6a02 	vldr	s12, [r7, #8]
 8006568:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006620 <HAL_RCC_GetSysClockFreq+0x2d4>
 800656c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006580:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006584:	e021      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006590:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006628 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a0:	ee07 3a90 	vmov	s15, r3
 80065a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006620 <HAL_RCC_GetSysClockFreq+0x2d4>
 80065b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065c8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	0a5b      	lsrs	r3, r3, #9
 80065d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d4:	3301      	adds	r3, #1
 80065d6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ee:	ee17 3a90 	vmov	r3, s15
 80065f2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80065f4:	e005      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61bb      	str	r3, [r7, #24]
    break;
 80065fa:	e002      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80065fe:	61bb      	str	r3, [r7, #24]
    break;
 8006600:	bf00      	nop
  }

  return sysclockfreq;
 8006602:	69bb      	ldr	r3, [r7, #24]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3724      	adds	r7, #36	; 0x24
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	58024400 	.word	0x58024400
 8006614:	03d09000 	.word	0x03d09000
 8006618:	003d0900 	.word	0x003d0900
 800661c:	00b71b00 	.word	0x00b71b00
 8006620:	46000000 	.word	0x46000000
 8006624:	4c742400 	.word	0x4c742400
 8006628:	4a742400 	.word	0x4a742400
 800662c:	4b371b00 	.word	0x4b371b00

08006630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006634:	f001 fc94 	bl	8007f60 <HAL_RCCEx_GetD1SysClockFreq>
 8006638:	4601      	mov	r1, r0
 800663a:	4b08      	ldr	r3, [pc, #32]	; (800665c <HAL_RCC_GetHCLKFreq+0x2c>)
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	4a07      	ldr	r2, [pc, #28]	; (8006660 <HAL_RCC_GetHCLKFreq+0x30>)
 8006644:	5cd3      	ldrb	r3, [r2, r3]
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	fa21 f303 	lsr.w	r3, r1, r3
 800664e:	4a05      	ldr	r2, [pc, #20]	; (8006664 <HAL_RCC_GetHCLKFreq+0x34>)
 8006650:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8006652:	4b04      	ldr	r3, [pc, #16]	; (8006664 <HAL_RCC_GetHCLKFreq+0x34>)
 8006654:	681b      	ldr	r3, [r3, #0]
}
 8006656:	4618      	mov	r0, r3
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	58024400 	.word	0x58024400
 8006660:	08011118 	.word	0x08011118
 8006664:	24000004 	.word	0x24000004

08006668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800666c:	f7ff ffe0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006670:	4601      	mov	r1, r0
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	091b      	lsrs	r3, r3, #4
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4a04      	ldr	r2, [pc, #16]	; (8006690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800667e:	5cd3      	ldrb	r3, [r2, r3]
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd80      	pop	{r7, pc}
 800668c:	58024400 	.word	0x58024400
 8006690:	08011118 	.word	0x08011118

08006694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006698:	f7ff ffca 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 800669c:	4601      	mov	r1, r0
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	0a1b      	lsrs	r3, r3, #8
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	4a04      	ldr	r2, [pc, #16]	; (80066bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066aa:	5cd3      	ldrb	r3, [r2, r3]
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	58024400 	.word	0x58024400
 80066bc:	08011118 	.word	0x08011118

080066c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066cc:	2300      	movs	r3, #0
 80066ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d03d      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e4:	d013      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80066e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ea:	d802      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80066f0:	e01f      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80066f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066f6:	d013      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80066f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066fc:	d01c      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80066fe:	e018      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006700:	4baf      	ldr	r3, [pc, #700]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	4aae      	ldr	r2, [pc, #696]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800670a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800670c:	e015      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3304      	adds	r3, #4
 8006712:	2102      	movs	r1, #2
 8006714:	4618      	mov	r0, r3
 8006716:	f001 fc3f 	bl	8007f98 <RCCEx_PLL2_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800671e:	e00c      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3324      	adds	r3, #36	; 0x24
 8006724:	2102      	movs	r1, #2
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fd58 	bl	80081dc <RCCEx_PLL3_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006730:	e003      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	75fb      	strb	r3, [r7, #23]
      break;
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006740:	4b9f      	ldr	r3, [pc, #636]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674c:	499c      	ldr	r1, [pc, #624]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800674e:	4313      	orrs	r3, r2
 8006750:	650b      	str	r3, [r1, #80]	; 0x50
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d03d      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	2b04      	cmp	r3, #4
 800676a:	d826      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	08006789 	.word	0x08006789
 8006778:	08006797 	.word	0x08006797
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006788:	4b8d      	ldr	r3, [pc, #564]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4a8c      	ldr	r2, [pc, #560]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800678e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006794:	e015      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	2100      	movs	r1, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fbfb 	bl	8007f98 <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067a6:	e00c      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3324      	adds	r3, #36	; 0x24
 80067ac:	2100      	movs	r1, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 fd14 	bl	80081dc <RCCEx_PLL3_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067b8:	e003      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
      break;
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80067c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067c8:	4b7d      	ldr	r3, [pc, #500]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	f023 0207 	bic.w	r2, r3, #7
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	497a      	ldr	r1, [pc, #488]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	650b      	str	r3, [r1, #80]	; 0x50
 80067da:	e001      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d03e      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f0:	2b80      	cmp	r3, #128	; 0x80
 80067f2:	d01c      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d804      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	d00d      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006800:	e01e      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006802:	2bc0      	cmp	r3, #192	; 0xc0
 8006804:	d01f      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680a:	d01e      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800680c:	e018      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680e:	4b6c      	ldr	r3, [pc, #432]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	4a6b      	ldr	r2, [pc, #428]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800681a:	e017      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f001 fbb8 	bl	8007f98 <RCCEx_PLL2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800682c:	e00e      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3324      	adds	r3, #36	; 0x24
 8006832:	2100      	movs	r1, #0
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fcd1 	bl	80081dc <RCCEx_PLL3_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800683e:	e005      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	e002      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800684a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006852:	4b5b      	ldr	r3, [pc, #364]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006856:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	4958      	ldr	r1, [pc, #352]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006860:	4313      	orrs	r3, r2
 8006862:	650b      	str	r3, [r1, #80]	; 0x50
 8006864:	e001      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006872:	2b00      	cmp	r3, #0
 8006874:	d044      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800687c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006880:	d01f      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006886:	d805      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800688c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006890:	d00e      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006892:	e01f      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006894:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006898:	d01f      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800689a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800689e:	d01e      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80068a0:	e018      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a2:	4b47      	ldr	r3, [pc, #284]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	4a46      	ldr	r2, [pc, #280]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068ae:	e017      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 fb6e 	bl	8007f98 <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80068c0:	e00e      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3324      	adds	r3, #36	; 0x24
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 fc87 	bl	80081dc <RCCEx_PLL3_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068d2:	e005      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
      break;
 80068d8:	e002      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80068de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10a      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068e6:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ea:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068f4:	4932      	ldr	r1, [pc, #200]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	658b      	str	r3, [r1, #88]	; 0x58
 80068fa:	e001      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006908:	2b00      	cmp	r3, #0
 800690a:	d044      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006916:	d01f      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800691c:	d805      	bhi.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006922:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006926:	d00e      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006928:	e01f      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800692a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800692e:	d01f      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006934:	d01e      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006936:	e018      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006938:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	4a20      	ldr	r2, [pc, #128]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800693e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006944:	e017      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f001 fb23 	bl	8007f98 <RCCEx_PLL2_Config>
 8006952:	4603      	mov	r3, r0
 8006954:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006956:	e00e      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3324      	adds	r3, #36	; 0x24
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f001 fc3c 	bl	80081dc <RCCEx_PLL3_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006968:	e005      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	75fb      	strb	r3, [r7, #23]
      break;
 800696e:	e002      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006970:	bf00      	nop
 8006972:	e000      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800697c:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800697e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006980:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800698a:	490d      	ldr	r1, [pc, #52]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800698c:	4313      	orrs	r3, r2
 800698e:	658b      	str	r3, [r1, #88]	; 0x58
 8006990:	e001      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d035      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d00c      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	d802      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01b      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80069b2:	e017      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d00c      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80069b8:	2b30      	cmp	r3, #48	; 0x30
 80069ba:	d018      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80069bc:	e012      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80069be:	bf00      	nop
 80069c0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c4:	4baf      	ldr	r3, [pc, #700]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	4aae      	ldr	r2, [pc, #696]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069d0:	e00e      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3304      	adds	r3, #4
 80069d6:	2102      	movs	r1, #2
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 fadd 	bl	8007f98 <RCCEx_PLL2_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069e2:	e005      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	75fb      	strb	r3, [r7, #23]
      break;
 80069e8:	e002      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80069ea:	bf00      	nop
 80069ec:	e000      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80069ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069f6:	4ba3      	ldr	r3, [pc, #652]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a02:	49a0      	ldr	r1, [pc, #640]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a08:	e001      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d042      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a22:	d01f      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a28:	d805      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d00e      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006a34:	e01f      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006a36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a3a:	d01f      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a40:	d01e      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006a42:	e018      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a44:	4b8f      	ldr	r3, [pc, #572]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	4a8e      	ldr	r2, [pc, #568]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a50:	e017      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3304      	adds	r3, #4
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 fa9d 	bl	8007f98 <RCCEx_PLL2_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a62:	e00e      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3324      	adds	r3, #36	; 0x24
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 fbb6 	bl	80081dc <RCCEx_PLL3_Config>
 8006a70:	4603      	mov	r3, r0
 8006a72:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a74:	e005      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7a:	e002      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006a7c:	bf00      	nop
 8006a7e:	e000      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d109      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a88:	4b7e      	ldr	r3, [pc, #504]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	497b      	ldr	r1, [pc, #492]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	650b      	str	r3, [r1, #80]	; 0x50
 8006a9a:	e001      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d042      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab4:	d01b      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aba:	d805      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d022      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac4:	d00a      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006ac6:	e01b      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006acc:	d01d      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad2:	d01c      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad8:	d01b      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006ada:	e011      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f001 fa58 	bl	8007f98 <RCCEx_PLL2_Config>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006aec:	e012      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3324      	adds	r3, #36	; 0x24
 8006af2:	2101      	movs	r1, #1
 8006af4:	4618      	mov	r0, r3
 8006af6:	f001 fb71 	bl	80081dc <RCCEx_PLL3_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006afe:	e009      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	75fb      	strb	r3, [r7, #23]
      break;
 8006b04:	e006      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006b06:	bf00      	nop
 8006b08:	e004      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b1a:	4b5a      	ldr	r3, [pc, #360]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b26:	4957      	ldr	r1, [pc, #348]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	650b      	str	r3, [r1, #80]	; 0x50
 8006b2c:	e001      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d044      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b48:	d01b      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b4e:	d805      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d022      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b58:	d00a      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006b5a:	e01b      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b60:	d01d      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b66:	d01c      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006b68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b6c:	d01b      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006b6e:	e011      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	2101      	movs	r1, #1
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 fa0e 	bl	8007f98 <RCCEx_PLL2_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b80:	e012      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3324      	adds	r3, #36	; 0x24
 8006b86:	2101      	movs	r1, #1
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fb27 	bl	80081dc <RCCEx_PLL3_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b92:	e009      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
      break;
 8006b98:	e006      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b9a:	bf00      	nop
 8006b9c:	e004      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b9e:	bf00      	nop
 8006ba0:	e002      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bae:	4b35      	ldr	r3, [pc, #212]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bbc:	4931      	ldr	r1, [pc, #196]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	658b      	str	r3, [r1, #88]	; 0x58
 8006bc2:	e001      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d02d      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bdc:	d005      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be2:	d009      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d013      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006be8:	e00f      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bea:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006bf6:	e00c      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f001 f9ca 	bl	8007f98 <RCCEx_PLL2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0e:	e000      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d109      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c24:	4917      	ldr	r1, [pc, #92]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	650b      	str	r3, [r1, #80]	; 0x50
 8006c2a:	e001      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d037      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d81b      	bhi.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c89 	.word	0x08006c89
 8006c50:	08006c5d 	.word	0x08006c5d
 8006c54:	08006c6b 	.word	0x08006c6b
 8006c58:	08006c89 	.word	0x08006c89
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c68:	e00f      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	2102      	movs	r1, #2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 f991 	bl	8007f98 <RCCEx_PLL2_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c7a:	e006      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006c82:	bf00      	nop
 8006c84:	58024400 	.word	0x58024400
      break;
 8006c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10b      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c90:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c94:	f023 0203 	bic.w	r2, r3, #3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9c:	4901      	ldr	r1, [pc, #4]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ca2:	e003      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8006ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 829b 	beq.w	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc4:	f000 81a9 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd2:	f000 81a2 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cdc:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8006ce0:	f000 819b 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cea:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8006cee:	f000 8194 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf8:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8006cfc:	f000 818d 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d06:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8006d0a:	f000 8186 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d14:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8006d18:	f000 817f 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d22:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8006d26:	f000 8178 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d30:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8006d34:	f000 8171 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3e:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8006d42:	f000 816a 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d4c:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8006d50:	f000 8163 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d5a:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8006d5e:	f000 815c 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d68:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8006d6c:	f000 8155 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d76:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8006d7a:	f000 814e 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d84:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8006d88:	f000 8147 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d92:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8006d96:	f000 8140 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006da0:	4aa8      	ldr	r2, [pc, #672]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f000 8139 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dae:	4aa6      	ldr	r2, [pc, #664]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	f000 8132 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dbc:	4aa3      	ldr	r2, [pc, #652]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	f000 812b 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dca:	4aa1      	ldr	r2, [pc, #644]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	f000 8124 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dd8:	4a9e      	ldr	r2, [pc, #632]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	f000 811d 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006de6:	4a9c      	ldr	r2, [pc, #624]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	f000 8116 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006df4:	4a99      	ldr	r2, [pc, #612]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	f000 810f 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e02:	4a97      	ldr	r2, [pc, #604]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	f000 8108 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e10:	4a94      	ldr	r2, [pc, #592]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	f000 8101 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e1e:	4a92      	ldr	r2, [pc, #584]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	f000 80fa 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e2c:	4a8f      	ldr	r2, [pc, #572]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	f000 80f3 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e3a:	4a8d      	ldr	r2, [pc, #564]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	f000 80ec 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e48:	4a8a      	ldr	r2, [pc, #552]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	f000 80e5 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e56:	4a88      	ldr	r2, [pc, #544]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	f000 80de 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e64:	4a85      	ldr	r2, [pc, #532]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	f000 80d7 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e72:	4a83      	ldr	r2, [pc, #524]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	f000 80d0 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e80:	4a80      	ldr	r2, [pc, #512]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f000 80c9 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e8e:	4a7e      	ldr	r2, [pc, #504]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	f000 80c2 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e9c:	4a7b      	ldr	r2, [pc, #492]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f000 80bb 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eaa:	4a79      	ldr	r2, [pc, #484]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	f000 80b4 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eb8:	4a76      	ldr	r2, [pc, #472]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	f000 80ad 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ec6:	4a74      	ldr	r2, [pc, #464]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	f000 80a6 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ed4:	4a71      	ldr	r2, [pc, #452]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f000 809f 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ee2:	4a6f      	ldr	r2, [pc, #444]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	f000 8098 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ef0:	4a6c      	ldr	r2, [pc, #432]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	f000 8091 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006efe:	4a6a      	ldr	r2, [pc, #424]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	f000 808a 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f0c:	4a67      	ldr	r2, [pc, #412]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	f000 8083 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f1a:	4a65      	ldr	r2, [pc, #404]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d07c      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f26:	4a63      	ldr	r2, [pc, #396]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d076      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f32:	4a61      	ldr	r2, [pc, #388]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d070      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f3e:	4a5f      	ldr	r2, [pc, #380]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d06a      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f4a:	4a5d      	ldr	r2, [pc, #372]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d064      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f56:	4a5b      	ldr	r2, [pc, #364]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d05e      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f62:	4a59      	ldr	r2, [pc, #356]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d058      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6e:	4a57      	ldr	r2, [pc, #348]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d052      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f7a:	4a55      	ldr	r2, [pc, #340]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d04c      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f86:	4a53      	ldr	r2, [pc, #332]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d046      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f92:	4a51      	ldr	r2, [pc, #324]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d040      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f9e:	4a4f      	ldr	r2, [pc, #316]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d03a      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006faa:	4a4d      	ldr	r2, [pc, #308]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d034      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fb6:	4a4b      	ldr	r2, [pc, #300]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d02e      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fc2:	4a49      	ldr	r2, [pc, #292]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d028      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fce:	4a47      	ldr	r2, [pc, #284]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fda:	4a45      	ldr	r2, [pc, #276]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d01c      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fe6:	4a43      	ldr	r2, [pc, #268]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d016      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ff2:	4a41      	ldr	r2, [pc, #260]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d010      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ffe:	4a3f      	ldr	r2, [pc, #252]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00a      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800700a:	4a3d      	ldr	r2, [pc, #244]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007010:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007014:	483b      	ldr	r0, [pc, #236]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8007016:	f7f9 ff45 	bl	8000ea4 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800701a:	4b3b      	ldr	r3, [pc, #236]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a3a      	ldr	r2, [pc, #232]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8007020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007024:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007026:	f7fa fbc1 	bl	80017ac <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800702c:	e06e      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800702e:	f7fa fbbd 	bl	80017ac <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b64      	cmp	r3, #100	; 0x64
 800703a:	d967      	bls.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	75fb      	strb	r3, [r7, #23]
        break;
 8007040:	e06a      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8007042:	bf00      	nop
 8007044:	00010300 	.word	0x00010300
 8007048:	00011300 	.word	0x00011300
 800704c:	00012300 	.word	0x00012300
 8007050:	00013300 	.word	0x00013300
 8007054:	00014300 	.word	0x00014300
 8007058:	00015300 	.word	0x00015300
 800705c:	00016300 	.word	0x00016300
 8007060:	00017300 	.word	0x00017300
 8007064:	00018300 	.word	0x00018300
 8007068:	00019300 	.word	0x00019300
 800706c:	0001a300 	.word	0x0001a300
 8007070:	0001b300 	.word	0x0001b300
 8007074:	0001c300 	.word	0x0001c300
 8007078:	0001d300 	.word	0x0001d300
 800707c:	0001e300 	.word	0x0001e300
 8007080:	0001f300 	.word	0x0001f300
 8007084:	00020300 	.word	0x00020300
 8007088:	00021300 	.word	0x00021300
 800708c:	00022300 	.word	0x00022300
 8007090:	00023300 	.word	0x00023300
 8007094:	00024300 	.word	0x00024300
 8007098:	00025300 	.word	0x00025300
 800709c:	00026300 	.word	0x00026300
 80070a0:	00027300 	.word	0x00027300
 80070a4:	00028300 	.word	0x00028300
 80070a8:	00029300 	.word	0x00029300
 80070ac:	0002a300 	.word	0x0002a300
 80070b0:	0002b300 	.word	0x0002b300
 80070b4:	0002c300 	.word	0x0002c300
 80070b8:	0002d300 	.word	0x0002d300
 80070bc:	0002e300 	.word	0x0002e300
 80070c0:	0002f300 	.word	0x0002f300
 80070c4:	00030300 	.word	0x00030300
 80070c8:	00031300 	.word	0x00031300
 80070cc:	00032300 	.word	0x00032300
 80070d0:	00033300 	.word	0x00033300
 80070d4:	00034300 	.word	0x00034300
 80070d8:	00035300 	.word	0x00035300
 80070dc:	00036300 	.word	0x00036300
 80070e0:	00037300 	.word	0x00037300
 80070e4:	00038300 	.word	0x00038300
 80070e8:	00039300 	.word	0x00039300
 80070ec:	0003a300 	.word	0x0003a300
 80070f0:	0003b300 	.word	0x0003b300
 80070f4:	0003c300 	.word	0x0003c300
 80070f8:	0003d300 	.word	0x0003d300
 80070fc:	0003e300 	.word	0x0003e300
 8007100:	0003f300 	.word	0x0003f300
 8007104:	08010c48 	.word	0x08010c48
 8007108:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800710c:	4bb9      	ldr	r3, [pc, #740]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d08a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d166      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800711e:	4bb6      	ldr	r3, [pc, #728]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007120:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007128:	4053      	eors	r3, r2
 800712a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712e:	2b00      	cmp	r3, #0
 8007130:	d013      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007132:	4bb1      	ldr	r3, [pc, #708]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800713c:	4bae      	ldr	r3, [pc, #696]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800713e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007140:	4aad      	ldr	r2, [pc, #692]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007146:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007148:	4bab      	ldr	r3, [pc, #684]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714c:	4aaa      	ldr	r2, [pc, #680]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800714e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007152:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007154:	4aa8      	ldr	r2, [pc, #672]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	d115      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007166:	f7fa fb21 	bl	80017ac <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800716c:	e00b      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716e:	f7fa fb1d 	bl	80017ac <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f241 3288 	movw	r2, #5000	; 0x1388
 800717c:	4293      	cmp	r3, r2
 800717e:	d902      	bls.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	75fb      	strb	r3, [r7, #23]
            break;
 8007184:	e005      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007186:	4b9c      	ldr	r3, [pc, #624]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0ed      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d126      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800719e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a6:	d10d      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 80071a8:	4b93      	ldr	r3, [pc, #588]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071b6:	0919      	lsrs	r1, r3, #4
 80071b8:	4b90      	ldr	r3, [pc, #576]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80071ba:	400b      	ands	r3, r1
 80071bc:	498e      	ldr	r1, [pc, #568]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	610b      	str	r3, [r1, #16]
 80071c2:	e005      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 80071c4:	4b8c      	ldr	r3, [pc, #560]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	4a8b      	ldr	r2, [pc, #556]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80071ce:	6113      	str	r3, [r2, #16]
 80071d0:	4b89      	ldr	r3, [pc, #548]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071de:	4986      	ldr	r1, [pc, #536]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	670b      	str	r3, [r1, #112]	; 0x70
 80071e4:	e004      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	75bb      	strb	r3, [r7, #22]
 80071ea:	e001      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d07e      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007200:	2b28      	cmp	r3, #40	; 0x28
 8007202:	d867      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	080072db 	.word	0x080072db
 8007210:	080072d5 	.word	0x080072d5
 8007214:	080072d5 	.word	0x080072d5
 8007218:	080072d5 	.word	0x080072d5
 800721c:	080072d5 	.word	0x080072d5
 8007220:	080072d5 	.word	0x080072d5
 8007224:	080072d5 	.word	0x080072d5
 8007228:	080072d5 	.word	0x080072d5
 800722c:	080072b1 	.word	0x080072b1
 8007230:	080072d5 	.word	0x080072d5
 8007234:	080072d5 	.word	0x080072d5
 8007238:	080072d5 	.word	0x080072d5
 800723c:	080072d5 	.word	0x080072d5
 8007240:	080072d5 	.word	0x080072d5
 8007244:	080072d5 	.word	0x080072d5
 8007248:	080072d5 	.word	0x080072d5
 800724c:	080072c3 	.word	0x080072c3
 8007250:	080072d5 	.word	0x080072d5
 8007254:	080072d5 	.word	0x080072d5
 8007258:	080072d5 	.word	0x080072d5
 800725c:	080072d5 	.word	0x080072d5
 8007260:	080072d5 	.word	0x080072d5
 8007264:	080072d5 	.word	0x080072d5
 8007268:	080072d5 	.word	0x080072d5
 800726c:	080072db 	.word	0x080072db
 8007270:	080072d5 	.word	0x080072d5
 8007274:	080072d5 	.word	0x080072d5
 8007278:	080072d5 	.word	0x080072d5
 800727c:	080072d5 	.word	0x080072d5
 8007280:	080072d5 	.word	0x080072d5
 8007284:	080072d5 	.word	0x080072d5
 8007288:	080072d5 	.word	0x080072d5
 800728c:	080072db 	.word	0x080072db
 8007290:	080072d5 	.word	0x080072d5
 8007294:	080072d5 	.word	0x080072d5
 8007298:	080072d5 	.word	0x080072d5
 800729c:	080072d5 	.word	0x080072d5
 80072a0:	080072d5 	.word	0x080072d5
 80072a4:	080072d5 	.word	0x080072d5
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	080072db 	.word	0x080072db
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	2101      	movs	r1, #1
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fe6e 	bl	8007f98 <RCCEx_PLL2_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80072c0:	e00c      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3324      	adds	r3, #36	; 0x24
 80072c6:	2101      	movs	r1, #1
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 ff87 	bl	80081dc <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80072d2:	e003      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
      break;
 80072d8:	e000      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 80072da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072e2:	4b45      	ldr	r3, [pc, #276]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ee:	4942      	ldr	r1, [pc, #264]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	654b      	str	r3, [r1, #84]	; 0x54
 80072f4:	e001      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d037      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730a:	2b05      	cmp	r3, #5
 800730c:	d820      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007357 	.word	0x08007357
 8007318:	0800732d 	.word	0x0800732d
 800731c:	0800733f 	.word	0x0800733f
 8007320:	08007357 	.word	0x08007357
 8007324:	08007357 	.word	0x08007357
 8007328:	08007357 	.word	0x08007357
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3304      	adds	r3, #4
 8007330:	2101      	movs	r1, #1
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fe30 	bl	8007f98 <RCCEx_PLL2_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800733c:	e00c      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3324      	adds	r3, #36	; 0x24
 8007342:	2101      	movs	r1, #1
 8007344:	4618      	mov	r0, r3
 8007346:	f000 ff49 	bl	80081dc <RCCEx_PLL3_Config>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800734e:	e003      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	75fb      	strb	r3, [r7, #23]
      break;
 8007354:	e000      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8007356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d109      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800735e:	4b26      	ldr	r3, [pc, #152]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007362:	f023 0207 	bic.w	r2, r3, #7
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736a:	4923      	ldr	r1, [pc, #140]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800736c:	4313      	orrs	r3, r2
 800736e:	654b      	str	r3, [r1, #84]	; 0x54
 8007370:	e001      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d040      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007388:	2b05      	cmp	r3, #5
 800738a:	d821      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800738c:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	080073d7 	.word	0x080073d7
 8007398:	080073ad 	.word	0x080073ad
 800739c:	080073bf 	.word	0x080073bf
 80073a0:	080073d7 	.word	0x080073d7
 80073a4:	080073d7 	.word	0x080073d7
 80073a8:	080073d7 	.word	0x080073d7
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3304      	adds	r3, #4
 80073b0:	2101      	movs	r1, #1
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fdf0 	bl	8007f98 <RCCEx_PLL2_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80073bc:	e00c      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3324      	adds	r3, #36	; 0x24
 80073c2:	2101      	movs	r1, #1
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 ff09 	bl	80081dc <RCCEx_PLL3_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80073ce:	e003      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	75fb      	strb	r3, [r7, #23]
      break;
 80073d4:	e000      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80073d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d110      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073de:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e2:	f023 0207 	bic.w	r2, r3, #7
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ec:	4902      	ldr	r1, [pc, #8]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	658b      	str	r3, [r1, #88]	; 0x58
 80073f2:	e007      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80073f4:	58024800 	.word	0x58024800
 80073f8:	58024400 	.word	0x58024400
 80073fc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d044      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800741a:	d01b      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800741c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007420:	d805      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d022      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8007426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800742a:	d00a      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800742c:	e01b      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xda6>
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007432:	d01d      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8007434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007438:	d01c      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800743a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800743e:	d01b      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8007440:	e011      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3304      	adds	r3, #4
 8007446:	2100      	movs	r1, #0
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fda5 	bl	8007f98 <RCCEx_PLL2_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007452:	e012      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3324      	adds	r3, #36	; 0x24
 8007458:	2102      	movs	r1, #2
 800745a:	4618      	mov	r0, r3
 800745c:	f000 febe 	bl	80081dc <RCCEx_PLL3_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007464:	e009      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]
      break;
 800746a:	e006      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 800746c:	bf00      	nop
 800746e:	e004      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007470:	bf00      	nop
 8007472:	e002      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007474:	bf00      	nop
 8007476:	e000      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007480:	4bb7      	ldr	r3, [pc, #732]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007484:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800748e:	49b4      	ldr	r1, [pc, #720]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007490:	4313      	orrs	r3, r2
 8007492:	654b      	str	r3, [r1, #84]	; 0x54
 8007494:	e001      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d044      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b0:	d01b      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 80074b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b6:	d805      	bhi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d022      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xe42>
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d00a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80074c2:	e01b      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 80074c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c8:	d01d      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xe46>
 80074ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074ce:	d01c      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 80074d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074d4:	d01b      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 80074d6:	e011      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fd5a 	bl	8007f98 <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80074e8:	e012      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3324      	adds	r3, #36	; 0x24
 80074ee:	2102      	movs	r1, #2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fe73 	bl	80081dc <RCCEx_PLL3_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80074fa:	e009      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8007502:	bf00      	nop
 8007504:	e004      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8007506:	bf00      	nop
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800750e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007516:	4b92      	ldr	r3, [pc, #584]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007524:	498e      	ldr	r1, [pc, #568]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007526:	4313      	orrs	r3, r2
 8007528:	658b      	str	r3, [r1, #88]	; 0x58
 800752a:	e001      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	2b00      	cmp	r3, #0
 800753a:	d044      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007546:	d01b      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8007548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800754c:	d805      	bhi.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d022      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8007552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007556:	d00a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8007558:	e01b      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xed2>
 800755a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755e:	d01d      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007560:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007564:	d01c      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 8007566:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800756a:	d01b      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 800756c:	e011      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	2100      	movs	r1, #0
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fd0f 	bl	8007f98 <RCCEx_PLL2_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800757e:	e012      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3324      	adds	r3, #36	; 0x24
 8007584:	2102      	movs	r1, #2
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fe28 	bl	80081dc <RCCEx_PLL3_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007590:	e009      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	75fb      	strb	r3, [r7, #23]
      break;
 8007596:	e006      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007598:	bf00      	nop
 800759a:	e004      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800759c:	bf00      	nop
 800759e:	e002      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80075a0:	bf00      	nop
 80075a2:	e000      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80075a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075ac:	4b6c      	ldr	r3, [pc, #432]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80075ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075ba:	4969      	ldr	r1, [pc, #420]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	658b      	str	r3, [r1, #88]	; 0x58
 80075c0:	e001      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d037      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075dc:	d015      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e8:	d00f      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075fe:	d004      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8007600:	f240 413a 	movw	r1, #1082	; 0x43a
 8007604:	4857      	ldr	r0, [pc, #348]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8007606:	f7f9 fc4d 	bl	8000ea4 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007614:	d10b      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3324      	adds	r3, #36	; 0x24
 800761a:	2102      	movs	r1, #2
 800761c:	4618      	mov	r0, r3
 800761e:	f000 fddd 	bl	80081dc <RCCEx_PLL3_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00c      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	75bb      	strb	r3, [r7, #22]
 800762c:	e009      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800762e:	4b4c      	ldr	r3, [pc, #304]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007632:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763c:	4948      	ldr	r1, [pc, #288]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800763e:	4313      	orrs	r3, r2
 8007640:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b00      	cmp	r3, #0
 800764c:	d037      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007658:	d015      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007664:	d00f      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007676:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800767a:	d004      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800767c:	f240 414f 	movw	r1, #1103	; 0x44f
 8007680:	4838      	ldr	r0, [pc, #224]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8007682:	f7f9 fc0f 	bl	8000ea4 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800768c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007690:	d10b      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3324      	adds	r3, #36	; 0x24
 8007696:	2102      	movs	r1, #2
 8007698:	4618      	mov	r0, r3
 800769a:	f000 fd9f 	bl	80081dc <RCCEx_PLL3_Config>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00c      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	75bb      	strb	r3, [r7, #22]
 80076a8:	e009      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076aa:	4b2d      	ldr	r3, [pc, #180]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80076ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076b8:	4929      	ldr	r1, [pc, #164]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d030      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d00d      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1032>
 80076d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076da:	d016      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x104a>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d111      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3304      	adds	r3, #4
 80076e4:	2100      	movs	r1, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fc56 	bl	8007f98 <RCCEx_PLL2_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076f0:	e00c      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3324      	adds	r3, #36	; 0x24
 80076f6:	2102      	movs	r1, #2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fd6f 	bl	80081dc <RCCEx_PLL3_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007702:	e003      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
      break;
 8007708:	e000      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 800770a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007712:	4b13      	ldr	r3, [pc, #76]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007720:	490f      	ldr	r1, [pc, #60]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007722:	4313      	orrs	r3, r2
 8007724:	658b      	str	r3, [r1, #88]	; 0x58
 8007726:	e001      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d034      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007742:	d011      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8007744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007748:	d01a      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800774a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800774e:	d114      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007750:	4b03      	ldr	r3, [pc, #12]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	4a02      	ldr	r2, [pc, #8]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800775a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800775c:	e011      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
 8007764:	08010c48 	.word	0x08010c48

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3324      	adds	r3, #36	; 0x24
 800776c:	2101      	movs	r1, #1
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fd34 	bl	80081dc <RCCEx_PLL3_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007778:	e003      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]
      break;
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8007780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007788:	4b9c      	ldr	r3, [pc, #624]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800778a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007796:	4999      	ldr	r1, [pc, #612]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007798:	4313      	orrs	r3, r2
 800779a:	654b      	str	r3, [r1, #84]	; 0x54
 800779c:	e001      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d037      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x110a>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077be:	d004      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x110a>
 80077c0:	f240 41b7 	movw	r1, #1207	; 0x4b7
 80077c4:	488e      	ldr	r0, [pc, #568]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80077c6:	f7f9 fb6d 	bl	8000ea4 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80077d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d6:	d007      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80077d8:	e00f      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077da:	4b88      	ldr	r3, [pc, #544]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	4a87      	ldr	r2, [pc, #540]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80077e6:	e00b      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	2102      	movs	r1, #2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fbd2 	bl	8007f98 <RCCEx_PLL2_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80077f8:	e002      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	75fb      	strb	r3, [r7, #23]
      break;
 80077fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007806:	4b7d      	ldr	r3, [pc, #500]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007812:	497a      	ldr	r1, [pc, #488]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007814:	4313      	orrs	r3, r2
 8007816:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007818:	e001      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3324      	adds	r3, #36	; 0x24
 800782e:	2102      	movs	r1, #2
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fcd3 	bl	80081dc <RCCEx_PLL3_Config>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d02f      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007854:	d00c      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 8007856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785a:	d802      	bhi.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 800785c:	2b00      	cmp	r3, #0
 800785e:	d011      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8007860:	e00d      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x11be>
 8007862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007866:	d00f      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786c:	d00e      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 800786e:	e006      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007870:	4b62      	ldr	r3, [pc, #392]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	4a61      	ldr	r2, [pc, #388]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800787a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800787c:	e007      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	75fb      	strb	r3, [r7, #23]
      break;
 8007882:	e004      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007884:	bf00      	nop
 8007886:	e002      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007888:	bf00      	nop
 800788a:	e000      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 800788c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d109      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007894:	4b59      	ldr	r3, [pc, #356]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078a0:	4956      	ldr	r1, [pc, #344]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	654b      	str	r3, [r1, #84]	; 0x54
 80078a6:	e001      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d016      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d009      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078c8:	d004      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 80078ca:	f240 5116 	movw	r1, #1302	; 0x516
 80078ce:	484c      	ldr	r0, [pc, #304]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80078d0:	f7f9 fae8 	bl	8000ea4 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078d4:	4b49      	ldr	r3, [pc, #292]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e0:	4946      	ldr	r1, [pc, #280]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d019      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007906:	d004      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 8007908:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800790c:	483c      	ldr	r0, [pc, #240]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800790e:	f7f9 fac9 	bl	8000ea4 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007912:	4b3a      	ldr	r3, [pc, #232]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007920:	4936      	ldr	r1, [pc, #216]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007922:	4313      	orrs	r3, r2
 8007924:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d016      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x128e>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800793e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007942:	d004      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x128e>
 8007944:	f240 512a 	movw	r1, #1322	; 0x52a
 8007948:	482d      	ldr	r0, [pc, #180]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800794a:	f7f9 faab 	bl	8000ea4 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800794e:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007952:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800795a:	4928      	ldr	r1, [pc, #160]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800795c:	4313      	orrs	r3, r2
 800795e:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01d      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800797c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007980:	d004      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8007982:	f240 5134 	movw	r1, #1332	; 0x534
 8007986:	481e      	ldr	r0, [pc, #120]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007988:	f7f9 fa8c 	bl	8000ea4 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800798c:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	4a1a      	ldr	r2, [pc, #104]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007992:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007996:	6113      	str	r3, [r2, #16]
 8007998:	4b18      	ldr	r3, [pc, #96]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80079a2:	4916      	ldr	r1, [pc, #88]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da1b      	bge.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00e      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079c0:	d009      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ca:	d004      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 80079cc:	f240 513e 	movw	r1, #1342	; 0x53e
 80079d0:	480b      	ldr	r0, [pc, #44]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80079d2:	f7f9 fa67 	bl	8000ea4 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	4906      	ldr	r1, [pc, #24]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80079e8:	7dbb      	ldrb	r3, [r7, #22]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e000      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	58024400 	.word	0x58024400
 8007a00:	08010c48 	.word	0x08010c48

08007a04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a08:	f7fe fe12 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8007a0c:	4601      	mov	r1, r0
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	091b      	lsrs	r3, r3, #4
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a1a:	5cd3      	ldrb	r3, [r2, r3]
 8007a1c:	f003 031f 	and.w	r3, r3, #31
 8007a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	08011118 	.word	0x08011118

08007a30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b089      	sub	sp, #36	; 0x24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a38:	4b9d      	ldr	r3, [pc, #628]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8007a42:	4b9b      	ldr	r3, [pc, #620]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	0b1b      	lsrs	r3, r3, #12
 8007a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a4c:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8007a4e:	4b98      	ldr	r3, [pc, #608]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a58:	4b95      	ldr	r3, [pc, #596]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5c:	08db      	lsrs	r3, r3, #3
 8007a5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a70:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 810a 	beq.w	8007c90 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d05a      	beq.n	8007b38 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d302      	bcc.n	8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d078      	beq.n	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8007a8a:	e099      	b.n	8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a8c:	4b88      	ldr	r3, [pc, #544]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02d      	beq.n	8007af4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a98:	4b85      	ldr	r3, [pc, #532]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	08db      	lsrs	r3, r3, #3
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	4a84      	ldr	r2, [pc, #528]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac2:	4b7b      	ldr	r3, [pc, #492]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007af2:	e087      	b.n	8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b06:	4b6a      	ldr	r3, [pc, #424]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b36:	e065      	b.n	8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4a:	4b59      	ldr	r3, [pc, #356]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b7a:	e043      	b.n	8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8e:	4b48      	ldr	r3, [pc, #288]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bbe:	e021      	b.n	8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd2:	4b37      	ldr	r3, [pc, #220]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007be6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c04:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	0a5b      	lsrs	r3, r3, #9
 8007c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c2a:	ee17 2a90 	vmov	r2, s15
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c32:	4b1f      	ldr	r3, [pc, #124]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	0c1b      	lsrs	r3, r3, #16
 8007c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3c:	ee07 3a90 	vmov	s15, r3
 8007c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c58:	ee17 2a90 	vmov	r2, s15
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c60:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	0e1b      	lsrs	r3, r3, #24
 8007c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c86:	ee17 2a90 	vmov	r2, s15
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	609a      	str	r2, [r3, #8]
}
 8007ca2:	bf00      	nop
 8007ca4:	3724      	adds	r7, #36	; 0x24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	58024400 	.word	0x58024400
 8007cb4:	03d09000 	.word	0x03d09000
 8007cb8:	46000000 	.word	0x46000000
 8007cbc:	4c742400 	.word	0x4c742400
 8007cc0:	4a742400 	.word	0x4a742400
 8007cc4:	4b371b00 	.word	0x4b371b00

08007cc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b089      	sub	sp, #36	; 0x24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cd0:	4b9d      	ldr	r3, [pc, #628]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	f003 0303 	and.w	r3, r3, #3
 8007cd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007cda:	4b9b      	ldr	r3, [pc, #620]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	0d1b      	lsrs	r3, r3, #20
 8007ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ce4:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8007ce6:	4b98      	ldr	r3, [pc, #608]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cee:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007cf0:	4b95      	ldr	r3, [pc, #596]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf4:	08db      	lsrs	r3, r3, #3
 8007cf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	ee07 3a90 	vmov	s15, r3
 8007d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d08:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 810a 	beq.w	8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d05a      	beq.n	8007dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d302      	bcc.n	8007d24 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d078      	beq.n	8007e14 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8007d22:	e099      	b.n	8007e58 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d24:	4b88      	ldr	r3, [pc, #544]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0320 	and.w	r3, r3, #32
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d02d      	beq.n	8007d8c <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d30:	4b85      	ldr	r3, [pc, #532]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	08db      	lsrs	r3, r3, #3
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	4a84      	ldr	r2, [pc, #528]	; (8007f4c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	ee07 3a90 	vmov	s15, r3
 8007d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5a:	4b7b      	ldr	r3, [pc, #492]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d8a:	e087      	b.n	8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9e:	4b6a      	ldr	r3, [pc, #424]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dce:	e065      	b.n	8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de2:	4b59      	ldr	r3, [pc, #356]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007df6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e12:	e043      	b.n	8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e26:	4b48      	ldr	r3, [pc, #288]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e56:	e021      	b.n	8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6a:	4b37      	ldr	r3, [pc, #220]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e9c:	4b2a      	ldr	r3, [pc, #168]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	0a5b      	lsrs	r3, r3, #9
 8007ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec2:	ee17 2a90 	vmov	r2, s15
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007eca:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed4:	ee07 3a90 	vmov	s15, r3
 8007ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ef0:	ee17 2a90 	vmov	r2, s15
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ef8:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	0e1b      	lsrs	r3, r3, #24
 8007efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f1e:	ee17 2a90 	vmov	r2, s15
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f26:	e008      	b.n	8007f3a <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	609a      	str	r2, [r3, #8]
}
 8007f3a:	bf00      	nop
 8007f3c:	3724      	adds	r7, #36	; 0x24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	58024400 	.word	0x58024400
 8007f4c:	03d09000 	.word	0x03d09000
 8007f50:	46000000 	.word	0x46000000
 8007f54:	4c742400 	.word	0x4c742400
 8007f58:	4a742400 	.word	0x4a742400
 8007f5c:	4b371b00 	.word	0x4b371b00

08007f60 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f64:	f7fe f9f2 	bl	800634c <HAL_RCC_GetSysClockFreq>
 8007f68:	4601      	mov	r1, r0
 8007f6a:	4b08      	ldr	r3, [pc, #32]	; (8007f8c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	4a06      	ldr	r2, [pc, #24]	; (8007f90 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007f76:	5cd3      	ldrb	r3, [r2, r3]
 8007f78:	f003 031f 	and.w	r3, r3, #31
 8007f7c:	fa21 f303 	lsr.w	r3, r1, r3
 8007f80:	4a04      	ldr	r2, [pc, #16]	; (8007f94 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007f82:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007f84:	4b03      	ldr	r3, [pc, #12]	; (8007f94 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007f86:	681b      	ldr	r3, [r3, #0]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	58024400 	.word	0x58024400
 8007f90:	08011118 	.word	0x08011118
 8007f94:	24000000 	.word	0x24000000

08007f98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <RCCEx_PLL2_Config+0x1e>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b3f      	cmp	r3, #63	; 0x3f
 8007fb4:	d904      	bls.n	8007fc0 <RCCEx_PLL2_Config+0x28>
 8007fb6:	f640 2186 	movw	r1, #2694	; 0xa86
 8007fba:	4885      	ldr	r0, [pc, #532]	; (80081d0 <RCCEx_PLL2_Config+0x238>)
 8007fbc:	f7f8 ff72 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d904      	bls.n	8007fd2 <RCCEx_PLL2_Config+0x3a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd0:	d904      	bls.n	8007fdc <RCCEx_PLL2_Config+0x44>
 8007fd2:	f640 2187 	movw	r1, #2695	; 0xa87
 8007fd6:	487e      	ldr	r0, [pc, #504]	; (80081d0 <RCCEx_PLL2_Config+0x238>)
 8007fd8:	f7f8 ff64 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <RCCEx_PLL2_Config+0x54>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d904      	bls.n	8007ff6 <RCCEx_PLL2_Config+0x5e>
 8007fec:	f640 2188 	movw	r1, #2696	; 0xa88
 8007ff0:	4877      	ldr	r0, [pc, #476]	; (80081d0 <RCCEx_PLL2_Config+0x238>)
 8007ff2:	f7f8 ff57 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <RCCEx_PLL2_Config+0x6e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b80      	cmp	r3, #128	; 0x80
 8008004:	d904      	bls.n	8008010 <RCCEx_PLL2_Config+0x78>
 8008006:	f640 2189 	movw	r1, #2697	; 0xa89
 800800a:	4871      	ldr	r0, [pc, #452]	; (80081d0 <RCCEx_PLL2_Config+0x238>)
 800800c:	f7f8 ff4a 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <RCCEx_PLL2_Config+0x88>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b80      	cmp	r3, #128	; 0x80
 800801e:	d904      	bls.n	800802a <RCCEx_PLL2_Config+0x92>
 8008020:	f640 218a 	movw	r1, #2698	; 0xa8a
 8008024:	486a      	ldr	r0, [pc, #424]	; (80081d0 <RCCEx_PLL2_Config+0x238>)
 8008026:	f7f8 ff3d 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d010      	beq.n	8008054 <RCCEx_PLL2_Config+0xbc>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	2b40      	cmp	r3, #64	; 0x40
 8008038:	d00c      	beq.n	8008054 <RCCEx_PLL2_Config+0xbc>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d008      	beq.n	8008054 <RCCEx_PLL2_Config+0xbc>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	2bc0      	cmp	r3, #192	; 0xc0
 8008048:	d004      	beq.n	8008054 <RCCEx_PLL2_Config+0xbc>
 800804a:	f640 218b 	movw	r1, #2699	; 0xa8b
 800804e:	4860      	ldr	r0, [pc, #384]	; (80081d0 <RCCEx_PLL2_Config+0x238>)
 8008050:	f7f8 ff28 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <RCCEx_PLL2_Config+0xd6>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b20      	cmp	r3, #32
 8008062:	d004      	beq.n	800806e <RCCEx_PLL2_Config+0xd6>
 8008064:	f640 218c 	movw	r1, #2700	; 0xa8c
 8008068:	4859      	ldr	r0, [pc, #356]	; (80081d0 <RCCEx_PLL2_Config+0x238>)
 800806a:	f7f8 ff1b 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008076:	d304      	bcc.n	8008082 <RCCEx_PLL2_Config+0xea>
 8008078:	f640 218d 	movw	r1, #2701	; 0xa8d
 800807c:	4854      	ldr	r0, [pc, #336]	; (80081d0 <RCCEx_PLL2_Config+0x238>)
 800807e:	f7f8 ff11 	bl	8000ea4 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008082:	4b54      	ldr	r3, [pc, #336]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	f003 0303 	and.w	r3, r3, #3
 800808a:	2b03      	cmp	r3, #3
 800808c:	d101      	bne.n	8008092 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e099      	b.n	80081c6 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008092:	4b50      	ldr	r3, [pc, #320]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a4f      	ldr	r2, [pc, #316]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008098:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800809c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809e:	f7f9 fb85 	bl	80017ac <HAL_GetTick>
 80080a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080a4:	e008      	b.n	80080b8 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080a6:	f7f9 fb81 	bl	80017ac <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e086      	b.n	80081c6 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080b8:	4b46      	ldr	r3, [pc, #280]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f0      	bne.n	80080a6 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080c4:	4b43      	ldr	r3, [pc, #268]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	031b      	lsls	r3, r3, #12
 80080d2:	4940      	ldr	r1, [pc, #256]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	628b      	str	r3, [r1, #40]	; 0x28
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	3b01      	subs	r3, #1
 80080de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	025b      	lsls	r3, r3, #9
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	041b      	lsls	r3, r3, #16
 80080f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	3b01      	subs	r3, #1
 8008102:	061b      	lsls	r3, r3, #24
 8008104:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008108:	4932      	ldr	r1, [pc, #200]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 800810a:	4313      	orrs	r3, r2
 800810c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800810e:	4b31      	ldr	r3, [pc, #196]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008112:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	492e      	ldr	r1, [pc, #184]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 800811c:	4313      	orrs	r3, r2
 800811e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008120:	4b2c      	ldr	r3, [pc, #176]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	f023 0220 	bic.w	r2, r3, #32
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	4929      	ldr	r1, [pc, #164]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 800812e:	4313      	orrs	r3, r2
 8008130:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008132:	4b28      	ldr	r3, [pc, #160]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	4a27      	ldr	r2, [pc, #156]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008138:	f023 0310 	bic.w	r3, r3, #16
 800813c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800813e:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008142:	4b25      	ldr	r3, [pc, #148]	; (80081d8 <RCCEx_PLL2_Config+0x240>)
 8008144:	4013      	ands	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	69d2      	ldr	r2, [r2, #28]
 800814a:	00d2      	lsls	r2, r2, #3
 800814c:	4921      	ldr	r1, [pc, #132]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 800814e:	4313      	orrs	r3, r2
 8008150:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008152:	4b20      	ldr	r3, [pc, #128]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008158:	f043 0310 	orr.w	r3, r3, #16
 800815c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008164:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 800816a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800816e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008170:	e00f      	b.n	8008192 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d106      	bne.n	8008186 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008178:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	4a15      	ldr	r2, [pc, #84]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 800817e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008182:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008184:	e005      	b.n	8008192 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4a12      	ldr	r2, [pc, #72]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 800818c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008190:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008192:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a0f      	ldr	r2, [pc, #60]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 8008198:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800819c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800819e:	f7f9 fb05 	bl	80017ac <HAL_GetTick>
 80081a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081a4:	e008      	b.n	80081b8 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081a6:	f7f9 fb01 	bl	80017ac <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d901      	bls.n	80081b8 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e006      	b.n	80081c6 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081b8:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <RCCEx_PLL2_Config+0x23c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0f0      	beq.n	80081a6 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	08010c48 	.word	0x08010c48
 80081d4:	58024400 	.word	0x58024400
 80081d8:	ffff0007 	.word	0xffff0007

080081dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <RCCEx_PLL3_Config+0x1e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b3f      	cmp	r3, #63	; 0x3f
 80081f8:	d904      	bls.n	8008204 <RCCEx_PLL3_Config+0x28>
 80081fa:	f640 21ee 	movw	r1, #2798	; 0xaee
 80081fe:	4887      	ldr	r0, [pc, #540]	; (800841c <RCCEx_PLL3_Config+0x240>)
 8008200:	f7f8 fe50 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d904      	bls.n	8008216 <RCCEx_PLL3_Config+0x3a>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008214:	d904      	bls.n	8008220 <RCCEx_PLL3_Config+0x44>
 8008216:	f640 21ef 	movw	r1, #2799	; 0xaef
 800821a:	4880      	ldr	r0, [pc, #512]	; (800841c <RCCEx_PLL3_Config+0x240>)
 800821c:	f7f8 fe42 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <RCCEx_PLL3_Config+0x54>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b80      	cmp	r3, #128	; 0x80
 800822e:	d904      	bls.n	800823a <RCCEx_PLL3_Config+0x5e>
 8008230:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8008234:	4879      	ldr	r0, [pc, #484]	; (800841c <RCCEx_PLL3_Config+0x240>)
 8008236:	f7f8 fe35 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <RCCEx_PLL3_Config+0x6e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b80      	cmp	r3, #128	; 0x80
 8008248:	d904      	bls.n	8008254 <RCCEx_PLL3_Config+0x78>
 800824a:	f640 21f1 	movw	r1, #2801	; 0xaf1
 800824e:	4873      	ldr	r0, [pc, #460]	; (800841c <RCCEx_PLL3_Config+0x240>)
 8008250:	f7f8 fe28 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <RCCEx_PLL3_Config+0x88>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	2b80      	cmp	r3, #128	; 0x80
 8008262:	d904      	bls.n	800826e <RCCEx_PLL3_Config+0x92>
 8008264:	f640 21f2 	movw	r1, #2802	; 0xaf2
 8008268:	486c      	ldr	r0, [pc, #432]	; (800841c <RCCEx_PLL3_Config+0x240>)
 800826a:	f7f8 fe1b 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <RCCEx_PLL3_Config+0xc2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827e:	d00e      	beq.n	800829e <RCCEx_PLL3_Config+0xc2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008288:	d009      	beq.n	800829e <RCCEx_PLL3_Config+0xc2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008292:	d004      	beq.n	800829e <RCCEx_PLL3_Config+0xc2>
 8008294:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8008298:	4860      	ldr	r0, [pc, #384]	; (800841c <RCCEx_PLL3_Config+0x240>)
 800829a:	f7f8 fe03 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <RCCEx_PLL3_Config+0xde>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ae:	d004      	beq.n	80082ba <RCCEx_PLL3_Config+0xde>
 80082b0:	f640 21f4 	movw	r1, #2804	; 0xaf4
 80082b4:	4859      	ldr	r0, [pc, #356]	; (800841c <RCCEx_PLL3_Config+0x240>)
 80082b6:	f7f8 fdf5 	bl	8000ea4 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c2:	d304      	bcc.n	80082ce <RCCEx_PLL3_Config+0xf2>
 80082c4:	f640 21f5 	movw	r1, #2805	; 0xaf5
 80082c8:	4854      	ldr	r0, [pc, #336]	; (800841c <RCCEx_PLL3_Config+0x240>)
 80082ca:	f7f8 fdeb 	bl	8000ea4 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082ce:	4b54      	ldr	r3, [pc, #336]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d101      	bne.n	80082de <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e099      	b.n	8008412 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082de:	4b50      	ldr	r3, [pc, #320]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a4f      	ldr	r2, [pc, #316]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80082e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ea:	f7f9 fa5f 	bl	80017ac <HAL_GetTick>
 80082ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082f0:	e008      	b.n	8008304 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082f2:	f7f9 fa5b 	bl	80017ac <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d901      	bls.n	8008304 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e086      	b.n	8008412 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008304:	4b46      	ldr	r3, [pc, #280]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f0      	bne.n	80082f2 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008310:	4b43      	ldr	r3, [pc, #268]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	051b      	lsls	r3, r3, #20
 800831e:	4940      	ldr	r1, [pc, #256]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 8008320:	4313      	orrs	r3, r2
 8008322:	628b      	str	r3, [r1, #40]	; 0x28
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	3b01      	subs	r3, #1
 800832a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	3b01      	subs	r3, #1
 8008334:	025b      	lsls	r3, r3, #9
 8008336:	b29b      	uxth	r3, r3
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	3b01      	subs	r3, #1
 8008340:	041b      	lsls	r3, r3, #16
 8008342:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	3b01      	subs	r3, #1
 800834e:	061b      	lsls	r3, r3, #24
 8008350:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008354:	4932      	ldr	r1, [pc, #200]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 8008356:	4313      	orrs	r3, r2
 8008358:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800835a:	4b31      	ldr	r3, [pc, #196]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	492e      	ldr	r1, [pc, #184]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 8008368:	4313      	orrs	r3, r2
 800836a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800836c:	4b2c      	ldr	r3, [pc, #176]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	4929      	ldr	r1, [pc, #164]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 800837a:	4313      	orrs	r3, r2
 800837c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800837e:	4b28      	ldr	r3, [pc, #160]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	4a27      	ldr	r2, [pc, #156]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 8008384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008388:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800838a:	4b25      	ldr	r3, [pc, #148]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 800838c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800838e:	4b25      	ldr	r3, [pc, #148]	; (8008424 <RCCEx_PLL3_Config+0x248>)
 8008390:	4013      	ands	r3, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	69d2      	ldr	r2, [r2, #28]
 8008396:	00d2      	lsls	r2, r2, #3
 8008398:	4921      	ldr	r1, [pc, #132]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 800839a:	4313      	orrs	r3, r2
 800839c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800839e:	4b20      	ldr	r3, [pc, #128]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	4a1f      	ldr	r2, [pc, #124]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d106      	bne.n	80083be <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083b0:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	4a1a      	ldr	r2, [pc, #104]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083bc:	e00f      	b.n	80083de <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d106      	bne.n	80083d2 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083c4:	4b16      	ldr	r3, [pc, #88]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	4a15      	ldr	r2, [pc, #84]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083d0:	e005      	b.n	80083de <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083d2:	4b13      	ldr	r3, [pc, #76]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	4a12      	ldr	r2, [pc, #72]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083de:	4b10      	ldr	r3, [pc, #64]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a0f      	ldr	r2, [pc, #60]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 80083e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ea:	f7f9 f9df 	bl	80017ac <HAL_GetTick>
 80083ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083f0:	e008      	b.n	8008404 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083f2:	f7f9 f9db 	bl	80017ac <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e006      	b.n	8008412 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <RCCEx_PLL3_Config+0x244>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	08010c48 	.word	0x08010c48
 8008420:	58024400 	.word	0x58024400
 8008424:	ffff0007 	.word	0xffff0007

08008428 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e285      	b.n	800894a <HAL_SPI_Init+0x522>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a96      	ldr	r2, [pc, #600]	; (800869c <HAL_SPI_Init+0x274>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d01c      	beq.n	8008482 <HAL_SPI_Init+0x5a>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a94      	ldr	r2, [pc, #592]	; (80086a0 <HAL_SPI_Init+0x278>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d017      	beq.n	8008482 <HAL_SPI_Init+0x5a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a93      	ldr	r2, [pc, #588]	; (80086a4 <HAL_SPI_Init+0x27c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d012      	beq.n	8008482 <HAL_SPI_Init+0x5a>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a91      	ldr	r2, [pc, #580]	; (80086a8 <HAL_SPI_Init+0x280>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00d      	beq.n	8008482 <HAL_SPI_Init+0x5a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a90      	ldr	r2, [pc, #576]	; (80086ac <HAL_SPI_Init+0x284>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d008      	beq.n	8008482 <HAL_SPI_Init+0x5a>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a8e      	ldr	r2, [pc, #568]	; (80086b0 <HAL_SPI_Init+0x288>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d003      	beq.n	8008482 <HAL_SPI_Init+0x5a>
 800847a:	21f7      	movs	r1, #247	; 0xf7
 800847c:	488d      	ldr	r0, [pc, #564]	; (80086b4 <HAL_SPI_Init+0x28c>)
 800847e:	f7f8 fd11 	bl	8000ea4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d008      	beq.n	800849c <HAL_SPI_Init+0x74>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008492:	d003      	beq.n	800849c <HAL_SPI_Init+0x74>
 8008494:	21f8      	movs	r1, #248	; 0xf8
 8008496:	4887      	ldr	r0, [pc, #540]	; (80086b4 <HAL_SPI_Init+0x28c>)
 8008498:	f7f8 fd04 	bl	8000ea4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d012      	beq.n	80084ca <HAL_SPI_Init+0xa2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084ac:	d00d      	beq.n	80084ca <HAL_SPI_Init+0xa2>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80084b6:	d008      	beq.n	80084ca <HAL_SPI_Init+0xa2>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084c0:	d003      	beq.n	80084ca <HAL_SPI_Init+0xa2>
 80084c2:	21f9      	movs	r1, #249	; 0xf9
 80084c4:	487b      	ldr	r0, [pc, #492]	; (80086b4 <HAL_SPI_Init+0x28c>)
 80084c6:	f7f8 fced 	bl	8000ea4 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	2b1f      	cmp	r3, #31
 80084d0:	d077      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b1e      	cmp	r3, #30
 80084d8:	d073      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	2b1d      	cmp	r3, #29
 80084e0:	d06f      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2b1c      	cmp	r3, #28
 80084e8:	d06b      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	2b1b      	cmp	r3, #27
 80084f0:	d067      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b1a      	cmp	r3, #26
 80084f8:	d063      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	2b19      	cmp	r3, #25
 8008500:	d05f      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b18      	cmp	r3, #24
 8008508:	d05b      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b17      	cmp	r3, #23
 8008510:	d057      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	2b16      	cmp	r3, #22
 8008518:	d053      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	2b15      	cmp	r3, #21
 8008520:	d04f      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	2b14      	cmp	r3, #20
 8008528:	d04b      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	2b13      	cmp	r3, #19
 8008530:	d047      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b15      	cmp	r3, #21
 8008538:	d043      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	2b12      	cmp	r3, #18
 8008540:	d03f      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b11      	cmp	r3, #17
 8008548:	d03b      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b10      	cmp	r3, #16
 8008550:	d037      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	2b0f      	cmp	r3, #15
 8008558:	d033      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b0e      	cmp	r3, #14
 8008560:	d02f      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	2b0d      	cmp	r3, #13
 8008568:	d02b      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	2b0c      	cmp	r3, #12
 8008570:	d027      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b0b      	cmp	r3, #11
 8008578:	d023      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d01f      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	2b09      	cmp	r3, #9
 8008588:	d01b      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b08      	cmp	r3, #8
 8008590:	d017      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	2b07      	cmp	r3, #7
 8008598:	d013      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	2b06      	cmp	r3, #6
 80085a0:	d00f      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	2b05      	cmp	r3, #5
 80085a8:	d00b      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d007      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d003      	beq.n	80085c2 <HAL_SPI_Init+0x19a>
 80085ba:	21fa      	movs	r1, #250	; 0xfa
 80085bc:	483d      	ldr	r0, [pc, #244]	; (80086b4 <HAL_SPI_Init+0x28c>)
 80085be:	f7f8 fc71 	bl	8000ea4 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d047      	beq.n	800865a <HAL_SPI_Init+0x232>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	d043      	beq.n	800865a <HAL_SPI_Init+0x232>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	2b40      	cmp	r3, #64	; 0x40
 80085d8:	d03f      	beq.n	800865a <HAL_SPI_Init+0x232>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085de:	2b60      	cmp	r3, #96	; 0x60
 80085e0:	d03b      	beq.n	800865a <HAL_SPI_Init+0x232>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	2b80      	cmp	r3, #128	; 0x80
 80085e8:	d037      	beq.n	800865a <HAL_SPI_Init+0x232>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ee:	2ba0      	cmp	r3, #160	; 0xa0
 80085f0:	d033      	beq.n	800865a <HAL_SPI_Init+0x232>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f6:	2bc0      	cmp	r3, #192	; 0xc0
 80085f8:	d02f      	beq.n	800865a <HAL_SPI_Init+0x232>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fe:	2be0      	cmp	r3, #224	; 0xe0
 8008600:	d02b      	beq.n	800865a <HAL_SPI_Init+0x232>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860a:	d026      	beq.n	800865a <HAL_SPI_Init+0x232>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008610:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8008614:	d021      	beq.n	800865a <HAL_SPI_Init+0x232>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800861e:	d01c      	beq.n	800865a <HAL_SPI_Init+0x232>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008624:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8008628:	d017      	beq.n	800865a <HAL_SPI_Init+0x232>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008632:	d012      	beq.n	800865a <HAL_SPI_Init+0x232>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008638:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800863c:	d00d      	beq.n	800865a <HAL_SPI_Init+0x232>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008642:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8008646:	d008      	beq.n	800865a <HAL_SPI_Init+0x232>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8008650:	d003      	beq.n	800865a <HAL_SPI_Init+0x232>
 8008652:	21fb      	movs	r1, #251	; 0xfb
 8008654:	4817      	ldr	r0, [pc, #92]	; (80086b4 <HAL_SPI_Init+0x28c>)
 8008656:	f7f8 fc25 	bl	8000ea4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008662:	d00c      	beq.n	800867e <HAL_SPI_Init+0x256>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d008      	beq.n	800867e <HAL_SPI_Init+0x256>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008674:	d003      	beq.n	800867e <HAL_SPI_Init+0x256>
 8008676:	21fc      	movs	r1, #252	; 0xfc
 8008678:	480e      	ldr	r0, [pc, #56]	; (80086b4 <HAL_SPI_Init+0x28c>)
 800867a:	f7f8 fc13 	bl	8000ea4 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008686:	d017      	beq.n	80086b8 <HAL_SPI_Init+0x290>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868c:	2b00      	cmp	r3, #0
 800868e:	d013      	beq.n	80086b8 <HAL_SPI_Init+0x290>
 8008690:	21fd      	movs	r1, #253	; 0xfd
 8008692:	4808      	ldr	r0, [pc, #32]	; (80086b4 <HAL_SPI_Init+0x28c>)
 8008694:	f7f8 fc06 	bl	8000ea4 <assert_failed>
 8008698:	e00e      	b.n	80086b8 <HAL_SPI_Init+0x290>
 800869a:	bf00      	nop
 800869c:	40013000 	.word	0x40013000
 80086a0:	40003800 	.word	0x40003800
 80086a4:	40003c00 	.word	0x40003c00
 80086a8:	40013400 	.word	0x40013400
 80086ac:	40015000 	.word	0x40015000
 80086b0:	58001400 	.word	0x58001400
 80086b4:	08010c84 	.word	0x08010c84
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d026      	beq.n	800870e <HAL_SPI_Init+0x2e6>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086c8:	d021      	beq.n	800870e <HAL_SPI_Init+0x2e6>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d2:	d01c      	beq.n	800870e <HAL_SPI_Init+0x2e6>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086dc:	d017      	beq.n	800870e <HAL_SPI_Init+0x2e6>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e6:	d012      	beq.n	800870e <HAL_SPI_Init+0x2e6>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086f0:	d00d      	beq.n	800870e <HAL_SPI_Init+0x2e6>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80086fa:	d008      	beq.n	800870e <HAL_SPI_Init+0x2e6>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 8008704:	d003      	beq.n	800870e <HAL_SPI_Init+0x2e6>
 8008706:	21fe      	movs	r1, #254	; 0xfe
 8008708:	4892      	ldr	r0, [pc, #584]	; (8008954 <HAL_SPI_Init+0x52c>)
 800870a:	f7f8 fbcb 	bl	8000ea4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <HAL_SPI_Init+0x300>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800871e:	d003      	beq.n	8008728 <HAL_SPI_Init+0x300>
 8008720:	21ff      	movs	r1, #255	; 0xff
 8008722:	488c      	ldr	r0, [pc, #560]	; (8008954 <HAL_SPI_Init+0x52c>)
 8008724:	f7f8 fbbe 	bl	8000ea4 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d009      	beq.n	8008744 <HAL_SPI_Init+0x31c>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008738:	d004      	beq.n	8008744 <HAL_SPI_Init+0x31c>
 800873a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800873e:	4885      	ldr	r0, [pc, #532]	; (8008954 <HAL_SPI_Init+0x52c>)
 8008740:	f7f8 fbb0 	bl	8000ea4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	d11b      	bne.n	8008784 <HAL_SPI_Init+0x35c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <HAL_SPI_Init+0x340>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800875c:	d004      	beq.n	8008768 <HAL_SPI_Init+0x340>
 800875e:	f240 1103 	movw	r1, #259	; 0x103
 8008762:	487c      	ldr	r0, [pc, #496]	; (8008954 <HAL_SPI_Init+0x52c>)
 8008764:	f7f8 fb9e 	bl	8000ea4 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <HAL_SPI_Init+0x35c>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008778:	d004      	beq.n	8008784 <HAL_SPI_Init+0x35c>
 800877a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800877e:	4875      	ldr	r0, [pc, #468]	; (8008954 <HAL_SPI_Init+0x52c>)
 8008780:	f7f8 fb90 	bl	8000ea4 <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a72      	ldr	r2, [pc, #456]	; (8008958 <HAL_SPI_Init+0x530>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d00f      	beq.n	80087b4 <HAL_SPI_Init+0x38c>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a70      	ldr	r2, [pc, #448]	; (800895c <HAL_SPI_Init+0x534>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00a      	beq.n	80087b4 <HAL_SPI_Init+0x38c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a6f      	ldr	r2, [pc, #444]	; (8008960 <HAL_SPI_Init+0x538>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d005      	beq.n	80087b4 <HAL_SPI_Init+0x38c>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	2b0f      	cmp	r3, #15
 80087ae:	d901      	bls.n	80087b4 <HAL_SPI_Init+0x38c>
  {
    return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e0ca      	b.n	800894a <HAL_SPI_Init+0x522>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fc9d 	bl	80090f4 <SPI_GetPacketSize>
 80087ba:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a65      	ldr	r2, [pc, #404]	; (8008958 <HAL_SPI_Init+0x530>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00c      	beq.n	80087e0 <HAL_SPI_Init+0x3b8>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a64      	ldr	r2, [pc, #400]	; (800895c <HAL_SPI_Init+0x534>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d007      	beq.n	80087e0 <HAL_SPI_Init+0x3b8>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a62      	ldr	r2, [pc, #392]	; (8008960 <HAL_SPI_Init+0x538>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d002      	beq.n	80087e0 <HAL_SPI_Init+0x3b8>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d811      	bhi.n	8008804 <HAL_SPI_Init+0x3dc>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087e4:	4a5c      	ldr	r2, [pc, #368]	; (8008958 <HAL_SPI_Init+0x530>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d009      	beq.n	80087fe <HAL_SPI_Init+0x3d6>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a5b      	ldr	r2, [pc, #364]	; (800895c <HAL_SPI_Init+0x534>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d004      	beq.n	80087fe <HAL_SPI_Init+0x3d6>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a59      	ldr	r2, [pc, #356]	; (8008960 <HAL_SPI_Init+0x538>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d104      	bne.n	8008808 <HAL_SPI_Init+0x3e0>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b10      	cmp	r3, #16
 8008802:	d901      	bls.n	8008808 <HAL_SPI_Init+0x3e0>
  {
    return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0a0      	b.n	800894a <HAL_SPI_Init+0x522>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d106      	bne.n	8008822 <HAL_SPI_Init+0x3fa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7f8 fb47 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2202      	movs	r2, #2
 8008826:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0201 	bic.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008842:	d110      	bne.n	8008866 <HAL_SPI_Init+0x43e>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800884c:	d10b      	bne.n	8008866 <HAL_SPI_Init+0x43e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008852:	2b00      	cmp	r3, #0
 8008854:	d107      	bne.n	8008866 <HAL_SPI_Init+0x43e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008864:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69da      	ldr	r2, [r3, #28]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	431a      	orrs	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	431a      	orrs	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008878:	ea42 0103 	orr.w	r1, r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	431a      	orrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	431a      	orrs	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c6:	ea42 0103 	orr.w	r1, r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d113      	bne.n	8008906 <HAL_SPI_Init+0x4de>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008904:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0201 	bic.w	r2, r2, #1
 8008914:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <HAL_SPI_Init+0x510>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	08010c84 	.word	0x08010c84
 8008958:	40013000 	.word	0x40013000
 800895c:	40003800 	.word	0x40003800
 8008960:	40003c00 	.word	0x40003c00

08008964 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08c      	sub	sp, #48	; 0x30
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t   tmp_mode;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <HAL_SPI_TransmitReceive+0x26>
 8008980:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8008984:	489a      	ldr	r0, [pc, #616]	; (8008bf0 <HAL_SPI_TransmitReceive+0x28c>)
 8008986:	f7f8 fa8d 	bl	8000ea4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <HAL_SPI_TransmitReceive+0x34>
 8008994:	2302      	movs	r3, #2
 8008996:	e2da      	b.n	8008f4e <HAL_SPI_TransmitReceive+0x5ea>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089a0:	f7f8 ff04 	bl	80017ac <HAL_GetTick>
 80089a4:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80089a6:	887b      	ldrh	r3, [r7, #2]
 80089a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80089aa:	887b      	ldrh	r3, [r7, #2]
 80089ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  tmp_state           = hspi->State;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80089b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80089bc:	7efb      	ldrb	r3, [r7, #27]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d014      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x88>
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089c8:	d106      	bne.n	80089d8 <HAL_SPI_TransmitReceive+0x74>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d102      	bne.n	80089d8 <HAL_SPI_TransmitReceive+0x74>
 80089d2:	7efb      	ldrb	r3, [r7, #27]
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d009      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 80089d8:	2302      	movs	r3, #2
 80089da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089ea:	e2b0      	b.n	8008f4e <HAL_SPI_TransmitReceive+0x5ea>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d005      	beq.n	80089fe <HAL_SPI_TransmitReceive+0x9a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_SPI_TransmitReceive+0x9a>
 80089f8:	887b      	ldrh	r3, [r7, #2]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a10:	e29d      	b.n	8008f4e <HAL_SPI_TransmitReceive+0x5ea>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b04      	cmp	r3, #4
 8008a1c:	d003      	beq.n	8008a26 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2205      	movs	r2, #5
 8008a22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	887a      	ldrh	r2, [r7, #2]
 8008a38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	887a      	ldrh	r2, [r7, #2]
 8008a40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	887a      	ldrh	r2, [r7, #2]
 8008a4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	887a      	ldrh	r2, [r7, #2]
 8008a56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	4b61      	ldr	r3, [pc, #388]	; (8008bf4 <HAL_SPI_TransmitReceive+0x290>)
 8008a6e:	4013      	ands	r3, r2
 8008a70:	8879      	ldrh	r1, [r7, #2]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	430b      	orrs	r3, r1
 8008a78:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f042 0201 	orr.w	r2, r2, #1
 8008a88:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a92:	d107      	bne.n	8008aa4 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	2b0f      	cmp	r3, #15
 8008aaa:	d970      	bls.n	8008b8e <HAL_SPI_TransmitReceive+0x22a>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008aac:	e044      	b.n	8008b38 <HAL_SPI_TransmitReceive+0x1d4>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d11a      	bne.n	8008af2 <HAL_SPI_TransmitReceive+0x18e>
 8008abc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d017      	beq.n	8008af2 <HAL_SPI_TransmitReceive+0x18e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6812      	ldr	r2, [r2, #0]
 8008acc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad2:	1d1a      	adds	r2, r3, #4
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008af0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695a      	ldr	r2, [r3, #20]
 8008af8:	f248 0308 	movw	r3, #32776	; 0x8008
 8008afc:	4013      	ands	r3, r2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d01a      	beq.n	8008b38 <HAL_SPI_TransmitReceive+0x1d4>
 8008b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d017      	beq.n	8008b38 <HAL_SPI_TransmitReceive+0x1d4>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b12:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b18:	1d1a      	adds	r2, r3, #4
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	3b01      	subs	r3, #1
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b36:	84bb      	strh	r3, [r7, #36]	; 0x24
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1b7      	bne.n	8008aae <HAL_SPI_TransmitReceive+0x14a>
 8008b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1b4      	bne.n	8008aae <HAL_SPI_TransmitReceive+0x14a>
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b44:	f7f8 fe32 	bl	80017ac <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d803      	bhi.n	8008b5c <HAL_SPI_TransmitReceive+0x1f8>
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5a:	d103      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x200>
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f040 81ce 	bne.w	8008f00 <HAL_SPI_TransmitReceive+0x59c>
    {
      /* Call standard close procedure with error check */
      SPI_CloseTransfer(hspi);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f9f7 	bl	8008f58 <SPI_CloseTransfer>

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      hspi->State = HAL_SPI_STATE_READY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e1df      	b.n	8008f4e <HAL_SPI_TransmitReceive+0x5ea>
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	2b07      	cmp	r3, #7
 8008b94:	f240 81ac 	bls.w	8008ef0 <HAL_SPI_TransmitReceive+0x58c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b98:	e0b0      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x398>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d140      	bne.n	8008c2a <HAL_SPI_TransmitReceive+0x2c6>
 8008ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d03d      	beq.n	8008c2a <HAL_SPI_TransmitReceive+0x2c6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008bae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d921      	bls.n	8008bf8 <HAL_SPI_TransmitReceive+0x294>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d01d      	beq.n	8008bf8 <HAL_SPI_TransmitReceive+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bcc:	1d1a      	adds	r2, r3, #4
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	3b02      	subs	r3, #2
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008bec:	e01d      	b.n	8008c2a <HAL_SPI_TransmitReceive+0x2c6>
 8008bee:	bf00      	nop
 8008bf0:	08010c84 	.word	0x08010c84
 8008bf4:	ffff0000 	.word	0xffff0000
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3320      	adds	r3, #32
 8008c02:	8812      	ldrh	r2, [r2, #0]
 8008c04:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0a:	1c9a      	adds	r2, r3, #2
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c28:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d03d      	beq.n	8008cb4 <HAL_SPI_TransmitReceive+0x350>
 8008c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d03a      	beq.n	8008cb4 <HAL_SPI_TransmitReceive+0x350>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d018      	beq.n	8008c7e <HAL_SPI_TransmitReceive+0x31a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008c56:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c5c:	1d1a      	adds	r2, r3, #4
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b02      	subs	r3, #2
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008c7c:	e01a      	b.n	8008cb4 <HAL_SPI_TransmitReceive+0x350>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c8a:	8812      	ldrh	r2, [r2, #0]
 8008c8c:	b292      	uxth	r2, r2
 8008c8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c94:	1c9a      	adds	r2, r3, #2
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cb2:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cb4:	f7f8 fd7a 	bl	80017ac <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d803      	bhi.n	8008ccc <HAL_SPI_TransmitReceive+0x368>
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d102      	bne.n	8008cd2 <HAL_SPI_TransmitReceive+0x36e>
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d114      	bne.n	8008cfc <HAL_SPI_TransmitReceive+0x398>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 f940 	bl	8008f58 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ce6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e128      	b.n	8008f4e <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f47f af4b 	bne.w	8008b9a <HAL_SPI_TransmitReceive+0x236>
 8008d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f47f af47 	bne.w	8008b9a <HAL_SPI_TransmitReceive+0x236>
 8008d0c:	e0f8      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x59c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	f003 0302 	and.w	r3, r3, #2
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d15c      	bne.n	8008dd6 <HAL_SPI_TransmitReceive+0x472>
 8008d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d059      	beq.n	8008dd6 <HAL_SPI_TransmitReceive+0x472>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008d22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d91c      	bls.n	8008d62 <HAL_SPI_TransmitReceive+0x3fe>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	d918      	bls.n	8008d62 <HAL_SPI_TransmitReceive+0x3fe>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d40:	1d1a      	adds	r2, r3, #4
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3b04      	subs	r3, #4
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d60:	e039      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x472>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008d62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d91d      	bls.n	8008da4 <HAL_SPI_TransmitReceive+0x440>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d019      	beq.n	8008da4 <HAL_SPI_TransmitReceive+0x440>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3320      	adds	r3, #32
 8008d7a:	8812      	ldrh	r2, [r2, #0]
 8008d7c:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d82:	1c9a      	adds	r2, r3, #2
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	3b02      	subs	r3, #2
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008da0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008da2:	e018      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3320      	adds	r3, #32
 8008dae:	7812      	ldrb	r2, [r2, #0]
 8008db0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d061      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x544>
 8008de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d05e      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x544>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d018      	beq.n	8008e2a <HAL_SPI_TransmitReceive+0x4c6>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008e02:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e08:	1d1a      	adds	r2, r3, #4
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	3b04      	subs	r3, #4
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008e28:	e03e      	b.n	8008ea8 <HAL_SPI_TransmitReceive+0x544>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e38:	d91b      	bls.n	8008e72 <HAL_SPI_TransmitReceive+0x50e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e46:	8812      	ldrh	r2, [r2, #0]
 8008e48:	b292      	uxth	r2, r2
 8008e4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e50:	1c9a      	adds	r2, r3, #2
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b02      	subs	r3, #2
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008e70:	e01a      	b.n	8008ea8 <HAL_SPI_TransmitReceive+0x544>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ea6:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ea8:	f7f8 fc80 	bl	80017ac <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d803      	bhi.n	8008ec0 <HAL_SPI_TransmitReceive+0x55c>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d102      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x562>
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d114      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x58c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f000 f846 	bl	8008f58 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e02e      	b.n	8008f4e <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f47f af0b 	bne.w	8008d0e <HAL_SPI_TransmitReceive+0x3aa>
 8008ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f47f af07 	bne.w	8008d0e <HAL_SPI_TransmitReceive+0x3aa>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	2200      	movs	r2, #0
 8008f08:	2108      	movs	r1, #8
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 f8c4 	bl	8009098 <SPI_WaitOnFlagUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d007      	beq.n	8008f26 <HAL_SPI_TransmitReceive+0x5c2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f1c:	f043 0220 	orr.w	r2, r3, #32
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 f816 	bl	8008f58 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <HAL_SPI_TransmitReceive+0x5e6>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e001      	b.n	8008f4e <HAL_SPI_TransmitReceive+0x5ea>
  }
  return errorcode;
 8008f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3728      	adds	r7, #40	; 0x28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop

08008f58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0208 	orr.w	r2, r2, #8
 8008f76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	699a      	ldr	r2, [r3, #24]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0210 	orr.w	r2, r2, #16
 8008f86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6919      	ldr	r1, [r3, #16]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	4b3c      	ldr	r3, [pc, #240]	; (8009094 <SPI_CloseTransfer+0x13c>)
 8008fa4:	400b      	ands	r3, r1
 8008fa6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008fb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b04      	cmp	r3, #4
 8008fc2:	d014      	beq.n	8008fee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00f      	beq.n	8008fee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	699a      	ldr	r2, [r3, #24]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f042 0220 	orr.w	r2, r2, #32
 8008fec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d014      	beq.n	8009024 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00f      	beq.n	8009024 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800900a:	f043 0204 	orr.w	r2, r3, #4
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009022:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00f      	beq.n	800904e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009034:	f043 0201 	orr.w	r2, r3, #1
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	699a      	ldr	r2, [r3, #24]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800904c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00f      	beq.n	8009078 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800905e:	f043 0208 	orr.w	r2, r3, #8
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009076:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	fffffc90 	.word	0xfffffc90

08009098 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	603b      	str	r3, [r7, #0]
 80090a4:	4613      	mov	r3, r2
 80090a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090a8:	e010      	b.n	80090cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090aa:	f7f8 fb7f 	bl	80017ac <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d803      	bhi.n	80090c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d102      	bne.n	80090c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e00f      	b.n	80090ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	695a      	ldr	r2, [r3, #20]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4013      	ands	r3, r2
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	429a      	cmp	r2, r3
 80090da:	bf0c      	ite	eq
 80090dc:	2301      	moveq	r3, #1
 80090de:	2300      	movne	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	461a      	mov	r2, r3
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d0df      	beq.n	80090aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	3301      	adds	r3, #1
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	3301      	adds	r3, #1
 800910c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	3307      	adds	r3, #7
 8009112:	08db      	lsrs	r3, r3, #3
 8009114:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	fb02 f303 	mul.w	r3, r2, r3
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
	...

0800912c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e0ab      	b.n	8009296 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d032      	beq.n	80091ac <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a55      	ldr	r2, [pc, #340]	; (80092a0 <HAL_UART_Init+0x174>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d05f      	beq.n	8009210 <HAL_UART_Init+0xe4>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a53      	ldr	r2, [pc, #332]	; (80092a4 <HAL_UART_Init+0x178>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d05a      	beq.n	8009210 <HAL_UART_Init+0xe4>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a52      	ldr	r2, [pc, #328]	; (80092a8 <HAL_UART_Init+0x17c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d055      	beq.n	8009210 <HAL_UART_Init+0xe4>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a50      	ldr	r2, [pc, #320]	; (80092ac <HAL_UART_Init+0x180>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d050      	beq.n	8009210 <HAL_UART_Init+0xe4>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a4f      	ldr	r2, [pc, #316]	; (80092b0 <HAL_UART_Init+0x184>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d04b      	beq.n	8009210 <HAL_UART_Init+0xe4>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a4d      	ldr	r2, [pc, #308]	; (80092b4 <HAL_UART_Init+0x188>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d046      	beq.n	8009210 <HAL_UART_Init+0xe4>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a4c      	ldr	r2, [pc, #304]	; (80092b8 <HAL_UART_Init+0x18c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d041      	beq.n	8009210 <HAL_UART_Init+0xe4>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a4a      	ldr	r2, [pc, #296]	; (80092bc <HAL_UART_Init+0x190>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d03c      	beq.n	8009210 <HAL_UART_Init+0xe4>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a49      	ldr	r2, [pc, #292]	; (80092c0 <HAL_UART_Init+0x194>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d037      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091a0:	f44f 7199 	mov.w	r1, #306	; 0x132
 80091a4:	4847      	ldr	r0, [pc, #284]	; (80092c4 <HAL_UART_Init+0x198>)
 80091a6:	f7f7 fe7d 	bl	8000ea4 <assert_failed>
 80091aa:	e031      	b.n	8009210 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a3b      	ldr	r2, [pc, #236]	; (80092a0 <HAL_UART_Init+0x174>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d02c      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a3a      	ldr	r2, [pc, #232]	; (80092a4 <HAL_UART_Init+0x178>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d027      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a38      	ldr	r2, [pc, #224]	; (80092a8 <HAL_UART_Init+0x17c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d022      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a37      	ldr	r2, [pc, #220]	; (80092ac <HAL_UART_Init+0x180>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d01d      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a35      	ldr	r2, [pc, #212]	; (80092b0 <HAL_UART_Init+0x184>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d018      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a34      	ldr	r2, [pc, #208]	; (80092b4 <HAL_UART_Init+0x188>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d013      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a32      	ldr	r2, [pc, #200]	; (80092b8 <HAL_UART_Init+0x18c>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00e      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a31      	ldr	r2, [pc, #196]	; (80092bc <HAL_UART_Init+0x190>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d009      	beq.n	8009210 <HAL_UART_Init+0xe4>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a2f      	ldr	r2, [pc, #188]	; (80092c0 <HAL_UART_Init+0x194>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d004      	beq.n	8009210 <HAL_UART_Init+0xe4>
 8009206:	f240 1137 	movw	r1, #311	; 0x137
 800920a:	482e      	ldr	r0, [pc, #184]	; (80092c4 <HAL_UART_Init+0x198>)
 800920c:	f7f7 fe4a 	bl	8000ea4 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009216:	2b00      	cmp	r3, #0
 8009218:	d106      	bne.n	8009228 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7f7 fffa 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2224      	movs	r2, #36	; 0x24
 800922c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 0201 	bic.w	r2, r2, #1
 800923e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f841 	bl	80092c8 <UART_SetConfig>
 8009246:	4603      	mov	r3, r0
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e022      	b.n	8009296 <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f002 fa93 	bl	800b784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800926c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689a      	ldr	r2, [r3, #8]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800927c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0201 	orr.w	r2, r2, #1
 800928c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f002 fbee 	bl	800ba70 <UART_CheckIdleState>
 8009294:	4603      	mov	r3, r0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	40011000 	.word	0x40011000
 80092a4:	40004400 	.word	0x40004400
 80092a8:	40004800 	.word	0x40004800
 80092ac:	40004c00 	.word	0x40004c00
 80092b0:	40005000 	.word	0x40005000
 80092b4:	40011400 	.word	0x40011400
 80092b8:	40007800 	.word	0x40007800
 80092bc:	40007c00 	.word	0x40007c00
 80092c0:	58000c00 	.word	0x58000c00
 80092c4:	08010cbc 	.word	0x08010cbc

080092c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80092cc:	b090      	sub	sp, #64	; 0x40
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80092dc:	2300      	movs	r3, #0
 80092de:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4a17      	ldr	r2, [pc, #92]	; (8009344 <UART_SetConfig+0x7c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d904      	bls.n	80092f4 <UART_SetConfig+0x2c>
 80092ea:	f640 3134 	movw	r1, #2868	; 0xb34
 80092ee:	4816      	ldr	r0, [pc, #88]	; (8009348 <UART_SetConfig+0x80>)
 80092f0:	f7f7 fdd8 	bl	8000ea4 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092fc:	d00d      	beq.n	800931a <UART_SetConfig+0x52>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d009      	beq.n	800931a <UART_SetConfig+0x52>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930e:	d004      	beq.n	800931a <UART_SetConfig+0x52>
 8009310:	f640 3135 	movw	r1, #2869	; 0xb35
 8009314:	480c      	ldr	r0, [pc, #48]	; (8009348 <UART_SetConfig+0x80>)
 8009316:	f7f7 fdc5 	bl	8000ea4 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a0b      	ldr	r2, [pc, #44]	; (800934c <UART_SetConfig+0x84>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d115      	bne.n	8009350 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d037      	beq.n	800939c <UART_SetConfig+0xd4>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009334:	d032      	beq.n	800939c <UART_SetConfig+0xd4>
 8009336:	f640 3138 	movw	r1, #2872	; 0xb38
 800933a:	4803      	ldr	r0, [pc, #12]	; (8009348 <UART_SetConfig+0x80>)
 800933c:	f7f7 fdb2 	bl	8000ea4 <assert_failed>
 8009340:	e02c      	b.n	800939c <UART_SetConfig+0xd4>
 8009342:	bf00      	nop
 8009344:	00bebc20 	.word	0x00bebc20
 8009348:	08010cbc 	.word	0x08010cbc
 800934c:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009358:	d012      	beq.n	8009380 <UART_SetConfig+0xb8>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00e      	beq.n	8009380 <UART_SetConfig+0xb8>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800936a:	d009      	beq.n	8009380 <UART_SetConfig+0xb8>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009374:	d004      	beq.n	8009380 <UART_SetConfig+0xb8>
 8009376:	f640 313c 	movw	r1, #2876	; 0xb3c
 800937a:	48aa      	ldr	r0, [pc, #680]	; (8009624 <UART_SetConfig+0x35c>)
 800937c:	f7f7 fd92 	bl	8000ea4 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <UART_SetConfig+0xd4>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a1b      	ldr	r3, [r3, #32]
 800938c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009390:	d004      	beq.n	800939c <UART_SetConfig+0xd4>
 8009392:	f640 313d 	movw	r1, #2877	; 0xb3d
 8009396:	48a3      	ldr	r0, [pc, #652]	; (8009624 <UART_SetConfig+0x35c>)
 8009398:	f7f7 fd84 	bl	8000ea4 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00e      	beq.n	80093c2 <UART_SetConfig+0xfa>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ac:	d009      	beq.n	80093c2 <UART_SetConfig+0xfa>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80093b6:	d004      	beq.n	80093c2 <UART_SetConfig+0xfa>
 80093b8:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80093bc:	4899      	ldr	r0, [pc, #612]	; (8009624 <UART_SetConfig+0x35c>)
 80093be:	f7f7 fd71 	bl	8000ea4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	f023 030c 	bic.w	r3, r3, #12
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d103      	bne.n	80093d6 <UART_SetConfig+0x10e>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <UART_SetConfig+0x118>
 80093d6:	f640 3141 	movw	r1, #2881	; 0xb41
 80093da:	4892      	ldr	r0, [pc, #584]	; (8009624 <UART_SetConfig+0x35c>)
 80093dc:	f7f7 fd62 	bl	8000ea4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d013      	beq.n	8009410 <UART_SetConfig+0x148>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f0:	d00e      	beq.n	8009410 <UART_SetConfig+0x148>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093fa:	d009      	beq.n	8009410 <UART_SetConfig+0x148>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009404:	d004      	beq.n	8009410 <UART_SetConfig+0x148>
 8009406:	f640 3142 	movw	r1, #2882	; 0xb42
 800940a:	4886      	ldr	r0, [pc, #536]	; (8009624 <UART_SetConfig+0x35c>)
 800940c:	f7f7 fd4a 	bl	8000ea4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d009      	beq.n	800942c <UART_SetConfig+0x164>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009420:	d004      	beq.n	800942c <UART_SetConfig+0x164>
 8009422:	f640 3143 	movw	r1, #2883	; 0xb43
 8009426:	487f      	ldr	r0, [pc, #508]	; (8009624 <UART_SetConfig+0x35c>)
 8009428:	f7f7 fd3c 	bl	8000ea4 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	2b00      	cmp	r3, #0
 8009432:	d030      	beq.n	8009496 <UART_SetConfig+0x1ce>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	2b01      	cmp	r3, #1
 800943a:	d02c      	beq.n	8009496 <UART_SetConfig+0x1ce>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	2b02      	cmp	r3, #2
 8009442:	d028      	beq.n	8009496 <UART_SetConfig+0x1ce>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	2b03      	cmp	r3, #3
 800944a:	d024      	beq.n	8009496 <UART_SetConfig+0x1ce>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	2b04      	cmp	r3, #4
 8009452:	d020      	beq.n	8009496 <UART_SetConfig+0x1ce>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	2b05      	cmp	r3, #5
 800945a:	d01c      	beq.n	8009496 <UART_SetConfig+0x1ce>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	2b06      	cmp	r3, #6
 8009462:	d018      	beq.n	8009496 <UART_SetConfig+0x1ce>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	2b07      	cmp	r3, #7
 800946a:	d014      	beq.n	8009496 <UART_SetConfig+0x1ce>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	2b08      	cmp	r3, #8
 8009472:	d010      	beq.n	8009496 <UART_SetConfig+0x1ce>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	2b09      	cmp	r3, #9
 800947a:	d00c      	beq.n	8009496 <UART_SetConfig+0x1ce>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	2b0a      	cmp	r3, #10
 8009482:	d008      	beq.n	8009496 <UART_SetConfig+0x1ce>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	2b0b      	cmp	r3, #11
 800948a:	d004      	beq.n	8009496 <UART_SetConfig+0x1ce>
 800948c:	f640 3144 	movw	r1, #2884	; 0xb44
 8009490:	4864      	ldr	r0, [pc, #400]	; (8009624 <UART_SetConfig+0x35c>)
 8009492:	f7f7 fd07 	bl	8000ea4 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094b4:	4313      	orrs	r3, r2
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	4b5a      	ldr	r3, [pc, #360]	; (8009628 <UART_SetConfig+0x360>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	6812      	ldr	r2, [r2, #0]
 80094c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a4f      	ldr	r2, [pc, #316]	; (800962c <UART_SetConfig+0x364>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d004      	beq.n	80094fc <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094f8:	4313      	orrs	r3, r2
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689a      	ldr	r2, [r3, #8]
 8009502:	4b4b      	ldr	r3, [pc, #300]	; (8009630 <UART_SetConfig+0x368>)
 8009504:	4013      	ands	r3, r2
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6812      	ldr	r2, [r2, #0]
 800950a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800950c:	430b      	orrs	r3, r1
 800950e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009516:	f023 010f 	bic.w	r1, r3, #15
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a42      	ldr	r2, [pc, #264]	; (8009634 <UART_SetConfig+0x36c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	f040 8085 	bne.w	800963c <UART_SetConfig+0x374>
 8009532:	4b41      	ldr	r3, [pc, #260]	; (8009638 <UART_SetConfig+0x370>)
 8009534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800953a:	2b28      	cmp	r3, #40	; 0x28
 800953c:	d86c      	bhi.n	8009618 <UART_SetConfig+0x350>
 800953e:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <UART_SetConfig+0x27c>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	080095e9 	.word	0x080095e9
 8009548:	08009619 	.word	0x08009619
 800954c:	08009619 	.word	0x08009619
 8009550:	08009619 	.word	0x08009619
 8009554:	08009619 	.word	0x08009619
 8009558:	08009619 	.word	0x08009619
 800955c:	08009619 	.word	0x08009619
 8009560:	08009619 	.word	0x08009619
 8009564:	080095f1 	.word	0x080095f1
 8009568:	08009619 	.word	0x08009619
 800956c:	08009619 	.word	0x08009619
 8009570:	08009619 	.word	0x08009619
 8009574:	08009619 	.word	0x08009619
 8009578:	08009619 	.word	0x08009619
 800957c:	08009619 	.word	0x08009619
 8009580:	08009619 	.word	0x08009619
 8009584:	080095f9 	.word	0x080095f9
 8009588:	08009619 	.word	0x08009619
 800958c:	08009619 	.word	0x08009619
 8009590:	08009619 	.word	0x08009619
 8009594:	08009619 	.word	0x08009619
 8009598:	08009619 	.word	0x08009619
 800959c:	08009619 	.word	0x08009619
 80095a0:	08009619 	.word	0x08009619
 80095a4:	08009601 	.word	0x08009601
 80095a8:	08009619 	.word	0x08009619
 80095ac:	08009619 	.word	0x08009619
 80095b0:	08009619 	.word	0x08009619
 80095b4:	08009619 	.word	0x08009619
 80095b8:	08009619 	.word	0x08009619
 80095bc:	08009619 	.word	0x08009619
 80095c0:	08009619 	.word	0x08009619
 80095c4:	08009609 	.word	0x08009609
 80095c8:	08009619 	.word	0x08009619
 80095cc:	08009619 	.word	0x08009619
 80095d0:	08009619 	.word	0x08009619
 80095d4:	08009619 	.word	0x08009619
 80095d8:	08009619 	.word	0x08009619
 80095dc:	08009619 	.word	0x08009619
 80095e0:	08009619 	.word	0x08009619
 80095e4:	08009611 	.word	0x08009611
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095ee:	e23b      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80095f0:	2304      	movs	r3, #4
 80095f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095f6:	e237      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80095f8:	2308      	movs	r3, #8
 80095fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095fe:	e233      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009600:	2310      	movs	r3, #16
 8009602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009606:	e22f      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009608:	2320      	movs	r3, #32
 800960a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800960e:	e22b      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009610:	2340      	movs	r3, #64	; 0x40
 8009612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009616:	e227      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009618:	2380      	movs	r3, #128	; 0x80
 800961a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800961e:	bf00      	nop
 8009620:	e222      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009622:	bf00      	nop
 8009624:	08010cbc 	.word	0x08010cbc
 8009628:	cfff69f3 	.word	0xcfff69f3
 800962c:	58000c00 	.word	0x58000c00
 8009630:	11fff4ff 	.word	0x11fff4ff
 8009634:	40011000 	.word	0x40011000
 8009638:	58024400 	.word	0x58024400
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4ac9      	ldr	r2, [pc, #804]	; (8009968 <UART_SetConfig+0x6a0>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d131      	bne.n	80096aa <UART_SetConfig+0x3e2>
 8009646:	4bc9      	ldr	r3, [pc, #804]	; (800996c <UART_SetConfig+0x6a4>)
 8009648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	2b05      	cmp	r3, #5
 8009650:	d826      	bhi.n	80096a0 <UART_SetConfig+0x3d8>
 8009652:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <UART_SetConfig+0x390>)
 8009654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009658:	08009671 	.word	0x08009671
 800965c:	08009679 	.word	0x08009679
 8009660:	08009681 	.word	0x08009681
 8009664:	08009689 	.word	0x08009689
 8009668:	08009691 	.word	0x08009691
 800966c:	08009699 	.word	0x08009699
 8009670:	2300      	movs	r3, #0
 8009672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009676:	e1f7      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800967e:	e1f3      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009686:	e1ef      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800968e:	e1eb      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009690:	2320      	movs	r3, #32
 8009692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009696:	e1e7      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800969e:	e1e3      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096a6:	bf00      	nop
 80096a8:	e1de      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4ab0      	ldr	r2, [pc, #704]	; (8009970 <UART_SetConfig+0x6a8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d132      	bne.n	800971a <UART_SetConfig+0x452>
 80096b4:	4bad      	ldr	r3, [pc, #692]	; (800996c <UART_SetConfig+0x6a4>)
 80096b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b8:	f003 0307 	and.w	r3, r3, #7
 80096bc:	2b05      	cmp	r3, #5
 80096be:	d827      	bhi.n	8009710 <UART_SetConfig+0x448>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <UART_SetConfig+0x400>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096e1 	.word	0x080096e1
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	080096f1 	.word	0x080096f1
 80096d4:	080096f9 	.word	0x080096f9
 80096d8:	08009701 	.word	0x08009701
 80096dc:	08009709 	.word	0x08009709
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096e6:	e1bf      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80096e8:	2304      	movs	r3, #4
 80096ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096ee:	e1bb      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80096f0:	2308      	movs	r3, #8
 80096f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096f6:	e1b7      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80096f8:	2310      	movs	r3, #16
 80096fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096fe:	e1b3      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009700:	2320      	movs	r3, #32
 8009702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009706:	e1af      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009708:	2340      	movs	r3, #64	; 0x40
 800970a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800970e:	e1ab      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009710:	2380      	movs	r3, #128	; 0x80
 8009712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009716:	bf00      	nop
 8009718:	e1a6      	b.n	8009a68 <UART_SetConfig+0x7a0>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a95      	ldr	r2, [pc, #596]	; (8009974 <UART_SetConfig+0x6ac>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d132      	bne.n	800978a <UART_SetConfig+0x4c2>
 8009724:	4b91      	ldr	r3, [pc, #580]	; (800996c <UART_SetConfig+0x6a4>)
 8009726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	2b05      	cmp	r3, #5
 800972e:	d827      	bhi.n	8009780 <UART_SetConfig+0x4b8>
 8009730:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <UART_SetConfig+0x470>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	08009751 	.word	0x08009751
 800973c:	08009759 	.word	0x08009759
 8009740:	08009761 	.word	0x08009761
 8009744:	08009769 	.word	0x08009769
 8009748:	08009771 	.word	0x08009771
 800974c:	08009779 	.word	0x08009779
 8009750:	2300      	movs	r3, #0
 8009752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009756:	e187      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800975e:	e183      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009766:	e17f      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800976e:	e17b      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009770:	2320      	movs	r3, #32
 8009772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009776:	e177      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009778:	2340      	movs	r3, #64	; 0x40
 800977a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800977e:	e173      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009780:	2380      	movs	r3, #128	; 0x80
 8009782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009786:	bf00      	nop
 8009788:	e16e      	b.n	8009a68 <UART_SetConfig+0x7a0>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a7a      	ldr	r2, [pc, #488]	; (8009978 <UART_SetConfig+0x6b0>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d132      	bne.n	80097fa <UART_SetConfig+0x532>
 8009794:	4b75      	ldr	r3, [pc, #468]	; (800996c <UART_SetConfig+0x6a4>)
 8009796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009798:	f003 0307 	and.w	r3, r3, #7
 800979c:	2b05      	cmp	r3, #5
 800979e:	d827      	bhi.n	80097f0 <UART_SetConfig+0x528>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <UART_SetConfig+0x4e0>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097c1 	.word	0x080097c1
 80097ac:	080097c9 	.word	0x080097c9
 80097b0:	080097d1 	.word	0x080097d1
 80097b4:	080097d9 	.word	0x080097d9
 80097b8:	080097e1 	.word	0x080097e1
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	2300      	movs	r3, #0
 80097c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097c6:	e14f      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80097c8:	2304      	movs	r3, #4
 80097ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097ce:	e14b      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80097d0:	2308      	movs	r3, #8
 80097d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097d6:	e147      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80097d8:	2310      	movs	r3, #16
 80097da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097de:	e143      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80097e0:	2320      	movs	r3, #32
 80097e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097e6:	e13f      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097ee:	e13b      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80097f0:	2380      	movs	r3, #128	; 0x80
 80097f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097f6:	bf00      	nop
 80097f8:	e136      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a5f      	ldr	r2, [pc, #380]	; (800997c <UART_SetConfig+0x6b4>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d178      	bne.n	80098f6 <UART_SetConfig+0x62e>
 8009804:	4b59      	ldr	r3, [pc, #356]	; (800996c <UART_SetConfig+0x6a4>)
 8009806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800980c:	2b28      	cmp	r3, #40	; 0x28
 800980e:	d86d      	bhi.n	80098ec <UART_SetConfig+0x624>
 8009810:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <UART_SetConfig+0x550>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	080098bd 	.word	0x080098bd
 800981c:	080098ed 	.word	0x080098ed
 8009820:	080098ed 	.word	0x080098ed
 8009824:	080098ed 	.word	0x080098ed
 8009828:	080098ed 	.word	0x080098ed
 800982c:	080098ed 	.word	0x080098ed
 8009830:	080098ed 	.word	0x080098ed
 8009834:	080098ed 	.word	0x080098ed
 8009838:	080098c5 	.word	0x080098c5
 800983c:	080098ed 	.word	0x080098ed
 8009840:	080098ed 	.word	0x080098ed
 8009844:	080098ed 	.word	0x080098ed
 8009848:	080098ed 	.word	0x080098ed
 800984c:	080098ed 	.word	0x080098ed
 8009850:	080098ed 	.word	0x080098ed
 8009854:	080098ed 	.word	0x080098ed
 8009858:	080098cd 	.word	0x080098cd
 800985c:	080098ed 	.word	0x080098ed
 8009860:	080098ed 	.word	0x080098ed
 8009864:	080098ed 	.word	0x080098ed
 8009868:	080098ed 	.word	0x080098ed
 800986c:	080098ed 	.word	0x080098ed
 8009870:	080098ed 	.word	0x080098ed
 8009874:	080098ed 	.word	0x080098ed
 8009878:	080098d5 	.word	0x080098d5
 800987c:	080098ed 	.word	0x080098ed
 8009880:	080098ed 	.word	0x080098ed
 8009884:	080098ed 	.word	0x080098ed
 8009888:	080098ed 	.word	0x080098ed
 800988c:	080098ed 	.word	0x080098ed
 8009890:	080098ed 	.word	0x080098ed
 8009894:	080098ed 	.word	0x080098ed
 8009898:	080098dd 	.word	0x080098dd
 800989c:	080098ed 	.word	0x080098ed
 80098a0:	080098ed 	.word	0x080098ed
 80098a4:	080098ed 	.word	0x080098ed
 80098a8:	080098ed 	.word	0x080098ed
 80098ac:	080098ed 	.word	0x080098ed
 80098b0:	080098ed 	.word	0x080098ed
 80098b4:	080098ed 	.word	0x080098ed
 80098b8:	080098e5 	.word	0x080098e5
 80098bc:	2301      	movs	r3, #1
 80098be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098c2:	e0d1      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80098c4:	2304      	movs	r3, #4
 80098c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ca:	e0cd      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80098cc:	2308      	movs	r3, #8
 80098ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098d2:	e0c9      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80098d4:	2310      	movs	r3, #16
 80098d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098da:	e0c5      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80098dc:	2320      	movs	r3, #32
 80098de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098e2:	e0c1      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80098e4:	2340      	movs	r3, #64	; 0x40
 80098e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ea:	e0bd      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80098ec:	2380      	movs	r3, #128	; 0x80
 80098ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098f2:	bf00      	nop
 80098f4:	e0b8      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a21      	ldr	r2, [pc, #132]	; (8009980 <UART_SetConfig+0x6b8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d141      	bne.n	8009984 <UART_SetConfig+0x6bc>
 8009900:	4b1a      	ldr	r3, [pc, #104]	; (800996c <UART_SetConfig+0x6a4>)
 8009902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	2b05      	cmp	r3, #5
 800990a:	d827      	bhi.n	800995c <UART_SetConfig+0x694>
 800990c:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <UART_SetConfig+0x64c>)
 800990e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009912:	bf00      	nop
 8009914:	0800992d 	.word	0x0800992d
 8009918:	08009935 	.word	0x08009935
 800991c:	0800993d 	.word	0x0800993d
 8009920:	08009945 	.word	0x08009945
 8009924:	0800994d 	.word	0x0800994d
 8009928:	08009955 	.word	0x08009955
 800992c:	2300      	movs	r3, #0
 800992e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009932:	e099      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009934:	2304      	movs	r3, #4
 8009936:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800993a:	e095      	b.n	8009a68 <UART_SetConfig+0x7a0>
 800993c:	2308      	movs	r3, #8
 800993e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009942:	e091      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009944:	2310      	movs	r3, #16
 8009946:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800994a:	e08d      	b.n	8009a68 <UART_SetConfig+0x7a0>
 800994c:	2320      	movs	r3, #32
 800994e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009952:	e089      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009954:	2340      	movs	r3, #64	; 0x40
 8009956:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800995a:	e085      	b.n	8009a68 <UART_SetConfig+0x7a0>
 800995c:	2380      	movs	r3, #128	; 0x80
 800995e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009962:	bf00      	nop
 8009964:	e080      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009966:	bf00      	nop
 8009968:	40004400 	.word	0x40004400
 800996c:	58024400 	.word	0x58024400
 8009970:	40004800 	.word	0x40004800
 8009974:	40004c00 	.word	0x40004c00
 8009978:	40005000 	.word	0x40005000
 800997c:	40011400 	.word	0x40011400
 8009980:	40007800 	.word	0x40007800
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a98      	ldr	r2, [pc, #608]	; (8009bec <UART_SetConfig+0x924>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d131      	bne.n	80099f2 <UART_SetConfig+0x72a>
 800998e:	4b98      	ldr	r3, [pc, #608]	; (8009bf0 <UART_SetConfig+0x928>)
 8009990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009992:	f003 0307 	and.w	r3, r3, #7
 8009996:	2b05      	cmp	r3, #5
 8009998:	d826      	bhi.n	80099e8 <UART_SetConfig+0x720>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x6d8>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	080099b9 	.word	0x080099b9
 80099a4:	080099c1 	.word	0x080099c1
 80099a8:	080099c9 	.word	0x080099c9
 80099ac:	080099d1 	.word	0x080099d1
 80099b0:	080099d9 	.word	0x080099d9
 80099b4:	080099e1 	.word	0x080099e1
 80099b8:	2300      	movs	r3, #0
 80099ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099be:	e053      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	e04f      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ce:	e04b      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099d6:	e047      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80099d8:	2320      	movs	r3, #32
 80099da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099de:	e043      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099e6:	e03f      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ee:	bf00      	nop
 80099f0:	e03a      	b.n	8009a68 <UART_SetConfig+0x7a0>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a7f      	ldr	r2, [pc, #508]	; (8009bf4 <UART_SetConfig+0x92c>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d132      	bne.n	8009a62 <UART_SetConfig+0x79a>
 80099fc:	4b7c      	ldr	r3, [pc, #496]	; (8009bf0 <UART_SetConfig+0x928>)
 80099fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	d827      	bhi.n	8009a58 <UART_SetConfig+0x790>
 8009a08:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <UART_SetConfig+0x748>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a29 	.word	0x08009a29
 8009a14:	08009a31 	.word	0x08009a31
 8009a18:	08009a39 	.word	0x08009a39
 8009a1c:	08009a41 	.word	0x08009a41
 8009a20:	08009a49 	.word	0x08009a49
 8009a24:	08009a51 	.word	0x08009a51
 8009a28:	2302      	movs	r3, #2
 8009a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a2e:	e01b      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009a30:	2304      	movs	r3, #4
 8009a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a36:	e017      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009a38:	2308      	movs	r3, #8
 8009a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a3e:	e013      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009a40:	2310      	movs	r3, #16
 8009a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a46:	e00f      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a4e:	e00b      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a56:	e007      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009a58:	2380      	movs	r3, #128	; 0x80
 8009a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a5e:	bf00      	nop
 8009a60:	e002      	b.n	8009a68 <UART_SetConfig+0x7a0>
 8009a62:	2380      	movs	r3, #128	; 0x80
 8009a64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a61      	ldr	r2, [pc, #388]	; (8009bf4 <UART_SetConfig+0x92c>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	f040 86f3 	bne.w	800a85a <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	f000 80bd 	beq.w	8009bf8 <UART_SetConfig+0x930>
 8009a7e:	2b08      	cmp	r3, #8
 8009a80:	dc04      	bgt.n	8009a8c <UART_SetConfig+0x7c4>
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d00c      	beq.n	8009aa0 <UART_SetConfig+0x7d8>
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	d05b      	beq.n	8009b42 <UART_SetConfig+0x87a>
 8009a8a:	e276      	b.n	8009f7a <UART_SetConfig+0xcb2>
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	f000 81ad 	beq.w	8009dec <UART_SetConfig+0xb24>
 8009a92:	2b40      	cmp	r3, #64	; 0x40
 8009a94:	f000 821a 	beq.w	8009ecc <UART_SetConfig+0xc04>
 8009a98:	2b10      	cmp	r3, #16
 8009a9a:	f000 8101 	beq.w	8009ca0 <UART_SetConfig+0x9d8>
 8009a9e:	e26c      	b.n	8009f7a <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009aa0:	f7fd ffb0 	bl	8007a04 <HAL_RCCEx_GetD3PCLK1Freq>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d044      	beq.n	8009b38 <UART_SetConfig+0x870>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d03e      	beq.n	8009b34 <UART_SetConfig+0x86c>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d038      	beq.n	8009b30 <UART_SetConfig+0x868>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d032      	beq.n	8009b2c <UART_SetConfig+0x864>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	d02c      	beq.n	8009b28 <UART_SetConfig+0x860>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	2b05      	cmp	r3, #5
 8009ad4:	d026      	beq.n	8009b24 <UART_SetConfig+0x85c>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	2b06      	cmp	r3, #6
 8009adc:	d020      	beq.n	8009b20 <UART_SetConfig+0x858>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2b07      	cmp	r3, #7
 8009ae4:	d01a      	beq.n	8009b1c <UART_SetConfig+0x854>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2b08      	cmp	r3, #8
 8009aec:	d014      	beq.n	8009b18 <UART_SetConfig+0x850>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b09      	cmp	r3, #9
 8009af4:	d00e      	beq.n	8009b14 <UART_SetConfig+0x84c>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2b0a      	cmp	r3, #10
 8009afc:	d008      	beq.n	8009b10 <UART_SetConfig+0x848>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b0b      	cmp	r3, #11
 8009b04:	d102      	bne.n	8009b0c <UART_SetConfig+0x844>
 8009b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0a:	e016      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e014      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b10:	2380      	movs	r3, #128	; 0x80
 8009b12:	e012      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	e010      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b18:	2320      	movs	r3, #32
 8009b1a:	e00e      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	e00c      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b20:	230c      	movs	r3, #12
 8009b22:	e00a      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b24:	230a      	movs	r3, #10
 8009b26:	e008      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b28:	2308      	movs	r3, #8
 8009b2a:	e006      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b2c:	2306      	movs	r3, #6
 8009b2e:	e004      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b30:	2304      	movs	r3, #4
 8009b32:	e002      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b34:	2302      	movs	r3, #2
 8009b36:	e000      	b.n	8009b3a <UART_SetConfig+0x872>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b40:	e21f      	b.n	8009f82 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b42:	f107 0318 	add.w	r3, r7, #24
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fd ff72 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b4c:	69fa      	ldr	r2, [r7, #28]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d044      	beq.n	8009be0 <UART_SetConfig+0x918>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d03e      	beq.n	8009bdc <UART_SetConfig+0x914>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d038      	beq.n	8009bd8 <UART_SetConfig+0x910>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d032      	beq.n	8009bd4 <UART_SetConfig+0x90c>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d02c      	beq.n	8009bd0 <UART_SetConfig+0x908>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	2b05      	cmp	r3, #5
 8009b7c:	d026      	beq.n	8009bcc <UART_SetConfig+0x904>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	2b06      	cmp	r3, #6
 8009b84:	d020      	beq.n	8009bc8 <UART_SetConfig+0x900>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	2b07      	cmp	r3, #7
 8009b8c:	d01a      	beq.n	8009bc4 <UART_SetConfig+0x8fc>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d014      	beq.n	8009bc0 <UART_SetConfig+0x8f8>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2b09      	cmp	r3, #9
 8009b9c:	d00e      	beq.n	8009bbc <UART_SetConfig+0x8f4>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	2b0a      	cmp	r3, #10
 8009ba4:	d008      	beq.n	8009bb8 <UART_SetConfig+0x8f0>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	2b0b      	cmp	r3, #11
 8009bac:	d102      	bne.n	8009bb4 <UART_SetConfig+0x8ec>
 8009bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bb2:	e016      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e014      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bb8:	2380      	movs	r3, #128	; 0x80
 8009bba:	e012      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bbc:	2340      	movs	r3, #64	; 0x40
 8009bbe:	e010      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bc0:	2320      	movs	r3, #32
 8009bc2:	e00e      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bc4:	2310      	movs	r3, #16
 8009bc6:	e00c      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bc8:	230c      	movs	r3, #12
 8009bca:	e00a      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bcc:	230a      	movs	r3, #10
 8009bce:	e008      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bd0:	2308      	movs	r3, #8
 8009bd2:	e006      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bd4:	2306      	movs	r3, #6
 8009bd6:	e004      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	e002      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e000      	b.n	8009be2 <UART_SetConfig+0x91a>
 8009be0:	2301      	movs	r3, #1
 8009be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009be8:	e1cb      	b.n	8009f82 <UART_SetConfig+0xcba>
 8009bea:	bf00      	nop
 8009bec:	40007c00 	.word	0x40007c00
 8009bf0:	58024400 	.word	0x58024400
 8009bf4:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bf8:	f107 030c 	add.w	r3, r7, #12
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe f863 	bl	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d044      	beq.n	8009c96 <UART_SetConfig+0x9ce>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d03e      	beq.n	8009c92 <UART_SetConfig+0x9ca>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d038      	beq.n	8009c8e <UART_SetConfig+0x9c6>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d032      	beq.n	8009c8a <UART_SetConfig+0x9c2>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	2b04      	cmp	r3, #4
 8009c2a:	d02c      	beq.n	8009c86 <UART_SetConfig+0x9be>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	2b05      	cmp	r3, #5
 8009c32:	d026      	beq.n	8009c82 <UART_SetConfig+0x9ba>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b06      	cmp	r3, #6
 8009c3a:	d020      	beq.n	8009c7e <UART_SetConfig+0x9b6>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	2b07      	cmp	r3, #7
 8009c42:	d01a      	beq.n	8009c7a <UART_SetConfig+0x9b2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d014      	beq.n	8009c76 <UART_SetConfig+0x9ae>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	2b09      	cmp	r3, #9
 8009c52:	d00e      	beq.n	8009c72 <UART_SetConfig+0x9aa>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	2b0a      	cmp	r3, #10
 8009c5a:	d008      	beq.n	8009c6e <UART_SetConfig+0x9a6>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	2b0b      	cmp	r3, #11
 8009c62:	d102      	bne.n	8009c6a <UART_SetConfig+0x9a2>
 8009c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c68:	e016      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e014      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c6e:	2380      	movs	r3, #128	; 0x80
 8009c70:	e012      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	e010      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c76:	2320      	movs	r3, #32
 8009c78:	e00e      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c7a:	2310      	movs	r3, #16
 8009c7c:	e00c      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c7e:	230c      	movs	r3, #12
 8009c80:	e00a      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c82:	230a      	movs	r3, #10
 8009c84:	e008      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c86:	2308      	movs	r3, #8
 8009c88:	e006      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c8a:	2306      	movs	r3, #6
 8009c8c:	e004      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c8e:	2304      	movs	r3, #4
 8009c90:	e002      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c92:	2302      	movs	r3, #2
 8009c94:	e000      	b.n	8009c98 <UART_SetConfig+0x9d0>
 8009c96:	2301      	movs	r3, #1
 8009c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c9e:	e170      	b.n	8009f82 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ca0:	4b79      	ldr	r3, [pc, #484]	; (8009e88 <UART_SetConfig+0xbc0>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0320 	and.w	r3, r3, #32
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d054      	beq.n	8009d56 <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009cac:	4b76      	ldr	r3, [pc, #472]	; (8009e88 <UART_SetConfig+0xbc0>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	08db      	lsrs	r3, r3, #3
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	4a75      	ldr	r2, [pc, #468]	; (8009e8c <UART_SetConfig+0xbc4>)
 8009cb8:	40da      	lsrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d044      	beq.n	8009d4c <UART_SetConfig+0xa84>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d03e      	beq.n	8009d48 <UART_SetConfig+0xa80>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d038      	beq.n	8009d44 <UART_SetConfig+0xa7c>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d032      	beq.n	8009d40 <UART_SetConfig+0xa78>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	2b04      	cmp	r3, #4
 8009ce0:	d02c      	beq.n	8009d3c <UART_SetConfig+0xa74>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce6:	2b05      	cmp	r3, #5
 8009ce8:	d026      	beq.n	8009d38 <UART_SetConfig+0xa70>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cee:	2b06      	cmp	r3, #6
 8009cf0:	d020      	beq.n	8009d34 <UART_SetConfig+0xa6c>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	2b07      	cmp	r3, #7
 8009cf8:	d01a      	beq.n	8009d30 <UART_SetConfig+0xa68>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	2b08      	cmp	r3, #8
 8009d00:	d014      	beq.n	8009d2c <UART_SetConfig+0xa64>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	2b09      	cmp	r3, #9
 8009d08:	d00e      	beq.n	8009d28 <UART_SetConfig+0xa60>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	2b0a      	cmp	r3, #10
 8009d10:	d008      	beq.n	8009d24 <UART_SetConfig+0xa5c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	2b0b      	cmp	r3, #11
 8009d18:	d102      	bne.n	8009d20 <UART_SetConfig+0xa58>
 8009d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d1e:	e016      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e014      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d24:	2380      	movs	r3, #128	; 0x80
 8009d26:	e012      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d28:	2340      	movs	r3, #64	; 0x40
 8009d2a:	e010      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d2c:	2320      	movs	r3, #32
 8009d2e:	e00e      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d30:	2310      	movs	r3, #16
 8009d32:	e00c      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d34:	230c      	movs	r3, #12
 8009d36:	e00a      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d38:	230a      	movs	r3, #10
 8009d3a:	e008      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d3c:	2308      	movs	r3, #8
 8009d3e:	e006      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d40:	2306      	movs	r3, #6
 8009d42:	e004      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d44:	2304      	movs	r3, #4
 8009d46:	e002      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e000      	b.n	8009d4e <UART_SetConfig+0xa86>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009d54:	e115      	b.n	8009f82 <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d043      	beq.n	8009de6 <UART_SetConfig+0xb1e>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d03d      	beq.n	8009de2 <UART_SetConfig+0xb1a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d037      	beq.n	8009dde <UART_SetConfig+0xb16>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d031      	beq.n	8009dda <UART_SetConfig+0xb12>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	d02b      	beq.n	8009dd6 <UART_SetConfig+0xb0e>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d025      	beq.n	8009dd2 <UART_SetConfig+0xb0a>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8a:	2b06      	cmp	r3, #6
 8009d8c:	d01f      	beq.n	8009dce <UART_SetConfig+0xb06>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	2b07      	cmp	r3, #7
 8009d94:	d019      	beq.n	8009dca <UART_SetConfig+0xb02>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	2b08      	cmp	r3, #8
 8009d9c:	d013      	beq.n	8009dc6 <UART_SetConfig+0xafe>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	2b09      	cmp	r3, #9
 8009da4:	d00d      	beq.n	8009dc2 <UART_SetConfig+0xafa>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009daa:	2b0a      	cmp	r3, #10
 8009dac:	d007      	beq.n	8009dbe <UART_SetConfig+0xaf6>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	2b0b      	cmp	r3, #11
 8009db4:	d101      	bne.n	8009dba <UART_SetConfig+0xaf2>
 8009db6:	4b36      	ldr	r3, [pc, #216]	; (8009e90 <UART_SetConfig+0xbc8>)
 8009db8:	e016      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dba:	4b34      	ldr	r3, [pc, #208]	; (8009e8c <UART_SetConfig+0xbc4>)
 8009dbc:	e014      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dbe:	4b35      	ldr	r3, [pc, #212]	; (8009e94 <UART_SetConfig+0xbcc>)
 8009dc0:	e012      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dc2:	4b35      	ldr	r3, [pc, #212]	; (8009e98 <UART_SetConfig+0xbd0>)
 8009dc4:	e010      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dc6:	4b35      	ldr	r3, [pc, #212]	; (8009e9c <UART_SetConfig+0xbd4>)
 8009dc8:	e00e      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dca:	4b35      	ldr	r3, [pc, #212]	; (8009ea0 <UART_SetConfig+0xbd8>)
 8009dcc:	e00c      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dce:	4b35      	ldr	r3, [pc, #212]	; (8009ea4 <UART_SetConfig+0xbdc>)
 8009dd0:	e00a      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dd2:	4b35      	ldr	r3, [pc, #212]	; (8009ea8 <UART_SetConfig+0xbe0>)
 8009dd4:	e008      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dd6:	4b35      	ldr	r3, [pc, #212]	; (8009eac <UART_SetConfig+0xbe4>)
 8009dd8:	e006      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dda:	4b35      	ldr	r3, [pc, #212]	; (8009eb0 <UART_SetConfig+0xbe8>)
 8009ddc:	e004      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009dde:	4b35      	ldr	r3, [pc, #212]	; (8009eb4 <UART_SetConfig+0xbec>)
 8009de0:	e002      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009de2:	4b35      	ldr	r3, [pc, #212]	; (8009eb8 <UART_SetConfig+0xbf0>)
 8009de4:	e000      	b.n	8009de8 <UART_SetConfig+0xb20>
 8009de6:	4b29      	ldr	r3, [pc, #164]	; (8009e8c <UART_SetConfig+0xbc4>)
 8009de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dea:	e0ca      	b.n	8009f82 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d046      	beq.n	8009e82 <UART_SetConfig+0xbba>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d040      	beq.n	8009e7e <UART_SetConfig+0xbb6>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d03a      	beq.n	8009e7a <UART_SetConfig+0xbb2>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d034      	beq.n	8009e76 <UART_SetConfig+0xbae>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	d02e      	beq.n	8009e72 <UART_SetConfig+0xbaa>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	2b05      	cmp	r3, #5
 8009e1a:	d028      	beq.n	8009e6e <UART_SetConfig+0xba6>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	2b06      	cmp	r3, #6
 8009e22:	d022      	beq.n	8009e6a <UART_SetConfig+0xba2>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	2b07      	cmp	r3, #7
 8009e2a:	d01c      	beq.n	8009e66 <UART_SetConfig+0xb9e>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d016      	beq.n	8009e62 <UART_SetConfig+0xb9a>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e38:	2b09      	cmp	r3, #9
 8009e3a:	d00f      	beq.n	8009e5c <UART_SetConfig+0xb94>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	2b0a      	cmp	r3, #10
 8009e42:	d008      	beq.n	8009e56 <UART_SetConfig+0xb8e>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	2b0b      	cmp	r3, #11
 8009e4a:	d102      	bne.n	8009e52 <UART_SetConfig+0xb8a>
 8009e4c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009e50:	e018      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e52:	4b13      	ldr	r3, [pc, #76]	; (8009ea0 <UART_SetConfig+0xbd8>)
 8009e54:	e016      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e56:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009e5a:	e013      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e5c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009e60:	e010      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e62:	4b16      	ldr	r3, [pc, #88]	; (8009ebc <UART_SetConfig+0xbf4>)
 8009e64:	e00e      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e66:	4b0a      	ldr	r3, [pc, #40]	; (8009e90 <UART_SetConfig+0xbc8>)
 8009e68:	e00c      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e6a:	4b15      	ldr	r3, [pc, #84]	; (8009ec0 <UART_SetConfig+0xbf8>)
 8009e6c:	e00a      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e6e:	4b15      	ldr	r3, [pc, #84]	; (8009ec4 <UART_SetConfig+0xbfc>)
 8009e70:	e008      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e72:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <UART_SetConfig+0xbcc>)
 8009e74:	e006      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e76:	4b14      	ldr	r3, [pc, #80]	; (8009ec8 <UART_SetConfig+0xc00>)
 8009e78:	e004      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e7a:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <UART_SetConfig+0xbd0>)
 8009e7c:	e002      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e7e:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <UART_SetConfig+0xbd4>)
 8009e80:	e000      	b.n	8009e84 <UART_SetConfig+0xbbc>
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <UART_SetConfig+0xbd8>)
 8009e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e86:	e07c      	b.n	8009f82 <UART_SetConfig+0xcba>
 8009e88:	58024400 	.word	0x58024400
 8009e8c:	03d09000 	.word	0x03d09000
 8009e90:	0003d090 	.word	0x0003d090
 8009e94:	0007a120 	.word	0x0007a120
 8009e98:	000f4240 	.word	0x000f4240
 8009e9c:	001e8480 	.word	0x001e8480
 8009ea0:	003d0900 	.word	0x003d0900
 8009ea4:	00516155 	.word	0x00516155
 8009ea8:	0061a800 	.word	0x0061a800
 8009eac:	007a1200 	.word	0x007a1200
 8009eb0:	00a2c2aa 	.word	0x00a2c2aa
 8009eb4:	00f42400 	.word	0x00f42400
 8009eb8:	01e84800 	.word	0x01e84800
 8009ebc:	0001e848 	.word	0x0001e848
 8009ec0:	00051615 	.word	0x00051615
 8009ec4:	00061a80 	.word	0x00061a80
 8009ec8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d04e      	beq.n	8009f72 <UART_SetConfig+0xcaa>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d047      	beq.n	8009f6c <UART_SetConfig+0xca4>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d040      	beq.n	8009f66 <UART_SetConfig+0xc9e>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d039      	beq.n	8009f60 <UART_SetConfig+0xc98>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d032      	beq.n	8009f5a <UART_SetConfig+0xc92>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	2b05      	cmp	r3, #5
 8009efa:	d02b      	beq.n	8009f54 <UART_SetConfig+0xc8c>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b06      	cmp	r3, #6
 8009f02:	d024      	beq.n	8009f4e <UART_SetConfig+0xc86>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	2b07      	cmp	r3, #7
 8009f0a:	d01d      	beq.n	8009f48 <UART_SetConfig+0xc80>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	2b08      	cmp	r3, #8
 8009f12:	d016      	beq.n	8009f42 <UART_SetConfig+0xc7a>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	2b09      	cmp	r3, #9
 8009f1a:	d00f      	beq.n	8009f3c <UART_SetConfig+0xc74>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	2b0a      	cmp	r3, #10
 8009f22:	d008      	beq.n	8009f36 <UART_SetConfig+0xc6e>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2b0b      	cmp	r3, #11
 8009f2a:	d101      	bne.n	8009f30 <UART_SetConfig+0xc68>
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	e022      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f34:	e01f      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f3a:	e01c      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f40:	e019      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f46:	e016      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f4c:	e013      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009f52:	e010      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f54:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009f58:	e00d      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f5e:	e00a      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f60:	f241 5355 	movw	r3, #5461	; 0x1555
 8009f64:	e007      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f6a:	e004      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f70:	e001      	b.n	8009f76 <UART_SetConfig+0xcae>
 8009f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f78:	e003      	b.n	8009f82 <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009f80:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f001 83e8 	beq.w	800b75a <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	4413      	add	r3, r2
 8009f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d305      	bcc.n	8009fa6 <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d904      	bls.n	8009fb0 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fac:	f001 bbd5 	b.w	800b75a <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8009fb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	f000 8154 	beq.w	800a262 <UART_SetConfig+0xf9a>
 8009fba:	2b08      	cmp	r3, #8
 8009fbc:	dc06      	bgt.n	8009fcc <UART_SetConfig+0xd04>
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d00f      	beq.n	8009fe2 <UART_SetConfig+0xd1a>
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	f000 80ac 	beq.w	800a120 <UART_SetConfig+0xe58>
 8009fc8:	f000 bc30 	b.w	800a82c <UART_SetConfig+0x1564>
 8009fcc:	2b20      	cmp	r3, #32
 8009fce:	f000 832d 	beq.w	800a62c <UART_SetConfig+0x1364>
 8009fd2:	2b40      	cmp	r3, #64	; 0x40
 8009fd4:	f000 83a5 	beq.w	800a722 <UART_SetConfig+0x145a>
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	f000 81e3 	beq.w	800a3a4 <UART_SetConfig+0x10dc>
 8009fde:	f000 bc25 	b.w	800a82c <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fe2:	f7fd fd0f 	bl	8007a04 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fe6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	4618      	mov	r0, r3
 8009fec:	f04f 0100 	mov.w	r1, #0
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d067      	beq.n	800a0c8 <UART_SetConfig+0xe00>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d05e      	beq.n	800a0be <UART_SetConfig+0xdf6>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	2b02      	cmp	r3, #2
 800a006:	d055      	beq.n	800a0b4 <UART_SetConfig+0xdec>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d04c      	beq.n	800a0aa <UART_SetConfig+0xde2>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	2b04      	cmp	r3, #4
 800a016:	d043      	beq.n	800a0a0 <UART_SetConfig+0xdd8>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	2b05      	cmp	r3, #5
 800a01e:	d03a      	beq.n	800a096 <UART_SetConfig+0xdce>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b06      	cmp	r3, #6
 800a026:	d031      	beq.n	800a08c <UART_SetConfig+0xdc4>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	2b07      	cmp	r3, #7
 800a02e:	d028      	beq.n	800a082 <UART_SetConfig+0xdba>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	2b08      	cmp	r3, #8
 800a036:	d01f      	beq.n	800a078 <UART_SetConfig+0xdb0>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	2b09      	cmp	r3, #9
 800a03e:	d016      	beq.n	800a06e <UART_SetConfig+0xda6>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	2b0a      	cmp	r3, #10
 800a046:	d00d      	beq.n	800a064 <UART_SetConfig+0xd9c>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	2b0b      	cmp	r3, #11
 800a04e:	d104      	bne.n	800a05a <UART_SetConfig+0xd92>
 800a050:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a054:	f04f 0400 	mov.w	r4, #0
 800a058:	e03a      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a05a:	f04f 0301 	mov.w	r3, #1
 800a05e:	f04f 0400 	mov.w	r4, #0
 800a062:	e035      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a064:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a068:	f04f 0400 	mov.w	r4, #0
 800a06c:	e030      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a06e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a072:	f04f 0400 	mov.w	r4, #0
 800a076:	e02b      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a078:	f04f 0320 	mov.w	r3, #32
 800a07c:	f04f 0400 	mov.w	r4, #0
 800a080:	e026      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a082:	f04f 0310 	mov.w	r3, #16
 800a086:	f04f 0400 	mov.w	r4, #0
 800a08a:	e021      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a08c:	f04f 030c 	mov.w	r3, #12
 800a090:	f04f 0400 	mov.w	r4, #0
 800a094:	e01c      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a096:	f04f 030a 	mov.w	r3, #10
 800a09a:	f04f 0400 	mov.w	r4, #0
 800a09e:	e017      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a0a0:	f04f 0308 	mov.w	r3, #8
 800a0a4:	f04f 0400 	mov.w	r4, #0
 800a0a8:	e012      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a0aa:	f04f 0306 	mov.w	r3, #6
 800a0ae:	f04f 0400 	mov.w	r4, #0
 800a0b2:	e00d      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a0b4:	f04f 0304 	mov.w	r3, #4
 800a0b8:	f04f 0400 	mov.w	r4, #0
 800a0bc:	e008      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a0be:	f04f 0302 	mov.w	r3, #2
 800a0c2:	f04f 0400 	mov.w	r4, #0
 800a0c6:	e003      	b.n	800a0d0 <UART_SetConfig+0xe08>
 800a0c8:	f04f 0301 	mov.w	r3, #1
 800a0cc:	f04f 0400 	mov.w	r4, #0
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	f7f6 f954 	bl	8000380 <__aeabi_uldivmod>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4622      	mov	r2, r4
 800a0e0:	f04f 0300 	mov.w	r3, #0
 800a0e4:	f04f 0400 	mov.w	r4, #0
 800a0e8:	0214      	lsls	r4, r2, #8
 800a0ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a0ee:	020b      	lsls	r3, r1, #8
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6852      	ldr	r2, [r2, #4]
 800a0f4:	0852      	lsrs	r2, r2, #1
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	f04f 0200 	mov.w	r2, #0
 800a0fc:	eb13 0b01 	adds.w	fp, r3, r1
 800a100:	eb44 0c02 	adc.w	ip, r4, r2
 800a104:	4658      	mov	r0, fp
 800a106:	4661      	mov	r1, ip
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f04f 0400 	mov.w	r4, #0
 800a110:	461a      	mov	r2, r3
 800a112:	4623      	mov	r3, r4
 800a114:	f7f6 f934 	bl	8000380 <__aeabi_uldivmod>
 800a118:	4603      	mov	r3, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a11e:	e389      	b.n	800a834 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a120:	f107 0318 	add.w	r3, r7, #24
 800a124:	4618      	mov	r0, r3
 800a126:	f7fd fc83 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f04f 0100 	mov.w	r1, #0
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a136:	2b00      	cmp	r3, #0
 800a138:	d067      	beq.n	800a20a <UART_SetConfig+0xf42>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d05e      	beq.n	800a200 <UART_SetConfig+0xf38>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	2b02      	cmp	r3, #2
 800a148:	d055      	beq.n	800a1f6 <UART_SetConfig+0xf2e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d04c      	beq.n	800a1ec <UART_SetConfig+0xf24>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	2b04      	cmp	r3, #4
 800a158:	d043      	beq.n	800a1e2 <UART_SetConfig+0xf1a>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	2b05      	cmp	r3, #5
 800a160:	d03a      	beq.n	800a1d8 <UART_SetConfig+0xf10>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	2b06      	cmp	r3, #6
 800a168:	d031      	beq.n	800a1ce <UART_SetConfig+0xf06>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	2b07      	cmp	r3, #7
 800a170:	d028      	beq.n	800a1c4 <UART_SetConfig+0xefc>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b08      	cmp	r3, #8
 800a178:	d01f      	beq.n	800a1ba <UART_SetConfig+0xef2>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b09      	cmp	r3, #9
 800a180:	d016      	beq.n	800a1b0 <UART_SetConfig+0xee8>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b0a      	cmp	r3, #10
 800a188:	d00d      	beq.n	800a1a6 <UART_SetConfig+0xede>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b0b      	cmp	r3, #11
 800a190:	d104      	bne.n	800a19c <UART_SetConfig+0xed4>
 800a192:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a196:	f04f 0400 	mov.w	r4, #0
 800a19a:	e03a      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a19c:	f04f 0301 	mov.w	r3, #1
 800a1a0:	f04f 0400 	mov.w	r4, #0
 800a1a4:	e035      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1a6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a1aa:	f04f 0400 	mov.w	r4, #0
 800a1ae:	e030      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a1b4:	f04f 0400 	mov.w	r4, #0
 800a1b8:	e02b      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1ba:	f04f 0320 	mov.w	r3, #32
 800a1be:	f04f 0400 	mov.w	r4, #0
 800a1c2:	e026      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1c4:	f04f 0310 	mov.w	r3, #16
 800a1c8:	f04f 0400 	mov.w	r4, #0
 800a1cc:	e021      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1ce:	f04f 030c 	mov.w	r3, #12
 800a1d2:	f04f 0400 	mov.w	r4, #0
 800a1d6:	e01c      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1d8:	f04f 030a 	mov.w	r3, #10
 800a1dc:	f04f 0400 	mov.w	r4, #0
 800a1e0:	e017      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1e2:	f04f 0308 	mov.w	r3, #8
 800a1e6:	f04f 0400 	mov.w	r4, #0
 800a1ea:	e012      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1ec:	f04f 0306 	mov.w	r3, #6
 800a1f0:	f04f 0400 	mov.w	r4, #0
 800a1f4:	e00d      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a1f6:	f04f 0304 	mov.w	r3, #4
 800a1fa:	f04f 0400 	mov.w	r4, #0
 800a1fe:	e008      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a200:	f04f 0302 	mov.w	r3, #2
 800a204:	f04f 0400 	mov.w	r4, #0
 800a208:	e003      	b.n	800a212 <UART_SetConfig+0xf4a>
 800a20a:	f04f 0301 	mov.w	r3, #1
 800a20e:	f04f 0400 	mov.w	r4, #0
 800a212:	461a      	mov	r2, r3
 800a214:	4623      	mov	r3, r4
 800a216:	f7f6 f8b3 	bl	8000380 <__aeabi_uldivmod>
 800a21a:	4603      	mov	r3, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	4619      	mov	r1, r3
 800a220:	4622      	mov	r2, r4
 800a222:	f04f 0300 	mov.w	r3, #0
 800a226:	f04f 0400 	mov.w	r4, #0
 800a22a:	0214      	lsls	r4, r2, #8
 800a22c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a230:	020b      	lsls	r3, r1, #8
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	6852      	ldr	r2, [r2, #4]
 800a236:	0852      	lsrs	r2, r2, #1
 800a238:	4611      	mov	r1, r2
 800a23a:	f04f 0200 	mov.w	r2, #0
 800a23e:	eb13 0b01 	adds.w	fp, r3, r1
 800a242:	eb44 0c02 	adc.w	ip, r4, r2
 800a246:	4658      	mov	r0, fp
 800a248:	4661      	mov	r1, ip
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f04f 0400 	mov.w	r4, #0
 800a252:	461a      	mov	r2, r3
 800a254:	4623      	mov	r3, r4
 800a256:	f7f6 f893 	bl	8000380 <__aeabi_uldivmod>
 800a25a:	4603      	mov	r3, r0
 800a25c:	460c      	mov	r4, r1
 800a25e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a260:	e2e8      	b.n	800a834 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a262:	f107 030c 	add.w	r3, r7, #12
 800a266:	4618      	mov	r0, r3
 800a268:	f7fd fd2e 	bl	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	4618      	mov	r0, r3
 800a270:	f04f 0100 	mov.w	r1, #0
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d067      	beq.n	800a34c <UART_SetConfig+0x1084>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	2b01      	cmp	r3, #1
 800a282:	d05e      	beq.n	800a342 <UART_SetConfig+0x107a>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d055      	beq.n	800a338 <UART_SetConfig+0x1070>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	2b03      	cmp	r3, #3
 800a292:	d04c      	beq.n	800a32e <UART_SetConfig+0x1066>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d043      	beq.n	800a324 <UART_SetConfig+0x105c>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b05      	cmp	r3, #5
 800a2a2:	d03a      	beq.n	800a31a <UART_SetConfig+0x1052>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b06      	cmp	r3, #6
 800a2aa:	d031      	beq.n	800a310 <UART_SetConfig+0x1048>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2b07      	cmp	r3, #7
 800a2b2:	d028      	beq.n	800a306 <UART_SetConfig+0x103e>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d01f      	beq.n	800a2fc <UART_SetConfig+0x1034>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	2b09      	cmp	r3, #9
 800a2c2:	d016      	beq.n	800a2f2 <UART_SetConfig+0x102a>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	2b0a      	cmp	r3, #10
 800a2ca:	d00d      	beq.n	800a2e8 <UART_SetConfig+0x1020>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b0b      	cmp	r3, #11
 800a2d2:	d104      	bne.n	800a2de <UART_SetConfig+0x1016>
 800a2d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2d8:	f04f 0400 	mov.w	r4, #0
 800a2dc:	e03a      	b.n	800a354 <UART_SetConfig+0x108c>
 800a2de:	f04f 0301 	mov.w	r3, #1
 800a2e2:	f04f 0400 	mov.w	r4, #0
 800a2e6:	e035      	b.n	800a354 <UART_SetConfig+0x108c>
 800a2e8:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a2ec:	f04f 0400 	mov.w	r4, #0
 800a2f0:	e030      	b.n	800a354 <UART_SetConfig+0x108c>
 800a2f2:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a2f6:	f04f 0400 	mov.w	r4, #0
 800a2fa:	e02b      	b.n	800a354 <UART_SetConfig+0x108c>
 800a2fc:	f04f 0320 	mov.w	r3, #32
 800a300:	f04f 0400 	mov.w	r4, #0
 800a304:	e026      	b.n	800a354 <UART_SetConfig+0x108c>
 800a306:	f04f 0310 	mov.w	r3, #16
 800a30a:	f04f 0400 	mov.w	r4, #0
 800a30e:	e021      	b.n	800a354 <UART_SetConfig+0x108c>
 800a310:	f04f 030c 	mov.w	r3, #12
 800a314:	f04f 0400 	mov.w	r4, #0
 800a318:	e01c      	b.n	800a354 <UART_SetConfig+0x108c>
 800a31a:	f04f 030a 	mov.w	r3, #10
 800a31e:	f04f 0400 	mov.w	r4, #0
 800a322:	e017      	b.n	800a354 <UART_SetConfig+0x108c>
 800a324:	f04f 0308 	mov.w	r3, #8
 800a328:	f04f 0400 	mov.w	r4, #0
 800a32c:	e012      	b.n	800a354 <UART_SetConfig+0x108c>
 800a32e:	f04f 0306 	mov.w	r3, #6
 800a332:	f04f 0400 	mov.w	r4, #0
 800a336:	e00d      	b.n	800a354 <UART_SetConfig+0x108c>
 800a338:	f04f 0304 	mov.w	r3, #4
 800a33c:	f04f 0400 	mov.w	r4, #0
 800a340:	e008      	b.n	800a354 <UART_SetConfig+0x108c>
 800a342:	f04f 0302 	mov.w	r3, #2
 800a346:	f04f 0400 	mov.w	r4, #0
 800a34a:	e003      	b.n	800a354 <UART_SetConfig+0x108c>
 800a34c:	f04f 0301 	mov.w	r3, #1
 800a350:	f04f 0400 	mov.w	r4, #0
 800a354:	461a      	mov	r2, r3
 800a356:	4623      	mov	r3, r4
 800a358:	f7f6 f812 	bl	8000380 <__aeabi_uldivmod>
 800a35c:	4603      	mov	r3, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4619      	mov	r1, r3
 800a362:	4622      	mov	r2, r4
 800a364:	f04f 0300 	mov.w	r3, #0
 800a368:	f04f 0400 	mov.w	r4, #0
 800a36c:	0214      	lsls	r4, r2, #8
 800a36e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a372:	020b      	lsls	r3, r1, #8
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6852      	ldr	r2, [r2, #4]
 800a378:	0852      	lsrs	r2, r2, #1
 800a37a:	4611      	mov	r1, r2
 800a37c:	f04f 0200 	mov.w	r2, #0
 800a380:	eb13 0b01 	adds.w	fp, r3, r1
 800a384:	eb44 0c02 	adc.w	ip, r4, r2
 800a388:	4658      	mov	r0, fp
 800a38a:	4661      	mov	r1, ip
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	f04f 0400 	mov.w	r4, #0
 800a394:	461a      	mov	r2, r3
 800a396:	4623      	mov	r3, r4
 800a398:	f7f5 fff2 	bl	8000380 <__aeabi_uldivmod>
 800a39c:	4603      	mov	r3, r0
 800a39e:	460c      	mov	r4, r1
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a3a2:	e247      	b.n	800a834 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3a4:	4b96      	ldr	r3, [pc, #600]	; (800a600 <UART_SetConfig+0x1338>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0320 	and.w	r3, r3, #32
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 80a3 	beq.w	800a4f8 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3b2:	4b93      	ldr	r3, [pc, #588]	; (800a600 <UART_SetConfig+0x1338>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	08db      	lsrs	r3, r3, #3
 800a3b8:	f003 0303 	and.w	r3, r3, #3
 800a3bc:	4a91      	ldr	r2, [pc, #580]	; (800a604 <UART_SetConfig+0x133c>)
 800a3be:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f04f 0100 	mov.w	r1, #0
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d067      	beq.n	800a4a0 <UART_SetConfig+0x11d8>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d05e      	beq.n	800a496 <UART_SetConfig+0x11ce>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d055      	beq.n	800a48c <UART_SetConfig+0x11c4>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d04c      	beq.n	800a482 <UART_SetConfig+0x11ba>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	d043      	beq.n	800a478 <UART_SetConfig+0x11b0>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b05      	cmp	r3, #5
 800a3f6:	d03a      	beq.n	800a46e <UART_SetConfig+0x11a6>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b06      	cmp	r3, #6
 800a3fe:	d031      	beq.n	800a464 <UART_SetConfig+0x119c>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b07      	cmp	r3, #7
 800a406:	d028      	beq.n	800a45a <UART_SetConfig+0x1192>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	d01f      	beq.n	800a450 <UART_SetConfig+0x1188>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	2b09      	cmp	r3, #9
 800a416:	d016      	beq.n	800a446 <UART_SetConfig+0x117e>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	2b0a      	cmp	r3, #10
 800a41e:	d00d      	beq.n	800a43c <UART_SetConfig+0x1174>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	2b0b      	cmp	r3, #11
 800a426:	d104      	bne.n	800a432 <UART_SetConfig+0x116a>
 800a428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a42c:	f04f 0400 	mov.w	r4, #0
 800a430:	e03a      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a432:	f04f 0301 	mov.w	r3, #1
 800a436:	f04f 0400 	mov.w	r4, #0
 800a43a:	e035      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a43c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a440:	f04f 0400 	mov.w	r4, #0
 800a444:	e030      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a446:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a44a:	f04f 0400 	mov.w	r4, #0
 800a44e:	e02b      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a450:	f04f 0320 	mov.w	r3, #32
 800a454:	f04f 0400 	mov.w	r4, #0
 800a458:	e026      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a45a:	f04f 0310 	mov.w	r3, #16
 800a45e:	f04f 0400 	mov.w	r4, #0
 800a462:	e021      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a464:	f04f 030c 	mov.w	r3, #12
 800a468:	f04f 0400 	mov.w	r4, #0
 800a46c:	e01c      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a46e:	f04f 030a 	mov.w	r3, #10
 800a472:	f04f 0400 	mov.w	r4, #0
 800a476:	e017      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a478:	f04f 0308 	mov.w	r3, #8
 800a47c:	f04f 0400 	mov.w	r4, #0
 800a480:	e012      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a482:	f04f 0306 	mov.w	r3, #6
 800a486:	f04f 0400 	mov.w	r4, #0
 800a48a:	e00d      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a48c:	f04f 0304 	mov.w	r3, #4
 800a490:	f04f 0400 	mov.w	r4, #0
 800a494:	e008      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a496:	f04f 0302 	mov.w	r3, #2
 800a49a:	f04f 0400 	mov.w	r4, #0
 800a49e:	e003      	b.n	800a4a8 <UART_SetConfig+0x11e0>
 800a4a0:	f04f 0301 	mov.w	r3, #1
 800a4a4:	f04f 0400 	mov.w	r4, #0
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4623      	mov	r3, r4
 800a4ac:	f7f5 ff68 	bl	8000380 <__aeabi_uldivmod>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	f04f 0400 	mov.w	r4, #0
 800a4c0:	0214      	lsls	r4, r2, #8
 800a4c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a4c6:	020b      	lsls	r3, r1, #8
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6852      	ldr	r2, [r2, #4]
 800a4cc:	0852      	lsrs	r2, r2, #1
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	f04f 0200 	mov.w	r2, #0
 800a4d4:	eb13 0b01 	adds.w	fp, r3, r1
 800a4d8:	eb44 0c02 	adc.w	ip, r4, r2
 800a4dc:	4658      	mov	r0, fp
 800a4de:	4661      	mov	r1, ip
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f04f 0400 	mov.w	r4, #0
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4623      	mov	r3, r4
 800a4ec:	f7f5 ff48 	bl	8000380 <__aeabi_uldivmod>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a4f6:	e19d      	b.n	800a834 <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d05b      	beq.n	800a5b8 <UART_SetConfig+0x12f0>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	2b01      	cmp	r3, #1
 800a506:	d053      	beq.n	800a5b0 <UART_SetConfig+0x12e8>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d04b      	beq.n	800a5a8 <UART_SetConfig+0x12e0>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b03      	cmp	r3, #3
 800a516:	d043      	beq.n	800a5a0 <UART_SetConfig+0x12d8>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	d03b      	beq.n	800a598 <UART_SetConfig+0x12d0>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b05      	cmp	r3, #5
 800a526:	d033      	beq.n	800a590 <UART_SetConfig+0x12c8>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b06      	cmp	r3, #6
 800a52e:	d02b      	beq.n	800a588 <UART_SetConfig+0x12c0>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	2b07      	cmp	r3, #7
 800a536:	d023      	beq.n	800a580 <UART_SetConfig+0x12b8>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b08      	cmp	r3, #8
 800a53e:	d01b      	beq.n	800a578 <UART_SetConfig+0x12b0>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	2b09      	cmp	r3, #9
 800a546:	d013      	beq.n	800a570 <UART_SetConfig+0x12a8>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b0a      	cmp	r3, #10
 800a54e:	d00b      	beq.n	800a568 <UART_SetConfig+0x12a0>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b0b      	cmp	r3, #11
 800a556:	d103      	bne.n	800a560 <UART_SetConfig+0x1298>
 800a558:	4b2a      	ldr	r3, [pc, #168]	; (800a604 <UART_SetConfig+0x133c>)
 800a55a:	f04f 0400 	mov.w	r4, #0
 800a55e:	e02e      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a560:	4b29      	ldr	r3, [pc, #164]	; (800a608 <UART_SetConfig+0x1340>)
 800a562:	f04f 0403 	mov.w	r4, #3
 800a566:	e02a      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a568:	4b28      	ldr	r3, [pc, #160]	; (800a60c <UART_SetConfig+0x1344>)
 800a56a:	f04f 0400 	mov.w	r4, #0
 800a56e:	e026      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a570:	4b27      	ldr	r3, [pc, #156]	; (800a610 <UART_SetConfig+0x1348>)
 800a572:	f04f 0400 	mov.w	r4, #0
 800a576:	e022      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a578:	4b26      	ldr	r3, [pc, #152]	; (800a614 <UART_SetConfig+0x134c>)
 800a57a:	f04f 0400 	mov.w	r4, #0
 800a57e:	e01e      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a580:	4b25      	ldr	r3, [pc, #148]	; (800a618 <UART_SetConfig+0x1350>)
 800a582:	f04f 0400 	mov.w	r4, #0
 800a586:	e01a      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a588:	a419      	add	r4, pc, #100	; (adr r4, 800a5f0 <UART_SetConfig+0x1328>)
 800a58a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a58e:	e016      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a590:	4b22      	ldr	r3, [pc, #136]	; (800a61c <UART_SetConfig+0x1354>)
 800a592:	f04f 0400 	mov.w	r4, #0
 800a596:	e012      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a598:	4b21      	ldr	r3, [pc, #132]	; (800a620 <UART_SetConfig+0x1358>)
 800a59a:	f04f 0400 	mov.w	r4, #0
 800a59e:	e00e      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a5a0:	a415      	add	r4, pc, #84	; (adr r4, 800a5f8 <UART_SetConfig+0x1330>)
 800a5a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a5a6:	e00a      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a5a8:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <UART_SetConfig+0x135c>)
 800a5aa:	f04f 0400 	mov.w	r4, #0
 800a5ae:	e006      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a5b0:	4b1d      	ldr	r3, [pc, #116]	; (800a628 <UART_SetConfig+0x1360>)
 800a5b2:	f04f 0401 	mov.w	r4, #1
 800a5b6:	e002      	b.n	800a5be <UART_SetConfig+0x12f6>
 800a5b8:	4b13      	ldr	r3, [pc, #76]	; (800a608 <UART_SetConfig+0x1340>)
 800a5ba:	f04f 0403 	mov.w	r4, #3
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	6852      	ldr	r2, [r2, #4]
 800a5c2:	0852      	lsrs	r2, r2, #1
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	f04f 0200 	mov.w	r2, #0
 800a5ca:	eb13 0b01 	adds.w	fp, r3, r1
 800a5ce:	eb44 0c02 	adc.w	ip, r4, r2
 800a5d2:	4658      	mov	r0, fp
 800a5d4:	4661      	mov	r1, ip
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	f04f 0400 	mov.w	r4, #0
 800a5de:	461a      	mov	r2, r3
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	f7f5 fecd 	bl	8000380 <__aeabi_uldivmod>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a5ec:	e122      	b.n	800a834 <UART_SetConfig+0x156c>
 800a5ee:	bf00      	nop
 800a5f0:	51615500 	.word	0x51615500
 800a5f4:	00000000 	.word	0x00000000
 800a5f8:	a2c2aa00 	.word	0xa2c2aa00
 800a5fc:	00000000 	.word	0x00000000
 800a600:	58024400 	.word	0x58024400
 800a604:	03d09000 	.word	0x03d09000
 800a608:	d0900000 	.word	0xd0900000
 800a60c:	07a12000 	.word	0x07a12000
 800a610:	0f424000 	.word	0x0f424000
 800a614:	1e848000 	.word	0x1e848000
 800a618:	3d090000 	.word	0x3d090000
 800a61c:	61a80000 	.word	0x61a80000
 800a620:	7a120000 	.word	0x7a120000
 800a624:	f4240000 	.word	0xf4240000
 800a628:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	d05b      	beq.n	800a6ec <UART_SetConfig+0x1424>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d053      	beq.n	800a6e4 <UART_SetConfig+0x141c>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b02      	cmp	r3, #2
 800a642:	d04b      	beq.n	800a6dc <UART_SetConfig+0x1414>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d043      	beq.n	800a6d4 <UART_SetConfig+0x140c>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b04      	cmp	r3, #4
 800a652:	d03b      	beq.n	800a6cc <UART_SetConfig+0x1404>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b05      	cmp	r3, #5
 800a65a:	d033      	beq.n	800a6c4 <UART_SetConfig+0x13fc>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b06      	cmp	r3, #6
 800a662:	d02b      	beq.n	800a6bc <UART_SetConfig+0x13f4>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b07      	cmp	r3, #7
 800a66a:	d023      	beq.n	800a6b4 <UART_SetConfig+0x13ec>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b08      	cmp	r3, #8
 800a672:	d01b      	beq.n	800a6ac <UART_SetConfig+0x13e4>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b09      	cmp	r3, #9
 800a67a:	d013      	beq.n	800a6a4 <UART_SetConfig+0x13dc>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b0a      	cmp	r3, #10
 800a682:	d00b      	beq.n	800a69c <UART_SetConfig+0x13d4>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b0b      	cmp	r3, #11
 800a68a:	d103      	bne.n	800a694 <UART_SetConfig+0x13cc>
 800a68c:	4bc0      	ldr	r3, [pc, #768]	; (800a990 <UART_SetConfig+0x16c8>)
 800a68e:	f04f 0400 	mov.w	r4, #0
 800a692:	e02e      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a694:	4bbf      	ldr	r3, [pc, #764]	; (800a994 <UART_SetConfig+0x16cc>)
 800a696:	f04f 0400 	mov.w	r4, #0
 800a69a:	e02a      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a69c:	4bbe      	ldr	r3, [pc, #760]	; (800a998 <UART_SetConfig+0x16d0>)
 800a69e:	f04f 0400 	mov.w	r4, #0
 800a6a2:	e026      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6a4:	4bbd      	ldr	r3, [pc, #756]	; (800a99c <UART_SetConfig+0x16d4>)
 800a6a6:	f04f 0400 	mov.w	r4, #0
 800a6aa:	e022      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6ac:	4bbc      	ldr	r3, [pc, #752]	; (800a9a0 <UART_SetConfig+0x16d8>)
 800a6ae:	f04f 0400 	mov.w	r4, #0
 800a6b2:	e01e      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6b4:	4bbb      	ldr	r3, [pc, #748]	; (800a9a4 <UART_SetConfig+0x16dc>)
 800a6b6:	f04f 0400 	mov.w	r4, #0
 800a6ba:	e01a      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6bc:	a4b0      	add	r4, pc, #704	; (adr r4, 800a980 <UART_SetConfig+0x16b8>)
 800a6be:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a6c2:	e016      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6c4:	4bb8      	ldr	r3, [pc, #736]	; (800a9a8 <UART_SetConfig+0x16e0>)
 800a6c6:	f04f 0400 	mov.w	r4, #0
 800a6ca:	e012      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6cc:	4bb7      	ldr	r3, [pc, #732]	; (800a9ac <UART_SetConfig+0x16e4>)
 800a6ce:	f04f 0400 	mov.w	r4, #0
 800a6d2:	e00e      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6d4:	a4ac      	add	r4, pc, #688	; (adr r4, 800a988 <UART_SetConfig+0x16c0>)
 800a6d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a6da:	e00a      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6dc:	4bb4      	ldr	r3, [pc, #720]	; (800a9b0 <UART_SetConfig+0x16e8>)
 800a6de:	f04f 0400 	mov.w	r4, #0
 800a6e2:	e006      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6e4:	4bb3      	ldr	r3, [pc, #716]	; (800a9b4 <UART_SetConfig+0x16ec>)
 800a6e6:	f04f 0400 	mov.w	r4, #0
 800a6ea:	e002      	b.n	800a6f2 <UART_SetConfig+0x142a>
 800a6ec:	4ba9      	ldr	r3, [pc, #676]	; (800a994 <UART_SetConfig+0x16cc>)
 800a6ee:	f04f 0400 	mov.w	r4, #0
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6852      	ldr	r2, [r2, #4]
 800a6f6:	0852      	lsrs	r2, r2, #1
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	f04f 0200 	mov.w	r2, #0
 800a6fe:	eb13 0b01 	adds.w	fp, r3, r1
 800a702:	eb44 0c02 	adc.w	ip, r4, r2
 800a706:	4658      	mov	r0, fp
 800a708:	4661      	mov	r1, ip
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f04f 0400 	mov.w	r4, #0
 800a712:	461a      	mov	r2, r3
 800a714:	4623      	mov	r3, r4
 800a716:	f7f5 fe33 	bl	8000380 <__aeabi_uldivmod>
 800a71a:	4603      	mov	r3, r0
 800a71c:	460c      	mov	r4, r1
 800a71e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a720:	e088      	b.n	800a834 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a726:	2b00      	cmp	r3, #0
 800a728:	d064      	beq.n	800a7f4 <UART_SetConfig+0x152c>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d05b      	beq.n	800a7ea <UART_SetConfig+0x1522>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	2b02      	cmp	r3, #2
 800a738:	d052      	beq.n	800a7e0 <UART_SetConfig+0x1518>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d04a      	beq.n	800a7d8 <UART_SetConfig+0x1510>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b04      	cmp	r3, #4
 800a748:	d041      	beq.n	800a7ce <UART_SetConfig+0x1506>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b05      	cmp	r3, #5
 800a750:	d039      	beq.n	800a7c6 <UART_SetConfig+0x14fe>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b06      	cmp	r3, #6
 800a758:	d031      	beq.n	800a7be <UART_SetConfig+0x14f6>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b07      	cmp	r3, #7
 800a760:	d028      	beq.n	800a7b4 <UART_SetConfig+0x14ec>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b08      	cmp	r3, #8
 800a768:	d01f      	beq.n	800a7aa <UART_SetConfig+0x14e2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b09      	cmp	r3, #9
 800a770:	d016      	beq.n	800a7a0 <UART_SetConfig+0x14d8>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b0a      	cmp	r3, #10
 800a778:	d00d      	beq.n	800a796 <UART_SetConfig+0x14ce>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b0b      	cmp	r3, #11
 800a780:	d104      	bne.n	800a78c <UART_SetConfig+0x14c4>
 800a782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a786:	f04f 0400 	mov.w	r4, #0
 800a78a:	e037      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a78c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a790:	f04f 0400 	mov.w	r4, #0
 800a794:	e032      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a79a:	f04f 0400 	mov.w	r4, #0
 800a79e:	e02d      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7a4:	f04f 0400 	mov.w	r4, #0
 800a7a8:	e028      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7ae:	f04f 0400 	mov.w	r4, #0
 800a7b2:	e023      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a7b8:	f04f 0400 	mov.w	r4, #0
 800a7bc:	e01e      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7be:	4b7e      	ldr	r3, [pc, #504]	; (800a9b8 <UART_SetConfig+0x16f0>)
 800a7c0:	f04f 0400 	mov.w	r4, #0
 800a7c4:	e01a      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7c6:	4b7d      	ldr	r3, [pc, #500]	; (800a9bc <UART_SetConfig+0x16f4>)
 800a7c8:	f04f 0400 	mov.w	r4, #0
 800a7cc:	e016      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a7d2:	f04f 0400 	mov.w	r4, #0
 800a7d6:	e011      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7d8:	4b79      	ldr	r3, [pc, #484]	; (800a9c0 <UART_SetConfig+0x16f8>)
 800a7da:	f04f 0400 	mov.w	r4, #0
 800a7de:	e00d      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7e4:	f04f 0400 	mov.w	r4, #0
 800a7e8:	e008      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a7ee:	f04f 0400 	mov.w	r4, #0
 800a7f2:	e003      	b.n	800a7fc <UART_SetConfig+0x1534>
 800a7f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a7f8:	f04f 0400 	mov.w	r4, #0
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	6852      	ldr	r2, [r2, #4]
 800a800:	0852      	lsrs	r2, r2, #1
 800a802:	4611      	mov	r1, r2
 800a804:	f04f 0200 	mov.w	r2, #0
 800a808:	eb13 0b01 	adds.w	fp, r3, r1
 800a80c:	eb44 0c02 	adc.w	ip, r4, r2
 800a810:	4658      	mov	r0, fp
 800a812:	4661      	mov	r1, ip
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f04f 0400 	mov.w	r4, #0
 800a81c:	461a      	mov	r2, r3
 800a81e:	4623      	mov	r3, r4
 800a820:	f7f5 fdae 	bl	8000380 <__aeabi_uldivmod>
 800a824:	4603      	mov	r3, r0
 800a826:	460c      	mov	r4, r1
 800a828:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a82a:	e003      	b.n	800a834 <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a832:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a83a:	d309      	bcc.n	800a850 <UART_SetConfig+0x1588>
 800a83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a842:	d205      	bcs.n	800a850 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a84a:	60da      	str	r2, [r3, #12]
 800a84c:	f000 bf85 	b.w	800b75a <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a856:	f000 bf80 	b.w	800b75a <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a862:	f040 83da 	bne.w	800b01a <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 800a866:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a86a:	2b40      	cmp	r3, #64	; 0x40
 800a86c:	f200 83b3 	bhi.w	800afd6 <UART_SetConfig+0x1d0e>
 800a870:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <UART_SetConfig+0x15b0>)
 800a872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a876:	bf00      	nop
 800a878:	0800a9c5 	.word	0x0800a9c5
 800a87c:	0800aa7d 	.word	0x0800aa7d
 800a880:	0800afd7 	.word	0x0800afd7
 800a884:	0800afd7 	.word	0x0800afd7
 800a888:	0800ab35 	.word	0x0800ab35
 800a88c:	0800afd7 	.word	0x0800afd7
 800a890:	0800afd7 	.word	0x0800afd7
 800a894:	0800afd7 	.word	0x0800afd7
 800a898:	0800abf1 	.word	0x0800abf1
 800a89c:	0800afd7 	.word	0x0800afd7
 800a8a0:	0800afd7 	.word	0x0800afd7
 800a8a4:	0800afd7 	.word	0x0800afd7
 800a8a8:	0800afd7 	.word	0x0800afd7
 800a8ac:	0800afd7 	.word	0x0800afd7
 800a8b0:	0800afd7 	.word	0x0800afd7
 800a8b4:	0800afd7 	.word	0x0800afd7
 800a8b8:	0800acad 	.word	0x0800acad
 800a8bc:	0800afd7 	.word	0x0800afd7
 800a8c0:	0800afd7 	.word	0x0800afd7
 800a8c4:	0800afd7 	.word	0x0800afd7
 800a8c8:	0800afd7 	.word	0x0800afd7
 800a8cc:	0800afd7 	.word	0x0800afd7
 800a8d0:	0800afd7 	.word	0x0800afd7
 800a8d4:	0800afd7 	.word	0x0800afd7
 800a8d8:	0800afd7 	.word	0x0800afd7
 800a8dc:	0800afd7 	.word	0x0800afd7
 800a8e0:	0800afd7 	.word	0x0800afd7
 800a8e4:	0800afd7 	.word	0x0800afd7
 800a8e8:	0800afd7 	.word	0x0800afd7
 800a8ec:	0800afd7 	.word	0x0800afd7
 800a8f0:	0800afd7 	.word	0x0800afd7
 800a8f4:	0800afd7 	.word	0x0800afd7
 800a8f8:	0800ae1f 	.word	0x0800ae1f
 800a8fc:	0800afd7 	.word	0x0800afd7
 800a900:	0800afd7 	.word	0x0800afd7
 800a904:	0800afd7 	.word	0x0800afd7
 800a908:	0800afd7 	.word	0x0800afd7
 800a90c:	0800afd7 	.word	0x0800afd7
 800a910:	0800afd7 	.word	0x0800afd7
 800a914:	0800afd7 	.word	0x0800afd7
 800a918:	0800afd7 	.word	0x0800afd7
 800a91c:	0800afd7 	.word	0x0800afd7
 800a920:	0800afd7 	.word	0x0800afd7
 800a924:	0800afd7 	.word	0x0800afd7
 800a928:	0800afd7 	.word	0x0800afd7
 800a92c:	0800afd7 	.word	0x0800afd7
 800a930:	0800afd7 	.word	0x0800afd7
 800a934:	0800afd7 	.word	0x0800afd7
 800a938:	0800afd7 	.word	0x0800afd7
 800a93c:	0800afd7 	.word	0x0800afd7
 800a940:	0800afd7 	.word	0x0800afd7
 800a944:	0800afd7 	.word	0x0800afd7
 800a948:	0800afd7 	.word	0x0800afd7
 800a94c:	0800afd7 	.word	0x0800afd7
 800a950:	0800afd7 	.word	0x0800afd7
 800a954:	0800afd7 	.word	0x0800afd7
 800a958:	0800afd7 	.word	0x0800afd7
 800a95c:	0800afd7 	.word	0x0800afd7
 800a960:	0800afd7 	.word	0x0800afd7
 800a964:	0800afd7 	.word	0x0800afd7
 800a968:	0800afd7 	.word	0x0800afd7
 800a96c:	0800afd7 	.word	0x0800afd7
 800a970:	0800afd7 	.word	0x0800afd7
 800a974:	0800afd7 	.word	0x0800afd7
 800a978:	0800af15 	.word	0x0800af15
 800a97c:	f3af 8000 	nop.w
 800a980:	05161500 	.word	0x05161500
 800a984:	00000000 	.word	0x00000000
 800a988:	0a2c2a00 	.word	0x0a2c2a00
 800a98c:	00000000 	.word	0x00000000
 800a990:	003d0900 	.word	0x003d0900
 800a994:	3d090000 	.word	0x3d090000
 800a998:	007a1200 	.word	0x007a1200
 800a99c:	00f42400 	.word	0x00f42400
 800a9a0:	01e84800 	.word	0x01e84800
 800a9a4:	03d09000 	.word	0x03d09000
 800a9a8:	061a8000 	.word	0x061a8000
 800a9ac:	07a12000 	.word	0x07a12000
 800a9b0:	0f424000 	.word	0x0f424000
 800a9b4:	1e848000 	.word	0x1e848000
 800a9b8:	000aaa00 	.word	0x000aaa00
 800a9bc:	000ccc00 	.word	0x000ccc00
 800a9c0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9c4:	f7fb fe50 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 800a9c8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d044      	beq.n	800aa5c <UART_SetConfig+0x1794>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d03e      	beq.n	800aa58 <UART_SetConfig+0x1790>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d038      	beq.n	800aa54 <UART_SetConfig+0x178c>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d032      	beq.n	800aa50 <UART_SetConfig+0x1788>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d02c      	beq.n	800aa4c <UART_SetConfig+0x1784>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	2b05      	cmp	r3, #5
 800a9f8:	d026      	beq.n	800aa48 <UART_SetConfig+0x1780>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2b06      	cmp	r3, #6
 800aa00:	d020      	beq.n	800aa44 <UART_SetConfig+0x177c>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	2b07      	cmp	r3, #7
 800aa08:	d01a      	beq.n	800aa40 <UART_SetConfig+0x1778>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b08      	cmp	r3, #8
 800aa10:	d014      	beq.n	800aa3c <UART_SetConfig+0x1774>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b09      	cmp	r3, #9
 800aa18:	d00e      	beq.n	800aa38 <UART_SetConfig+0x1770>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b0a      	cmp	r3, #10
 800aa20:	d008      	beq.n	800aa34 <UART_SetConfig+0x176c>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b0b      	cmp	r3, #11
 800aa28:	d102      	bne.n	800aa30 <UART_SetConfig+0x1768>
 800aa2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa2e:	e016      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa30:	2301      	movs	r3, #1
 800aa32:	e014      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa34:	2380      	movs	r3, #128	; 0x80
 800aa36:	e012      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa38:	2340      	movs	r3, #64	; 0x40
 800aa3a:	e010      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	e00e      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa40:	2310      	movs	r3, #16
 800aa42:	e00c      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa44:	230c      	movs	r3, #12
 800aa46:	e00a      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa48:	230a      	movs	r3, #10
 800aa4a:	e008      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa4c:	2308      	movs	r3, #8
 800aa4e:	e006      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa50:	2306      	movs	r3, #6
 800aa52:	e004      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa54:	2304      	movs	r3, #4
 800aa56:	e002      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa58:	2302      	movs	r3, #2
 800aa5a:	e000      	b.n	800aa5e <UART_SetConfig+0x1796>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa60:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa64:	005a      	lsls	r2, r3, #1
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	085b      	lsrs	r3, r3, #1
 800aa6c:	441a      	add	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa7a:	e2b0      	b.n	800afde <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa7c:	f7fb fe0a 	bl	8006694 <HAL_RCC_GetPCLK2Freq>
 800aa80:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d044      	beq.n	800ab14 <UART_SetConfig+0x184c>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d03e      	beq.n	800ab10 <UART_SetConfig+0x1848>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d038      	beq.n	800ab0c <UART_SetConfig+0x1844>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d032      	beq.n	800ab08 <UART_SetConfig+0x1840>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d02c      	beq.n	800ab04 <UART_SetConfig+0x183c>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	2b05      	cmp	r3, #5
 800aab0:	d026      	beq.n	800ab00 <UART_SetConfig+0x1838>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab6:	2b06      	cmp	r3, #6
 800aab8:	d020      	beq.n	800aafc <UART_SetConfig+0x1834>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	2b07      	cmp	r3, #7
 800aac0:	d01a      	beq.n	800aaf8 <UART_SetConfig+0x1830>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	2b08      	cmp	r3, #8
 800aac8:	d014      	beq.n	800aaf4 <UART_SetConfig+0x182c>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	2b09      	cmp	r3, #9
 800aad0:	d00e      	beq.n	800aaf0 <UART_SetConfig+0x1828>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	2b0a      	cmp	r3, #10
 800aad8:	d008      	beq.n	800aaec <UART_SetConfig+0x1824>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	2b0b      	cmp	r3, #11
 800aae0:	d102      	bne.n	800aae8 <UART_SetConfig+0x1820>
 800aae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aae6:	e016      	b.n	800ab16 <UART_SetConfig+0x184e>
 800aae8:	2301      	movs	r3, #1
 800aaea:	e014      	b.n	800ab16 <UART_SetConfig+0x184e>
 800aaec:	2380      	movs	r3, #128	; 0x80
 800aaee:	e012      	b.n	800ab16 <UART_SetConfig+0x184e>
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	e010      	b.n	800ab16 <UART_SetConfig+0x184e>
 800aaf4:	2320      	movs	r3, #32
 800aaf6:	e00e      	b.n	800ab16 <UART_SetConfig+0x184e>
 800aaf8:	2310      	movs	r3, #16
 800aafa:	e00c      	b.n	800ab16 <UART_SetConfig+0x184e>
 800aafc:	230c      	movs	r3, #12
 800aafe:	e00a      	b.n	800ab16 <UART_SetConfig+0x184e>
 800ab00:	230a      	movs	r3, #10
 800ab02:	e008      	b.n	800ab16 <UART_SetConfig+0x184e>
 800ab04:	2308      	movs	r3, #8
 800ab06:	e006      	b.n	800ab16 <UART_SetConfig+0x184e>
 800ab08:	2306      	movs	r3, #6
 800ab0a:	e004      	b.n	800ab16 <UART_SetConfig+0x184e>
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	e002      	b.n	800ab16 <UART_SetConfig+0x184e>
 800ab10:	2302      	movs	r3, #2
 800ab12:	e000      	b.n	800ab16 <UART_SetConfig+0x184e>
 800ab14:	2301      	movs	r3, #1
 800ab16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1c:	005a      	lsls	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	441a      	add	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab32:	e254      	b.n	800afde <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab34:	f107 0318 	add.w	r3, r7, #24
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fc ff79 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d044      	beq.n	800abd2 <UART_SetConfig+0x190a>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d03e      	beq.n	800abce <UART_SetConfig+0x1906>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d038      	beq.n	800abca <UART_SetConfig+0x1902>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d032      	beq.n	800abc6 <UART_SetConfig+0x18fe>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b04      	cmp	r3, #4
 800ab66:	d02c      	beq.n	800abc2 <UART_SetConfig+0x18fa>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b05      	cmp	r3, #5
 800ab6e:	d026      	beq.n	800abbe <UART_SetConfig+0x18f6>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b06      	cmp	r3, #6
 800ab76:	d020      	beq.n	800abba <UART_SetConfig+0x18f2>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b07      	cmp	r3, #7
 800ab7e:	d01a      	beq.n	800abb6 <UART_SetConfig+0x18ee>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d014      	beq.n	800abb2 <UART_SetConfig+0x18ea>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b09      	cmp	r3, #9
 800ab8e:	d00e      	beq.n	800abae <UART_SetConfig+0x18e6>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b0a      	cmp	r3, #10
 800ab96:	d008      	beq.n	800abaa <UART_SetConfig+0x18e2>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b0b      	cmp	r3, #11
 800ab9e:	d102      	bne.n	800aba6 <UART_SetConfig+0x18de>
 800aba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aba4:	e016      	b.n	800abd4 <UART_SetConfig+0x190c>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e014      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abaa:	2380      	movs	r3, #128	; 0x80
 800abac:	e012      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abae:	2340      	movs	r3, #64	; 0x40
 800abb0:	e010      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abb2:	2320      	movs	r3, #32
 800abb4:	e00e      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abb6:	2310      	movs	r3, #16
 800abb8:	e00c      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abba:	230c      	movs	r3, #12
 800abbc:	e00a      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abbe:	230a      	movs	r3, #10
 800abc0:	e008      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abc2:	2308      	movs	r3, #8
 800abc4:	e006      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abc6:	2306      	movs	r3, #6
 800abc8:	e004      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abca:	2304      	movs	r3, #4
 800abcc:	e002      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abce:	2302      	movs	r3, #2
 800abd0:	e000      	b.n	800abd4 <UART_SetConfig+0x190c>
 800abd2:	2301      	movs	r3, #1
 800abd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd8:	005a      	lsls	r2, r3, #1
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	085b      	lsrs	r3, r3, #1
 800abe0:	441a      	add	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abea:	b29b      	uxth	r3, r3
 800abec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abee:	e1f6      	b.n	800afde <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abf0:	f107 030c 	add.w	r3, r7, #12
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fd f867 	bl	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d044      	beq.n	800ac8e <UART_SetConfig+0x19c6>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d03e      	beq.n	800ac8a <UART_SetConfig+0x19c2>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d038      	beq.n	800ac86 <UART_SetConfig+0x19be>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	2b03      	cmp	r3, #3
 800ac1a:	d032      	beq.n	800ac82 <UART_SetConfig+0x19ba>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d02c      	beq.n	800ac7e <UART_SetConfig+0x19b6>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	d026      	beq.n	800ac7a <UART_SetConfig+0x19b2>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	2b06      	cmp	r3, #6
 800ac32:	d020      	beq.n	800ac76 <UART_SetConfig+0x19ae>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	2b07      	cmp	r3, #7
 800ac3a:	d01a      	beq.n	800ac72 <UART_SetConfig+0x19aa>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d014      	beq.n	800ac6e <UART_SetConfig+0x19a6>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	2b09      	cmp	r3, #9
 800ac4a:	d00e      	beq.n	800ac6a <UART_SetConfig+0x19a2>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	2b0a      	cmp	r3, #10
 800ac52:	d008      	beq.n	800ac66 <UART_SetConfig+0x199e>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	2b0b      	cmp	r3, #11
 800ac5a:	d102      	bne.n	800ac62 <UART_SetConfig+0x199a>
 800ac5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac60:	e016      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e014      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac66:	2380      	movs	r3, #128	; 0x80
 800ac68:	e012      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac6a:	2340      	movs	r3, #64	; 0x40
 800ac6c:	e010      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac6e:	2320      	movs	r3, #32
 800ac70:	e00e      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac72:	2310      	movs	r3, #16
 800ac74:	e00c      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac76:	230c      	movs	r3, #12
 800ac78:	e00a      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac7a:	230a      	movs	r3, #10
 800ac7c:	e008      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac7e:	2308      	movs	r3, #8
 800ac80:	e006      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac82:	2306      	movs	r3, #6
 800ac84:	e004      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac86:	2304      	movs	r3, #4
 800ac88:	e002      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	e000      	b.n	800ac90 <UART_SetConfig+0x19c8>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac94:	005a      	lsls	r2, r3, #1
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	085b      	lsrs	r3, r3, #1
 800ac9c:	441a      	add	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acaa:	e198      	b.n	800afde <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acac:	4b87      	ldr	r3, [pc, #540]	; (800aecc <UART_SetConfig+0x1c04>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0320 	and.w	r3, r3, #32
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d05e      	beq.n	800ad76 <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb8:	4b84      	ldr	r3, [pc, #528]	; (800aecc <UART_SetConfig+0x1c04>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	08db      	lsrs	r3, r3, #3
 800acbe:	f003 0303 	and.w	r3, r3, #3
 800acc2:	4a83      	ldr	r2, [pc, #524]	; (800aed0 <UART_SetConfig+0x1c08>)
 800acc4:	40da      	lsrs	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	d044      	beq.n	800ad58 <UART_SetConfig+0x1a90>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d03e      	beq.n	800ad54 <UART_SetConfig+0x1a8c>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d038      	beq.n	800ad50 <UART_SetConfig+0x1a88>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d032      	beq.n	800ad4c <UART_SetConfig+0x1a84>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	2b04      	cmp	r3, #4
 800acec:	d02c      	beq.n	800ad48 <UART_SetConfig+0x1a80>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d026      	beq.n	800ad44 <UART_SetConfig+0x1a7c>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	2b06      	cmp	r3, #6
 800acfc:	d020      	beq.n	800ad40 <UART_SetConfig+0x1a78>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	2b07      	cmp	r3, #7
 800ad04:	d01a      	beq.n	800ad3c <UART_SetConfig+0x1a74>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	2b08      	cmp	r3, #8
 800ad0c:	d014      	beq.n	800ad38 <UART_SetConfig+0x1a70>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad12:	2b09      	cmp	r3, #9
 800ad14:	d00e      	beq.n	800ad34 <UART_SetConfig+0x1a6c>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b0a      	cmp	r3, #10
 800ad1c:	d008      	beq.n	800ad30 <UART_SetConfig+0x1a68>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	2b0b      	cmp	r3, #11
 800ad24:	d102      	bne.n	800ad2c <UART_SetConfig+0x1a64>
 800ad26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad2a:	e016      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e014      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad30:	2380      	movs	r3, #128	; 0x80
 800ad32:	e012      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad34:	2340      	movs	r3, #64	; 0x40
 800ad36:	e010      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad38:	2320      	movs	r3, #32
 800ad3a:	e00e      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad3c:	2310      	movs	r3, #16
 800ad3e:	e00c      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad40:	230c      	movs	r3, #12
 800ad42:	e00a      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad44:	230a      	movs	r3, #10
 800ad46:	e008      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad48:	2308      	movs	r3, #8
 800ad4a:	e006      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad4c:	2306      	movs	r3, #6
 800ad4e:	e004      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad50:	2304      	movs	r3, #4
 800ad52:	e002      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e000      	b.n	800ad5a <UART_SetConfig+0x1a92>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5e:	005a      	lsls	r2, r3, #1
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	085b      	lsrs	r3, r3, #1
 800ad66:	441a      	add	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800ad74:	e133      	b.n	800afde <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d043      	beq.n	800ae06 <UART_SetConfig+0x1b3e>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d03d      	beq.n	800ae02 <UART_SetConfig+0x1b3a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d037      	beq.n	800adfe <UART_SetConfig+0x1b36>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d031      	beq.n	800adfa <UART_SetConfig+0x1b32>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9a:	2b04      	cmp	r3, #4
 800ad9c:	d02b      	beq.n	800adf6 <UART_SetConfig+0x1b2e>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	d025      	beq.n	800adf2 <UART_SetConfig+0x1b2a>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adaa:	2b06      	cmp	r3, #6
 800adac:	d01f      	beq.n	800adee <UART_SetConfig+0x1b26>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	2b07      	cmp	r3, #7
 800adb4:	d019      	beq.n	800adea <UART_SetConfig+0x1b22>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	2b08      	cmp	r3, #8
 800adbc:	d013      	beq.n	800ade6 <UART_SetConfig+0x1b1e>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	2b09      	cmp	r3, #9
 800adc4:	d00d      	beq.n	800ade2 <UART_SetConfig+0x1b1a>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2b0a      	cmp	r3, #10
 800adcc:	d007      	beq.n	800adde <UART_SetConfig+0x1b16>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add2:	2b0b      	cmp	r3, #11
 800add4:	d101      	bne.n	800adda <UART_SetConfig+0x1b12>
 800add6:	4b3f      	ldr	r3, [pc, #252]	; (800aed4 <UART_SetConfig+0x1c0c>)
 800add8:	e016      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800adda:	4b3f      	ldr	r3, [pc, #252]	; (800aed8 <UART_SetConfig+0x1c10>)
 800addc:	e014      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800adde:	4b3f      	ldr	r3, [pc, #252]	; (800aedc <UART_SetConfig+0x1c14>)
 800ade0:	e012      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800ade2:	4b3f      	ldr	r3, [pc, #252]	; (800aee0 <UART_SetConfig+0x1c18>)
 800ade4:	e010      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800ade6:	4b3f      	ldr	r3, [pc, #252]	; (800aee4 <UART_SetConfig+0x1c1c>)
 800ade8:	e00e      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800adea:	4b3f      	ldr	r3, [pc, #252]	; (800aee8 <UART_SetConfig+0x1c20>)
 800adec:	e00c      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800adee:	4b3f      	ldr	r3, [pc, #252]	; (800aeec <UART_SetConfig+0x1c24>)
 800adf0:	e00a      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800adf2:	4b3f      	ldr	r3, [pc, #252]	; (800aef0 <UART_SetConfig+0x1c28>)
 800adf4:	e008      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800adf6:	4b3f      	ldr	r3, [pc, #252]	; (800aef4 <UART_SetConfig+0x1c2c>)
 800adf8:	e006      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800adfa:	4b3f      	ldr	r3, [pc, #252]	; (800aef8 <UART_SetConfig+0x1c30>)
 800adfc:	e004      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800adfe:	4b3f      	ldr	r3, [pc, #252]	; (800aefc <UART_SetConfig+0x1c34>)
 800ae00:	e002      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800ae02:	4b33      	ldr	r3, [pc, #204]	; (800aed0 <UART_SetConfig+0x1c08>)
 800ae04:	e000      	b.n	800ae08 <UART_SetConfig+0x1b40>
 800ae06:	4b34      	ldr	r3, [pc, #208]	; (800aed8 <UART_SetConfig+0x1c10>)
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	6852      	ldr	r2, [r2, #4]
 800ae0c:	0852      	lsrs	r2, r2, #1
 800ae0e:	441a      	add	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae1c:	e0df      	b.n	800afde <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d045      	beq.n	800aeb2 <UART_SetConfig+0x1bea>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d03f      	beq.n	800aeae <UART_SetConfig+0x1be6>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d039      	beq.n	800aeaa <UART_SetConfig+0x1be2>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d033      	beq.n	800aea6 <UART_SetConfig+0x1bde>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d02d      	beq.n	800aea2 <UART_SetConfig+0x1bda>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	2b05      	cmp	r3, #5
 800ae4c:	d027      	beq.n	800ae9e <UART_SetConfig+0x1bd6>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	2b06      	cmp	r3, #6
 800ae54:	d021      	beq.n	800ae9a <UART_SetConfig+0x1bd2>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	2b07      	cmp	r3, #7
 800ae5c:	d01b      	beq.n	800ae96 <UART_SetConfig+0x1bce>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae62:	2b08      	cmp	r3, #8
 800ae64:	d015      	beq.n	800ae92 <UART_SetConfig+0x1bca>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6a:	2b09      	cmp	r3, #9
 800ae6c:	d00f      	beq.n	800ae8e <UART_SetConfig+0x1bc6>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae72:	2b0a      	cmp	r3, #10
 800ae74:	d008      	beq.n	800ae88 <UART_SetConfig+0x1bc0>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	2b0b      	cmp	r3, #11
 800ae7c:	d102      	bne.n	800ae84 <UART_SetConfig+0x1bbc>
 800ae7e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800ae82:	e017      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800ae84:	4b18      	ldr	r3, [pc, #96]	; (800aee8 <UART_SetConfig+0x1c20>)
 800ae86:	e015      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800ae88:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ae8c:	e012      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800ae8e:	4b1c      	ldr	r3, [pc, #112]	; (800af00 <UART_SetConfig+0x1c38>)
 800ae90:	e010      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800ae92:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <UART_SetConfig+0x1c3c>)
 800ae94:	e00e      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800ae96:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <UART_SetConfig+0x1c0c>)
 800ae98:	e00c      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800ae9a:	4b1b      	ldr	r3, [pc, #108]	; (800af08 <UART_SetConfig+0x1c40>)
 800ae9c:	e00a      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800ae9e:	4b1b      	ldr	r3, [pc, #108]	; (800af0c <UART_SetConfig+0x1c44>)
 800aea0:	e008      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800aea2:	4b0e      	ldr	r3, [pc, #56]	; (800aedc <UART_SetConfig+0x1c14>)
 800aea4:	e006      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800aea6:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <UART_SetConfig+0x1c48>)
 800aea8:	e004      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <UART_SetConfig+0x1c18>)
 800aeac:	e002      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800aeae:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <UART_SetConfig+0x1c1c>)
 800aeb0:	e000      	b.n	800aeb4 <UART_SetConfig+0x1bec>
 800aeb2:	4b0d      	ldr	r3, [pc, #52]	; (800aee8 <UART_SetConfig+0x1c20>)
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6852      	ldr	r2, [r2, #4]
 800aeb8:	0852      	lsrs	r2, r2, #1
 800aeba:	441a      	add	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aec8:	e089      	b.n	800afde <UART_SetConfig+0x1d16>
 800aeca:	bf00      	nop
 800aecc:	58024400 	.word	0x58024400
 800aed0:	03d09000 	.word	0x03d09000
 800aed4:	0007a120 	.word	0x0007a120
 800aed8:	07a12000 	.word	0x07a12000
 800aedc:	000f4240 	.word	0x000f4240
 800aee0:	001e8480 	.word	0x001e8480
 800aee4:	003d0900 	.word	0x003d0900
 800aee8:	007a1200 	.word	0x007a1200
 800aeec:	00a2c2aa 	.word	0x00a2c2aa
 800aef0:	00c35000 	.word	0x00c35000
 800aef4:	00f42400 	.word	0x00f42400
 800aef8:	01458554 	.word	0x01458554
 800aefc:	01e84800 	.word	0x01e84800
 800af00:	0001e848 	.word	0x0001e848
 800af04:	0003d090 	.word	0x0003d090
 800af08:	000a2c2a 	.word	0x000a2c2a
 800af0c:	000c3500 	.word	0x000c3500
 800af10:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d04f      	beq.n	800afbc <UART_SetConfig+0x1cf4>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af20:	2b01      	cmp	r3, #1
 800af22:	d048      	beq.n	800afb6 <UART_SetConfig+0x1cee>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d041      	beq.n	800afb0 <UART_SetConfig+0x1ce8>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af30:	2b03      	cmp	r3, #3
 800af32:	d03a      	beq.n	800afaa <UART_SetConfig+0x1ce2>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d033      	beq.n	800afa4 <UART_SetConfig+0x1cdc>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af40:	2b05      	cmp	r3, #5
 800af42:	d02c      	beq.n	800af9e <UART_SetConfig+0x1cd6>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af48:	2b06      	cmp	r3, #6
 800af4a:	d025      	beq.n	800af98 <UART_SetConfig+0x1cd0>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af50:	2b07      	cmp	r3, #7
 800af52:	d01e      	beq.n	800af92 <UART_SetConfig+0x1cca>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af58:	2b08      	cmp	r3, #8
 800af5a:	d017      	beq.n	800af8c <UART_SetConfig+0x1cc4>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af60:	2b09      	cmp	r3, #9
 800af62:	d010      	beq.n	800af86 <UART_SetConfig+0x1cbe>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	2b0a      	cmp	r3, #10
 800af6a:	d009      	beq.n	800af80 <UART_SetConfig+0x1cb8>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af70:	2b0b      	cmp	r3, #11
 800af72:	d102      	bne.n	800af7a <UART_SetConfig+0x1cb2>
 800af74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af78:	e022      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800af7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af7e:	e01f      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800af80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af84:	e01c      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800af86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af8a:	e019      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800af8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af90:	e016      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800af92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af96:	e013      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800af98:	f241 5354 	movw	r3, #5460	; 0x1554
 800af9c:	e010      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800af9e:	f641 1398 	movw	r3, #6552	; 0x1998
 800afa2:	e00d      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800afa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afa8:	e00a      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800afaa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800afae:	e007      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800afb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afb4:	e004      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800afb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afba:	e001      	b.n	800afc0 <UART_SetConfig+0x1cf8>
 800afbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	6852      	ldr	r2, [r2, #4]
 800afc4:	0852      	lsrs	r2, r2, #1
 800afc6:	441a      	add	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afd4:	e003      	b.n	800afde <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800afdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	2b0f      	cmp	r3, #15
 800afe2:	d916      	bls.n	800b012 <UART_SetConfig+0x1d4a>
 800afe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afea:	d212      	bcs.n	800b012 <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afee:	b29b      	uxth	r3, r3
 800aff0:	f023 030f 	bic.w	r3, r3, #15
 800aff4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff8:	085b      	lsrs	r3, r3, #1
 800affa:	b29b      	uxth	r3, r3
 800affc:	f003 0307 	and.w	r3, r3, #7
 800b000:	b29a      	uxth	r2, r3
 800b002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b004:	4313      	orrs	r3, r2
 800b006:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b00e:	60da      	str	r2, [r3, #12]
 800b010:	e3a3      	b.n	800b75a <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b018:	e39f      	b.n	800b75a <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 800b01a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b01e:	2b40      	cmp	r3, #64	; 0x40
 800b020:	f200 8388 	bhi.w	800b734 <UART_SetConfig+0x246c>
 800b024:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <UART_SetConfig+0x1d64>)
 800b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02a:	bf00      	nop
 800b02c:	0800b131 	.word	0x0800b131
 800b030:	0800b1e7 	.word	0x0800b1e7
 800b034:	0800b735 	.word	0x0800b735
 800b038:	0800b735 	.word	0x0800b735
 800b03c:	0800b29d 	.word	0x0800b29d
 800b040:	0800b735 	.word	0x0800b735
 800b044:	0800b735 	.word	0x0800b735
 800b048:	0800b735 	.word	0x0800b735
 800b04c:	0800b357 	.word	0x0800b357
 800b050:	0800b735 	.word	0x0800b735
 800b054:	0800b735 	.word	0x0800b735
 800b058:	0800b735 	.word	0x0800b735
 800b05c:	0800b735 	.word	0x0800b735
 800b060:	0800b735 	.word	0x0800b735
 800b064:	0800b735 	.word	0x0800b735
 800b068:	0800b735 	.word	0x0800b735
 800b06c:	0800b411 	.word	0x0800b411
 800b070:	0800b735 	.word	0x0800b735
 800b074:	0800b735 	.word	0x0800b735
 800b078:	0800b735 	.word	0x0800b735
 800b07c:	0800b735 	.word	0x0800b735
 800b080:	0800b735 	.word	0x0800b735
 800b084:	0800b735 	.word	0x0800b735
 800b088:	0800b735 	.word	0x0800b735
 800b08c:	0800b735 	.word	0x0800b735
 800b090:	0800b735 	.word	0x0800b735
 800b094:	0800b735 	.word	0x0800b735
 800b098:	0800b735 	.word	0x0800b735
 800b09c:	0800b735 	.word	0x0800b735
 800b0a0:	0800b735 	.word	0x0800b735
 800b0a4:	0800b735 	.word	0x0800b735
 800b0a8:	0800b735 	.word	0x0800b735
 800b0ac:	0800b581 	.word	0x0800b581
 800b0b0:	0800b735 	.word	0x0800b735
 800b0b4:	0800b735 	.word	0x0800b735
 800b0b8:	0800b735 	.word	0x0800b735
 800b0bc:	0800b735 	.word	0x0800b735
 800b0c0:	0800b735 	.word	0x0800b735
 800b0c4:	0800b735 	.word	0x0800b735
 800b0c8:	0800b735 	.word	0x0800b735
 800b0cc:	0800b735 	.word	0x0800b735
 800b0d0:	0800b735 	.word	0x0800b735
 800b0d4:	0800b735 	.word	0x0800b735
 800b0d8:	0800b735 	.word	0x0800b735
 800b0dc:	0800b735 	.word	0x0800b735
 800b0e0:	0800b735 	.word	0x0800b735
 800b0e4:	0800b735 	.word	0x0800b735
 800b0e8:	0800b735 	.word	0x0800b735
 800b0ec:	0800b735 	.word	0x0800b735
 800b0f0:	0800b735 	.word	0x0800b735
 800b0f4:	0800b735 	.word	0x0800b735
 800b0f8:	0800b735 	.word	0x0800b735
 800b0fc:	0800b735 	.word	0x0800b735
 800b100:	0800b735 	.word	0x0800b735
 800b104:	0800b735 	.word	0x0800b735
 800b108:	0800b735 	.word	0x0800b735
 800b10c:	0800b735 	.word	0x0800b735
 800b110:	0800b735 	.word	0x0800b735
 800b114:	0800b735 	.word	0x0800b735
 800b118:	0800b735 	.word	0x0800b735
 800b11c:	0800b735 	.word	0x0800b735
 800b120:	0800b735 	.word	0x0800b735
 800b124:	0800b735 	.word	0x0800b735
 800b128:	0800b735 	.word	0x0800b735
 800b12c:	0800b675 	.word	0x0800b675
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b130:	f7fb fa9a 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 800b134:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d044      	beq.n	800b1c8 <UART_SetConfig+0x1f00>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	2b01      	cmp	r3, #1
 800b144:	d03e      	beq.n	800b1c4 <UART_SetConfig+0x1efc>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d038      	beq.n	800b1c0 <UART_SetConfig+0x1ef8>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b03      	cmp	r3, #3
 800b154:	d032      	beq.n	800b1bc <UART_SetConfig+0x1ef4>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b04      	cmp	r3, #4
 800b15c:	d02c      	beq.n	800b1b8 <UART_SetConfig+0x1ef0>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	2b05      	cmp	r3, #5
 800b164:	d026      	beq.n	800b1b4 <UART_SetConfig+0x1eec>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b06      	cmp	r3, #6
 800b16c:	d020      	beq.n	800b1b0 <UART_SetConfig+0x1ee8>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b07      	cmp	r3, #7
 800b174:	d01a      	beq.n	800b1ac <UART_SetConfig+0x1ee4>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	2b08      	cmp	r3, #8
 800b17c:	d014      	beq.n	800b1a8 <UART_SetConfig+0x1ee0>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2b09      	cmp	r3, #9
 800b184:	d00e      	beq.n	800b1a4 <UART_SetConfig+0x1edc>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b0a      	cmp	r3, #10
 800b18c:	d008      	beq.n	800b1a0 <UART_SetConfig+0x1ed8>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	2b0b      	cmp	r3, #11
 800b194:	d102      	bne.n	800b19c <UART_SetConfig+0x1ed4>
 800b196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b19a:	e016      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b19c:	2301      	movs	r3, #1
 800b19e:	e014      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1a0:	2380      	movs	r3, #128	; 0x80
 800b1a2:	e012      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1a4:	2340      	movs	r3, #64	; 0x40
 800b1a6:	e010      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1a8:	2320      	movs	r3, #32
 800b1aa:	e00e      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	e00c      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1b0:	230c      	movs	r3, #12
 800b1b2:	e00a      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1b4:	230a      	movs	r3, #10
 800b1b6:	e008      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1b8:	2308      	movs	r3, #8
 800b1ba:	e006      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1bc:	2306      	movs	r3, #6
 800b1be:	e004      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1c0:	2304      	movs	r3, #4
 800b1c2:	e002      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	e000      	b.n	800b1ca <UART_SetConfig+0x1f02>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	085b      	lsrs	r3, r3, #1
 800b1d6:	441a      	add	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1e4:	e2aa      	b.n	800b73c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1e6:	f7fb fa55 	bl	8006694 <HAL_RCC_GetPCLK2Freq>
 800b1ea:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d044      	beq.n	800b27e <UART_SetConfig+0x1fb6>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d03e      	beq.n	800b27a <UART_SetConfig+0x1fb2>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	2b02      	cmp	r3, #2
 800b202:	d038      	beq.n	800b276 <UART_SetConfig+0x1fae>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	2b03      	cmp	r3, #3
 800b20a:	d032      	beq.n	800b272 <UART_SetConfig+0x1faa>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	2b04      	cmp	r3, #4
 800b212:	d02c      	beq.n	800b26e <UART_SetConfig+0x1fa6>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	2b05      	cmp	r3, #5
 800b21a:	d026      	beq.n	800b26a <UART_SetConfig+0x1fa2>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	2b06      	cmp	r3, #6
 800b222:	d020      	beq.n	800b266 <UART_SetConfig+0x1f9e>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	2b07      	cmp	r3, #7
 800b22a:	d01a      	beq.n	800b262 <UART_SetConfig+0x1f9a>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b230:	2b08      	cmp	r3, #8
 800b232:	d014      	beq.n	800b25e <UART_SetConfig+0x1f96>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b238:	2b09      	cmp	r3, #9
 800b23a:	d00e      	beq.n	800b25a <UART_SetConfig+0x1f92>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	2b0a      	cmp	r3, #10
 800b242:	d008      	beq.n	800b256 <UART_SetConfig+0x1f8e>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	2b0b      	cmp	r3, #11
 800b24a:	d102      	bne.n	800b252 <UART_SetConfig+0x1f8a>
 800b24c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b250:	e016      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b252:	2301      	movs	r3, #1
 800b254:	e014      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b256:	2380      	movs	r3, #128	; 0x80
 800b258:	e012      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b25a:	2340      	movs	r3, #64	; 0x40
 800b25c:	e010      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b25e:	2320      	movs	r3, #32
 800b260:	e00e      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b262:	2310      	movs	r3, #16
 800b264:	e00c      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b266:	230c      	movs	r3, #12
 800b268:	e00a      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b26a:	230a      	movs	r3, #10
 800b26c:	e008      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b26e:	2308      	movs	r3, #8
 800b270:	e006      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b272:	2306      	movs	r3, #6
 800b274:	e004      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b276:	2304      	movs	r3, #4
 800b278:	e002      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b27a:	2302      	movs	r3, #2
 800b27c:	e000      	b.n	800b280 <UART_SetConfig+0x1fb8>
 800b27e:	2301      	movs	r3, #1
 800b280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b282:	fbb2 f2f3 	udiv	r2, r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	085b      	lsrs	r3, r3, #1
 800b28c:	441a      	add	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	fbb2 f3f3 	udiv	r3, r2, r3
 800b296:	b29b      	uxth	r3, r3
 800b298:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b29a:	e24f      	b.n	800b73c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b29c:	f107 0318 	add.w	r3, r7, #24
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fc fbc5 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d044      	beq.n	800b33a <UART_SetConfig+0x2072>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d03e      	beq.n	800b336 <UART_SetConfig+0x206e>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d038      	beq.n	800b332 <UART_SetConfig+0x206a>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	d032      	beq.n	800b32e <UART_SetConfig+0x2066>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2cc:	2b04      	cmp	r3, #4
 800b2ce:	d02c      	beq.n	800b32a <UART_SetConfig+0x2062>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	2b05      	cmp	r3, #5
 800b2d6:	d026      	beq.n	800b326 <UART_SetConfig+0x205e>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	2b06      	cmp	r3, #6
 800b2de:	d020      	beq.n	800b322 <UART_SetConfig+0x205a>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	2b07      	cmp	r3, #7
 800b2e6:	d01a      	beq.n	800b31e <UART_SetConfig+0x2056>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	2b08      	cmp	r3, #8
 800b2ee:	d014      	beq.n	800b31a <UART_SetConfig+0x2052>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f4:	2b09      	cmp	r3, #9
 800b2f6:	d00e      	beq.n	800b316 <UART_SetConfig+0x204e>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	2b0a      	cmp	r3, #10
 800b2fe:	d008      	beq.n	800b312 <UART_SetConfig+0x204a>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	2b0b      	cmp	r3, #11
 800b306:	d102      	bne.n	800b30e <UART_SetConfig+0x2046>
 800b308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b30c:	e016      	b.n	800b33c <UART_SetConfig+0x2074>
 800b30e:	2301      	movs	r3, #1
 800b310:	e014      	b.n	800b33c <UART_SetConfig+0x2074>
 800b312:	2380      	movs	r3, #128	; 0x80
 800b314:	e012      	b.n	800b33c <UART_SetConfig+0x2074>
 800b316:	2340      	movs	r3, #64	; 0x40
 800b318:	e010      	b.n	800b33c <UART_SetConfig+0x2074>
 800b31a:	2320      	movs	r3, #32
 800b31c:	e00e      	b.n	800b33c <UART_SetConfig+0x2074>
 800b31e:	2310      	movs	r3, #16
 800b320:	e00c      	b.n	800b33c <UART_SetConfig+0x2074>
 800b322:	230c      	movs	r3, #12
 800b324:	e00a      	b.n	800b33c <UART_SetConfig+0x2074>
 800b326:	230a      	movs	r3, #10
 800b328:	e008      	b.n	800b33c <UART_SetConfig+0x2074>
 800b32a:	2308      	movs	r3, #8
 800b32c:	e006      	b.n	800b33c <UART_SetConfig+0x2074>
 800b32e:	2306      	movs	r3, #6
 800b330:	e004      	b.n	800b33c <UART_SetConfig+0x2074>
 800b332:	2304      	movs	r3, #4
 800b334:	e002      	b.n	800b33c <UART_SetConfig+0x2074>
 800b336:	2302      	movs	r3, #2
 800b338:	e000      	b.n	800b33c <UART_SetConfig+0x2074>
 800b33a:	2301      	movs	r3, #1
 800b33c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	085b      	lsrs	r3, r3, #1
 800b346:	441a      	add	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b350:	b29b      	uxth	r3, r3
 800b352:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b354:	e1f2      	b.n	800b73c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b356:	f107 030c 	add.w	r3, r7, #12
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fc fcb4 	bl	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b366:	2b00      	cmp	r3, #0
 800b368:	d044      	beq.n	800b3f4 <UART_SetConfig+0x212c>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d03e      	beq.n	800b3f0 <UART_SetConfig+0x2128>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	2b02      	cmp	r3, #2
 800b378:	d038      	beq.n	800b3ec <UART_SetConfig+0x2124>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d032      	beq.n	800b3e8 <UART_SetConfig+0x2120>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b386:	2b04      	cmp	r3, #4
 800b388:	d02c      	beq.n	800b3e4 <UART_SetConfig+0x211c>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	2b05      	cmp	r3, #5
 800b390:	d026      	beq.n	800b3e0 <UART_SetConfig+0x2118>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	2b06      	cmp	r3, #6
 800b398:	d020      	beq.n	800b3dc <UART_SetConfig+0x2114>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39e:	2b07      	cmp	r3, #7
 800b3a0:	d01a      	beq.n	800b3d8 <UART_SetConfig+0x2110>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	2b08      	cmp	r3, #8
 800b3a8:	d014      	beq.n	800b3d4 <UART_SetConfig+0x210c>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ae:	2b09      	cmp	r3, #9
 800b3b0:	d00e      	beq.n	800b3d0 <UART_SetConfig+0x2108>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	2b0a      	cmp	r3, #10
 800b3b8:	d008      	beq.n	800b3cc <UART_SetConfig+0x2104>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3be:	2b0b      	cmp	r3, #11
 800b3c0:	d102      	bne.n	800b3c8 <UART_SetConfig+0x2100>
 800b3c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3c6:	e016      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e014      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3cc:	2380      	movs	r3, #128	; 0x80
 800b3ce:	e012      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3d0:	2340      	movs	r3, #64	; 0x40
 800b3d2:	e010      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3d4:	2320      	movs	r3, #32
 800b3d6:	e00e      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3d8:	2310      	movs	r3, #16
 800b3da:	e00c      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3dc:	230c      	movs	r3, #12
 800b3de:	e00a      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3e0:	230a      	movs	r3, #10
 800b3e2:	e008      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3e4:	2308      	movs	r3, #8
 800b3e6:	e006      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3e8:	2306      	movs	r3, #6
 800b3ea:	e004      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3ec:	2304      	movs	r3, #4
 800b3ee:	e002      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e000      	b.n	800b3f6 <UART_SetConfig+0x212e>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	fbb2 f2f3 	udiv	r2, r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	085b      	lsrs	r3, r3, #1
 800b400:	441a      	add	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	fbb2 f3f3 	udiv	r3, r2, r3
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b40e:	e195      	b.n	800b73c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b410:	4b87      	ldr	r3, [pc, #540]	; (800b630 <UART_SetConfig+0x2368>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0320 	and.w	r3, r3, #32
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d05d      	beq.n	800b4d8 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b41c:	4b84      	ldr	r3, [pc, #528]	; (800b630 <UART_SetConfig+0x2368>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	08db      	lsrs	r3, r3, #3
 800b422:	f003 0303 	and.w	r3, r3, #3
 800b426:	4a83      	ldr	r2, [pc, #524]	; (800b634 <UART_SetConfig+0x236c>)
 800b428:	40da      	lsrs	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d044      	beq.n	800b4bc <UART_SetConfig+0x21f4>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b436:	2b01      	cmp	r3, #1
 800b438:	d03e      	beq.n	800b4b8 <UART_SetConfig+0x21f0>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d038      	beq.n	800b4b4 <UART_SetConfig+0x21ec>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	2b03      	cmp	r3, #3
 800b448:	d032      	beq.n	800b4b0 <UART_SetConfig+0x21e8>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44e:	2b04      	cmp	r3, #4
 800b450:	d02c      	beq.n	800b4ac <UART_SetConfig+0x21e4>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	2b05      	cmp	r3, #5
 800b458:	d026      	beq.n	800b4a8 <UART_SetConfig+0x21e0>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	2b06      	cmp	r3, #6
 800b460:	d020      	beq.n	800b4a4 <UART_SetConfig+0x21dc>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	2b07      	cmp	r3, #7
 800b468:	d01a      	beq.n	800b4a0 <UART_SetConfig+0x21d8>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	2b08      	cmp	r3, #8
 800b470:	d014      	beq.n	800b49c <UART_SetConfig+0x21d4>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	2b09      	cmp	r3, #9
 800b478:	d00e      	beq.n	800b498 <UART_SetConfig+0x21d0>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b0a      	cmp	r3, #10
 800b480:	d008      	beq.n	800b494 <UART_SetConfig+0x21cc>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2b0b      	cmp	r3, #11
 800b488:	d102      	bne.n	800b490 <UART_SetConfig+0x21c8>
 800b48a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b48e:	e016      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b490:	2301      	movs	r3, #1
 800b492:	e014      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b494:	2380      	movs	r3, #128	; 0x80
 800b496:	e012      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b498:	2340      	movs	r3, #64	; 0x40
 800b49a:	e010      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b49c:	2320      	movs	r3, #32
 800b49e:	e00e      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b4a0:	2310      	movs	r3, #16
 800b4a2:	e00c      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b4a4:	230c      	movs	r3, #12
 800b4a6:	e00a      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b4a8:	230a      	movs	r3, #10
 800b4aa:	e008      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b4ac:	2308      	movs	r3, #8
 800b4ae:	e006      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b4b0:	2306      	movs	r3, #6
 800b4b2:	e004      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b4b4:	2304      	movs	r3, #4
 800b4b6:	e002      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	e000      	b.n	800b4be <UART_SetConfig+0x21f6>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	085b      	lsrs	r3, r3, #1
 800b4c8:	441a      	add	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b4d6:	e131      	b.n	800b73c <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d043      	beq.n	800b568 <UART_SetConfig+0x22a0>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d03d      	beq.n	800b564 <UART_SetConfig+0x229c>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d037      	beq.n	800b560 <UART_SetConfig+0x2298>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f4:	2b03      	cmp	r3, #3
 800b4f6:	d031      	beq.n	800b55c <UART_SetConfig+0x2294>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	2b04      	cmp	r3, #4
 800b4fe:	d02b      	beq.n	800b558 <UART_SetConfig+0x2290>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b504:	2b05      	cmp	r3, #5
 800b506:	d025      	beq.n	800b554 <UART_SetConfig+0x228c>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	2b06      	cmp	r3, #6
 800b50e:	d01f      	beq.n	800b550 <UART_SetConfig+0x2288>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b514:	2b07      	cmp	r3, #7
 800b516:	d019      	beq.n	800b54c <UART_SetConfig+0x2284>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51c:	2b08      	cmp	r3, #8
 800b51e:	d013      	beq.n	800b548 <UART_SetConfig+0x2280>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	2b09      	cmp	r3, #9
 800b526:	d00d      	beq.n	800b544 <UART_SetConfig+0x227c>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	2b0a      	cmp	r3, #10
 800b52e:	d007      	beq.n	800b540 <UART_SetConfig+0x2278>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	2b0b      	cmp	r3, #11
 800b536:	d101      	bne.n	800b53c <UART_SetConfig+0x2274>
 800b538:	4b3f      	ldr	r3, [pc, #252]	; (800b638 <UART_SetConfig+0x2370>)
 800b53a:	e016      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b53c:	4b3d      	ldr	r3, [pc, #244]	; (800b634 <UART_SetConfig+0x236c>)
 800b53e:	e014      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b540:	4b3e      	ldr	r3, [pc, #248]	; (800b63c <UART_SetConfig+0x2374>)
 800b542:	e012      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b544:	4b3e      	ldr	r3, [pc, #248]	; (800b640 <UART_SetConfig+0x2378>)
 800b546:	e010      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b548:	4b3e      	ldr	r3, [pc, #248]	; (800b644 <UART_SetConfig+0x237c>)
 800b54a:	e00e      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b54c:	4b3e      	ldr	r3, [pc, #248]	; (800b648 <UART_SetConfig+0x2380>)
 800b54e:	e00c      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b550:	4b3e      	ldr	r3, [pc, #248]	; (800b64c <UART_SetConfig+0x2384>)
 800b552:	e00a      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b554:	4b3e      	ldr	r3, [pc, #248]	; (800b650 <UART_SetConfig+0x2388>)
 800b556:	e008      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b558:	4b3e      	ldr	r3, [pc, #248]	; (800b654 <UART_SetConfig+0x238c>)
 800b55a:	e006      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b55c:	4b3e      	ldr	r3, [pc, #248]	; (800b658 <UART_SetConfig+0x2390>)
 800b55e:	e004      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b560:	4b3e      	ldr	r3, [pc, #248]	; (800b65c <UART_SetConfig+0x2394>)
 800b562:	e002      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b564:	4b3e      	ldr	r3, [pc, #248]	; (800b660 <UART_SetConfig+0x2398>)
 800b566:	e000      	b.n	800b56a <UART_SetConfig+0x22a2>
 800b568:	4b32      	ldr	r3, [pc, #200]	; (800b634 <UART_SetConfig+0x236c>)
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6852      	ldr	r2, [r2, #4]
 800b56e:	0852      	lsrs	r2, r2, #1
 800b570:	441a      	add	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b57e:	e0dd      	b.n	800b73c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	2b00      	cmp	r3, #0
 800b586:	d046      	beq.n	800b616 <UART_SetConfig+0x234e>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d040      	beq.n	800b612 <UART_SetConfig+0x234a>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	2b02      	cmp	r3, #2
 800b596:	d03a      	beq.n	800b60e <UART_SetConfig+0x2346>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d034      	beq.n	800b60a <UART_SetConfig+0x2342>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	2b04      	cmp	r3, #4
 800b5a6:	d02e      	beq.n	800b606 <UART_SetConfig+0x233e>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ac:	2b05      	cmp	r3, #5
 800b5ae:	d028      	beq.n	800b602 <UART_SetConfig+0x233a>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	2b06      	cmp	r3, #6
 800b5b6:	d022      	beq.n	800b5fe <UART_SetConfig+0x2336>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5bc:	2b07      	cmp	r3, #7
 800b5be:	d01c      	beq.n	800b5fa <UART_SetConfig+0x2332>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d016      	beq.n	800b5f6 <UART_SetConfig+0x232e>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	d00f      	beq.n	800b5f0 <UART_SetConfig+0x2328>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	2b0a      	cmp	r3, #10
 800b5d6:	d008      	beq.n	800b5ea <UART_SetConfig+0x2322>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	2b0b      	cmp	r3, #11
 800b5de:	d102      	bne.n	800b5e6 <UART_SetConfig+0x231e>
 800b5e0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b5e4:	e018      	b.n	800b618 <UART_SetConfig+0x2350>
 800b5e6:	4b18      	ldr	r3, [pc, #96]	; (800b648 <UART_SetConfig+0x2380>)
 800b5e8:	e016      	b.n	800b618 <UART_SetConfig+0x2350>
 800b5ea:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b5ee:	e013      	b.n	800b618 <UART_SetConfig+0x2350>
 800b5f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b5f4:	e010      	b.n	800b618 <UART_SetConfig+0x2350>
 800b5f6:	4b1b      	ldr	r3, [pc, #108]	; (800b664 <UART_SetConfig+0x239c>)
 800b5f8:	e00e      	b.n	800b618 <UART_SetConfig+0x2350>
 800b5fa:	4b0f      	ldr	r3, [pc, #60]	; (800b638 <UART_SetConfig+0x2370>)
 800b5fc:	e00c      	b.n	800b618 <UART_SetConfig+0x2350>
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	; (800b668 <UART_SetConfig+0x23a0>)
 800b600:	e00a      	b.n	800b618 <UART_SetConfig+0x2350>
 800b602:	4b1a      	ldr	r3, [pc, #104]	; (800b66c <UART_SetConfig+0x23a4>)
 800b604:	e008      	b.n	800b618 <UART_SetConfig+0x2350>
 800b606:	4b0d      	ldr	r3, [pc, #52]	; (800b63c <UART_SetConfig+0x2374>)
 800b608:	e006      	b.n	800b618 <UART_SetConfig+0x2350>
 800b60a:	4b19      	ldr	r3, [pc, #100]	; (800b670 <UART_SetConfig+0x23a8>)
 800b60c:	e004      	b.n	800b618 <UART_SetConfig+0x2350>
 800b60e:	4b0c      	ldr	r3, [pc, #48]	; (800b640 <UART_SetConfig+0x2378>)
 800b610:	e002      	b.n	800b618 <UART_SetConfig+0x2350>
 800b612:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <UART_SetConfig+0x237c>)
 800b614:	e000      	b.n	800b618 <UART_SetConfig+0x2350>
 800b616:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <UART_SetConfig+0x2380>)
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	6852      	ldr	r2, [r2, #4]
 800b61c:	0852      	lsrs	r2, r2, #1
 800b61e:	441a      	add	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	fbb2 f3f3 	udiv	r3, r2, r3
 800b628:	b29b      	uxth	r3, r3
 800b62a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b62c:	e086      	b.n	800b73c <UART_SetConfig+0x2474>
 800b62e:	bf00      	nop
 800b630:	58024400 	.word	0x58024400
 800b634:	03d09000 	.word	0x03d09000
 800b638:	0003d090 	.word	0x0003d090
 800b63c:	0007a120 	.word	0x0007a120
 800b640:	000f4240 	.word	0x000f4240
 800b644:	001e8480 	.word	0x001e8480
 800b648:	003d0900 	.word	0x003d0900
 800b64c:	00516155 	.word	0x00516155
 800b650:	0061a800 	.word	0x0061a800
 800b654:	007a1200 	.word	0x007a1200
 800b658:	00a2c2aa 	.word	0x00a2c2aa
 800b65c:	00f42400 	.word	0x00f42400
 800b660:	01e84800 	.word	0x01e84800
 800b664:	0001e848 	.word	0x0001e848
 800b668:	00051615 	.word	0x00051615
 800b66c:	00061a80 	.word	0x00061a80
 800b670:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d04e      	beq.n	800b71a <UART_SetConfig+0x2452>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b01      	cmp	r3, #1
 800b682:	d047      	beq.n	800b714 <UART_SetConfig+0x244c>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	2b02      	cmp	r3, #2
 800b68a:	d040      	beq.n	800b70e <UART_SetConfig+0x2446>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b03      	cmp	r3, #3
 800b692:	d039      	beq.n	800b708 <UART_SetConfig+0x2440>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	2b04      	cmp	r3, #4
 800b69a:	d032      	beq.n	800b702 <UART_SetConfig+0x243a>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b05      	cmp	r3, #5
 800b6a2:	d02b      	beq.n	800b6fc <UART_SetConfig+0x2434>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	2b06      	cmp	r3, #6
 800b6aa:	d024      	beq.n	800b6f6 <UART_SetConfig+0x242e>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b07      	cmp	r3, #7
 800b6b2:	d01d      	beq.n	800b6f0 <UART_SetConfig+0x2428>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b08      	cmp	r3, #8
 800b6ba:	d016      	beq.n	800b6ea <UART_SetConfig+0x2422>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b09      	cmp	r3, #9
 800b6c2:	d00f      	beq.n	800b6e4 <UART_SetConfig+0x241c>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b0a      	cmp	r3, #10
 800b6ca:	d008      	beq.n	800b6de <UART_SetConfig+0x2416>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b0b      	cmp	r3, #11
 800b6d2:	d101      	bne.n	800b6d8 <UART_SetConfig+0x2410>
 800b6d4:	2380      	movs	r3, #128	; 0x80
 800b6d6:	e022      	b.n	800b71e <UART_SetConfig+0x2456>
 800b6d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6dc:	e01f      	b.n	800b71e <UART_SetConfig+0x2456>
 800b6de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e2:	e01c      	b.n	800b71e <UART_SetConfig+0x2456>
 800b6e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6e8:	e019      	b.n	800b71e <UART_SetConfig+0x2456>
 800b6ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ee:	e016      	b.n	800b71e <UART_SetConfig+0x2456>
 800b6f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6f4:	e013      	b.n	800b71e <UART_SetConfig+0x2456>
 800b6f6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b6fa:	e010      	b.n	800b71e <UART_SetConfig+0x2456>
 800b6fc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b700:	e00d      	b.n	800b71e <UART_SetConfig+0x2456>
 800b702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b706:	e00a      	b.n	800b71e <UART_SetConfig+0x2456>
 800b708:	f241 5355 	movw	r3, #5461	; 0x1555
 800b70c:	e007      	b.n	800b71e <UART_SetConfig+0x2456>
 800b70e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b712:	e004      	b.n	800b71e <UART_SetConfig+0x2456>
 800b714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b718:	e001      	b.n	800b71e <UART_SetConfig+0x2456>
 800b71a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6852      	ldr	r2, [r2, #4]
 800b722:	0852      	lsrs	r2, r2, #1
 800b724:	441a      	add	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b72e:	b29b      	uxth	r3, r3
 800b730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b732:	e003      	b.n	800b73c <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b73a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73e:	2b0f      	cmp	r3, #15
 800b740:	d908      	bls.n	800b754 <UART_SetConfig+0x248c>
 800b742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b748:	d204      	bcs.n	800b754 <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b750:	60da      	str	r2, [r3, #12]
 800b752:	e002      	b.n	800b75a <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b776:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3740      	adds	r7, #64	; 0x40
 800b77e:	46bd      	mov	sp, r7
 800b780:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b790:	2bff      	cmp	r3, #255	; 0xff
 800b792:	d904      	bls.n	800b79e <UART_AdvFeatureConfig+0x1a>
 800b794:	f640 4149 	movw	r1, #3145	; 0xc49
 800b798:	4899      	ldr	r0, [pc, #612]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b79a:	f7f5 fb83 	bl	8000ea4 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d018      	beq.n	800b7dc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d009      	beq.n	800b7c6 <UART_AdvFeatureConfig+0x42>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7ba:	d004      	beq.n	800b7c6 <UART_AdvFeatureConfig+0x42>
 800b7bc:	f640 414e 	movw	r1, #3150	; 0xc4e
 800b7c0:	488f      	ldr	r0, [pc, #572]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b7c2:	f7f5 fb6f 	bl	8000ea4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	430a      	orrs	r2, r1
 800b7da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e0:	f003 0302 	and.w	r3, r3, #2
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d018      	beq.n	800b81a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d009      	beq.n	800b804 <UART_AdvFeatureConfig+0x80>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7f8:	d004      	beq.n	800b804 <UART_AdvFeatureConfig+0x80>
 800b7fa:	f640 4155 	movw	r1, #3157	; 0xc55
 800b7fe:	4880      	ldr	r0, [pc, #512]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b800:	f7f5 fb50 	bl	8000ea4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	430a      	orrs	r2, r1
 800b818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81e:	f003 0304 	and.w	r3, r3, #4
 800b822:	2b00      	cmp	r3, #0
 800b824:	d018      	beq.n	800b858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d009      	beq.n	800b842 <UART_AdvFeatureConfig+0xbe>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b832:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b836:	d004      	beq.n	800b842 <UART_AdvFeatureConfig+0xbe>
 800b838:	f640 415c 	movw	r1, #3164	; 0xc5c
 800b83c:	4870      	ldr	r0, [pc, #448]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b83e:	f7f5 fb31 	bl	8000ea4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	430a      	orrs	r2, r1
 800b856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85c:	f003 0308 	and.w	r3, r3, #8
 800b860:	2b00      	cmp	r3, #0
 800b862:	d018      	beq.n	800b896 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d009      	beq.n	800b880 <UART_AdvFeatureConfig+0xfc>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b874:	d004      	beq.n	800b880 <UART_AdvFeatureConfig+0xfc>
 800b876:	f640 4163 	movw	r1, #3171	; 0xc63
 800b87a:	4861      	ldr	r0, [pc, #388]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b87c:	f7f5 fb12 	bl	8000ea4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	430a      	orrs	r2, r1
 800b894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89a:	f003 0310 	and.w	r3, r3, #16
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d018      	beq.n	800b8d4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d009      	beq.n	800b8be <UART_AdvFeatureConfig+0x13a>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b2:	d004      	beq.n	800b8be <UART_AdvFeatureConfig+0x13a>
 800b8b4:	f640 416a 	movw	r1, #3178	; 0xc6a
 800b8b8:	4851      	ldr	r0, [pc, #324]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b8ba:	f7f5 faf3 	bl	8000ea4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d8:	f003 0320 	and.w	r3, r3, #32
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d018      	beq.n	800b912 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d009      	beq.n	800b8fc <UART_AdvFeatureConfig+0x178>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8f0:	d004      	beq.n	800b8fc <UART_AdvFeatureConfig+0x178>
 800b8f2:	f640 4171 	movw	r1, #3185	; 0xc71
 800b8f6:	4842      	ldr	r0, [pc, #264]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b8f8:	f7f5 fad4 	bl	8000ea4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 8082 	beq.w	800ba24 <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a37      	ldr	r2, [pc, #220]	; (800ba04 <UART_AdvFeatureConfig+0x280>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d027      	beq.n	800b97a <UART_AdvFeatureConfig+0x1f6>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a36      	ldr	r2, [pc, #216]	; (800ba08 <UART_AdvFeatureConfig+0x284>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d022      	beq.n	800b97a <UART_AdvFeatureConfig+0x1f6>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a34      	ldr	r2, [pc, #208]	; (800ba0c <UART_AdvFeatureConfig+0x288>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d01d      	beq.n	800b97a <UART_AdvFeatureConfig+0x1f6>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a33      	ldr	r2, [pc, #204]	; (800ba10 <UART_AdvFeatureConfig+0x28c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d018      	beq.n	800b97a <UART_AdvFeatureConfig+0x1f6>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a31      	ldr	r2, [pc, #196]	; (800ba14 <UART_AdvFeatureConfig+0x290>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d013      	beq.n	800b97a <UART_AdvFeatureConfig+0x1f6>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a30      	ldr	r2, [pc, #192]	; (800ba18 <UART_AdvFeatureConfig+0x294>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d00e      	beq.n	800b97a <UART_AdvFeatureConfig+0x1f6>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a2e      	ldr	r2, [pc, #184]	; (800ba1c <UART_AdvFeatureConfig+0x298>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d009      	beq.n	800b97a <UART_AdvFeatureConfig+0x1f6>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a2d      	ldr	r2, [pc, #180]	; (800ba20 <UART_AdvFeatureConfig+0x29c>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d004      	beq.n	800b97a <UART_AdvFeatureConfig+0x1f6>
 800b970:	f640 4178 	movw	r1, #3192	; 0xc78
 800b974:	4822      	ldr	r0, [pc, #136]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b976:	f7f5 fa95 	bl	8000ea4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d009      	beq.n	800b996 <UART_AdvFeatureConfig+0x212>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b98a:	d004      	beq.n	800b996 <UART_AdvFeatureConfig+0x212>
 800b98c:	f640 4179 	movw	r1, #3193	; 0xc79
 800b990:	481b      	ldr	r0, [pc, #108]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b992:	f7f5 fa87 	bl	8000ea4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b4:	d136      	bne.n	800ba24 <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d013      	beq.n	800b9e6 <UART_AdvFeatureConfig+0x262>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9c6:	d00e      	beq.n	800b9e6 <UART_AdvFeatureConfig+0x262>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9d0:	d009      	beq.n	800b9e6 <UART_AdvFeatureConfig+0x262>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b9da:	d004      	beq.n	800b9e6 <UART_AdvFeatureConfig+0x262>
 800b9dc:	f640 417e 	movw	r1, #3198	; 0xc7e
 800b9e0:	4807      	ldr	r0, [pc, #28]	; (800ba00 <UART_AdvFeatureConfig+0x27c>)
 800b9e2:	f7f5 fa5f 	bl	8000ea4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	605a      	str	r2, [r3, #4]
 800b9fc:	e012      	b.n	800ba24 <UART_AdvFeatureConfig+0x2a0>
 800b9fe:	bf00      	nop
 800ba00:	08010cbc 	.word	0x08010cbc
 800ba04:	40011000 	.word	0x40011000
 800ba08:	40004400 	.word	0x40004400
 800ba0c:	40004800 	.word	0x40004800
 800ba10:	40004c00 	.word	0x40004c00
 800ba14:	40005000 	.word	0x40005000
 800ba18:	40011400 	.word	0x40011400
 800ba1c:	40007800 	.word	0x40007800
 800ba20:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d018      	beq.n	800ba62 <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d009      	beq.n	800ba4c <UART_AdvFeatureConfig+0x2c8>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba40:	d004      	beq.n	800ba4c <UART_AdvFeatureConfig+0x2c8>
 800ba42:	f640 4186 	movw	r1, #3206	; 0xc86
 800ba46:	4809      	ldr	r0, [pc, #36]	; (800ba6c <UART_AdvFeatureConfig+0x2e8>)
 800ba48:	f7f5 fa2c 	bl	8000ea4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	605a      	str	r2, [r3, #4]
  }
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	08010cbc 	.word	0x08010cbc

0800ba70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af02      	add	r7, sp, #8
 800ba76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ba80:	f7f5 fe94 	bl	80017ac <HAL_GetTick>
 800ba84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0308 	and.w	r3, r3, #8
 800ba90:	2b08      	cmp	r3, #8
 800ba92:	d10e      	bne.n	800bab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f82c 	bl	800bb00 <UART_WaitOnFlagUntilTimeout>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	e022      	b.n	800baf8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0304 	and.w	r3, r3, #4
 800babc:	2b04      	cmp	r3, #4
 800babe:	d10e      	bne.n	800bade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2200      	movs	r2, #0
 800baca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f816 	bl	800bb00 <UART_WaitOnFlagUntilTimeout>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e00c      	b.n	800baf8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2220      	movs	r2, #32
 800bae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	603b      	str	r3, [r7, #0]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb10:	e062      	b.n	800bbd8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb18:	d05e      	beq.n	800bbd8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb1a:	f7f5 fe47 	bl	80017ac <HAL_GetTick>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	69ba      	ldr	r2, [r7, #24]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d302      	bcc.n	800bb30 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d11d      	bne.n	800bb6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb3e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f022 0201 	bic.w	r2, r2, #1
 800bb4e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2220      	movs	r2, #32
 800bb54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e045      	b.n	800bbf8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f003 0304 	and.w	r3, r3, #4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d02e      	beq.n	800bbd8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb88:	d126      	bne.n	800bbd8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb92:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bba2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	689a      	ldr	r2, [r3, #8]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f022 0201 	bic.w	r2, r2, #1
 800bbb2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2220      	movs	r2, #32
 800bbc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e00f      	b.n	800bbf8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	69da      	ldr	r2, [r3, #28]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	bf0c      	ite	eq
 800bbe8:	2301      	moveq	r3, #1
 800bbea:	2300      	movne	r3, #0
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	461a      	mov	r2, r3
 800bbf0:	79fb      	ldrb	r3, [r7, #7]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d08d      	beq.n	800bb12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a2e      	ldr	r2, [pc, #184]	; (800bcc8 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d027      	beq.n	800bc62 <HAL_UARTEx_DisableFifoMode+0x62>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a2d      	ldr	r2, [pc, #180]	; (800bccc <HAL_UARTEx_DisableFifoMode+0xcc>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d022      	beq.n	800bc62 <HAL_UARTEx_DisableFifoMode+0x62>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a2b      	ldr	r2, [pc, #172]	; (800bcd0 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d01d      	beq.n	800bc62 <HAL_UARTEx_DisableFifoMode+0x62>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a2a      	ldr	r2, [pc, #168]	; (800bcd4 <HAL_UARTEx_DisableFifoMode+0xd4>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d018      	beq.n	800bc62 <HAL_UARTEx_DisableFifoMode+0x62>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a28      	ldr	r2, [pc, #160]	; (800bcd8 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d013      	beq.n	800bc62 <HAL_UARTEx_DisableFifoMode+0x62>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a27      	ldr	r2, [pc, #156]	; (800bcdc <HAL_UARTEx_DisableFifoMode+0xdc>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d00e      	beq.n	800bc62 <HAL_UARTEx_DisableFifoMode+0x62>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a25      	ldr	r2, [pc, #148]	; (800bce0 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d009      	beq.n	800bc62 <HAL_UARTEx_DisableFifoMode+0x62>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a24      	ldr	r2, [pc, #144]	; (800bce4 <HAL_UARTEx_DisableFifoMode+0xe4>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d004      	beq.n	800bc62 <HAL_UARTEx_DisableFifoMode+0x62>
 800bc58:	f240 2111 	movw	r1, #529	; 0x211
 800bc5c:	4822      	ldr	r0, [pc, #136]	; (800bce8 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800bc5e:	f7f5 f921 	bl	8000ea4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d101      	bne.n	800bc70 <HAL_UARTEx_DisableFifoMode+0x70>
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	e027      	b.n	800bcc0 <HAL_UARTEx_DisableFifoMode+0xc0>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2224      	movs	r2, #36	; 0x24
 800bc7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f022 0201 	bic.w	r2, r2, #1
 800bc96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	40011000 	.word	0x40011000
 800bccc:	40004400 	.word	0x40004400
 800bcd0:	40004800 	.word	0x40004800
 800bcd4:	40004c00 	.word	0x40004c00
 800bcd8:	40005000 	.word	0x40005000
 800bcdc:	40011400 	.word	0x40011400
 800bce0:	40007800 	.word	0x40007800
 800bce4:	40007c00 	.word	0x40007c00
 800bce8:	08010cf8 	.word	0x08010cf8

0800bcec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a40      	ldr	r2, [pc, #256]	; (800bdfc <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d027      	beq.n	800bd50 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a3e      	ldr	r2, [pc, #248]	; (800be00 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d022      	beq.n	800bd50 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a3d      	ldr	r2, [pc, #244]	; (800be04 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d01d      	beq.n	800bd50 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a3b      	ldr	r2, [pc, #236]	; (800be08 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d018      	beq.n	800bd50 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a3a      	ldr	r2, [pc, #232]	; (800be0c <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d013      	beq.n	800bd50 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a38      	ldr	r2, [pc, #224]	; (800be10 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00e      	beq.n	800bd50 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a37      	ldr	r2, [pc, #220]	; (800be14 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d009      	beq.n	800bd50 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a35      	ldr	r2, [pc, #212]	; (800be18 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d004      	beq.n	800bd50 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bd46:	f240 213f 	movw	r1, #575	; 0x23f
 800bd4a:	4834      	ldr	r0, [pc, #208]	; (800be1c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800bd4c:	f7f5 f8aa 	bl	8000ea4 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d018      	beq.n	800bd88 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd5c:	d014      	beq.n	800bd88 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd64:	d010      	beq.n	800bd88 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bd6c:	d00c      	beq.n	800bd88 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd74:	d008      	beq.n	800bd88 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800bd7c:	d004      	beq.n	800bd88 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bd7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd82:	4826      	ldr	r0, [pc, #152]	; (800be1c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800bd84:	f7f5 f88e 	bl	8000ea4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d101      	bne.n	800bd96 <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800bd92:	2302      	movs	r3, #2
 800bd94:	e02d      	b.n	800bdf2 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2224      	movs	r2, #36	; 0x24
 800bda2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f022 0201 	bic.w	r2, r2, #1
 800bdbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	430a      	orrs	r2, r1
 800bdd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f8be 	bl	800bf54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2220      	movs	r2, #32
 800bde4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40011000 	.word	0x40011000
 800be00:	40004400 	.word	0x40004400
 800be04:	40004800 	.word	0x40004800
 800be08:	40004c00 	.word	0x40004c00
 800be0c:	40005000 	.word	0x40005000
 800be10:	40011400 	.word	0x40011400
 800be14:	40007800 	.word	0x40007800
 800be18:	40007c00 	.word	0x40007c00
 800be1c:	08010cf8 	.word	0x08010cf8

0800be20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a40      	ldr	r2, [pc, #256]	; (800bf30 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d027      	beq.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a3e      	ldr	r2, [pc, #248]	; (800bf34 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d022      	beq.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a3d      	ldr	r2, [pc, #244]	; (800bf38 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d01d      	beq.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a3b      	ldr	r2, [pc, #236]	; (800bf3c <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d018      	beq.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a3a      	ldr	r2, [pc, #232]	; (800bf40 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d013      	beq.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a38      	ldr	r2, [pc, #224]	; (800bf44 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d00e      	beq.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a37      	ldr	r2, [pc, #220]	; (800bf48 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d009      	beq.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a35      	ldr	r2, [pc, #212]	; (800bf4c <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d004      	beq.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800be7a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800be7e:	4834      	ldr	r0, [pc, #208]	; (800bf50 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800be80:	f7f5 f810 	bl	8000ea4 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d018      	beq.n	800bebc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be90:	d014      	beq.n	800bebc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be98:	d010      	beq.n	800bebc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800bea0:	d00c      	beq.n	800bebc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bea8:	d008      	beq.n	800bebc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800beb0:	d004      	beq.n	800bebc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800beb2:	f240 2171 	movw	r1, #625	; 0x271
 800beb6:	4826      	ldr	r0, [pc, #152]	; (800bf50 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800beb8:	f7f4 fff4 	bl	8000ea4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d101      	bne.n	800beca <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800bec6:	2302      	movs	r3, #2
 800bec8:	e02d      	b.n	800bf26 <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2224      	movs	r2, #36	; 0x24
 800bed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f022 0201 	bic.w	r2, r2, #1
 800bef0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	683a      	ldr	r2, [r7, #0]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f824 	bl	800bf54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2220      	movs	r2, #32
 800bf18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	40011000 	.word	0x40011000
 800bf34:	40004400 	.word	0x40004400
 800bf38:	40004800 	.word	0x40004800
 800bf3c:	40004c00 	.word	0x40004c00
 800bf40:	40005000 	.word	0x40005000
 800bf44:	40011400 	.word	0x40011400
 800bf48:	40007800 	.word	0x40007800
 800bf4c:	40007c00 	.word	0x40007c00
 800bf50:	08010cf8 	.word	0x08010cf8

0800bf54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b089      	sub	sp, #36	; 0x24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bf5c:	4a2f      	ldr	r2, [pc, #188]	; (800c01c <UARTEx_SetNbDataToProcess+0xc8>)
 800bf5e:	f107 0314 	add.w	r3, r7, #20
 800bf62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf66:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bf6a:	4a2d      	ldr	r2, [pc, #180]	; (800c020 <UARTEx_SetNbDataToProcess+0xcc>)
 800bf6c:	f107 030c 	add.w	r3, r7, #12
 800bf70:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf74:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d108      	bne.n	800bf92 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf90:	e03d      	b.n	800c00e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf92:	2308      	movs	r3, #8
 800bf94:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf96:	2308      	movs	r3, #8
 800bf98:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	0e5b      	lsrs	r3, r3, #25
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	f003 0307 	and.w	r3, r3, #7
 800bfa8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	0f5b      	lsrs	r3, r3, #29
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bfba:	7fbb      	ldrb	r3, [r7, #30]
 800bfbc:	7f3a      	ldrb	r2, [r7, #28]
 800bfbe:	f107 0120 	add.w	r1, r7, #32
 800bfc2:	440a      	add	r2, r1
 800bfc4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bfc8:	fb02 f303 	mul.w	r3, r2, r3
 800bfcc:	7f3a      	ldrb	r2, [r7, #28]
 800bfce:	f107 0120 	add.w	r1, r7, #32
 800bfd2:	440a      	add	r2, r1
 800bfd4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bfd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bfe4:	7ffb      	ldrb	r3, [r7, #31]
 800bfe6:	7f7a      	ldrb	r2, [r7, #29]
 800bfe8:	f107 0120 	add.w	r1, r7, #32
 800bfec:	440a      	add	r2, r1
 800bfee:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bff2:	fb02 f303 	mul.w	r3, r2, r3
 800bff6:	7f7a      	ldrb	r2, [r7, #29]
 800bff8:	f107 0120 	add.w	r1, r7, #32
 800bffc:	440a      	add	r2, r1
 800bffe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c002:	fb93 f3f2 	sdiv	r3, r3, r2
 800c006:	b29a      	uxth	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c00e:	bf00      	nop
 800c010:	3724      	adds	r7, #36	; 0x24
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	08010d34 	.word	0x08010d34
 800c020:	08010d3c 	.word	0x08010d3c

0800c024 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 800c02a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c02e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800c030:	2301      	movs	r3, #1
 800c032:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 800c034:	2300      	movs	r3, #0
 800c036:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c038:	2300      	movs	r3, #0
 800c03a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_PORT_RESET, &GPIO_InitStruct);
 800c040:	1d3b      	adds	r3, r7, #4
 800c042:	4619      	mov	r1, r3
 800c044:	480c      	ldr	r0, [pc, #48]	; (800c078 <init_chip_pins+0x54>)
 800c046:	f7f7 fe33 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 800c04a:	2320      	movs	r3, #32
 800c04c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(CONF_WINC_PORT_CHIP_ENABLE, &GPIO_InitStruct);
 800c04e:	1d3b      	adds	r3, r7, #4
 800c050:	4619      	mov	r1, r3
 800c052:	480a      	ldr	r0, [pc, #40]	; (800c07c <init_chip_pins+0x58>)
 800c054:	f7f7 fe2c 	bl	8003cb0 <HAL_GPIO_Init>

    
    /* Set INIT value */
// SO: seems irrelevant for my implementation   HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
// SO: seems irrelevant for my implementation   HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
    HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
 800c058:	2200      	movs	r2, #0
 800c05a:	2120      	movs	r1, #32
 800c05c:	4807      	ldr	r0, [pc, #28]	; (800c07c <init_chip_pins+0x58>)
 800c05e:	f7f8 f8d7 	bl	8004210 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 800c062:	2200      	movs	r2, #0
 800c064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c068:	4803      	ldr	r0, [pc, #12]	; (800c078 <init_chip_pins+0x54>)
 800c06a:	f7f8 f8d1 	bl	8004210 <HAL_GPIO_WritePin>

}
 800c06e:	bf00      	nop
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	58020c00 	.word	0x58020c00
 800c07c:	58020000 	.word	0x58020000

0800c080 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 800c084:	f7ff ffce 	bl	800c024 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800c088:	f000 f804 	bl	800c094 <nm_bsp_reset>

	return M2M_SUCCESS;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
//    HAL_Delay(100);

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
	HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800c098:	2201      	movs	r2, #1
 800c09a:	2120      	movs	r1, #32
 800c09c:	4808      	ldr	r0, [pc, #32]	; (800c0c0 <nm_bsp_reset+0x2c>)
 800c09e:	f7f8 f8b7 	bl	8004210 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c0a2:	2064      	movs	r0, #100	; 0x64
 800c0a4:	f7f5 fb8e 	bl	80017c4 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c0ae:	4805      	ldr	r0, [pc, #20]	; (800c0c4 <nm_bsp_reset+0x30>)
 800c0b0:	f7f8 f8ae 	bl	8004210 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c0b4:	2064      	movs	r0, #100	; 0x64
 800c0b6:	f7f5 fb85 	bl	80017c4 <HAL_Delay>

}
 800c0ba:	bf00      	nop
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	58020000 	.word	0x58020000
 800c0c4:	58020c00 	.word	0x58020c00

0800c0c8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7f5 fb77 	bl	80017c4 <HAL_Delay>
}
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
	...

0800c0e0 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b088      	sub	sp, #32
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

//     __GPIOC_CLK_ENABLE(); // --
    __GPIOD_CLK_ENABLE(); // ++
 800c0e8:	4b13      	ldr	r3, [pc, #76]	; (800c138 <nm_bsp_register_isr+0x58>)
 800c0ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0ee:	4a12      	ldr	r2, [pc, #72]	; (800c138 <nm_bsp_register_isr+0x58>)
 800c0f0:	f043 0308 	orr.w	r3, r3, #8
 800c0f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	; (800c138 <nm_bsp_register_isr+0x58>)
 800c0fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0fe:	f003 0308 	and.w	r3, r3, #8
 800c102:	60bb      	str	r3, [r7, #8]
 800c104:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 800c106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c10a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800c10c:	4b0b      	ldr	r3, [pc, #44]	; (800c13c <nm_bsp_register_isr+0x5c>)
 800c10e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800c110:	2300      	movs	r3, #0
 800c112:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_SPI_INT_PORT, &GPIO_InitStruct);
 800c114:	f107 030c 	add.w	r3, r7, #12
 800c118:	4619      	mov	r1, r3
 800c11a:	4809      	ldr	r0, [pc, #36]	; (800c140 <nm_bsp_register_isr+0x60>)
 800c11c:	f7f7 fdc8 	bl	8003cb0 <HAL_GPIO_Init>

    /* EXTI 12 (PD12) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 800c120:	2200      	movs	r2, #0
 800c122:	2100      	movs	r1, #0
 800c124:	2028      	movs	r0, #40	; 0x28
 800c126:	f7f5 fc8d 	bl	8001a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 800c12a:	2028      	movs	r0, #40	; 0x28
 800c12c:	f7f5 fcb4 	bl	8001a98 <HAL_NVIC_EnableIRQ>
//	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
//	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
//	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
//#endif

}
 800c130:	bf00      	nop
 800c132:	3720      	adds	r7, #32
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	58024400 	.word	0x58024400
 800c13c:	11210000 	.word	0x11210000
 800c140:	58020c00 	.word	0x58020c00

0800c144 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d108      	bne.n	800c166 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0); // TODO: see why here it's 0x01 while in the beginning it was 0x00
 800c154:	2200      	movs	r2, #0
 800c156:	2101      	movs	r1, #1
 800c158:	2028      	movs	r0, #40	; 0x28
 800c15a:	f7f5 fc73 	bl	8001a44 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800c15e:	2028      	movs	r0, #40	; 0x28
 800c160:	f7f5 fc9a 	bl	8001a98 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 800c164:	e002      	b.n	800c16c <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800c166:	2028      	movs	r0, #40	; 0x28
 800c168:	f7f5 fcae 	bl	8001ac8 <HAL_NVIC_DisableIRQ>
}
 800c16c:	bf00      	nop
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	71fb      	strb	r3, [r7, #7]
    if (select)
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d006      	beq.n	800c192 <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 800c184:	2200      	movs	r2, #0
 800c186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c18a:	4807      	ldr	r0, [pc, #28]	; (800c1a8 <spi_select_slave+0x34>)
 800c18c:	f7f8 f840 	bl	8004210 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 800c190:	e005      	b.n	800c19e <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800c192:	2201      	movs	r2, #1
 800c194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c198:	4803      	ldr	r0, [pc, #12]	; (800c1a8 <spi_select_slave+0x34>)
 800c19a:	f7f8 f839 	bl	8004210 <HAL_GPIO_WritePin>
}
 800c19e:	bf00      	nop
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	58020400 	.word	0x58020400

0800c1ac <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af02      	add	r7, sp, #8
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
   if(u16Sz > NM_BUS_DUMMY_BUFF_SIZE)
 800c1ba:	88fb      	ldrh	r3, [r7, #6]
 800c1bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c1c0:	d901      	bls.n	800c1c6 <spi_rw+0x1a>
   {
	   M2M_ERR("%s:size is too big. error (%d)\n",__FUNCTION__,status);
	   return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e03e      	b.n	800c244 <spi_rw+0x98>
   }
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	f7ff ffd4 	bl	800c174 <spi_select_slave>


    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10c      	bne.n	800c1ec <spi_rw+0x40>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,SPI_TIMEOUT_MSEC);
 800c1d2:	88fa      	ldrh	r2, [r7, #6]
 800c1d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	491b      	ldr	r1, [pc, #108]	; (800c24c <spi_rw+0xa0>)
 800c1e0:	481b      	ldr	r0, [pc, #108]	; (800c250 <spi_rw+0xa4>)
 800c1e2:	f7fc fbbf 	bl	8008964 <HAL_SPI_TransmitReceive>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	75fb      	strb	r3, [r7, #23]
 800c1ea:	e021      	b.n	800c230 <spi_rw+0x84>
    }
    else if(pu8Miso == NULL)
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d112      	bne.n	800c218 <spi_rw+0x6c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,SPI_TIMEOUT_MSEC);
 800c1f2:	88fa      	ldrh	r2, [r7, #6]
 800c1f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	4a13      	ldr	r2, [pc, #76]	; (800c24c <spi_rw+0xa0>)
 800c1fe:	68f9      	ldr	r1, [r7, #12]
 800c200:	4813      	ldr	r0, [pc, #76]	; (800c250 <spi_rw+0xa4>)
 800c202:	f7fc fbaf 	bl	8008964 <HAL_SPI_TransmitReceive>
 800c206:	4603      	mov	r3, r0
 800c208:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 800c20a:	88fb      	ldrh	r3, [r7, #6]
 800c20c:	461a      	mov	r2, r3
 800c20e:	2100      	movs	r1, #0
 800c210:	480e      	ldr	r0, [pc, #56]	; (800c24c <spi_rw+0xa0>)
 800c212:	f003 fb69 	bl	800f8e8 <memset>
 800c216:	e00b      	b.n	800c230 <spi_rw+0x84>
    }
    else
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,SPI_TIMEOUT_MSEC);
 800c218:	88fa      	ldrh	r2, [r7, #6]
 800c21a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	4613      	mov	r3, r2
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	68f9      	ldr	r1, [r7, #12]
 800c226:	480a      	ldr	r0, [pc, #40]	; (800c250 <spi_rw+0xa4>)
 800c228:	f7fc fb9c 	bl	8008964 <HAL_SPI_TransmitReceive>
 800c22c:	4603      	mov	r3, r0
 800c22e:	75fb      	strb	r3, [r7, #23]
    }

    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 800c230:	7dfb      	ldrb	r3, [r7, #23]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d002      	beq.n	800c23c <spi_rw+0x90>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
        return status;
 800c236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c23a:	e003      	b.n	800c244 <spi_rw+0x98>
    }

  	spi_select_slave(false);
 800c23c:	2000      	movs	r0, #0
 800c23e:	f7ff ff99 	bl	800c174 <spi_select_slave>

	return M2M_SUCCESS;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	2400065c 	.word	0x2400065c
 800c250:	240009b0 	.word	0x240009b0

0800c254 <nm_bus_wifi_spi_init>:
#endif
#endif //CONF_WINC_USE_SPI

void nm_bus_wifi_spi_init(SPI_HandleTypeDef *hspi)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* Peripheral clock enable */
    SPI_WIFI_CLK_ENABLE();
 800c25c:	4b1d      	ldr	r3, [pc, #116]	; (800c2d4 <nm_bus_wifi_spi_init+0x80>)
 800c25e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c262:	4a1c      	ldr	r2, [pc, #112]	; (800c2d4 <nm_bus_wifi_spi_init+0x80>)
 800c264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c268:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c26c:	4b19      	ldr	r3, [pc, #100]	; (800c2d4 <nm_bus_wifi_spi_init+0x80>)
 800c26e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c276:	60bb      	str	r3, [r7, #8]
 800c278:	68bb      	ldr	r3, [r7, #8]

    /* Configure GPIO pin : PA4 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = SPI_WIFI_CS_PIN;
 800c27a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c27e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800c280:	2301      	movs	r3, #1
 800c282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800c284:	2301      	movs	r3, #1
 800c286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c288:	2303      	movs	r3, #3
 800c28a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_CS_GPIO_PORT, &GPIO_InitStruct);
 800c290:	f107 030c 	add.w	r3, r7, #12
 800c294:	4619      	mov	r1, r3
 800c296:	4810      	ldr	r0, [pc, #64]	; (800c2d8 <nm_bus_wifi_spi_init+0x84>)
 800c298:	f7f7 fd0a 	bl	8003cb0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800c29c:	2201      	movs	r2, #1
 800c29e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c2a2:	480d      	ldr	r0, [pc, #52]	; (800c2d8 <nm_bus_wifi_spi_init+0x84>)
 800c2a4:	f7f7 ffb4 	bl	8004210 <HAL_GPIO_WritePin>
    /**SPIx GPIO Configuration
    PB13     ------> SPI_WIFI_SCK
    PB14     ------> SPI_WIFI_MISO
    PB15     ------> SPI_WIFI_MOSI
    */
    GPIO_InitStruct.Pin = SPI_WIFI_SCK_PIN|SPI_WIFI_MISO_PIN|SPI_WIFI_MOSI_PIN;
 800c2a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800c2ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = SPI2_WIFI_AF;
 800c2ba:	2305      	movs	r3, #5
 800c2bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800c2be:	f107 030c 	add.w	r3, r7, #12
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	4804      	ldr	r0, [pc, #16]	; (800c2d8 <nm_bus_wifi_spi_init+0x84>)
 800c2c6:	f7f7 fcf3 	bl	8003cb0 <HAL_GPIO_Init>

}
 800c2ca:	bf00      	nop
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	58024400 	.word	0x58024400
 800c2d8:	58020400 	.word	0x58020400

0800c2dc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 800c2e8:	4b21      	ldr	r3, [pc, #132]	; (800c370 <nm_bus_init+0x94>)
 800c2ea:	4a22      	ldr	r2, [pc, #136]	; (800c374 <nm_bus_init+0x98>)
 800c2ec:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800c2ee:	4b20      	ldr	r3, [pc, #128]	; (800c370 <nm_bus_init+0x94>)
 800c2f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800c2f4:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 800c2f6:	4b1e      	ldr	r3, [pc, #120]	; (800c370 <nm_bus_init+0x94>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 800c2fc:	4b1c      	ldr	r3, [pc, #112]	; (800c370 <nm_bus_init+0x94>)
 800c2fe:	2207      	movs	r2, #7
 800c300:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 800c302:	4b1b      	ldr	r3, [pc, #108]	; (800c370 <nm_bus_init+0x94>)
 800c304:	2200      	movs	r2, #0
 800c306:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 800c308:	4b19      	ldr	r3, [pc, #100]	; (800c370 <nm_bus_init+0x94>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 800c30e:	4b18      	ldr	r3, [pc, #96]	; (800c370 <nm_bus_init+0x94>)
 800c310:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c314:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c316:	4b16      	ldr	r3, [pc, #88]	; (800c370 <nm_bus_init+0x94>)
 800c318:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c31c:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 800c31e:	4b14      	ldr	r3, [pc, #80]	; (800c370 <nm_bus_init+0x94>)
 800c320:	2200      	movs	r2, #0
 800c322:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 800c324:	4b12      	ldr	r3, [pc, #72]	; (800c370 <nm_bus_init+0x94>)
 800c326:	2200      	movs	r2, #0
 800c328:	625a      	str	r2, [r3, #36]	; 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800c32a:	4b11      	ldr	r3, [pc, #68]	; (800c370 <nm_bus_init+0x94>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	629a      	str	r2, [r3, #40]	; 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 800c330:	4b0f      	ldr	r3, [pc, #60]	; (800c370 <nm_bus_init+0x94>)
 800c332:	220a      	movs	r2, #10
 800c334:	62da      	str	r2, [r3, #44]	; 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 800c336:	480e      	ldr	r0, [pc, #56]	; (800c370 <nm_bus_init+0x94>)
 800c338:	f7fc f876 	bl	8008428 <HAL_SPI_Init>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
	}

	//SO: remove SPI lines internal pull-ups
	m2m_periph_pullup_ctrl(M2M_PERIPH_PULLUP_DIS_SD_DAT2_SPI_RXD, 0);
 800c33c:	2100      	movs	r1, #0
 800c33e:	2080      	movs	r0, #128	; 0x80
 800c340:	f000 fddc 	bl	800cefc <m2m_periph_pullup_ctrl>
	m2m_periph_pullup_ctrl(M2M_PERIPH_PULLUP_DIS_SD_DAT1_SPI_SSN, 0);
 800c344:	2100      	movs	r1, #0
 800c346:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c34a:	f000 fdd7 	bl	800cefc <m2m_periph_pullup_ctrl>
	m2m_periph_pullup_ctrl(M2M_PERIPH_PULLUP_DIS_SD_CMD_SPI_SCK, 0);
 800c34e:	2100      	movs	r1, #0
 800c350:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c354:	f000 fdd2 	bl	800cefc <m2m_periph_pullup_ctrl>
	m2m_periph_pullup_ctrl(M2M_PERIPH_PULLUP_DIS_SD_DAT0_SPI_TXD, 0);
 800c358:	2100      	movs	r1, #0
 800c35a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c35e:	f000 fdcd 	bl	800cefc <m2m_periph_pullup_ctrl>

	return result;
 800c362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	240009b0 	.word	0x240009b0
 800c374:	40003800 	.word	0x40003800

0800c378 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	6039      	str	r1, [r7, #0]
 800c382:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
 800c388:	79fb      	ldrb	r3, [r7, #7]
 800c38a:	2b03      	cmp	r3, #3
 800c38c:	d10d      	bne.n	800c3aa <nm_bus_ioctl+0x32>
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	6859      	ldr	r1, [r3, #4]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	891b      	ldrh	r3, [r3, #8]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f7ff ff04 	bl	800c1ac <spi_rw>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c3a8:	e002      	b.n	800c3b0 <nm_bus_ioctl+0x38>
		default:
			s8Ret = -1;
 800c3aa:	23ff      	movs	r3, #255	; 0xff
 800c3ac:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("invalide ioclt cmd\n");
			break;
 800c3ae:	bf00      	nop
	}

	return s8Ret;
 800c3b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d010      	beq.n	800c400 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	781a      	ldrb	r2, [r3, #0]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	701a      	strb	r2, [r3, #0]
		pDst++;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	60fb      	str	r3, [r7, #12]
		pSrc++;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	60bb      	str	r3, [r7, #8]
	}while(--sz);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	607b      	str	r3, [r7, #4]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1ef      	bne.n	800c3de <m2m_memcpy+0x12>
 800c3fe:	e000      	b.n	800c402 <m2m_memcpy+0x36>
	if(sz == 0) return;
 800c400:	bf00      	nop
}
 800c402:	3714      	adds	r7, #20
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	460b      	mov	r3, r1
 800c416:	607a      	str	r2, [r7, #4]
 800c418:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00c      	beq.n	800c43a <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	7afa      	ldrb	r2, [r7, #11]
 800c424:	701a      	strb	r2, [r3, #0]
		pBuf++;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	3b01      	subs	r3, #1
 800c430:	607b      	str	r3, [r7, #4]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1f3      	bne.n	800c420 <m2m_memset+0x14>
 800c438:	e000      	b.n	800c43c <m2m_memset+0x30>
	if(sz == 0) return;
 800c43a:	bf00      	nop
}
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
 800c446:	b480      	push	{r7}
 800c448:	b085      	sub	sp, #20
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
 800c452:	e005      	b.n	800c460 <m2m_strlen+0x1a>
	{
		u16StrLen ++;
 800c454:	89fb      	ldrh	r3, [r7, #14]
 800c456:	3301      	adds	r3, #1
 800c458:	81fb      	strh	r3, [r7, #14]
		pcStr++;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3301      	adds	r3, #1
 800c45e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1f5      	bne.n	800c454 <m2m_strlen+0xe>
	}
	return u16StrLen;
 800c468:	89fb      	ldrh	r3, [r7, #14]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
	...

0800c478 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

void isr(void)
{
 800c478:	b480      	push	{r7}
 800c47a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 800c47c:	4b05      	ldr	r3, [pc, #20]	; (800c494 <isr+0x1c>)
 800c47e:	78db      	ldrb	r3, [r3, #3]
 800c480:	b2db      	uxtb	r3, r3
 800c482:	3301      	adds	r3, #1
 800c484:	b2da      	uxtb	r2, r3
 800c486:	4b03      	ldr	r3, [pc, #12]	; (800c494 <isr+0x1c>)
 800c488:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 800c48a:	bf00      	nop
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	24000a38 	.word	0x24000a38

0800c498 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 800c4a2:	4b14      	ldr	r3, [pc, #80]	; (800c4f4 <hif_set_rx_done+0x5c>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 800c4a8:	2001      	movs	r0, #1
 800c4aa:	f7ff fe4b 	bl	800c144 <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800c4ae:	463b      	mov	r3, r7
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	f241 0070 	movw	r0, #4208	; 0x1070
 800c4b6:	f001 fbd3 	bl	800dc60 <nm_read_reg_with_ret>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800c4be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10f      	bne.n	800c4e6 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	f043 0302 	orr.w	r3, r3, #2
 800c4cc:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	f241 0070 	movw	r0, #4208	; 0x1070
 800c4d6:	f001 fbd1 	bl	800dc7c <nm_write_reg>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800c4de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4e2:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 800c4e4:	e000      	b.n	800c4e8 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 800c4e6:	bf00      	nop
	return ret;
 800c4e8:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	24000a38 	.word	0x24000a38

0800c4f8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	603a      	str	r2, [r7, #0]
 800c502:	71fb      	strb	r3, [r7, #7]
 800c504:	460b      	mov	r3, r1
 800c506:	80bb      	strh	r3, [r7, #4]


}
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c51a:	2300      	movs	r3, #0
 800c51c:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800c51e:	4b14      	ldr	r3, [pc, #80]	; (800c570 <hif_chip_wake+0x5c>)
 800c520:	789b      	ldrb	r3, [r3, #2]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 800c528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c52c:	e01c      	b.n	800c568 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800c52e:	4b10      	ldr	r3, [pc, #64]	; (800c570 <hif_chip_wake+0x5c>)
 800c530:	785b      	ldrb	r3, [r3, #1]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10c      	bne.n	800c552 <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <hif_chip_wake+0x5c>)
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d007      	beq.n	800c552 <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 800c542:	f001 f99f 	bl	800d884 <chip_wake>
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c54a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d107      	bne.n	800c562 <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 800c552:	4b07      	ldr	r3, [pc, #28]	; (800c570 <hif_chip_wake+0x5c>)
 800c554:	785b      	ldrb	r3, [r3, #1]
 800c556:	b2db      	uxtb	r3, r3
 800c558:	3301      	adds	r3, #1
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	4b04      	ldr	r3, [pc, #16]	; (800c570 <hif_chip_wake+0x5c>)
 800c55e:	705a      	strb	r2, [r3, #1]
 800c560:	e000      	b.n	800c564 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 800c562:	bf00      	nop
ERR1:
	return ret;
 800c564:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	24000a38 	.word	0x24000a38

0800c574 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 800c574:	b480      	push	{r7}
 800c576:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 800c578:	4b08      	ldr	r3, [pc, #32]	; (800c59c <hif_chip_sleep_sc+0x28>)
 800c57a:	785b      	ldrb	r3, [r3, #1]
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d006      	beq.n	800c590 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 800c582:	4b06      	ldr	r3, [pc, #24]	; (800c59c <hif_chip_sleep_sc+0x28>)
 800c584:	785b      	ldrb	r3, [r3, #1]
 800c586:	b2db      	uxtb	r3, r3
 800c588:	3b01      	subs	r3, #1
 800c58a:	b2da      	uxtb	r2, r3
 800c58c:	4b03      	ldr	r3, [pc, #12]	; (800c59c <hif_chip_sleep_sc+0x28>)
 800c58e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	24000a38 	.word	0x24000a38

0800c5a0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 800c5aa:	4b12      	ldr	r3, [pc, #72]	; (800c5f4 <hif_chip_sleep+0x54>)
 800c5ac:	785b      	ldrb	r3, [r3, #1]
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 800c5b4:	4b0f      	ldr	r3, [pc, #60]	; (800c5f4 <hif_chip_sleep+0x54>)
 800c5b6:	785b      	ldrb	r3, [r3, #1]
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <hif_chip_sleep+0x54>)
 800c5c0:	705a      	strb	r2, [r3, #1]
	}

	if(gstrHifCxt.u8ChipSleep == 0)
 800c5c2:	4b0c      	ldr	r3, [pc, #48]	; (800c5f4 <hif_chip_sleep+0x54>)
 800c5c4:	785b      	ldrb	r3, [r3, #1]
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10c      	bne.n	800c5e6 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800c5cc:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <hif_chip_sleep+0x54>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d007      	beq.n	800c5e6 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 800c5d6:	f001 f8f1 	bl	800d7bc <chip_sleep>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c5de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	e000      	b.n	800c5e8 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 800c5e6:	bf00      	nop
	return ret;
 800c5e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	24000a38 	.word	0x24000a38

0800c5f8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 800c600:	2228      	movs	r2, #40	; 0x28
 800c602:	2100      	movs	r1, #0
 800c604:	4807      	ldr	r0, [pc, #28]	; (800c624 <hif_init+0x2c>)
 800c606:	f7ff ff01 	bl	800c40c <m2m_memset>
	nm_bsp_register_isr(isr);
 800c60a:	4807      	ldr	r0, [pc, #28]	; (800c628 <hif_init+0x30>)
 800c60c:	f7ff fd68 	bl	800c0e0 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 800c610:	4906      	ldr	r1, [pc, #24]	; (800c62c <hif_init+0x34>)
 800c612:	2003      	movs	r0, #3
 800c614:	f000 fc18 	bl	800ce48 <hif_register_cb>
	return M2M_SUCCESS;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	24000a38 	.word	0x24000a38
 800c628:	0800c479 	.word	0x0800c479
 800c62c:	0800c4f9 	.word	0x0800c4f9

0800c630 <hif_send>:
				Packet buffer size (including the HIF header).
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b088      	sub	sp, #32
 800c634:	af00      	add	r7, sp, #0
 800c636:	603a      	str	r2, [r7, #0]
 800c638:	461a      	mov	r2, r3
 800c63a:	4603      	mov	r3, r0
 800c63c:	71fb      	strb	r3, [r7, #7]
 800c63e:	460b      	mov	r3, r1
 800c640:	71bb      	strb	r3, [r7, #6]
 800c642:	4613      	mov	r3, r2
 800c644:	80bb      	strh	r3, [r7, #4]
    /* temp is 16 bit variable used to read a volatile memory location to
       pass to function/macro, which is not using volatile variable.
       it is done due to IAR warning.
    */
    uint16  temp;
	sint8	ret = M2M_ERR_SEND;
 800c646:	23ff      	movs	r3, #255	; 0xff
 800c648:	77fb      	strb	r3, [r7, #31]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 800c64a:	79bb      	ldrb	r3, [r7, #6]
 800c64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c650:	b2db      	uxtb	r3, r3
 800c652:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 800c658:	2308      	movs	r3, #8
 800c65a:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d009      	beq.n	800c676 <hif_send+0x46>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 800c662:	8b7b      	ldrh	r3, [r7, #26]
 800c664:	b29a      	uxth	r2, r3
 800c666:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800c668:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c66a:	440b      	add	r3, r1
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	4413      	add	r3, r2
 800c670:	b29b      	uxth	r3, r3
 800c672:	837b      	strh	r3, [r7, #26]
 800c674:	e005      	b.n	800c682 <hif_send+0x52>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 800c676:	8b7b      	ldrh	r3, [r7, #26]
 800c678:	b29a      	uxth	r2, r3
 800c67a:	88bb      	ldrh	r3, [r7, #4]
 800c67c:	4413      	add	r3, r2
 800c67e:	b29b      	uxth	r3, r3
 800c680:	837b      	strh	r3, [r7, #26]
	}
	ret = hif_chip_wake();
 800c682:	f7ff ff47 	bl	800c514 <hif_chip_wake>
 800c686:	4603      	mov	r3, r0
 800c688:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 800c68a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 80e9 	bne.w	800c866 <hif_send+0x236>
	{
		volatile uint32 reg, dma_addr = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 800c698:	2300      	movs	r3, #0
 800c69a:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	617b      	str	r3, [r7, #20]
        temp = (uint16)strHif.u16Length;
 800c6a0:	8b7b      	ldrh	r3, [r7, #26]
 800c6a2:	83bb      	strh	r3, [r7, #28]
		reg |= (uint32)u8Gid;
 800c6a4:	79fa      	ldrb	r2, [r7, #7]
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 800c6ac:	79bb      	ldrb	r3, [r7, #6]
 800c6ae:	021a      	lsls	r2, r3, #8
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)temp<<16);
 800c6b6:	8bbb      	ldrh	r3, [r7, #28]
 800c6b8:	041a      	lsls	r2, r3, #16
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	f241 008c 	movw	r0, #4236	; 0x108c
 800c6c8:	f001 fad8 	bl	800dc7c <nm_write_reg>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800c6d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f040 80da 	bne.w	800c88e <hif_send+0x25e>

		reg = 0UL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f043 0302 	orr.w	r3, r3, #2
 800c6e4:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f241 0078 	movw	r0, #4216	; 0x1078
 800c6ee:	f001 fac5 	bl	800dc7c <nm_write_reg>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800c6f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f040 80c9 	bne.w	800c892 <hif_send+0x262>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]

		for(cnt = 0; cnt < 1000; cnt ++)
 800c704:	2300      	movs	r3, #0
 800c706:	81fb      	strh	r3, [r7, #14]
 800c708:	e03b      	b.n	800c782 <hif_send+0x152>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 800c70a:	f107 0314 	add.w	r3, r7, #20
 800c70e:	4619      	mov	r1, r3
 800c710:	f241 0078 	movw	r0, #4216	; 0x1078
 800c714:	f001 faa4 	bl	800dc60 <nm_read_reg_with_ret>
 800c718:	4603      	mov	r3, r0
 800c71a:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 800c71c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d134      	bne.n	800c78e <hif_send+0x15e>
			/*
			 * If it takes too long to get a response, the slow down to
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 800c724:	89fb      	ldrh	r3, [r7, #14]
 800c726:	b29b      	uxth	r3, r3
 800c728:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c72c:	d310      	bcc.n	800c750 <hif_send+0x120>
				if(cnt < 501) {
 800c72e:	89fb      	ldrh	r3, [r7, #14]
 800c730:	b29b      	uxth	r3, r3
 800c732:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c736:	d808      	bhi.n	800c74a <hif_send+0x11a>
					M2M_INFO("Slowing down...\n");
 800c738:	485d      	ldr	r0, [pc, #372]	; (800c8b0 <hif_send+0x280>)
 800c73a:	f003 f8dd 	bl	800f8f8 <iprintf>
 800c73e:	485d      	ldr	r0, [pc, #372]	; (800c8b4 <hif_send+0x284>)
 800c740:	f003 f962 	bl	800fa08 <puts>
 800c744:	200d      	movs	r0, #13
 800c746:	f003 f8ef 	bl	800f928 <putchar>
				}
				nm_bsp_sleep(1);
 800c74a:	2001      	movs	r0, #1
 800c74c:	f7ff fcbc 	bl	800c0c8 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f003 0302 	and.w	r3, r3, #2
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10e      	bne.n	800c778 <hif_send+0x148>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 800c75a:	f107 0310 	add.w	r3, r7, #16
 800c75e:	4619      	mov	r1, r3
 800c760:	4855      	ldr	r0, [pc, #340]	; (800c8b8 <hif_send+0x288>)
 800c762:	f001 fa7d 	bl	800dc60 <nm_read_reg_with_ret>
 800c766:	4603      	mov	r3, r0
 800c768:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 800c76a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00f      	beq.n	800c792 <hif_send+0x162>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	613b      	str	r3, [r7, #16]
					goto ERR1;
 800c776:	e093      	b.n	800c8a0 <hif_send+0x270>
		for(cnt = 0; cnt < 1000; cnt ++)
 800c778:	89fb      	ldrh	r3, [r7, #14]
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	3301      	adds	r3, #1
 800c77e:	b29b      	uxth	r3, r3
 800c780:	81fb      	strh	r3, [r7, #14]
 800c782:	89fb      	ldrh	r3, [r7, #14]
 800c784:	b29b      	uxth	r3, r3
 800c786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c78a:	d3be      	bcc.n	800c70a <hif_send+0xda>
 800c78c:	e002      	b.n	800c794 <hif_send+0x164>
			if(ret != M2M_SUCCESS) break;
 800c78e:	bf00      	nop
 800c790:	e000      	b.n	800c794 <hif_send+0x164>
				}
				/*in case of success break */
                break;
 800c792:	bf00      	nop
			}
		}
        
		if (dma_addr != 0)
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d055      	beq.n	800c846 <hif_send+0x216>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 800c79e:	8b7b      	ldrh	r3, [r7, #26]
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	f107 0118 	add.w	r1, r7, #24
 800c7aa:	2208      	movs	r2, #8
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 fae1 	bl	800dd74 <nm_write_block>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800c7b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d16b      	bne.n	800c896 <hif_send+0x266>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	3308      	adds	r3, #8
 800c7c2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00f      	beq.n	800c7ea <hif_send+0x1ba>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	88ba      	ldrh	r2, [r7, #4]
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f001 facf 	bl	800dd74 <nm_write_block>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800c7da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d15b      	bne.n	800c89a <hif_send+0x26a>
				u32CurrAddr += u16CtrlBufSize;
 800c7e2:	88ba      	ldrh	r2, [r7, #4]
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 800c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d016      	beq.n	800c81e <hif_send+0x1ee>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 800c7f0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c7f2:	88bb      	ldrh	r3, [r7, #4]
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c804:	4618      	mov	r0, r3
 800c806:	f001 fab5 	bl	800dd74 <nm_write_block>
 800c80a:	4603      	mov	r3, r0
 800c80c:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800c80e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d143      	bne.n	800c89e <hif_send+0x26e>
				u32CurrAddr += u16DataSize;
 800c816:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	4413      	add	r3, r2
 800c81c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f043 0302 	orr.w	r3, r3, #2
 800c82a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	4619      	mov	r1, r3
 800c830:	f241 006c 	movw	r0, #4204	; 0x106c
 800c834:	f001 fa22 	bl	800dc7c <nm_write_reg>
 800c838:	4603      	mov	r3, r0
 800c83a:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800c83c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01d      	beq.n	800c880 <hif_send+0x250>
 800c844:	e02c      	b.n	800c8a0 <hif_send+0x270>
		}
		else
		{
			ret = hif_chip_sleep();
 800c846:	f7ff feab 	bl	800c5a0 <hif_chip_sleep>
 800c84a:	4603      	mov	r3, r0
 800c84c:	77fb      	strb	r3, [r7, #31]
			M2M_PRINT("Failed to alloc rx size %d\r\n",ret);
 800c84e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c852:	4619      	mov	r1, r3
 800c854:	4819      	ldr	r0, [pc, #100]	; (800c8bc <hif_send+0x28c>)
 800c856:	f003 f84f 	bl	800f8f8 <iprintf>
 800c85a:	200d      	movs	r0, #13
 800c85c:	f003 f864 	bl	800f928 <putchar>
			ret = M2M_ERR_MEM_ALLOC;
 800c860:	23fd      	movs	r3, #253	; 0xfd
 800c862:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 800c864:	e01e      	b.n	800c8a4 <hif_send+0x274>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
 800c866:	f240 12a3 	movw	r2, #419	; 0x1a3
 800c86a:	4915      	ldr	r1, [pc, #84]	; (800c8c0 <hif_send+0x290>)
 800c86c:	4815      	ldr	r0, [pc, #84]	; (800c8c4 <hif_send+0x294>)
 800c86e:	f003 f843 	bl	800f8f8 <iprintf>
 800c872:	4815      	ldr	r0, [pc, #84]	; (800c8c8 <hif_send+0x298>)
 800c874:	f003 f8c8 	bl	800fa08 <puts>
 800c878:	200d      	movs	r0, #13
 800c87a:	f003 f855 	bl	800f928 <putchar>
		goto ERR2;
 800c87e:	e011      	b.n	800c8a4 <hif_send+0x274>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 800c880:	f7ff fe8e 	bl	800c5a0 <hif_chip_sleep>
 800c884:	4603      	mov	r3, r0
 800c886:	77fb      	strb	r3, [r7, #31]
	return ret;
 800c888:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c88c:	e00c      	b.n	800c8a8 <hif_send+0x278>
		if(M2M_SUCCESS != ret) goto ERR1;
 800c88e:	bf00      	nop
 800c890:	e006      	b.n	800c8a0 <hif_send+0x270>
		if(M2M_SUCCESS != ret) goto ERR1;
 800c892:	bf00      	nop
 800c894:	e004      	b.n	800c8a0 <hif_send+0x270>
			if(M2M_SUCCESS != ret) goto ERR1;
 800c896:	bf00      	nop
 800c898:	e002      	b.n	800c8a0 <hif_send+0x270>
				if(M2M_SUCCESS != ret) goto ERR1;
 800c89a:	bf00      	nop
 800c89c:	e000      	b.n	800c8a0 <hif_send+0x270>
				if(M2M_SUCCESS != ret) goto ERR1;
 800c89e:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 800c8a0:	f7ff fe68 	bl	800c574 <hif_chip_sleep_sc>
ERR2:
	/*logical error*/
	return ret;
 800c8a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3720      	adds	r7, #32
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	08010d44 	.word	0x08010d44
 800c8b4:	08010d50 	.word	0x08010d50
 800c8b8:	00150400 	.word	0x00150400
 800c8bc:	08010d60 	.word	0x08010d60
 800c8c0:	08011350 	.word	0x08011350
 800c8c4:	08010d80 	.word	0x08010d80
 800c8c8:	08010d94 	.word	0x08010d94

0800c8cc <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af02      	add	r7, sp, #8
    uint16 temp;
	sint8 ret = M2M_SUCCESS;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	75fb      	strb	r3, [r7, #23]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 800c8d6:	f107 030c 	add.w	r3, r7, #12
 800c8da:	4619      	mov	r1, r3
 800c8dc:	f241 0070 	movw	r0, #4208	; 0x1070
 800c8e0:	f001 f9be 	bl	800dc60 <nm_read_reg_with_ret>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	75fb      	strb	r3, [r7, #23]
	if(M2M_SUCCESS == ret)
 800c8e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f040 81b8 	bne.w	800cc62 <hif_isr+0x396>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 81a1 	beq.w	800cc40 <hif_isr+0x374>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
 800c8fe:	2000      	movs	r0, #0
 800c900:	f7ff fc20 	bl	800c144 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f023 0301 	bic.w	r3, r3, #1
 800c90a:	60fb      	str	r3, [r7, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4619      	mov	r1, r3
 800c910:	f241 0070 	movw	r0, #4208	; 0x1070
 800c914:	f001 f9b2 	bl	800dc7c <nm_write_reg>
 800c918:	4603      	mov	r3, r0
 800c91a:	75fb      	strb	r3, [r7, #23]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c91c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f040 81ab 	bne.w	800cc7c <hif_isr+0x3b0>
			gstrHifCxt.u8HifRXDone = 1;
 800c926:	4ba3      	ldr	r3, [pc, #652]	; (800cbb4 <hif_isr+0x2e8>)
 800c928:	2201      	movs	r2, #1
 800c92a:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	089b      	lsrs	r3, r3, #2
 800c930:	b29b      	uxth	r3, r3
 800c932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c936:	82bb      	strh	r3, [r7, #20]
			if (size > 0) {
 800c938:	8abb      	ldrh	r3, [r7, #20]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f000 8171 	beq.w	800cc22 <hif_isr+0x356>
				uint32 address = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	607b      	str	r3, [r7, #4]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 800c944:	1d3b      	adds	r3, r7, #4
 800c946:	4619      	mov	r1, r3
 800c948:	f241 0084 	movw	r0, #4228	; 0x1084
 800c94c:	f001 f988 	bl	800dc60 <nm_read_reg_with_ret>
 800c950:	4603      	mov	r3, r0
 800c952:	75fb      	strb	r3, [r7, #23]
				if(M2M_SUCCESS != ret)
 800c954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00f      	beq.n	800c97c <hif_isr+0xb0>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
 800c95c:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c960:	4995      	ldr	r1, [pc, #596]	; (800cbb8 <hif_isr+0x2ec>)
 800c962:	4896      	ldr	r0, [pc, #600]	; (800cbbc <hif_isr+0x2f0>)
 800c964:	f002 ffc8 	bl	800f8f8 <iprintf>
 800c968:	4895      	ldr	r0, [pc, #596]	; (800cbc0 <hif_isr+0x2f4>)
 800c96a:	f003 f84d 	bl	800fa08 <puts>
 800c96e:	200d      	movs	r0, #13
 800c970:	f002 ffda 	bl	800f928 <putchar>
					nm_bsp_interrupt_ctrl(1);
 800c974:	2001      	movs	r0, #1
 800c976:	f7ff fbe5 	bl	800c144 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800c97a:	e180      	b.n	800cc7e <hif_isr+0x3b2>
				}
				gstrHifCxt.u32RxAddr = address;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4a8d      	ldr	r2, [pc, #564]	; (800cbb4 <hif_isr+0x2e8>)
 800c980:	6053      	str	r3, [r2, #4]
				gstrHifCxt.u32RxSize = size;
 800c982:	8abb      	ldrh	r3, [r7, #20]
 800c984:	4a8b      	ldr	r2, [pc, #556]	; (800cbb4 <hif_isr+0x2e8>)
 800c986:	6093      	str	r3, [r2, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f107 0108 	add.w	r1, r7, #8
 800c98e:	2204      	movs	r2, #4
 800c990:	4618      	mov	r0, r3
 800c992:	f001 f993 	bl	800dcbc <nm_read_block>
 800c996:	4603      	mov	r3, r0
 800c998:	75fb      	strb	r3, [r7, #23]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 800c99a:	897b      	ldrh	r3, [r7, #10]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	817b      	strh	r3, [r7, #10]
				if(M2M_SUCCESS != ret)
 800c9a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00f      	beq.n	800c9c8 <hif_isr+0xfc>
				{
					M2M_ERR("(hif) address bus fail\n");
 800c9a8:	f240 12df 	movw	r2, #479	; 0x1df
 800c9ac:	4982      	ldr	r1, [pc, #520]	; (800cbb8 <hif_isr+0x2ec>)
 800c9ae:	4883      	ldr	r0, [pc, #524]	; (800cbbc <hif_isr+0x2f0>)
 800c9b0:	f002 ffa2 	bl	800f8f8 <iprintf>
 800c9b4:	4883      	ldr	r0, [pc, #524]	; (800cbc4 <hif_isr+0x2f8>)
 800c9b6:	f003 f827 	bl	800fa08 <puts>
 800c9ba:	200d      	movs	r0, #13
 800c9bc:	f002 ffb4 	bl	800f928 <putchar>
					nm_bsp_interrupt_ctrl(1);
 800c9c0:	2001      	movs	r0, #1
 800c9c2:	f7ff fbbf 	bl	800c144 <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800c9c6:	e15a      	b.n	800cc7e <hif_isr+0x3b2>
				}
				if(strHif.u16Length != size)
 800c9c8:	897b      	ldrh	r3, [r7, #10]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	8aba      	ldrh	r2, [r7, #20]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d022      	beq.n	800ca18 <hif_isr+0x14c>
				{
					if((size - strHif.u16Length) > 4)
 800c9d2:	8abb      	ldrh	r3, [r7, #20]
 800c9d4:	897a      	ldrh	r2, [r7, #10]
 800c9d6:	b292      	uxth	r2, r2
 800c9d8:	1a9b      	subs	r3, r3, r2
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	dd1c      	ble.n	800ca18 <hif_isr+0x14c>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
 800c9de:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c9e2:	4975      	ldr	r1, [pc, #468]	; (800cbb8 <hif_isr+0x2ec>)
 800c9e4:	4875      	ldr	r0, [pc, #468]	; (800cbbc <hif_isr+0x2f0>)
 800c9e6:	f002 ff87 	bl	800f8f8 <iprintf>
 800c9ea:	8ab9      	ldrh	r1, [r7, #20]
 800c9ec:	897b      	ldrh	r3, [r7, #10]
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	7a3b      	ldrb	r3, [r7, #8]
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	7a7b      	ldrb	r3, [r7, #9]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	4603      	mov	r3, r0
 800ca00:	4871      	ldr	r0, [pc, #452]	; (800cbc8 <hif_isr+0x2fc>)
 800ca02:	f002 ff79 	bl	800f8f8 <iprintf>
 800ca06:	200d      	movs	r0, #13
 800ca08:	f002 ff8e 	bl	800f928 <putchar>
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
 800ca0c:	2001      	movs	r0, #1
 800ca0e:	f7ff fb99 	bl	800c144 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
 800ca12:	23fa      	movs	r3, #250	; 0xfa
 800ca14:	75fb      	strb	r3, [r7, #23]
						goto ERR1;
 800ca16:	e132      	b.n	800cc7e <hif_isr+0x3b2>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 800ca18:	7a3b      	ldrb	r3, [r7, #8]
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d11d      	bne.n	800ca5c <hif_isr+0x190>
				{
					if(gstrHifCxt.pfWifiCb)
 800ca20:	4b64      	ldr	r3, [pc, #400]	; (800cbb4 <hif_isr+0x2e8>)
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00c      	beq.n	800ca42 <hif_isr+0x176>
                    {
                        temp = (uint16)strHif.u16Length;
 800ca28:	897b      	ldrh	r3, [r7, #10]
 800ca2a:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800ca2c:	4b61      	ldr	r3, [pc, #388]	; (800cbb4 <hif_isr+0x2e8>)
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	7a7a      	ldrb	r2, [r7, #9]
 800ca32:	b2d0      	uxtb	r0, r2
 800ca34:	8a7a      	ldrh	r2, [r7, #18]
 800ca36:	3a08      	subs	r2, #8
 800ca38:	b291      	uxth	r1, r2
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	3208      	adds	r2, #8
 800ca3e:	4798      	blx	r3
 800ca40:	e0d0      	b.n	800cbe4 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("WIFI callback is not registered\n");
 800ca42:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ca46:	495c      	ldr	r1, [pc, #368]	; (800cbb8 <hif_isr+0x2ec>)
 800ca48:	485c      	ldr	r0, [pc, #368]	; (800cbbc <hif_isr+0x2f0>)
 800ca4a:	f002 ff55 	bl	800f8f8 <iprintf>
 800ca4e:	485f      	ldr	r0, [pc, #380]	; (800cbcc <hif_isr+0x300>)
 800ca50:	f002 ffda 	bl	800fa08 <puts>
 800ca54:	200d      	movs	r0, #13
 800ca56:	f002 ff67 	bl	800f928 <putchar>
 800ca5a:	e0c3      	b.n	800cbe4 <hif_isr+0x318>
					}

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 800ca5c:	7a3b      	ldrb	r3, [r7, #8]
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d11d      	bne.n	800caa0 <hif_isr+0x1d4>
				{
					if(gstrHifCxt.pfIpCb)
 800ca64:	4b53      	ldr	r3, [pc, #332]	; (800cbb4 <hif_isr+0x2e8>)
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00c      	beq.n	800ca86 <hif_isr+0x1ba>
					{
                        temp = (uint16)strHif.u16Length;
 800ca6c:	897b      	ldrh	r3, [r7, #10]
 800ca6e:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800ca70:	4b50      	ldr	r3, [pc, #320]	; (800cbb4 <hif_isr+0x2e8>)
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	7a7a      	ldrb	r2, [r7, #9]
 800ca76:	b2d0      	uxtb	r0, r2
 800ca78:	8a7a      	ldrh	r2, [r7, #18]
 800ca7a:	3a08      	subs	r2, #8
 800ca7c:	b291      	uxth	r1, r2
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	3208      	adds	r2, #8
 800ca82:	4798      	blx	r3
 800ca84:	e0ae      	b.n	800cbe4 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Scoket callback is not registered\n");
 800ca86:	f240 2205 	movw	r2, #517	; 0x205
 800ca8a:	494b      	ldr	r1, [pc, #300]	; (800cbb8 <hif_isr+0x2ec>)
 800ca8c:	484b      	ldr	r0, [pc, #300]	; (800cbbc <hif_isr+0x2f0>)
 800ca8e:	f002 ff33 	bl	800f8f8 <iprintf>
 800ca92:	484f      	ldr	r0, [pc, #316]	; (800cbd0 <hif_isr+0x304>)
 800ca94:	f002 ffb8 	bl	800fa08 <puts>
 800ca98:	200d      	movs	r0, #13
 800ca9a:	f002 ff45 	bl	800f928 <putchar>
 800ca9e:	e0a1      	b.n	800cbe4 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 800caa0:	7a3b      	ldrb	r3, [r7, #8]
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	d11d      	bne.n	800cae4 <hif_isr+0x218>
				{
					if(gstrHifCxt.pfOtaCb)
 800caa8:	4b42      	ldr	r3, [pc, #264]	; (800cbb4 <hif_isr+0x2e8>)
 800caaa:	695b      	ldr	r3, [r3, #20]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00c      	beq.n	800caca <hif_isr+0x1fe>
					{
                            temp = (uint16)strHif.u16Length;
 800cab0:	897b      	ldrh	r3, [r7, #10]
 800cab2:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800cab4:	4b3f      	ldr	r3, [pc, #252]	; (800cbb4 <hif_isr+0x2e8>)
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	7a7a      	ldrb	r2, [r7, #9]
 800caba:	b2d0      	uxtb	r0, r2
 800cabc:	8a7a      	ldrh	r2, [r7, #18]
 800cabe:	3a08      	subs	r2, #8
 800cac0:	b291      	uxth	r1, r2
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	3208      	adds	r2, #8
 800cac6:	4798      	blx	r3
 800cac8:	e08c      	b.n	800cbe4 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Ota callback is not registered\n");
 800caca:	f240 2211 	movw	r2, #529	; 0x211
 800cace:	493a      	ldr	r1, [pc, #232]	; (800cbb8 <hif_isr+0x2ec>)
 800cad0:	483a      	ldr	r0, [pc, #232]	; (800cbbc <hif_isr+0x2f0>)
 800cad2:	f002 ff11 	bl	800f8f8 <iprintf>
 800cad6:	483f      	ldr	r0, [pc, #252]	; (800cbd4 <hif_isr+0x308>)
 800cad8:	f002 ff96 	bl	800fa08 <puts>
 800cadc:	200d      	movs	r0, #13
 800cade:	f002 ff23 	bl	800f928 <putchar>
 800cae2:	e07f      	b.n	800cbe4 <hif_isr+0x318>
                    }
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 800cae4:	7a3b      	ldrb	r3, [r7, #8]
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b06      	cmp	r3, #6
 800caea:	d11d      	bne.n	800cb28 <hif_isr+0x25c>
				{
					if(gstrHifCxt.pfCryptoCb)
 800caec:	4b31      	ldr	r3, [pc, #196]	; (800cbb4 <hif_isr+0x2e8>)
 800caee:	6a1b      	ldr	r3, [r3, #32]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00c      	beq.n	800cb0e <hif_isr+0x242>
					{
                        temp = (uint16)strHif.u16Length;
 800caf4:	897b      	ldrh	r3, [r7, #10]
 800caf6:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800caf8:	4b2e      	ldr	r3, [pc, #184]	; (800cbb4 <hif_isr+0x2e8>)
 800cafa:	6a1b      	ldr	r3, [r3, #32]
 800cafc:	7a7a      	ldrb	r2, [r7, #9]
 800cafe:	b2d0      	uxtb	r0, r2
 800cb00:	8a7a      	ldrh	r2, [r7, #18]
 800cb02:	3a08      	subs	r2, #8
 800cb04:	b291      	uxth	r1, r2
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	3208      	adds	r2, #8
 800cb0a:	4798      	blx	r3
 800cb0c:	e06a      	b.n	800cbe4 <hif_isr+0x318>
                    }
					else
					{
						M2M_ERR("Crypto callback is not registered\n");
 800cb0e:	f240 221d 	movw	r2, #541	; 0x21d
 800cb12:	4929      	ldr	r1, [pc, #164]	; (800cbb8 <hif_isr+0x2ec>)
 800cb14:	4829      	ldr	r0, [pc, #164]	; (800cbbc <hif_isr+0x2f0>)
 800cb16:	f002 feef 	bl	800f8f8 <iprintf>
 800cb1a:	482f      	ldr	r0, [pc, #188]	; (800cbd8 <hif_isr+0x30c>)
 800cb1c:	f002 ff74 	bl	800fa08 <puts>
 800cb20:	200d      	movs	r0, #13
 800cb22:	f002 ff01 	bl	800f928 <putchar>
 800cb26:	e05d      	b.n	800cbe4 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 800cb28:	7a3b      	ldrb	r3, [r7, #8]
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b07      	cmp	r3, #7
 800cb2e:	d11d      	bne.n	800cb6c <hif_isr+0x2a0>
				{
					if(gstrHifCxt.pfSigmaCb)
 800cb30:	4b20      	ldr	r3, [pc, #128]	; (800cbb4 <hif_isr+0x2e8>)
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00c      	beq.n	800cb52 <hif_isr+0x286>
					{
                        temp = (uint16)strHif.u16Length;
 800cb38:	897b      	ldrh	r3, [r7, #10]
 800cb3a:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800cb3c:	4b1d      	ldr	r3, [pc, #116]	; (800cbb4 <hif_isr+0x2e8>)
 800cb3e:	699b      	ldr	r3, [r3, #24]
 800cb40:	7a7a      	ldrb	r2, [r7, #9]
 800cb42:	b2d0      	uxtb	r0, r2
 800cb44:	8a7a      	ldrh	r2, [r7, #18]
 800cb46:	3a08      	subs	r2, #8
 800cb48:	b291      	uxth	r1, r2
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	3208      	adds	r2, #8
 800cb4e:	4798      	blx	r3
 800cb50:	e048      	b.n	800cbe4 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Sigma callback is not registered\n");
 800cb52:	f240 2229 	movw	r2, #553	; 0x229
 800cb56:	4918      	ldr	r1, [pc, #96]	; (800cbb8 <hif_isr+0x2ec>)
 800cb58:	4818      	ldr	r0, [pc, #96]	; (800cbbc <hif_isr+0x2f0>)
 800cb5a:	f002 fecd 	bl	800f8f8 <iprintf>
 800cb5e:	481f      	ldr	r0, [pc, #124]	; (800cbdc <hif_isr+0x310>)
 800cb60:	f002 ff52 	bl	800fa08 <puts>
 800cb64:	200d      	movs	r0, #13
 800cb66:	f002 fedf 	bl	800f928 <putchar>
 800cb6a:	e03b      	b.n	800cbe4 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 800cb6c:	7a3b      	ldrb	r3, [r7, #8]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b05      	cmp	r3, #5
 800cb72:	d110      	bne.n	800cb96 <hif_isr+0x2ca>
				{
				    if(gstrHifCxt.pfSslCb)
 800cb74:	4b0f      	ldr	r3, [pc, #60]	; (800cbb4 <hif_isr+0x2e8>)
 800cb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d033      	beq.n	800cbe4 <hif_isr+0x318>
					{
					    temp = (uint16)strHif.u16Length;
 800cb7c:	897b      	ldrh	r3, [r7, #10]
 800cb7e:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800cb80:	4b0c      	ldr	r3, [pc, #48]	; (800cbb4 <hif_isr+0x2e8>)
 800cb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb84:	7a7a      	ldrb	r2, [r7, #9]
 800cb86:	b2d0      	uxtb	r0, r2
 800cb88:	8a7a      	ldrh	r2, [r7, #18]
 800cb8a:	3a08      	subs	r2, #8
 800cb8c:	b291      	uxth	r1, r2
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	3208      	adds	r2, #8
 800cb92:	4798      	blx	r3
 800cb94:	e026      	b.n	800cbe4 <hif_isr+0x318>
					}
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
 800cb96:	f240 2236 	movw	r2, #566	; 0x236
 800cb9a:	4907      	ldr	r1, [pc, #28]	; (800cbb8 <hif_isr+0x2ec>)
 800cb9c:	4807      	ldr	r0, [pc, #28]	; (800cbbc <hif_isr+0x2f0>)
 800cb9e:	f002 feab 	bl	800f8f8 <iprintf>
 800cba2:	480f      	ldr	r0, [pc, #60]	; (800cbe0 <hif_isr+0x314>)
 800cba4:	f002 ff30 	bl	800fa08 <puts>
 800cba8:	200d      	movs	r0, #13
 800cbaa:	f002 febd 	bl	800f928 <putchar>
					ret = M2M_ERR_BUS_FAIL;
 800cbae:	23fa      	movs	r3, #250	; 0xfa
 800cbb0:	75fb      	strb	r3, [r7, #23]
					goto ERR1;
 800cbb2:	e064      	b.n	800cc7e <hif_isr+0x3b2>
 800cbb4:	24000a38 	.word	0x24000a38
 800cbb8:	0801135c 	.word	0x0801135c
 800cbbc:	08010d80 	.word	0x08010d80
 800cbc0:	08010db0 	.word	0x08010db0
 800cbc4:	08010dd4 	.word	0x08010dd4
 800cbc8:	08010dec 	.word	0x08010dec
 800cbcc:	08010e2c 	.word	0x08010e2c
 800cbd0:	08010e4c 	.word	0x08010e4c
 800cbd4:	08010e70 	.word	0x08010e70
 800cbd8:	08010e90 	.word	0x08010e90
 800cbdc:	08010eb4 	.word	0x08010eb4
 800cbe0:	08010ed8 	.word	0x08010ed8
				}
				if(gstrHifCxt.u8HifRXDone)
 800cbe4:	4b29      	ldr	r3, [pc, #164]	; (800cc8c <hif_isr+0x3c0>)
 800cbe6:	789b      	ldrb	r3, [r3, #2]
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d047      	beq.n	800cc7e <hif_isr+0x3b2>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
 800cbee:	f44f 720f 	mov.w	r2, #572	; 0x23c
 800cbf2:	4927      	ldr	r1, [pc, #156]	; (800cc90 <hif_isr+0x3c4>)
 800cbf4:	4827      	ldr	r0, [pc, #156]	; (800cc94 <hif_isr+0x3c8>)
 800cbf6:	f002 fe7f 	bl	800f8f8 <iprintf>
 800cbfa:	7a3b      	ldrb	r3, [r7, #8]
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	4619      	mov	r1, r3
 800cc00:	7a7b      	ldrb	r3, [r7, #9]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	461a      	mov	r2, r3
 800cc06:	4824      	ldr	r0, [pc, #144]	; (800cc98 <hif_isr+0x3cc>)
 800cc08:	f002 fe76 	bl	800f8f8 <iprintf>
 800cc0c:	200d      	movs	r0, #13
 800cc0e:	f002 fe8b 	bl	800f928 <putchar>
					ret = hif_set_rx_done();
 800cc12:	f7ff fc41 	bl	800c498 <hif_set_rx_done>
 800cc16:	4603      	mov	r3, r0
 800cc18:	75fb      	strb	r3, [r7, #23]
					if(ret != M2M_SUCCESS) goto ERR1;
 800cc1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	e02d      	b.n	800cc7e <hif_isr+0x3b2>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
 800cc22:	f240 2243 	movw	r2, #579	; 0x243
 800cc26:	491a      	ldr	r1, [pc, #104]	; (800cc90 <hif_isr+0x3c4>)
 800cc28:	481a      	ldr	r0, [pc, #104]	; (800cc94 <hif_isr+0x3c8>)
 800cc2a:	f002 fe65 	bl	800f8f8 <iprintf>
 800cc2e:	481b      	ldr	r0, [pc, #108]	; (800cc9c <hif_isr+0x3d0>)
 800cc30:	f002 feea 	bl	800fa08 <puts>
 800cc34:	200d      	movs	r0, #13
 800cc36:	f002 fe77 	bl	800f928 <putchar>
				ret = M2M_ERR_RCV;
 800cc3a:	23fe      	movs	r3, #254	; 0xfe
 800cc3c:	75fb      	strb	r3, [r7, #23]
				goto ERR1;
 800cc3e:	e01e      	b.n	800cc7e <hif_isr+0x3b2>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
 800cc40:	f240 224b 	movw	r2, #587	; 0x24b
 800cc44:	4912      	ldr	r1, [pc, #72]	; (800cc90 <hif_isr+0x3c4>)
 800cc46:	4813      	ldr	r0, [pc, #76]	; (800cc94 <hif_isr+0x3c8>)
 800cc48:	f002 fe56 	bl	800f8f8 <iprintf>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4813      	ldr	r0, [pc, #76]	; (800cca0 <hif_isr+0x3d4>)
 800cc52:	f002 fe51 	bl	800f8f8 <iprintf>
 800cc56:	200d      	movs	r0, #13
 800cc58:	f002 fe66 	bl	800f928 <putchar>
			ret = M2M_ERR_FAIL;
 800cc5c:	23f4      	movs	r3, #244	; 0xf4
 800cc5e:	75fb      	strb	r3, [r7, #23]
			goto ERR1;
 800cc60:	e00d      	b.n	800cc7e <hif_isr+0x3b2>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
 800cc62:	f44f 7215 	mov.w	r2, #596	; 0x254
 800cc66:	490a      	ldr	r1, [pc, #40]	; (800cc90 <hif_isr+0x3c4>)
 800cc68:	480a      	ldr	r0, [pc, #40]	; (800cc94 <hif_isr+0x3c8>)
 800cc6a:	f002 fe45 	bl	800f8f8 <iprintf>
 800cc6e:	480d      	ldr	r0, [pc, #52]	; (800cca4 <hif_isr+0x3d8>)
 800cc70:	f002 feca 	bl	800fa08 <puts>
 800cc74:	200d      	movs	r0, #13
 800cc76:	f002 fe57 	bl	800f928 <putchar>
		goto ERR1;
 800cc7a:	e000      	b.n	800cc7e <hif_isr+0x3b2>
			if(ret != M2M_SUCCESS)goto ERR1;
 800cc7c:	bf00      	nop
	}

ERR1:
	return ret;
 800cc7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	24000a38 	.word	0x24000a38
 800cc90:	0801135c 	.word	0x0801135c
 800cc94:	08010d80 	.word	0x08010d80
 800cc98:	08010ef0 	.word	0x08010ef0
 800cc9c:	08010f1c 	.word	0x08010f1c
 800cca0:	08010f30 	.word	0x08010f30
 800cca4:	08010f4c 	.word	0x08010f4c

0800cca8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	71fb      	strb	r3, [r7, #7]
	while (gstrHifCxt.u8Interrupt) {
 800ccb2:	e01f      	b.n	800ccf4 <hif_handle_isr+0x4c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
 800ccb4:	4b15      	ldr	r3, [pc, #84]	; (800cd0c <hif_handle_isr+0x64>)
 800ccb6:	78db      	ldrb	r3, [r3, #3]
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <hif_handle_isr+0x64>)
 800ccc0:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
 800ccc2:	f7ff fe03 	bl	800c8cc <hif_isr>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 800ccca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d100      	bne.n	800ccd4 <hif_handle_isr+0x2c>
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
 800ccd2:	e00f      	b.n	800ccf4 <hif_handle_isr+0x4c>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
 800ccd4:	f240 2271 	movw	r2, #625	; 0x271
 800ccd8:	490d      	ldr	r1, [pc, #52]	; (800cd10 <hif_handle_isr+0x68>)
 800ccda:	480e      	ldr	r0, [pc, #56]	; (800cd14 <hif_handle_isr+0x6c>)
 800ccdc:	f002 fe0c 	bl	800f8f8 <iprintf>
 800cce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cce4:	4619      	mov	r1, r3
 800cce6:	480c      	ldr	r0, [pc, #48]	; (800cd18 <hif_handle_isr+0x70>)
 800cce8:	f002 fe06 	bl	800f8f8 <iprintf>
 800ccec:	200d      	movs	r0, #13
 800ccee:	f002 fe1b 	bl	800f928 <putchar>
			ret = hif_isr();
 800ccf2:	e7e6      	b.n	800ccc2 <hif_handle_isr+0x1a>
	while (gstrHifCxt.u8Interrupt) {
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <hif_handle_isr+0x64>)
 800ccf6:	78db      	ldrb	r3, [r3, #3]
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1da      	bne.n	800ccb4 <hif_handle_isr+0xc>
			}
		}
	}

	return ret;
 800ccfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	24000a38 	.word	0x24000a38
 800cd10:	08011364 	.word	0x08011364
 800cd14:	08010d80 	.word	0x08010d80
 800cd18:	08010f70 	.word	0x08010f70

0800cd1c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	4611      	mov	r1, r2
 800cd28:	461a      	mov	r2, r3
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	80fb      	strh	r3, [r7, #6]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 800cd32:	2300      	movs	r3, #0
 800cd34:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d005      	beq.n	800cd48 <hif_receive+0x2c>
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d002      	beq.n	800cd48 <hif_receive+0x2c>
 800cd42:	88fb      	ldrh	r3, [r7, #6]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d116      	bne.n	800cd76 <hif_receive+0x5a>
	{
		if(isDone)
 800cd48:	797b      	ldrb	r3, [r7, #5]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d004      	beq.n	800cd58 <hif_receive+0x3c>
		{
			/* set RX done */
			ret = hif_set_rx_done();
 800cd4e:	f7ff fba3 	bl	800c498 <hif_set_rx_done>
 800cd52:	4603      	mov	r3, r0
 800cd54:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800cd56:	e065      	b.n	800ce24 <hif_receive+0x108>
			ret = M2M_ERR_FAIL;
 800cd58:	23f4      	movs	r3, #244	; 0xf4
 800cd5a:	75fb      	strb	r3, [r7, #23]
			M2M_ERR(" hif_receive: Invalid argument\n");
 800cd5c:	f240 2292 	movw	r2, #658	; 0x292
 800cd60:	4933      	ldr	r1, [pc, #204]	; (800ce30 <hif_receive+0x114>)
 800cd62:	4834      	ldr	r0, [pc, #208]	; (800ce34 <hif_receive+0x118>)
 800cd64:	f002 fdc8 	bl	800f8f8 <iprintf>
 800cd68:	4833      	ldr	r0, [pc, #204]	; (800ce38 <hif_receive+0x11c>)
 800cd6a:	f002 fe4d 	bl	800fa08 <puts>
 800cd6e:	200d      	movs	r0, #13
 800cd70:	f002 fdda 	bl	800f928 <putchar>
		goto ERR1;
 800cd74:	e056      	b.n	800ce24 <hif_receive+0x108>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800cd76:	88fa      	ldrh	r2, [r7, #6]
 800cd78:	4b30      	ldr	r3, [pc, #192]	; (800ce3c <hif_receive+0x120>)
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d912      	bls.n	800cda6 <hif_receive+0x8a>
	{
		ret = M2M_ERR_FAIL;
 800cd80:	23f4      	movs	r3, #244	; 0xf4
 800cd82:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
 800cd84:	f240 229a 	movw	r2, #666	; 0x29a
 800cd88:	4929      	ldr	r1, [pc, #164]	; (800ce30 <hif_receive+0x114>)
 800cd8a:	482a      	ldr	r0, [pc, #168]	; (800ce34 <hif_receive+0x118>)
 800cd8c:	f002 fdb4 	bl	800f8f8 <iprintf>
 800cd90:	88f9      	ldrh	r1, [r7, #6]
 800cd92:	4b2a      	ldr	r3, [pc, #168]	; (800ce3c <hif_receive+0x120>)
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	461a      	mov	r2, r3
 800cd98:	4829      	ldr	r0, [pc, #164]	; (800ce40 <hif_receive+0x124>)
 800cd9a:	f002 fdad 	bl	800f8f8 <iprintf>
 800cd9e:	200d      	movs	r0, #13
 800cda0:	f002 fdc2 	bl	800f928 <putchar>
		goto ERR1;
 800cda4:	e03e      	b.n	800ce24 <hif_receive+0x108>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 800cda6:	4b25      	ldr	r3, [pc, #148]	; (800ce3c <hif_receive+0x120>)
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d309      	bcc.n	800cdc4 <hif_receive+0xa8>
 800cdb0:	88fa      	ldrh	r2, [r7, #6]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	441a      	add	r2, r3
 800cdb6:	4b21      	ldr	r3, [pc, #132]	; (800ce3c <hif_receive+0x120>)
 800cdb8:	6859      	ldr	r1, [r3, #4]
 800cdba:	4b20      	ldr	r3, [pc, #128]	; (800ce3c <hif_receive+0x120>)
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	440b      	add	r3, r1
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d90e      	bls.n	800cde2 <hif_receive+0xc6>
	{
		ret = M2M_ERR_FAIL;
 800cdc4:	23f4      	movs	r3, #244	; 0xf4
 800cdc6:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
 800cdc8:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800cdcc:	4918      	ldr	r1, [pc, #96]	; (800ce30 <hif_receive+0x114>)
 800cdce:	4819      	ldr	r0, [pc, #100]	; (800ce34 <hif_receive+0x118>)
 800cdd0:	f002 fd92 	bl	800f8f8 <iprintf>
 800cdd4:	481b      	ldr	r0, [pc, #108]	; (800ce44 <hif_receive+0x128>)
 800cdd6:	f002 fe17 	bl	800fa08 <puts>
 800cdda:	200d      	movs	r0, #13
 800cddc:	f002 fda4 	bl	800f928 <putchar>
		goto ERR1;
 800cde0:	e020      	b.n	800ce24 <hif_receive+0x108>
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800cde2:	88fb      	ldrh	r3, [r7, #6]
 800cde4:	461a      	mov	r2, r3
 800cde6:	68b9      	ldr	r1, [r7, #8]
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 ff67 	bl	800dcbc <nm_read_block>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800cdf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d111      	bne.n	800ce1e <hif_receive+0x102>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800cdfa:	4b10      	ldr	r3, [pc, #64]	; (800ce3c <hif_receive+0x120>)
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	4b0f      	ldr	r3, [pc, #60]	; (800ce3c <hif_receive+0x120>)
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	441a      	add	r2, r3
 800ce04:	88f9      	ldrh	r1, [r7, #6]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	440b      	add	r3, r1
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d002      	beq.n	800ce14 <hif_receive+0xf8>
 800ce0e:	797b      	ldrb	r3, [r7, #5]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d006      	beq.n	800ce22 <hif_receive+0x106>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800ce14:	f7ff fb40 	bl	800c498 <hif_set_rx_done>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	75fb      	strb	r3, [r7, #23]
 800ce1c:	e002      	b.n	800ce24 <hif_receive+0x108>
	if(ret != M2M_SUCCESS)goto ERR1;
 800ce1e:	bf00      	nop
 800ce20:	e000      	b.n	800ce24 <hif_receive+0x108>
	}

ERR1:
 800ce22:	bf00      	nop
	return ret;
 800ce24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	08011374 	.word	0x08011374
 800ce34:	08010d80 	.word	0x08010d80
 800ce38:	08010fa0 	.word	0x08010fa0
 800ce3c:	24000a38 	.word	0x24000a38
 800ce40:	08010fc0 	.word	0x08010fc0
 800ce44:	08011008 	.word	0x08011008

0800ce48 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	2b06      	cmp	r3, #6
 800ce5e:	d82d      	bhi.n	800cebc <hif_register_cb+0x74>
 800ce60:	a201      	add	r2, pc, #4	; (adr r2, 800ce68 <hif_register_cb+0x20>)
 800ce62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce66:	bf00      	nop
 800ce68:	0800ce8d 	.word	0x0800ce8d
 800ce6c:	0800ce85 	.word	0x0800ce85
 800ce70:	0800ce9d 	.word	0x0800ce9d
 800ce74:	0800ce95 	.word	0x0800ce95
 800ce78:	0800ceb5 	.word	0x0800ceb5
 800ce7c:	0800cea5 	.word	0x0800cea5
 800ce80:	0800cead 	.word	0x0800cead
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800ce84:	4a19      	ldr	r2, [pc, #100]	; (800ceec <hif_register_cb+0xa4>)
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	6113      	str	r3, [r2, #16]
			break;
 800ce8a:	e028      	b.n	800cede <hif_register_cb+0x96>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800ce8c:	4a17      	ldr	r2, [pc, #92]	; (800ceec <hif_register_cb+0xa4>)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	60d3      	str	r3, [r2, #12]
			break;
 800ce92:	e024      	b.n	800cede <hif_register_cb+0x96>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800ce94:	4a15      	ldr	r2, [pc, #84]	; (800ceec <hif_register_cb+0xa4>)
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	6153      	str	r3, [r2, #20]
			break;
 800ce9a:	e020      	b.n	800cede <hif_register_cb+0x96>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800ce9c:	4a13      	ldr	r2, [pc, #76]	; (800ceec <hif_register_cb+0xa4>)
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	61d3      	str	r3, [r2, #28]
			break;
 800cea2:	e01c      	b.n	800cede <hif_register_cb+0x96>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800cea4:	4a11      	ldr	r2, [pc, #68]	; (800ceec <hif_register_cb+0xa4>)
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	6213      	str	r3, [r2, #32]
			break;
 800ceaa:	e018      	b.n	800cede <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800ceac:	4a0f      	ldr	r2, [pc, #60]	; (800ceec <hif_register_cb+0xa4>)
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	6193      	str	r3, [r2, #24]
			break;
 800ceb2:	e014      	b.n	800cede <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800ceb4:	4a0d      	ldr	r2, [pc, #52]	; (800ceec <hif_register_cb+0xa4>)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 800ceba:	e010      	b.n	800cede <hif_register_cb+0x96>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
 800cebc:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800cec0:	490b      	ldr	r1, [pc, #44]	; (800cef0 <hif_register_cb+0xa8>)
 800cec2:	480c      	ldr	r0, [pc, #48]	; (800cef4 <hif_register_cb+0xac>)
 800cec4:	f002 fd18 	bl	800f8f8 <iprintf>
 800cec8:	79fb      	ldrb	r3, [r7, #7]
 800ceca:	4619      	mov	r1, r3
 800cecc:	480a      	ldr	r0, [pc, #40]	; (800cef8 <hif_register_cb+0xb0>)
 800cece:	f002 fd13 	bl	800f8f8 <iprintf>
 800ced2:	200d      	movs	r0, #13
 800ced4:	f002 fd28 	bl	800f928 <putchar>
			ret = M2M_ERR_FAIL;
 800ced8:	23f4      	movs	r3, #244	; 0xf4
 800ceda:	73fb      	strb	r3, [r7, #15]
			break;
 800cedc:	bf00      	nop
	}
	return ret;
 800cede:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	24000a38 	.word	0x24000a38
 800cef0:	08011380 	.word	0x08011380
 800cef4:	08010d80 	.word	0x08010d80
 800cef8:	0801104c 	.word	0x0801104c

0800cefc <m2m_periph_pullup_ctrl>:
	return M2M_SUCCESS;
}


sint8 m2m_periph_pullup_ctrl(uint32 pinmask, uint8 enable)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
	return pullup_ctrl(pinmask, enable);
 800cf08:	78fb      	ldrb	r3, [r7, #3]
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 fe39 	bl	800db84 <pullup_ctrl>
 800cf12:	4603      	mov	r3, r0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b0aa      	sub	sp, #168	; 0xa8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	603a      	str	r2, [r7, #0]
 800cf26:	71fb      	strb	r3, [r7, #7]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800cf2c:	79fb      	ldrb	r3, [r7, #7]
 800cf2e:	2b2c      	cmp	r3, #44	; 0x2c
 800cf30:	d117      	bne.n	800cf62 <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800cf32:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800cf36:	2300      	movs	r3, #0
 800cf38:	2204      	movs	r2, #4
 800cf3a:	6838      	ldr	r0, [r7, #0]
 800cf3c:	f7ff feee 	bl	800cd1c <hif_receive>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f040 8162 	bne.w	800d20c <m2m_wifi_cb+0x2f0>
		{
			if (gpfAppWifiCb)
 800cf48:	4bb2      	ldr	r3, [pc, #712]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 815d 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800cf52:	4bb0      	ldr	r3, [pc, #704]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	202c      	movs	r0, #44	; 0x2c
 800cf5e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
 800cf60:	e154      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	2b1b      	cmp	r3, #27
 800cf66:	d117      	bne.n	800cf98 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800cf68:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	2208      	movs	r2, #8
 800cf70:	6838      	ldr	r0, [r7, #0]
 800cf72:	f7ff fed3 	bl	800cd1c <hif_receive>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f040 8147 	bne.w	800d20c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800cf7e:	4ba5      	ldr	r3, [pc, #660]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 8142 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800cf88:	4ba2      	ldr	r3, [pc, #648]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800cf90:	4611      	mov	r1, r2
 800cf92:	201b      	movs	r0, #27
 800cf94:	4798      	blx	r3
}
 800cf96:	e139      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800cf98:	79fb      	ldrb	r3, [r7, #7]
 800cf9a:	2b06      	cmp	r3, #6
 800cf9c:	d117      	bne.n	800cfce <m2m_wifi_cb+0xb2>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800cf9e:	f107 0108 	add.w	r1, r7, #8
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	2230      	movs	r2, #48	; 0x30
 800cfa6:	6838      	ldr	r0, [r7, #0]
 800cfa8:	f7ff feb8 	bl	800cd1c <hif_receive>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	f040 812c 	bne.w	800d20c <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800cfb4:	4b97      	ldr	r3, [pc, #604]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 8127 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800cfbe:	4b95      	ldr	r3, [pc, #596]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f107 0208 	add.w	r2, r7, #8
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	2006      	movs	r0, #6
 800cfca:	4798      	blx	r3
}
 800cfcc:	e11e      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	2b0e      	cmp	r3, #14
 800cfd2:	f000 811b 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	2b32      	cmp	r3, #50	; 0x32
 800cfda:	d117      	bne.n	800d00c <m2m_wifi_cb+0xf0>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800cfdc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	2214      	movs	r2, #20
 800cfe4:	6838      	ldr	r0, [r7, #0]
 800cfe6:	f7ff fe99 	bl	800cd1c <hif_receive>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f040 810d 	bne.w	800d20c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800cff2:	4b88      	ldr	r3, [pc, #544]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 8108 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800cffc:	4b85      	ldr	r3, [pc, #532]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d004:	4611      	mov	r1, r2
 800d006:	2032      	movs	r0, #50	; 0x32
 800d008:	4798      	blx	r3
}
 800d00a:	e0ff      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	2b2f      	cmp	r3, #47	; 0x2f
 800d010:	d11e      	bne.n	800d050 <m2m_wifi_cb+0x134>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
 800d012:	f107 0308 	add.w	r3, r7, #8
 800d016:	2264      	movs	r2, #100	; 0x64
 800d018:	2100      	movs	r1, #0
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7ff f9f6 	bl	800c40c <m2m_memset>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800d020:	f107 0108 	add.w	r1, r7, #8
 800d024:	2300      	movs	r3, #0
 800d026:	2264      	movs	r2, #100	; 0x64
 800d028:	6838      	ldr	r0, [r7, #0]
 800d02a:	f7ff fe77 	bl	800cd1c <hif_receive>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	f040 80eb 	bne.w	800d20c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d036:	4b77      	ldr	r3, [pc, #476]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 80e6 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800d040:	4b74      	ldr	r3, [pc, #464]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f107 0208 	add.w	r2, r7, #8
 800d048:	4611      	mov	r1, r2
 800d04a:	202f      	movs	r0, #47	; 0x2f
 800d04c:	4798      	blx	r3
}
 800d04e:	e0dd      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800d050:	79fb      	ldrb	r3, [r7, #7]
 800d052:	2b34      	cmp	r3, #52	; 0x34
 800d054:	d115      	bne.n	800d082 <m2m_wifi_cb+0x166>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800d056:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800d05a:	2300      	movs	r3, #0
 800d05c:	2204      	movs	r2, #4
 800d05e:	6838      	ldr	r0, [r7, #0]
 800d060:	f7ff fe5c 	bl	800cd1c <hif_receive>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	f040 80d0 	bne.w	800d20c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d06c:	4b69      	ldr	r3, [pc, #420]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	f000 80cb 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800d076:	4b67      	ldr	r3, [pc, #412]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2100      	movs	r1, #0
 800d07c:	2034      	movs	r0, #52	; 0x34
 800d07e:	4798      	blx	r3
}
 800d080:	e0c4      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	2b11      	cmp	r3, #17
 800d086:	d11e      	bne.n	800d0c6 <m2m_wifi_cb+0x1aa>
		gu8scanInProgress = 0;
 800d088:	4b63      	ldr	r3, [pc, #396]	; (800d218 <m2m_wifi_cb+0x2fc>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800d08e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d092:	2300      	movs	r3, #0
 800d094:	2204      	movs	r2, #4
 800d096:	6838      	ldr	r0, [r7, #0]
 800d098:	f7ff fe40 	bl	800cd1c <hif_receive>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f040 80b4 	bne.w	800d20c <m2m_wifi_cb+0x2f0>
			gu8ChNum = strState.u8NumofCh;
 800d0a4:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800d0a8:	4b5c      	ldr	r3, [pc, #368]	; (800d21c <m2m_wifi_cb+0x300>)
 800d0aa:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
 800d0ac:	4b59      	ldr	r3, [pc, #356]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f000 80ab 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800d0b6:	4b57      	ldr	r3, [pc, #348]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d0be:	4611      	mov	r1, r2
 800d0c0:	2011      	movs	r0, #17
 800d0c2:	4798      	blx	r3
}
 800d0c4:	e0a2      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800d0c6:	79fb      	ldrb	r3, [r7, #7]
 800d0c8:	2b13      	cmp	r3, #19
 800d0ca:	d117      	bne.n	800d0fc <m2m_wifi_cb+0x1e0>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800d0cc:	f107 0108 	add.w	r1, r7, #8
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	222c      	movs	r2, #44	; 0x2c
 800d0d4:	6838      	ldr	r0, [r7, #0]
 800d0d6:	f7ff fe21 	bl	800cd1c <hif_receive>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f040 8095 	bne.w	800d20c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d0e2:	4b4c      	ldr	r3, [pc, #304]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 8090 	beq.w	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800d0ec:	4b49      	ldr	r3, [pc, #292]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f107 0208 	add.w	r2, r7, #8
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	2013      	movs	r0, #19
 800d0f8:	4798      	blx	r3
}
 800d0fa:	e087      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800d0fc:	79fb      	ldrb	r3, [r7, #7]
 800d0fe:	2b04      	cmp	r3, #4
 800d100:	d115      	bne.n	800d12e <m2m_wifi_cb+0x212>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800d102:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800d106:	2300      	movs	r3, #0
 800d108:	2204      	movs	r2, #4
 800d10a:	6838      	ldr	r0, [r7, #0]
 800d10c:	f7ff fe06 	bl	800cd1c <hif_receive>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d17a      	bne.n	800d20c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d116:	4b3f      	ldr	r3, [pc, #252]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d076      	beq.n	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800d11e:	4b3d      	ldr	r3, [pc, #244]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800d126:	4611      	mov	r1, r2
 800d128:	2004      	movs	r0, #4
 800d12a:	4798      	blx	r3
}
 800d12c:	e06e      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800d12e:	79fb      	ldrb	r3, [r7, #7]
 800d130:	2b65      	cmp	r3, #101	; 0x65
 800d132:	d115      	bne.n	800d160 <m2m_wifi_cb+0x244>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800d134:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800d138:	2300      	movs	r3, #0
 800d13a:	2204      	movs	r2, #4
 800d13c:	6838      	ldr	r0, [r7, #0]
 800d13e:	f7ff fded 	bl	800cd1c <hif_receive>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d161      	bne.n	800d20c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800d148:	4b32      	ldr	r3, [pc, #200]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d05d      	beq.n	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800d150:	4b30      	ldr	r3, [pc, #192]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800d158:	4611      	mov	r1, r2
 800d15a:	2065      	movs	r0, #101	; 0x65
 800d15c:	4798      	blx	r3
}
 800d15e:	e055      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	2b09      	cmp	r3, #9
 800d164:	d115      	bne.n	800d192 <m2m_wifi_cb+0x276>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800d166:	f107 0108 	add.w	r1, r7, #8
 800d16a:	2301      	movs	r3, #1
 800d16c:	2264      	movs	r2, #100	; 0x64
 800d16e:	6838      	ldr	r0, [r7, #0]
 800d170:	f7ff fdd4 	bl	800cd1c <hif_receive>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d148      	bne.n	800d20c <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800d17a:	4b26      	ldr	r3, [pc, #152]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d044      	beq.n	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800d182:	4b24      	ldr	r3, [pc, #144]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f107 0208 	add.w	r2, r7, #8
 800d18a:	4611      	mov	r1, r2
 800d18c:	2009      	movs	r0, #9
 800d18e:	4798      	blx	r3
}
 800d190:	e03c      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	2b2a      	cmp	r3, #42	; 0x2a
 800d196:	d115      	bne.n	800d1c4 <m2m_wifi_cb+0x2a8>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800d198:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800d19c:	2301      	movs	r3, #1
 800d19e:	2204      	movs	r2, #4
 800d1a0:	6838      	ldr	r0, [r7, #0]
 800d1a2:	f7ff fdbb 	bl	800cd1c <hif_receive>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d12f      	bne.n	800d20c <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800d1ac:	4b19      	ldr	r3, [pc, #100]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d02b      	beq.n	800d20c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800d1b4:	4b17      	ldr	r3, [pc, #92]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800d1bc:	4611      	mov	r1, r2
 800d1be:	202a      	movs	r0, #42	; 0x2a
 800d1c0:	4798      	blx	r3
}
 800d1c2:	e023      	b.n	800d20c <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800d1c4:	79fb      	ldrb	r3, [r7, #7]
 800d1c6:	2b20      	cmp	r3, #32
 800d1c8:	d120      	bne.n	800d20c <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800d1ca:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	2208      	movs	r2, #8
 800d1d2:	6838      	ldr	r0, [r7, #0]
 800d1d4:	f7ff fda2 	bl	800cd1c <hif_receive>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d116      	bne.n	800d20c <m2m_wifi_cb+0x2f0>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	f103 0008 	add.w	r0, r3, #8
 800d1e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d1e6:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	f7ff fd96 	bl	800cd1c <hif_receive>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d10a      	bne.n	800d20c <m2m_wifi_cb+0x2f0>
				if(gpfAppWifiCb)
 800d1f6:	4b07      	ldr	r3, [pc, #28]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <m2m_wifi_cb+0x2f0>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 800d1fe:	4b05      	ldr	r3, [pc, #20]	; (800d214 <m2m_wifi_cb+0x2f8>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d206:	4611      	mov	r1, r2
 800d208:	2020      	movs	r0, #32
 800d20a:	4798      	blx	r3
}
 800d20c:	bf00      	nop
 800d20e:	37a8      	adds	r7, #168	; 0xa8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	2400078c 	.word	0x2400078c
 800d218:	24000789 	.word	0x24000789
 800d21c:	24000788 	.word	0x24000788

0800d220 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_IND_CRL | (uint8)M2M_REQ_DATA_PKT), NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b090      	sub	sp, #64	; 0x40
 800d224:	af02      	add	r7, sp, #8
 800d226:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
 800d228:	2300      	movs	r3, #0
 800d22a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800d22e:	2301      	movs	r3, #1
 800d230:	72fb      	strb	r3, [r7, #11]

	if(param == NULL) {
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d103      	bne.n	800d240 <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
 800d238:	23f4      	movs	r3, #244	; 0xf4
 800d23a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		goto _EXIT0;
 800d23e:	e059      	b.n	800d2f4 <m2m_wifi_init+0xd4>
	}

	gpfAppWifiCb = param->pfAppWifiCb;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a2e      	ldr	r2, [pc, #184]	; (800d300 <m2m_wifi_init+0xe0>)
 800d246:	6013      	str	r3, [r2, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
 800d248:	4b2e      	ldr	r3, [pc, #184]	; (800d304 <m2m_wifi_init+0xe4>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
 800d24e:	f107 030b 	add.w	r3, r7, #11
 800d252:	4618      	mov	r0, r3
 800d254:	f000 fe78 	bl	800df48 <nm_drv_init>
 800d258:	4603      	mov	r3, r0
 800d25a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800d25e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d262:	2b00      	cmp	r3, #0
 800d264:	d145      	bne.n	800d2f2 <m2m_wifi_init+0xd2>
	/* Initialize host interface module */
	ret = hif_init(NULL);
 800d266:	2000      	movs	r0, #0
 800d268:	f7ff f9c6 	bl	800c5f8 <hif_init>
 800d26c:	4603      	mov	r3, r0
 800d26e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800d272:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d276:	2b00      	cmp	r3, #0
 800d278:	d136      	bne.n	800d2e8 <m2m_wifi_init+0xc8>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
 800d27a:	4923      	ldr	r1, [pc, #140]	; (800d308 <m2m_wifi_init+0xe8>)
 800d27c:	2001      	movs	r0, #1
 800d27e:	f7ff fde3 	bl	800ce48 <hif_register_cb>

	ret = nm_get_firmware_full_info(&strtmp);
 800d282:	f107 030c 	add.w	r3, r7, #12
 800d286:	4618      	mov	r0, r3
 800d288:	f000 fdbe 	bl	800de08 <nm_get_firmware_full_info>
 800d28c:	4603      	mov	r3, r0
 800d28e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	printf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 800d292:	7c3b      	ldrb	r3, [r7, #16]
 800d294:	4619      	mov	r1, r3
 800d296:	7c7b      	ldrb	r3, [r7, #17]
 800d298:	461a      	mov	r2, r3
 800d29a:	7cbb      	ldrb	r3, [r7, #18]
 800d29c:	4618      	mov	r0, r3
 800d29e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	4819      	ldr	r0, [pc, #100]	; (800d30c <m2m_wifi_init+0xec>)
 800d2a6:	f002 fb27 	bl	800f8f8 <iprintf>
	printf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 800d2aa:	f107 030c 	add.w	r3, r7, #12
 800d2ae:	f103 0216 	add.w	r2, r3, #22
 800d2b2:	f107 030c 	add.w	r3, r7, #12
 800d2b6:	330a      	adds	r3, #10
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4815      	ldr	r0, [pc, #84]	; (800d310 <m2m_wifi_init+0xf0>)
 800d2bc:	f002 fb1c 	bl	800f8f8 <iprintf>
	printf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 800d2c0:	7cfb      	ldrb	r3, [r7, #19]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	7d3b      	ldrb	r3, [r7, #20]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	7d7b      	ldrb	r3, [r7, #21]
 800d2ca:	4812      	ldr	r0, [pc, #72]	; (800d314 <m2m_wifi_init+0xf4>)
 800d2cc:	f002 fb14 	bl	800f8f8 <iprintf>
	printf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800d2d0:	2304      	movs	r3, #4
 800d2d2:	2205      	movs	r2, #5
 800d2d4:	2113      	movs	r1, #19
 800d2d6:	4810      	ldr	r0, [pc, #64]	; (800d318 <m2m_wifi_init+0xf8>)
 800d2d8:	f002 fb0e 	bl	800f8f8 <iprintf>
	printf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 800d2dc:	4a0f      	ldr	r2, [pc, #60]	; (800d31c <m2m_wifi_init+0xfc>)
 800d2de:	4910      	ldr	r1, [pc, #64]	; (800d320 <m2m_wifi_init+0x100>)
 800d2e0:	4810      	ldr	r0, [pc, #64]	; (800d324 <m2m_wifi_init+0x104>)
 800d2e2:	f002 fb09 	bl	800f8f8 <iprintf>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmware Version\n");
	}

	goto _EXIT0;
 800d2e6:	e005      	b.n	800d2f4 <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800d2e8:	bf00      	nop

_EXIT1:
	nm_drv_deinit(NULL);
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	f000 fe8e 	bl	800e00c <nm_drv_deinit>
 800d2f0:	e000      	b.n	800d2f4 <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800d2f2:	bf00      	nop
_EXIT0:
	return ret;
 800d2f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3738      	adds	r7, #56	; 0x38
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	2400078c 	.word	0x2400078c
 800d304:	24000789 	.word	0x24000789
 800d308:	0800cf1d 	.word	0x0800cf1d
 800d30c:	08011058 	.word	0x08011058
 800d310:	08011080 	.word	0x08011080
 800d314:	0801109c 	.word	0x0801109c
 800d318:	080110c0 	.word	0x080110c0
 800d31c:	080110d8 	.word	0x080110d8
 800d320:	080110e4 	.word	0x080110e4
 800d324:	080110f0 	.word	0x080110f0

0800d328 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
 800d330:	f7ff fcba 	bl	800cca8 <hif_handle_isr>
 800d334:	4603      	mov	r3, r0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b086      	sub	sp, #24
 800d342:	af02      	add	r7, sp, #8
 800d344:	60f8      	str	r0, [r7, #12]
 800d346:	607b      	str	r3, [r7, #4]
 800d348:	460b      	mov	r3, r1
 800d34a:	72fb      	strb	r3, [r7, #11]
 800d34c:	4613      	mov	r3, r2
 800d34e:	72bb      	strb	r3, [r7, #10]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
 800d350:	7aba      	ldrb	r2, [r7, #10]
 800d352:	7af9      	ldrb	r1, [r7, #11]
 800d354:	2300      	movs	r3, #0
 800d356:	9301      	str	r3, [sp, #4]
 800d358:	8b3b      	ldrh	r3, [r7, #24]
 800d35a:	9300      	str	r3, [sp, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f000 f805 	bl	800d36e <m2m_wifi_connect_sc>
 800d364:	4603      	mov	r3, r0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b0aa      	sub	sp, #168	; 0xa8
 800d372:	af04      	add	r7, sp, #16
 800d374:	60f8      	str	r0, [r7, #12]
 800d376:	607b      	str	r3, [r7, #4]
 800d378:	460b      	mov	r3, r1
 800d37a:	72fb      	strb	r3, [r7, #11]
 800d37c:	4613      	mov	r3, r2
 800d37e:	72bb      	strb	r3, [r7, #10]
	sint8				ret = M2M_SUCCESS;
 800d380:	2300      	movs	r3, #0
 800d382:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
 800d386:	7abb      	ldrb	r3, [r7, #10]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d053      	beq.n	800d434 <m2m_wifi_connect_sc+0xc6>
	{
		if(pvAuthInfo == NULL)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d103      	bne.n	800d39a <m2m_wifi_connect_sc+0x2c>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
 800d392:	23f4      	movs	r3, #244	; 0xf4
 800d394:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d398:	e113      	b.n	800d5c2 <m2m_wifi_connect_sc+0x254>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
 800d39a:	7abb      	ldrb	r3, [r7, #10]
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d149      	bne.n	800d434 <m2m_wifi_connect_sc+0xc6>
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff f850 	bl	800c446 <m2m_strlen>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b40      	cmp	r3, #64	; 0x40
 800d3aa:	d143      	bne.n	800d434 <m2m_wifi_connect_sc+0xc6>
		{
			uint8 i = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			uint8* pu8Psk = (uint8*)pvAuthInfo;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			while(i < (M2M_MAX_PSK_LEN-1))
 800d3b8:	e038      	b.n	800d42c <m2m_wifi_connect_sc+0xbe>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 800d3ba:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d3be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d3c2:	4413      	add	r3, r2
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	2b2f      	cmp	r3, #47	; 0x2f
 800d3c8:	d927      	bls.n	800d41a <m2m_wifi_connect_sc+0xac>
 800d3ca:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d3ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d3d2:	4413      	add	r3, r2
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b39      	cmp	r3, #57	; 0x39
 800d3d8:	d907      	bls.n	800d3ea <m2m_wifi_connect_sc+0x7c>
 800d3da:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d3de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d3e2:	4413      	add	r3, r2
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	2b40      	cmp	r3, #64	; 0x40
 800d3e8:	d917      	bls.n	800d41a <m2m_wifi_connect_sc+0xac>
 800d3ea:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d3ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d3f2:	4413      	add	r3, r2
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	2b46      	cmp	r3, #70	; 0x46
 800d3f8:	d907      	bls.n	800d40a <m2m_wifi_connect_sc+0x9c>
 800d3fa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d3fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d402:	4413      	add	r3, r2
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	2b60      	cmp	r3, #96	; 0x60
 800d408:	d907      	bls.n	800d41a <m2m_wifi_connect_sc+0xac>
 800d40a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d40e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d412:	4413      	add	r3, r2
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	2b66      	cmp	r3, #102	; 0x66
 800d418:	d903      	bls.n	800d422 <m2m_wifi_connect_sc+0xb4>
				{
					M2M_ERR("Invalid Key\n");
					ret = M2M_ERR_FAIL;
 800d41a:	23f4      	movs	r3, #244	; 0xf4
 800d41c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					goto ERR1;
 800d420:	e0cf      	b.n	800d5c2 <m2m_wifi_connect_sc+0x254>
				}
				i++;
 800d422:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d426:	3301      	adds	r3, #1
 800d428:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			while(i < (M2M_MAX_PSK_LEN-1))
 800d42c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d430:	2b3f      	cmp	r3, #63	; 0x3f
 800d432:	d9c2      	bls.n	800d3ba <m2m_wifi_connect_sc+0x4c>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
 800d434:	7afb      	ldrb	r3, [r7, #11]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <m2m_wifi_connect_sc+0xd2>
 800d43a:	7afb      	ldrb	r3, [r7, #11]
 800d43c:	2b20      	cmp	r3, #32
 800d43e:	d903      	bls.n	800d448 <m2m_wifi_connect_sc+0xda>
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
 800d440:	23f4      	movs	r3, #244	; 0xf4
 800d442:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
 800d446:	e0bc      	b.n	800d5c2 <m2m_wifi_connect_sc+0x254>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
 800d448:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d003      	beq.n	800d458 <m2m_wifi_connect_sc+0xea>
 800d450:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d454:	2b0e      	cmp	r3, #14
 800d456:	d907      	bls.n	800d468 <m2m_wifi_connect_sc+0xfa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
 800d458:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d45c:	2bff      	cmp	r3, #255	; 0xff
 800d45e:	d003      	beq.n	800d468 <m2m_wifi_connect_sc+0xfa>
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
 800d460:	23f4      	movs	r3, #244	; 0xf4
 800d462:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d466:	e0ac      	b.n	800d5c2 <m2m_wifi_connect_sc+0x254>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
 800d468:	7afa      	ldrb	r2, [r7, #11]
 800d46a:	f107 0314 	add.w	r3, r7, #20
 800d46e:	3346      	adds	r3, #70	; 0x46
 800d470:	68f9      	ldr	r1, [r7, #12]
 800d472:	4618      	mov	r0, r3
 800d474:	f7fe ffaa 	bl	800c3cc <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
 800d478:	7afb      	ldrb	r3, [r7, #11]
 800d47a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800d47e:	4413      	add	r3, r2
 800d480:	2200      	movs	r2, #0
 800d482:	f803 2c3e 	strb.w	r2, [r3, #-62]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
 800d486:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d48a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
 800d48e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800d492:	2b00      	cmp	r3, #0
 800d494:	bf14      	ite	ne
 800d496:	2301      	movne	r3, #1
 800d498:	2300      	moveq	r3, #0
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
 800d4a0:	f107 0314 	add.w	r3, r7, #20
 800d4a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	pstrAuthInfo->u8SecType		= u8SecType;
 800d4a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4ac:	7aba      	ldrb	r2, [r7, #10]
 800d4ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if(u8SecType == M2M_WIFI_SEC_WEP)
 800d4b2:	7abb      	ldrb	r3, [r7, #10]
 800d4b4:	2b03      	cmp	r3, #3
 800d4b6:	d143      	bne.n	800d540 <m2m_wifi_connect_sc+0x1d2>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
 800d4be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
 800d4c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4d4:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
 800d4d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b03      	cmp	r3, #3
 800d4de:	d903      	bls.n	800d4e8 <m2m_wifi_connect_sc+0x17a>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
 800d4e0:	23f4      	movs	r3, #244	; 0xf4
 800d4e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d4e6:	e06c      	b.n	800d5c2 <m2m_wifi_connect_sc+0x254>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
 800d4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4ec:	785b      	ldrb	r3, [r3, #1]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4f6:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
 800d4f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4fc:	785b      	ldrb	r3, [r3, #1]
 800d4fe:	2b0a      	cmp	r3, #10
 800d500:	d008      	beq.n	800d514 <m2m_wifi_connect_sc+0x1a6>
 800d502:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d506:	785b      	ldrb	r3, [r3, #1]
 800d508:	2b1a      	cmp	r3, #26
 800d50a:	d003      	beq.n	800d514 <m2m_wifi_connect_sc+0x1a6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
 800d50c:	23f4      	movs	r3, #244	; 0xf4
 800d50e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d512:	e056      	b.n	800d5c2 <m2m_wifi_connect_sc+0x254>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
 800d514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d518:	1c98      	adds	r0, r3, #2
 800d51a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d51e:	1c99      	adds	r1, r3, #2
 800d520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d524:	785b      	ldrb	r3, [r3, #1]
 800d526:	461a      	mov	r2, r3
 800d528:	f7fe ff50 	bl	800c3cc <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
 800d52c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d530:	785b      	ldrb	r3, [r3, #1]
 800d532:	461a      	mov	r2, r3
 800d534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d538:	4413      	add	r3, r2
 800d53a:	2200      	movs	r2, #0
 800d53c:	709a      	strb	r2, [r3, #2]
 800d53e:	e030      	b.n	800d5a2 <m2m_wifi_connect_sc+0x234>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
 800d540:	7abb      	ldrb	r3, [r7, #10]
 800d542:	2b02      	cmp	r3, #2
 800d544:	d11b      	bne.n	800d57e <m2m_wifi_connect_sc+0x210>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7fe ff7d 	bl	800c446 <m2m_strlen>
 800d54c:	4603      	mov	r3, r0
 800d54e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
 800d552:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d556:	2b00      	cmp	r3, #0
 800d558:	d003      	beq.n	800d562 <m2m_wifi_connect_sc+0x1f4>
 800d55a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d55e:	2b40      	cmp	r3, #64	; 0x40
 800d560:	d903      	bls.n	800d56a <m2m_wifi_connect_sc+0x1fc>
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
 800d562:	23f4      	movs	r3, #244	; 0xf4
 800d564:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d568:	e02b      	b.n	800d5c2 <m2m_wifi_connect_sc+0x254>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
 800d56a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d56e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d572:	3301      	adds	r3, #1
 800d574:	461a      	mov	r2, r3
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	f7fe ff28 	bl	800c3cc <m2m_memcpy>
 800d57c:	e011      	b.n	800d5a2 <m2m_wifi_connect_sc+0x234>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
 800d57e:	7abb      	ldrb	r3, [r7, #10]
 800d580:	2b04      	cmp	r3, #4
 800d582:	d107      	bne.n	800d594 <m2m_wifi_connect_sc+0x226>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
 800d584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d588:	223e      	movs	r2, #62	; 0x3e
 800d58a:	6879      	ldr	r1, [r7, #4]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fe ff1d 	bl	800c3cc <m2m_memcpy>
 800d592:	e006      	b.n	800d5a2 <m2m_wifi_connect_sc+0x234>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
 800d594:	7abb      	ldrb	r3, [r7, #10]
 800d596:	2b01      	cmp	r3, #1
 800d598:	d003      	beq.n	800d5a2 <m2m_wifi_connect_sc+0x234>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
 800d59a:	23f4      	movs	r3, #244	; 0xf4
 800d59c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
 800d5a0:	e00f      	b.n	800d5c2 <m2m_wifi_connect_sc+0x254>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
 800d5a2:	f107 0214 	add.w	r2, r7, #20
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9302      	str	r3, [sp, #8]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	236c      	movs	r3, #108	; 0x6c
 800d5b4:	2128      	movs	r1, #40	; 0x28
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	f7ff f83a 	bl	800c630 <hif_send>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

ERR1:
	return ret;
 800d5c2:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3798      	adds	r7, #152	; 0x98
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
 800d5d2:	2300      	movs	r3, #0
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b086      	sub	sp, #24
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5f4:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800d5f6:	6939      	ldr	r1, [r7, #16]
 800d5f8:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 800d5fc:	f000 fb3e 	bl	800dc7c <nm_write_reg>
		if(val32 != 0) {
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d013      	beq.n	800d62e <chip_apply_conf+0x50>
			uint32 reg = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800d60a:	f107 030c 	add.w	r3, r7, #12
 800d60e:	4619      	mov	r1, r3
 800d610:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 800d614:	f000 fb24 	bl	800dc60 <nm_read_reg_with_ret>
 800d618:	4603      	mov	r3, r0
 800d61a:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800d61c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1e8      	bne.n	800d5f6 <chip_apply_conf+0x18>
				if(reg == val32)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d002      	beq.n	800d632 <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800d62c:	e7e3      	b.n	800d5f6 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800d62e:	bf00      	nop
 800d630:	e000      	b.n	800d634 <chip_apply_conf+0x56>
					break;
 800d632:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b082      	sub	sp, #8
 800d642:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800d644:	2300      	movs	r3, #0
 800d646:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800d648:	2300      	movs	r3, #0
 800d64a:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800d64c:	463b      	mov	r3, r7
 800d64e:	4619      	mov	r1, r3
 800d650:	f241 4008 	movw	r0, #5128	; 0x1408
 800d654:	f000 fb04 	bl	800dc60 <nm_read_reg_with_ret>
 800d658:	4603      	mov	r3, r0
 800d65a:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d65c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d12b      	bne.n	800d6bc <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d66a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	4619      	mov	r1, r3
 800d670:	f241 4008 	movw	r0, #5128	; 0x1408
 800d674:	f000 fb02 	bl	800dc7c <nm_write_reg>
 800d678:	4603      	mov	r3, r0
 800d67a:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d67c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d11d      	bne.n	800d6c0 <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800d684:	463b      	mov	r3, r7
 800d686:	4619      	mov	r1, r3
 800d688:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800d68c:	f000 fae8 	bl	800dc60 <nm_read_reg_with_ret>
 800d690:	4603      	mov	r3, r0
 800d692:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d113      	bne.n	800d6c4 <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6a2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800d6ac:	f000 fae6 	bl	800dc7c <nm_write_reg>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d6b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6b8:	2b00      	cmp	r3, #0
ERR1:
 800d6ba:	e004      	b.n	800d6c6 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d6bc:	bf00      	nop
 800d6be:	e002      	b.n	800d6c6 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d6c0:	bf00      	nop
 800d6c2:	e000      	b.n	800d6c6 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d6c4:	bf00      	nop
	return ret;
 800d6c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800d6da:	4b31      	ldr	r3, [pc, #196]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d157      	bne.n	800d792 <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800d6e2:	492f      	ldr	r1, [pc, #188]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d6e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d6e8:	f000 faba 	bl	800dc60 <nm_read_reg_with_ret>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d004      	beq.n	800d6fc <nmi_get_chipid+0x28>
			chipid = 0;
 800d6f2:	4b2b      	ldr	r3, [pc, #172]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]
			return 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	e04c      	b.n	800d796 <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800d6fc:	1d3b      	adds	r3, r7, #4
 800d6fe:	4619      	mov	r1, r3
 800d700:	f241 30f4 	movw	r0, #5108	; 0x13f4
 800d704:	f000 faac 	bl	800dc60 <nm_read_reg_with_ret>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d004      	beq.n	800d718 <nmi_get_chipid+0x44>
			chipid = 0;
 800d70e:	4b24      	ldr	r3, [pc, #144]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d710:	2200      	movs	r2, #0
 800d712:	601a      	str	r2, [r3, #0]
			return 0;
 800d714:	2300      	movs	r3, #0
 800d716:	e03e      	b.n	800d796 <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800d718:	4b21      	ldr	r3, [pc, #132]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a21      	ldr	r2, [pc, #132]	; (800d7a4 <nmi_get_chipid+0xd0>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d106      	bne.n	800d730 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d028      	beq.n	800d77a <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800d728:	4b1d      	ldr	r3, [pc, #116]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d72a:	4a1f      	ldr	r2, [pc, #124]	; (800d7a8 <nmi_get_chipid+0xd4>)
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	e024      	b.n	800d77a <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800d730:	4b1b      	ldr	r3, [pc, #108]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a1d      	ldr	r2, [pc, #116]	; (800d7ac <nmi_get_chipid+0xd8>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d10d      	bne.n	800d756 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b03      	cmp	r3, #3
 800d73e:	d01c      	beq.n	800d77a <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b04      	cmp	r3, #4
 800d744:	d103      	bne.n	800d74e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800d746:	4b16      	ldr	r3, [pc, #88]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d748:	4a19      	ldr	r2, [pc, #100]	; (800d7b0 <nmi_get_chipid+0xdc>)
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	e015      	b.n	800d77a <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800d74e:	4b14      	ldr	r3, [pc, #80]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d750:	4a18      	ldr	r2, [pc, #96]	; (800d7b4 <nmi_get_chipid+0xe0>)
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	e011      	b.n	800d77a <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800d756:	4b12      	ldr	r3, [pc, #72]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a17      	ldr	r2, [pc, #92]	; (800d7b8 <nmi_get_chipid+0xe4>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d10c      	bne.n	800d77a <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800d760:	490f      	ldr	r1, [pc, #60]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d762:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 800d766:	f000 fa7b 	bl	800dc60 <nm_read_reg_with_ret>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d004      	beq.n	800d77a <nmi_get_chipid+0xa6>
			chipid = 0;
 800d770:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
			return 0;
 800d776:	2300      	movs	r3, #0
 800d778:	e00d      	b.n	800d796 <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800d77a:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d782:	4a07      	ldr	r2, [pc, #28]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d784:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800d786:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800d78e:	4a04      	ldr	r2, [pc, #16]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d790:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800d792:	4b03      	ldr	r3, [pc, #12]	; (800d7a0 <nmi_get_chipid+0xcc>)
 800d794:	681b      	ldr	r3, [r3, #0]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3708      	adds	r7, #8
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	24000790 	.word	0x24000790
 800d7a4:	001002a0 	.word	0x001002a0
 800d7a8:	001002a1 	.word	0x001002a1
 800d7ac:	001002b0 	.word	0x001002b0
 800d7b0:	001002b1 	.word	0x001002b1
 800d7b4:	001002b2 	.word	0x001002b2
 800d7b8:	001000f0 	.word	0x001000f0

0800d7bc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800d7c6:	463b      	mov	r3, r7
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	2010      	movs	r0, #16
 800d7cc:	f000 fa48 	bl	800dc60 <nm_read_reg_with_ret>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800d7d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d144      	bne.n	800d866 <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	f003 0301 	and.w	r3, r3, #1
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d000      	beq.n	800d7e8 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800d7e6:	e7ee      	b.n	800d7c6 <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800d7e8:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800d7ea:	463b      	mov	r3, r7
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	2001      	movs	r0, #1
 800d7f0:	f000 fa36 	bl	800dc60 <nm_read_reg_with_ret>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d7f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d134      	bne.n	800d86a <chip_sleep+0xae>
	if(reg & NBIT1)
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	f003 0302 	and.w	r3, r3, #2
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00e      	beq.n	800d828 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	f023 0302 	bic.w	r3, r3, #2
 800d810:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	4619      	mov	r1, r3
 800d816:	2001      	movs	r0, #1
 800d818:	f000 fa30 	bl	800dc7c <nm_write_reg>
 800d81c:	4603      	mov	r3, r0
 800d81e:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800d820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d122      	bne.n	800d86e <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800d828:	463b      	mov	r3, r7
 800d82a:	4619      	mov	r1, r3
 800d82c:	200b      	movs	r0, #11
 800d82e:	f000 fa17 	bl	800dc60 <nm_read_reg_with_ret>
 800d832:	4603      	mov	r3, r0
 800d834:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d119      	bne.n	800d872 <chip_sleep+0xb6>
	if(reg & NBIT0)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	f003 0301 	and.w	r3, r3, #1
 800d844:	2b00      	cmp	r3, #0
 800d846:	d016      	beq.n	800d876 <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	f023 0301 	bic.w	r3, r3, #1
 800d84e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	4619      	mov	r1, r3
 800d854:	200b      	movs	r0, #11
 800d856:	f000 fa11 	bl	800dc7c <nm_write_reg>
 800d85a:	4603      	mov	r3, r0
 800d85c:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800d85e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d862:	2b00      	cmp	r3, #0
	}

ERR1:
 800d864:	e007      	b.n	800d876 <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800d866:	bf00      	nop
 800d868:	e006      	b.n	800d878 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d86a:	bf00      	nop
 800d86c:	e004      	b.n	800d878 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800d86e:	bf00      	nop
 800d870:	e002      	b.n	800d878 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d872:	bf00      	nop
 800d874:	e000      	b.n	800d878 <chip_sleep+0xbc>
ERR1:
 800d876:	bf00      	nop
	return ret;
 800d878:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <chip_wake>:
sint8 chip_wake(void)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800d88a:	2300      	movs	r3, #0
 800d88c:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800d88e:	2300      	movs	r3, #0
 800d890:	607b      	str	r3, [r7, #4]
 800d892:	2300      	movs	r3, #0
 800d894:	603b      	str	r3, [r7, #0]
 800d896:	2300      	movs	r3, #0
 800d898:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800d89a:	1d3b      	adds	r3, r7, #4
 800d89c:	4619      	mov	r1, r3
 800d89e:	200b      	movs	r0, #11
 800d8a0:	f000 f9de 	bl	800dc60 <nm_read_reg_with_ret>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d8a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d14e      	bne.n	800d94e <chip_wake+0xca>

	if(!(reg & NBIT0))
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f003 0301 	and.w	r3, r3, #1
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10c      	bne.n	800d8d4 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f043 0301 	orr.w	r3, r3, #1
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	200b      	movs	r0, #11
 800d8c4:	f000 f9da 	bl	800dc7c <nm_write_reg>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d8cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d13e      	bne.n	800d952 <chip_wake+0xce>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800d8d4:	1d3b      	adds	r3, r7, #4
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	2001      	movs	r0, #1
 800d8da:	f000 f9c1 	bl	800dc60 <nm_read_reg_with_ret>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d135      	bne.n	800d956 <chip_wake+0xd2>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f003 0302 	and.w	r3, r3, #2
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10c      	bne.n	800d90e <chip_wake+0x8a>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f043 0302 	orr.w	r3, r3, #2
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	2001      	movs	r0, #1
 800d8fe:	f000 f9bd 	bl	800dc7c <nm_write_reg>
 800d902:	4603      	mov	r3, r0
 800d904:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800d906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d125      	bne.n	800d95a <chip_wake+0xd6>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800d90e:	463b      	mov	r3, r7
 800d910:	4619      	mov	r1, r3
 800d912:	200f      	movs	r0, #15
 800d914:	f000 f9a4 	bl	800dc60 <nm_read_reg_with_ret>
 800d918:	4603      	mov	r3, r0
 800d91a:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800d91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d11c      	bne.n	800d95e <chip_wake+0xda>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	f003 0304 	and.w	r3, r3, #4
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10b      	bne.n	800d946 <chip_wake+0xc2>
			break;
		}
		nm_bsp_sleep(2);
 800d92e:	2002      	movs	r0, #2
 800d930:	f7fe fbca 	bl	800c0c8 <nm_bsp_sleep>
		trials++;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	3301      	adds	r3, #1
 800d938:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	2b04      	cmp	r3, #4
 800d93e:	d9e6      	bls.n	800d90e <chip_wake+0x8a>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 800d940:	23fc      	movs	r3, #252	; 0xfc
 800d942:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800d944:	e00c      	b.n	800d960 <chip_wake+0xdc>
			break;
 800d946:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800d948:	f000 f96f 	bl	800dc2a <nm_bus_reset>
 800d94c:	e008      	b.n	800d960 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d94e:	bf00      	nop
 800d950:	e006      	b.n	800d960 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d952:	bf00      	nop
 800d954:	e004      	b.n	800d960 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d956:	bf00      	nop
 800d958:	e002      	b.n	800d960 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800d95a:	bf00      	nop
 800d95c:	e000      	b.n	800d960 <chip_wake+0xdc>
			goto _WAKE_EXIT;
 800d95e:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800d960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b088      	sub	sp, #32
 800d970:	af00      	add	r7, sp, #0
 800d972:	4603      	mov	r3, r0
 800d974:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800d976:	2300      	movs	r3, #0
 800d978:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800d97a:	2300      	movs	r3, #0
 800d97c:	61bb      	str	r3, [r7, #24]
 800d97e:	2300      	movs	r3, #0
 800d980:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800d986:	4b3f      	ldr	r3, [pc, #252]	; (800da84 <wait_for_bootrom+0x118>)
 800d988:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 800d98a:	2300      	movs	r3, #0
 800d98c:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800d98e:	f241 0014 	movw	r0, #4116	; 0x1014
 800d992:	f000 f959 	bl	800dc48 <nm_read_reg>
 800d996:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	db03      	blt.n	800d9a6 <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800d99e:	2001      	movs	r0, #1
 800d9a0:	f7fe fb92 	bl	800c0c8 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800d9a4:	e7f3      	b.n	800d98e <wait_for_bootrom+0x22>
			break;
 800d9a6:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800d9a8:	4837      	ldr	r0, [pc, #220]	; (800da88 <wait_for_bootrom+0x11c>)
 800d9aa:	f000 f94d 	bl	800dc48 <nm_read_reg>
 800d9ae:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d119      	bne.n	800d9f2 <wait_for_bootrom+0x86>
	{
		reg = 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800d9c2:	e012      	b.n	800d9ea <wait_for_bootrom+0x7e>
		{
			nm_bsp_sleep(1);
 800d9c4:	2001      	movs	r0, #1
 800d9c6:	f7fe fb7f 	bl	800c0c8 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800d9ca:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 800d9ce:	f000 f93b 	bl	800dc48 <nm_read_reg>
 800d9d2:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	617b      	str	r3, [r7, #20]
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	f644 6220 	movw	r2, #20000	; 0x4e20
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d902      	bls.n	800d9ea <wait_for_bootrom+0x7e>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 800d9e4:	23fb      	movs	r3, #251	; 0xfb
 800d9e6:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800d9e8:	e045      	b.n	800da76 <wait_for_bootrom+0x10a>
		while(reg != M2M_FINISH_BOOT_ROM)
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	4a27      	ldr	r2, [pc, #156]	; (800da8c <wait_for_bootrom+0x120>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d1e8      	bne.n	800d9c4 <wait_for_bootrom+0x58>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800d9f2:	79fb      	ldrb	r3, [r7, #7]
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d10a      	bne.n	800da0e <wait_for_bootrom+0xa2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800d9f8:	4925      	ldr	r1, [pc, #148]	; (800da90 <wait_for_bootrom+0x124>)
 800d9fa:	4826      	ldr	r0, [pc, #152]	; (800da94 <wait_for_bootrom+0x128>)
 800d9fc:	f000 f93e 	bl	800dc7c <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800da00:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800da04:	f241 008c 	movw	r0, #4236	; 0x108c
 800da08:	f000 f938 	bl	800dc7c <nm_write_reg>
 800da0c:	e01c      	b.n	800da48 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800da0e:	79fb      	ldrb	r3, [r7, #7]
 800da10:	2b03      	cmp	r3, #3
 800da12:	d109      	bne.n	800da28 <wait_for_bootrom+0xbc>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800da14:	491e      	ldr	r1, [pc, #120]	; (800da90 <wait_for_bootrom+0x124>)
 800da16:	481f      	ldr	r0, [pc, #124]	; (800da94 <wait_for_bootrom+0x128>)
 800da18:	f000 f930 	bl	800dc7c <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800da1c:	2100      	movs	r1, #0
 800da1e:	f241 008c 	movw	r0, #4236	; 0x108c
 800da22:	f000 f92b 	bl	800dc7c <nm_write_reg>
 800da26:	e00f      	b.n	800da48 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800da28:	79fb      	ldrb	r3, [r7, #7]
 800da2a:	2b04      	cmp	r3, #4
 800da2c:	d107      	bne.n	800da3e <wait_for_bootrom+0xd2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800da2e:	2380      	movs	r3, #128	; 0x80
 800da30:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800da32:	68f9      	ldr	r1, [r7, #12]
 800da34:	f241 008c 	movw	r0, #4236	; 0x108c
 800da38:	f000 f920 	bl	800dc7c <nm_write_reg>
 800da3c:	e004      	b.n	800da48 <wait_for_bootrom+0xdc>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800da3e:	68f9      	ldr	r1, [r7, #12]
 800da40:	f241 008c 	movw	r0, #4236	; 0x108c
 800da44:	f000 f91a 	bl	800dc7c <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800da48:	f7ff fe44 	bl	800d6d4 <nmi_get_chipid>
 800da4c:	4603      	mov	r3, r0
 800da4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da52:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 800da56:	d306      	bcc.n	800da66 <wait_for_bootrom+0xfa>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	f043 0302 	orr.w	r3, r3, #2
 800da5e:	4618      	mov	r0, r3
 800da60:	f7ff fdbd 	bl	800d5de <chip_apply_conf>
 800da64:	e002      	b.n	800da6c <wait_for_bootrom+0x100>
	} else {
		chip_apply_conf(u32GpReg1);
 800da66:	6938      	ldr	r0, [r7, #16]
 800da68:	f7ff fdb9 	bl	800d5de <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800da6c:	490a      	ldr	r1, [pc, #40]	; (800da98 <wait_for_bootrom+0x12c>)
 800da6e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 800da72:	f000 f903 	bl	800dc7c <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800da76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3720      	adds	r7, #32
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	13541354 	.word	0x13541354
 800da88:	000207bc 	.word	0x000207bc
 800da8c:	10add09e 	.word	0x10add09e
 800da90:	3c1cd57d 	.word	0x3c1cd57d
 800da94:	000207ac 	.word	0x000207ac
 800da98:	ef522f61 	.word	0xef522f61

0800da9c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	4603      	mov	r3, r0
 800daa4:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800daa6:	2300      	movs	r3, #0
 800daa8:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800daaa:	2300      	movs	r3, #0
 800daac:	61bb      	str	r3, [r7, #24]
 800daae:	2300      	movs	r3, #0
 800dab0:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800dab2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800dab6:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800dab8:	f241 038c 	movw	r3, #4236	; 0x108c
 800dabc:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800dabe:	4b1a      	ldr	r3, [pc, #104]	; (800db28 <wait_for_firmware_start+0x8c>)
 800dac0:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d002      	beq.n	800dace <wait_for_firmware_start+0x32>
 800dac8:	79fb      	ldrb	r3, [r7, #7]
 800daca:	2b03      	cmp	r3, #3
 800dacc:	d116      	bne.n	800dafc <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 800dace:	4b17      	ldr	r3, [pc, #92]	; (800db2c <wait_for_firmware_start+0x90>)
 800dad0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800dad2:	4b17      	ldr	r3, [pc, #92]	; (800db30 <wait_for_firmware_start+0x94>)
 800dad4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800dad6:	e011      	b.n	800dafc <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800dad8:	2002      	movs	r0, #2
 800dada:	f7fe faf5 	bl	800c0c8 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 f8b1 	bl	800dc48 <nm_read_reg>
 800dae6:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	3301      	adds	r3, #1
 800daec:	617b      	str	r3, [r7, #20]
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d302      	bcc.n	800dafc <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800daf6:	23fb      	movs	r3, #251	; 0xfb
 800daf8:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800dafa:	e00e      	b.n	800db1a <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	69ba      	ldr	r2, [r7, #24]
 800db00:	429a      	cmp	r2, r3
 800db02:	d1e9      	bne.n	800dad8 <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	4a08      	ldr	r2, [pc, #32]	; (800db28 <wait_for_firmware_start+0x8c>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d105      	bne.n	800db18 <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800db0c:	2100      	movs	r1, #0
 800db0e:	f241 008c 	movw	r0, #4236	; 0x108c
 800db12:	f000 f8b3 	bl	800dc7c <nm_write_reg>
 800db16:	e000      	b.n	800db1a <wait_for_firmware_start+0x7e>
	}
ERR:
 800db18:	bf00      	nop
	return ret;
 800db1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3720      	adds	r7, #32
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	02532636 	.word	0x02532636
 800db2c:	000207ac 	.word	0x000207ac
 800db30:	d75dc1c3 	.word	0xd75dc1c3

0800db34 <chip_deinit>:

sint8 chip_deinit(void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800db3e:	463b      	mov	r3, r7
 800db40:	4619      	mov	r1, r3
 800db42:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800db46:	f000 f88b 	bl	800dc60 <nm_read_reg_with_ret>
 800db4a:	4603      	mov	r3, r0
 800db4c:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800db4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10f      	bne.n	800db76 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db5c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	4619      	mov	r1, r3
 800db62:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800db66:	f000 f889 	bl	800dc7c <nm_write_reg>
 800db6a:	4603      	mov	r3, r0
 800db6c:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800db6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db72:	2b00      	cmp	r3, #0
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
 800db74:	e000      	b.n	800db78 <chip_deinit+0x44>
		goto ERR1;
 800db76:	bf00      	nop
	return ret;
 800db78:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3708      	adds	r7, #8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <pullup_ctrl>:
_EXIT:
	return ret;
}

sint8 pullup_ctrl(uint32 pinmask, uint8 enable)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	460b      	mov	r3, r1
 800db8e:	70fb      	strb	r3, [r7, #3]
	sint8 s8Ret;
	uint32 val32;
	s8Ret = nm_read_reg_with_ret(0x142c, &val32);
 800db90:	f107 0308 	add.w	r3, r7, #8
 800db94:	4619      	mov	r1, r3
 800db96:	f241 402c 	movw	r0, #5164	; 0x142c
 800db9a:	f000 f861 	bl	800dc60 <nm_read_reg_with_ret>
 800db9e:	4603      	mov	r3, r0
 800dba0:	73fb      	strb	r3, [r7, #15]
	if(s8Ret != M2M_SUCCESS) {
 800dba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d118      	bne.n	800dbdc <pullup_ctrl+0x58>
		M2M_ERR("[pullup_ctrl]: failed to read\n");
		goto _EXIT;
	}
	if(enable) {
 800dbaa:	78fb      	ldrb	r3, [r7, #3]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d005      	beq.n	800dbbc <pullup_ctrl+0x38>
		val32 &= ~pinmask;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	43da      	mvns	r2, r3
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	4013      	ands	r3, r2
 800dbb8:	60bb      	str	r3, [r7, #8]
 800dbba:	e003      	b.n	800dbc4 <pullup_ctrl+0x40>
		} else {
		val32 |= pinmask;
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	60bb      	str	r3, [r7, #8]
	}
	s8Ret = nm_write_reg(0x142c, val32);
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	f241 402c 	movw	r0, #5164	; 0x142c
 800dbcc:	f000 f856 	bl	800dc7c <nm_write_reg>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	73fb      	strb	r3, [r7, #15]
	if(s8Ret  != M2M_SUCCESS) {
 800dbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbd8:	2b00      	cmp	r3, #0
		M2M_ERR("[pullup_ctrl]: failed to write\n");
		goto _EXIT;
	}
_EXIT:
 800dbda:	e000      	b.n	800dbde <pullup_ctrl+0x5a>
		goto _EXIT;
 800dbdc:	bf00      	nop
	return s8Ret;
 800dbde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7fe fb70 	bl	800c2dc <nm_bus_init>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	73fb      	strb	r3, [r7, #15]
	return ret;
 800dc00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800dc12:	2300      	movs	r3, #0
 800dc14:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800dc16:	f7fe fbd1 	bl	800c3bc <nm_bus_deinit>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]

	return ret;
 800dc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b082      	sub	sp, #8
 800dc2e:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800dc30:	2300      	movs	r3, #0
 800dc32:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
    ret = nm_spi_reset();
 800dc34:	f000 fea8 	bl	800e988 <nm_spi_reset>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	71fb      	strb	r3, [r7, #7]
	return ret;
 800dc3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#elif defined (CONF_WINC_USE_I2C)
#else
#error "Plesae define bus usage"
	return ret;
#endif
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 ff09 	bl	800ea68 <nm_spi_read_reg>
 800dc56:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800dc6a:	6839      	ldr	r1, [r7, #0]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 ff0a 	bl	800ea86 <nm_spi_read_reg_with_ret>
 800dc72:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800dc86:	6839      	ldr	r1, [r7, #0]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 ff16 	bl	800eaba <nm_spi_write_reg>
 800dc8e:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	4613      	mov	r3, r2
 800dca4:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800dca6:	88fb      	ldrh	r3, [r7, #6]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	68b9      	ldr	r1, [r7, #8]
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f000 ff1e 	bl	800eaee <nm_spi_read_block>
 800dcb2:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800dcc8:	4b20      	ldr	r3, [pc, #128]	; (800dd4c <nm_read_block+0x90>)
 800dcca:	881b      	ldrh	r3, [r3, #0]
 800dccc:	3b08      	subs	r3, #8
 800dcce:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800dcd8:	8a3b      	ldrh	r3, [r7, #16]
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d80f      	bhi.n	800dd00 <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	4413      	add	r3, r2
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	b292      	uxth	r2, r2
 800dcea:	4619      	mov	r1, r3
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f7ff ffd3 	bl	800dc98 <p_nm_read_block>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	7cfb      	ldrb	r3, [r7, #19]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	74fb      	strb	r3, [r7, #19]
			break;
 800dcfe:	e01f      	b.n	800dd40 <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	4413      	add	r3, r2
 800dd06:	8a3a      	ldrh	r2, [r7, #16]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f7ff ffc4 	bl	800dc98 <p_nm_read_block>
 800dd10:	4603      	mov	r3, r0
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	7cfb      	ldrb	r3, [r7, #19]
 800dd16:	4413      	add	r3, r2
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800dd1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10c      	bne.n	800dd3e <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800dd24:	8a3b      	ldrh	r3, [r7, #16]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800dd2c:	8a3b      	ldrh	r3, [r7, #16]
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	4413      	add	r3, r2
 800dd32:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800dd34:	8a3b      	ldrh	r3, [r7, #16]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	4413      	add	r3, r2
 800dd3a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800dd3c:	e7cc      	b.n	800dcd8 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800dd3e:	bf00      	nop
		}
	}

	return s8Ret;
 800dd40:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3718      	adds	r7, #24
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	2400001c 	.word	0x2400001c

0800dd50 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800dd5e:	88fb      	ldrh	r3, [r7, #6]
 800dd60:	461a      	mov	r2, r3
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f000 fee0 	bl	800eb2a <nm_spi_write_block>
 800dd6a:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800dd80:	4b20      	ldr	r3, [pc, #128]	; (800de04 <nm_write_block+0x90>)
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	3b08      	subs	r3, #8
 800dd86:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800dd90:	8a3b      	ldrh	r3, [r7, #16]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d80f      	bhi.n	800ddb8 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	b292      	uxth	r2, r2
 800dda2:	4619      	mov	r1, r3
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f7ff ffd3 	bl	800dd50 <p_nm_write_block>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	7cfb      	ldrb	r3, [r7, #19]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	74fb      	strb	r3, [r7, #19]
			break;
 800ddb6:	e01f      	b.n	800ddf8 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	8a3a      	ldrh	r2, [r7, #16]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f7ff ffc4 	bl	800dd50 <p_nm_write_block>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	7cfb      	ldrb	r3, [r7, #19]
 800ddce:	4413      	add	r3, r2
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800ddd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10c      	bne.n	800ddf6 <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800dddc:	8a3b      	ldrh	r3, [r7, #16]
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800dde4:	8a3b      	ldrh	r3, [r7, #16]
 800dde6:	697a      	ldr	r2, [r7, #20]
 800dde8:	4413      	add	r3, r2
 800ddea:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800ddec:	8a3b      	ldrh	r3, [r7, #16]
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800ddf4:	e7cc      	b.n	800dd90 <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800ddf6:	bf00      	nop
		}
	}

	return s8Ret;
 800ddf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3718      	adds	r7, #24
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	2400001c 	.word	0x2400001c

0800de08 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b088      	sub	sp, #32
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800de14:	2300      	movs	r3, #0
 800de16:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800de18:	f107 030c 	add.w	r3, r7, #12
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]
 800de20:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	f000 8086 	beq.w	800df36 <nm_get_firmware_full_info+0x12e>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800de2a:	2228      	movs	r2, #40	; 0x28
 800de2c:	2100      	movs	r1, #0
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7fe faec 	bl	800c40c <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800de34:	f107 0314 	add.w	r3, r7, #20
 800de38:	4619      	mov	r1, r3
 800de3a:	4842      	ldr	r0, [pc, #264]	; (800df44 <nm_get_firmware_full_info+0x13c>)
 800de3c:	f7ff ff10 	bl	800dc60 <nm_read_reg_with_ret>
 800de40:	4603      	mov	r3, r0
 800de42:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800de44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d174      	bne.n	800df36 <nm_get_firmware_full_info+0x12e>
		{
			if(reg != 0)
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d06e      	beq.n	800df30 <nm_get_firmware_full_info+0x128>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800de58:	f107 010c 	add.w	r1, r7, #12
 800de5c:	2208      	movs	r2, #8
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff ff2c 	bl	800dcbc <nm_read_block>
 800de64:	4603      	mov	r3, r0
 800de66:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800de68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d163      	bne.n	800df38 <nm_get_firmware_full_info+0x130>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	b29b      	uxth	r3, r3
 800de78:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d054      	beq.n	800df2a <nm_get_firmware_full_info+0x122>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800de86:	2228      	movs	r2, #40	; 0x28
 800de88:	6879      	ldr	r1, [r7, #4]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7ff ff16 	bl	800dcbc <nm_read_block>
 800de90:	4603      	mov	r3, r0
 800de92:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800de94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d14d      	bne.n	800df38 <nm_get_firmware_full_info+0x130>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	791b      	ldrb	r3, [r3, #4]
 800dea0:	021b      	lsls	r3, r3, #8
 800dea2:	b21a      	sxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	795b      	ldrb	r3, [r3, #5]
 800dea8:	011b      	lsls	r3, r3, #4
 800deaa:	b21b      	sxth	r3, r3
 800deac:	b2db      	uxtb	r3, r3
 800deae:	b21b      	sxth	r3, r3
 800deb0:	4313      	orrs	r3, r2
 800deb2:	b21a      	sxth	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	799b      	ldrb	r3, [r3, #6]
 800deb8:	b21b      	sxth	r3, r3
 800deba:	f003 030f 	and.w	r3, r3, #15
 800debe:	b21b      	sxth	r3, r3
 800dec0:	4313      	orrs	r3, r2
 800dec2:	b21b      	sxth	r3, r3
 800dec4:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800dec6:	f241 3354 	movw	r3, #4948	; 0x1354
 800deca:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	79db      	ldrb	r3, [r3, #7]
 800ded0:	021b      	lsls	r3, r3, #8
 800ded2:	b21a      	sxth	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	7a1b      	ldrb	r3, [r3, #8]
 800ded8:	011b      	lsls	r3, r3, #4
 800deda:	b21b      	sxth	r3, r3
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	b21b      	sxth	r3, r3
 800dee0:	4313      	orrs	r3, r2
 800dee2:	b21a      	sxth	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7a5b      	ldrb	r3, [r3, #9]
 800dee8:	b21b      	sxth	r3, r3
 800deea:	f003 030f 	and.w	r3, r3, #15
 800deee:	b21b      	sxth	r3, r3
 800def0:	4313      	orrs	r3, r2
 800def2:	b21b      	sxth	r3, r3
 800def4:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800def6:	8bbb      	ldrh	r3, [r7, #28]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d005      	beq.n	800df08 <nm_get_firmware_full_info+0x100>
 800defc:	8b3b      	ldrh	r3, [r7, #24]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d002      	beq.n	800df08 <nm_get_firmware_full_info+0x100>
 800df02:	8b3b      	ldrh	r3, [r7, #24]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d102      	bne.n	800df0e <nm_get_firmware_full_info+0x106>
								ret = M2M_ERR_FAIL;
 800df08:	23f4      	movs	r3, #244	; 0xf4
 800df0a:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800df0c:	e014      	b.n	800df38 <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800df0e:	8b7a      	ldrh	r2, [r7, #26]
 800df10:	8b3b      	ldrh	r3, [r7, #24]
 800df12:	429a      	cmp	r2, r3
 800df14:	d202      	bcs.n	800df1c <nm_get_firmware_full_info+0x114>
								/*The current driver version should be larger or equal
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800df16:	23f3      	movs	r3, #243	; 0xf3
 800df18:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800df1a:	e00d      	b.n	800df38 <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver >  curr_firm_ver) {
 800df1c:	8b7a      	ldrh	r2, [r7, #26]
 800df1e:	8bbb      	ldrh	r3, [r7, #28]
 800df20:	429a      	cmp	r2, r3
 800df22:	d909      	bls.n	800df38 <nm_get_firmware_full_info+0x130>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 800df24:	23f3      	movs	r3, #243	; 0xf3
 800df26:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800df28:	e006      	b.n	800df38 <nm_get_firmware_full_info+0x130>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800df2a:	23f4      	movs	r3, #244	; 0xf4
 800df2c:	77fb      	strb	r3, [r7, #31]
 800df2e:	e003      	b.n	800df38 <nm_get_firmware_full_info+0x130>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800df30:	23f4      	movs	r3, #244	; 0xf4
 800df32:	77fb      	strb	r3, [r7, #31]
 800df34:	e000      	b.n	800df38 <nm_get_firmware_full_info+0x130>
			}
		}
	}
EXIT:
 800df36:	bf00      	nop
	return ret;
 800df38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3720      	adds	r7, #32
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	000c0008 	.word	0x000c0008

0800df48 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800df50:	2300      	movs	r3, #0
 800df52:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode;

	if(NULL != arg) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00b      	beq.n	800df72 <nm_drv_init+0x2a>
		u8Mode = *((uint8 *)arg);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d002      	beq.n	800df6c <nm_drv_init+0x24>
 800df66:	7bbb      	ldrb	r3, [r7, #14]
 800df68:	2b04      	cmp	r3, #4
 800df6a:	d904      	bls.n	800df76 <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800df6c:	2301      	movs	r3, #1
 800df6e:	73bb      	strb	r3, [r7, #14]
 800df70:	e001      	b.n	800df76 <nm_drv_init+0x2e>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
 800df72:	2301      	movs	r3, #1
 800df74:	73bb      	strb	r3, [r7, #14]
	}

	ret = nm_bus_iface_init(NULL);
 800df76:	2000      	movs	r0, #0
 800df78:	f7ff fe37 	bl	800dbea <nm_bus_iface_init>
 800df7c:	4603      	mov	r3, r0
 800df7e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800df80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d135      	bne.n	800dff4 <nm_drv_init+0xac>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	printf("Chip ID %lx\n", nmi_get_chipid());
 800df88:	f7ff fba4 	bl	800d6d4 <nmi_get_chipid>
 800df8c:	4603      	mov	r3, r0
 800df8e:	4619      	mov	r1, r3
 800df90:	481d      	ldr	r0, [pc, #116]	; (800e008 <nm_drv_init+0xc0>)
 800df92:	f001 fcb1 	bl	800f8f8 <iprintf>
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
 800df96:	f000 fd09 	bl	800e9ac <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
 800df9a:	7bbb      	ldrb	r3, [r7, #14]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff fce5 	bl	800d96c <wait_for_bootrom>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800dfa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d11a      	bne.n	800dfe4 <nm_drv_init+0x9c>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800dfae:	7bbb      	ldrb	r3, [r7, #14]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7ff fd73 	bl	800da9c <wait_for_firmware_start>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800dfba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d112      	bne.n	800dfe8 <nm_drv_init+0xa0>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d017      	beq.n	800dff8 <nm_drv_init+0xb0>
 800dfc8:	7bbb      	ldrb	r3, [r7, #14]
 800dfca:	2b03      	cmp	r3, #3
 800dfcc:	d014      	beq.n	800dff8 <nm_drv_init+0xb0>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800dfce:	f7ff fb36 	bl	800d63e <enable_interrupts>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800dfd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d106      	bne.n	800dfec <nm_drv_init+0xa4>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
 800dfde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfe2:	e00c      	b.n	800dffe <nm_drv_init+0xb6>
		goto ERR2;
 800dfe4:	bf00      	nop
 800dfe6:	e002      	b.n	800dfee <nm_drv_init+0xa6>
		goto ERR2;
 800dfe8:	bf00      	nop
 800dfea:	e000      	b.n	800dfee <nm_drv_init+0xa6>
		goto ERR2;
 800dfec:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800dfee:	f7ff fe0d 	bl	800dc0c <nm_bus_iface_deinit>
 800dff2:	e002      	b.n	800dffa <nm_drv_init+0xb2>
		goto ERR1;
 800dff4:	bf00      	nop
 800dff6:	e000      	b.n	800dffa <nm_drv_init+0xb2>
ERR1:
 800dff8:	bf00      	nop
	return ret;
 800dffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	08011108 	.word	0x08011108

0800e00c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800e014:	f7ff fd8e 	bl	800db34 <chip_deinit>
 800e018:	4603      	mov	r3, r0
 800e01a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d113      	bne.n	800e04c <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800e024:	2000      	movs	r0, #0
 800e026:	f001 fbe7 	bl	800f7f8 <spi_flash_enable>
 800e02a:	4603      	mov	r3, r0
 800e02c:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10c      	bne.n	800e050 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
 800e036:	f7ff fde9 	bl	800dc0c <nm_bus_iface_deinit>
 800e03a:	4603      	mov	r3, r0
 800e03c:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800e03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d106      	bne.n	800e054 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800e046:	f000 fd01 	bl	800ea4c <nm_spi_deinit>
 800e04a:	e004      	b.n	800e056 <nm_drv_deinit+0x4a>
		goto ERR1;
 800e04c:	bf00      	nop
 800e04e:	e002      	b.n	800e056 <nm_drv_deinit+0x4a>
		goto ERR1;
 800e050:	bf00      	nop
 800e052:	e000      	b.n	800e056 <nm_drv_deinit+0x4a>
		goto ERR1;
 800e054:	bf00      	nop
#endif

ERR1:
	return ret;
 800e056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b086      	sub	sp, #24
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	460b      	mov	r3, r1
 800e06c:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800e076:	887b      	ldrh	r3, [r7, #2]
 800e078:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800e07a:	f107 030c 	add.w	r3, r7, #12
 800e07e:	4619      	mov	r1, r3
 800e080:	2003      	movs	r0, #3
 800e082:	f7fe f979 	bl	800c378 <nm_bus_ioctl>
 800e086:	4603      	mov	r3, r0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3718      	adds	r7, #24
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800e0a4:	887b      	ldrh	r3, [r7, #2]
 800e0a6:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800e0a8:	f107 030c 	add.w	r3, r7, #12
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	2003      	movs	r0, #3
 800e0b0:	f7fe f962 	bl	800c378 <nm_bus_ioctl>
 800e0b4:	4603      	mov	r3, r0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3718      	adds	r7, #24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
	...

0800e0c0 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	460a      	mov	r2, r1
 800e0ca:	71fb      	strb	r3, [r7, #7]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800e0d0:	79fb      	ldrb	r3, [r7, #7]
 800e0d2:	005a      	lsls	r2, r3, #1
 800e0d4:	79bb      	ldrb	r3, [r7, #6]
 800e0d6:	4053      	eors	r3, r2
 800e0d8:	4a03      	ldr	r2, [pc, #12]	; (800e0e8 <crc7_byte+0x28>)
 800e0da:	5cd3      	ldrb	r3, [r2, r3]
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	08011390 	.word	0x08011390

0800e0ec <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800e0fa:	e00a      	b.n	800e112 <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	1c5a      	adds	r2, r3, #1
 800e100:	60ba      	str	r2, [r7, #8]
 800e102:	781a      	ldrb	r2, [r3, #0]
 800e104:	7bfb      	ldrb	r3, [r7, #15]
 800e106:	4611      	mov	r1, r2
 800e108:	4618      	mov	r0, r3
 800e10a:	f7ff ffd9 	bl	800e0c0 <crc7_byte>
 800e10e:	4603      	mov	r3, r0
 800e110:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	1e5a      	subs	r2, r3, #1
 800e116:	607a      	str	r2, [r7, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d1ef      	bne.n	800e0fc <crc7+0x10>
	return crc;
 800e11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b088      	sub	sp, #32
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60b9      	str	r1, [r7, #8]
 800e130:	607a      	str	r2, [r7, #4]
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	4603      	mov	r3, r0
 800e136:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800e138:	2305      	movs	r3, #5
 800e13a:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800e13c:	2301      	movs	r3, #1
 800e13e:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800e140:	7bfb      	ldrb	r3, [r7, #15]
 800e142:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800e144:	7bfb      	ldrb	r3, [r7, #15]
 800e146:	3bc1      	subs	r3, #193	; 0xc1
 800e148:	2b0e      	cmp	r3, #14
 800e14a:	f200 80cc 	bhi.w	800e2e6 <spi_cmd+0x1be>
 800e14e:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <spi_cmd+0x2c>)
 800e150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e154:	0800e20d 	.word	0x0800e20d
 800e158:	0800e20d 	.word	0x0800e20d
 800e15c:	0800e269 	.word	0x0800e269
 800e160:	0800e1ad 	.word	0x0800e1ad
 800e164:	0800e1d7 	.word	0x0800e1d7
 800e168:	0800e1e9 	.word	0x0800e1e9
 800e16c:	0800e237 	.word	0x0800e237
 800e170:	0800e237 	.word	0x0800e237
 800e174:	0800e2ad 	.word	0x0800e2ad
 800e178:	0800e191 	.word	0x0800e191
 800e17c:	0800e2e7 	.word	0x0800e2e7
 800e180:	0800e2e7 	.word	0x0800e2e7
 800e184:	0800e2e7 	.word	0x0800e2e7
 800e188:	0800e2e7 	.word	0x0800e2e7
 800e18c:	0800e1fb 	.word	0x0800e1fb
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	0c1b      	lsrs	r3, r3, #16
 800e194:	b2db      	uxtb	r3, r3
 800e196:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	0a1b      	lsrs	r3, r3, #8
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e1a6:	2305      	movs	r3, #5
 800e1a8:	77fb      	strb	r3, [r7, #31]
		break;
 800e1aa:	e09f      	b.n	800e2ec <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	0a1b      	lsrs	r3, r3, #8
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800e1b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d004      	beq.n	800e1c6 <spi_cmd+0x9e>
 800e1bc:	7d7b      	ldrb	r3, [r7, #21]
 800e1be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e1d0:	2305      	movs	r3, #5
 800e1d2:	77fb      	strb	r3, [r7, #31]
		break;
 800e1d4:	e08a      	b.n	800e2ec <spi_cmd+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e1e2:	2305      	movs	r3, #5
 800e1e4:	77fb      	strb	r3, [r7, #31]
		break;
 800e1e6:	e081      	b.n	800e2ec <spi_cmd+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e1f4:	2305      	movs	r3, #5
 800e1f6:	77fb      	strb	r3, [r7, #31]
		break;
 800e1f8:	e078      	b.n	800e2ec <spi_cmd+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800e1fa:	23ff      	movs	r3, #255	; 0xff
 800e1fc:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800e1fe:	23ff      	movs	r3, #255	; 0xff
 800e200:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800e202:	23ff      	movs	r3, #255	; 0xff
 800e204:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e206:	2305      	movs	r3, #5
 800e208:	77fb      	strb	r3, [r7, #31]
		break;
 800e20a:	e06f      	b.n	800e2ec <spi_cmd+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	0c1b      	lsrs	r3, r3, #16
 800e210:	b2db      	uxtb	r3, r3
 800e212:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	0a1b      	lsrs	r3, r3, #8
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	0a1b      	lsrs	r3, r3, #8
 800e226:	b2db      	uxtb	r3, r3
 800e228:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	767b      	strb	r3, [r7, #25]
		len = 7;
 800e230:	2307      	movs	r3, #7
 800e232:	77fb      	strb	r3, [r7, #31]
		break;
 800e234:	e05a      	b.n	800e2ec <spi_cmd+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	0c1b      	lsrs	r3, r3, #16
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	0a1b      	lsrs	r3, r3, #8
 800e242:	b2db      	uxtb	r3, r3
 800e244:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	0c1b      	lsrs	r3, r3, #16
 800e250:	b2db      	uxtb	r3, r3
 800e252:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	0a1b      	lsrs	r3, r3, #8
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800e262:	2308      	movs	r3, #8
 800e264:	77fb      	strb	r3, [r7, #31]
		break;
 800e266:	e041      	b.n	800e2ec <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	0a1b      	lsrs	r3, r3, #8
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800e270:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e274:	2b00      	cmp	r3, #0
 800e276:	d004      	beq.n	800e282 <spi_cmd+0x15a>
 800e278:	7d7b      	ldrb	r3, [r7, #21]
 800e27a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	b2db      	uxtb	r3, r3
 800e286:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	0e1b      	lsrs	r3, r3, #24
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	0c1b      	lsrs	r3, r3, #16
 800e294:	b2db      	uxtb	r3, r3
 800e296:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	0a1b      	lsrs	r3, r3, #8
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800e2a6:	2308      	movs	r3, #8
 800e2a8:	77fb      	strb	r3, [r7, #31]
		break;
 800e2aa:	e01f      	b.n	800e2ec <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	0c1b      	lsrs	r3, r3, #16
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	0a1b      	lsrs	r3, r3, #8
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	0e1b      	lsrs	r3, r3, #24
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	0c1b      	lsrs	r3, r3, #16
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	0a1b      	lsrs	r3, r3, #8
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800e2e0:	2309      	movs	r3, #9
 800e2e2:	77fb      	strb	r3, [r7, #31]
		break;
 800e2e4:	e002      	b.n	800e2ec <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	77bb      	strb	r3, [r7, #30]
		break;
 800e2ea:	bf00      	nop
	}

	if (result) {
 800e2ec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d028      	beq.n	800e346 <spi_cmd+0x21e>
		if (!gu8Crc_off)
 800e2f4:	4b17      	ldr	r3, [pc, #92]	; (800e354 <spi_cmd+0x22c>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d114      	bne.n	800e326 <spi_cmd+0x1fe>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800e2fc:	7ffb      	ldrb	r3, [r7, #31]
 800e2fe:	3b01      	subs	r3, #1
 800e300:	461a      	mov	r2, r3
 800e302:	f107 0314 	add.w	r3, r7, #20
 800e306:	4619      	mov	r1, r3
 800e308:	207f      	movs	r0, #127	; 0x7f
 800e30a:	f7ff feef 	bl	800e0ec <crc7>
 800e30e:	4603      	mov	r3, r0
 800e310:	461a      	mov	r2, r3
 800e312:	7ffb      	ldrb	r3, [r7, #31]
 800e314:	3b01      	subs	r3, #1
 800e316:	0052      	lsls	r2, r2, #1
 800e318:	b2d2      	uxtb	r2, r2
 800e31a:	f107 0120 	add.w	r1, r7, #32
 800e31e:	440b      	add	r3, r1
 800e320:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800e324:	e002      	b.n	800e32c <spi_cmd+0x204>
		else
			len-=1;
 800e326:	7ffb      	ldrb	r3, [r7, #31]
 800e328:	3b01      	subs	r3, #1
 800e32a:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800e32c:	7ffb      	ldrb	r3, [r7, #31]
 800e32e:	b29a      	uxth	r2, r3
 800e330:	f107 0314 	add.w	r3, r7, #20
 800e334:	4611      	mov	r1, r2
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff feaa 	bl	800e090 <nmi_spi_write>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <spi_cmd+0x21e>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 800e342:	2300      	movs	r3, #0
 800e344:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800e346:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3720      	adds	r7, #32
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	24000794 	.word	0x24000794

0800e358 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800e362:	2301      	movs	r3, #1
 800e364:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800e366:	4b19      	ldr	r3, [pc, #100]	; (800e3cc <spi_data_rsp+0x74>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d102      	bne.n	800e374 <spi_data_rsp+0x1c>
		len = 2;
 800e36e:	2302      	movs	r3, #2
 800e370:	73fb      	strb	r3, [r7, #15]
 800e372:	e001      	b.n	800e378 <spi_data_rsp+0x20>
	else
		len = 3;
 800e374:	2303      	movs	r3, #3
 800e376:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800e378:	7bfb      	ldrb	r3, [r7, #15]
 800e37a:	b29a      	uxth	r2, r3
 800e37c:	f107 0308 	add.w	r3, r7, #8
 800e380:	4611      	mov	r1, r2
 800e382:	4618      	mov	r0, r3
 800e384:	f7ff fe6d 	bl	800e062 <nmi_spi_read>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d002      	beq.n	800e394 <spi_data_rsp+0x3c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
 800e38e:	2300      	movs	r3, #0
 800e390:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800e392:	e015      	b.n	800e3c0 <spi_data_rsp+0x68>
	}

	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800e394:	7bfb      	ldrb	r3, [r7, #15]
 800e396:	3b01      	subs	r3, #1
 800e398:	f107 0210 	add.w	r2, r7, #16
 800e39c:	4413      	add	r3, r2
 800e39e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d108      	bne.n	800e3b8 <spi_data_rsp+0x60>
 800e3a6:	7bfb      	ldrb	r3, [r7, #15]
 800e3a8:	3b02      	subs	r3, #2
 800e3aa:	f107 0210 	add.w	r2, r7, #16
 800e3ae:	4413      	add	r3, r2
 800e3b0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800e3b4:	2bc3      	cmp	r3, #195	; 0xc3
 800e3b6:	d002      	beq.n	800e3be <spi_data_rsp+0x66>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800e3bc:	e000      	b.n	800e3c0 <spi_data_rsp+0x68>
	}
_fail_:
 800e3be:	bf00      	nop

	return result;
 800e3c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	24000794 	.word	0x24000794

0800e3d0 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	73fb      	strb	r3, [r7, #15]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
 800e3de:	79fb      	ldrb	r3, [r7, #7]
 800e3e0:	2bcf      	cmp	r3, #207	; 0xcf
 800e3e2:	d005      	beq.n	800e3f0 <spi_cmd_rsp+0x20>
 800e3e4:	79fb      	ldrb	r3, [r7, #7]
 800e3e6:	2bc5      	cmp	r3, #197	; 0xc5
 800e3e8:	d002      	beq.n	800e3f0 <spi_cmd_rsp+0x20>
		 (cmd == CMD_TERMINATE) ||
 800e3ea:	79fb      	ldrb	r3, [r7, #7]
 800e3ec:	2bc6      	cmp	r3, #198	; 0xc6
 800e3ee:	d10b      	bne.n	800e408 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e3f0:	f107 030d 	add.w	r3, r7, #13
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7ff fe33 	bl	800e062 <nmi_spi_read>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d002      	beq.n	800e408 <spi_cmd_rsp+0x38>
			result = N_FAIL;
 800e402:	2300      	movs	r3, #0
 800e404:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e406:	e033      	b.n	800e470 <spi_cmd_rsp+0xa0>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800e408:	230a      	movs	r3, #10
 800e40a:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e40c:	f107 030d 	add.w	r3, r7, #13
 800e410:	2101      	movs	r1, #1
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff fe25 	bl	800e062 <nmi_spi_read>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d002      	beq.n	800e424 <spi_cmd_rsp+0x54>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800e41e:	2300      	movs	r3, #0
 800e420:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e422:	e025      	b.n	800e470 <spi_cmd_rsp+0xa0>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800e424:	7b7b      	ldrb	r3, [r7, #13]
 800e426:	79fa      	ldrb	r2, [r7, #7]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d007      	beq.n	800e43c <spi_cmd_rsp+0x6c>
 800e42c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e430:	b2da      	uxtb	r2, r3
 800e432:	3a01      	subs	r2, #1
 800e434:	b2d2      	uxtb	r2, r2
 800e436:	73ba      	strb	r2, [r7, #14]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	dce7      	bgt.n	800e40c <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800e43c:	230a      	movs	r3, #10
 800e43e:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e440:	f107 030d 	add.w	r3, r7, #13
 800e444:	2101      	movs	r1, #1
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff fe0b 	bl	800e062 <nmi_spi_read>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d002      	beq.n	800e458 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e456:	e00b      	b.n	800e470 <spi_cmd_rsp+0xa0>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800e458:	7b7b      	ldrb	r3, [r7, #13]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d007      	beq.n	800e46e <spi_cmd_rsp+0x9e>
 800e45e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e462:	b2da      	uxtb	r2, r3
 800e464:	3a01      	subs	r2, #1
 800e466:	b2d2      	uxtb	r2, r2
 800e468:	73ba      	strb	r2, [r7, #14]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	dce8      	bgt.n	800e440 <spi_cmd_rsp+0x70>

_fail_:
 800e46e:	bf00      	nop

	return result;
 800e470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	460b      	mov	r3, r1
 800e486:	807b      	strh	r3, [r7, #2]
 800e488:	4613      	mov	r3, r2
 800e48a:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800e48c:	2301      	movs	r3, #1
 800e48e:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800e494:	887b      	ldrh	r3, [r7, #2]
 800e496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e49a:	d802      	bhi.n	800e4a2 <spi_data_read+0x26>
			nbytes = sz;
 800e49c:	887b      	ldrh	r3, [r7, #2]
 800e49e:	827b      	strh	r3, [r7, #18]
 800e4a0:	e002      	b.n	800e4a8 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800e4a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e4a6:	827b      	strh	r3, [r7, #18]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800e4a8:	230a      	movs	r3, #10
 800e4aa:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e4ac:	f107 030b 	add.w	r3, r7, #11
 800e4b0:	2101      	movs	r1, #1
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff fdd5 	bl	800e062 <nmi_spi_read>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d002      	beq.n	800e4c4 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	747b      	strb	r3, [r7, #17]
				break;
 800e4c2:	e010      	b.n	800e4e6 <spi_data_read+0x6a>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
 800e4c4:	7afb      	ldrb	r3, [r7, #11]
 800e4c6:	091b      	lsrs	r3, r3, #4
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	f003 030f 	and.w	r3, r3, #15
 800e4ce:	2b0f      	cmp	r3, #15
 800e4d0:	d008      	beq.n	800e4e4 <spi_data_read+0x68>
				break;
		} while (retry--);
 800e4d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	3a01      	subs	r2, #1
 800e4da:	b292      	uxth	r2, r2
 800e4dc:	82fa      	strh	r2, [r7, #22]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1e4      	bne.n	800e4ac <spi_data_read+0x30>
 800e4e2:	e000      	b.n	800e4e6 <spi_data_read+0x6a>
				break;
 800e4e4:	bf00      	nop

		if (result == N_FAIL)
 800e4e6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d035      	beq.n	800e55a <spi_data_read+0xde>
			break;

		if (retry <= 0) {
 800e4ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	dc02      	bgt.n	800e4fc <spi_data_read+0x80>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	747b      	strb	r3, [r7, #17]
			break;
 800e4fa:	e02f      	b.n	800e55c <spi_data_read+0xe0>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800e4fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	4413      	add	r3, r2
 800e504:	8a7a      	ldrh	r2, [r7, #18]
 800e506:	4611      	mov	r1, r2
 800e508:	4618      	mov	r0, r3
 800e50a:	f7ff fdaa 	bl	800e062 <nmi_spi_read>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <spi_data_read+0x9e>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 800e514:	2300      	movs	r3, #0
 800e516:	747b      	strb	r3, [r7, #17]
			break;
 800e518:	e020      	b.n	800e55c <spi_data_read+0xe0>
		}
		if(!clockless)
 800e51a:	787b      	ldrb	r3, [r7, #1]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10f      	bne.n	800e540 <spi_data_read+0xc4>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800e520:	4b11      	ldr	r3, [pc, #68]	; (800e568 <spi_data_read+0xec>)
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10b      	bne.n	800e540 <spi_data_read+0xc4>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800e528:	f107 030c 	add.w	r3, r7, #12
 800e52c:	2102      	movs	r1, #2
 800e52e:	4618      	mov	r0, r3
 800e530:	f7ff fd97 	bl	800e062 <nmi_spi_read>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d002      	beq.n	800e540 <spi_data_read+0xc4>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 800e53a:	2300      	movs	r3, #0
 800e53c:	747b      	strb	r3, [r7, #17]
					break;
 800e53e:	e00d      	b.n	800e55c <spi_data_read+0xe0>
				}
			}
		}
		ix += nbytes;
 800e540:	8aba      	ldrh	r2, [r7, #20]
 800e542:	8a7b      	ldrh	r3, [r7, #18]
 800e544:	4413      	add	r3, r2
 800e546:	b29b      	uxth	r3, r3
 800e548:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800e54a:	8a7b      	ldrh	r3, [r7, #18]
 800e54c:	887a      	ldrh	r2, [r7, #2]
 800e54e:	1ad3      	subs	r3, r2, r3
 800e550:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800e552:	887b      	ldrh	r3, [r7, #2]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d19d      	bne.n	800e494 <spi_data_read+0x18>
 800e558:	e000      	b.n	800e55c <spi_data_read+0xe0>
			break;
 800e55a:	bf00      	nop

	return result;
 800e55c:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3718      	adds	r7, #24
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	24000794 	.word	0x24000794

0800e56c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	807b      	strh	r3, [r7, #2]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
 800e578:	2301      	movs	r3, #1
 800e57a:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800e57c:	2300      	movs	r3, #0
 800e57e:	81bb      	strh	r3, [r7, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800e580:	2300      	movs	r3, #0
 800e582:	82fb      	strh	r3, [r7, #22]
	do {
		if (sz <= DATA_PKT_SZ)
 800e584:	887b      	ldrh	r3, [r7, #2]
 800e586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e58a:	d802      	bhi.n	800e592 <spi_data_write+0x26>
			nbytes = sz;
 800e58c:	887b      	ldrh	r3, [r7, #2]
 800e58e:	82bb      	strh	r3, [r7, #20]
 800e590:	e002      	b.n	800e598 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800e592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e596:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800e598:	23f0      	movs	r3, #240	; 0xf0
 800e59a:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800e59c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d109      	bne.n	800e5b8 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800e5a4:	887b      	ldrh	r3, [r7, #2]
 800e5a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5aa:	d802      	bhi.n	800e5b2 <spi_data_write+0x46>
				order = 0x3;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	74bb      	strb	r3, [r7, #18]
 800e5b0:	e00b      	b.n	800e5ca <spi_data_write+0x5e>
			else
				order = 0x1;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	74bb      	strb	r3, [r7, #18]
 800e5b6:	e008      	b.n	800e5ca <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800e5b8:	887b      	ldrh	r3, [r7, #2]
 800e5ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5be:	d802      	bhi.n	800e5c6 <spi_data_write+0x5a>
				order = 0x3;
 800e5c0:	2303      	movs	r3, #3
 800e5c2:	74bb      	strb	r3, [r7, #18]
 800e5c4:	e001      	b.n	800e5ca <spi_data_write+0x5e>
			else
				order = 0x2;
 800e5c6:	2302      	movs	r3, #2
 800e5c8:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800e5ca:	7c7a      	ldrb	r2, [r7, #17]
 800e5cc:	7cbb      	ldrb	r3, [r7, #18]
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800e5d4:	f107 0311 	add.w	r3, r7, #17
 800e5d8:	2101      	movs	r1, #1
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff fd58 	bl	800e090 <nmi_spi_write>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d002      	beq.n	800e5ec <spi_data_write+0x80>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	74fb      	strb	r3, [r7, #19]
			break;
 800e5ea:	e02a      	b.n	800e642 <spi_data_write+0xd6>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800e5ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	8aba      	ldrh	r2, [r7, #20]
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7ff fd49 	bl	800e090 <nmi_spi_write>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <spi_data_write+0x9e>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
 800e604:	2300      	movs	r3, #0
 800e606:	74fb      	strb	r3, [r7, #19]
			break;
 800e608:	e01b      	b.n	800e642 <spi_data_write+0xd6>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800e60a:	4b11      	ldr	r3, [pc, #68]	; (800e650 <spi_data_write+0xe4>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10b      	bne.n	800e62a <spi_data_write+0xbe>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800e612:	f107 030c 	add.w	r3, r7, #12
 800e616:	2102      	movs	r1, #2
 800e618:	4618      	mov	r0, r3
 800e61a:	f7ff fd39 	bl	800e090 <nmi_spi_write>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <spi_data_write+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
 800e624:	2300      	movs	r3, #0
 800e626:	74fb      	strb	r3, [r7, #19]
				break;
 800e628:	e00b      	b.n	800e642 <spi_data_write+0xd6>
			}
		}

		ix += nbytes;
 800e62a:	8afa      	ldrh	r2, [r7, #22]
 800e62c:	8abb      	ldrh	r3, [r7, #20]
 800e62e:	4413      	add	r3, r2
 800e630:	b29b      	uxth	r3, r3
 800e632:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800e634:	887a      	ldrh	r2, [r7, #2]
 800e636:	8abb      	ldrh	r3, [r7, #20]
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800e63c:	887b      	ldrh	r3, [r7, #2]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1a0      	bne.n	800e584 <spi_data_write+0x18>


	return result;
 800e642:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3718      	adds	r7, #24
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	24000794 	.word	0x24000794

0800e654 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af02      	add	r7, sp, #8
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800e65e:	230a      	movs	r3, #10
 800e660:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800e662:	2301      	movs	r3, #1
 800e664:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800e666:	23c9      	movs	r3, #201	; 0xc9
 800e668:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	733b      	strb	r3, [r7, #12]

_RETRY_:
	if (addr <= 0x30)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2b30      	cmp	r3, #48	; 0x30
 800e672:	d804      	bhi.n	800e67e <spi_write_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800e674:	23c3      	movs	r3, #195	; 0xc3
 800e676:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800e678:	2301      	movs	r3, #1
 800e67a:	733b      	strb	r3, [r7, #12]
 800e67c:	e003      	b.n	800e686 <spi_write_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
 800e67e:	23c9      	movs	r3, #201	; 0xc9
 800e680:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800e686:	7b78      	ldrb	r0, [r7, #13]
 800e688:	7b3b      	ldrb	r3, [r7, #12]
 800e68a:	9300      	str	r3, [sp, #0]
 800e68c:	2304      	movs	r3, #4
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	6879      	ldr	r1, [r7, #4]
 800e692:	f7ff fd49 	bl	800e128 <spi_cmd>
 800e696:	4603      	mov	r3, r0
 800e698:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e69a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d109      	bne.n	800e6b6 <spi_write_reg+0x62>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e6a2:	7b7b      	ldrb	r3, [r7, #13]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7ff fe93 	bl	800e3d0 <spi_cmd_rsp>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e6ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6b2:	2b01      	cmp	r3, #1
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
		goto _FAIL_;
	}

#endif
_FAIL_:
 800e6b4:	e000      	b.n	800e6b8 <spi_write_reg+0x64>
		goto _FAIL_;
 800e6b6:	bf00      	nop
	if(result != N_OK)
 800e6b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d017      	beq.n	800e6f0 <spi_write_reg+0x9c>
	{
		nm_bsp_sleep(1);
 800e6c0:	2001      	movs	r0, #1
 800e6c2:	f7fd fd01 	bl	800c0c8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	9300      	str	r3, [sp, #0]
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	20cf      	movs	r0, #207	; 0xcf
 800e6d2:	f7ff fd29 	bl	800e128 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e6d6:	20cf      	movs	r0, #207	; 0xcf
 800e6d8:	f7ff fe7a 	bl	800e3d0 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 800e6dc:	2001      	movs	r0, #1
 800e6de:	f7fd fcf3 	bl	800c0c8 <nm_bsp_sleep>
		retry--;
 800e6e2:	7bfb      	ldrb	r3, [r7, #15]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e6e8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d000      	beq.n	800e6f0 <spi_write_reg+0x9c>
 800e6ee:	e7be      	b.n	800e66e <spi_write_reg+0x1a>
	}

	return result;
 800e6f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b088      	sub	sp, #32
 800e700:	af02      	add	r7, sp, #8
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	4613      	mov	r3, r2
 800e708:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800e70a:	230a      	movs	r3, #10
 800e70c:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800e70e:	23c7      	movs	r3, #199	; 0xc7
 800e710:	757b      	strb	r3, [r7, #21]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800e712:	88fb      	ldrh	r3, [r7, #6]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d101      	bne.n	800e71c <nm_spi_write+0x20>
		size = 2;
 800e718:	2302      	movs	r3, #2
 800e71a:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800e71c:	88fa      	ldrh	r2, [r7, #6]
 800e71e:	7d78      	ldrb	r0, [r7, #21]
 800e720:	2300      	movs	r3, #0
 800e722:	9300      	str	r3, [sp, #0]
 800e724:	4613      	mov	r3, r2
 800e726:	2200      	movs	r2, #0
 800e728:	68f9      	ldr	r1, [r7, #12]
 800e72a:	f7ff fcfd 	bl	800e128 <spi_cmd>
 800e72e:	4603      	mov	r3, r0
 800e730:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d11e      	bne.n	800e778 <nm_spi_write+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e73a:	7d7b      	ldrb	r3, [r7, #21]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7ff fe47 	bl	800e3d0 <spi_cmd_rsp>
 800e742:	4603      	mov	r3, r0
 800e744:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d116      	bne.n	800e77c <nm_spi_write+0x80>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800e74e:	88fb      	ldrh	r3, [r7, #6]
 800e750:	4619      	mov	r1, r3
 800e752:	68b8      	ldr	r0, [r7, #8]
 800e754:	f7ff ff0a 	bl	800e56c <spi_data_write>
 800e758:	4603      	mov	r3, r0
 800e75a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e760:	2b01      	cmp	r3, #1
 800e762:	d10d      	bne.n	800e780 <nm_spi_write+0x84>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800e764:	7d7b      	ldrb	r3, [r7, #21]
 800e766:	4618      	mov	r0, r3
 800e768:	f7ff fdf6 	bl	800e358 <spi_data_rsp>
 800e76c:	4603      	mov	r3, r0
 800e76e:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e774:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}

_FAIL_:
 800e776:	e004      	b.n	800e782 <nm_spi_write+0x86>
		goto _FAIL_;
 800e778:	bf00      	nop
 800e77a:	e002      	b.n	800e782 <nm_spi_write+0x86>
		goto _FAIL_;
 800e77c:	bf00      	nop
 800e77e:	e000      	b.n	800e782 <nm_spi_write+0x86>
		goto _FAIL_;
 800e780:	bf00      	nop
	if(result != N_OK)
 800e782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d017      	beq.n	800e7ba <nm_spi_write+0xbe>
	{
		nm_bsp_sleep(1);
 800e78a:	2001      	movs	r0, #1
 800e78c:	f7fd fc9c 	bl	800c0c8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e790:	2300      	movs	r3, #0
 800e792:	9300      	str	r3, [sp, #0]
 800e794:	2300      	movs	r3, #0
 800e796:	2200      	movs	r2, #0
 800e798:	2100      	movs	r1, #0
 800e79a:	20cf      	movs	r0, #207	; 0xcf
 800e79c:	f7ff fcc4 	bl	800e128 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e7a0:	20cf      	movs	r0, #207	; 0xcf
 800e7a2:	f7ff fe15 	bl	800e3d0 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800e7a6:	2001      	movs	r0, #1
 800e7a8:	f7fd fc8e 	bl	800c0c8 <nm_bsp_sleep>
		retry--;
 800e7ac:	7dbb      	ldrb	r3, [r7, #22]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800e7b2:	7dbb      	ldrb	r3, [r7, #22]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d000      	beq.n	800e7ba <nm_spi_write+0xbe>
 800e7b8:	e7ab      	b.n	800e712 <nm_spi_write+0x16>
	}


	return result;
 800e7ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b086      	sub	sp, #24
 800e7ca:	af02      	add	r7, sp, #8
 800e7cc:	6078      	str	r0, [r7, #4]
 800e7ce:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800e7d0:	230a      	movs	r3, #10
 800e7d2:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_READ;
 800e7d8:	23ca      	movs	r3, #202	; 0xca
 800e7da:	737b      	strb	r3, [r7, #13]
	uint8 tmp[4];
	uint8 clockless = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	733b      	strb	r3, [r7, #12]

_RETRY_:

	if (addr <= 0xff)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2bff      	cmp	r3, #255	; 0xff
 800e7e4:	d804      	bhi.n	800e7f0 <spi_read_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800e7e6:	23c4      	movs	r3, #196	; 0xc4
 800e7e8:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	733b      	strb	r3, [r7, #12]
 800e7ee:	e003      	b.n	800e7f8 <spi_read_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
 800e7f0:	23ca      	movs	r3, #202	; 0xca
 800e7f2:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800e7f8:	7b78      	ldrb	r0, [r7, #13]
 800e7fa:	7b3b      	ldrb	r3, [r7, #12]
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	2304      	movs	r3, #4
 800e800:	2200      	movs	r2, #0
 800e802:	6879      	ldr	r1, [r7, #4]
 800e804:	f7ff fc90 	bl	800e128 <spi_cmd>
 800e808:	4603      	mov	r3, r0
 800e80a:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e80c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d124      	bne.n	800e85e <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e814:	7b7b      	ldrb	r3, [r7, #13]
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff fdda 	bl	800e3d0 <spi_cmd_rsp>
 800e81c:	4603      	mov	r3, r0
 800e81e:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d11c      	bne.n	800e862 <spi_read_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800e828:	7b3a      	ldrb	r2, [r7, #12]
 800e82a:	f107 0308 	add.w	r3, r7, #8
 800e82e:	2104      	movs	r1, #4
 800e830:	4618      	mov	r0, r3
 800e832:	f7ff fe23 	bl	800e47c <spi_data_read>
 800e836:	4603      	mov	r3, r0
 800e838:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e83a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d111      	bne.n	800e866 <spi_read_reg+0xa0>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
 800e842:	7a3b      	ldrb	r3, [r7, #8]
 800e844:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800e846:	7a7b      	ldrb	r3, [r7, #9]
 800e848:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800e84a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800e84c:	7abb      	ldrb	r3, [r7, #10]
 800e84e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800e850:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800e852:	7afb      	ldrb	r3, [r7, #11]
 800e854:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800e856:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]
 800e85c:	e004      	b.n	800e868 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e85e:	bf00      	nop
 800e860:	e002      	b.n	800e868 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e862:	bf00      	nop
 800e864:	e000      	b.n	800e868 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e866:	bf00      	nop

_FAIL_:
	if(result != N_OK)
 800e868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d017      	beq.n	800e8a0 <spi_read_reg+0xda>
	{

		nm_bsp_sleep(1);
 800e870:	2001      	movs	r0, #1
 800e872:	f7fd fc29 	bl	800c0c8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e876:	2300      	movs	r3, #0
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	2300      	movs	r3, #0
 800e87c:	2200      	movs	r2, #0
 800e87e:	2100      	movs	r1, #0
 800e880:	20cf      	movs	r0, #207	; 0xcf
 800e882:	f7ff fc51 	bl	800e128 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e886:	20cf      	movs	r0, #207	; 0xcf
 800e888:	f7ff fda2 	bl	800e3d0 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 800e88c:	2001      	movs	r0, #1
 800e88e:	f7fd fc1b 	bl	800c0c8 <nm_bsp_sleep>
		retry--;
 800e892:	7bfb      	ldrb	r3, [r7, #15]
 800e894:	3b01      	subs	r3, #1
 800e896:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e898:	7bfb      	ldrb	r3, [r7, #15]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d000      	beq.n	800e8a0 <spi_read_reg+0xda>
 800e89e:	e79f      	b.n	800e7e0 <spi_read_reg+0x1a>
	}

	return result;
 800e8a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3710      	adds	r7, #16
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b088      	sub	sp, #32
 800e8b0:	af02      	add	r7, sp, #8
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800e8ba:	23c8      	movs	r3, #200	; 0xc8
 800e8bc:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800e8be:	230a      	movs	r3, #10
 800e8c0:	75bb      	strb	r3, [r7, #22]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	757b      	strb	r3, [r7, #21]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
 800e8c6:	88fb      	ldrh	r3, [r7, #6]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d103      	bne.n	800e8d4 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800e8d4:	88fa      	ldrh	r2, [r7, #6]
 800e8d6:	7d38      	ldrb	r0, [r7, #20]
 800e8d8:	2300      	movs	r3, #0
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	2200      	movs	r2, #0
 800e8e0:	68f9      	ldr	r1, [r7, #12]
 800e8e2:	f7ff fc21 	bl	800e128 <spi_cmd>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e8ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d125      	bne.n	800e93e <nm_spi_read+0x92>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e8f2:	7d3b      	ldrb	r3, [r7, #20]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7ff fd6b 	bl	800e3d0 <spi_cmd_rsp>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e8fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e902:	2b01      	cmp	r3, #1
 800e904:	d11d      	bne.n	800e942 <nm_spi_read+0x96>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800e906:	7d7b      	ldrb	r3, [r7, #21]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00c      	beq.n	800e926 <nm_spi_read+0x7a>
	{
		result = spi_data_read(tmp, size,0);
 800e90c:	88f9      	ldrh	r1, [r7, #6]
 800e90e:	f107 0310 	add.w	r3, r7, #16
 800e912:	2200      	movs	r2, #0
 800e914:	4618      	mov	r0, r3
 800e916:	f7ff fdb1 	bl	800e47c <spi_data_read>
 800e91a:	4603      	mov	r3, r0
 800e91c:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800e91e:	7c3a      	ldrb	r2, [r7, #16]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	701a      	strb	r2, [r3, #0]
 800e924:	e007      	b.n	800e936 <nm_spi_read+0x8a>
	}
	else
		result = spi_data_read(buf, size,0);
 800e926:	88fb      	ldrh	r3, [r7, #6]
 800e928:	2200      	movs	r2, #0
 800e92a:	4619      	mov	r1, r3
 800e92c:	68b8      	ldr	r0, [r7, #8]
 800e92e:	f7ff fda5 	bl	800e47c <spi_data_read>
 800e932:	4603      	mov	r3, r0
 800e934:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800e936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e93a:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
		goto _FAIL_;
	}
#endif

_FAIL_:
 800e93c:	e002      	b.n	800e944 <nm_spi_read+0x98>
		goto _FAIL_;
 800e93e:	bf00      	nop
 800e940:	e000      	b.n	800e944 <nm_spi_read+0x98>
		goto _FAIL_;
 800e942:	bf00      	nop
	if(result != N_OK)
 800e944:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d017      	beq.n	800e97c <nm_spi_read+0xd0>
	{
		nm_bsp_sleep(1);
 800e94c:	2001      	movs	r0, #1
 800e94e:	f7fd fbbb 	bl	800c0c8 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e952:	2300      	movs	r3, #0
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	2300      	movs	r3, #0
 800e958:	2200      	movs	r2, #0
 800e95a:	2100      	movs	r1, #0
 800e95c:	20cf      	movs	r0, #207	; 0xcf
 800e95e:	f7ff fbe3 	bl	800e128 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e962:	20cf      	movs	r0, #207	; 0xcf
 800e964:	f7ff fd34 	bl	800e3d0 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800e968:	2001      	movs	r0, #1
 800e96a:	f7fd fbad 	bl	800c0c8 <nm_bsp_sleep>
		retry--;
 800e96e:	7dbb      	ldrb	r3, [r7, #22]
 800e970:	3b01      	subs	r3, #1
 800e972:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800e974:	7dbb      	ldrb	r3, [r7, #22]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d000      	beq.n	800e97c <nm_spi_read+0xd0>
 800e97a:	e7a4      	b.n	800e8c6 <nm_spi_read+0x1a>
	}

	return result;
 800e97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3718      	adds	r7, #24
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e98e:	2300      	movs	r3, #0
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	2300      	movs	r3, #0
 800e994:	2200      	movs	r2, #0
 800e996:	2100      	movs	r1, #0
 800e998:	20cf      	movs	r0, #207	; 0xcf
 800e99a:	f7ff fbc5 	bl	800e128 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 800e99e:	20cf      	movs	r0, #207	; 0xcf
 800e9a0:	f7ff fd16 	bl	800e3d0 <spi_cmd_rsp>
	return M2M_SUCCESS;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	603b      	str	r3, [r7, #0]


	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800e9b6:	4b24      	ldr	r3, [pc, #144]	; (800ea48 <nm_spi_init+0x9c>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 800e9bc:	463b      	mov	r3, r7
 800e9be:	4619      	mov	r1, r3
 800e9c0:	f64e 0024 	movw	r0, #59428	; 0xe824
 800e9c4:	f7ff feff 	bl	800e7c6 <spi_read_reg>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d10d      	bne.n	800e9ea <nm_spi_init+0x3e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800e9ce:	4b1e      	ldr	r3, [pc, #120]	; (800ea48 <nm_spi_init+0x9c>)
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 800e9d4:	463b      	mov	r3, r7
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	f64e 0024 	movw	r0, #59428	; 0xe824
 800e9dc:	f7ff fef3 	bl	800e7c6 <spi_read_reg>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <nm_spi_init+0x3e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e02a      	b.n	800ea40 <nm_spi_init+0x94>
		}
	}
	if(gu8Crc_off == 0)
 800e9ea:	4b17      	ldr	r3, [pc, #92]	; (800ea48 <nm_spi_init+0x9c>)
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d119      	bne.n	800ea26 <nm_spi_init+0x7a>
	{
		reg &= ~0xc;	/* disable crc checking */
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	f023 030c 	bic.w	r3, r3, #12
 800e9f8:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea00:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800ea08:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	f64e 0024 	movw	r0, #59428	; 0xe824
 800ea12:	f7ff fe1f 	bl	800e654 <spi_write_reg>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d101      	bne.n	800ea20 <nm_spi_init+0x74>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	e00f      	b.n	800ea40 <nm_spi_init+0x94>
		}
		gu8Crc_off = 1;
 800ea20:	4b09      	ldr	r3, [pc, #36]	; (800ea48 <nm_spi_init+0x9c>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
 800ea26:	1d3b      	adds	r3, r7, #4
 800ea28:	4619      	mov	r1, r3
 800ea2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ea2e:	f7ff feca 	bl	800e7c6 <spi_read_reg>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d102      	bne.n	800ea3e <nm_spi_init+0x92>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
 800ea38:	f06f 0305 	mvn.w	r3, #5
 800ea3c:	e000      	b.n	800ea40 <nm_spi_init+0x94>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	//spi_init_pkt_sz();


	return M2M_SUCCESS;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	24000794 	.word	0x24000794

0800ea4c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800ea50:	4b04      	ldr	r3, [pc, #16]	; (800ea64 <nm_spi_deinit+0x18>)
 800ea52:	2200      	movs	r2, #0
 800ea54:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	24000794 	.word	0x24000794

0800ea68 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
 800ea70:	f107 030c 	add.w	r3, r7, #12
 800ea74:	4619      	mov	r1, r3
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f7ff fea5 	bl	800e7c6 <spi_read_reg>

	return u32Val;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3710      	adds	r7, #16
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b084      	sub	sp, #16
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
 800ea8e:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 800ea90:	6839      	ldr	r1, [r7, #0]
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7ff fe97 	bl	800e7c6 <spi_read_reg>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800ea9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d102      	bne.n	800eaaa <nm_spi_read_reg_with_ret+0x24>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	73fb      	strb	r3, [r7, #15]
 800eaa8:	e001      	b.n	800eaae <nm_spi_read_reg_with_ret+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800eaaa:	23fa      	movs	r3, #250	; 0xfa
 800eaac:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800eaae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b084      	sub	sp, #16
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
 800eac4:	6839      	ldr	r1, [r7, #0]
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7ff fdc4 	bl	800e654 <spi_write_reg>
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800ead0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d102      	bne.n	800eade <nm_spi_write_reg+0x24>
 800ead8:	2300      	movs	r3, #0
 800eada:	73fb      	strb	r3, [r7, #15]
 800eadc:	e001      	b.n	800eae2 <nm_spi_write_reg+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800eade:	23fa      	movs	r3, #250	; 0xfa
 800eae0:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800eae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b086      	sub	sp, #24
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	60f8      	str	r0, [r7, #12]
 800eaf6:	60b9      	str	r1, [r7, #8]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800eafc:	88fb      	ldrh	r3, [r7, #6]
 800eafe:	461a      	mov	r2, r3
 800eb00:	68b9      	ldr	r1, [r7, #8]
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7ff fed2 	bl	800e8ac <nm_spi_read>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800eb0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d102      	bne.n	800eb1a <nm_spi_read_block+0x2c>
 800eb14:	2300      	movs	r3, #0
 800eb16:	75fb      	strb	r3, [r7, #23]
 800eb18:	e001      	b.n	800eb1e <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800eb1a:	23fa      	movs	r3, #250	; 0xfa
 800eb1c:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800eb1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3718      	adds	r7, #24
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b086      	sub	sp, #24
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	60f8      	str	r0, [r7, #12]
 800eb32:	60b9      	str	r1, [r7, #8]
 800eb34:	4613      	mov	r3, r2
 800eb36:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800eb38:	88fb      	ldrh	r3, [r7, #6]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	68b9      	ldr	r1, [r7, #8]
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f7ff fddc 	bl	800e6fc <nm_spi_write>
 800eb44:	4603      	mov	r3, r0
 800eb46:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800eb48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d102      	bne.n	800eb56 <nm_spi_write_block+0x2c>
 800eb50:	2300      	movs	r3, #0
 800eb52:	75fb      	strb	r3, [r7, #23]
 800eb54:	e001      	b.n	800eb5a <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800eb56:	23fa      	movs	r3, #250	; 0xfa
 800eb58:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800eb5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3718      	adds	r7, #24
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
	...

0800eb68 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b088      	sub	sp, #32
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60b9      	str	r1, [r7, #8]
 800eb70:	607b      	str	r3, [r7, #4]
 800eb72:	4603      	mov	r3, r0
 800eb74:	73fb      	strb	r3, [r7, #15]
 800eb76:	4613      	mov	r3, r2
 800eb78:	73bb      	strb	r3, [r7, #14]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
 800eb7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f000 808d 	beq.w	800ec9c <Socket_ReadSocketData+0x134>
 800eb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb86:	4a47      	ldr	r2, [pc, #284]	; (800eca4 <Socket_ReadSocketData+0x13c>)
 800eb88:	011b      	lsls	r3, r3, #4
 800eb8a:	4413      	add	r3, r2
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f000 8084 	beq.w	800ec9c <Socket_ReadSocketData+0x134>
 800eb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb98:	4a42      	ldr	r2, [pc, #264]	; (800eca4 <Socket_ReadSocketData+0x13c>)
 800eb9a:	011b      	lsls	r3, r3, #4
 800eb9c:	4413      	add	r3, r2
 800eb9e:	3304      	adds	r3, #4
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d079      	beq.n	800ec9c <Socket_ReadSocketData+0x134>
 800eba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebac:	4a3d      	ldr	r2, [pc, #244]	; (800eca4 <Socket_ReadSocketData+0x13c>)
 800ebae:	011b      	lsls	r3, r3, #4
 800ebb0:	4413      	add	r3, r2
 800ebb2:	330a      	adds	r3, #10
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d16f      	bne.n	800ec9c <Socket_ReadSocketData+0x134>
	{
		uint32	u32Address = u32StartAddress;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebc4:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	767b      	strb	r3, [r7, #25]
			u16Read = u16ReadCount;
 800ebca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ebcc:	837b      	strh	r3, [r7, #26]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
 800ebce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebd2:	4a34      	ldr	r2, [pc, #208]	; (800eca4 <Socket_ReadSocketData+0x13c>)
 800ebd4:	011b      	lsls	r3, r3, #4
 800ebd6:	4413      	add	r3, r2
 800ebd8:	3304      	adds	r3, #4
 800ebda:	881b      	ldrh	r3, [r3, #0]
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	8b7a      	ldrh	r2, [r7, #26]
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	82fb      	strh	r3, [r7, #22]
			if(s16Diff > 0)
 800ebe6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	dd09      	ble.n	800ec02 <Socket_ReadSocketData+0x9a>
			{
				u8SetRxDone = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	767b      	strb	r3, [r7, #25]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
 800ebf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebf6:	4a2b      	ldr	r2, [pc, #172]	; (800eca4 <Socket_ReadSocketData+0x13c>)
 800ebf8:	011b      	lsls	r3, r3, #4
 800ebfa:	4413      	add	r3, r2
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	881b      	ldrh	r3, [r3, #0]
 800ec00:	837b      	strh	r3, [r7, #26]
			}

			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
 800ec02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec06:	4a27      	ldr	r2, [pc, #156]	; (800eca4 <Socket_ReadSocketData+0x13c>)
 800ec08:	011b      	lsls	r3, r3, #4
 800ec0a:	4413      	add	r3, r2
 800ec0c:	6819      	ldr	r1, [r3, #0]
 800ec0e:	7e7b      	ldrb	r3, [r7, #25]
 800ec10:	8b7a      	ldrh	r2, [r7, #26]
 800ec12:	69f8      	ldr	r0, [r7, #28]
 800ec14:	f7fe f882 	bl	800cd1c <hif_receive>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d13d      	bne.n	800ec9a <Socket_ReadSocketData+0x132>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
 800ec1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec22:	4a20      	ldr	r2, [pc, #128]	; (800eca4 <Socket_ReadSocketData+0x13c>)
 800ec24:	011b      	lsls	r3, r3, #4
 800ec26:	4413      	add	r3, r2
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
 800ec2e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	88da      	ldrh	r2, [r3, #6]
 800ec3a:	8b7b      	ldrh	r3, [r7, #26]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
 800ec44:	4b18      	ldr	r3, [pc, #96]	; (800eca8 <Socket_ReadSocketData+0x140>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d006      	beq.n	800ec5a <Socket_ReadSocketData+0xf2>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
 800ec4c:	4b16      	ldr	r3, [pc, #88]	; (800eca8 <Socket_ReadSocketData+0x140>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	7bb9      	ldrb	r1, [r7, #14]
 800ec52:	f997 000f 	ldrsb.w	r0, [r7, #15]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	4798      	blx	r3

				u16ReadCount -= u16Read;
 800ec5a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec5c:	8b7b      	ldrh	r3, [r7, #26]
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	853b      	strh	r3, [r7, #40]	; 0x28
				u32Address += u16Read;
 800ec62:	8b7b      	ldrh	r3, [r7, #26]
 800ec64:	69fa      	ldr	r2, [r7, #28]
 800ec66:	4413      	add	r3, r2
 800ec68:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
 800ec6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec6e:	4a0d      	ldr	r2, [pc, #52]	; (800eca4 <Socket_ReadSocketData+0x13c>)
 800ec70:	011b      	lsls	r3, r3, #4
 800ec72:	4413      	add	r3, r2
 800ec74:	330a      	adds	r3, #10
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d109      	bne.n	800ec92 <Socket_ReadSocketData+0x12a>
 800ec7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d006      	beq.n	800ec92 <Socket_ReadSocketData+0x12a>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 800ec84:	2301      	movs	r3, #1
 800ec86:	2200      	movs	r2, #0
 800ec88:	2100      	movs	r1, #0
 800ec8a:	2000      	movs	r0, #0
 800ec8c:	f7fe f846 	bl	800cd1c <hif_receive>
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
 800ec90:	e004      	b.n	800ec9c <Socket_ReadSocketData+0x134>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
 800ec92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d196      	bne.n	800ebc6 <Socket_ReadSocketData+0x5e>
	}
}
 800ec98:	e000      	b.n	800ec9c <Socket_ReadSocketData+0x134>
				break;
 800ec9a:	bf00      	nop
}
 800ec9c:	bf00      	nop
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	24000a64 	.word	0x24000a64
 800eca8:	24000b14 	.word	0x24000b14

0800ecac <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b0ba      	sub	sp, #232	; 0xe8
 800ecb0:	af02      	add	r7, sp, #8
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	603a      	str	r2, [r7, #0]
 800ecb6:	71fb      	strb	r3, [r7, #7]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	80bb      	strh	r3, [r7, #4]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
 800ecbc:	79fb      	ldrb	r3, [r7, #7]
 800ecbe:	2b41      	cmp	r3, #65	; 0x41
 800ecc0:	d002      	beq.n	800ecc8 <m2m_ip_cb+0x1c>
 800ecc2:	79fb      	ldrb	r3, [r7, #7]
 800ecc4:	2b54      	cmp	r3, #84	; 0x54
 800ecc6:	d11c      	bne.n	800ed02 <m2m_ip_cb+0x56>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
 800ecc8:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800eccc:	2300      	movs	r3, #0
 800ecce:	2204      	movs	r2, #4
 800ecd0:	6838      	ldr	r0, [r7, #0]
 800ecd2:	f7fe f823 	bl	800cd1c <hif_receive>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f040 81f3 	bne.w	800f0c4 <m2m_ip_cb+0x418>
		{
			strBind.status = strBindReply.s8Status;
 800ecde:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
 800ece2:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			if(gpfAppSocketCb)
 800ece6:	4bc2      	ldr	r3, [pc, #776]	; (800eff0 <m2m_ip_cb+0x344>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 81ea 	beq.w	800f0c4 <m2m_ip_cb+0x418>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
 800ecf0:	4bbf      	ldr	r3, [pc, #764]	; (800eff0 <m2m_ip_cb+0x344>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f997 00cc 	ldrsb.w	r0, [r7, #204]	; 0xcc
 800ecf8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800ecfc:	2101      	movs	r1, #1
 800ecfe:	4798      	blx	r3
	{
 800ed00:	e1e0      	b.n	800f0c4 <m2m_ip_cb+0x418>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
 800ed02:	79fb      	ldrb	r3, [r7, #7]
 800ed04:	2b42      	cmp	r3, #66	; 0x42
 800ed06:	d11c      	bne.n	800ed42 <m2m_ip_cb+0x96>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
 800ed08:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	2204      	movs	r2, #4
 800ed10:	6838      	ldr	r0, [r7, #0]
 800ed12:	f7fe f803 	bl	800cd1c <hif_receive>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f040 81da 	bne.w	800f0d2 <m2m_ip_cb+0x426>
		{
			strListen.status = strListenReply.s8Status;
 800ed1e:	f997 30c5 	ldrsb.w	r3, [r7, #197]	; 0xc5
 800ed22:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			if(gpfAppSocketCb)
 800ed26:	4bb2      	ldr	r3, [pc, #712]	; (800eff0 <m2m_ip_cb+0x344>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f000 81d1 	beq.w	800f0d2 <m2m_ip_cb+0x426>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
 800ed30:	4baf      	ldr	r3, [pc, #700]	; (800eff0 <m2m_ip_cb+0x344>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f997 00c4 	ldrsb.w	r0, [r7, #196]	; 0xc4
 800ed38:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800ed3c:	2102      	movs	r1, #2
 800ed3e:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
 800ed40:	e1c7      	b.n	800f0d2 <m2m_ip_cb+0x426>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
 800ed42:	79fb      	ldrb	r3, [r7, #7]
 800ed44:	2b43      	cmp	r3, #67	; 0x43
 800ed46:	d170      	bne.n	800ee2a <m2m_ip_cb+0x17e>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
 800ed48:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	220c      	movs	r2, #12
 800ed50:	6838      	ldr	r0, [r7, #0]
 800ed52:	f7fd ffe3 	bl	800cd1c <hif_receive>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f040 81ba 	bne.w	800f0d2 <m2m_ip_cb+0x426>
			if(strAcceptReply.sConnectedSock >= 0)
 800ed5e:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	db44      	blt.n	800edf0 <m2m_ip_cb+0x144>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
 800ed66:	f997 30bc 	ldrsb.w	r3, [r7, #188]	; 0xbc
 800ed6a:	f997 20bd 	ldrsb.w	r2, [r7, #189]	; 0xbd
 800ed6e:	4610      	mov	r0, r2
 800ed70:	4aa0      	ldr	r2, [pc, #640]	; (800eff4 <m2m_ip_cb+0x348>)
 800ed72:	011b      	lsls	r3, r3, #4
 800ed74:	4413      	add	r3, r2
 800ed76:	330b      	adds	r3, #11
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	b2d9      	uxtb	r1, r3
 800ed7c:	4a9d      	ldr	r2, [pc, #628]	; (800eff4 <m2m_ip_cb+0x348>)
 800ed7e:	0103      	lsls	r3, r0, #4
 800ed80:	4413      	add	r3, r2
 800ed82:	330b      	adds	r3, #11
 800ed84:	460a      	mov	r2, r1
 800ed86:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
 800ed88:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 800ed8c:	4a99      	ldr	r2, [pc, #612]	; (800eff4 <m2m_ip_cb+0x348>)
 800ed8e:	011b      	lsls	r3, r3, #4
 800ed90:	4413      	add	r3, r2
 800ed92:	330a      	adds	r3, #10
 800ed94:	2201      	movs	r2, #1
 800ed96:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 800ed98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ed9c:	f997 20bd 	ldrsb.w	r2, [r7, #189]	; 0xbd
 800eda0:	4610      	mov	r0, r2
 800eda2:	3b08      	subs	r3, #8
 800eda4:	b299      	uxth	r1, r3
 800eda6:	4a93      	ldr	r2, [pc, #588]	; (800eff4 <m2m_ip_cb+0x348>)
 800eda8:	0103      	lsls	r3, r0, #4
 800edaa:	4413      	add	r3, r2
 800edac:	3308      	adds	r3, #8
 800edae:	460a      	mov	r2, r1
 800edb0:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
 800edb2:	4b91      	ldr	r3, [pc, #580]	; (800eff8 <m2m_ip_cb+0x34c>)
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	3301      	adds	r3, #1
 800edba:	b29a      	uxth	r2, r3
 800edbc:	4b8e      	ldr	r3, [pc, #568]	; (800eff8 <m2m_ip_cb+0x34c>)
 800edbe:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
 800edc0:	4b8d      	ldr	r3, [pc, #564]	; (800eff8 <m2m_ip_cb+0x34c>)
 800edc2:	881b      	ldrh	r3, [r3, #0]
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <m2m_ip_cb+0x12c>
					++gu16SessionID;
 800edca:	4b8b      	ldr	r3, [pc, #556]	; (800eff8 <m2m_ip_cb+0x34c>)
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	b29b      	uxth	r3, r3
 800edd0:	3301      	adds	r3, #1
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	4b88      	ldr	r3, [pc, #544]	; (800eff8 <m2m_ip_cb+0x34c>)
 800edd6:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
 800edd8:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 800eddc:	4618      	mov	r0, r3
 800edde:	4b86      	ldr	r3, [pc, #536]	; (800eff8 <m2m_ip_cb+0x34c>)
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	b299      	uxth	r1, r3
 800ede4:	4a83      	ldr	r2, [pc, #524]	; (800eff4 <m2m_ip_cb+0x348>)
 800ede6:	0103      	lsls	r3, r0, #4
 800ede8:	4413      	add	r3, r2
 800edea:	3306      	adds	r3, #6
 800edec:	460a      	mov	r2, r1
 800edee:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
 800edf0:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 800edf4:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
			strAccept.strAddr.sin_family		= AF_INET;
 800edf8:	2302      	movs	r3, #2
 800edfa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
 800edfe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ee02:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
 800ee06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			if(gpfAppSocketCb)
 800ee0e:	4b78      	ldr	r3, [pc, #480]	; (800eff0 <m2m_ip_cb+0x344>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f000 815d 	beq.w	800f0d2 <m2m_ip_cb+0x426>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
 800ee18:	4b75      	ldr	r3, [pc, #468]	; (800eff0 <m2m_ip_cb+0x344>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f997 00bc 	ldrsb.w	r0, [r7, #188]	; 0xbc
 800ee20:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800ee24:	2104      	movs	r1, #4
 800ee26:	4798      	blx	r3
}
 800ee28:	e153      	b.n	800f0d2 <m2m_ip_cb+0x426>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
 800ee2a:	79fb      	ldrb	r3, [r7, #7]
 800ee2c:	2b44      	cmp	r3, #68	; 0x44
 800ee2e:	d002      	beq.n	800ee36 <m2m_ip_cb+0x18a>
 800ee30:	79fb      	ldrb	r3, [r7, #7]
 800ee32:	2b4b      	cmp	r3, #75	; 0x4b
 800ee34:	d131      	bne.n	800ee9a <m2m_ip_cb+0x1ee>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
 800ee36:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	2204      	movs	r2, #4
 800ee3e:	6838      	ldr	r0, [r7, #0]
 800ee40:	f7fd ff6c 	bl	800cd1c <hif_receive>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f040 813e 	bne.w	800f0c8 <m2m_ip_cb+0x41c>
			strConnMsg.sock		= strConnectReply.sock;
 800ee4c:	f997 309c 	ldrsb.w	r3, [r7, #156]	; 0x9c
 800ee50:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			strConnMsg.s8Error	= strConnectReply.s8Error;
 800ee54:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 800ee58:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
 800ee5c:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d10c      	bne.n	800ee7e <m2m_ip_cb+0x1d2>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 800ee64:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800ee68:	f997 209c 	ldrsb.w	r2, [r7, #156]	; 0x9c
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	3b08      	subs	r3, #8
 800ee70:	b299      	uxth	r1, r3
 800ee72:	4a60      	ldr	r2, [pc, #384]	; (800eff4 <m2m_ip_cb+0x348>)
 800ee74:	0103      	lsls	r3, r0, #4
 800ee76:	4413      	add	r3, r2
 800ee78:	3308      	adds	r3, #8
 800ee7a:	460a      	mov	r2, r1
 800ee7c:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
 800ee7e:	4b5c      	ldr	r3, [pc, #368]	; (800eff0 <m2m_ip_cb+0x344>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f000 8120 	beq.w	800f0c8 <m2m_ip_cb+0x41c>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
 800ee88:	4b59      	ldr	r3, [pc, #356]	; (800eff0 <m2m_ip_cb+0x344>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f997 009c 	ldrsb.w	r0, [r7, #156]	; 0x9c
 800ee90:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800ee94:	2105      	movs	r1, #5
 800ee96:	4798      	blx	r3
	{
 800ee98:	e116      	b.n	800f0c8 <m2m_ip_cb+0x41c>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
 800ee9a:	79fb      	ldrb	r3, [r7, #7]
 800ee9c:	2b4a      	cmp	r3, #74	; 0x4a
 800ee9e:	d117      	bne.n	800eed0 <m2m_ip_cb+0x224>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
 800eea0:	f107 010c 	add.w	r1, r7, #12
 800eea4:	2300      	movs	r3, #0
 800eea6:	2244      	movs	r2, #68	; 0x44
 800eea8:	6838      	ldr	r0, [r7, #0]
 800eeaa:	f7fd ff37 	bl	800cd1c <hif_receive>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f040 810e 	bne.w	800f0d2 <m2m_ip_cb+0x426>
			if(gpfAppResolveCb)
 800eeb6:	4b51      	ldr	r3, [pc, #324]	; (800effc <m2m_ip_cb+0x350>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f000 8109 	beq.w	800f0d2 <m2m_ip_cb+0x426>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
 800eec0:	4b4e      	ldr	r3, [pc, #312]	; (800effc <m2m_ip_cb+0x350>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800eec6:	f107 020c 	add.w	r2, r7, #12
 800eeca:	4610      	mov	r0, r2
 800eecc:	4798      	blx	r3
}
 800eece:	e100      	b.n	800f0d2 <m2m_ip_cb+0x426>
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	2b46      	cmp	r3, #70	; 0x46
 800eed4:	d006      	beq.n	800eee4 <m2m_ip_cb+0x238>
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	2b48      	cmp	r3, #72	; 0x48
 800eeda:	d003      	beq.n	800eee4 <m2m_ip_cb+0x238>
 800eedc:	79fb      	ldrb	r3, [r7, #7]
 800eede:	2b4d      	cmp	r3, #77	; 0x4d
 800eee0:	f040 808e 	bne.w	800f000 <m2m_ip_cb+0x354>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
 800eee4:	2306      	movs	r3, #6
 800eee6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		if(u8OpCode == SOCKET_CMD_RECVFROM)
 800eeea:	79fb      	ldrb	r3, [r7, #7]
 800eeec:	2b48      	cmp	r3, #72	; 0x48
 800eeee:	d102      	bne.n	800eef6 <m2m_ip_cb+0x24a>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
 800eef0:	2309      	movs	r3, #9
 800eef2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		u16ReadSize = sizeof(tstrRecvReply);
 800eef6:	2310      	movs	r3, #16
 800eef8:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
 800eefc:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 800ef00:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800ef04:	2300      	movs	r3, #0
 800ef06:	6838      	ldr	r0, [r7, #0]
 800ef08:	f7fd ff08 	bl	800cd1c <hif_receive>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	f040 80dc 	bne.w	800f0cc <m2m_ip_cb+0x420>
			uint16 u16SessionID = 0;
 800ef14:	2300      	movs	r3, #0
 800ef16:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			sock			= strRecvReply.sock;
 800ef1a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800ef1e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			u16SessionID = strRecvReply.u16SessionID;
 800ef22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ef26:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			gastrSockets[sock].bIsRecvPending = 0;
 800ef2a:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 800ef2e:	4a31      	ldr	r2, [pc, #196]	; (800eff4 <m2m_ip_cb+0x348>)
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	4413      	add	r3, r2
 800ef34:	330c      	adds	r3, #12
 800ef36:	2200      	movs	r2, #0
 800ef38:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
 800ef3a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800ef3e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
 800ef42:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ef46:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
 800ef4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ef4e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
 800ef52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ef56:	67fb      	str	r3, [r7, #124]	; 0x7c
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 800ef58:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 800ef5c:	4a25      	ldr	r2, [pc, #148]	; (800eff4 <m2m_ip_cb+0x348>)
 800ef5e:	011b      	lsls	r3, r3, #4
 800ef60:	4413      	add	r3, r2
 800ef62:	3306      	adds	r3, #6
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d133      	bne.n	800efd8 <m2m_ip_cb+0x32c>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
 800ef70:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	dd1a      	ble.n	800efae <m2m_ip_cb+0x302>
 800ef78:	f9b7 20d2 	ldrsh.w	r2, [r7, #210]	; 0xd2
 800ef7c:	88bb      	ldrh	r3, [r7, #4]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	da15      	bge.n	800efae <m2m_ip_cb+0x302>
					u32Address += u16DataOffset;
 800ef82:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800ef86:	683a      	ldr	r2, [r7, #0]
 800ef88:	4413      	add	r3, r2
 800ef8a:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
 800ef8c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800ef90:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
 800ef94:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 800ef98:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800ef9c:	f997 00d5 	ldrsb.w	r0, [r7, #213]	; 0xd5
 800efa0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	f7ff fdde 	bl	800eb68 <Socket_ReadSocketData>
	{
 800efac:	e08e      	b.n	800f0cc <m2m_ip_cb+0x420>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
 800efae:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800efb2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
					strRecvMsg.pu8Buffer		= NULL;
 800efb6:	2300      	movs	r3, #0
 800efb8:	673b      	str	r3, [r7, #112]	; 0x70
					if(gpfAppSocketCb)
 800efba:	4b0d      	ldr	r3, [pc, #52]	; (800eff0 <m2m_ip_cb+0x344>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 8084 	beq.w	800f0cc <m2m_ip_cb+0x420>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
 800efc4:	4b0a      	ldr	r3, [pc, #40]	; (800eff0 <m2m_ip_cb+0x344>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800efcc:	f897 10df 	ldrb.w	r1, [r7, #223]	; 0xdf
 800efd0:	f997 00d5 	ldrsb.w	r0, [r7, #213]	; 0xd5
 800efd4:	4798      	blx	r3
	{
 800efd6:	e079      	b.n	800f0cc <m2m_ip_cb+0x420>
				if(u16ReadSize < u16BufferSize)
 800efd8:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 800efdc:	88bb      	ldrh	r3, [r7, #4]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d274      	bcs.n	800f0cc <m2m_ip_cb+0x420>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
 800efe2:	2301      	movs	r3, #1
 800efe4:	2200      	movs	r2, #0
 800efe6:	2100      	movs	r1, #0
 800efe8:	2000      	movs	r0, #0
 800efea:	f7fd fe97 	bl	800cd1c <hif_receive>
	{
 800efee:	e06d      	b.n	800f0cc <m2m_ip_cb+0x420>
 800eff0:	24000b14 	.word	0x24000b14
 800eff4:	24000a64 	.word	0x24000a64
 800eff8:	24000796 	.word	0x24000796
 800effc:	24000b1c 	.word	0x24000b1c
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
 800f000:	79fb      	ldrb	r3, [r7, #7]
 800f002:	2b45      	cmp	r3, #69	; 0x45
 800f004:	d005      	beq.n	800f012 <m2m_ip_cb+0x366>
 800f006:	79fb      	ldrb	r3, [r7, #7]
 800f008:	2b47      	cmp	r3, #71	; 0x47
 800f00a:	d002      	beq.n	800f012 <m2m_ip_cb+0x366>
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	2b4c      	cmp	r3, #76	; 0x4c
 800f010:	d13b      	bne.n	800f08a <m2m_ip_cb+0x3de>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
 800f012:	2307      	movs	r3, #7
 800f014:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
		if(u8OpCode == SOCKET_CMD_SENDTO)
 800f018:	79fb      	ldrb	r3, [r7, #7]
 800f01a:	2b47      	cmp	r3, #71	; 0x47
 800f01c:	d102      	bne.n	800f024 <m2m_ip_cb+0x378>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
 800f01e:	2308      	movs	r3, #8
 800f020:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
 800f024:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800f028:	2300      	movs	r3, #0
 800f02a:	2208      	movs	r2, #8
 800f02c:	6838      	ldr	r0, [r7, #0]
 800f02e:	f7fd fe75 	bl	800cd1c <hif_receive>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d14b      	bne.n	800f0d0 <m2m_ip_cb+0x424>
			uint16 u16SessionID = 0;
 800f038:	2300      	movs	r3, #0
 800f03a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			sock = strReply.sock;
 800f03e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800f042:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
			u16SessionID = strReply.u16SessionID;
 800f046:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800f04a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
 800f04e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800f052:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			if(u16SessionID == gastrSockets[sock].u16SessionID)
 800f056:	f997 30db 	ldrsb.w	r3, [r7, #219]	; 0xdb
 800f05a:	4a20      	ldr	r2, [pc, #128]	; (800f0dc <m2m_ip_cb+0x430>)
 800f05c:	011b      	lsls	r3, r3, #4
 800f05e:	4413      	add	r3, r2
 800f060:	3306      	adds	r3, #6
 800f062:	881b      	ldrh	r3, [r3, #0]
 800f064:	b29b      	uxth	r3, r3
 800f066:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d130      	bne.n	800f0d0 <m2m_ip_cb+0x424>
				if(gpfAppSocketCb)
 800f06e:	4b1c      	ldr	r3, [pc, #112]	; (800f0e0 <m2m_ip_cb+0x434>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d02c      	beq.n	800f0d0 <m2m_ip_cb+0x424>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
 800f076:	4b1a      	ldr	r3, [pc, #104]	; (800f0e0 <m2m_ip_cb+0x434>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 800f07e:	f897 10de 	ldrb.w	r1, [r7, #222]	; 0xde
 800f082:	f997 00db 	ldrsb.w	r0, [r7, #219]	; 0xdb
 800f086:	4798      	blx	r3
	{
 800f088:	e022      	b.n	800f0d0 <m2m_ip_cb+0x424>
	else if(u8OpCode == SOCKET_CMD_PING)
 800f08a:	79fb      	ldrb	r3, [r7, #7]
 800f08c:	2b52      	cmp	r3, #82	; 0x52
 800f08e:	d120      	bne.n	800f0d2 <m2m_ip_cb+0x426>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
 800f090:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f094:	2301      	movs	r3, #1
 800f096:	2214      	movs	r2, #20
 800f098:	6838      	ldr	r0, [r7, #0]
 800f09a:	f7fd fe3f 	bl	800cd1c <hif_receive>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d116      	bne.n	800f0d2 <m2m_ip_cb+0x426>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
 800f0a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	4b0e      	ldr	r3, [pc, #56]	; (800f0e4 <m2m_ip_cb+0x438>)
 800f0aa:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
 800f0ac:	4b0d      	ldr	r3, [pc, #52]	; (800f0e4 <m2m_ip_cb+0x438>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00e      	beq.n	800f0d2 <m2m_ip_cb+0x426>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
 800f0b4:	4b0b      	ldr	r3, [pc, #44]	; (800f0e4 <m2m_ip_cb+0x438>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f0ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f0bc:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f0c0:	4798      	blx	r3
}
 800f0c2:	e006      	b.n	800f0d2 <m2m_ip_cb+0x426>
	{
 800f0c4:	bf00      	nop
 800f0c6:	e004      	b.n	800f0d2 <m2m_ip_cb+0x426>
	{
 800f0c8:	bf00      	nop
 800f0ca:	e002      	b.n	800f0d2 <m2m_ip_cb+0x426>
	{
 800f0cc:	bf00      	nop
 800f0ce:	e000      	b.n	800f0d2 <m2m_ip_cb+0x426>
	{
 800f0d0:	bf00      	nop
}
 800f0d2:	bf00      	nop
 800f0d4:	37e0      	adds	r7, #224	; 0xe0
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	24000a64 	.word	0x24000a64
 800f0e0:	24000b14 	.word	0x24000b14
 800f0e4:	24000b18 	.word	0x24000b18

0800f0e8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
 800f0ec:	4b0a      	ldr	r3, [pc, #40]	; (800f118 <socketInit+0x30>)
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d10e      	bne.n	800f114 <socketInit+0x2c>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 800f0f6:	22b0      	movs	r2, #176	; 0xb0
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	4808      	ldr	r0, [pc, #32]	; (800f11c <socketInit+0x34>)
 800f0fc:	f7fd f986 	bl	800c40c <m2m_memset>
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
 800f100:	4907      	ldr	r1, [pc, #28]	; (800f120 <socketInit+0x38>)
 800f102:	2002      	movs	r0, #2
 800f104:	f7fd fea0 	bl	800ce48 <hif_register_cb>
		gbSocketInit	= 1;
 800f108:	4b03      	ldr	r3, [pc, #12]	; (800f118 <socketInit+0x30>)
 800f10a:	2201      	movs	r2, #1
 800f10c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
 800f10e:	4b05      	ldr	r3, [pc, #20]	; (800f124 <socketInit+0x3c>)
 800f110:	2200      	movs	r2, #0
 800f112:	801a      	strh	r2, [r3, #0]
	}
}
 800f114:	bf00      	nop
 800f116:	bd80      	pop	{r7, pc}
 800f118:	24000798 	.word	0x24000798
 800f11c:	24000a64 	.word	0x24000a64
 800f120:	0800ecad 	.word	0x0800ecad
 800f124:	24000796 	.word	0x24000796

0800f128 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
 800f128:	b480      	push	{r7}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
 800f132:	4a06      	ldr	r2, [pc, #24]	; (800f14c <registerSocketCallback+0x24>)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb = pfAppResolveCb;
 800f138:	4a05      	ldr	r2, [pc, #20]	; (800f150 <registerSocketCallback+0x28>)
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	6013      	str	r3, [r2, #0]
}
 800f13e:	bf00      	nop
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	24000b14 	.word	0x24000b14
 800f150:	24000b1c 	.word	0x24000b1c

0800f154 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b08c      	sub	sp, #48	; 0x30
 800f158:	af04      	add	r7, sp, #16
 800f15a:	4603      	mov	r3, r0
 800f15c:	80fb      	strh	r3, [r7, #6]
 800f15e:	460b      	mov	r3, r1
 800f160:	717b      	strb	r3, [r7, #5]
 800f162:	4613      	mov	r3, r2
 800f164:	713b      	strb	r3, [r7, #4]
	SOCKET					sock = -1;
 800f166:	23ff      	movs	r3, #255	; 0xff
 800f168:	77fb      	strb	r3, [r7, #31]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
 800f16a:	88fb      	ldrh	r3, [r7, #6]
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	f040 809c 	bne.w	800f2aa <socket+0x156>
	{
		if(u8Type == SOCK_STREAM)
 800f172:	797b      	ldrb	r3, [r7, #5]
 800f174:	2b01      	cmp	r3, #1
 800f176:	d12d      	bne.n	800f1d4 <socket+0x80>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800f178:	2300      	movs	r3, #0
 800f17a:	77bb      	strb	r3, [r7, #30]
 800f17c:	e026      	b.n	800f1cc <socket+0x78>
			{
				u8SockID	= u8NextTcpSock;
 800f17e:	4b4e      	ldr	r3, [pc, #312]	; (800f2b8 <socket+0x164>)
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	74fb      	strb	r3, [r7, #19]
				pstrSock	= &gastrSockets[u8NextTcpSock];
 800f184:	4b4c      	ldr	r3, [pc, #304]	; (800f2b8 <socket+0x164>)
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	011b      	lsls	r3, r3, #4
 800f18c:	4a4b      	ldr	r2, [pc, #300]	; (800f2bc <socket+0x168>)
 800f18e:	4413      	add	r3, r2
 800f190:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
 800f192:	4b49      	ldr	r3, [pc, #292]	; (800f2b8 <socket+0x164>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	b2db      	uxtb	r3, r3
 800f198:	1c5a      	adds	r2, r3, #1
 800f19a:	4b49      	ldr	r3, [pc, #292]	; (800f2c0 <socket+0x16c>)
 800f19c:	fb83 1302 	smull	r1, r3, r3, r2
 800f1a0:	4413      	add	r3, r2
 800f1a2:	1099      	asrs	r1, r3, #2
 800f1a4:	17d3      	asrs	r3, r2, #31
 800f1a6:	1ac9      	subs	r1, r1, r3
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	00db      	lsls	r3, r3, #3
 800f1ac:	1a5b      	subs	r3, r3, r1
 800f1ae:	1ad1      	subs	r1, r2, r3
 800f1b0:	b2ca      	uxtb	r2, r1
 800f1b2:	4b41      	ldr	r3, [pc, #260]	; (800f2b8 <socket+0x164>)
 800f1b4:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	7a9b      	ldrb	r3, [r3, #10]
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d102      	bne.n	800f1c6 <socket+0x72>
				{
					sock = (SOCKET)u8SockID;
 800f1c0:	7cfb      	ldrb	r3, [r7, #19]
 800f1c2:	77fb      	strb	r3, [r7, #31]
					break;
 800f1c4:	e036      	b.n	800f234 <socket+0xe0>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 800f1c6:	7fbb      	ldrb	r3, [r7, #30]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	77bb      	strb	r3, [r7, #30]
 800f1cc:	7fbb      	ldrb	r3, [r7, #30]
 800f1ce:	2b06      	cmp	r3, #6
 800f1d0:	d9d5      	bls.n	800f17e <socket+0x2a>
 800f1d2:	e02f      	b.n	800f234 <socket+0xe0>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
 800f1d4:	797b      	ldrb	r3, [r7, #5]
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d12c      	bne.n	800f234 <socket+0xe0>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
 800f1da:	4b3a      	ldr	r3, [pc, #232]	; (800f2c4 <socket+0x170>)
 800f1dc:	617b      	str	r3, [r7, #20]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800f1de:	2300      	movs	r3, #0
 800f1e0:	77bb      	strb	r3, [r7, #30]
 800f1e2:	e024      	b.n	800f22e <socket+0xda>
			{
				u8SockID		= u8NextUdpSock;
 800f1e4:	4b38      	ldr	r3, [pc, #224]	; (800f2c8 <socket+0x174>)
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	74fb      	strb	r3, [r7, #19]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
 800f1ea:	4b37      	ldr	r3, [pc, #220]	; (800f2c8 <socket+0x174>)
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	011b      	lsls	r3, r3, #4
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
 800f1f8:	4b33      	ldr	r3, [pc, #204]	; (800f2c8 <socket+0x174>)
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	3301      	adds	r3, #1
 800f200:	425a      	negs	r2, r3
 800f202:	f003 0303 	and.w	r3, r3, #3
 800f206:	f002 0203 	and.w	r2, r2, #3
 800f20a:	bf58      	it	pl
 800f20c:	4253      	negpl	r3, r2
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	4b2d      	ldr	r3, [pc, #180]	; (800f2c8 <socket+0x174>)
 800f212:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
 800f214:	69bb      	ldr	r3, [r7, #24]
 800f216:	7a9b      	ldrb	r3, [r3, #10]
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d104      	bne.n	800f228 <socket+0xd4>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
 800f21e:	7cfb      	ldrb	r3, [r7, #19]
 800f220:	3307      	adds	r3, #7
 800f222:	b2db      	uxtb	r3, r3
 800f224:	77fb      	strb	r3, [r7, #31]
					break;
 800f226:	e005      	b.n	800f234 <socket+0xe0>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 800f228:	7fbb      	ldrb	r3, [r7, #30]
 800f22a:	3301      	adds	r3, #1
 800f22c:	77bb      	strb	r3, [r7, #30]
 800f22e:	7fbb      	ldrb	r3, [r7, #30]
 800f230:	2b03      	cmp	r3, #3
 800f232:	d9d7      	bls.n	800f1e4 <socket+0x90>
				}
			}
		}

		if(sock >= 0)
 800f234:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	db36      	blt.n	800f2aa <socket+0x156>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 800f23c:	2210      	movs	r2, #16
 800f23e:	2100      	movs	r1, #0
 800f240:	69b8      	ldr	r0, [r7, #24]
 800f242:	f7fd f8e3 	bl	800c40c <m2m_memset>
			pstrSock->bIsUsed = 1;
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	2201      	movs	r2, #1
 800f24a:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
 800f24c:	4b1f      	ldr	r3, [pc, #124]	; (800f2cc <socket+0x178>)
 800f24e:	881b      	ldrh	r3, [r3, #0]
 800f250:	b29b      	uxth	r3, r3
 800f252:	3301      	adds	r3, #1
 800f254:	b29a      	uxth	r2, r3
 800f256:	4b1d      	ldr	r3, [pc, #116]	; (800f2cc <socket+0x178>)
 800f258:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
 800f25a:	4b1c      	ldr	r3, [pc, #112]	; (800f2cc <socket+0x178>)
 800f25c:	881b      	ldrh	r3, [r3, #0]
 800f25e:	b29b      	uxth	r3, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d106      	bne.n	800f272 <socket+0x11e>
				++gu16SessionID;
 800f264:	4b19      	ldr	r3, [pc, #100]	; (800f2cc <socket+0x178>)
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	3301      	adds	r3, #1
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	4b17      	ldr	r3, [pc, #92]	; (800f2cc <socket+0x178>)
 800f270:	801a      	strh	r2, [r3, #0]

			pstrSock->u16SessionID = gu16SessionID;
 800f272:	4b16      	ldr	r3, [pc, #88]	; (800f2cc <socket+0x178>)
 800f274:	881b      	ldrh	r3, [r3, #0]
 800f276:	b29a      	uxth	r2, r3
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );

			if(u8Flags & SOCKET_FLAGS_SSL)
 800f27c:	793b      	ldrb	r3, [r7, #4]
 800f27e:	f003 0301 	and.w	r3, r3, #1
 800f282:	2b00      	cmp	r3, #0
 800f284:	d011      	beq.n	800f2aa <socket+0x156>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
 800f286:	7ffb      	ldrb	r3, [r7, #31]
 800f288:	733b      	strb	r3, [r7, #12]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	2221      	movs	r2, #33	; 0x21
 800f28e:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
 800f290:	f107 020c 	add.w	r2, r7, #12
 800f294:	2300      	movs	r3, #0
 800f296:	9302      	str	r3, [sp, #8]
 800f298:	2300      	movs	r3, #0
 800f29a:	9301      	str	r3, [sp, #4]
 800f29c:	2300      	movs	r3, #0
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	2304      	movs	r3, #4
 800f2a2:	2150      	movs	r1, #80	; 0x50
 800f2a4:	2002      	movs	r0, #2
 800f2a6:	f7fd f9c3 	bl	800c630 <hif_send>
			}
		}
	}
	return sock;
 800f2aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3720      	adds	r7, #32
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	24000799 	.word	0x24000799
 800f2bc:	24000a64 	.word	0x24000a64
 800f2c0:	92492493 	.word	0x92492493
 800f2c4:	24000ad4 	.word	0x24000ad4
 800f2c8:	2400079a 	.word	0x2400079a
 800f2cc:	24000796 	.word	0x24000796

0800f2d0 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08a      	sub	sp, #40	; 0x28
 800f2d4:	af04      	add	r7, sp, #16
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	6039      	str	r1, [r7, #0]
 800f2da:	71fb      	strb	r3, [r7, #7]
 800f2dc:	4613      	mov	r3, r2
 800f2de:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f2e0:	23fa      	movs	r3, #250	; 0xfa
 800f2e2:	75fb      	strb	r3, [r7, #23]
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d047      	beq.n	800f37a <bind+0xaa>
 800f2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	db43      	blt.n	800f37a <bind+0xaa>
 800f2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2f6:	4a24      	ldr	r2, [pc, #144]	; (800f388 <bind+0xb8>)
 800f2f8:	011b      	lsls	r3, r3, #4
 800f2fa:	4413      	add	r3, r2
 800f2fc:	330a      	adds	r3, #10
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	b2db      	uxtb	r3, r3
 800f302:	2b01      	cmp	r3, #1
 800f304:	d139      	bne.n	800f37a <bind+0xaa>
 800f306:	79bb      	ldrb	r3, [r7, #6]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d036      	beq.n	800f37a <bind+0xaa>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
 800f30c:	2341      	movs	r3, #65	; 0x41
 800f30e:	75bb      	strb	r3, [r7, #22]
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f314:	4a1c      	ldr	r2, [pc, #112]	; (800f388 <bind+0xb8>)
 800f316:	011b      	lsls	r3, r3, #4
 800f318:	4413      	add	r3, r2
 800f31a:	330b      	adds	r3, #11
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <bind+0x5c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
 800f328:	2354      	movs	r3, #84	; 0x54
 800f32a:	75bb      	strb	r3, [r7, #22]
		}

		/* Build the bind request. */
		strBind.sock = sock;
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	743b      	strb	r3, [r7, #16]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 800f330:	f107 0308 	add.w	r3, r7, #8
 800f334:	2208      	movs	r2, #8
 800f336:	6839      	ldr	r1, [r7, #0]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fd f847 	bl	800c3cc <m2m_memcpy>
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f33e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f342:	4a11      	ldr	r2, [pc, #68]	; (800f388 <bind+0xb8>)
 800f344:	011b      	lsls	r3, r3, #4
 800f346:	4413      	add	r3, r2
 800f348:	3306      	adds	r3, #6
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	827b      	strh	r3, [r7, #18]

		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
 800f350:	f107 0208 	add.w	r2, r7, #8
 800f354:	7db9      	ldrb	r1, [r7, #22]
 800f356:	2300      	movs	r3, #0
 800f358:	9302      	str	r3, [sp, #8]
 800f35a:	2300      	movs	r3, #0
 800f35c:	9301      	str	r3, [sp, #4]
 800f35e:	2300      	movs	r3, #0
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	230c      	movs	r3, #12
 800f364:	2002      	movs	r0, #2
 800f366:	f7fd f963 	bl	800c630 <hif_send>
 800f36a:	4603      	mov	r3, r0
 800f36c:	75fb      	strb	r3, [r7, #23]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800f36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d001      	beq.n	800f37a <bind+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
 800f376:	23f7      	movs	r3, #247	; 0xf7
 800f378:	75fb      	strb	r3, [r7, #23]
		}
	}
	return s8Ret;
 800f37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3718      	adds	r7, #24
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	24000a64 	.word	0x24000a64

0800f38c <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b088      	sub	sp, #32
 800f390:	af04      	add	r7, sp, #16
 800f392:	4603      	mov	r3, r0
 800f394:	460a      	mov	r2, r1
 800f396:	71fb      	strb	r3, [r7, #7]
 800f398:	4613      	mov	r3, r2
 800f39a:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f39c:	23fa      	movs	r3, #250	; 0xfa
 800f39e:	73fb      	strb	r3, [r7, #15]

	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 800f3a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	db2b      	blt.n	800f400 <listen+0x74>
 800f3a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3ac:	4a17      	ldr	r2, [pc, #92]	; (800f40c <listen+0x80>)
 800f3ae:	011b      	lsls	r3, r3, #4
 800f3b0:	4413      	add	r3, r2
 800f3b2:	330a      	adds	r3, #10
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d121      	bne.n	800f400 <listen+0x74>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
 800f3bc:	79fb      	ldrb	r3, [r7, #7]
 800f3be:	723b      	strb	r3, [r7, #8]
		strListen.u8BackLog = backlog;
 800f3c0:	79bb      	ldrb	r3, [r7, #6]
 800f3c2:	727b      	strb	r3, [r7, #9]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f3c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3c8:	4a10      	ldr	r2, [pc, #64]	; (800f40c <listen+0x80>)
 800f3ca:	011b      	lsls	r3, r3, #4
 800f3cc:	4413      	add	r3, r2
 800f3ce:	3306      	adds	r3, #6
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	817b      	strh	r3, [r7, #10]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
 800f3d6:	f107 0208 	add.w	r2, r7, #8
 800f3da:	2300      	movs	r3, #0
 800f3dc:	9302      	str	r3, [sp, #8]
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9301      	str	r3, [sp, #4]
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	2304      	movs	r3, #4
 800f3e8:	2142      	movs	r1, #66	; 0x42
 800f3ea:	2002      	movs	r0, #2
 800f3ec:	f7fd f920 	bl	800c630 <hif_send>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800f3f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d001      	beq.n	800f400 <listen+0x74>
		{
			s8Ret = SOCK_ERR_INVALID;
 800f3fc:	23f7      	movs	r3, #247	; 0xf7
 800f3fe:	73fb      	strb	r3, [r7, #15]
		}
	}
	return s8Ret;
 800f400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	24000a64 	.word	0x24000a64

0800f410 <accept>:

Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
 800f410:	b480      	push	{r7}
 800f412:	b087      	sub	sp, #28
 800f414:	af00      	add	r7, sp, #0
 800f416:	4603      	mov	r3, r0
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	73fb      	strb	r3, [r7, #15]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f41e:	23fa      	movs	r3, #250	; 0xfa
 800f420:	75fb      	strb	r3, [r7, #23]

	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
 800f422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f426:	2b00      	cmp	r3, #0
 800f428:	db0b      	blt.n	800f442 <accept+0x32>
 800f42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f42e:	4a09      	ldr	r2, [pc, #36]	; (800f454 <accept+0x44>)
 800f430:	011b      	lsls	r3, r3, #4
 800f432:	4413      	add	r3, r2
 800f434:	330a      	adds	r3, #10
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	d101      	bne.n	800f442 <accept+0x32>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
 800f43e:	2300      	movs	r3, #0
 800f440:	75fb      	strb	r3, [r7, #23]
	}
	return s8Ret;
 800f442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f446:	4618      	mov	r0, r3
 800f448:	371c      	adds	r7, #28
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	24000a64 	.word	0x24000a64

0800f458 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b08e      	sub	sp, #56	; 0x38
 800f45c:	af04      	add	r7, sp, #16
 800f45e:	60b9      	str	r1, [r7, #8]
 800f460:	4611      	mov	r1, r2
 800f462:	461a      	mov	r2, r3
 800f464:	4603      	mov	r3, r0
 800f466:	73fb      	strb	r3, [r7, #15]
 800f468:	460b      	mov	r3, r1
 800f46a:	81bb      	strh	r3, [r7, #12]
 800f46c:	4613      	mov	r3, r2
 800f46e:	80fb      	strh	r3, [r7, #6]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 800f470:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800f474:	84fb      	strh	r3, [r7, #38]	; 0x26

	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 800f476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	db59      	blt.n	800f532 <send+0xda>
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d056      	beq.n	800f532 <send+0xda>
 800f484:	89bb      	ldrh	r3, [r7, #12]
 800f486:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f48a:	d852      	bhi.n	800f532 <send+0xda>
 800f48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f490:	4a2b      	ldr	r2, [pc, #172]	; (800f540 <send+0xe8>)
 800f492:	011b      	lsls	r3, r3, #4
 800f494:	4413      	add	r3, r2
 800f496:	330a      	adds	r3, #10
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d148      	bne.n	800f532 <send+0xda>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
 800f4a0:	2345      	movs	r3, #69	; 0x45
 800f4a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
 800f4a6:	2350      	movs	r3, #80	; 0x50
 800f4a8:	84bb      	strh	r3, [r7, #36]	; 0x24

		strSend.sock			= sock;
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	743b      	strb	r3, [r7, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
 800f4ae:	89bb      	ldrh	r3, [r7, #12]
 800f4b0:	827b      	strh	r3, [r7, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
 800f4b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4b6:	4a22      	ldr	r2, [pc, #136]	; (800f540 <send+0xe8>)
 800f4b8:	011b      	lsls	r3, r3, #4
 800f4ba:	4413      	add	r3, r2
 800f4bc:	3306      	adds	r3, #6
 800f4be:	881b      	ldrh	r3, [r3, #0]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	83bb      	strh	r3, [r7, #28]

		if(sock >= TCP_SOCK_MAX)
 800f4c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4c8:	2b06      	cmp	r3, #6
 800f4ca:	dd01      	ble.n	800f4d0 <send+0x78>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
 800f4cc:	2344      	movs	r3, #68	; 0x44
 800f4ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f4d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4d4:	4a1a      	ldr	r2, [pc, #104]	; (800f540 <send+0xe8>)
 800f4d6:	011b      	lsls	r3, r3, #4
 800f4d8:	4413      	add	r3, r2
 800f4da:	330b      	adds	r3, #11
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	f003 0301 	and.w	r3, r3, #1
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d00a      	beq.n	800f4fe <send+0xa6>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
 800f4e8:	234c      	movs	r3, #76	; 0x4c
 800f4ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
 800f4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4f2:	4a13      	ldr	r2, [pc, #76]	; (800f540 <send+0xe8>)
 800f4f4:	011b      	lsls	r3, r3, #4
 800f4f6:	4413      	add	r3, r2
 800f4f8:	3308      	adds	r3, #8
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
 800f4fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f506:	b2d9      	uxtb	r1, r3
 800f508:	f107 0210 	add.w	r2, r7, #16
 800f50c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f50e:	9302      	str	r3, [sp, #8]
 800f510:	89bb      	ldrh	r3, [r7, #12]
 800f512:	9301      	str	r3, [sp, #4]
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	2310      	movs	r3, #16
 800f51a:	2002      	movs	r0, #2
 800f51c:	f7fd f888 	bl	800c630 <hif_send>
 800f520:	4603      	mov	r3, r0
 800f522:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(s16Ret != SOCK_ERR_NO_ERROR)
 800f524:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d002      	beq.n	800f532 <send+0xda>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
 800f52c:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 800f530:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}
	return s16Ret;
 800f532:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800f536:	4618      	mov	r0, r3
 800f538:	3728      	adds	r7, #40	; 0x28
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	24000a64 	.word	0x24000a64

0800f544 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08c      	sub	sp, #48	; 0x30
 800f548:	af04      	add	r7, sp, #16
 800f54a:	60b9      	str	r1, [r7, #8]
 800f54c:	607b      	str	r3, [r7, #4]
 800f54e:	4603      	mov	r3, r0
 800f550:	73fb      	strb	r3, [r7, #15]
 800f552:	4613      	mov	r3, r2
 800f554:	81bb      	strh	r3, [r7, #12]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
 800f556:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800f55a:	83fb      	strh	r3, [r7, #30]

	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 800f55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f560:	2b00      	cmp	r3, #0
 800f562:	db6c      	blt.n	800f63e <recv+0xfa>
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d069      	beq.n	800f63e <recv+0xfa>
 800f56a:	89bb      	ldrh	r3, [r7, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d066      	beq.n	800f63e <recv+0xfa>
 800f570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f574:	4a35      	ldr	r2, [pc, #212]	; (800f64c <recv+0x108>)
 800f576:	011b      	lsls	r3, r3, #4
 800f578:	4413      	add	r3, r2
 800f57a:	330a      	adds	r3, #10
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	2b01      	cmp	r3, #1
 800f582:	d15c      	bne.n	800f63e <recv+0xfa>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
 800f584:	2300      	movs	r3, #0
 800f586:	83fb      	strh	r3, [r7, #30]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
 800f588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f58c:	4a2f      	ldr	r2, [pc, #188]	; (800f64c <recv+0x108>)
 800f58e:	011b      	lsls	r3, r3, #4
 800f590:	4413      	add	r3, r2
 800f592:	68ba      	ldr	r2, [r7, #8]
 800f594:	601a      	str	r2, [r3, #0]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
 800f596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f59a:	4a2c      	ldr	r2, [pc, #176]	; (800f64c <recv+0x108>)
 800f59c:	011b      	lsls	r3, r3, #4
 800f59e:	4413      	add	r3, r2
 800f5a0:	3304      	adds	r3, #4
 800f5a2:	89ba      	ldrh	r2, [r7, #12]
 800f5a4:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
 800f5a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5aa:	4a28      	ldr	r2, [pc, #160]	; (800f64c <recv+0x108>)
 800f5ac:	011b      	lsls	r3, r3, #4
 800f5ae:	4413      	add	r3, r2
 800f5b0:	330c      	adds	r3, #12
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	b2db      	uxtb	r3, r3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d141      	bne.n	800f63e <recv+0xfa>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
 800f5ba:	2346      	movs	r3, #70	; 0x46
 800f5bc:	777b      	strb	r3, [r7, #29]

			gastrSockets[sock].bIsRecvPending = 1;
 800f5be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5c2:	4a22      	ldr	r2, [pc, #136]	; (800f64c <recv+0x108>)
 800f5c4:	011b      	lsls	r3, r3, #4
 800f5c6:	4413      	add	r3, r2
 800f5c8:	330c      	adds	r3, #12
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5d2:	4a1e      	ldr	r2, [pc, #120]	; (800f64c <recv+0x108>)
 800f5d4:	011b      	lsls	r3, r3, #4
 800f5d6:	4413      	add	r3, r2
 800f5d8:	330b      	adds	r3, #11
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <recv+0xa6>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
 800f5e6:	234d      	movs	r3, #77	; 0x4d
 800f5e8:	777b      	strb	r3, [r7, #29]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d103      	bne.n	800f5f8 <recv+0xb4>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 800f5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f4:	617b      	str	r3, [r7, #20]
 800f5f6:	e001      	b.n	800f5fc <recv+0xb8>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	617b      	str	r3, [r7, #20]
			strRecv.sock = sock;
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
 800f5fe:	763b      	strb	r3, [r7, #24]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f604:	4a11      	ldr	r2, [pc, #68]	; (800f64c <recv+0x108>)
 800f606:	011b      	lsls	r3, r3, #4
 800f608:	4413      	add	r3, r2
 800f60a:	3306      	adds	r3, #6
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	b29b      	uxth	r3, r3
 800f610:	837b      	strh	r3, [r7, #26]

			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
 800f612:	f107 0214 	add.w	r2, r7, #20
 800f616:	7f79      	ldrb	r1, [r7, #29]
 800f618:	2300      	movs	r3, #0
 800f61a:	9302      	str	r3, [sp, #8]
 800f61c:	2300      	movs	r3, #0
 800f61e:	9301      	str	r3, [sp, #4]
 800f620:	2300      	movs	r3, #0
 800f622:	9300      	str	r3, [sp, #0]
 800f624:	2308      	movs	r3, #8
 800f626:	2002      	movs	r0, #2
 800f628:	f7fd f802 	bl	800c630 <hif_send>
 800f62c:	4603      	mov	r3, r0
 800f62e:	83fb      	strh	r3, [r7, #30]
			if(s16Ret != SOCK_ERR_NO_ERROR)
 800f630:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d002      	beq.n	800f63e <recv+0xfa>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
 800f638:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 800f63c:	83fb      	strh	r3, [r7, #30]
			}
		}
	}
	return s16Ret;
 800f63e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3720      	adds	r7, #32
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	24000a64 	.word	0x24000a64

0800f650 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b088      	sub	sp, #32
 800f654:	af04      	add	r7, sp, #16
 800f656:	4603      	mov	r3, r0
 800f658:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
 800f65a:	23fa      	movs	r3, #250	; 0xfa
 800f65c:	73fb      	strb	r3, [r7, #15]
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 800f65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f662:	2b00      	cmp	r3, #0
 800f664:	db53      	blt.n	800f70e <close+0xbe>
 800f666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f66a:	4a2c      	ldr	r2, [pc, #176]	; (800f71c <close+0xcc>)
 800f66c:	011b      	lsls	r3, r3, #4
 800f66e:	4413      	add	r3, r2
 800f670:	330a      	adds	r3, #10
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	b2db      	uxtb	r3, r3
 800f676:	2b01      	cmp	r3, #1
 800f678:	d149      	bne.n	800f70e <close+0xbe>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
 800f67a:	2349      	movs	r3, #73	; 0x49
 800f67c:	73bb      	strb	r3, [r7, #14]
		tstrCloseCmd strclose;
		strclose.sock = sock;
 800f67e:	79fb      	ldrb	r3, [r7, #7]
 800f680:	723b      	strb	r3, [r7, #8]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
 800f682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f686:	4a25      	ldr	r2, [pc, #148]	; (800f71c <close+0xcc>)
 800f688:	011b      	lsls	r3, r3, #4
 800f68a:	4413      	add	r3, r2
 800f68c:	3306      	adds	r3, #6
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	b29b      	uxth	r3, r3
 800f692:	817b      	strh	r3, [r7, #10]

		gastrSockets[sock].bIsUsed = 0;
 800f694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f698:	4a20      	ldr	r2, [pc, #128]	; (800f71c <close+0xcc>)
 800f69a:	011b      	lsls	r3, r3, #4
 800f69c:	4413      	add	r3, r2
 800f69e:	330a      	adds	r3, #10
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
 800f6a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6a8:	4a1c      	ldr	r2, [pc, #112]	; (800f71c <close+0xcc>)
 800f6aa:	011b      	lsls	r3, r3, #4
 800f6ac:	4413      	add	r3, r2
 800f6ae:	3306      	adds	r3, #6
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	801a      	strh	r2, [r3, #0]

		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 800f6b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6b8:	4a18      	ldr	r2, [pc, #96]	; (800f71c <close+0xcc>)
 800f6ba:	011b      	lsls	r3, r3, #4
 800f6bc:	4413      	add	r3, r2
 800f6be:	330b      	adds	r3, #11
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	f003 0301 	and.w	r3, r3, #1
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <close+0x80>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
 800f6cc:	234e      	movs	r3, #78	; 0x4e
 800f6ce:	73bb      	strb	r3, [r7, #14]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
 800f6d0:	f107 0208 	add.w	r2, r7, #8
 800f6d4:	7bb9      	ldrb	r1, [r7, #14]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	9302      	str	r3, [sp, #8]
 800f6da:	2300      	movs	r3, #0
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	2300      	movs	r3, #0
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	2304      	movs	r3, #4
 800f6e4:	2002      	movs	r0, #2
 800f6e6:	f7fc ffa3 	bl	800c630 <hif_send>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
 800f6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d001      	beq.n	800f6fa <close+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
 800f6f6:	23f7      	movs	r3, #247	; 0xf7
 800f6f8:	73fb      	strb	r3, [r7, #15]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
 800f6fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	4a06      	ldr	r2, [pc, #24]	; (800f71c <close+0xcc>)
 800f702:	4413      	add	r3, r2
 800f704:	2210      	movs	r2, #16
 800f706:	2100      	movs	r1, #0
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fc fe7f 	bl	800c40c <m2m_memset>
	}
	return s8Ret;
 800f70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f712:	4618      	mov	r0, r3
 800f714:	3710      	adds	r7, #16
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	24000a64 	.word	0x24000a64

0800f720 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800f726:	463b      	mov	r3, r7
 800f728:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	22b9      	movs	r2, #185	; 0xb9
 800f72e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800f730:	2100      	movs	r1, #0
 800f732:	4810      	ldr	r0, [pc, #64]	; (800f774 <spi_flash_enter_low_power_mode+0x54>)
 800f734:	f7fe faa2 	bl	800dc7c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	4619      	mov	r1, r3
 800f73e:	480e      	ldr	r0, [pc, #56]	; (800f778 <spi_flash_enter_low_power_mode+0x58>)
 800f740:	f7fe fa9c 	bl	800dc7c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800f744:	2101      	movs	r1, #1
 800f746:	480d      	ldr	r0, [pc, #52]	; (800f77c <spi_flash_enter_low_power_mode+0x5c>)
 800f748:	f7fe fa98 	bl	800dc7c <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800f74c:	2100      	movs	r1, #0
 800f74e:	480c      	ldr	r0, [pc, #48]	; (800f780 <spi_flash_enter_low_power_mode+0x60>)
 800f750:	f7fe fa94 	bl	800dc7c <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800f754:	2181      	movs	r1, #129	; 0x81
 800f756:	480b      	ldr	r0, [pc, #44]	; (800f784 <spi_flash_enter_low_power_mode+0x64>)
 800f758:	f7fe fa90 	bl	800dc7c <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800f75c:	bf00      	nop
 800f75e:	480a      	ldr	r0, [pc, #40]	; (800f788 <spi_flash_enter_low_power_mode+0x68>)
 800f760:	f7fe fa72 	bl	800dc48 <nm_read_reg>
 800f764:	4603      	mov	r3, r0
 800f766:	2b01      	cmp	r3, #1
 800f768:	d1f9      	bne.n	800f75e <spi_flash_enter_low_power_mode+0x3e>
}
 800f76a:	bf00      	nop
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	00010208 	.word	0x00010208
 800f778:	0001020c 	.word	0x0001020c
 800f77c:	00010214 	.word	0x00010214
 800f780:	0001021c 	.word	0x0001021c
 800f784:	00010204 	.word	0x00010204
 800f788:	00010218 	.word	0x00010218

0800f78c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800f792:	463b      	mov	r3, r7
 800f794:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	22ab      	movs	r2, #171	; 0xab
 800f79a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800f79c:	2100      	movs	r1, #0
 800f79e:	4810      	ldr	r0, [pc, #64]	; (800f7e0 <spi_flash_leave_low_power_mode+0x54>)
 800f7a0:	f7fe fa6c 	bl	800dc7c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	480e      	ldr	r0, [pc, #56]	; (800f7e4 <spi_flash_leave_low_power_mode+0x58>)
 800f7ac:	f7fe fa66 	bl	800dc7c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800f7b0:	2101      	movs	r1, #1
 800f7b2:	480d      	ldr	r0, [pc, #52]	; (800f7e8 <spi_flash_leave_low_power_mode+0x5c>)
 800f7b4:	f7fe fa62 	bl	800dc7c <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	480c      	ldr	r0, [pc, #48]	; (800f7ec <spi_flash_leave_low_power_mode+0x60>)
 800f7bc:	f7fe fa5e 	bl	800dc7c <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800f7c0:	2181      	movs	r1, #129	; 0x81
 800f7c2:	480b      	ldr	r0, [pc, #44]	; (800f7f0 <spi_flash_leave_low_power_mode+0x64>)
 800f7c4:	f7fe fa5a 	bl	800dc7c <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800f7c8:	bf00      	nop
 800f7ca:	480a      	ldr	r0, [pc, #40]	; (800f7f4 <spi_flash_leave_low_power_mode+0x68>)
 800f7cc:	f7fe fa3c 	bl	800dc48 <nm_read_reg>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d1f9      	bne.n	800f7ca <spi_flash_leave_low_power_mode+0x3e>
}
 800f7d6:	bf00      	nop
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	00010208 	.word	0x00010208
 800f7e4:	0001020c 	.word	0x0001020c
 800f7e8:	00010214 	.word	0x00010214
 800f7ec:	0001021c 	.word	0x0001021c
 800f7f0:	00010204 	.word	0x00010204
 800f7f4:	00010218 	.word	0x00010218

0800f7f8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	4603      	mov	r3, r0
 800f800:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800f802:	2300      	movs	r3, #0
 800f804:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {
 800f806:	f7fd ff65 	bl	800d6d4 <nmi_get_chipid>
 800f80a:	4603      	mov	r3, r0
 800f80c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f810:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 800f814:	d331      	bcc.n	800f87a <spi_flash_enable+0x82>
		uint32 u32Val;

		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800f816:	f107 0308 	add.w	r3, r7, #8
 800f81a:	4619      	mov	r1, r3
 800f81c:	f241 4010 	movw	r0, #5136	; 0x1410
 800f820:	f7fe fa1e 	bl	800dc60 <nm_read_reg_with_ret>
 800f824:	4603      	mov	r3, r0
 800f826:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800f828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d126      	bne.n	800f87e <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	4b16      	ldr	r3, [pc, #88]	; (800f88c <spi_flash_enable+0x94>)
 800f834:	4013      	ands	r3, r2
 800f836:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
 800f838:	68ba      	ldr	r2, [r7, #8]
 800f83a:	4b15      	ldr	r3, [pc, #84]	; (800f890 <spi_flash_enable+0x98>)
 800f83c:	4313      	orrs	r3, r2
 800f83e:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	4619      	mov	r1, r3
 800f844:	f241 4010 	movw	r0, #5136	; 0x1410
 800f848:	f7fe fa18 	bl	800dc7c <nm_write_reg>
		if(enable) {
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <spi_flash_enable+0x60>
			spi_flash_leave_low_power_mode();
 800f852:	f7ff ff9b 	bl	800f78c <spi_flash_leave_low_power_mode>
 800f856:	e001      	b.n	800f85c <spi_flash_enable+0x64>
		} else {
			spi_flash_enter_low_power_mode();
 800f858:	f7ff ff62 	bl	800f720 <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	4b0b      	ldr	r3, [pc, #44]	; (800f88c <spi_flash_enable+0x94>)
 800f860:	4013      	ands	r3, r2
 800f862:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f86a:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	4619      	mov	r1, r3
 800f870:	f241 4010 	movw	r0, #5136	; 0x1410
 800f874:	f7fe fa02 	bl	800dc7c <nm_write_reg>
 800f878:	e002      	b.n	800f880 <spi_flash_enable+0x88>
	}
ERR1:
 800f87a:	bf00      	nop
 800f87c:	e000      	b.n	800f880 <spi_flash_enable+0x88>
			goto ERR1;
 800f87e:	bf00      	nop
	return s8Ret;
 800f880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	f8888fff 	.word	0xf8888fff
 800f890:	01111000 	.word	0x01111000

0800f894 <__errno>:
 800f894:	4b01      	ldr	r3, [pc, #4]	; (800f89c <__errno+0x8>)
 800f896:	6818      	ldr	r0, [r3, #0]
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	24000020 	.word	0x24000020

0800f8a0 <__libc_init_array>:
 800f8a0:	b570      	push	{r4, r5, r6, lr}
 800f8a2:	4e0d      	ldr	r6, [pc, #52]	; (800f8d8 <__libc_init_array+0x38>)
 800f8a4:	4c0d      	ldr	r4, [pc, #52]	; (800f8dc <__libc_init_array+0x3c>)
 800f8a6:	1ba4      	subs	r4, r4, r6
 800f8a8:	10a4      	asrs	r4, r4, #2
 800f8aa:	2500      	movs	r5, #0
 800f8ac:	42a5      	cmp	r5, r4
 800f8ae:	d109      	bne.n	800f8c4 <__libc_init_array+0x24>
 800f8b0:	4e0b      	ldr	r6, [pc, #44]	; (800f8e0 <__libc_init_array+0x40>)
 800f8b2:	4c0c      	ldr	r4, [pc, #48]	; (800f8e4 <__libc_init_array+0x44>)
 800f8b4:	f000 ffb2 	bl	801081c <_init>
 800f8b8:	1ba4      	subs	r4, r4, r6
 800f8ba:	10a4      	asrs	r4, r4, #2
 800f8bc:	2500      	movs	r5, #0
 800f8be:	42a5      	cmp	r5, r4
 800f8c0:	d105      	bne.n	800f8ce <__libc_init_array+0x2e>
 800f8c2:	bd70      	pop	{r4, r5, r6, pc}
 800f8c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f8c8:	4798      	blx	r3
 800f8ca:	3501      	adds	r5, #1
 800f8cc:	e7ee      	b.n	800f8ac <__libc_init_array+0xc>
 800f8ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f8d2:	4798      	blx	r3
 800f8d4:	3501      	adds	r5, #1
 800f8d6:	e7f2      	b.n	800f8be <__libc_init_array+0x1e>
 800f8d8:	08011530 	.word	0x08011530
 800f8dc:	08011530 	.word	0x08011530
 800f8e0:	08011530 	.word	0x08011530
 800f8e4:	08011534 	.word	0x08011534

0800f8e8 <memset>:
 800f8e8:	4402      	add	r2, r0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d100      	bne.n	800f8f2 <memset+0xa>
 800f8f0:	4770      	bx	lr
 800f8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f8f6:	e7f9      	b.n	800f8ec <memset+0x4>

0800f8f8 <iprintf>:
 800f8f8:	b40f      	push	{r0, r1, r2, r3}
 800f8fa:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <iprintf+0x2c>)
 800f8fc:	b513      	push	{r0, r1, r4, lr}
 800f8fe:	681c      	ldr	r4, [r3, #0]
 800f900:	b124      	cbz	r4, 800f90c <iprintf+0x14>
 800f902:	69a3      	ldr	r3, [r4, #24]
 800f904:	b913      	cbnz	r3, 800f90c <iprintf+0x14>
 800f906:	4620      	mov	r0, r4
 800f908:	f000 fa36 	bl	800fd78 <__sinit>
 800f90c:	ab05      	add	r3, sp, #20
 800f90e:	9a04      	ldr	r2, [sp, #16]
 800f910:	68a1      	ldr	r1, [r4, #8]
 800f912:	9301      	str	r3, [sp, #4]
 800f914:	4620      	mov	r0, r4
 800f916:	f000 fbef 	bl	80100f8 <_vfiprintf_r>
 800f91a:	b002      	add	sp, #8
 800f91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f920:	b004      	add	sp, #16
 800f922:	4770      	bx	lr
 800f924:	24000020 	.word	0x24000020

0800f928 <putchar>:
 800f928:	b538      	push	{r3, r4, r5, lr}
 800f92a:	4b08      	ldr	r3, [pc, #32]	; (800f94c <putchar+0x24>)
 800f92c:	681c      	ldr	r4, [r3, #0]
 800f92e:	4605      	mov	r5, r0
 800f930:	b124      	cbz	r4, 800f93c <putchar+0x14>
 800f932:	69a3      	ldr	r3, [r4, #24]
 800f934:	b913      	cbnz	r3, 800f93c <putchar+0x14>
 800f936:	4620      	mov	r0, r4
 800f938:	f000 fa1e 	bl	800fd78 <__sinit>
 800f93c:	68a2      	ldr	r2, [r4, #8]
 800f93e:	4629      	mov	r1, r5
 800f940:	4620      	mov	r0, r4
 800f942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f946:	f000 be75 	b.w	8010634 <_putc_r>
 800f94a:	bf00      	nop
 800f94c:	24000020 	.word	0x24000020

0800f950 <_puts_r>:
 800f950:	b570      	push	{r4, r5, r6, lr}
 800f952:	460e      	mov	r6, r1
 800f954:	4605      	mov	r5, r0
 800f956:	b118      	cbz	r0, 800f960 <_puts_r+0x10>
 800f958:	6983      	ldr	r3, [r0, #24]
 800f95a:	b90b      	cbnz	r3, 800f960 <_puts_r+0x10>
 800f95c:	f000 fa0c 	bl	800fd78 <__sinit>
 800f960:	69ab      	ldr	r3, [r5, #24]
 800f962:	68ac      	ldr	r4, [r5, #8]
 800f964:	b913      	cbnz	r3, 800f96c <_puts_r+0x1c>
 800f966:	4628      	mov	r0, r5
 800f968:	f000 fa06 	bl	800fd78 <__sinit>
 800f96c:	4b23      	ldr	r3, [pc, #140]	; (800f9fc <_puts_r+0xac>)
 800f96e:	429c      	cmp	r4, r3
 800f970:	d117      	bne.n	800f9a2 <_puts_r+0x52>
 800f972:	686c      	ldr	r4, [r5, #4]
 800f974:	89a3      	ldrh	r3, [r4, #12]
 800f976:	071b      	lsls	r3, r3, #28
 800f978:	d51d      	bpl.n	800f9b6 <_puts_r+0x66>
 800f97a:	6923      	ldr	r3, [r4, #16]
 800f97c:	b1db      	cbz	r3, 800f9b6 <_puts_r+0x66>
 800f97e:	3e01      	subs	r6, #1
 800f980:	68a3      	ldr	r3, [r4, #8]
 800f982:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f986:	3b01      	subs	r3, #1
 800f988:	60a3      	str	r3, [r4, #8]
 800f98a:	b9e9      	cbnz	r1, 800f9c8 <_puts_r+0x78>
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	da2e      	bge.n	800f9ee <_puts_r+0x9e>
 800f990:	4622      	mov	r2, r4
 800f992:	210a      	movs	r1, #10
 800f994:	4628      	mov	r0, r5
 800f996:	f000 f83f 	bl	800fa18 <__swbuf_r>
 800f99a:	3001      	adds	r0, #1
 800f99c:	d011      	beq.n	800f9c2 <_puts_r+0x72>
 800f99e:	200a      	movs	r0, #10
 800f9a0:	e011      	b.n	800f9c6 <_puts_r+0x76>
 800f9a2:	4b17      	ldr	r3, [pc, #92]	; (800fa00 <_puts_r+0xb0>)
 800f9a4:	429c      	cmp	r4, r3
 800f9a6:	d101      	bne.n	800f9ac <_puts_r+0x5c>
 800f9a8:	68ac      	ldr	r4, [r5, #8]
 800f9aa:	e7e3      	b.n	800f974 <_puts_r+0x24>
 800f9ac:	4b15      	ldr	r3, [pc, #84]	; (800fa04 <_puts_r+0xb4>)
 800f9ae:	429c      	cmp	r4, r3
 800f9b0:	bf08      	it	eq
 800f9b2:	68ec      	ldreq	r4, [r5, #12]
 800f9b4:	e7de      	b.n	800f974 <_puts_r+0x24>
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	f000 f87f 	bl	800fabc <__swsetup_r>
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d0dd      	beq.n	800f97e <_puts_r+0x2e>
 800f9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	da04      	bge.n	800f9d6 <_puts_r+0x86>
 800f9cc:	69a2      	ldr	r2, [r4, #24]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	dc06      	bgt.n	800f9e0 <_puts_r+0x90>
 800f9d2:	290a      	cmp	r1, #10
 800f9d4:	d004      	beq.n	800f9e0 <_puts_r+0x90>
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	6022      	str	r2, [r4, #0]
 800f9dc:	7019      	strb	r1, [r3, #0]
 800f9de:	e7cf      	b.n	800f980 <_puts_r+0x30>
 800f9e0:	4622      	mov	r2, r4
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	f000 f818 	bl	800fa18 <__swbuf_r>
 800f9e8:	3001      	adds	r0, #1
 800f9ea:	d1c9      	bne.n	800f980 <_puts_r+0x30>
 800f9ec:	e7e9      	b.n	800f9c2 <_puts_r+0x72>
 800f9ee:	6823      	ldr	r3, [r4, #0]
 800f9f0:	200a      	movs	r0, #10
 800f9f2:	1c5a      	adds	r2, r3, #1
 800f9f4:	6022      	str	r2, [r4, #0]
 800f9f6:	7018      	strb	r0, [r3, #0]
 800f9f8:	e7e5      	b.n	800f9c6 <_puts_r+0x76>
 800f9fa:	bf00      	nop
 800f9fc:	080114b4 	.word	0x080114b4
 800fa00:	080114d4 	.word	0x080114d4
 800fa04:	08011494 	.word	0x08011494

0800fa08 <puts>:
 800fa08:	4b02      	ldr	r3, [pc, #8]	; (800fa14 <puts+0xc>)
 800fa0a:	4601      	mov	r1, r0
 800fa0c:	6818      	ldr	r0, [r3, #0]
 800fa0e:	f7ff bf9f 	b.w	800f950 <_puts_r>
 800fa12:	bf00      	nop
 800fa14:	24000020 	.word	0x24000020

0800fa18 <__swbuf_r>:
 800fa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1a:	460e      	mov	r6, r1
 800fa1c:	4614      	mov	r4, r2
 800fa1e:	4605      	mov	r5, r0
 800fa20:	b118      	cbz	r0, 800fa2a <__swbuf_r+0x12>
 800fa22:	6983      	ldr	r3, [r0, #24]
 800fa24:	b90b      	cbnz	r3, 800fa2a <__swbuf_r+0x12>
 800fa26:	f000 f9a7 	bl	800fd78 <__sinit>
 800fa2a:	4b21      	ldr	r3, [pc, #132]	; (800fab0 <__swbuf_r+0x98>)
 800fa2c:	429c      	cmp	r4, r3
 800fa2e:	d12a      	bne.n	800fa86 <__swbuf_r+0x6e>
 800fa30:	686c      	ldr	r4, [r5, #4]
 800fa32:	69a3      	ldr	r3, [r4, #24]
 800fa34:	60a3      	str	r3, [r4, #8]
 800fa36:	89a3      	ldrh	r3, [r4, #12]
 800fa38:	071a      	lsls	r2, r3, #28
 800fa3a:	d52e      	bpl.n	800fa9a <__swbuf_r+0x82>
 800fa3c:	6923      	ldr	r3, [r4, #16]
 800fa3e:	b363      	cbz	r3, 800fa9a <__swbuf_r+0x82>
 800fa40:	6923      	ldr	r3, [r4, #16]
 800fa42:	6820      	ldr	r0, [r4, #0]
 800fa44:	1ac0      	subs	r0, r0, r3
 800fa46:	6963      	ldr	r3, [r4, #20]
 800fa48:	b2f6      	uxtb	r6, r6
 800fa4a:	4283      	cmp	r3, r0
 800fa4c:	4637      	mov	r7, r6
 800fa4e:	dc04      	bgt.n	800fa5a <__swbuf_r+0x42>
 800fa50:	4621      	mov	r1, r4
 800fa52:	4628      	mov	r0, r5
 800fa54:	f000 f926 	bl	800fca4 <_fflush_r>
 800fa58:	bb28      	cbnz	r0, 800faa6 <__swbuf_r+0x8e>
 800fa5a:	68a3      	ldr	r3, [r4, #8]
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	60a3      	str	r3, [r4, #8]
 800fa60:	6823      	ldr	r3, [r4, #0]
 800fa62:	1c5a      	adds	r2, r3, #1
 800fa64:	6022      	str	r2, [r4, #0]
 800fa66:	701e      	strb	r6, [r3, #0]
 800fa68:	6963      	ldr	r3, [r4, #20]
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	4283      	cmp	r3, r0
 800fa6e:	d004      	beq.n	800fa7a <__swbuf_r+0x62>
 800fa70:	89a3      	ldrh	r3, [r4, #12]
 800fa72:	07db      	lsls	r3, r3, #31
 800fa74:	d519      	bpl.n	800faaa <__swbuf_r+0x92>
 800fa76:	2e0a      	cmp	r6, #10
 800fa78:	d117      	bne.n	800faaa <__swbuf_r+0x92>
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	f000 f911 	bl	800fca4 <_fflush_r>
 800fa82:	b190      	cbz	r0, 800faaa <__swbuf_r+0x92>
 800fa84:	e00f      	b.n	800faa6 <__swbuf_r+0x8e>
 800fa86:	4b0b      	ldr	r3, [pc, #44]	; (800fab4 <__swbuf_r+0x9c>)
 800fa88:	429c      	cmp	r4, r3
 800fa8a:	d101      	bne.n	800fa90 <__swbuf_r+0x78>
 800fa8c:	68ac      	ldr	r4, [r5, #8]
 800fa8e:	e7d0      	b.n	800fa32 <__swbuf_r+0x1a>
 800fa90:	4b09      	ldr	r3, [pc, #36]	; (800fab8 <__swbuf_r+0xa0>)
 800fa92:	429c      	cmp	r4, r3
 800fa94:	bf08      	it	eq
 800fa96:	68ec      	ldreq	r4, [r5, #12]
 800fa98:	e7cb      	b.n	800fa32 <__swbuf_r+0x1a>
 800fa9a:	4621      	mov	r1, r4
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	f000 f80d 	bl	800fabc <__swsetup_r>
 800faa2:	2800      	cmp	r0, #0
 800faa4:	d0cc      	beq.n	800fa40 <__swbuf_r+0x28>
 800faa6:	f04f 37ff 	mov.w	r7, #4294967295
 800faaa:	4638      	mov	r0, r7
 800faac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faae:	bf00      	nop
 800fab0:	080114b4 	.word	0x080114b4
 800fab4:	080114d4 	.word	0x080114d4
 800fab8:	08011494 	.word	0x08011494

0800fabc <__swsetup_r>:
 800fabc:	4b32      	ldr	r3, [pc, #200]	; (800fb88 <__swsetup_r+0xcc>)
 800fabe:	b570      	push	{r4, r5, r6, lr}
 800fac0:	681d      	ldr	r5, [r3, #0]
 800fac2:	4606      	mov	r6, r0
 800fac4:	460c      	mov	r4, r1
 800fac6:	b125      	cbz	r5, 800fad2 <__swsetup_r+0x16>
 800fac8:	69ab      	ldr	r3, [r5, #24]
 800faca:	b913      	cbnz	r3, 800fad2 <__swsetup_r+0x16>
 800facc:	4628      	mov	r0, r5
 800face:	f000 f953 	bl	800fd78 <__sinit>
 800fad2:	4b2e      	ldr	r3, [pc, #184]	; (800fb8c <__swsetup_r+0xd0>)
 800fad4:	429c      	cmp	r4, r3
 800fad6:	d10f      	bne.n	800faf8 <__swsetup_r+0x3c>
 800fad8:	686c      	ldr	r4, [r5, #4]
 800fada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fade:	b29a      	uxth	r2, r3
 800fae0:	0715      	lsls	r5, r2, #28
 800fae2:	d42c      	bmi.n	800fb3e <__swsetup_r+0x82>
 800fae4:	06d0      	lsls	r0, r2, #27
 800fae6:	d411      	bmi.n	800fb0c <__swsetup_r+0x50>
 800fae8:	2209      	movs	r2, #9
 800faea:	6032      	str	r2, [r6, #0]
 800faec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faf0:	81a3      	strh	r3, [r4, #12]
 800faf2:	f04f 30ff 	mov.w	r0, #4294967295
 800faf6:	e03e      	b.n	800fb76 <__swsetup_r+0xba>
 800faf8:	4b25      	ldr	r3, [pc, #148]	; (800fb90 <__swsetup_r+0xd4>)
 800fafa:	429c      	cmp	r4, r3
 800fafc:	d101      	bne.n	800fb02 <__swsetup_r+0x46>
 800fafe:	68ac      	ldr	r4, [r5, #8]
 800fb00:	e7eb      	b.n	800fada <__swsetup_r+0x1e>
 800fb02:	4b24      	ldr	r3, [pc, #144]	; (800fb94 <__swsetup_r+0xd8>)
 800fb04:	429c      	cmp	r4, r3
 800fb06:	bf08      	it	eq
 800fb08:	68ec      	ldreq	r4, [r5, #12]
 800fb0a:	e7e6      	b.n	800fada <__swsetup_r+0x1e>
 800fb0c:	0751      	lsls	r1, r2, #29
 800fb0e:	d512      	bpl.n	800fb36 <__swsetup_r+0x7a>
 800fb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb12:	b141      	cbz	r1, 800fb26 <__swsetup_r+0x6a>
 800fb14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb18:	4299      	cmp	r1, r3
 800fb1a:	d002      	beq.n	800fb22 <__swsetup_r+0x66>
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	f000 fa19 	bl	800ff54 <_free_r>
 800fb22:	2300      	movs	r3, #0
 800fb24:	6363      	str	r3, [r4, #52]	; 0x34
 800fb26:	89a3      	ldrh	r3, [r4, #12]
 800fb28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb2c:	81a3      	strh	r3, [r4, #12]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	6063      	str	r3, [r4, #4]
 800fb32:	6923      	ldr	r3, [r4, #16]
 800fb34:	6023      	str	r3, [r4, #0]
 800fb36:	89a3      	ldrh	r3, [r4, #12]
 800fb38:	f043 0308 	orr.w	r3, r3, #8
 800fb3c:	81a3      	strh	r3, [r4, #12]
 800fb3e:	6923      	ldr	r3, [r4, #16]
 800fb40:	b94b      	cbnz	r3, 800fb56 <__swsetup_r+0x9a>
 800fb42:	89a3      	ldrh	r3, [r4, #12]
 800fb44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb4c:	d003      	beq.n	800fb56 <__swsetup_r+0x9a>
 800fb4e:	4621      	mov	r1, r4
 800fb50:	4630      	mov	r0, r6
 800fb52:	f000 f9bf 	bl	800fed4 <__smakebuf_r>
 800fb56:	89a2      	ldrh	r2, [r4, #12]
 800fb58:	f012 0301 	ands.w	r3, r2, #1
 800fb5c:	d00c      	beq.n	800fb78 <__swsetup_r+0xbc>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	60a3      	str	r3, [r4, #8]
 800fb62:	6963      	ldr	r3, [r4, #20]
 800fb64:	425b      	negs	r3, r3
 800fb66:	61a3      	str	r3, [r4, #24]
 800fb68:	6923      	ldr	r3, [r4, #16]
 800fb6a:	b953      	cbnz	r3, 800fb82 <__swsetup_r+0xc6>
 800fb6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fb74:	d1ba      	bne.n	800faec <__swsetup_r+0x30>
 800fb76:	bd70      	pop	{r4, r5, r6, pc}
 800fb78:	0792      	lsls	r2, r2, #30
 800fb7a:	bf58      	it	pl
 800fb7c:	6963      	ldrpl	r3, [r4, #20]
 800fb7e:	60a3      	str	r3, [r4, #8]
 800fb80:	e7f2      	b.n	800fb68 <__swsetup_r+0xac>
 800fb82:	2000      	movs	r0, #0
 800fb84:	e7f7      	b.n	800fb76 <__swsetup_r+0xba>
 800fb86:	bf00      	nop
 800fb88:	24000020 	.word	0x24000020
 800fb8c:	080114b4 	.word	0x080114b4
 800fb90:	080114d4 	.word	0x080114d4
 800fb94:	08011494 	.word	0x08011494

0800fb98 <__sflush_r>:
 800fb98:	898a      	ldrh	r2, [r1, #12]
 800fb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb9e:	4605      	mov	r5, r0
 800fba0:	0710      	lsls	r0, r2, #28
 800fba2:	460c      	mov	r4, r1
 800fba4:	d458      	bmi.n	800fc58 <__sflush_r+0xc0>
 800fba6:	684b      	ldr	r3, [r1, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	dc05      	bgt.n	800fbb8 <__sflush_r+0x20>
 800fbac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	dc02      	bgt.n	800fbb8 <__sflush_r+0x20>
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbba:	2e00      	cmp	r6, #0
 800fbbc:	d0f9      	beq.n	800fbb2 <__sflush_r+0x1a>
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbc4:	682f      	ldr	r7, [r5, #0]
 800fbc6:	6a21      	ldr	r1, [r4, #32]
 800fbc8:	602b      	str	r3, [r5, #0]
 800fbca:	d032      	beq.n	800fc32 <__sflush_r+0x9a>
 800fbcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbce:	89a3      	ldrh	r3, [r4, #12]
 800fbd0:	075a      	lsls	r2, r3, #29
 800fbd2:	d505      	bpl.n	800fbe0 <__sflush_r+0x48>
 800fbd4:	6863      	ldr	r3, [r4, #4]
 800fbd6:	1ac0      	subs	r0, r0, r3
 800fbd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbda:	b10b      	cbz	r3, 800fbe0 <__sflush_r+0x48>
 800fbdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbde:	1ac0      	subs	r0, r0, r3
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbe6:	6a21      	ldr	r1, [r4, #32]
 800fbe8:	4628      	mov	r0, r5
 800fbea:	47b0      	blx	r6
 800fbec:	1c43      	adds	r3, r0, #1
 800fbee:	89a3      	ldrh	r3, [r4, #12]
 800fbf0:	d106      	bne.n	800fc00 <__sflush_r+0x68>
 800fbf2:	6829      	ldr	r1, [r5, #0]
 800fbf4:	291d      	cmp	r1, #29
 800fbf6:	d848      	bhi.n	800fc8a <__sflush_r+0xf2>
 800fbf8:	4a29      	ldr	r2, [pc, #164]	; (800fca0 <__sflush_r+0x108>)
 800fbfa:	40ca      	lsrs	r2, r1
 800fbfc:	07d6      	lsls	r6, r2, #31
 800fbfe:	d544      	bpl.n	800fc8a <__sflush_r+0xf2>
 800fc00:	2200      	movs	r2, #0
 800fc02:	6062      	str	r2, [r4, #4]
 800fc04:	04d9      	lsls	r1, r3, #19
 800fc06:	6922      	ldr	r2, [r4, #16]
 800fc08:	6022      	str	r2, [r4, #0]
 800fc0a:	d504      	bpl.n	800fc16 <__sflush_r+0x7e>
 800fc0c:	1c42      	adds	r2, r0, #1
 800fc0e:	d101      	bne.n	800fc14 <__sflush_r+0x7c>
 800fc10:	682b      	ldr	r3, [r5, #0]
 800fc12:	b903      	cbnz	r3, 800fc16 <__sflush_r+0x7e>
 800fc14:	6560      	str	r0, [r4, #84]	; 0x54
 800fc16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc18:	602f      	str	r7, [r5, #0]
 800fc1a:	2900      	cmp	r1, #0
 800fc1c:	d0c9      	beq.n	800fbb2 <__sflush_r+0x1a>
 800fc1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc22:	4299      	cmp	r1, r3
 800fc24:	d002      	beq.n	800fc2c <__sflush_r+0x94>
 800fc26:	4628      	mov	r0, r5
 800fc28:	f000 f994 	bl	800ff54 <_free_r>
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	6360      	str	r0, [r4, #52]	; 0x34
 800fc30:	e7c0      	b.n	800fbb4 <__sflush_r+0x1c>
 800fc32:	2301      	movs	r3, #1
 800fc34:	4628      	mov	r0, r5
 800fc36:	47b0      	blx	r6
 800fc38:	1c41      	adds	r1, r0, #1
 800fc3a:	d1c8      	bne.n	800fbce <__sflush_r+0x36>
 800fc3c:	682b      	ldr	r3, [r5, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d0c5      	beq.n	800fbce <__sflush_r+0x36>
 800fc42:	2b1d      	cmp	r3, #29
 800fc44:	d001      	beq.n	800fc4a <__sflush_r+0xb2>
 800fc46:	2b16      	cmp	r3, #22
 800fc48:	d101      	bne.n	800fc4e <__sflush_r+0xb6>
 800fc4a:	602f      	str	r7, [r5, #0]
 800fc4c:	e7b1      	b.n	800fbb2 <__sflush_r+0x1a>
 800fc4e:	89a3      	ldrh	r3, [r4, #12]
 800fc50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc54:	81a3      	strh	r3, [r4, #12]
 800fc56:	e7ad      	b.n	800fbb4 <__sflush_r+0x1c>
 800fc58:	690f      	ldr	r7, [r1, #16]
 800fc5a:	2f00      	cmp	r7, #0
 800fc5c:	d0a9      	beq.n	800fbb2 <__sflush_r+0x1a>
 800fc5e:	0793      	lsls	r3, r2, #30
 800fc60:	680e      	ldr	r6, [r1, #0]
 800fc62:	bf08      	it	eq
 800fc64:	694b      	ldreq	r3, [r1, #20]
 800fc66:	600f      	str	r7, [r1, #0]
 800fc68:	bf18      	it	ne
 800fc6a:	2300      	movne	r3, #0
 800fc6c:	eba6 0807 	sub.w	r8, r6, r7
 800fc70:	608b      	str	r3, [r1, #8]
 800fc72:	f1b8 0f00 	cmp.w	r8, #0
 800fc76:	dd9c      	ble.n	800fbb2 <__sflush_r+0x1a>
 800fc78:	4643      	mov	r3, r8
 800fc7a:	463a      	mov	r2, r7
 800fc7c:	6a21      	ldr	r1, [r4, #32]
 800fc7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc80:	4628      	mov	r0, r5
 800fc82:	47b0      	blx	r6
 800fc84:	2800      	cmp	r0, #0
 800fc86:	dc06      	bgt.n	800fc96 <__sflush_r+0xfe>
 800fc88:	89a3      	ldrh	r3, [r4, #12]
 800fc8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc8e:	81a3      	strh	r3, [r4, #12]
 800fc90:	f04f 30ff 	mov.w	r0, #4294967295
 800fc94:	e78e      	b.n	800fbb4 <__sflush_r+0x1c>
 800fc96:	4407      	add	r7, r0
 800fc98:	eba8 0800 	sub.w	r8, r8, r0
 800fc9c:	e7e9      	b.n	800fc72 <__sflush_r+0xda>
 800fc9e:	bf00      	nop
 800fca0:	20400001 	.word	0x20400001

0800fca4 <_fflush_r>:
 800fca4:	b538      	push	{r3, r4, r5, lr}
 800fca6:	690b      	ldr	r3, [r1, #16]
 800fca8:	4605      	mov	r5, r0
 800fcaa:	460c      	mov	r4, r1
 800fcac:	b1db      	cbz	r3, 800fce6 <_fflush_r+0x42>
 800fcae:	b118      	cbz	r0, 800fcb8 <_fflush_r+0x14>
 800fcb0:	6983      	ldr	r3, [r0, #24]
 800fcb2:	b90b      	cbnz	r3, 800fcb8 <_fflush_r+0x14>
 800fcb4:	f000 f860 	bl	800fd78 <__sinit>
 800fcb8:	4b0c      	ldr	r3, [pc, #48]	; (800fcec <_fflush_r+0x48>)
 800fcba:	429c      	cmp	r4, r3
 800fcbc:	d109      	bne.n	800fcd2 <_fflush_r+0x2e>
 800fcbe:	686c      	ldr	r4, [r5, #4]
 800fcc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcc4:	b17b      	cbz	r3, 800fce6 <_fflush_r+0x42>
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	4628      	mov	r0, r5
 800fcca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcce:	f7ff bf63 	b.w	800fb98 <__sflush_r>
 800fcd2:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <_fflush_r+0x4c>)
 800fcd4:	429c      	cmp	r4, r3
 800fcd6:	d101      	bne.n	800fcdc <_fflush_r+0x38>
 800fcd8:	68ac      	ldr	r4, [r5, #8]
 800fcda:	e7f1      	b.n	800fcc0 <_fflush_r+0x1c>
 800fcdc:	4b05      	ldr	r3, [pc, #20]	; (800fcf4 <_fflush_r+0x50>)
 800fcde:	429c      	cmp	r4, r3
 800fce0:	bf08      	it	eq
 800fce2:	68ec      	ldreq	r4, [r5, #12]
 800fce4:	e7ec      	b.n	800fcc0 <_fflush_r+0x1c>
 800fce6:	2000      	movs	r0, #0
 800fce8:	bd38      	pop	{r3, r4, r5, pc}
 800fcea:	bf00      	nop
 800fcec:	080114b4 	.word	0x080114b4
 800fcf0:	080114d4 	.word	0x080114d4
 800fcf4:	08011494 	.word	0x08011494

0800fcf8 <std>:
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	b510      	push	{r4, lr}
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	e9c0 3300 	strd	r3, r3, [r0]
 800fd02:	6083      	str	r3, [r0, #8]
 800fd04:	8181      	strh	r1, [r0, #12]
 800fd06:	6643      	str	r3, [r0, #100]	; 0x64
 800fd08:	81c2      	strh	r2, [r0, #14]
 800fd0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd0e:	6183      	str	r3, [r0, #24]
 800fd10:	4619      	mov	r1, r3
 800fd12:	2208      	movs	r2, #8
 800fd14:	305c      	adds	r0, #92	; 0x5c
 800fd16:	f7ff fde7 	bl	800f8e8 <memset>
 800fd1a:	4b05      	ldr	r3, [pc, #20]	; (800fd30 <std+0x38>)
 800fd1c:	6263      	str	r3, [r4, #36]	; 0x24
 800fd1e:	4b05      	ldr	r3, [pc, #20]	; (800fd34 <std+0x3c>)
 800fd20:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd22:	4b05      	ldr	r3, [pc, #20]	; (800fd38 <std+0x40>)
 800fd24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd26:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <std+0x44>)
 800fd28:	6224      	str	r4, [r4, #32]
 800fd2a:	6323      	str	r3, [r4, #48]	; 0x30
 800fd2c:	bd10      	pop	{r4, pc}
 800fd2e:	bf00      	nop
 800fd30:	080106c1 	.word	0x080106c1
 800fd34:	080106e3 	.word	0x080106e3
 800fd38:	0801071b 	.word	0x0801071b
 800fd3c:	0801073f 	.word	0x0801073f

0800fd40 <_cleanup_r>:
 800fd40:	4901      	ldr	r1, [pc, #4]	; (800fd48 <_cleanup_r+0x8>)
 800fd42:	f000 b885 	b.w	800fe50 <_fwalk_reent>
 800fd46:	bf00      	nop
 800fd48:	0800fca5 	.word	0x0800fca5

0800fd4c <__sfmoreglue>:
 800fd4c:	b570      	push	{r4, r5, r6, lr}
 800fd4e:	1e4a      	subs	r2, r1, #1
 800fd50:	2568      	movs	r5, #104	; 0x68
 800fd52:	4355      	muls	r5, r2
 800fd54:	460e      	mov	r6, r1
 800fd56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd5a:	f000 f949 	bl	800fff0 <_malloc_r>
 800fd5e:	4604      	mov	r4, r0
 800fd60:	b140      	cbz	r0, 800fd74 <__sfmoreglue+0x28>
 800fd62:	2100      	movs	r1, #0
 800fd64:	e9c0 1600 	strd	r1, r6, [r0]
 800fd68:	300c      	adds	r0, #12
 800fd6a:	60a0      	str	r0, [r4, #8]
 800fd6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd70:	f7ff fdba 	bl	800f8e8 <memset>
 800fd74:	4620      	mov	r0, r4
 800fd76:	bd70      	pop	{r4, r5, r6, pc}

0800fd78 <__sinit>:
 800fd78:	6983      	ldr	r3, [r0, #24]
 800fd7a:	b510      	push	{r4, lr}
 800fd7c:	4604      	mov	r4, r0
 800fd7e:	bb33      	cbnz	r3, 800fdce <__sinit+0x56>
 800fd80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fd84:	6503      	str	r3, [r0, #80]	; 0x50
 800fd86:	4b12      	ldr	r3, [pc, #72]	; (800fdd0 <__sinit+0x58>)
 800fd88:	4a12      	ldr	r2, [pc, #72]	; (800fdd4 <__sinit+0x5c>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	6282      	str	r2, [r0, #40]	; 0x28
 800fd8e:	4298      	cmp	r0, r3
 800fd90:	bf04      	itt	eq
 800fd92:	2301      	moveq	r3, #1
 800fd94:	6183      	streq	r3, [r0, #24]
 800fd96:	f000 f81f 	bl	800fdd8 <__sfp>
 800fd9a:	6060      	str	r0, [r4, #4]
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f000 f81b 	bl	800fdd8 <__sfp>
 800fda2:	60a0      	str	r0, [r4, #8]
 800fda4:	4620      	mov	r0, r4
 800fda6:	f000 f817 	bl	800fdd8 <__sfp>
 800fdaa:	2200      	movs	r2, #0
 800fdac:	60e0      	str	r0, [r4, #12]
 800fdae:	2104      	movs	r1, #4
 800fdb0:	6860      	ldr	r0, [r4, #4]
 800fdb2:	f7ff ffa1 	bl	800fcf8 <std>
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	2109      	movs	r1, #9
 800fdba:	68a0      	ldr	r0, [r4, #8]
 800fdbc:	f7ff ff9c 	bl	800fcf8 <std>
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	2112      	movs	r1, #18
 800fdc4:	68e0      	ldr	r0, [r4, #12]
 800fdc6:	f7ff ff97 	bl	800fcf8 <std>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	61a3      	str	r3, [r4, #24]
 800fdce:	bd10      	pop	{r4, pc}
 800fdd0:	08011490 	.word	0x08011490
 800fdd4:	0800fd41 	.word	0x0800fd41

0800fdd8 <__sfp>:
 800fdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdda:	4b1b      	ldr	r3, [pc, #108]	; (800fe48 <__sfp+0x70>)
 800fddc:	681e      	ldr	r6, [r3, #0]
 800fdde:	69b3      	ldr	r3, [r6, #24]
 800fde0:	4607      	mov	r7, r0
 800fde2:	b913      	cbnz	r3, 800fdea <__sfp+0x12>
 800fde4:	4630      	mov	r0, r6
 800fde6:	f7ff ffc7 	bl	800fd78 <__sinit>
 800fdea:	3648      	adds	r6, #72	; 0x48
 800fdec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	d503      	bpl.n	800fdfc <__sfp+0x24>
 800fdf4:	6833      	ldr	r3, [r6, #0]
 800fdf6:	b133      	cbz	r3, 800fe06 <__sfp+0x2e>
 800fdf8:	6836      	ldr	r6, [r6, #0]
 800fdfa:	e7f7      	b.n	800fdec <__sfp+0x14>
 800fdfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe00:	b16d      	cbz	r5, 800fe1e <__sfp+0x46>
 800fe02:	3468      	adds	r4, #104	; 0x68
 800fe04:	e7f4      	b.n	800fdf0 <__sfp+0x18>
 800fe06:	2104      	movs	r1, #4
 800fe08:	4638      	mov	r0, r7
 800fe0a:	f7ff ff9f 	bl	800fd4c <__sfmoreglue>
 800fe0e:	6030      	str	r0, [r6, #0]
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d1f1      	bne.n	800fdf8 <__sfp+0x20>
 800fe14:	230c      	movs	r3, #12
 800fe16:	603b      	str	r3, [r7, #0]
 800fe18:	4604      	mov	r4, r0
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe1e:	4b0b      	ldr	r3, [pc, #44]	; (800fe4c <__sfp+0x74>)
 800fe20:	6665      	str	r5, [r4, #100]	; 0x64
 800fe22:	e9c4 5500 	strd	r5, r5, [r4]
 800fe26:	60a5      	str	r5, [r4, #8]
 800fe28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fe2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fe30:	2208      	movs	r2, #8
 800fe32:	4629      	mov	r1, r5
 800fe34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe38:	f7ff fd56 	bl	800f8e8 <memset>
 800fe3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe44:	e7e9      	b.n	800fe1a <__sfp+0x42>
 800fe46:	bf00      	nop
 800fe48:	08011490 	.word	0x08011490
 800fe4c:	ffff0001 	.word	0xffff0001

0800fe50 <_fwalk_reent>:
 800fe50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe54:	4680      	mov	r8, r0
 800fe56:	4689      	mov	r9, r1
 800fe58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe5c:	2600      	movs	r6, #0
 800fe5e:	b914      	cbnz	r4, 800fe66 <_fwalk_reent+0x16>
 800fe60:	4630      	mov	r0, r6
 800fe62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fe6a:	3f01      	subs	r7, #1
 800fe6c:	d501      	bpl.n	800fe72 <_fwalk_reent+0x22>
 800fe6e:	6824      	ldr	r4, [r4, #0]
 800fe70:	e7f5      	b.n	800fe5e <_fwalk_reent+0xe>
 800fe72:	89ab      	ldrh	r3, [r5, #12]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d907      	bls.n	800fe88 <_fwalk_reent+0x38>
 800fe78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	d003      	beq.n	800fe88 <_fwalk_reent+0x38>
 800fe80:	4629      	mov	r1, r5
 800fe82:	4640      	mov	r0, r8
 800fe84:	47c8      	blx	r9
 800fe86:	4306      	orrs	r6, r0
 800fe88:	3568      	adds	r5, #104	; 0x68
 800fe8a:	e7ee      	b.n	800fe6a <_fwalk_reent+0x1a>

0800fe8c <__swhatbuf_r>:
 800fe8c:	b570      	push	{r4, r5, r6, lr}
 800fe8e:	460e      	mov	r6, r1
 800fe90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe94:	2900      	cmp	r1, #0
 800fe96:	b096      	sub	sp, #88	; 0x58
 800fe98:	4614      	mov	r4, r2
 800fe9a:	461d      	mov	r5, r3
 800fe9c:	da07      	bge.n	800feae <__swhatbuf_r+0x22>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	602b      	str	r3, [r5, #0]
 800fea2:	89b3      	ldrh	r3, [r6, #12]
 800fea4:	061a      	lsls	r2, r3, #24
 800fea6:	d410      	bmi.n	800feca <__swhatbuf_r+0x3e>
 800fea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feac:	e00e      	b.n	800fecc <__swhatbuf_r+0x40>
 800feae:	466a      	mov	r2, sp
 800feb0:	f000 fc6c 	bl	801078c <_fstat_r>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	dbf2      	blt.n	800fe9e <__swhatbuf_r+0x12>
 800feb8:	9a01      	ldr	r2, [sp, #4]
 800feba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800febe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fec2:	425a      	negs	r2, r3
 800fec4:	415a      	adcs	r2, r3
 800fec6:	602a      	str	r2, [r5, #0]
 800fec8:	e7ee      	b.n	800fea8 <__swhatbuf_r+0x1c>
 800feca:	2340      	movs	r3, #64	; 0x40
 800fecc:	2000      	movs	r0, #0
 800fece:	6023      	str	r3, [r4, #0]
 800fed0:	b016      	add	sp, #88	; 0x58
 800fed2:	bd70      	pop	{r4, r5, r6, pc}

0800fed4 <__smakebuf_r>:
 800fed4:	898b      	ldrh	r3, [r1, #12]
 800fed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fed8:	079d      	lsls	r5, r3, #30
 800feda:	4606      	mov	r6, r0
 800fedc:	460c      	mov	r4, r1
 800fede:	d507      	bpl.n	800fef0 <__smakebuf_r+0x1c>
 800fee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fee4:	6023      	str	r3, [r4, #0]
 800fee6:	6123      	str	r3, [r4, #16]
 800fee8:	2301      	movs	r3, #1
 800feea:	6163      	str	r3, [r4, #20]
 800feec:	b002      	add	sp, #8
 800feee:	bd70      	pop	{r4, r5, r6, pc}
 800fef0:	ab01      	add	r3, sp, #4
 800fef2:	466a      	mov	r2, sp
 800fef4:	f7ff ffca 	bl	800fe8c <__swhatbuf_r>
 800fef8:	9900      	ldr	r1, [sp, #0]
 800fefa:	4605      	mov	r5, r0
 800fefc:	4630      	mov	r0, r6
 800fefe:	f000 f877 	bl	800fff0 <_malloc_r>
 800ff02:	b948      	cbnz	r0, 800ff18 <__smakebuf_r+0x44>
 800ff04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff08:	059a      	lsls	r2, r3, #22
 800ff0a:	d4ef      	bmi.n	800feec <__smakebuf_r+0x18>
 800ff0c:	f023 0303 	bic.w	r3, r3, #3
 800ff10:	f043 0302 	orr.w	r3, r3, #2
 800ff14:	81a3      	strh	r3, [r4, #12]
 800ff16:	e7e3      	b.n	800fee0 <__smakebuf_r+0xc>
 800ff18:	4b0d      	ldr	r3, [pc, #52]	; (800ff50 <__smakebuf_r+0x7c>)
 800ff1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	6020      	str	r0, [r4, #0]
 800ff20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff24:	81a3      	strh	r3, [r4, #12]
 800ff26:	9b00      	ldr	r3, [sp, #0]
 800ff28:	6163      	str	r3, [r4, #20]
 800ff2a:	9b01      	ldr	r3, [sp, #4]
 800ff2c:	6120      	str	r0, [r4, #16]
 800ff2e:	b15b      	cbz	r3, 800ff48 <__smakebuf_r+0x74>
 800ff30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff34:	4630      	mov	r0, r6
 800ff36:	f000 fc3b 	bl	80107b0 <_isatty_r>
 800ff3a:	b128      	cbz	r0, 800ff48 <__smakebuf_r+0x74>
 800ff3c:	89a3      	ldrh	r3, [r4, #12]
 800ff3e:	f023 0303 	bic.w	r3, r3, #3
 800ff42:	f043 0301 	orr.w	r3, r3, #1
 800ff46:	81a3      	strh	r3, [r4, #12]
 800ff48:	89a3      	ldrh	r3, [r4, #12]
 800ff4a:	431d      	orrs	r5, r3
 800ff4c:	81a5      	strh	r5, [r4, #12]
 800ff4e:	e7cd      	b.n	800feec <__smakebuf_r+0x18>
 800ff50:	0800fd41 	.word	0x0800fd41

0800ff54 <_free_r>:
 800ff54:	b538      	push	{r3, r4, r5, lr}
 800ff56:	4605      	mov	r5, r0
 800ff58:	2900      	cmp	r1, #0
 800ff5a:	d045      	beq.n	800ffe8 <_free_r+0x94>
 800ff5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff60:	1f0c      	subs	r4, r1, #4
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	bfb8      	it	lt
 800ff66:	18e4      	addlt	r4, r4, r3
 800ff68:	f000 fc44 	bl	80107f4 <__malloc_lock>
 800ff6c:	4a1f      	ldr	r2, [pc, #124]	; (800ffec <_free_r+0x98>)
 800ff6e:	6813      	ldr	r3, [r2, #0]
 800ff70:	4610      	mov	r0, r2
 800ff72:	b933      	cbnz	r3, 800ff82 <_free_r+0x2e>
 800ff74:	6063      	str	r3, [r4, #4]
 800ff76:	6014      	str	r4, [r2, #0]
 800ff78:	4628      	mov	r0, r5
 800ff7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff7e:	f000 bc3a 	b.w	80107f6 <__malloc_unlock>
 800ff82:	42a3      	cmp	r3, r4
 800ff84:	d90c      	bls.n	800ffa0 <_free_r+0x4c>
 800ff86:	6821      	ldr	r1, [r4, #0]
 800ff88:	1862      	adds	r2, r4, r1
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	bf04      	itt	eq
 800ff8e:	681a      	ldreq	r2, [r3, #0]
 800ff90:	685b      	ldreq	r3, [r3, #4]
 800ff92:	6063      	str	r3, [r4, #4]
 800ff94:	bf04      	itt	eq
 800ff96:	1852      	addeq	r2, r2, r1
 800ff98:	6022      	streq	r2, [r4, #0]
 800ff9a:	6004      	str	r4, [r0, #0]
 800ff9c:	e7ec      	b.n	800ff78 <_free_r+0x24>
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	685a      	ldr	r2, [r3, #4]
 800ffa2:	b10a      	cbz	r2, 800ffa8 <_free_r+0x54>
 800ffa4:	42a2      	cmp	r2, r4
 800ffa6:	d9fa      	bls.n	800ff9e <_free_r+0x4a>
 800ffa8:	6819      	ldr	r1, [r3, #0]
 800ffaa:	1858      	adds	r0, r3, r1
 800ffac:	42a0      	cmp	r0, r4
 800ffae:	d10b      	bne.n	800ffc8 <_free_r+0x74>
 800ffb0:	6820      	ldr	r0, [r4, #0]
 800ffb2:	4401      	add	r1, r0
 800ffb4:	1858      	adds	r0, r3, r1
 800ffb6:	4282      	cmp	r2, r0
 800ffb8:	6019      	str	r1, [r3, #0]
 800ffba:	d1dd      	bne.n	800ff78 <_free_r+0x24>
 800ffbc:	6810      	ldr	r0, [r2, #0]
 800ffbe:	6852      	ldr	r2, [r2, #4]
 800ffc0:	605a      	str	r2, [r3, #4]
 800ffc2:	4401      	add	r1, r0
 800ffc4:	6019      	str	r1, [r3, #0]
 800ffc6:	e7d7      	b.n	800ff78 <_free_r+0x24>
 800ffc8:	d902      	bls.n	800ffd0 <_free_r+0x7c>
 800ffca:	230c      	movs	r3, #12
 800ffcc:	602b      	str	r3, [r5, #0]
 800ffce:	e7d3      	b.n	800ff78 <_free_r+0x24>
 800ffd0:	6820      	ldr	r0, [r4, #0]
 800ffd2:	1821      	adds	r1, r4, r0
 800ffd4:	428a      	cmp	r2, r1
 800ffd6:	bf04      	itt	eq
 800ffd8:	6811      	ldreq	r1, [r2, #0]
 800ffda:	6852      	ldreq	r2, [r2, #4]
 800ffdc:	6062      	str	r2, [r4, #4]
 800ffde:	bf04      	itt	eq
 800ffe0:	1809      	addeq	r1, r1, r0
 800ffe2:	6021      	streq	r1, [r4, #0]
 800ffe4:	605c      	str	r4, [r3, #4]
 800ffe6:	e7c7      	b.n	800ff78 <_free_r+0x24>
 800ffe8:	bd38      	pop	{r3, r4, r5, pc}
 800ffea:	bf00      	nop
 800ffec:	2400079c 	.word	0x2400079c

0800fff0 <_malloc_r>:
 800fff0:	b570      	push	{r4, r5, r6, lr}
 800fff2:	1ccd      	adds	r5, r1, #3
 800fff4:	f025 0503 	bic.w	r5, r5, #3
 800fff8:	3508      	adds	r5, #8
 800fffa:	2d0c      	cmp	r5, #12
 800fffc:	bf38      	it	cc
 800fffe:	250c      	movcc	r5, #12
 8010000:	2d00      	cmp	r5, #0
 8010002:	4606      	mov	r6, r0
 8010004:	db01      	blt.n	801000a <_malloc_r+0x1a>
 8010006:	42a9      	cmp	r1, r5
 8010008:	d903      	bls.n	8010012 <_malloc_r+0x22>
 801000a:	230c      	movs	r3, #12
 801000c:	6033      	str	r3, [r6, #0]
 801000e:	2000      	movs	r0, #0
 8010010:	bd70      	pop	{r4, r5, r6, pc}
 8010012:	f000 fbef 	bl	80107f4 <__malloc_lock>
 8010016:	4a21      	ldr	r2, [pc, #132]	; (801009c <_malloc_r+0xac>)
 8010018:	6814      	ldr	r4, [r2, #0]
 801001a:	4621      	mov	r1, r4
 801001c:	b991      	cbnz	r1, 8010044 <_malloc_r+0x54>
 801001e:	4c20      	ldr	r4, [pc, #128]	; (80100a0 <_malloc_r+0xb0>)
 8010020:	6823      	ldr	r3, [r4, #0]
 8010022:	b91b      	cbnz	r3, 801002c <_malloc_r+0x3c>
 8010024:	4630      	mov	r0, r6
 8010026:	f000 fb3b 	bl	80106a0 <_sbrk_r>
 801002a:	6020      	str	r0, [r4, #0]
 801002c:	4629      	mov	r1, r5
 801002e:	4630      	mov	r0, r6
 8010030:	f000 fb36 	bl	80106a0 <_sbrk_r>
 8010034:	1c43      	adds	r3, r0, #1
 8010036:	d124      	bne.n	8010082 <_malloc_r+0x92>
 8010038:	230c      	movs	r3, #12
 801003a:	6033      	str	r3, [r6, #0]
 801003c:	4630      	mov	r0, r6
 801003e:	f000 fbda 	bl	80107f6 <__malloc_unlock>
 8010042:	e7e4      	b.n	801000e <_malloc_r+0x1e>
 8010044:	680b      	ldr	r3, [r1, #0]
 8010046:	1b5b      	subs	r3, r3, r5
 8010048:	d418      	bmi.n	801007c <_malloc_r+0x8c>
 801004a:	2b0b      	cmp	r3, #11
 801004c:	d90f      	bls.n	801006e <_malloc_r+0x7e>
 801004e:	600b      	str	r3, [r1, #0]
 8010050:	50cd      	str	r5, [r1, r3]
 8010052:	18cc      	adds	r4, r1, r3
 8010054:	4630      	mov	r0, r6
 8010056:	f000 fbce 	bl	80107f6 <__malloc_unlock>
 801005a:	f104 000b 	add.w	r0, r4, #11
 801005e:	1d23      	adds	r3, r4, #4
 8010060:	f020 0007 	bic.w	r0, r0, #7
 8010064:	1ac3      	subs	r3, r0, r3
 8010066:	d0d3      	beq.n	8010010 <_malloc_r+0x20>
 8010068:	425a      	negs	r2, r3
 801006a:	50e2      	str	r2, [r4, r3]
 801006c:	e7d0      	b.n	8010010 <_malloc_r+0x20>
 801006e:	428c      	cmp	r4, r1
 8010070:	684b      	ldr	r3, [r1, #4]
 8010072:	bf16      	itet	ne
 8010074:	6063      	strne	r3, [r4, #4]
 8010076:	6013      	streq	r3, [r2, #0]
 8010078:	460c      	movne	r4, r1
 801007a:	e7eb      	b.n	8010054 <_malloc_r+0x64>
 801007c:	460c      	mov	r4, r1
 801007e:	6849      	ldr	r1, [r1, #4]
 8010080:	e7cc      	b.n	801001c <_malloc_r+0x2c>
 8010082:	1cc4      	adds	r4, r0, #3
 8010084:	f024 0403 	bic.w	r4, r4, #3
 8010088:	42a0      	cmp	r0, r4
 801008a:	d005      	beq.n	8010098 <_malloc_r+0xa8>
 801008c:	1a21      	subs	r1, r4, r0
 801008e:	4630      	mov	r0, r6
 8010090:	f000 fb06 	bl	80106a0 <_sbrk_r>
 8010094:	3001      	adds	r0, #1
 8010096:	d0cf      	beq.n	8010038 <_malloc_r+0x48>
 8010098:	6025      	str	r5, [r4, #0]
 801009a:	e7db      	b.n	8010054 <_malloc_r+0x64>
 801009c:	2400079c 	.word	0x2400079c
 80100a0:	240007a0 	.word	0x240007a0

080100a4 <__sfputc_r>:
 80100a4:	6893      	ldr	r3, [r2, #8]
 80100a6:	3b01      	subs	r3, #1
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	b410      	push	{r4}
 80100ac:	6093      	str	r3, [r2, #8]
 80100ae:	da08      	bge.n	80100c2 <__sfputc_r+0x1e>
 80100b0:	6994      	ldr	r4, [r2, #24]
 80100b2:	42a3      	cmp	r3, r4
 80100b4:	db01      	blt.n	80100ba <__sfputc_r+0x16>
 80100b6:	290a      	cmp	r1, #10
 80100b8:	d103      	bne.n	80100c2 <__sfputc_r+0x1e>
 80100ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100be:	f7ff bcab 	b.w	800fa18 <__swbuf_r>
 80100c2:	6813      	ldr	r3, [r2, #0]
 80100c4:	1c58      	adds	r0, r3, #1
 80100c6:	6010      	str	r0, [r2, #0]
 80100c8:	7019      	strb	r1, [r3, #0]
 80100ca:	4608      	mov	r0, r1
 80100cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100d0:	4770      	bx	lr

080100d2 <__sfputs_r>:
 80100d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d4:	4606      	mov	r6, r0
 80100d6:	460f      	mov	r7, r1
 80100d8:	4614      	mov	r4, r2
 80100da:	18d5      	adds	r5, r2, r3
 80100dc:	42ac      	cmp	r4, r5
 80100de:	d101      	bne.n	80100e4 <__sfputs_r+0x12>
 80100e0:	2000      	movs	r0, #0
 80100e2:	e007      	b.n	80100f4 <__sfputs_r+0x22>
 80100e4:	463a      	mov	r2, r7
 80100e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ea:	4630      	mov	r0, r6
 80100ec:	f7ff ffda 	bl	80100a4 <__sfputc_r>
 80100f0:	1c43      	adds	r3, r0, #1
 80100f2:	d1f3      	bne.n	80100dc <__sfputs_r+0xa>
 80100f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100f8 <_vfiprintf_r>:
 80100f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	460c      	mov	r4, r1
 80100fe:	b09d      	sub	sp, #116	; 0x74
 8010100:	4617      	mov	r7, r2
 8010102:	461d      	mov	r5, r3
 8010104:	4606      	mov	r6, r0
 8010106:	b118      	cbz	r0, 8010110 <_vfiprintf_r+0x18>
 8010108:	6983      	ldr	r3, [r0, #24]
 801010a:	b90b      	cbnz	r3, 8010110 <_vfiprintf_r+0x18>
 801010c:	f7ff fe34 	bl	800fd78 <__sinit>
 8010110:	4b7c      	ldr	r3, [pc, #496]	; (8010304 <_vfiprintf_r+0x20c>)
 8010112:	429c      	cmp	r4, r3
 8010114:	d158      	bne.n	80101c8 <_vfiprintf_r+0xd0>
 8010116:	6874      	ldr	r4, [r6, #4]
 8010118:	89a3      	ldrh	r3, [r4, #12]
 801011a:	0718      	lsls	r0, r3, #28
 801011c:	d55e      	bpl.n	80101dc <_vfiprintf_r+0xe4>
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d05b      	beq.n	80101dc <_vfiprintf_r+0xe4>
 8010124:	2300      	movs	r3, #0
 8010126:	9309      	str	r3, [sp, #36]	; 0x24
 8010128:	2320      	movs	r3, #32
 801012a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801012e:	2330      	movs	r3, #48	; 0x30
 8010130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010134:	9503      	str	r5, [sp, #12]
 8010136:	f04f 0b01 	mov.w	fp, #1
 801013a:	46b8      	mov	r8, r7
 801013c:	4645      	mov	r5, r8
 801013e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010142:	b10b      	cbz	r3, 8010148 <_vfiprintf_r+0x50>
 8010144:	2b25      	cmp	r3, #37	; 0x25
 8010146:	d154      	bne.n	80101f2 <_vfiprintf_r+0xfa>
 8010148:	ebb8 0a07 	subs.w	sl, r8, r7
 801014c:	d00b      	beq.n	8010166 <_vfiprintf_r+0x6e>
 801014e:	4653      	mov	r3, sl
 8010150:	463a      	mov	r2, r7
 8010152:	4621      	mov	r1, r4
 8010154:	4630      	mov	r0, r6
 8010156:	f7ff ffbc 	bl	80100d2 <__sfputs_r>
 801015a:	3001      	adds	r0, #1
 801015c:	f000 80c2 	beq.w	80102e4 <_vfiprintf_r+0x1ec>
 8010160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010162:	4453      	add	r3, sl
 8010164:	9309      	str	r3, [sp, #36]	; 0x24
 8010166:	f898 3000 	ldrb.w	r3, [r8]
 801016a:	2b00      	cmp	r3, #0
 801016c:	f000 80ba 	beq.w	80102e4 <_vfiprintf_r+0x1ec>
 8010170:	2300      	movs	r3, #0
 8010172:	f04f 32ff 	mov.w	r2, #4294967295
 8010176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801017a:	9304      	str	r3, [sp, #16]
 801017c:	9307      	str	r3, [sp, #28]
 801017e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010182:	931a      	str	r3, [sp, #104]	; 0x68
 8010184:	46a8      	mov	r8, r5
 8010186:	2205      	movs	r2, #5
 8010188:	f818 1b01 	ldrb.w	r1, [r8], #1
 801018c:	485e      	ldr	r0, [pc, #376]	; (8010308 <_vfiprintf_r+0x210>)
 801018e:	f7f0 f8a7 	bl	80002e0 <memchr>
 8010192:	9b04      	ldr	r3, [sp, #16]
 8010194:	bb78      	cbnz	r0, 80101f6 <_vfiprintf_r+0xfe>
 8010196:	06d9      	lsls	r1, r3, #27
 8010198:	bf44      	itt	mi
 801019a:	2220      	movmi	r2, #32
 801019c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80101a0:	071a      	lsls	r2, r3, #28
 80101a2:	bf44      	itt	mi
 80101a4:	222b      	movmi	r2, #43	; 0x2b
 80101a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80101aa:	782a      	ldrb	r2, [r5, #0]
 80101ac:	2a2a      	cmp	r2, #42	; 0x2a
 80101ae:	d02a      	beq.n	8010206 <_vfiprintf_r+0x10e>
 80101b0:	9a07      	ldr	r2, [sp, #28]
 80101b2:	46a8      	mov	r8, r5
 80101b4:	2000      	movs	r0, #0
 80101b6:	250a      	movs	r5, #10
 80101b8:	4641      	mov	r1, r8
 80101ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101be:	3b30      	subs	r3, #48	; 0x30
 80101c0:	2b09      	cmp	r3, #9
 80101c2:	d969      	bls.n	8010298 <_vfiprintf_r+0x1a0>
 80101c4:	b360      	cbz	r0, 8010220 <_vfiprintf_r+0x128>
 80101c6:	e024      	b.n	8010212 <_vfiprintf_r+0x11a>
 80101c8:	4b50      	ldr	r3, [pc, #320]	; (801030c <_vfiprintf_r+0x214>)
 80101ca:	429c      	cmp	r4, r3
 80101cc:	d101      	bne.n	80101d2 <_vfiprintf_r+0xda>
 80101ce:	68b4      	ldr	r4, [r6, #8]
 80101d0:	e7a2      	b.n	8010118 <_vfiprintf_r+0x20>
 80101d2:	4b4f      	ldr	r3, [pc, #316]	; (8010310 <_vfiprintf_r+0x218>)
 80101d4:	429c      	cmp	r4, r3
 80101d6:	bf08      	it	eq
 80101d8:	68f4      	ldreq	r4, [r6, #12]
 80101da:	e79d      	b.n	8010118 <_vfiprintf_r+0x20>
 80101dc:	4621      	mov	r1, r4
 80101de:	4630      	mov	r0, r6
 80101e0:	f7ff fc6c 	bl	800fabc <__swsetup_r>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	d09d      	beq.n	8010124 <_vfiprintf_r+0x2c>
 80101e8:	f04f 30ff 	mov.w	r0, #4294967295
 80101ec:	b01d      	add	sp, #116	; 0x74
 80101ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f2:	46a8      	mov	r8, r5
 80101f4:	e7a2      	b.n	801013c <_vfiprintf_r+0x44>
 80101f6:	4a44      	ldr	r2, [pc, #272]	; (8010308 <_vfiprintf_r+0x210>)
 80101f8:	1a80      	subs	r0, r0, r2
 80101fa:	fa0b f000 	lsl.w	r0, fp, r0
 80101fe:	4318      	orrs	r0, r3
 8010200:	9004      	str	r0, [sp, #16]
 8010202:	4645      	mov	r5, r8
 8010204:	e7be      	b.n	8010184 <_vfiprintf_r+0x8c>
 8010206:	9a03      	ldr	r2, [sp, #12]
 8010208:	1d11      	adds	r1, r2, #4
 801020a:	6812      	ldr	r2, [r2, #0]
 801020c:	9103      	str	r1, [sp, #12]
 801020e:	2a00      	cmp	r2, #0
 8010210:	db01      	blt.n	8010216 <_vfiprintf_r+0x11e>
 8010212:	9207      	str	r2, [sp, #28]
 8010214:	e004      	b.n	8010220 <_vfiprintf_r+0x128>
 8010216:	4252      	negs	r2, r2
 8010218:	f043 0302 	orr.w	r3, r3, #2
 801021c:	9207      	str	r2, [sp, #28]
 801021e:	9304      	str	r3, [sp, #16]
 8010220:	f898 3000 	ldrb.w	r3, [r8]
 8010224:	2b2e      	cmp	r3, #46	; 0x2e
 8010226:	d10e      	bne.n	8010246 <_vfiprintf_r+0x14e>
 8010228:	f898 3001 	ldrb.w	r3, [r8, #1]
 801022c:	2b2a      	cmp	r3, #42	; 0x2a
 801022e:	d138      	bne.n	80102a2 <_vfiprintf_r+0x1aa>
 8010230:	9b03      	ldr	r3, [sp, #12]
 8010232:	1d1a      	adds	r2, r3, #4
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	9203      	str	r2, [sp, #12]
 8010238:	2b00      	cmp	r3, #0
 801023a:	bfb8      	it	lt
 801023c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010240:	f108 0802 	add.w	r8, r8, #2
 8010244:	9305      	str	r3, [sp, #20]
 8010246:	4d33      	ldr	r5, [pc, #204]	; (8010314 <_vfiprintf_r+0x21c>)
 8010248:	f898 1000 	ldrb.w	r1, [r8]
 801024c:	2203      	movs	r2, #3
 801024e:	4628      	mov	r0, r5
 8010250:	f7f0 f846 	bl	80002e0 <memchr>
 8010254:	b140      	cbz	r0, 8010268 <_vfiprintf_r+0x170>
 8010256:	2340      	movs	r3, #64	; 0x40
 8010258:	1b40      	subs	r0, r0, r5
 801025a:	fa03 f000 	lsl.w	r0, r3, r0
 801025e:	9b04      	ldr	r3, [sp, #16]
 8010260:	4303      	orrs	r3, r0
 8010262:	f108 0801 	add.w	r8, r8, #1
 8010266:	9304      	str	r3, [sp, #16]
 8010268:	f898 1000 	ldrb.w	r1, [r8]
 801026c:	482a      	ldr	r0, [pc, #168]	; (8010318 <_vfiprintf_r+0x220>)
 801026e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010272:	2206      	movs	r2, #6
 8010274:	f108 0701 	add.w	r7, r8, #1
 8010278:	f7f0 f832 	bl	80002e0 <memchr>
 801027c:	2800      	cmp	r0, #0
 801027e:	d037      	beq.n	80102f0 <_vfiprintf_r+0x1f8>
 8010280:	4b26      	ldr	r3, [pc, #152]	; (801031c <_vfiprintf_r+0x224>)
 8010282:	bb1b      	cbnz	r3, 80102cc <_vfiprintf_r+0x1d4>
 8010284:	9b03      	ldr	r3, [sp, #12]
 8010286:	3307      	adds	r3, #7
 8010288:	f023 0307 	bic.w	r3, r3, #7
 801028c:	3308      	adds	r3, #8
 801028e:	9303      	str	r3, [sp, #12]
 8010290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010292:	444b      	add	r3, r9
 8010294:	9309      	str	r3, [sp, #36]	; 0x24
 8010296:	e750      	b.n	801013a <_vfiprintf_r+0x42>
 8010298:	fb05 3202 	mla	r2, r5, r2, r3
 801029c:	2001      	movs	r0, #1
 801029e:	4688      	mov	r8, r1
 80102a0:	e78a      	b.n	80101b8 <_vfiprintf_r+0xc0>
 80102a2:	2300      	movs	r3, #0
 80102a4:	f108 0801 	add.w	r8, r8, #1
 80102a8:	9305      	str	r3, [sp, #20]
 80102aa:	4619      	mov	r1, r3
 80102ac:	250a      	movs	r5, #10
 80102ae:	4640      	mov	r0, r8
 80102b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102b4:	3a30      	subs	r2, #48	; 0x30
 80102b6:	2a09      	cmp	r2, #9
 80102b8:	d903      	bls.n	80102c2 <_vfiprintf_r+0x1ca>
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d0c3      	beq.n	8010246 <_vfiprintf_r+0x14e>
 80102be:	9105      	str	r1, [sp, #20]
 80102c0:	e7c1      	b.n	8010246 <_vfiprintf_r+0x14e>
 80102c2:	fb05 2101 	mla	r1, r5, r1, r2
 80102c6:	2301      	movs	r3, #1
 80102c8:	4680      	mov	r8, r0
 80102ca:	e7f0      	b.n	80102ae <_vfiprintf_r+0x1b6>
 80102cc:	ab03      	add	r3, sp, #12
 80102ce:	9300      	str	r3, [sp, #0]
 80102d0:	4622      	mov	r2, r4
 80102d2:	4b13      	ldr	r3, [pc, #76]	; (8010320 <_vfiprintf_r+0x228>)
 80102d4:	a904      	add	r1, sp, #16
 80102d6:	4630      	mov	r0, r6
 80102d8:	f3af 8000 	nop.w
 80102dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80102e0:	4681      	mov	r9, r0
 80102e2:	d1d5      	bne.n	8010290 <_vfiprintf_r+0x198>
 80102e4:	89a3      	ldrh	r3, [r4, #12]
 80102e6:	065b      	lsls	r3, r3, #25
 80102e8:	f53f af7e 	bmi.w	80101e8 <_vfiprintf_r+0xf0>
 80102ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102ee:	e77d      	b.n	80101ec <_vfiprintf_r+0xf4>
 80102f0:	ab03      	add	r3, sp, #12
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	4622      	mov	r2, r4
 80102f6:	4b0a      	ldr	r3, [pc, #40]	; (8010320 <_vfiprintf_r+0x228>)
 80102f8:	a904      	add	r1, sp, #16
 80102fa:	4630      	mov	r0, r6
 80102fc:	f000 f888 	bl	8010410 <_printf_i>
 8010300:	e7ec      	b.n	80102dc <_vfiprintf_r+0x1e4>
 8010302:	bf00      	nop
 8010304:	080114b4 	.word	0x080114b4
 8010308:	080114f4 	.word	0x080114f4
 801030c:	080114d4 	.word	0x080114d4
 8010310:	08011494 	.word	0x08011494
 8010314:	080114fa 	.word	0x080114fa
 8010318:	080114fe 	.word	0x080114fe
 801031c:	00000000 	.word	0x00000000
 8010320:	080100d3 	.word	0x080100d3

08010324 <_printf_common>:
 8010324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010328:	4691      	mov	r9, r2
 801032a:	461f      	mov	r7, r3
 801032c:	688a      	ldr	r2, [r1, #8]
 801032e:	690b      	ldr	r3, [r1, #16]
 8010330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010334:	4293      	cmp	r3, r2
 8010336:	bfb8      	it	lt
 8010338:	4613      	movlt	r3, r2
 801033a:	f8c9 3000 	str.w	r3, [r9]
 801033e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010342:	4606      	mov	r6, r0
 8010344:	460c      	mov	r4, r1
 8010346:	b112      	cbz	r2, 801034e <_printf_common+0x2a>
 8010348:	3301      	adds	r3, #1
 801034a:	f8c9 3000 	str.w	r3, [r9]
 801034e:	6823      	ldr	r3, [r4, #0]
 8010350:	0699      	lsls	r1, r3, #26
 8010352:	bf42      	ittt	mi
 8010354:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010358:	3302      	addmi	r3, #2
 801035a:	f8c9 3000 	strmi.w	r3, [r9]
 801035e:	6825      	ldr	r5, [r4, #0]
 8010360:	f015 0506 	ands.w	r5, r5, #6
 8010364:	d107      	bne.n	8010376 <_printf_common+0x52>
 8010366:	f104 0a19 	add.w	sl, r4, #25
 801036a:	68e3      	ldr	r3, [r4, #12]
 801036c:	f8d9 2000 	ldr.w	r2, [r9]
 8010370:	1a9b      	subs	r3, r3, r2
 8010372:	42ab      	cmp	r3, r5
 8010374:	dc28      	bgt.n	80103c8 <_printf_common+0xa4>
 8010376:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801037a:	6822      	ldr	r2, [r4, #0]
 801037c:	3300      	adds	r3, #0
 801037e:	bf18      	it	ne
 8010380:	2301      	movne	r3, #1
 8010382:	0692      	lsls	r2, r2, #26
 8010384:	d42d      	bmi.n	80103e2 <_printf_common+0xbe>
 8010386:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801038a:	4639      	mov	r1, r7
 801038c:	4630      	mov	r0, r6
 801038e:	47c0      	blx	r8
 8010390:	3001      	adds	r0, #1
 8010392:	d020      	beq.n	80103d6 <_printf_common+0xb2>
 8010394:	6823      	ldr	r3, [r4, #0]
 8010396:	68e5      	ldr	r5, [r4, #12]
 8010398:	f8d9 2000 	ldr.w	r2, [r9]
 801039c:	f003 0306 	and.w	r3, r3, #6
 80103a0:	2b04      	cmp	r3, #4
 80103a2:	bf08      	it	eq
 80103a4:	1aad      	subeq	r5, r5, r2
 80103a6:	68a3      	ldr	r3, [r4, #8]
 80103a8:	6922      	ldr	r2, [r4, #16]
 80103aa:	bf0c      	ite	eq
 80103ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103b0:	2500      	movne	r5, #0
 80103b2:	4293      	cmp	r3, r2
 80103b4:	bfc4      	itt	gt
 80103b6:	1a9b      	subgt	r3, r3, r2
 80103b8:	18ed      	addgt	r5, r5, r3
 80103ba:	f04f 0900 	mov.w	r9, #0
 80103be:	341a      	adds	r4, #26
 80103c0:	454d      	cmp	r5, r9
 80103c2:	d11a      	bne.n	80103fa <_printf_common+0xd6>
 80103c4:	2000      	movs	r0, #0
 80103c6:	e008      	b.n	80103da <_printf_common+0xb6>
 80103c8:	2301      	movs	r3, #1
 80103ca:	4652      	mov	r2, sl
 80103cc:	4639      	mov	r1, r7
 80103ce:	4630      	mov	r0, r6
 80103d0:	47c0      	blx	r8
 80103d2:	3001      	adds	r0, #1
 80103d4:	d103      	bne.n	80103de <_printf_common+0xba>
 80103d6:	f04f 30ff 	mov.w	r0, #4294967295
 80103da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103de:	3501      	adds	r5, #1
 80103e0:	e7c3      	b.n	801036a <_printf_common+0x46>
 80103e2:	18e1      	adds	r1, r4, r3
 80103e4:	1c5a      	adds	r2, r3, #1
 80103e6:	2030      	movs	r0, #48	; 0x30
 80103e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103ec:	4422      	add	r2, r4
 80103ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103f6:	3302      	adds	r3, #2
 80103f8:	e7c5      	b.n	8010386 <_printf_common+0x62>
 80103fa:	2301      	movs	r3, #1
 80103fc:	4622      	mov	r2, r4
 80103fe:	4639      	mov	r1, r7
 8010400:	4630      	mov	r0, r6
 8010402:	47c0      	blx	r8
 8010404:	3001      	adds	r0, #1
 8010406:	d0e6      	beq.n	80103d6 <_printf_common+0xb2>
 8010408:	f109 0901 	add.w	r9, r9, #1
 801040c:	e7d8      	b.n	80103c0 <_printf_common+0x9c>
	...

08010410 <_printf_i>:
 8010410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010414:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010418:	460c      	mov	r4, r1
 801041a:	7e09      	ldrb	r1, [r1, #24]
 801041c:	b085      	sub	sp, #20
 801041e:	296e      	cmp	r1, #110	; 0x6e
 8010420:	4617      	mov	r7, r2
 8010422:	4606      	mov	r6, r0
 8010424:	4698      	mov	r8, r3
 8010426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010428:	f000 80b3 	beq.w	8010592 <_printf_i+0x182>
 801042c:	d822      	bhi.n	8010474 <_printf_i+0x64>
 801042e:	2963      	cmp	r1, #99	; 0x63
 8010430:	d036      	beq.n	80104a0 <_printf_i+0x90>
 8010432:	d80a      	bhi.n	801044a <_printf_i+0x3a>
 8010434:	2900      	cmp	r1, #0
 8010436:	f000 80b9 	beq.w	80105ac <_printf_i+0x19c>
 801043a:	2958      	cmp	r1, #88	; 0x58
 801043c:	f000 8083 	beq.w	8010546 <_printf_i+0x136>
 8010440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010444:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010448:	e032      	b.n	80104b0 <_printf_i+0xa0>
 801044a:	2964      	cmp	r1, #100	; 0x64
 801044c:	d001      	beq.n	8010452 <_printf_i+0x42>
 801044e:	2969      	cmp	r1, #105	; 0x69
 8010450:	d1f6      	bne.n	8010440 <_printf_i+0x30>
 8010452:	6820      	ldr	r0, [r4, #0]
 8010454:	6813      	ldr	r3, [r2, #0]
 8010456:	0605      	lsls	r5, r0, #24
 8010458:	f103 0104 	add.w	r1, r3, #4
 801045c:	d52a      	bpl.n	80104b4 <_printf_i+0xa4>
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	6011      	str	r1, [r2, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	da03      	bge.n	801046e <_printf_i+0x5e>
 8010466:	222d      	movs	r2, #45	; 0x2d
 8010468:	425b      	negs	r3, r3
 801046a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801046e:	486f      	ldr	r0, [pc, #444]	; (801062c <_printf_i+0x21c>)
 8010470:	220a      	movs	r2, #10
 8010472:	e039      	b.n	80104e8 <_printf_i+0xd8>
 8010474:	2973      	cmp	r1, #115	; 0x73
 8010476:	f000 809d 	beq.w	80105b4 <_printf_i+0x1a4>
 801047a:	d808      	bhi.n	801048e <_printf_i+0x7e>
 801047c:	296f      	cmp	r1, #111	; 0x6f
 801047e:	d020      	beq.n	80104c2 <_printf_i+0xb2>
 8010480:	2970      	cmp	r1, #112	; 0x70
 8010482:	d1dd      	bne.n	8010440 <_printf_i+0x30>
 8010484:	6823      	ldr	r3, [r4, #0]
 8010486:	f043 0320 	orr.w	r3, r3, #32
 801048a:	6023      	str	r3, [r4, #0]
 801048c:	e003      	b.n	8010496 <_printf_i+0x86>
 801048e:	2975      	cmp	r1, #117	; 0x75
 8010490:	d017      	beq.n	80104c2 <_printf_i+0xb2>
 8010492:	2978      	cmp	r1, #120	; 0x78
 8010494:	d1d4      	bne.n	8010440 <_printf_i+0x30>
 8010496:	2378      	movs	r3, #120	; 0x78
 8010498:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801049c:	4864      	ldr	r0, [pc, #400]	; (8010630 <_printf_i+0x220>)
 801049e:	e055      	b.n	801054c <_printf_i+0x13c>
 80104a0:	6813      	ldr	r3, [r2, #0]
 80104a2:	1d19      	adds	r1, r3, #4
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	6011      	str	r1, [r2, #0]
 80104a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104b0:	2301      	movs	r3, #1
 80104b2:	e08c      	b.n	80105ce <_printf_i+0x1be>
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	6011      	str	r1, [r2, #0]
 80104b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104bc:	bf18      	it	ne
 80104be:	b21b      	sxthne	r3, r3
 80104c0:	e7cf      	b.n	8010462 <_printf_i+0x52>
 80104c2:	6813      	ldr	r3, [r2, #0]
 80104c4:	6825      	ldr	r5, [r4, #0]
 80104c6:	1d18      	adds	r0, r3, #4
 80104c8:	6010      	str	r0, [r2, #0]
 80104ca:	0628      	lsls	r0, r5, #24
 80104cc:	d501      	bpl.n	80104d2 <_printf_i+0xc2>
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	e002      	b.n	80104d8 <_printf_i+0xc8>
 80104d2:	0668      	lsls	r0, r5, #25
 80104d4:	d5fb      	bpl.n	80104ce <_printf_i+0xbe>
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	4854      	ldr	r0, [pc, #336]	; (801062c <_printf_i+0x21c>)
 80104da:	296f      	cmp	r1, #111	; 0x6f
 80104dc:	bf14      	ite	ne
 80104de:	220a      	movne	r2, #10
 80104e0:	2208      	moveq	r2, #8
 80104e2:	2100      	movs	r1, #0
 80104e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104e8:	6865      	ldr	r5, [r4, #4]
 80104ea:	60a5      	str	r5, [r4, #8]
 80104ec:	2d00      	cmp	r5, #0
 80104ee:	f2c0 8095 	blt.w	801061c <_printf_i+0x20c>
 80104f2:	6821      	ldr	r1, [r4, #0]
 80104f4:	f021 0104 	bic.w	r1, r1, #4
 80104f8:	6021      	str	r1, [r4, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d13d      	bne.n	801057a <_printf_i+0x16a>
 80104fe:	2d00      	cmp	r5, #0
 8010500:	f040 808e 	bne.w	8010620 <_printf_i+0x210>
 8010504:	4665      	mov	r5, ip
 8010506:	2a08      	cmp	r2, #8
 8010508:	d10b      	bne.n	8010522 <_printf_i+0x112>
 801050a:	6823      	ldr	r3, [r4, #0]
 801050c:	07db      	lsls	r3, r3, #31
 801050e:	d508      	bpl.n	8010522 <_printf_i+0x112>
 8010510:	6923      	ldr	r3, [r4, #16]
 8010512:	6862      	ldr	r2, [r4, #4]
 8010514:	429a      	cmp	r2, r3
 8010516:	bfde      	ittt	le
 8010518:	2330      	movle	r3, #48	; 0x30
 801051a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801051e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010522:	ebac 0305 	sub.w	r3, ip, r5
 8010526:	6123      	str	r3, [r4, #16]
 8010528:	f8cd 8000 	str.w	r8, [sp]
 801052c:	463b      	mov	r3, r7
 801052e:	aa03      	add	r2, sp, #12
 8010530:	4621      	mov	r1, r4
 8010532:	4630      	mov	r0, r6
 8010534:	f7ff fef6 	bl	8010324 <_printf_common>
 8010538:	3001      	adds	r0, #1
 801053a:	d14d      	bne.n	80105d8 <_printf_i+0x1c8>
 801053c:	f04f 30ff 	mov.w	r0, #4294967295
 8010540:	b005      	add	sp, #20
 8010542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010546:	4839      	ldr	r0, [pc, #228]	; (801062c <_printf_i+0x21c>)
 8010548:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801054c:	6813      	ldr	r3, [r2, #0]
 801054e:	6821      	ldr	r1, [r4, #0]
 8010550:	1d1d      	adds	r5, r3, #4
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	6015      	str	r5, [r2, #0]
 8010556:	060a      	lsls	r2, r1, #24
 8010558:	d50b      	bpl.n	8010572 <_printf_i+0x162>
 801055a:	07ca      	lsls	r2, r1, #31
 801055c:	bf44      	itt	mi
 801055e:	f041 0120 	orrmi.w	r1, r1, #32
 8010562:	6021      	strmi	r1, [r4, #0]
 8010564:	b91b      	cbnz	r3, 801056e <_printf_i+0x15e>
 8010566:	6822      	ldr	r2, [r4, #0]
 8010568:	f022 0220 	bic.w	r2, r2, #32
 801056c:	6022      	str	r2, [r4, #0]
 801056e:	2210      	movs	r2, #16
 8010570:	e7b7      	b.n	80104e2 <_printf_i+0xd2>
 8010572:	064d      	lsls	r5, r1, #25
 8010574:	bf48      	it	mi
 8010576:	b29b      	uxthmi	r3, r3
 8010578:	e7ef      	b.n	801055a <_printf_i+0x14a>
 801057a:	4665      	mov	r5, ip
 801057c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010580:	fb02 3311 	mls	r3, r2, r1, r3
 8010584:	5cc3      	ldrb	r3, [r0, r3]
 8010586:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801058a:	460b      	mov	r3, r1
 801058c:	2900      	cmp	r1, #0
 801058e:	d1f5      	bne.n	801057c <_printf_i+0x16c>
 8010590:	e7b9      	b.n	8010506 <_printf_i+0xf6>
 8010592:	6813      	ldr	r3, [r2, #0]
 8010594:	6825      	ldr	r5, [r4, #0]
 8010596:	6961      	ldr	r1, [r4, #20]
 8010598:	1d18      	adds	r0, r3, #4
 801059a:	6010      	str	r0, [r2, #0]
 801059c:	0628      	lsls	r0, r5, #24
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	d501      	bpl.n	80105a6 <_printf_i+0x196>
 80105a2:	6019      	str	r1, [r3, #0]
 80105a4:	e002      	b.n	80105ac <_printf_i+0x19c>
 80105a6:	066a      	lsls	r2, r5, #25
 80105a8:	d5fb      	bpl.n	80105a2 <_printf_i+0x192>
 80105aa:	8019      	strh	r1, [r3, #0]
 80105ac:	2300      	movs	r3, #0
 80105ae:	6123      	str	r3, [r4, #16]
 80105b0:	4665      	mov	r5, ip
 80105b2:	e7b9      	b.n	8010528 <_printf_i+0x118>
 80105b4:	6813      	ldr	r3, [r2, #0]
 80105b6:	1d19      	adds	r1, r3, #4
 80105b8:	6011      	str	r1, [r2, #0]
 80105ba:	681d      	ldr	r5, [r3, #0]
 80105bc:	6862      	ldr	r2, [r4, #4]
 80105be:	2100      	movs	r1, #0
 80105c0:	4628      	mov	r0, r5
 80105c2:	f7ef fe8d 	bl	80002e0 <memchr>
 80105c6:	b108      	cbz	r0, 80105cc <_printf_i+0x1bc>
 80105c8:	1b40      	subs	r0, r0, r5
 80105ca:	6060      	str	r0, [r4, #4]
 80105cc:	6863      	ldr	r3, [r4, #4]
 80105ce:	6123      	str	r3, [r4, #16]
 80105d0:	2300      	movs	r3, #0
 80105d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105d6:	e7a7      	b.n	8010528 <_printf_i+0x118>
 80105d8:	6923      	ldr	r3, [r4, #16]
 80105da:	462a      	mov	r2, r5
 80105dc:	4639      	mov	r1, r7
 80105de:	4630      	mov	r0, r6
 80105e0:	47c0      	blx	r8
 80105e2:	3001      	adds	r0, #1
 80105e4:	d0aa      	beq.n	801053c <_printf_i+0x12c>
 80105e6:	6823      	ldr	r3, [r4, #0]
 80105e8:	079b      	lsls	r3, r3, #30
 80105ea:	d413      	bmi.n	8010614 <_printf_i+0x204>
 80105ec:	68e0      	ldr	r0, [r4, #12]
 80105ee:	9b03      	ldr	r3, [sp, #12]
 80105f0:	4298      	cmp	r0, r3
 80105f2:	bfb8      	it	lt
 80105f4:	4618      	movlt	r0, r3
 80105f6:	e7a3      	b.n	8010540 <_printf_i+0x130>
 80105f8:	2301      	movs	r3, #1
 80105fa:	464a      	mov	r2, r9
 80105fc:	4639      	mov	r1, r7
 80105fe:	4630      	mov	r0, r6
 8010600:	47c0      	blx	r8
 8010602:	3001      	adds	r0, #1
 8010604:	d09a      	beq.n	801053c <_printf_i+0x12c>
 8010606:	3501      	adds	r5, #1
 8010608:	68e3      	ldr	r3, [r4, #12]
 801060a:	9a03      	ldr	r2, [sp, #12]
 801060c:	1a9b      	subs	r3, r3, r2
 801060e:	42ab      	cmp	r3, r5
 8010610:	dcf2      	bgt.n	80105f8 <_printf_i+0x1e8>
 8010612:	e7eb      	b.n	80105ec <_printf_i+0x1dc>
 8010614:	2500      	movs	r5, #0
 8010616:	f104 0919 	add.w	r9, r4, #25
 801061a:	e7f5      	b.n	8010608 <_printf_i+0x1f8>
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1ac      	bne.n	801057a <_printf_i+0x16a>
 8010620:	7803      	ldrb	r3, [r0, #0]
 8010622:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010626:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801062a:	e76c      	b.n	8010506 <_printf_i+0xf6>
 801062c:	08011505 	.word	0x08011505
 8010630:	08011516 	.word	0x08011516

08010634 <_putc_r>:
 8010634:	b570      	push	{r4, r5, r6, lr}
 8010636:	460d      	mov	r5, r1
 8010638:	4614      	mov	r4, r2
 801063a:	4606      	mov	r6, r0
 801063c:	b118      	cbz	r0, 8010646 <_putc_r+0x12>
 801063e:	6983      	ldr	r3, [r0, #24]
 8010640:	b90b      	cbnz	r3, 8010646 <_putc_r+0x12>
 8010642:	f7ff fb99 	bl	800fd78 <__sinit>
 8010646:	4b13      	ldr	r3, [pc, #76]	; (8010694 <_putc_r+0x60>)
 8010648:	429c      	cmp	r4, r3
 801064a:	d112      	bne.n	8010672 <_putc_r+0x3e>
 801064c:	6874      	ldr	r4, [r6, #4]
 801064e:	68a3      	ldr	r3, [r4, #8]
 8010650:	3b01      	subs	r3, #1
 8010652:	2b00      	cmp	r3, #0
 8010654:	60a3      	str	r3, [r4, #8]
 8010656:	da16      	bge.n	8010686 <_putc_r+0x52>
 8010658:	69a2      	ldr	r2, [r4, #24]
 801065a:	4293      	cmp	r3, r2
 801065c:	db02      	blt.n	8010664 <_putc_r+0x30>
 801065e:	b2eb      	uxtb	r3, r5
 8010660:	2b0a      	cmp	r3, #10
 8010662:	d110      	bne.n	8010686 <_putc_r+0x52>
 8010664:	4622      	mov	r2, r4
 8010666:	4629      	mov	r1, r5
 8010668:	4630      	mov	r0, r6
 801066a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801066e:	f7ff b9d3 	b.w	800fa18 <__swbuf_r>
 8010672:	4b09      	ldr	r3, [pc, #36]	; (8010698 <_putc_r+0x64>)
 8010674:	429c      	cmp	r4, r3
 8010676:	d101      	bne.n	801067c <_putc_r+0x48>
 8010678:	68b4      	ldr	r4, [r6, #8]
 801067a:	e7e8      	b.n	801064e <_putc_r+0x1a>
 801067c:	4b07      	ldr	r3, [pc, #28]	; (801069c <_putc_r+0x68>)
 801067e:	429c      	cmp	r4, r3
 8010680:	bf08      	it	eq
 8010682:	68f4      	ldreq	r4, [r6, #12]
 8010684:	e7e3      	b.n	801064e <_putc_r+0x1a>
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	6022      	str	r2, [r4, #0]
 801068c:	701d      	strb	r5, [r3, #0]
 801068e:	b2e8      	uxtb	r0, r5
 8010690:	bd70      	pop	{r4, r5, r6, pc}
 8010692:	bf00      	nop
 8010694:	080114b4 	.word	0x080114b4
 8010698:	080114d4 	.word	0x080114d4
 801069c:	08011494 	.word	0x08011494

080106a0 <_sbrk_r>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	4c06      	ldr	r4, [pc, #24]	; (80106bc <_sbrk_r+0x1c>)
 80106a4:	2300      	movs	r3, #0
 80106a6:	4605      	mov	r5, r0
 80106a8:	4608      	mov	r0, r1
 80106aa:	6023      	str	r3, [r4, #0]
 80106ac:	f7f0 fcdc 	bl	8001068 <_sbrk>
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	d102      	bne.n	80106ba <_sbrk_r+0x1a>
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	b103      	cbz	r3, 80106ba <_sbrk_r+0x1a>
 80106b8:	602b      	str	r3, [r5, #0]
 80106ba:	bd38      	pop	{r3, r4, r5, pc}
 80106bc:	24000b20 	.word	0x24000b20

080106c0 <__sread>:
 80106c0:	b510      	push	{r4, lr}
 80106c2:	460c      	mov	r4, r1
 80106c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c8:	f000 f896 	bl	80107f8 <_read_r>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	bfab      	itete	ge
 80106d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80106d2:	89a3      	ldrhlt	r3, [r4, #12]
 80106d4:	181b      	addge	r3, r3, r0
 80106d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80106da:	bfac      	ite	ge
 80106dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80106de:	81a3      	strhlt	r3, [r4, #12]
 80106e0:	bd10      	pop	{r4, pc}

080106e2 <__swrite>:
 80106e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e6:	461f      	mov	r7, r3
 80106e8:	898b      	ldrh	r3, [r1, #12]
 80106ea:	05db      	lsls	r3, r3, #23
 80106ec:	4605      	mov	r5, r0
 80106ee:	460c      	mov	r4, r1
 80106f0:	4616      	mov	r6, r2
 80106f2:	d505      	bpl.n	8010700 <__swrite+0x1e>
 80106f4:	2302      	movs	r3, #2
 80106f6:	2200      	movs	r2, #0
 80106f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106fc:	f000 f868 	bl	80107d0 <_lseek_r>
 8010700:	89a3      	ldrh	r3, [r4, #12]
 8010702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801070a:	81a3      	strh	r3, [r4, #12]
 801070c:	4632      	mov	r2, r6
 801070e:	463b      	mov	r3, r7
 8010710:	4628      	mov	r0, r5
 8010712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010716:	f000 b817 	b.w	8010748 <_write_r>

0801071a <__sseek>:
 801071a:	b510      	push	{r4, lr}
 801071c:	460c      	mov	r4, r1
 801071e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010722:	f000 f855 	bl	80107d0 <_lseek_r>
 8010726:	1c43      	adds	r3, r0, #1
 8010728:	89a3      	ldrh	r3, [r4, #12]
 801072a:	bf15      	itete	ne
 801072c:	6560      	strne	r0, [r4, #84]	; 0x54
 801072e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010736:	81a3      	strheq	r3, [r4, #12]
 8010738:	bf18      	it	ne
 801073a:	81a3      	strhne	r3, [r4, #12]
 801073c:	bd10      	pop	{r4, pc}

0801073e <__sclose>:
 801073e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010742:	f000 b813 	b.w	801076c <_close_r>
	...

08010748 <_write_r>:
 8010748:	b538      	push	{r3, r4, r5, lr}
 801074a:	4c07      	ldr	r4, [pc, #28]	; (8010768 <_write_r+0x20>)
 801074c:	4605      	mov	r5, r0
 801074e:	4608      	mov	r0, r1
 8010750:	4611      	mov	r1, r2
 8010752:	2200      	movs	r2, #0
 8010754:	6022      	str	r2, [r4, #0]
 8010756:	461a      	mov	r2, r3
 8010758:	f7f0 fc35 	bl	8000fc6 <_write>
 801075c:	1c43      	adds	r3, r0, #1
 801075e:	d102      	bne.n	8010766 <_write_r+0x1e>
 8010760:	6823      	ldr	r3, [r4, #0]
 8010762:	b103      	cbz	r3, 8010766 <_write_r+0x1e>
 8010764:	602b      	str	r3, [r5, #0]
 8010766:	bd38      	pop	{r3, r4, r5, pc}
 8010768:	24000b20 	.word	0x24000b20

0801076c <_close_r>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	4c06      	ldr	r4, [pc, #24]	; (8010788 <_close_r+0x1c>)
 8010770:	2300      	movs	r3, #0
 8010772:	4605      	mov	r5, r0
 8010774:	4608      	mov	r0, r1
 8010776:	6023      	str	r3, [r4, #0]
 8010778:	f7f0 fc41 	bl	8000ffe <_close>
 801077c:	1c43      	adds	r3, r0, #1
 801077e:	d102      	bne.n	8010786 <_close_r+0x1a>
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	b103      	cbz	r3, 8010786 <_close_r+0x1a>
 8010784:	602b      	str	r3, [r5, #0]
 8010786:	bd38      	pop	{r3, r4, r5, pc}
 8010788:	24000b20 	.word	0x24000b20

0801078c <_fstat_r>:
 801078c:	b538      	push	{r3, r4, r5, lr}
 801078e:	4c07      	ldr	r4, [pc, #28]	; (80107ac <_fstat_r+0x20>)
 8010790:	2300      	movs	r3, #0
 8010792:	4605      	mov	r5, r0
 8010794:	4608      	mov	r0, r1
 8010796:	4611      	mov	r1, r2
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	f7f0 fc3c 	bl	8001016 <_fstat>
 801079e:	1c43      	adds	r3, r0, #1
 80107a0:	d102      	bne.n	80107a8 <_fstat_r+0x1c>
 80107a2:	6823      	ldr	r3, [r4, #0]
 80107a4:	b103      	cbz	r3, 80107a8 <_fstat_r+0x1c>
 80107a6:	602b      	str	r3, [r5, #0]
 80107a8:	bd38      	pop	{r3, r4, r5, pc}
 80107aa:	bf00      	nop
 80107ac:	24000b20 	.word	0x24000b20

080107b0 <_isatty_r>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	4c06      	ldr	r4, [pc, #24]	; (80107cc <_isatty_r+0x1c>)
 80107b4:	2300      	movs	r3, #0
 80107b6:	4605      	mov	r5, r0
 80107b8:	4608      	mov	r0, r1
 80107ba:	6023      	str	r3, [r4, #0]
 80107bc:	f7f0 fc3b 	bl	8001036 <_isatty>
 80107c0:	1c43      	adds	r3, r0, #1
 80107c2:	d102      	bne.n	80107ca <_isatty_r+0x1a>
 80107c4:	6823      	ldr	r3, [r4, #0]
 80107c6:	b103      	cbz	r3, 80107ca <_isatty_r+0x1a>
 80107c8:	602b      	str	r3, [r5, #0]
 80107ca:	bd38      	pop	{r3, r4, r5, pc}
 80107cc:	24000b20 	.word	0x24000b20

080107d0 <_lseek_r>:
 80107d0:	b538      	push	{r3, r4, r5, lr}
 80107d2:	4c07      	ldr	r4, [pc, #28]	; (80107f0 <_lseek_r+0x20>)
 80107d4:	4605      	mov	r5, r0
 80107d6:	4608      	mov	r0, r1
 80107d8:	4611      	mov	r1, r2
 80107da:	2200      	movs	r2, #0
 80107dc:	6022      	str	r2, [r4, #0]
 80107de:	461a      	mov	r2, r3
 80107e0:	f7f0 fc34 	bl	800104c <_lseek>
 80107e4:	1c43      	adds	r3, r0, #1
 80107e6:	d102      	bne.n	80107ee <_lseek_r+0x1e>
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	b103      	cbz	r3, 80107ee <_lseek_r+0x1e>
 80107ec:	602b      	str	r3, [r5, #0]
 80107ee:	bd38      	pop	{r3, r4, r5, pc}
 80107f0:	24000b20 	.word	0x24000b20

080107f4 <__malloc_lock>:
 80107f4:	4770      	bx	lr

080107f6 <__malloc_unlock>:
 80107f6:	4770      	bx	lr

080107f8 <_read_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4c07      	ldr	r4, [pc, #28]	; (8010818 <_read_r+0x20>)
 80107fc:	4605      	mov	r5, r0
 80107fe:	4608      	mov	r0, r1
 8010800:	4611      	mov	r1, r2
 8010802:	2200      	movs	r2, #0
 8010804:	6022      	str	r2, [r4, #0]
 8010806:	461a      	mov	r2, r3
 8010808:	f7f0 fbc0 	bl	8000f8c <_read>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d102      	bne.n	8010816 <_read_r+0x1e>
 8010810:	6823      	ldr	r3, [r4, #0]
 8010812:	b103      	cbz	r3, 8010816 <_read_r+0x1e>
 8010814:	602b      	str	r3, [r5, #0]
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	24000b20 	.word	0x24000b20

0801081c <_init>:
 801081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081e:	bf00      	nop
 8010820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010822:	bc08      	pop	{r3}
 8010824:	469e      	mov	lr, r3
 8010826:	4770      	bx	lr

08010828 <_fini>:
 8010828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801082a:	bf00      	nop
 801082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801082e:	bc08      	pop	{r3}
 8010830:	469e      	mov	lr, r3
 8010832:	4770      	bx	lr
