
open-mv-camh7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  0800fb68  0800fb68  0001fb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106d0  080106d0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080106d0  080106d0  000206d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106d8  080106d8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106d8  080106d8  000206d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106dc  080106dc  000206dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080106e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  24000078  08010758  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000490  08010758  00030490  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000355af  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a59  00000000  00000000  00065655  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001988  00000000  00000000  0006b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017d8  00000000  00000000  0006ca38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003c03e  00000000  00000000  0006e210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e0a2  00000000  00000000  000aa24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00161a36  00000000  00000000  000c82f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00229d26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f28  00000000  00000000  00229da4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fb50 	.word	0x0800fb50

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800fb50 	.word	0x0800fb50

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_DCMI_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_DCMI_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_DCMI_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006be:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_DCMI_Init+0x64>)
 80006e0:	f001 f96a 	bl	80019b8 <HAL_DCMI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 80006ea:	f000 fcfd 	bl	80010e8 <Error_Handler>
  }

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	24000258 	.word	0x24000258
 80006f8:	48020000 	.word	0x48020000

080006fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a65      	ldr	r2, [pc, #404]	; (80008b0 <HAL_DCMI_MspInit+0x1b4>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f040 80c3 	bne.w	80008a6 <HAL_DCMI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000720:	4b64      	ldr	r3, [pc, #400]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 8000722:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000726:	4a63      	ldr	r2, [pc, #396]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000730:	4b60      	ldr	r3, [pc, #384]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 8000732:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	4b5d      	ldr	r3, [pc, #372]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a5b      	ldr	r2, [pc, #364]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	4a54      	ldr	r2, [pc, #336]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076c:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b4e      	ldr	r3, [pc, #312]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f003 0304 	and.w	r3, r3, #4
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4b46      	ldr	r3, [pc, #280]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	4a45      	ldr	r2, [pc, #276]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a8:	4b42      	ldr	r3, [pc, #264]	; (80008b4 <HAL_DCMI_MspInit+0x1b8>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
 80007b6:	2373      	movs	r3, #115	; 0x73
 80007b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c6:	230d      	movs	r3, #13
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4839      	ldr	r0, [pc, #228]	; (80008b8 <HAL_DCMI_MspInit+0x1bc>)
 80007d2:	f003 f9c1 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007d6:	2350      	movs	r3, #80	; 0x50
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e6:	230d      	movs	r3, #13
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4832      	ldr	r0, [pc, #200]	; (80008bc <HAL_DCMI_MspInit+0x1c0>)
 80007f2:	f003 f9b1 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80007f6:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000808:	230d      	movs	r3, #13
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	482b      	ldr	r0, [pc, #172]	; (80008c0 <HAL_DCMI_MspInit+0x1c4>)
 8000814:	f003 f9a0 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000818:	23c0      	movs	r3, #192	; 0xc0
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000828:	230d      	movs	r3, #13
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4824      	ldr	r0, [pc, #144]	; (80008c4 <HAL_DCMI_MspInit+0x1c8>)
 8000834:	f003 f990 	bl	8003b58 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 800083a:	4a24      	ldr	r2, [pc, #144]	; (80008cc <HAL_DCMI_MspInit+0x1d0>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 8000840:	224b      	movs	r2, #75	; 0x4b
 8000842:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 8000852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000856:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 800085a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800087a:	4813      	ldr	r0, [pc, #76]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 800087c:	f001 fa86 	bl	8001d8c <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_DCMI_MspInit+0x18e>
    {
      Error_Handler();
 8000886:	f000 fc2f 	bl	80010e8 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 800088e:	649a      	str	r2, [r3, #72]	; 0x48
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <HAL_DCMI_MspInit+0x1cc>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	204e      	movs	r0, #78	; 0x4e
 800089c:	f001 f826 	bl	80018ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80008a0:	204e      	movs	r0, #78	; 0x4e
 80008a2:	f001 f84d 	bl	8001940 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	; 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	48020000 	.word	0x48020000
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58021000 	.word	0x58021000
 80008bc:	58020000 	.word	0x58020000
 80008c0:	58020800 	.word	0x58020800
 80008c4:	58020400 	.word	0x58020400
 80008c8:	240001e0 	.word	0x240001e0
 80008cc:	40020010 	.word	0x40020010

080008d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_DMA_Init+0x3c>)
 80008d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <MX_DMA_Init+0x3c>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_DMA_Init+0x3c>)
 80008e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	200b      	movs	r0, #11
 80008fa:	f000 fff7 	bl	80018ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008fe:	200b      	movs	r0, #11
 8000900:	f001 f81e 	bl	8001940 <HAL_NVIC_EnableIRQ>

}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	58024400 	.word	0x58024400

08000910 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000926:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a5c      	ldr	r2, [pc, #368]	; (8000aa0 <MX_GPIO_Init+0x190>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4b56      	ldr	r3, [pc, #344]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	4a55      	ldr	r2, [pc, #340]	; (8000aa0 <MX_GPIO_Init+0x190>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000954:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b4f      	ldr	r3, [pc, #316]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a4d      	ldr	r2, [pc, #308]	; (8000aa0 <MX_GPIO_Init+0x190>)
 800096a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000990:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <MX_GPIO_Init+0x190>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a3e      	ldr	r2, [pc, #248]	; (8000aa0 <MX_GPIO_Init+0x190>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <MX_GPIO_Init+0x190>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009bc:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <MX_GPIO_Init+0x190>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	4a37      	ldr	r2, [pc, #220]	; (8000aa0 <MX_GPIO_Init+0x190>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009cc:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0x190>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
//  HAL_GPIO_WritePin(WIFI_RESET_N_GPIO_Port, WIFI_RESET_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE7 PE8 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8 
 80009da:	f64f 738c 	movw	r3, #65420	; 0xff8c
 80009de:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	482d      	ldr	r0, [pc, #180]	; (8000aa4 <MX_GPIO_Init+0x194>)
 80009f0:	f003 f8b2 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC3 
                           PC4 PC5 PC8 PC9 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
 80009f4:	f64e 3338 	movw	r3, #60216	; 0xeb38
 80009f8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <MX_GPIO_Init+0x198>)
 8000a0a:	f003 f8a5 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4820      	ldr	r0, [pc, #128]	; (8000aa8 <MX_GPIO_Init+0x198>)
 8000a26:	f003 f897 	bl	8003b58 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, LED_R_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <MX_GPIO_Init+0x198>)
 8000a30:	f003 fb42 	bl	80040b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2102      	movs	r1, #2
 8000a38:	481b      	ldr	r0, [pc, #108]	; (8000aa8 <MX_GPIO_Init+0x198>)
 8000a3a:	f003 fb3d 	bl	80040b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_B_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2104      	movs	r1, #4
 8000a42:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0x198>)
 8000a44:	f003 fb38 	bl	80040b8 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000a48:	f649 738f 	movw	r3, #40847	; 0x9f8f
 8000a4c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_GPIO_Init+0x19c>)
 8000a5e:	f003 f87b 	bl	8003b58 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(WIFI_CHIP_EN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000a62:	f640 433f 	movw	r3, #3135	; 0xc3f
 8000a66:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000a78:	f003 f86e 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000a7c:	f64c 739f 	movw	r3, #53151	; 0xcf9f
 8000a80:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x1a4>)
 8000a92:	f003 f861 	bl	8003b58 <HAL_GPIO_Init>
//
//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	58024400 	.word	0x58024400
 8000aa4:	58021000 	.word	0x58021000
 8000aa8:	58020800 	.word	0x58020800
 8000aac:	58020000 	.word	0x58020000
 8000ab0:	58020400 	.word	0x58020400
 8000ab4:	58020c00 	.word	0x58020c00

08000ab8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <MX_I2C1_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <MX_I2C1_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af2:	480e      	ldr	r0, [pc, #56]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000af4:	f003 fb2c 	bl	8004150 <HAL_I2C_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f000 faf3 	bl	80010e8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000b06:	f003 fc45 	bl	8004394 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 faea 	bl	80010e8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000b18:	f003 fcb2 	bl	8004480 <HAL_I2CEx_ConfigDigitalFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 fae1 	bl	80010e8 <Error_Handler>
  }

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	240002a8 	.word	0x240002a8
 8000b30:	40005400 	.word	0x40005400
 8000b34:	10707dbc 	.word	0x10707dbc

08000b38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1a      	ldr	r2, [pc, #104]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12e      	bne.n	8000bb8 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7e:	2312      	movs	r3, #18
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <HAL_I2C_MspInit+0x90>)
 8000b96:	f002 ffdf 	bl	8003b58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba0:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	58020400 	.word	0x58020400

08000bcc <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  hjpeg.Instance = JPEG;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_JPEG_Init+0x20>)
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <MX_JPEG_Init+0x24>)
 8000bd4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_JPEG_Init+0x20>)
 8000bd8:	f003 fcc6 	bl	8004568 <HAL_JPEG_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000be2:	f000 fa81 	bl	80010e8 <Error_Handler>
  }

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	240002f4 	.word	0x240002f4
 8000bf0:	52003000 	.word	0x52003000

08000bf4 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_JPEG_MspInit+0x3c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d10e      	bne.n	8000c24 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_JPEG_MspInit+0x40>)
 8000c08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c0c:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <HAL_JPEG_MspInit+0x40>)
 8000c0e:	f043 0320 	orr.w	r3, r3, #32
 8000c12:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <HAL_JPEG_MspInit+0x40>)
 8000c18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	52003000 	.word	0x52003000
 8000c34:	58024400 	.word	0x58024400

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fc87 	bl	8001550 <HAL_Init>
	tstrWifiInitParam param;
	int8_t ret;
  /* USER CODE END Init */

  /* Configure the system clock */ // TODO: see if  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8000c42:	f000 f869 	bl	8000d18 <SystemClock_Config>


	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <main+0xd4>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <main+0xd4>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <main+0xd4>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
	__GPIOA_CLK_ENABLE();
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <main+0xd4>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <main+0xd4>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <main+0xd4>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
	__GPIOB_CLK_ENABLE();
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <main+0xd4>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <main+0xd4>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <main+0xd4>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f7ff fe36 	bl	8000910 <MX_GPIO_Init>
  MX_DCMI_Init();
 8000ca4:	f7ff fcf4 	bl	8000690 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000ca8:	f7ff ff06 	bl	8000ab8 <MX_I2C1_Init>
  MX_JPEG_Init();
 8000cac:	f7ff ff8e 	bl	8000bcc <MX_JPEG_Init>
  MX_USART2_UART_Init();
 8000cb0:	f000 fb8e 	bl	80013d0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000cb4:	f7ff fe0c 	bl	80008d0 <MX_DMA_Init>

	nm_bsp_init();
 8000cb8:	f00b f936 	bl	800bf28 <nm_bsp_init>

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2218      	movs	r2, #24
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f00d ffa8 	bl	800ec1a <memset>

	/* =================  Initialize Wi-Fi driver with data and status callbacks. ================= */
	//param.pfAppWifiCb = wifi_cb;
	param.pfAppWifiCb = (tpfAppWifiCb)wifi_cb;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <main+0xd8>)
 8000ccc:	60fb      	str	r3, [r7, #12]
	ret = m2m_wifi_init(&param);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f00c f9d4 	bl	800d080 <m2m_wifi_init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (M2M_SUCCESS != ret)
 8000cde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <main+0xbc>
	{
		  printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 8000ce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000cea:	4619      	mov	r1, r3
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <main+0xdc>)
 8000cee:	f00d ff9d 	bl	800ec2c <iprintf>
		  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0xba>
		  {
		  }
	}

	/* Request scan. */
	m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 8000cf4:	20ff      	movs	r0, #255	; 0xff
 8000cf6:	f00c fba3 	bl	800d440 <m2m_wifi_request_scan>

	while (1) {
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS) {
 8000cfa:	bf00      	nop
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f00c fa43 	bl	800d188 <m2m_wifi_handle_events>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f9      	bne.n	8000cfc <main+0xc4>
 8000d08:	e7f7      	b.n	8000cfa <main+0xc2>
 8000d0a:	bf00      	nop
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	08000edd 	.word	0x08000edd
 8000d14:	0800fb68 	.word	0x0800fb68

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0cc      	sub	sp, #304	; 0x130
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d22:	224c      	movs	r2, #76	; 0x4c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f00d ff77 	bl	800ec1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d30:	2220      	movs	r2, #32
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f00d ff70 	bl	800ec1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4618      	mov	r0, r3
 8000d40:	23bc      	movs	r3, #188	; 0xbc
 8000d42:	461a      	mov	r2, r3
 8000d44:	2100      	movs	r1, #0
 8000d46:	f00d ff68 	bl	800ec1a <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f004 f9d0 	bl	80050f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	4b4c      	ldr	r3, [pc, #304]	; (8000e88 <SystemClock_Config+0x170>)
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	4a4b      	ldr	r2, [pc, #300]	; (8000e88 <SystemClock_Config+0x170>)
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <SystemClock_Config+0x170>)
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <SystemClock_Config+0x174>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d76:	4a45      	ldr	r2, [pc, #276]	; (8000e8c <SystemClock_Config+0x174>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <SystemClock_Config+0x174>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d8e:	bf00      	nop
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <SystemClock_Config+0x174>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d9c:	d1f8      	bne.n	8000d90 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2320      	movs	r3, #32
 8000dac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000dc2:	2381      	movs	r3, #129	; 0x81
 8000dc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 f9c1 	bl	8005178 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000dfc:	f000 f974 	bl	80010e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	233f      	movs	r3, #63	; 0x3f
 8000e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fe7e 	bl	8005b38 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000e42:	f000 f951 	bl	80010e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SPI2
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e4e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	2200      	movs	r2, #0
 8000e56:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	2200      	movs	r2, #0
 8000e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f005 fb7a 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000e7a:	f000 f935 	bl	80010e8 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58000400 	.word	0x58000400
 8000e8c:	58024800 	.word	0x58024800

08000e90 <EXTI15_10_IRQHandler>:

///* USER CODE BEGIN 4 */
void EXTI15_10_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <EXTI15_10_IRQHandler+0x28>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <EXTI15_10_IRQHandler+0x18>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea6:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 f938 	bl	8004120 <HAL_GPIO_EXTI_IRQHandler>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58000080 	.word	0x58000080

08000ebc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CONF_WINC_SPI_INT_PIN)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x16>
    {
        isr();
 8000ece:	f00b fa13 	bl	800c2f8 <isr>
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	3b11      	subs	r3, #17
 8000eec:	2b21      	cmp	r3, #33	; 0x21
 8000eee:	f200 80df 	bhi.w	80010b0 <wifi_cb+0x1d4>
 8000ef2:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <wifi_cb+0x1c>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f81 	.word	0x08000f81
 8000efc:	080010b1 	.word	0x080010b1
 8000f00:	08000fb3 	.word	0x08000fb3
 8000f04:	080010b1 	.word	0x080010b1
 8000f08:	080010b1 	.word	0x080010b1
 8000f0c:	080010b1 	.word	0x080010b1
 8000f10:	080010b1 	.word	0x080010b1
 8000f14:	080010b1 	.word	0x080010b1
 8000f18:	080010b1 	.word	0x080010b1
 8000f1c:	080010b1 	.word	0x080010b1
 8000f20:	080010b1 	.word	0x080010b1
 8000f24:	080010b1 	.word	0x080010b1
 8000f28:	080010b1 	.word	0x080010b1
 8000f2c:	080010b1 	.word	0x080010b1
 8000f30:	080010b1 	.word	0x080010b1
 8000f34:	080010b1 	.word	0x080010b1
 8000f38:	080010b1 	.word	0x080010b1
 8000f3c:	080010b1 	.word	0x080010b1
 8000f40:	080010b1 	.word	0x080010b1
 8000f44:	080010b1 	.word	0x080010b1
 8000f48:	080010b1 	.word	0x080010b1
 8000f4c:	080010b1 	.word	0x080010b1
 8000f50:	080010b1 	.word	0x080010b1
 8000f54:	080010b1 	.word	0x080010b1
 8000f58:	080010b1 	.word	0x080010b1
 8000f5c:	080010b1 	.word	0x080010b1
 8000f60:	080010b1 	.word	0x080010b1
 8000f64:	08001057 	.word	0x08001057
 8000f68:	080010b1 	.word	0x080010b1
 8000f6c:	080010b1 	.word	0x080010b1
 8000f70:	080010b1 	.word	0x080010b1
 8000f74:	080010b1 	.word	0x080010b1
 8000f78:	080010b1 	.word	0x080010b1
 8000f7c:	0800107f 	.word	0x0800107f
	case M2M_WIFI_RESP_SCAN_DONE:
	{
		tstrM2mScanDone *pstrInfo = (tstrM2mScanDone *)pvMsg;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	60fb      	str	r3, [r7, #12]
		scan_request_index = 0;
 8000f84:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <wifi_cb+0x1e4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
		if (pstrInfo->u8NumofCh >= 1) {
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <wifi_cb+0xce>
			m2m_wifi_req_scan_result(scan_request_index);
 8000f92:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <wifi_cb+0x1e4>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f00c fa90 	bl	800d4bc <m2m_wifi_req_scan_result>
			scan_request_index++;
 8000f9c:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <wifi_cb+0x1e4>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <wifi_cb+0x1e4>)
 8000fa6:	701a      	strb	r2, [r3, #0]
		} else {
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
		}

		break;
 8000fa8:	e085      	b.n	80010b6 <wifi_cb+0x1da>
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 8000faa:	20ff      	movs	r0, #255	; 0xff
 8000fac:	f00c fa48 	bl	800d440 <m2m_wifi_request_scan>
		break;
 8000fb0:	e081      	b.n	80010b6 <wifi_cb+0x1da>
	}

	case M2M_WIFI_RESP_SCAN_RESULT:
	{
		tstrM2mWifiscanResult *pstrScanResult = (tstrM2mWifiscanResult *)pvMsg;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	617b      	str	r3, [r7, #20]
		uint16_t demo_ssid_len;
		uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	330a      	adds	r3, #10
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f990 	bl	80002e0 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	827b      	strh	r3, [r7, #18]

		/* display founded AP. */
		printf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <wifi_cb+0x1e4>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	330a      	adds	r3, #10
 8000fce:	461a      	mov	r2, r3
 8000fd0:	483c      	ldr	r0, [pc, #240]	; (80010c4 <wifi_cb+0x1e8>)
 8000fd2:	f00d fe2b 	bl	800ec2c <iprintf>

		num_founded_ap = m2m_wifi_get_num_ap_found();
 8000fd6:	f00c fa8f 	bl	800d4f8 <m2m_wifi_get_num_ap_found>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <wifi_cb+0x1ec>)
 8000fe0:	701a      	strb	r2, [r3, #0]
		if (scan_ssid_len) {
 8000fe2:	8a7b      	ldrh	r3, [r7, #18]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d01c      	beq.n	8001022 <wifi_cb+0x146>
			/* check same SSID. */
			demo_ssid_len = strlen((const char *)MAIN_WLAN_SSID);
 8000fe8:	2306      	movs	r3, #6
 8000fea:	823b      	strh	r3, [r7, #16]
			if
			(
 8000fec:	8a3a      	ldrh	r2, [r7, #16]
 8000fee:	8a7b      	ldrh	r3, [r7, #18]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d116      	bne.n	8001022 <wifi_cb+0x146>
				(demo_ssid_len == scan_ssid_len) &&
				(!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	330a      	adds	r3, #10
 8000ff8:	8a3a      	ldrh	r2, [r7, #16]
 8000ffa:	4934      	ldr	r1, [pc, #208]	; (80010cc <wifi_cb+0x1f0>)
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00d fdfd 	bl	800ebfc <memcmp>
 8001002:	4603      	mov	r3, r0
				(demo_ssid_len == scan_ssid_len) &&
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10c      	bne.n	8001022 <wifi_cb+0x146>
			) {
				/* A scan result matches an entry in the preferred AP List.
				 * Initiate a connection request.
				 */
				printf("Found %s \r\n", MAIN_WLAN_SSID);
 8001008:	4930      	ldr	r1, [pc, #192]	; (80010cc <wifi_cb+0x1f0>)
 800100a:	4831      	ldr	r0, [pc, #196]	; (80010d0 <wifi_cb+0x1f4>)
 800100c:	f00d fe0e 	bl	800ec2c <iprintf>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID,
 8001010:	23ff      	movs	r3, #255	; 0xff
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <wifi_cb+0x1f8>)
 8001016:	2202      	movs	r2, #2
 8001018:	2107      	movs	r1, #7
 800101a:	482c      	ldr	r0, [pc, #176]	; (80010cc <wifi_cb+0x1f0>)
 800101c:	f00c f8bf 	bl	800d19e <m2m_wifi_connect>
						sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH,
						(void *)MAIN_WLAN_PSK,
						M2M_WIFI_CH_ALL);
				break;
 8001020:	e049      	b.n	80010b6 <wifi_cb+0x1da>
			}
		}

		if (scan_request_index < num_founded_ap) {
 8001022:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <wifi_cb+0x1e4>)
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <wifi_cb+0x1ec>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d20b      	bcs.n	8001046 <wifi_cb+0x16a>
			m2m_wifi_req_scan_result(scan_request_index);
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <wifi_cb+0x1e4>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f00c fa42 	bl	800d4bc <m2m_wifi_req_scan_result>
			scan_request_index++;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <wifi_cb+0x1e4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <wifi_cb+0x1e4>)
 8001042:	701a      	strb	r2, [r3, #0]
		} else {
			printf("can not find AP %s\r\n", MAIN_WLAN_SSID);
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
		}

		break;
 8001044:	e037      	b.n	80010b6 <wifi_cb+0x1da>
			printf("can not find AP %s\r\n", MAIN_WLAN_SSID);
 8001046:	4921      	ldr	r1, [pc, #132]	; (80010cc <wifi_cb+0x1f0>)
 8001048:	4823      	ldr	r0, [pc, #140]	; (80010d8 <wifi_cb+0x1fc>)
 800104a:	f00d fdef 	bl	800ec2c <iprintf>
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 800104e:	20ff      	movs	r0, #255	; 0xff
 8001050:	f00c f9f6 	bl	800d440 <m2m_wifi_request_scan>
		break;
 8001054:	e02f      	b.n	80010b6 <wifi_cb+0x1da>
	}

	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	61bb      	str	r3, [r7, #24]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <wifi_cb+0x18c>
			m2m_wifi_request_dhcp_client();
 8001062:	f00c f9e4 	bl	800d42e <m2m_wifi_request_dhcp_client>

			/* Request scan. */
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
		}

		break;
 8001066:	e025      	b.n	80010b4 <wifi_cb+0x1d8>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d121      	bne.n	80010b4 <wifi_cb+0x1d8>
			printf("Wi-Fi disconnected\r\n");
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <wifi_cb+0x200>)
 8001072:	f00d fe63 	bl	800ed3c <puts>
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 8001076:	20ff      	movs	r0, #255	; 0xff
 8001078:	f00c f9e2 	bl	800d440 <m2m_wifi_request_scan>
		break;
 800107c:	e01a      	b.n	80010b4 <wifi_cb+0x1d8>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	61fb      	str	r3, [r7, #28]
		printf("Wi-Fi connected\r\n");
 8001082:	4817      	ldr	r0, [pc, #92]	; (80010e0 <wifi_cb+0x204>)
 8001084:	f00d fe5a 	bl	800ed3c <puts>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 800108c:	4619      	mov	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 8001094:	461a      	mov	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3302      	adds	r3, #2
 800109a:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 800109c:	4618      	mov	r0, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3303      	adds	r3, #3
 80010a2:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4603      	mov	r3, r0
 80010a8:	480e      	ldr	r0, [pc, #56]	; (80010e4 <wifi_cb+0x208>)
 80010aa:	f00d fdbf 	bl	800ec2c <iprintf>
		break;
 80010ae:	e002      	b.n	80010b6 <wifi_cb+0x1da>
	}

	default:
	{
		break;
 80010b0:	bf00      	nop
 80010b2:	e000      	b.n	80010b6 <wifi_cb+0x1da>
		break;
 80010b4:	bf00      	nop
	}
	}
}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	24000094 	.word	0x24000094
 80010c4:	0800fb90 	.word	0x0800fb90
 80010c8:	24000095 	.word	0x24000095
 80010cc:	0800fba0 	.word	0x0800fba0
 80010d0:	0800fba8 	.word	0x0800fba8
 80010d4:	0800fbb4 	.word	0x0800fbb4
 80010d8:	0800fbc0 	.word	0x0800fbc0
 80010dc:	0800fbd8 	.word	0x0800fbd8
 80010e0:	0800fbec 	.word	0x0800fbec
 80010e4:	0800fc00 	.word	0x0800fc00

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
  while (true)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x4>

080010ee <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
  while (true)
 80010f8:	e7fe      	b.n	80010f8 <assert_failed+0xa>
	...

080010fc <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	if(hspi->Instance==SPI_WIFI)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_SPI_MspInit+0x20>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d102      	bne.n	8001114 <HAL_SPI_MspInit+0x18>
	{
	    nm_bus_wifi_spi_init(hspi);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f00a fff4 	bl	800c0fc <nm_bus_wifi_spi_init>
//    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//
//  /* USER CODE BEGIN SPI2_MspInit 1 */
//
//  /* USER CODE END SPI2_MspInit 1 */
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40003800 	.word	0x40003800

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_MspInit+0x30>)
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_MspInit+0x30>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_MspInit+0x30>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	58024400 	.word	0x58024400

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <MemManage_Handler+0x4>

0800116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <UsageFault_Handler+0x4>

0800117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 fa40 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <DMA1_Stream0_IRQHandler+0x10>)
 80011b6:	f001 fb69 	bl	800288c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	240001e0 	.word	0x240001e0

080011c4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <DCMI_IRQHandler+0x10>)
 80011ca:	f000 fd17 	bl	8001bfc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24000258 	.word	0x24000258

080011d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	e00a      	b.n	8001200 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ea:	f3af 8000 	nop.w
 80011ee:	4601      	mov	r1, r0
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	60ba      	str	r2, [r7, #8]
 80011f6:	b2ca      	uxtb	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	dbf0      	blt.n	80011ea <_read+0x12>
	}

return len;
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e009      	b.n	8001238 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	dbf1      	blt.n	8001224 <_write+0x12>
	}
	return len;
 8001240:	687b      	ldr	r3, [r7, #4]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_close>:

int _close(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	return -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001272:	605a      	str	r2, [r3, #4]
	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_isatty>:

int _isatty(int file)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	return 1;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x50>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x16>
		heap_end = &end;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <_sbrk+0x50>)
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <_sbrk+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <_sbrk+0x50>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <_sbrk+0x50>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	466a      	mov	r2, sp
 80012da:	4293      	cmp	r3, r2
 80012dc:	d907      	bls.n	80012ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012de:	f00d fc63 	bl	800eba8 <__errno>
 80012e2:	4602      	mov	r2, r0
 80012e4:	230c      	movs	r3, #12
 80012e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	e006      	b.n	80012fc <_sbrk+0x48>
	}

	heap_end += incr;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <_sbrk+0x50>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a03      	ldr	r2, [pc, #12]	; (8001304 <_sbrk+0x50>)
 80012f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	24000098 	.word	0x24000098
 8001308:	24000490 	.word	0x24000490

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <SystemInit+0xac>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <SystemInit+0xac>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <SystemInit+0xb0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <SystemInit+0xb0>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <SystemInit+0xb0>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <SystemInit+0xb0>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4921      	ldr	r1, [pc, #132]	; (80013bc <SystemInit+0xb0>)
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <SystemInit+0xb4>)
 800133a:	4013      	ands	r3, r2
 800133c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <SystemInit+0xb0>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <SystemInit+0xb0>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <SystemInit+0xb0>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <SystemInit+0xb0>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <SystemInit+0xb0>)
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <SystemInit+0xb0>)
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <SystemInit+0xb0>)
 8001364:	2200      	movs	r2, #0
 8001366:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <SystemInit+0xb0>)
 800136a:	2200      	movs	r2, #0
 800136c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <SystemInit+0xb0>)
 8001370:	2200      	movs	r2, #0
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <SystemInit+0xb0>)
 8001376:	2200      	movs	r2, #0
 8001378:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <SystemInit+0xb0>)
 800137c:	2200      	movs	r2, #0
 800137e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <SystemInit+0xb0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <SystemInit+0xb0>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <SystemInit+0xb0>)
 800138e:	2200      	movs	r2, #0
 8001390:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <SystemInit+0xb8>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <SystemInit+0xbc>)
 8001398:	4013      	ands	r3, r2
 800139a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800139e:	d202      	bcs.n	80013a6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SystemInit+0xc0>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SystemInit+0xac>)
 80013a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	58024400 	.word	0x58024400
 80013c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013c4:	5c001000 	.word	0x5c001000
 80013c8:	ffff0000 	.word	0xffff0000
 80013cc:	51008108 	.word	0x51008108

080013d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <MX_USART2_UART_Init+0x94>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_USART2_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_USART2_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_USART2_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_USART2_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001418:	4811      	ldr	r0, [pc, #68]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800141a:	f007 fddb 	bl	8008fd4 <HAL_UART_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001424:	f7ff fe60 	bl	80010e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800142c:	f00a fbb2 	bl	800bb94 <HAL_UARTEx_SetTxFifoThreshold>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001436:	f7ff fe57 	bl	80010e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143a:	2100      	movs	r1, #0
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800143e:	f00a fc43 	bl	800bcc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001448:	f7ff fe4e 	bl	80010e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_USART2_UART_Init+0x90>)
 800144e:	f00a fb2b 	bl	800baa8 <HAL_UARTEx_DisableFifoMode>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001458:	f7ff fe46 	bl	80010e8 <Error_Handler>
  }

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2400034c 	.word	0x2400034c
 8001464:	40004400 	.word	0x40004400

08001468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <HAL_UART_MspInit+0x88>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d12d      	bne.n	80014e6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 800148c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 8001492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 800149c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_UART_MspInit+0x8c>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014c6:	2360      	movs	r3, #96	; 0x60
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d6:	2307      	movs	r3, #7
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_UART_MspInit+0x90>)
 80014e2:	f002 fb39 	bl	8003b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40004400 	.word	0x40004400
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58020c00 	.word	0x58020c00

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001500:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001502:	e003      	b.n	800150c <LoopCopyDataInit>

08001504 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001506:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001508:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800150a:	3104      	adds	r1, #4

0800150c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001510:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001512:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001514:	d3f6      	bcc.n	8001504 <CopyDataInit>
  ldr  r2, =_sbss
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001518:	e002      	b.n	8001520 <LoopFillZerobss>

0800151a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800151a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800151c:	f842 3b04 	str.w	r3, [r2], #4

08001520 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001522:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001524:	d3f9      	bcc.n	800151a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001526:	f7ff fef1 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152a:	f00d fb43 	bl	800ebb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff fb83 	bl	8000c38 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001538:	080106e0 	.word	0x080106e0
  ldr  r0, =_sdata
 800153c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001540:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001544:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8001548:	24000490 	.word	0x24000490

0800154c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC3_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 f9a9 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800155a:	f004 fe4b 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 800155e:	4601      	mov	r1, r0
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_Init+0x60>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_Init+0x64>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	fa21 f303 	lsr.w	r3, r1, r3
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_Init+0x68>)
 8001578:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_Init+0x68>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_Init+0x60>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	490b      	ldr	r1, [pc, #44]	; (80015b4 <HAL_Init+0x64>)
 8001588:	5ccb      	ldrb	r3, [r1, r3]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_Init+0x6c>)
 8001594:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f812 	bl	80015c0 <HAL_InitTick>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e002      	b.n	80015ac <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015a6:	f7ff fdbb 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	58024400 	.word	0x58024400
 80015b4:	080102c0 	.word	0x080102c0
 80015b8:	24000000 	.word	0x24000000
 80015bc:	24000004 	.word	0x24000004

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_InitTick+0x60>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e021      	b.n	8001618 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_InitTick+0x64>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_InitTick+0x60>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f9d8 	bl	80019a0 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f970 	bl	80018ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_InitTick+0x68>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2400000c 	.word	0x2400000c
 8001624:	24000000 	.word	0x24000000
 8001628:	24000008 	.word	0x24000008

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	2400000c 	.word	0x2400000c
 8001650:	240003d8 	.word	0x240003d8

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	240003d8 	.word	0x240003d8

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_Delay+0x40>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2400000c 	.word	0x2400000c

080016b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetREVID+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0c1b      	lsrs	r3, r3, #16
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	5c001000 	.word	0x5c001000

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0000 	.word	0x05fa0000

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db10      	blt.n	800179c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4909      	ldr	r1, [pc, #36]	; (80017a8 <__NVIC_DisableIRQ+0x40>)
 8001782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	3320      	adds	r3, #32
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001794:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001798:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d00f      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b06      	cmp	r3, #6
 80018be:	d00c      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d009      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d006      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d003      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018d2:	2192      	movs	r1, #146	; 0x92
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80018d6:	f7ff fc0a 	bl	80010ee <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fef4 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	0800fc1c 	.word	0x0800fc1c

080018ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d903      	bls.n	8001908 <HAL_NVIC_SetPriority+0x1c>
 8001900:	21aa      	movs	r1, #170	; 0xaa
 8001902:	480e      	ldr	r0, [pc, #56]	; (800193c <HAL_NVIC_SetPriority+0x50>)
 8001904:	f7ff fbf3 	bl	80010ee <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b0f      	cmp	r3, #15
 800190c:	d903      	bls.n	8001916 <HAL_NVIC_SetPriority+0x2a>
 800190e:	21ab      	movs	r1, #171	; 0xab
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <HAL_NVIC_SetPriority+0x50>)
 8001912:	f7ff fbec 	bl	80010ee <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001916:	f7ff fefb 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800191a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7ff ff6d 	bl	8001800 <NVIC_EncodePriority>
 8001926:	4602      	mov	r2, r0
 8001928:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff3c 	bl	80017ac <__NVIC_SetPriority>
}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	0800fc1c 	.word	0x0800fc1c

08001940 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da03      	bge.n	800195a <HAL_NVIC_EnableIRQ+0x1a>
 8001952:	21be      	movs	r1, #190	; 0xbe
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_NVIC_EnableIRQ+0x2c>)
 8001956:	f7ff fbca 	bl	80010ee <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fee4 	bl	800172c <__NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	0800fc1c 	.word	0x0800fc1c

08001970 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800197a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da03      	bge.n	800198a <HAL_NVIC_DisableIRQ+0x1a>
 8001982:	21ce      	movs	r1, #206	; 0xce
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_NVIC_DisableIRQ+0x2c>)
 8001986:	f7ff fbb2 	bl	80010ee <assert_failed>

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800198a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff feea 	bl	8001768 <__NVIC_DisableIRQ>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	0800fc1c 	.word	0x0800fc1c

080019a0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff5d 	bl	8001868 <SysTick_Config>
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e10e      	b.n	8001be8 <HAL_DCMI_Init+0x230>
  }

  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a88      	ldr	r2, [pc, #544]	; (8001bf0 <HAL_DCMI_Init+0x238>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d003      	beq.n	80019dc <HAL_DCMI_Init+0x24>
 80019d4:	21b6      	movs	r1, #182	; 0xb6
 80019d6:	4887      	ldr	r0, [pc, #540]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 80019d8:	f7ff fb89 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_DCMI_Init+0x3c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d003      	beq.n	80019f4 <HAL_DCMI_Init+0x3c>
 80019ec:	21b7      	movs	r1, #183	; 0xb7
 80019ee:	4881      	ldr	r0, [pc, #516]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 80019f0:	f7ff fb7d 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <HAL_DCMI_Init+0x54>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b80      	cmp	r3, #128	; 0x80
 8001a02:	d003      	beq.n	8001a0c <HAL_DCMI_Init+0x54>
 8001a04:	21b8      	movs	r1, #184	; 0xb8
 8001a06:	487b      	ldr	r0, [pc, #492]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001a08:	f7ff fb71 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_DCMI_Init+0x6c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b40      	cmp	r3, #64	; 0x40
 8001a1a:	d003      	beq.n	8001a24 <HAL_DCMI_Init+0x6c>
 8001a1c:	21b9      	movs	r1, #185	; 0xb9
 8001a1e:	4875      	ldr	r0, [pc, #468]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001a20:	f7ff fb65 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_DCMI_Init+0x84>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d003      	beq.n	8001a3c <HAL_DCMI_Init+0x84>
 8001a34:	21ba      	movs	r1, #186	; 0xba
 8001a36:	486f      	ldr	r0, [pc, #444]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001a38:	f7ff fb59 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00d      	beq.n	8001a60 <HAL_DCMI_Init+0xa8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a4c:	d008      	beq.n	8001a60 <HAL_DCMI_Init+0xa8>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a56:	d003      	beq.n	8001a60 <HAL_DCMI_Init+0xa8>
 8001a58:	21bb      	movs	r1, #187	; 0xbb
 8001a5a:	4866      	ldr	r0, [pc, #408]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001a5c:	f7ff fb47 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d012      	beq.n	8001a8e <HAL_DCMI_Init+0xd6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a70:	d00d      	beq.n	8001a8e <HAL_DCMI_Init+0xd6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a7a:	d008      	beq.n	8001a8e <HAL_DCMI_Init+0xd6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a84:	d003      	beq.n	8001a8e <HAL_DCMI_Init+0xd6>
 8001a86:	21bc      	movs	r1, #188	; 0xbc
 8001a88:	485a      	ldr	r0, [pc, #360]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001a8a:	f7ff fb30 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_DCMI_Init+0xee>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DCMI_Init+0xee>
 8001a9e:	21bd      	movs	r1, #189	; 0xbd
 8001aa0:	4854      	ldr	r0, [pc, #336]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001aa2:	f7ff fb24 	bl	80010ee <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d012      	beq.n	8001ad4 <HAL_DCMI_Init+0x11c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_DCMI_Init+0x11c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ac0:	d008      	beq.n	8001ad4 <HAL_DCMI_Init+0x11c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001aca:	d003      	beq.n	8001ad4 <HAL_DCMI_Init+0x11c>
 8001acc:	21bf      	movs	r1, #191	; 0xbf
 8001ace:	4849      	ldr	r0, [pc, #292]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001ad0:	f7ff fb0d 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_DCMI_Init+0x136>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ae4:	d003      	beq.n	8001aee <HAL_DCMI_Init+0x136>
 8001ae6:	21c0      	movs	r1, #192	; 0xc0
 8001ae8:	4842      	ldr	r0, [pc, #264]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001aea:	f7ff fb00 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <HAL_DCMI_Init+0x150>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001afe:	d003      	beq.n	8001b08 <HAL_DCMI_Init+0x150>
 8001b00:	21c1      	movs	r1, #193	; 0xc1
 8001b02:	483c      	ldr	r0, [pc, #240]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001b04:	f7ff faf3 	bl	80010ee <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_DCMI_Init+0x16a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b18:	d003      	beq.n	8001b22 <HAL_DCMI_Init+0x16a>
 8001b1a:	21c2      	movs	r1, #194	; 0xc2
 8001b1c:	4835      	ldr	r0, [pc, #212]	; (8001bf4 <HAL_DCMI_Init+0x23c>)
 8001b1e:	f7ff fae6 	bl	80010ee <assert_failed>
    /* Init the low level hardware */
    hdcmi->MspInitCallback(hdcmi);
  }

#else
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_DCMI_Init+0x17c>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fde4 	bl	80006fc <HAL_DCMI_MspInit>
  }
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_DCMI_Init+0x240>)
 8001b48:	400b      	ands	r3, r1
 8001b4a:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b60:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b6c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b78:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001b84:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001b90:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d112      	bne.n	8001bc8 <HAL_DCMI_Init+0x210>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7f1b      	ldrb	r3, [r3, #28]
 8001ba6:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7f5b      	ldrb	r3, [r3, #29]
 8001bac:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001bae:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7f9b      	ldrb	r3, [r3, #30]
 8001bb4:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001bb6:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7fdb      	ldrb	r3, [r3, #31]
 8001bbe:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001bc4:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001bc6:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 021e 	orr.w	r2, r2, #30
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	48020000 	.word	0x48020000
 8001bf4:	0800fc58 	.word	0x0800fc58
 8001bf8:	ffe0f007 	.word	0xffe0f007

08001bfc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d016      	beq.n	8001c44 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f043 0202 	orr.w	r2, r3, #2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	4a31      	ldr	r2, [pc, #196]	; (8001cfc <HAL_DCMI_IRQHandler+0x100>)
 8001c38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fc8e 	bl	8002560 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2204      	movs	r2, #4
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6e:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <HAL_DCMI_IRQHandler+0x100>)
 8001c70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fc72 	bl	8002560 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	615a      	str	r2, [r3, #20]

    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f840 	bl	8001d14 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	615a      	str	r2, [r3, #20]

    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f83e 	bl	8001d28 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01d      	beq.n	8001cf2 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d107      	bne.n	8001cd4 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 021e 	bic.w	r2, r2, #30
 8001cd2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	615a      	str	r2, [r3, #20]

    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f825 	bl	8001d3c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	08001d51 	.word	0x08001d51

08001d00 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	60fb      	str	r3, [r7, #12]

  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d009      	beq.n	8001d7c <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff ffbf 	bl	8001d00 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fc5e 	bl	8001654 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e3d8      	b.n	8002556 <HAL_DMA_Init+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a96      	ldr	r2, [pc, #600]	; (8002004 <HAL_DMA_Init+0x278>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d076      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a95      	ldr	r2, [pc, #596]	; (8002008 <HAL_DMA_Init+0x27c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d071      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a93      	ldr	r2, [pc, #588]	; (800200c <HAL_DMA_Init+0x280>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d06c      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a92      	ldr	r2, [pc, #584]	; (8002010 <HAL_DMA_Init+0x284>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d067      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a90      	ldr	r2, [pc, #576]	; (8002014 <HAL_DMA_Init+0x288>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d062      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a8f      	ldr	r2, [pc, #572]	; (8002018 <HAL_DMA_Init+0x28c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d05d      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a8d      	ldr	r2, [pc, #564]	; (800201c <HAL_DMA_Init+0x290>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d058      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8c      	ldr	r2, [pc, #560]	; (8002020 <HAL_DMA_Init+0x294>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d053      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a8a      	ldr	r2, [pc, #552]	; (8002024 <HAL_DMA_Init+0x298>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d04e      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a89      	ldr	r2, [pc, #548]	; (8002028 <HAL_DMA_Init+0x29c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d049      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a87      	ldr	r2, [pc, #540]	; (800202c <HAL_DMA_Init+0x2a0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d044      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a86      	ldr	r2, [pc, #536]	; (8002030 <HAL_DMA_Init+0x2a4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d03f      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a84      	ldr	r2, [pc, #528]	; (8002034 <HAL_DMA_Init+0x2a8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d03a      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a83      	ldr	r2, [pc, #524]	; (8002038 <HAL_DMA_Init+0x2ac>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d035      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a81      	ldr	r2, [pc, #516]	; (800203c <HAL_DMA_Init+0x2b0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d030      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a80      	ldr	r2, [pc, #512]	; (8002040 <HAL_DMA_Init+0x2b4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d02b      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a7e      	ldr	r2, [pc, #504]	; (8002044 <HAL_DMA_Init+0x2b8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d026      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7d      	ldr	r2, [pc, #500]	; (8002048 <HAL_DMA_Init+0x2bc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d021      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a7b      	ldr	r2, [pc, #492]	; (800204c <HAL_DMA_Init+0x2c0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01c      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_DMA_Init+0x2c4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d017      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a78      	ldr	r2, [pc, #480]	; (8002054 <HAL_DMA_Init+0x2c8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d012      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a77      	ldr	r2, [pc, #476]	; (8002058 <HAL_DMA_Init+0x2cc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00d      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a75      	ldr	r2, [pc, #468]	; (800205c <HAL_DMA_Init+0x2d0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d008      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a74      	ldr	r2, [pc, #464]	; (8002060 <HAL_DMA_Init+0x2d4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <HAL_DMA_Init+0x110>
 8001e94:	21d4      	movs	r1, #212	; 0xd4
 8001e96:	4873      	ldr	r0, [pc, #460]	; (8002064 <HAL_DMA_Init+0x2d8>)
 8001e98:	f7ff f929 	bl	80010ee <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_DMA_Init+0x130>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d007      	beq.n	8001ebc <HAL_DMA_Init+0x130>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d003      	beq.n	8001ebc <HAL_DMA_Init+0x130>
 8001eb4:	21d5      	movs	r1, #213	; 0xd5
 8001eb6:	486b      	ldr	r0, [pc, #428]	; (8002064 <HAL_DMA_Init+0x2d8>)
 8001eb8:	f7ff f919 	bl	80010ee <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec4:	d007      	beq.n	8001ed6 <HAL_DMA_Init+0x14a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_DMA_Init+0x14a>
 8001ece:	21d6      	movs	r1, #214	; 0xd6
 8001ed0:	4864      	ldr	r0, [pc, #400]	; (8002064 <HAL_DMA_Init+0x2d8>)
 8001ed2:	f7ff f90c 	bl	80010ee <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d007      	beq.n	8001ef0 <HAL_DMA_Init+0x164>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_DMA_Init+0x164>
 8001ee8:	21d7      	movs	r1, #215	; 0xd7
 8001eea:	485e      	ldr	r0, [pc, #376]	; (8002064 <HAL_DMA_Init+0x2d8>)
 8001eec:	f7ff f8ff 	bl	80010ee <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_DMA_Init+0x188>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f00:	d008      	beq.n	8001f14 <HAL_DMA_Init+0x188>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0a:	d003      	beq.n	8001f14 <HAL_DMA_Init+0x188>
 8001f0c:	21d8      	movs	r1, #216	; 0xd8
 8001f0e:	4855      	ldr	r0, [pc, #340]	; (8002064 <HAL_DMA_Init+0x2d8>)
 8001f10:	f7ff f8ed 	bl	80010ee <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00d      	beq.n	8001f38 <HAL_DMA_Init+0x1ac>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f24:	d008      	beq.n	8001f38 <HAL_DMA_Init+0x1ac>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f2e:	d003      	beq.n	8001f38 <HAL_DMA_Init+0x1ac>
 8001f30:	21d9      	movs	r1, #217	; 0xd9
 8001f32:	484c      	ldr	r0, [pc, #304]	; (8002064 <HAL_DMA_Init+0x2d8>)
 8001f34:	f7ff f8db 	bl	80010ee <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d016      	beq.n	8001f6e <HAL_DMA_Init+0x1e2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f48:	d011      	beq.n	8001f6e <HAL_DMA_Init+0x1e2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d00d      	beq.n	8001f6e <HAL_DMA_Init+0x1e2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f5a:	d008      	beq.n	8001f6e <HAL_DMA_Init+0x1e2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f64:	d003      	beq.n	8001f6e <HAL_DMA_Init+0x1e2>
 8001f66:	21da      	movs	r1, #218	; 0xda
 8001f68:	483e      	ldr	r0, [pc, #248]	; (8002064 <HAL_DMA_Init+0x2d8>)
 8001f6a:	f7ff f8c0 	bl	80010ee <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d012      	beq.n	8001f9c <HAL_DMA_Init+0x210>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7e:	d00d      	beq.n	8001f9c <HAL_DMA_Init+0x210>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f88:	d008      	beq.n	8001f9c <HAL_DMA_Init+0x210>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_Init+0x210>
 8001f94:	21db      	movs	r1, #219	; 0xdb
 8001f96:	4833      	ldr	r0, [pc, #204]	; (8002064 <HAL_DMA_Init+0x2d8>)
 8001f98:	f7ff f8a9 	bl	80010ee <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_DMA_Init+0x278>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d07e      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_DMA_Init+0x27c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d079      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a15      	ldr	r2, [pc, #84]	; (800200c <HAL_DMA_Init+0x280>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d074      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_DMA_Init+0x284>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d06f      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <HAL_DMA_Init+0x288>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d06a      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_DMA_Init+0x28c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d065      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_DMA_Init+0x290>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d060      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_DMA_Init+0x294>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d05b      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <HAL_DMA_Init+0x298>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d056      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <HAL_DMA_Init+0x29c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d051      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8002000:	e032      	b.n	8002068 <HAL_DMA_Init+0x2dc>
 8002002:	bf00      	nop
 8002004:	40020010 	.word	0x40020010
 8002008:	40020028 	.word	0x40020028
 800200c:	40020040 	.word	0x40020040
 8002010:	40020058 	.word	0x40020058
 8002014:	40020070 	.word	0x40020070
 8002018:	40020088 	.word	0x40020088
 800201c:	400200a0 	.word	0x400200a0
 8002020:	400200b8 	.word	0x400200b8
 8002024:	40020410 	.word	0x40020410
 8002028:	40020428 	.word	0x40020428
 800202c:	40020440 	.word	0x40020440
 8002030:	40020458 	.word	0x40020458
 8002034:	40020470 	.word	0x40020470
 8002038:	40020488 	.word	0x40020488
 800203c:	400204a0 	.word	0x400204a0
 8002040:	400204b8 	.word	0x400204b8
 8002044:	58025408 	.word	0x58025408
 8002048:	5802541c 	.word	0x5802541c
 800204c:	58025430 	.word	0x58025430
 8002050:	58025444 	.word	0x58025444
 8002054:	58025458 	.word	0x58025458
 8002058:	5802546c 	.word	0x5802546c
 800205c:	58025480 	.word	0x58025480
 8002060:	58025494 	.word	0x58025494
 8002064:	0800fc94 	.word	0x0800fc94
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a7a      	ldr	r2, [pc, #488]	; (8002258 <HAL_DMA_Init+0x4cc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d018      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a79      	ldr	r2, [pc, #484]	; (800225c <HAL_DMA_Init+0x4d0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a77      	ldr	r2, [pc, #476]	; (8002260 <HAL_DMA_Init+0x4d4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00e      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a76      	ldr	r2, [pc, #472]	; (8002264 <HAL_DMA_Init+0x4d8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a74      	ldr	r2, [pc, #464]	; (8002268 <HAL_DMA_Init+0x4dc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_DMA_Init+0x318>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a73      	ldr	r2, [pc, #460]	; (800226c <HAL_DMA_Init+0x4e0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_DMA_Init+0x31c>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_DMA_Init+0x31e>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8167 	beq.w	800237e <HAL_DMA_Init+0x5f2>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b73      	cmp	r3, #115	; 0x73
 80020b6:	d903      	bls.n	80020c0 <HAL_DMA_Init+0x334>
 80020b8:	21df      	movs	r1, #223	; 0xdf
 80020ba:	486d      	ldr	r0, [pc, #436]	; (8002270 <HAL_DMA_Init+0x4e4>)
 80020bc:	f7ff f817 	bl	80010ee <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_DMA_Init+0x34c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d003      	beq.n	80020d8 <HAL_DMA_Init+0x34c>
 80020d0:	21e0      	movs	r1, #224	; 0xe0
 80020d2:	4867      	ldr	r0, [pc, #412]	; (8002270 <HAL_DMA_Init+0x4e4>)
 80020d4:	f7ff f80b 	bl	80010ee <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d041      	beq.n	8002164 <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00f      	beq.n	8002108 <HAL_DMA_Init+0x37c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d00b      	beq.n	8002108 <HAL_DMA_Init+0x37c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d007      	beq.n	8002108 <HAL_DMA_Init+0x37c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d003      	beq.n	8002108 <HAL_DMA_Init+0x37c>
 8002100:	21e5      	movs	r1, #229	; 0xe5
 8002102:	485b      	ldr	r0, [pc, #364]	; (8002270 <HAL_DMA_Init+0x4e4>)
 8002104:	f7fe fff3 	bl	80010ee <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d012      	beq.n	8002136 <HAL_DMA_Init+0x3aa>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002118:	d00d      	beq.n	8002136 <HAL_DMA_Init+0x3aa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002122:	d008      	beq.n	8002136 <HAL_DMA_Init+0x3aa>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800212c:	d003      	beq.n	8002136 <HAL_DMA_Init+0x3aa>
 800212e:	21e6      	movs	r1, #230	; 0xe6
 8002130:	484f      	ldr	r0, [pc, #316]	; (8002270 <HAL_DMA_Init+0x4e4>)
 8002132:	f7fe ffdc 	bl	80010ee <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <HAL_DMA_Init+0x3d8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002146:	d00d      	beq.n	8002164 <HAL_DMA_Init+0x3d8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002150:	d008      	beq.n	8002164 <HAL_DMA_Init+0x3d8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800215a:	d003      	beq.n	8002164 <HAL_DMA_Init+0x3d8>
 800215c:	21e7      	movs	r1, #231	; 0xe7
 800215e:	4844      	ldr	r0, [pc, #272]	; (8002270 <HAL_DMA_Init+0x4e4>)
 8002160:	f7fe ffc5 	bl	80010ee <assert_failed>
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a3e      	ldr	r2, [pc, #248]	; (8002274 <HAL_DMA_Init+0x4e8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d04a      	beq.n	8002214 <HAL_DMA_Init+0x488>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a3d      	ldr	r2, [pc, #244]	; (8002278 <HAL_DMA_Init+0x4ec>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d045      	beq.n	8002214 <HAL_DMA_Init+0x488>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3b      	ldr	r2, [pc, #236]	; (800227c <HAL_DMA_Init+0x4f0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d040      	beq.n	8002214 <HAL_DMA_Init+0x488>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <HAL_DMA_Init+0x4f4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d03b      	beq.n	8002214 <HAL_DMA_Init+0x488>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a38      	ldr	r2, [pc, #224]	; (8002284 <HAL_DMA_Init+0x4f8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d036      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a37      	ldr	r2, [pc, #220]	; (8002288 <HAL_DMA_Init+0x4fc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d031      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a35      	ldr	r2, [pc, #212]	; (800228c <HAL_DMA_Init+0x500>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02c      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a34      	ldr	r2, [pc, #208]	; (8002290 <HAL_DMA_Init+0x504>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d027      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a32      	ldr	r2, [pc, #200]	; (8002294 <HAL_DMA_Init+0x508>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d022      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a31      	ldr	r2, [pc, #196]	; (8002298 <HAL_DMA_Init+0x50c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01d      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_DMA_Init+0x4cc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d018      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_DMA_Init+0x4d0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_DMA_Init+0x4d4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00e      	beq.n	8002214 <HAL_DMA_Init+0x488>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_DMA_Init+0x4d8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_DMA_Init+0x488>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_DMA_Init+0x4dc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_DMA_Init+0x488>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_DMA_Init+0x4e0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d108      	bne.n	8002226 <HAL_DMA_Init+0x49a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e007      	b.n	8002236 <HAL_DMA_Init+0x4aa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002236:	e031      	b.n	800229c <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002238:	f7ff fa0c 	bl	8001654 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d92a      	bls.n	800229c <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e17e      	b.n	8002556 <HAL_DMA_Init+0x7ca>
 8002258:	40020440 	.word	0x40020440
 800225c:	40020458 	.word	0x40020458
 8002260:	40020470 	.word	0x40020470
 8002264:	40020488 	.word	0x40020488
 8002268:	400204a0 	.word	0x400204a0
 800226c:	400204b8 	.word	0x400204b8
 8002270:	0800fc94 	.word	0x0800fc94
 8002274:	40020010 	.word	0x40020010
 8002278:	40020028 	.word	0x40020028
 800227c:	40020040 	.word	0x40020040
 8002280:	40020058 	.word	0x40020058
 8002284:	40020070 	.word	0x40020070
 8002288:	40020088 	.word	0x40020088
 800228c:	400200a0 	.word	0x400200a0
 8002290:	400200b8 	.word	0x400200b8
 8002294:	40020410 	.word	0x40020410
 8002298:	40020428 	.word	0x40020428
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1c6      	bne.n	8002238 <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4b92      	ldr	r3, [pc, #584]	; (8002500 <HAL_DMA_Init+0x774>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80022c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d107      	bne.n	8002300 <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4313      	orrs	r3, r2
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f023 0307 	bic.w	r3, r3, #7
 8002316:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b04      	cmp	r3, #4
 8002328:	d117      	bne.n	800235a <HAL_DMA_Init+0x5ce>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <HAL_DMA_Init+0x5ce>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f001 fa81 	bl	8003844 <DMA_CheckFifoParam>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_DMA_Init+0x5ce>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2240      	movs	r2, #64	; 0x40
 800234c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0fd      	b.n	8002556 <HAL_DMA_Init+0x7ca>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f001 f9bc 	bl	80036e0 <DMA_CalcBaseAndBitshift>
 8002368:	4603      	mov	r3, r0
 800236a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	223f      	movs	r2, #63	; 0x3f
 8002376:	409a      	lsls	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e095      	b.n	80024aa <HAL_DMA_Init+0x71e>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a60      	ldr	r2, [pc, #384]	; (8002504 <HAL_DMA_Init+0x778>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_Init+0x642>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5e      	ldr	r2, [pc, #376]	; (8002508 <HAL_DMA_Init+0x77c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_Init+0x642>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5d      	ldr	r2, [pc, #372]	; (800250c <HAL_DMA_Init+0x780>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_Init+0x642>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a5b      	ldr	r2, [pc, #364]	; (8002510 <HAL_DMA_Init+0x784>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_Init+0x642>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a5a      	ldr	r2, [pc, #360]	; (8002514 <HAL_DMA_Init+0x788>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_Init+0x642>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_DMA_Init+0x78c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_Init+0x642>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_DMA_Init+0x790>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_Init+0x642>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a55      	ldr	r2, [pc, #340]	; (8002520 <HAL_DMA_Init+0x794>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_DMA_Init+0x646>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_DMA_Init+0x648>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d05f      	beq.n	8002498 <HAL_DMA_Init+0x70c>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b11      	cmp	r3, #17
 80023de:	d904      	bls.n	80023ea <HAL_DMA_Init+0x65e>
 80023e0:	f240 1149 	movw	r1, #329	; 0x149
 80023e4:	484f      	ldr	r0, [pc, #316]	; (8002524 <HAL_DMA_Init+0x798>)
 80023e6:	f7fe fe82 	bl	80010ee <assert_failed>

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4b48      	ldr	r3, [pc, #288]	; (8002528 <HAL_DMA_Init+0x79c>)
 8002406:	4013      	ands	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b40      	cmp	r3, #64	; 0x40
 8002410:	d008      	beq.n	8002424 <HAL_DMA_Init+0x698>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b80      	cmp	r3, #128	; 0x80
 8002418:	d102      	bne.n	8002420 <HAL_DMA_Init+0x694>
 800241a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800241e:	e002      	b.n	8002426 <HAL_DMA_Init+0x69a>
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_DMA_Init+0x69a>
 8002424:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68d2      	ldr	r2, [r2, #12]
 800242a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 800242c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8002434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 800243c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8002444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 800244c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8002454:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_DMA_Init+0x7a0>)
 800246c:	4413      	add	r3, r2
 800246e:	4a30      	ldr	r2, [pc, #192]	; (8002530 <HAL_DMA_Init+0x7a4>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f001 f92f 	bl	80036e0 <DMA_CalcBaseAndBitshift>
 8002482:	4603      	mov	r3, r0
 8002484:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2201      	movs	r2, #1
 8002490:	409a      	lsls	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	e008      	b.n	80024aa <HAL_DMA_Init+0x71e>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e055      	b.n	8002556 <HAL_DMA_Init+0x7ca>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f001 fa46 	bl	800393c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b80      	cmp	r3, #128	; 0x80
 80024b6:	d102      	bne.n	80024be <HAL_DMA_Init+0x732>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024d2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02b      	beq.n	8002534 <HAL_DMA_Init+0x7a8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d827      	bhi.n	8002534 <HAL_DMA_Init+0x7a8>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f001 fac3 	bl	8003a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	e023      	b.n	8002546 <HAL_DMA_Init+0x7ba>
 80024fe:	bf00      	nop
 8002500:	fe10803f 	.word	0xfe10803f
 8002504:	58025408 	.word	0x58025408
 8002508:	5802541c 	.word	0x5802541c
 800250c:	58025430 	.word	0x58025430
 8002510:	58025444 	.word	0x58025444
 8002514:	58025458 	.word	0x58025458
 8002518:	5802546c 	.word	0x5802546c
 800251c:	58025480 	.word	0x58025480
 8002520:	58025494 	.word	0x58025494
 8002524:	0800fc94 	.word	0x0800fc94
 8002528:	fffe000f 	.word	0xfffe000f
 800252c:	a7fdabf8 	.word	0xa7fdabf8
 8002530:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e188      	b.n	8002884 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d004      	beq.n	8002588 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e17d      	b.n	8002884 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a8c      	ldr	r2, [pc, #560]	; (80027c0 <HAL_DMA_Abort_IT+0x260>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d04a      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a8b      	ldr	r2, [pc, #556]	; (80027c4 <HAL_DMA_Abort_IT+0x264>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d045      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a89      	ldr	r2, [pc, #548]	; (80027c8 <HAL_DMA_Abort_IT+0x268>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d040      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a88      	ldr	r2, [pc, #544]	; (80027cc <HAL_DMA_Abort_IT+0x26c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d03b      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a86      	ldr	r2, [pc, #536]	; (80027d0 <HAL_DMA_Abort_IT+0x270>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d036      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a85      	ldr	r2, [pc, #532]	; (80027d4 <HAL_DMA_Abort_IT+0x274>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d031      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a83      	ldr	r2, [pc, #524]	; (80027d8 <HAL_DMA_Abort_IT+0x278>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d02c      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a82      	ldr	r2, [pc, #520]	; (80027dc <HAL_DMA_Abort_IT+0x27c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d027      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a80      	ldr	r2, [pc, #512]	; (80027e0 <HAL_DMA_Abort_IT+0x280>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d022      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a7f      	ldr	r2, [pc, #508]	; (80027e4 <HAL_DMA_Abort_IT+0x284>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d01d      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7d      	ldr	r2, [pc, #500]	; (80027e8 <HAL_DMA_Abort_IT+0x288>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d018      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7c      	ldr	r2, [pc, #496]	; (80027ec <HAL_DMA_Abort_IT+0x28c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d013      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a7a      	ldr	r2, [pc, #488]	; (80027f0 <HAL_DMA_Abort_IT+0x290>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00e      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a79      	ldr	r2, [pc, #484]	; (80027f4 <HAL_DMA_Abort_IT+0x294>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a77      	ldr	r2, [pc, #476]	; (80027f8 <HAL_DMA_Abort_IT+0x298>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_DMA_Abort_IT+0xc8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a76      	ldr	r2, [pc, #472]	; (80027fc <HAL_DMA_Abort_IT+0x29c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_DMA_Abort_IT+0xcc>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_DMA_Abort_IT+0xce>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d065      	beq.n	80026fe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a60      	ldr	r2, [pc, #384]	; (80027c0 <HAL_DMA_Abort_IT+0x260>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d04a      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5e      	ldr	r2, [pc, #376]	; (80027c4 <HAL_DMA_Abort_IT+0x264>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d045      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_DMA_Abort_IT+0x268>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d040      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5b      	ldr	r2, [pc, #364]	; (80027cc <HAL_DMA_Abort_IT+0x26c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d03b      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <HAL_DMA_Abort_IT+0x270>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d036      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_DMA_Abort_IT+0x274>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d031      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_DMA_Abort_IT+0x278>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d02c      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a55      	ldr	r2, [pc, #340]	; (80027dc <HAL_DMA_Abort_IT+0x27c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d027      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a54      	ldr	r2, [pc, #336]	; (80027e0 <HAL_DMA_Abort_IT+0x280>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d022      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_DMA_Abort_IT+0x284>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01d      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a51      	ldr	r2, [pc, #324]	; (80027e8 <HAL_DMA_Abort_IT+0x288>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d018      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <HAL_DMA_Abort_IT+0x28c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a4e      	ldr	r2, [pc, #312]	; (80027f0 <HAL_DMA_Abort_IT+0x290>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00e      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a4c      	ldr	r2, [pc, #304]	; (80027f4 <HAL_DMA_Abort_IT+0x294>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a4b      	ldr	r2, [pc, #300]	; (80027f8 <HAL_DMA_Abort_IT+0x298>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d004      	beq.n	80026da <HAL_DMA_Abort_IT+0x17a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a49      	ldr	r2, [pc, #292]	; (80027fc <HAL_DMA_Abort_IT+0x29c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d108      	bne.n	80026ec <HAL_DMA_Abort_IT+0x18c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e0ca      	b.n	8002882 <HAL_DMA_Abort_IT+0x322>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e0c1      	b.n	8002882 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 020e 	bic.w	r2, r2, #14
 800270c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <HAL_DMA_Abort_IT+0x260>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04a      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <HAL_DMA_Abort_IT+0x264>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d045      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <HAL_DMA_Abort_IT+0x268>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d040      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a26      	ldr	r2, [pc, #152]	; (80027cc <HAL_DMA_Abort_IT+0x26c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d03b      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <HAL_DMA_Abort_IT+0x270>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d036      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_DMA_Abort_IT+0x274>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_DMA_Abort_IT+0x278>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d02c      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_DMA_Abort_IT+0x27c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d027      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_DMA_Abort_IT+0x280>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_DMA_Abort_IT+0x284>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_DMA_Abort_IT+0x288>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d018      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <HAL_DMA_Abort_IT+0x28c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_DMA_Abort_IT+0x290>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_DMA_Abort_IT+0x294>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_DMA_Abort_IT+0x298>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_DMA_Abort_IT+0x24e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <HAL_DMA_Abort_IT+0x29c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d128      	bne.n	8002800 <HAL_DMA_Abort_IT+0x2a0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e027      	b.n	8002810 <HAL_DMA_Abort_IT+0x2b0>
 80027c0:	40020010 	.word	0x40020010
 80027c4:	40020028 	.word	0x40020028
 80027c8:	40020040 	.word	0x40020040
 80027cc:	40020058 	.word	0x40020058
 80027d0:	40020070 	.word	0x40020070
 80027d4:	40020088 	.word	0x40020088
 80027d8:	400200a0 	.word	0x400200a0
 80027dc:	400200b8 	.word	0x400200b8
 80027e0:	40020410 	.word	0x40020410
 80027e4:	40020428 	.word	0x40020428
 80027e8:	40020440 	.word	0x40020440
 80027ec:	40020458 	.word	0x40020458
 80027f0:	40020470 	.word	0x40020470
 80027f4:	40020488 	.word	0x40020488
 80027f8:	400204a0 	.word	0x400204a0
 80027fc:	400204b8 	.word	0x400204b8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800281e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2201      	movs	r2, #1
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800283e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002856:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002860:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002898:	4b67      	ldr	r3, [pc, #412]	; (8002a38 <HAL_DMA_IRQHandler+0x1ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <HAL_DMA_IRQHandler+0x1b0>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	0a9b      	lsrs	r3, r3, #10
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a5f      	ldr	r2, [pc, #380]	; (8002a40 <HAL_DMA_IRQHandler+0x1b4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04a      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <HAL_DMA_IRQHandler+0x1b8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d045      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a5c      	ldr	r2, [pc, #368]	; (8002a48 <HAL_DMA_IRQHandler+0x1bc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d040      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a5a      	ldr	r2, [pc, #360]	; (8002a4c <HAL_DMA_IRQHandler+0x1c0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d03b      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a59      	ldr	r2, [pc, #356]	; (8002a50 <HAL_DMA_IRQHandler+0x1c4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d036      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a57      	ldr	r2, [pc, #348]	; (8002a54 <HAL_DMA_IRQHandler+0x1c8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a56      	ldr	r2, [pc, #344]	; (8002a58 <HAL_DMA_IRQHandler+0x1cc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d02c      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <HAL_DMA_IRQHandler+0x1d0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d027      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a53      	ldr	r2, [pc, #332]	; (8002a60 <HAL_DMA_IRQHandler+0x1d4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a51      	ldr	r2, [pc, #324]	; (8002a64 <HAL_DMA_IRQHandler+0x1d8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01d      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a50      	ldr	r2, [pc, #320]	; (8002a68 <HAL_DMA_IRQHandler+0x1dc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d018      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a4e      	ldr	r2, [pc, #312]	; (8002a6c <HAL_DMA_IRQHandler+0x1e0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_DMA_IRQHandler+0x1e4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <HAL_DMA_IRQHandler+0x1e8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4a      	ldr	r2, [pc, #296]	; (8002a78 <HAL_DMA_IRQHandler+0x1ec>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_DMA_IRQHandler+0xd2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <HAL_DMA_IRQHandler+0x1f0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_DMA_IRQHandler+0xd6>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_DMA_IRQHandler+0xd8>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 842b 	beq.w	80031c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2208      	movs	r2, #8
 8002974:	409a      	lsls	r2, r3
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80a2 	beq.w	8002ac4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <HAL_DMA_IRQHandler+0x1b4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d04a      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <HAL_DMA_IRQHandler+0x1b8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d045      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <HAL_DMA_IRQHandler+0x1bc>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d040      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_DMA_IRQHandler+0x1c0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d03b      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <HAL_DMA_IRQHandler+0x1c4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d036      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_DMA_IRQHandler+0x1c8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d031      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_DMA_IRQHandler+0x1cc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02c      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_DMA_IRQHandler+0x1d0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d027      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <HAL_DMA_IRQHandler+0x1d4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d022      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <HAL_DMA_IRQHandler+0x1d8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d01d      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_DMA_IRQHandler+0x1dc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d018      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <HAL_DMA_IRQHandler+0x1e0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <HAL_DMA_IRQHandler+0x1e4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00e      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <HAL_DMA_IRQHandler+0x1e8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <HAL_DMA_IRQHandler+0x1ec>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x194>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <HAL_DMA_IRQHandler+0x1f0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d12f      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x1f4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf14      	ite	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	2300      	moveq	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	e02e      	b.n	8002a94 <HAL_DMA_IRQHandler+0x208>
 8002a36:	bf00      	nop
 8002a38:	24000000 	.word	0x24000000
 8002a3c:	1b4e81b5 	.word	0x1b4e81b5
 8002a40:	40020010 	.word	0x40020010
 8002a44:	40020028 	.word	0x40020028
 8002a48:	40020040 	.word	0x40020040
 8002a4c:	40020058 	.word	0x40020058
 8002a50:	40020070 	.word	0x40020070
 8002a54:	40020088 	.word	0x40020088
 8002a58:	400200a0 	.word	0x400200a0
 8002a5c:	400200b8 	.word	0x400200b8
 8002a60:	40020410 	.word	0x40020410
 8002a64:	40020428 	.word	0x40020428
 8002a68:	40020440 	.word	0x40020440
 8002a6c:	40020458 	.word	0x40020458
 8002a70:	40020470 	.word	0x40020470
 8002a74:	40020488 	.word	0x40020488
 8002a78:	400204a0 	.word	0x400204a0
 8002a7c:	400204b8 	.word	0x400204b8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d06e      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a69      	ldr	r2, [pc, #420]	; (8002c84 <HAL_DMA_IRQHandler+0x3f8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d04a      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a67      	ldr	r2, [pc, #412]	; (8002c88 <HAL_DMA_IRQHandler+0x3fc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d045      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <HAL_DMA_IRQHandler+0x400>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d040      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a64      	ldr	r2, [pc, #400]	; (8002c90 <HAL_DMA_IRQHandler+0x404>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d03b      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a63      	ldr	r2, [pc, #396]	; (8002c94 <HAL_DMA_IRQHandler+0x408>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d036      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a61      	ldr	r2, [pc, #388]	; (8002c98 <HAL_DMA_IRQHandler+0x40c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d031      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a60      	ldr	r2, [pc, #384]	; (8002c9c <HAL_DMA_IRQHandler+0x410>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d02c      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5e      	ldr	r2, [pc, #376]	; (8002ca0 <HAL_DMA_IRQHandler+0x414>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d027      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ca4 <HAL_DMA_IRQHandler+0x418>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_DMA_IRQHandler+0x41c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01d      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5a      	ldr	r2, [pc, #360]	; (8002cac <HAL_DMA_IRQHandler+0x420>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d018      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_DMA_IRQHandler+0x424>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_DMA_IRQHandler+0x428>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a55      	ldr	r2, [pc, #340]	; (8002cb8 <HAL_DMA_IRQHandler+0x42c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a54      	ldr	r2, [pc, #336]	; (8002cbc <HAL_DMA_IRQHandler+0x430>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2ee>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <HAL_DMA_IRQHandler+0x434>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10a      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x304>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	e003      	b.n	8002b98 <HAL_DMA_IRQHandler+0x30c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f043 0202 	orr.w	r2, r3, #2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 808f 	beq.w	8002cec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2c      	ldr	r2, [pc, #176]	; (8002c84 <HAL_DMA_IRQHandler+0x3f8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d04a      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <HAL_DMA_IRQHandler+0x3fc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d045      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <HAL_DMA_IRQHandler+0x400>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d040      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <HAL_DMA_IRQHandler+0x404>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d03b      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_DMA_IRQHandler+0x408>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d036      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <HAL_DMA_IRQHandler+0x40c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d031      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <HAL_DMA_IRQHandler+0x410>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d02c      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <HAL_DMA_IRQHandler+0x414>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d027      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_DMA_IRQHandler+0x418>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <HAL_DMA_IRQHandler+0x41c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01d      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <HAL_DMA_IRQHandler+0x420>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d018      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <HAL_DMA_IRQHandler+0x424>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_DMA_IRQHandler+0x428>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_DMA_IRQHandler+0x42c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_DMA_IRQHandler+0x430>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x3e2>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <HAL_DMA_IRQHandler+0x434>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d12a      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x438>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e023      	b.n	8002ccc <HAL_DMA_IRQHandler+0x440>
 8002c84:	40020010 	.word	0x40020010
 8002c88:	40020028 	.word	0x40020028
 8002c8c:	40020040 	.word	0x40020040
 8002c90:	40020058 	.word	0x40020058
 8002c94:	40020070 	.word	0x40020070
 8002c98:	40020088 	.word	0x40020088
 8002c9c:	400200a0 	.word	0x400200a0
 8002ca0:	400200b8 	.word	0x400200b8
 8002ca4:	40020410 	.word	0x40020410
 8002ca8:	40020428 	.word	0x40020428
 8002cac:	40020440 	.word	0x40020440
 8002cb0:	40020458 	.word	0x40020458
 8002cb4:	40020470 	.word	0x40020470
 8002cb8:	40020488 	.word	0x40020488
 8002cbc:	400204a0 	.word	0x400204a0
 8002cc0:	400204b8 	.word	0x400204b8
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2204      	movs	r2, #4
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a6 	beq.w	8002e4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a85      	ldr	r2, [pc, #532]	; (8002f1c <HAL_DMA_IRQHandler+0x690>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d04a      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a83      	ldr	r2, [pc, #524]	; (8002f20 <HAL_DMA_IRQHandler+0x694>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d045      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a82      	ldr	r2, [pc, #520]	; (8002f24 <HAL_DMA_IRQHandler+0x698>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d040      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a80      	ldr	r2, [pc, #512]	; (8002f28 <HAL_DMA_IRQHandler+0x69c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d03b      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7f      	ldr	r2, [pc, #508]	; (8002f2c <HAL_DMA_IRQHandler+0x6a0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d036      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a7d      	ldr	r2, [pc, #500]	; (8002f30 <HAL_DMA_IRQHandler+0x6a4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d031      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7c      	ldr	r2, [pc, #496]	; (8002f34 <HAL_DMA_IRQHandler+0x6a8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d02c      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a7a      	ldr	r2, [pc, #488]	; (8002f38 <HAL_DMA_IRQHandler+0x6ac>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d027      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a79      	ldr	r2, [pc, #484]	; (8002f3c <HAL_DMA_IRQHandler+0x6b0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <HAL_DMA_IRQHandler+0x6b4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01d      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a76      	ldr	r2, [pc, #472]	; (8002f44 <HAL_DMA_IRQHandler+0x6b8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d018      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a74      	ldr	r2, [pc, #464]	; (8002f48 <HAL_DMA_IRQHandler+0x6bc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a73      	ldr	r2, [pc, #460]	; (8002f4c <HAL_DMA_IRQHandler+0x6c0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00e      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a71      	ldr	r2, [pc, #452]	; (8002f50 <HAL_DMA_IRQHandler+0x6c4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a70      	ldr	r2, [pc, #448]	; (8002f54 <HAL_DMA_IRQHandler+0x6c8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x516>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_DMA_IRQHandler+0x6cc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10a      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x52c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e009      	b.n	8002dcc <HAL_DMA_IRQHandler+0x540>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03e      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2210      	movs	r2, #16
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d018      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d108      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d024      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
 8002e0c:	e01f      	b.n	8002e4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01b      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
 8002e1e:	e016      	b.n	8002e4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d107      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0208 	bic.w	r2, r2, #8
 8002e3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	2220      	movs	r2, #32
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8110 	beq.w	8003084 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <HAL_DMA_IRQHandler+0x690>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d04a      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2b      	ldr	r2, [pc, #172]	; (8002f20 <HAL_DMA_IRQHandler+0x694>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d045      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a29      	ldr	r2, [pc, #164]	; (8002f24 <HAL_DMA_IRQHandler+0x698>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d040      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_DMA_IRQHandler+0x69c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d03b      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <HAL_DMA_IRQHandler+0x6a0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d036      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <HAL_DMA_IRQHandler+0x6a4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d031      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_DMA_IRQHandler+0x6a8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02c      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <HAL_DMA_IRQHandler+0x6ac>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d027      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <HAL_DMA_IRQHandler+0x6b0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_DMA_IRQHandler+0x6b4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d01d      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <HAL_DMA_IRQHandler+0x6b8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_DMA_IRQHandler+0x6bc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_DMA_IRQHandler+0x6c0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_DMA_IRQHandler+0x6c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_DMA_IRQHandler+0x6c8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x678>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <HAL_DMA_IRQHandler+0x6cc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d12b      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x6d0>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	e02a      	b.n	8002f70 <HAL_DMA_IRQHandler+0x6e4>
 8002f1a:	bf00      	nop
 8002f1c:	40020010 	.word	0x40020010
 8002f20:	40020028 	.word	0x40020028
 8002f24:	40020040 	.word	0x40020040
 8002f28:	40020058 	.word	0x40020058
 8002f2c:	40020070 	.word	0x40020070
 8002f30:	40020088 	.word	0x40020088
 8002f34:	400200a0 	.word	0x400200a0
 8002f38:	400200b8 	.word	0x400200b8
 8002f3c:	40020410 	.word	0x40020410
 8002f40:	40020428 	.word	0x40020428
 8002f44:	40020440 	.word	0x40020440
 8002f48:	40020458 	.word	0x40020458
 8002f4c:	40020470 	.word	0x40020470
 8002f50:	40020488 	.word	0x40020488
 8002f54:	400204a0 	.word	0x400204a0
 8002f58:	400204b8 	.word	0x400204b8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8087 	beq.w	8003084 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2220      	movs	r2, #32
 8002f80:	409a      	lsls	r2, r3
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d139      	bne.n	8003006 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0216 	bic.w	r2, r2, #22
 8002fa0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_DMA_IRQHandler+0x736>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0208 	bic.w	r2, r2, #8
 8002fd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	223f      	movs	r2, #63	; 0x3f
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 834a 	beq.w	8003690 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4798      	blx	r3
          }
          return;
 8003004:	e344      	b.n	8003690 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d018      	beq.n	8003046 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02c      	beq.n	8003084 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
 8003032:	e027      	b.n	8003084 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d023      	beq.n	8003084 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
 8003044:	e01e      	b.n	8003084 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0210 	bic.w	r2, r2, #16
 8003062:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8306 	beq.w	800369a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8088 	beq.w	80031ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2204      	movs	r2, #4
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7a      	ldr	r2, [pc, #488]	; (8003294 <HAL_DMA_IRQHandler+0xa08>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d04a      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a79      	ldr	r2, [pc, #484]	; (8003298 <HAL_DMA_IRQHandler+0xa0c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d045      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a77      	ldr	r2, [pc, #476]	; (800329c <HAL_DMA_IRQHandler+0xa10>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d040      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a76      	ldr	r2, [pc, #472]	; (80032a0 <HAL_DMA_IRQHandler+0xa14>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d03b      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a74      	ldr	r2, [pc, #464]	; (80032a4 <HAL_DMA_IRQHandler+0xa18>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d036      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a73      	ldr	r2, [pc, #460]	; (80032a8 <HAL_DMA_IRQHandler+0xa1c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d031      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a71      	ldr	r2, [pc, #452]	; (80032ac <HAL_DMA_IRQHandler+0xa20>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02c      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a70      	ldr	r2, [pc, #448]	; (80032b0 <HAL_DMA_IRQHandler+0xa24>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d027      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a6e      	ldr	r2, [pc, #440]	; (80032b4 <HAL_DMA_IRQHandler+0xa28>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d022      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6d      	ldr	r2, [pc, #436]	; (80032b8 <HAL_DMA_IRQHandler+0xa2c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d01d      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6b      	ldr	r2, [pc, #428]	; (80032bc <HAL_DMA_IRQHandler+0xa30>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6a      	ldr	r2, [pc, #424]	; (80032c0 <HAL_DMA_IRQHandler+0xa34>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a68      	ldr	r2, [pc, #416]	; (80032c4 <HAL_DMA_IRQHandler+0xa38>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a67      	ldr	r2, [pc, #412]	; (80032c8 <HAL_DMA_IRQHandler+0xa3c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a65      	ldr	r2, [pc, #404]	; (80032cc <HAL_DMA_IRQHandler+0xa40>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_DMA_IRQHandler+0x8b8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a64      	ldr	r2, [pc, #400]	; (80032d0 <HAL_DMA_IRQHandler+0xa44>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <HAL_DMA_IRQHandler+0x8ca>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e007      	b.n	8003166 <HAL_DMA_IRQHandler+0x8da>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3301      	adds	r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	429a      	cmp	r2, r3
 8003170:	d307      	bcc.n	8003182 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f2      	bne.n	8003166 <HAL_DMA_IRQHandler+0x8da>
 8003180:	e000      	b.n	8003184 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003182:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2203      	movs	r2, #3
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80031a2:	e003      	b.n	80031ac <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8272 	beq.w	800369a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
 80031be:	e26c      	b.n	800369a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a43      	ldr	r2, [pc, #268]	; (80032d4 <HAL_DMA_IRQHandler+0xa48>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d022      	beq.n	8003210 <HAL_DMA_IRQHandler+0x984>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a42      	ldr	r2, [pc, #264]	; (80032d8 <HAL_DMA_IRQHandler+0xa4c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d01d      	beq.n	8003210 <HAL_DMA_IRQHandler+0x984>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a40      	ldr	r2, [pc, #256]	; (80032dc <HAL_DMA_IRQHandler+0xa50>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d018      	beq.n	8003210 <HAL_DMA_IRQHandler+0x984>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <HAL_DMA_IRQHandler+0xa54>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <HAL_DMA_IRQHandler+0x984>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <HAL_DMA_IRQHandler+0xa58>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00e      	beq.n	8003210 <HAL_DMA_IRQHandler+0x984>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a3c      	ldr	r2, [pc, #240]	; (80032e8 <HAL_DMA_IRQHandler+0xa5c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_DMA_IRQHandler+0x984>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3a      	ldr	r2, [pc, #232]	; (80032ec <HAL_DMA_IRQHandler+0xa60>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_DMA_IRQHandler+0x984>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a39      	ldr	r2, [pc, #228]	; (80032f0 <HAL_DMA_IRQHandler+0xa64>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_DMA_IRQHandler+0x988>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_DMA_IRQHandler+0x98a>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 823f 	beq.w	800369a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2204      	movs	r2, #4
 800322e:	409a      	lsls	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80cd 	beq.w	80033d4 <HAL_DMA_IRQHandler+0xb48>
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80c7 	beq.w	80033d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2204      	movs	r2, #4
 8003250:	409a      	lsls	r2, r3
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d049      	beq.n	80032f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8210 	beq.w	8003694 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800327c:	e20a      	b.n	8003694 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8206 	beq.w	8003694 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003290:	e200      	b.n	8003694 <HAL_DMA_IRQHandler+0xe08>
 8003292:	bf00      	nop
 8003294:	40020010 	.word	0x40020010
 8003298:	40020028 	.word	0x40020028
 800329c:	40020040 	.word	0x40020040
 80032a0:	40020058 	.word	0x40020058
 80032a4:	40020070 	.word	0x40020070
 80032a8:	40020088 	.word	0x40020088
 80032ac:	400200a0 	.word	0x400200a0
 80032b0:	400200b8 	.word	0x400200b8
 80032b4:	40020410 	.word	0x40020410
 80032b8:	40020428 	.word	0x40020428
 80032bc:	40020440 	.word	0x40020440
 80032c0:	40020458 	.word	0x40020458
 80032c4:	40020470 	.word	0x40020470
 80032c8:	40020488 	.word	0x40020488
 80032cc:	400204a0 	.word	0x400204a0
 80032d0:	400204b8 	.word	0x400204b8
 80032d4:	58025408 	.word	0x58025408
 80032d8:	5802541c 	.word	0x5802541c
 80032dc:	58025430 	.word	0x58025430
 80032e0:	58025444 	.word	0x58025444
 80032e4:	58025458 	.word	0x58025458
 80032e8:	5802546c 	.word	0x5802546c
 80032ec:	58025480 	.word	0x58025480
 80032f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d160      	bne.n	80033c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a8c      	ldr	r2, [pc, #560]	; (8003534 <HAL_DMA_IRQHandler+0xca8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d04a      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a8a      	ldr	r2, [pc, #552]	; (8003538 <HAL_DMA_IRQHandler+0xcac>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d045      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a89      	ldr	r2, [pc, #548]	; (800353c <HAL_DMA_IRQHandler+0xcb0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d040      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a87      	ldr	r2, [pc, #540]	; (8003540 <HAL_DMA_IRQHandler+0xcb4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d03b      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a86      	ldr	r2, [pc, #536]	; (8003544 <HAL_DMA_IRQHandler+0xcb8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d036      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a84      	ldr	r2, [pc, #528]	; (8003548 <HAL_DMA_IRQHandler+0xcbc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d031      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a83      	ldr	r2, [pc, #524]	; (800354c <HAL_DMA_IRQHandler+0xcc0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d02c      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a81      	ldr	r2, [pc, #516]	; (8003550 <HAL_DMA_IRQHandler+0xcc4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d027      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a80      	ldr	r2, [pc, #512]	; (8003554 <HAL_DMA_IRQHandler+0xcc8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a7e      	ldr	r2, [pc, #504]	; (8003558 <HAL_DMA_IRQHandler+0xccc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01d      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7d      	ldr	r2, [pc, #500]	; (800355c <HAL_DMA_IRQHandler+0xcd0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d018      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a7b      	ldr	r2, [pc, #492]	; (8003560 <HAL_DMA_IRQHandler+0xcd4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7a      	ldr	r2, [pc, #488]	; (8003564 <HAL_DMA_IRQHandler+0xcd8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00e      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a78      	ldr	r2, [pc, #480]	; (8003568 <HAL_DMA_IRQHandler+0xcdc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a77      	ldr	r2, [pc, #476]	; (800356c <HAL_DMA_IRQHandler+0xce0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_DMA_IRQHandler+0xb12>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a75      	ldr	r2, [pc, #468]	; (8003570 <HAL_DMA_IRQHandler+0xce4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d108      	bne.n	80033b0 <HAL_DMA_IRQHandler+0xb24>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0208 	bic.w	r2, r2, #8
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	e007      	b.n	80033c0 <HAL_DMA_IRQHandler+0xb34>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8165 	beq.w	8003694 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033d2:	e15f      	b.n	8003694 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2202      	movs	r2, #2
 80033de:	409a      	lsls	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80c5 	beq.w	8003574 <HAL_DMA_IRQHandler+0xce8>
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80bf 	beq.w	8003574 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2202      	movs	r2, #2
 8003400:	409a      	lsls	r2, r3
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d018      	beq.n	8003442 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 813a 	beq.w	8003698 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800342c:	e134      	b.n	8003698 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8130 	beq.w	8003698 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003440:	e12a      	b.n	8003698 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d168      	bne.n	800351e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a38      	ldr	r2, [pc, #224]	; (8003534 <HAL_DMA_IRQHandler+0xca8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d04a      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a37      	ldr	r2, [pc, #220]	; (8003538 <HAL_DMA_IRQHandler+0xcac>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d045      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a35      	ldr	r2, [pc, #212]	; (800353c <HAL_DMA_IRQHandler+0xcb0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d040      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a34      	ldr	r2, [pc, #208]	; (8003540 <HAL_DMA_IRQHandler+0xcb4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d03b      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a32      	ldr	r2, [pc, #200]	; (8003544 <HAL_DMA_IRQHandler+0xcb8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d036      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a31      	ldr	r2, [pc, #196]	; (8003548 <HAL_DMA_IRQHandler+0xcbc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d031      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2f      	ldr	r2, [pc, #188]	; (800354c <HAL_DMA_IRQHandler+0xcc0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d02c      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2e      	ldr	r2, [pc, #184]	; (8003550 <HAL_DMA_IRQHandler+0xcc4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d027      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <HAL_DMA_IRQHandler+0xcc8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d022      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <HAL_DMA_IRQHandler+0xccc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d01d      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a29      	ldr	r2, [pc, #164]	; (800355c <HAL_DMA_IRQHandler+0xcd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d018      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a28      	ldr	r2, [pc, #160]	; (8003560 <HAL_DMA_IRQHandler+0xcd4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d013      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a26      	ldr	r2, [pc, #152]	; (8003564 <HAL_DMA_IRQHandler+0xcd8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00e      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a25      	ldr	r2, [pc, #148]	; (8003568 <HAL_DMA_IRQHandler+0xcdc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a23      	ldr	r2, [pc, #140]	; (800356c <HAL_DMA_IRQHandler+0xce0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_DMA_IRQHandler+0xc60>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_DMA_IRQHandler+0xce4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <HAL_DMA_IRQHandler+0xc72>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0214 	bic.w	r2, r2, #20
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e007      	b.n	800350e <HAL_DMA_IRQHandler+0xc82>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 020a 	bic.w	r2, r2, #10
 800350c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80b8 	beq.w	8003698 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003530:	e0b2      	b.n	8003698 <HAL_DMA_IRQHandler+0xe0c>
 8003532:	bf00      	nop
 8003534:	40020010 	.word	0x40020010
 8003538:	40020028 	.word	0x40020028
 800353c:	40020040 	.word	0x40020040
 8003540:	40020058 	.word	0x40020058
 8003544:	40020070 	.word	0x40020070
 8003548:	40020088 	.word	0x40020088
 800354c:	400200a0 	.word	0x400200a0
 8003550:	400200b8 	.word	0x400200b8
 8003554:	40020410 	.word	0x40020410
 8003558:	40020428 	.word	0x40020428
 800355c:	40020440 	.word	0x40020440
 8003560:	40020458 	.word	0x40020458
 8003564:	40020470 	.word	0x40020470
 8003568:	40020488 	.word	0x40020488
 800356c:	400204a0 	.word	0x400204a0
 8003570:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2208      	movs	r2, #8
 800357e:	409a      	lsls	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8088 	beq.w	800369a <HAL_DMA_IRQHandler+0xe0e>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8082 	beq.w	800369a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a41      	ldr	r2, [pc, #260]	; (80036a0 <HAL_DMA_IRQHandler+0xe14>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d04a      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3f      	ldr	r2, [pc, #252]	; (80036a4 <HAL_DMA_IRQHandler+0xe18>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d045      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3e      	ldr	r2, [pc, #248]	; (80036a8 <HAL_DMA_IRQHandler+0xe1c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d040      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3c      	ldr	r2, [pc, #240]	; (80036ac <HAL_DMA_IRQHandler+0xe20>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d03b      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3b      	ldr	r2, [pc, #236]	; (80036b0 <HAL_DMA_IRQHandler+0xe24>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d036      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a39      	ldr	r2, [pc, #228]	; (80036b4 <HAL_DMA_IRQHandler+0xe28>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d031      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a38      	ldr	r2, [pc, #224]	; (80036b8 <HAL_DMA_IRQHandler+0xe2c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d02c      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a36      	ldr	r2, [pc, #216]	; (80036bc <HAL_DMA_IRQHandler+0xe30>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d027      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a35      	ldr	r2, [pc, #212]	; (80036c0 <HAL_DMA_IRQHandler+0xe34>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a33      	ldr	r2, [pc, #204]	; (80036c4 <HAL_DMA_IRQHandler+0xe38>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01d      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a32      	ldr	r2, [pc, #200]	; (80036c8 <HAL_DMA_IRQHandler+0xe3c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a30      	ldr	r2, [pc, #192]	; (80036cc <HAL_DMA_IRQHandler+0xe40>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2f      	ldr	r2, [pc, #188]	; (80036d0 <HAL_DMA_IRQHandler+0xe44>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2d      	ldr	r2, [pc, #180]	; (80036d4 <HAL_DMA_IRQHandler+0xe48>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <HAL_DMA_IRQHandler+0xe4c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_DMA_IRQHandler+0xdaa>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <HAL_DMA_IRQHandler+0xe50>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d108      	bne.n	8003648 <HAL_DMA_IRQHandler+0xdbc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 021c 	bic.w	r2, r2, #28
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e007      	b.n	8003658 <HAL_DMA_IRQHandler+0xdcc>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 020e 	bic.w	r2, r2, #14
 8003656:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2201      	movs	r2, #1
 8003662:	409a      	lsls	r2, r3
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
 800368e:	e004      	b.n	800369a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003690:	bf00      	nop
 8003692:	e002      	b.n	800369a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003698:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40020010 	.word	0x40020010
 80036a4:	40020028 	.word	0x40020028
 80036a8:	40020040 	.word	0x40020040
 80036ac:	40020058 	.word	0x40020058
 80036b0:	40020070 	.word	0x40020070
 80036b4:	40020088 	.word	0x40020088
 80036b8:	400200a0 	.word	0x400200a0
 80036bc:	400200b8 	.word	0x400200b8
 80036c0:	40020410 	.word	0x40020410
 80036c4:	40020428 	.word	0x40020428
 80036c8:	40020440 	.word	0x40020440
 80036cc:	40020458 	.word	0x40020458
 80036d0:	40020470 	.word	0x40020470
 80036d4:	40020488 	.word	0x40020488
 80036d8:	400204a0 	.word	0x400204a0
 80036dc:	400204b8 	.word	0x400204b8

080036e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a42      	ldr	r2, [pc, #264]	; (80037f8 <DMA_CalcBaseAndBitshift+0x118>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a41      	ldr	r2, [pc, #260]	; (80037fc <DMA_CalcBaseAndBitshift+0x11c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <DMA_CalcBaseAndBitshift+0x120>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a3e      	ldr	r2, [pc, #248]	; (8003804 <DMA_CalcBaseAndBitshift+0x124>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <DMA_CalcBaseAndBitshift+0x128>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3b      	ldr	r2, [pc, #236]	; (800380c <DMA_CalcBaseAndBitshift+0x12c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a39      	ldr	r2, [pc, #228]	; (8003810 <DMA_CalcBaseAndBitshift+0x130>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a38      	ldr	r2, [pc, #224]	; (8003814 <DMA_CalcBaseAndBitshift+0x134>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a36      	ldr	r2, [pc, #216]	; (8003818 <DMA_CalcBaseAndBitshift+0x138>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a35      	ldr	r2, [pc, #212]	; (800381c <DMA_CalcBaseAndBitshift+0x13c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a33      	ldr	r2, [pc, #204]	; (8003820 <DMA_CalcBaseAndBitshift+0x140>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a32      	ldr	r2, [pc, #200]	; (8003824 <DMA_CalcBaseAndBitshift+0x144>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a30      	ldr	r2, [pc, #192]	; (8003828 <DMA_CalcBaseAndBitshift+0x148>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2f      	ldr	r2, [pc, #188]	; (800382c <DMA_CalcBaseAndBitshift+0x14c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <DMA_CalcBaseAndBitshift+0x150>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <DMA_CalcBaseAndBitshift+0xa8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <DMA_CalcBaseAndBitshift+0x154>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <DMA_CalcBaseAndBitshift+0xac>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <DMA_CalcBaseAndBitshift+0xae>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d024      	beq.n	80037dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	3b10      	subs	r3, #16
 800379a:	4a27      	ldr	r2, [pc, #156]	; (8003838 <DMA_CalcBaseAndBitshift+0x158>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	4a24      	ldr	r2, [pc, #144]	; (800383c <DMA_CalcBaseAndBitshift+0x15c>)
 80037ac:	5cd3      	ldrb	r3, [r2, r3]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d908      	bls.n	80037cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <DMA_CalcBaseAndBitshift+0x160>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	1d1a      	adds	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58
 80037ca:	e00d      	b.n	80037e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <DMA_CalcBaseAndBitshift+0x160>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6593      	str	r3, [r2, #88]	; 0x58
 80037da:	e005      	b.n	80037e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40020010 	.word	0x40020010
 80037fc:	40020028 	.word	0x40020028
 8003800:	40020040 	.word	0x40020040
 8003804:	40020058 	.word	0x40020058
 8003808:	40020070 	.word	0x40020070
 800380c:	40020088 	.word	0x40020088
 8003810:	400200a0 	.word	0x400200a0
 8003814:	400200b8 	.word	0x400200b8
 8003818:	40020410 	.word	0x40020410
 800381c:	40020428 	.word	0x40020428
 8003820:	40020440 	.word	0x40020440
 8003824:	40020458 	.word	0x40020458
 8003828:	40020470 	.word	0x40020470
 800382c:	40020488 	.word	0x40020488
 8003830:	400204a0 	.word	0x400204a0
 8003834:	400204b8 	.word	0x400204b8
 8003838:	aaaaaaab 	.word	0xaaaaaaab
 800383c:	080102d0 	.word	0x080102d0
 8003840:	fffffc00 	.word	0xfffffc00

08003844 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d120      	bne.n	800389a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2b03      	cmp	r3, #3
 800385e:	d858      	bhi.n	8003912 <DMA_CheckFifoParam+0xce>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <DMA_CheckFifoParam+0x24>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003879 	.word	0x08003879
 800386c:	0800388b 	.word	0x0800388b
 8003870:	08003879 	.word	0x08003879
 8003874:	08003913 	.word	0x08003913
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d048      	beq.n	8003916 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003888:	e045      	b.n	8003916 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003892:	d142      	bne.n	800391a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003898:	e03f      	b.n	800391a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a2:	d123      	bne.n	80038ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d838      	bhi.n	800391e <DMA_CheckFifoParam+0xda>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <DMA_CheckFifoParam+0x70>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038cb 	.word	0x080038cb
 80038bc:	080038c5 	.word	0x080038c5
 80038c0:	080038dd 	.word	0x080038dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
        break;
 80038c8:	e030      	b.n	800392c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d025      	beq.n	8003922 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038da:	e022      	b.n	8003922 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e4:	d11f      	bne.n	8003926 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038ea:	e01c      	b.n	8003926 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d902      	bls.n	80038fa <DMA_CheckFifoParam+0xb6>
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d003      	beq.n	8003900 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80038f8:	e018      	b.n	800392c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
        break;
 80038fe:	e015      	b.n	800392c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00e      	beq.n	800392a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
    break;
 8003910:	e00b      	b.n	800392a <DMA_CheckFifoParam+0xe6>
        break;
 8003912:	bf00      	nop
 8003914:	e00a      	b.n	800392c <DMA_CheckFifoParam+0xe8>
        break;
 8003916:	bf00      	nop
 8003918:	e008      	b.n	800392c <DMA_CheckFifoParam+0xe8>
        break;
 800391a:	bf00      	nop
 800391c:	e006      	b.n	800392c <DMA_CheckFifoParam+0xe8>
        break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <DMA_CheckFifoParam+0xe8>
        break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <DMA_CheckFifoParam+0xe8>
        break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <DMA_CheckFifoParam+0xe8>
    break;
 800392a:	bf00      	nop
    }
  }

  return status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop

0800393c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a38      	ldr	r2, [pc, #224]	; (8003a30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a36      	ldr	r2, [pc, #216]	; (8003a34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a33      	ldr	r2, [pc, #204]	; (8003a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a32      	ldr	r2, [pc, #200]	; (8003a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a30      	ldr	r2, [pc, #192]	; (8003a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01a      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3b08      	subs	r3, #8
 80039ac:	4a28      	ldr	r2, [pc, #160]	; (8003a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80039c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	2201      	movs	r2, #1
 80039d2:	409a      	lsls	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80039d8:	e024      	b.n	8003a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	3b10      	subs	r3, #16
 80039e2:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d806      	bhi.n	8003a02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a1b      	ldr	r2, [pc, #108]	; (8003a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d902      	bls.n	8003a02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3308      	adds	r3, #8
 8003a00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	58025408 	.word	0x58025408
 8003a34:	5802541c 	.word	0x5802541c
 8003a38:	58025430 	.word	0x58025430
 8003a3c:	58025444 	.word	0x58025444
 8003a40:	58025458 	.word	0x58025458
 8003a44:	5802546c 	.word	0x5802546c
 8003a48:	58025480 	.word	0x58025480
 8003a4c:	58025494 	.word	0x58025494
 8003a50:	cccccccd 	.word	0xcccccccd
 8003a54:	16009600 	.word	0x16009600
 8003a58:	58025880 	.word	0x58025880
 8003a5c:	aaaaaaab 	.word	0xaaaaaaab
 8003a60:	400204b8 	.word	0x400204b8
 8003a64:	4002040f 	.word	0x4002040f
 8003a68:	10008200 	.word	0x10008200
 8003a6c:	40020880 	.word	0x40020880

08003a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04a      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d847      	bhi.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01d      	beq.n	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a22      	ldr	r2, [pc, #136]	; (8003b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	461a      	mov	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003af8:	671a      	str	r2, [r3, #112]	; 0x70
 8003afa:	e009      	b.n	8003b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	58025408 	.word	0x58025408
 8003b2c:	5802541c 	.word	0x5802541c
 8003b30:	58025430 	.word	0x58025430
 8003b34:	58025444 	.word	0x58025444
 8003b38:	58025458 	.word	0x58025458
 8003b3c:	5802546c 	.word	0x5802546c
 8003b40:	58025480 	.word	0x58025480
 8003b44:	58025494 	.word	0x58025494
 8003b48:	1600963f 	.word	0x1600963f
 8003b4c:	58025940 	.word	0x58025940
 8003b50:	1000823f 	.word	0x1000823f
 8003b54:	40020940 	.word	0x40020940

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_GPIO_Init+0x12c>)
 8003b68:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a46      	ldr	r2, [pc, #280]	; (8003c88 <HAL_GPIO_Init+0x130>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02b      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a45      	ldr	r2, [pc, #276]	; (8003c8c <HAL_GPIO_Init+0x134>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a44      	ldr	r2, [pc, #272]	; (8003c90 <HAL_GPIO_Init+0x138>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d023      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a43      	ldr	r2, [pc, #268]	; (8003c94 <HAL_GPIO_Init+0x13c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01f      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a42      	ldr	r2, [pc, #264]	; (8003c98 <HAL_GPIO_Init+0x140>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01b      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a41      	ldr	r2, [pc, #260]	; (8003c9c <HAL_GPIO_Init+0x144>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d017      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a40      	ldr	r2, [pc, #256]	; (8003ca0 <HAL_GPIO_Init+0x148>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a3f      	ldr	r2, [pc, #252]	; (8003ca4 <HAL_GPIO_Init+0x14c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00f      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a3e      	ldr	r2, [pc, #248]	; (8003ca8 <HAL_GPIO_Init+0x150>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00b      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <HAL_GPIO_Init+0x154>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d007      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a3c      	ldr	r2, [pc, #240]	; (8003cb0 <HAL_GPIO_Init+0x158>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_Init+0x72>
 8003bc2:	21bb      	movs	r1, #187	; 0xbb
 8003bc4:	483b      	ldr	r0, [pc, #236]	; (8003cb4 <HAL_GPIO_Init+0x15c>)
 8003bc6:	f7fd fa92 	bl	80010ee <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_GPIO_Init+0x88>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <HAL_GPIO_Init+0x160>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x90>
 8003be0:	21bc      	movs	r1, #188	; 0xbc
 8003be2:	4834      	ldr	r0, [pc, #208]	; (8003cb4 <HAL_GPIO_Init+0x15c>)
 8003be4:	f7fd fa83 	bl	80010ee <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d035      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d031      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b11      	cmp	r3, #17
 8003bfe:	d02d      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d029      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b12      	cmp	r3, #18
 8003c0e:	d025      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <HAL_GPIO_Init+0x164>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d020      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_GPIO_Init+0x168>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01b      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_GPIO_Init+0x16c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d016      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_GPIO_Init+0x170>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d011      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_GPIO_Init+0x174>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00c      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_GPIO_Init+0x178>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c54:	21bd      	movs	r1, #189	; 0xbd
 8003c56:	4817      	ldr	r0, [pc, #92]	; (8003cb4 <HAL_GPIO_Init+0x15c>)
 8003c58:	f7fd fa49 	bl	80010ee <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 821a 	beq.w	800409a <HAL_GPIO_Init+0x542>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	f000 8215 	beq.w	800409a <HAL_GPIO_Init+0x542>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	f000 8210 	beq.w	800409a <HAL_GPIO_Init+0x542>
 8003c7a:	21be      	movs	r1, #190	; 0xbe
 8003c7c:	480d      	ldr	r0, [pc, #52]	; (8003cb4 <HAL_GPIO_Init+0x15c>)
 8003c7e:	f7fd fa36 	bl	80010ee <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c82:	e20a      	b.n	800409a <HAL_GPIO_Init+0x542>
 8003c84:	58000080 	.word	0x58000080
 8003c88:	58020000 	.word	0x58020000
 8003c8c:	58020400 	.word	0x58020400
 8003c90:	58020800 	.word	0x58020800
 8003c94:	58020c00 	.word	0x58020c00
 8003c98:	58021000 	.word	0x58021000
 8003c9c:	58021400 	.word	0x58021400
 8003ca0:	58021800 	.word	0x58021800
 8003ca4:	58021c00 	.word	0x58021c00
 8003ca8:	58022000 	.word	0x58022000
 8003cac:	58022400 	.word	0x58022400
 8003cb0:	58022800 	.word	0x58022800
 8003cb4:	0800fccc 	.word	0x0800fccc
 8003cb8:	ffff0000 	.word	0xffff0000
 8003cbc:	11110000 	.word	0x11110000
 8003cc0:	11210000 	.word	0x11210000
 8003cc4:	11310000 	.word	0x11310000
 8003cc8:	11120000 	.word	0x11120000
 8003ccc:	11220000 	.word	0x11220000
 8003cd0:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 81d4 	beq.w	8004094 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x1a4>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b12      	cmp	r3, #18
 8003cfa:	d15b      	bne.n	8003db4 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4aa2      	ldr	r2, [pc, #648]	; (8003f88 <HAL_GPIO_Init+0x430>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d02b      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4aa1      	ldr	r2, [pc, #644]	; (8003f8c <HAL_GPIO_Init+0x434>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d027      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4aa0      	ldr	r2, [pc, #640]	; (8003f90 <HAL_GPIO_Init+0x438>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d023      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a9f      	ldr	r2, [pc, #636]	; (8003f94 <HAL_GPIO_Init+0x43c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d01f      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a9e      	ldr	r2, [pc, #632]	; (8003f98 <HAL_GPIO_Init+0x440>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d01b      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a9d      	ldr	r2, [pc, #628]	; (8003f9c <HAL_GPIO_Init+0x444>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d017      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a9c      	ldr	r2, [pc, #624]	; (8003fa0 <HAL_GPIO_Init+0x448>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a9b      	ldr	r2, [pc, #620]	; (8003fa4 <HAL_GPIO_Init+0x44c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00f      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a9a      	ldr	r2, [pc, #616]	; (8003fa8 <HAL_GPIO_Init+0x450>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a99      	ldr	r2, [pc, #612]	; (8003fac <HAL_GPIO_Init+0x454>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a98      	ldr	r2, [pc, #608]	; (8003fb0 <HAL_GPIO_Init+0x458>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x204>
 8003d54:	21cd      	movs	r1, #205	; 0xcd
 8003d56:	4897      	ldr	r0, [pc, #604]	; (8003fb4 <HAL_GPIO_Init+0x45c>)
 8003d58:	f7fd f9c9 	bl	80010ee <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d903      	bls.n	8003d6c <HAL_GPIO_Init+0x214>
 8003d64:	21ce      	movs	r1, #206	; 0xce
 8003d66:	4893      	ldr	r0, [pc, #588]	; (8003fb4 <HAL_GPIO_Init+0x45c>)
 8003d68:	f7fd f9c1 	bl	80010ee <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	220f      	movs	r2, #15
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0203 	and.w	r2, r3, #3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d00b      	beq.n	8003e08 <HAL_GPIO_Init+0x2b0>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d007      	beq.n	8003e08 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dfc:	2b11      	cmp	r3, #17
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b12      	cmp	r3, #18
 8003e06:	d144      	bne.n	8003e92 <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00f      	beq.n	8003e30 <HAL_GPIO_Init+0x2d8>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d00b      	beq.n	8003e30 <HAL_GPIO_Init+0x2d8>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d007      	beq.n	8003e30 <HAL_GPIO_Init+0x2d8>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x2d8>
 8003e28:	21e2      	movs	r1, #226	; 0xe2
 8003e2a:	4862      	ldr	r0, [pc, #392]	; (8003fb4 <HAL_GPIO_Init+0x45c>)
 8003e2c:	f7fd f95f 	bl	80010ee <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e66:	2201      	movs	r2, #1
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	f003 0201 	and.w	r2, r3, #1
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80e2 	beq.w	8004094 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed0:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_GPIO_Init+0x460>)
 8003ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ed6:	4a38      	ldr	r2, [pc, #224]	; (8003fb8 <HAL_GPIO_Init+0x460>)
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ee0:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <HAL_GPIO_Init+0x460>)
 8003ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eee:	4a33      	ldr	r2, [pc, #204]	; (8003fbc <HAL_GPIO_Init+0x464>)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_GPIO_Init+0x430>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d054      	beq.n	8003fc4 <HAL_GPIO_Init+0x46c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	; (8003f8c <HAL_GPIO_Init+0x434>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d04e      	beq.n	8003fc0 <HAL_GPIO_Init+0x468>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_GPIO_Init+0x438>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <HAL_GPIO_Init+0x42a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_GPIO_Init+0x43c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d025      	beq.n	8003f7e <HAL_GPIO_Init+0x426>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_GPIO_Init+0x440>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <HAL_GPIO_Init+0x422>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <HAL_GPIO_Init+0x444>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d019      	beq.n	8003f76 <HAL_GPIO_Init+0x41e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <HAL_GPIO_Init+0x448>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_GPIO_Init+0x41a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <HAL_GPIO_Init+0x44c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00d      	beq.n	8003f6e <HAL_GPIO_Init+0x416>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <HAL_GPIO_Init+0x450>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <HAL_GPIO_Init+0x412>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <HAL_GPIO_Init+0x454>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_GPIO_Init+0x40e>
 8003f62:	2309      	movs	r3, #9
 8003f64:	e02f      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f66:	230a      	movs	r3, #10
 8003f68:	e02d      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	e02b      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f6e:	2307      	movs	r3, #7
 8003f70:	e029      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f72:	2306      	movs	r3, #6
 8003f74:	e027      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f76:	2305      	movs	r3, #5
 8003f78:	e025      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	e023      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e021      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e01f      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003f86:	bf00      	nop
 8003f88:	58020000 	.word	0x58020000
 8003f8c:	58020400 	.word	0x58020400
 8003f90:	58020800 	.word	0x58020800
 8003f94:	58020c00 	.word	0x58020c00
 8003f98:	58021000 	.word	0x58021000
 8003f9c:	58021400 	.word	0x58021400
 8003fa0:	58021800 	.word	0x58021800
 8003fa4:	58021c00 	.word	0x58021c00
 8003fa8:	58022000 	.word	0x58022000
 8003fac:	58022400 	.word	0x58022400
 8003fb0:	58022800 	.word	0x58022800
 8003fb4:	0800fccc 	.word	0x0800fccc
 8003fb8:	58024400 	.word	0x58024400
 8003fbc:	58000400 	.word	0x58000400
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_GPIO_Init+0x46e>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	f002 0203 	and.w	r2, r2, #3
 8003fcc:	0092      	lsls	r2, r2, #2
 8003fce:	4093      	lsls	r3, r2
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd6:	4937      	ldr	r1, [pc, #220]	; (80040b4 <HAL_GPIO_Init+0x55c>)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	3302      	adds	r3, #2
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800405e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800408c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	3301      	adds	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f ae15 	bne.w	8003cd4 <HAL_GPIO_Init+0x17c>
  }
}
 80040aa:	bf00      	nop
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	58000400 	.word	0x58000400

080040b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
 80040c4:	4613      	mov	r3, r2
 80040c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_GPIO_WritePin+0x20>
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <HAL_GPIO_WritePin+0x60>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <HAL_GPIO_WritePin+0x2a>
 80040d8:	f240 11ad 	movw	r1, #429	; 0x1ad
 80040dc:	480f      	ldr	r0, [pc, #60]	; (800411c <HAL_GPIO_WritePin+0x64>)
 80040de:	f7fd f806 	bl	80010ee <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80040e2:	787b      	ldrb	r3, [r7, #1]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_GPIO_WritePin+0x40>
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d004      	beq.n	80040f8 <HAL_GPIO_WritePin+0x40>
 80040ee:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80040f2:	480a      	ldr	r0, [pc, #40]	; (800411c <HAL_GPIO_WritePin+0x64>)
 80040f4:	f7fc fffb 	bl	80010ee <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80040f8:	787b      	ldrb	r3, [r7, #1]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004104:	e003      	b.n	800410e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004106:	887b      	ldrh	r3, [r7, #2]
 8004108:	041a      	lsls	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	619a      	str	r2, [r3, #24]
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	ffff0000 	.word	0xffff0000
 800411c:	0800fccc 	.word	0x0800fccc

08004120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d006      	beq.n	8004144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc febc 	bl	8000ebc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	58000080 	.word	0x58000080

08004150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e107      	b.n	8004372 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a85      	ldr	r2, [pc, #532]	; (800437c <HAL_I2C_Init+0x22c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <HAL_I2C_Init+0x44>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a83      	ldr	r2, [pc, #524]	; (8004380 <HAL_I2C_Init+0x230>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_I2C_Init+0x44>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a82      	ldr	r2, [pc, #520]	; (8004384 <HAL_I2C_Init+0x234>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_I2C_Init+0x44>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a80      	ldr	r2, [pc, #512]	; (8004388 <HAL_I2C_Init+0x238>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_I2C_Init+0x44>
 800418a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800418e:	487f      	ldr	r0, [pc, #508]	; (800438c <HAL_I2C_Init+0x23c>)
 8004190:	f7fc ffad 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419c:	d304      	bcc.n	80041a8 <HAL_I2C_Init+0x58>
 800419e:	f240 11df 	movw	r1, #479	; 0x1df
 80041a2:	487a      	ldr	r0, [pc, #488]	; (800438c <HAL_I2C_Init+0x23c>)
 80041a4:	f7fc ffa3 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d008      	beq.n	80041c2 <HAL_I2C_Init+0x72>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d004      	beq.n	80041c2 <HAL_I2C_Init+0x72>
 80041b8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80041bc:	4873      	ldr	r0, [pc, #460]	; (800438c <HAL_I2C_Init+0x23c>)
 80041be:	f7fc ff96 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_I2C_Init+0x8e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d2:	d004      	beq.n	80041de <HAL_I2C_Init+0x8e>
 80041d4:	f240 11e1 	movw	r1, #481	; 0x1e1
 80041d8:	486c      	ldr	r0, [pc, #432]	; (800438c <HAL_I2C_Init+0x23c>)
 80041da:	f7fc ff88 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2bff      	cmp	r3, #255	; 0xff
 80041e4:	d904      	bls.n	80041f0 <HAL_I2C_Init+0xa0>
 80041e6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80041ea:	4868      	ldr	r0, [pc, #416]	; (800438c <HAL_I2C_Init+0x23c>)
 80041ec:	f7fc ff7f 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_I2C_Init+0xea>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d01c      	beq.n	800423a <HAL_I2C_Init+0xea>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d018      	beq.n	800423a <HAL_I2C_Init+0xea>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d014      	beq.n	800423a <HAL_I2C_Init+0xea>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d010      	beq.n	800423a <HAL_I2C_Init+0xea>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b05      	cmp	r3, #5
 800421e:	d00c      	beq.n	800423a <HAL_I2C_Init+0xea>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d008      	beq.n	800423a <HAL_I2C_Init+0xea>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b07      	cmp	r3, #7
 800422e:	d004      	beq.n	800423a <HAL_I2C_Init+0xea>
 8004230:	f240 11e3 	movw	r1, #483	; 0x1e3
 8004234:	4855      	ldr	r0, [pc, #340]	; (800438c <HAL_I2C_Init+0x23c>)
 8004236:	f7fc ff5a 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_I2C_Init+0x106>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800424a:	d004      	beq.n	8004256 <HAL_I2C_Init+0x106>
 800424c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8004250:	484e      	ldr	r0, [pc, #312]	; (800438c <HAL_I2C_Init+0x23c>)
 8004252:	f7fc ff4c 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_I2C_Init+0x122>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004266:	d004      	beq.n	8004272 <HAL_I2C_Init+0x122>
 8004268:	f240 11e5 	movw	r1, #485	; 0x1e5
 800426c:	4847      	ldr	r0, [pc, #284]	; (800438c <HAL_I2C_Init+0x23c>)
 800426e:	f7fc ff3e 	bl	80010ee <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fc fc56 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d107      	bne.n	80042da <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	e006      	b.n	80042e8 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d104      	bne.n	80042fa <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_I2C_Init+0x240>)
 8004306:	430b      	orrs	r3, r1
 8004308:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004318:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	ea42 0103 	orr.w	r1, r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	021a      	lsls	r2, r3, #8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69d9      	ldr	r1, [r3, #28]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1a      	ldr	r2, [r3, #32]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40005400 	.word	0x40005400
 8004380:	40005800 	.word	0x40005800
 8004384:	40005c00 	.word	0x40005c00
 8004388:	58001c00 	.word	0x58001c00
 800438c:	0800fd08 	.word	0x0800fd08
 8004390:	02008000 	.word	0x02008000

08004394 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a32      	ldr	r2, [pc, #200]	; (800446c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d012      	beq.n	80043ce <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a30      	ldr	r2, [pc, #192]	; (8004470 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00d      	beq.n	80043ce <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d008      	beq.n	80043ce <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2d      	ldr	r2, [pc, #180]	; (8004478 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80043c6:	2164      	movs	r1, #100	; 0x64
 80043c8:	482c      	ldr	r0, [pc, #176]	; (800447c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80043ca:	f7fc fe90 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d003      	beq.n	80043e4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80043dc:	2165      	movs	r1, #101	; 0x65
 80043de:	4827      	ldr	r0, [pc, #156]	; (800447c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80043e0:	f7fc fe85 	bl	80010ee <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d138      	bne.n	8004462 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e032      	b.n	8004464 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2224      	movs	r2, #36	; 0x24
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800442c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40005400 	.word	0x40005400
 8004470:	40005800 	.word	0x40005800
 8004474:	40005c00 	.word	0x40005c00
 8004478:	58001c00 	.word	0x58001c00
 800447c:	0800fd40 	.word	0x0800fd40

08004480 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a31      	ldr	r2, [pc, #196]	; (8004554 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d012      	beq.n	80044ba <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00d      	beq.n	80044ba <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2e      	ldr	r2, [pc, #184]	; (800455c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d008      	beq.n	80044ba <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80044b2:	2192      	movs	r1, #146	; 0x92
 80044b4:	482b      	ldr	r0, [pc, #172]	; (8004564 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80044b6:	f7fc fe1a 	bl	80010ee <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d903      	bls.n	80044c8 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80044c0:	2193      	movs	r1, #147	; 0x93
 80044c2:	4828      	ldr	r0, [pc, #160]	; (8004564 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80044c4:	f7fc fe13 	bl	80010ee <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d139      	bne.n	8004548 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80044de:	2302      	movs	r3, #2
 80044e0:	e033      	b.n	800454a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2224      	movs	r2, #36	; 0x24
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004510:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	e000      	b.n	800454a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40005400 	.word	0x40005400
 8004558:	40005800 	.word	0x40005800
 800455c:	40005c00 	.word	0x40005c00
 8004560:	58001c00 	.word	0x58001c00
 8004564:	0800fd40 	.word	0x0800fd40

08004568 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e070      	b.n	800465c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fb30 	bl	8000bf4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_JPEG_Init+0xfc>)
 8004600:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a18      	ldr	r2, [pc, #96]	; (8004668 <HAL_JPEG_Init+0x100>)
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fae9 	bl	8004bec <JPEG_Set_HuffEnc_Mem>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e018      	b.n	800465c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004638:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	08010478 	.word	0x08010478
 8004668:	080104b8 	.word	0x080104b8

0800466c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800466c:	b480      	push	{r7}
 800466e:	b08b      	sub	sp, #44	; 0x2c
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e020      	b.n	80046c6 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	4413      	add	r3, r2
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800468e:	6a3a      	ldr	r2, [r7, #32]
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	4413      	add	r3, r2
 8004694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004698:	d90f      	bls.n	80046ba <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e055      	b.n	800474a <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	440b      	add	r3, r1
 80046a8:	3201      	adds	r2, #1
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
      p++;
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	3301      	adds	r3, #1
 80046b2:	623b      	str	r3, [r7, #32]
      i--;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	3b01      	subs	r3, #1
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ee      	bne.n	800469e <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2b0f      	cmp	r3, #15
 80046ca:	d9db      	bls.n	8004684 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	4413      	add	r3, r2
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	617b      	str	r3, [r7, #20]
  p = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80046ea:	e027      	b.n	800473c <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	601a      	str	r2, [r3, #0]
      p++;
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	3301      	adds	r3, #1
 80046fc:	623b      	str	r3, [r7, #32]
      code++;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3301      	adds	r3, #1
 8004702:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	4413      	add	r3, r2
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4293      	cmp	r3, r2
 8004712:	d0eb      	beq.n	80046ec <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b1f      	cmp	r3, #31
 8004718:	d901      	bls.n	800471e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e015      	b.n	800474a <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800471e:	2201      	movs	r2, #1
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	429a      	cmp	r2, r3
 800472a:	d301      	bcc.n	8004730 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e00c      	b.n	800474a <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	61bb      	str	r3, [r7, #24]
    si++;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3301      	adds	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	4413      	add	r3, r2
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1dd      	bne.n	8004704 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	372c      	adds	r7, #44	; 0x2c
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800475c:	af00      	add	r7, sp, #0
 800475e:	1d3b      	adds	r3, r7, #4
 8004760:	6018      	str	r0, [r3, #0]
 8004762:	463b      	mov	r3, r7
 8004764:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004766:	1d3b      	adds	r3, r7, #4
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	f107 020c 	add.w	r2, r7, #12
 8004772:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8004776:	f7ff ff79 	bl	800466c <JPEG_Bits_To_SizeCodes>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8004780:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8004788:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800478c:	e066      	b.n	800485c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8004794:	e05a      	b.n	800484c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800479e:	4413      	add	r3, r2
 80047a0:	3310      	adds	r3, #16
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 80047a8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 80047b0:	23a0      	movs	r3, #160	; 0xa0
 80047b2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80047b6:	e021      	b.n	80047fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80047b8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80047bc:	2bf0      	cmp	r3, #240	; 0xf0
 80047be:	d103      	bne.n	80047c8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 80047c0:	23a1      	movs	r3, #161	; 0xa1
 80047c2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80047c6:	e019      	b.n	80047fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80047c8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 80047d6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80047e2:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	461a      	mov	r2, r3
 80047f0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80047f4:	4413      	add	r3, r2
 80047f6:	3b01      	subs	r3, #1
 80047f8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80047fc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004800:	2ba1      	cmp	r3, #161	; 0xa1
 8004802:	d901      	bls.n	8004808 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004804:	2301      	movs	r3, #1
 8004806:	e029      	b.n	800485c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004810:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004814:	463b      	mov	r3, r7
 8004816:	6819      	ldr	r1, [r3, #0]
 8004818:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800481c:	3328      	adds	r3, #40	; 0x28
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004824:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004828:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800482c:	4413      	add	r3, r2
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	3b01      	subs	r3, #1
 8004832:	b2d9      	uxtb	r1, r3
 8004834:	463b      	mov	r3, r7
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800483c:	4413      	add	r3, r2
 800483e:	460a      	mov	r2, r1
 8004840:	701a      	strb	r2, [r3, #0]
      k++;
 8004842:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004846:	3301      	adds	r3, #1
 8004848:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004856:	429a      	cmp	r2, r3
 8004858:	d39d      	bcc.n	8004796 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800486c:	af00      	add	r7, sp, #0
 800486e:	1d3b      	adds	r3, r7, #4
 8004870:	6018      	str	r0, [r3, #0]
 8004872:	463b      	mov	r3, r7
 8004874:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800487e:	f107 0208 	add.w	r2, r7, #8
 8004882:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8004886:	f7ff fef1 	bl	800466c <JPEG_Bits_To_SizeCodes>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8004890:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8004898:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800489c:	e03b      	b.n	8004916 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 80048a4:	e030      	b.n	8004908 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80048ae:	4413      	add	r3, r2
 80048b0:	3310      	adds	r3, #16
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80048b8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80048bc:	2b0b      	cmp	r3, #11
 80048be:	d901      	bls.n	80048c4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80048c0:	2301      	movs	r3, #1
 80048c2:	e028      	b.n	8004916 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80048c4:	f107 0308 	add.w	r3, r7, #8
 80048c8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80048cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048d0:	463b      	mov	r3, r7
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80048d8:	3302      	adds	r3, #2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80048e0:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80048e4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80048e8:	4413      	add	r3, r2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b2d9      	uxtb	r1, r3
 80048f0:	463b      	mov	r3, r7
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80048f8:	4413      	add	r3, r2
 80048fa:	460a      	mov	r2, r1
 80048fc:	701a      	strb	r2, [r3, #0]
      k++;
 80048fe:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004902:	3301      	adds	r3, #1
 8004904:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004908:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800490c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004910:	429a      	cmp	r2, r3
 8004912:	d3c8      	bcc.n	80048a6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b09a      	sub	sp, #104	; 0x68
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d106      	bne.n	8004948 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004942:	3318      	adds	r3, #24
 8004944:	663b      	str	r3, [r7, #96]	; 0x60
 8004946:	e00f      	b.n	8004968 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d106      	bne.n	8004964 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800495e:	3318      	adds	r3, #24
 8004960:	663b      	str	r3, [r7, #96]	; 0x60
 8004962:	e001      	b.n	8004968 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e05b      	b.n	8004a20 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d057      	beq.n	8004a1e <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800496e:	f107 0314 	add.w	r3, r7, #20
 8004972:	4619      	mov	r1, r3
 8004974:	68b8      	ldr	r0, [r7, #8]
 8004976:	f7ff ff76 	bl	8004866 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800497a:	4603      	mov	r3, r0
 800497c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800498c:	e048      	b.n	8004a20 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 800498e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004990:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004994:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004998:	601a      	str	r2, [r3, #0]
    addressDef++;
 800499a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800499c:	3304      	adds	r3, #4
 800499e:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 80049a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a2:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80049a6:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80049a8:	230c      	movs	r3, #12
 80049aa:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 80049ac:	e034      	b.n	8004a18 <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 80049ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b0:	3b01      	subs	r3, #1
 80049b2:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 80049b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b6:	3b04      	subs	r3, #4
 80049b8:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049ba:	f107 0214 	add.w	r2, r7, #20
 80049be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80049ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049cc:	3302      	adds	r3, #2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80049d4:	440b      	add	r3, r1
 80049d6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	4313      	orrs	r3, r2
 80049de:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 80049e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e2:	3b01      	subs	r3, #1
 80049e4:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049e6:	f107 0214 	add.w	r2, r7, #20
 80049ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ec:	4413      	add	r3, r2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80049f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f8:	3302      	adds	r3, #2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004a00:	440b      	add	r3, r1
 8004a02:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0e:	041a      	lsls	r2, r3, #16
 8004a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a12:	431a      	orrs	r2, r3
 8004a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a16:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d8c7      	bhi.n	80049ae <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3768      	adds	r7, #104	; 0x68
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	6018      	str	r0, [r3, #0]
 8004a36:	f107 0308 	add.w	r3, r7, #8
 8004a3a:	6019      	str	r1, [r3, #0]
 8004a3c:	1d3b      	adds	r3, r7, #4
 8004a3e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004a40:	f107 030c 	add.w	r3, r7, #12
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4c:	1d3a      	adds	r2, r7, #4
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d10a      	bne.n	8004a6a <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a64:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004a68:	e016      	b.n	8004a98 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004a6a:	f107 030c 	add.w	r3, r7, #12
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004a76:	1d3a      	adds	r2, r7, #4
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d10a      	bne.n	8004a94 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004a7e:	f107 030c 	add.w	r3, r7, #12
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004a8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a8e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004a92:	e001      	b.n	8004a98 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e09c      	b.n	8004bd2 <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8004a98:	f107 0308 	add.w	r3, r7, #8
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8096 	beq.w	8004bd0 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004aa4:	f107 0214 	add.w	r2, r7, #20
 8004aa8:	f107 0308 	add.w	r3, r7, #8
 8004aac:	4611      	mov	r1, r2
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	f7ff fe51 	bl	8004756 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8004aba:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8004ac2:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004ac6:	e084      	b.n	8004bd2 <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004ac8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004acc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004ad6:	e00e      	b.n	8004af6 <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8004ad8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004adc:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004ae0:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004ae2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004aec:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004af0:	3301      	adds	r3, #1
 8004af2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004af6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d9ec      	bls.n	8004ad8 <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8004afe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004b02:	4a36      	ldr	r2, [pc, #216]	; (8004bdc <JPEG_Set_HuffAC_Mem+0x1b4>)
 8004b04:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004b06:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8004b10:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004b14:	4a32      	ldr	r2, [pc, #200]	; (8004be0 <JPEG_Set_HuffAC_Mem+0x1b8>)
 8004b16:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004b18:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8004b22:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004b26:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <JPEG_Set_HuffAC_Mem+0x1bc>)
 8004b28:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004b2a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004b2e:	3304      	adds	r3, #4
 8004b30:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004b34:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004b38:	4a2b      	ldr	r2, [pc, #172]	; (8004be8 <JPEG_Set_HuffAC_Mem+0x1c0>)
 8004b3a:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004b3c:	23a2      	movs	r3, #162	; 0xa2
 8004b3e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8004b42:	e041      	b.n	8004bc8 <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8004b44:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8004b4e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004b52:	3b04      	subs	r3, #4
 8004b54:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b58:	f107 0214 	add.w	r2, r7, #20
 8004b5c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b6a:	f107 0114 	add.w	r1, r7, #20
 8004b6e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004b72:	3328      	adds	r3, #40	; 0x28
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004b82:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004b86:	3b01      	subs	r3, #1
 8004b88:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b8c:	f107 0214 	add.w	r2, r7, #20
 8004b90:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004b94:	4413      	add	r3, r2
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b9e:	f107 0114 	add.w	r1, r7, #20
 8004ba2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004ba6:	3328      	adds	r3, #40	; 0x28
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004bb6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8004bba:	041a      	lsls	r2, r3, #16
 8004bbc:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004bc6:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004bc8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d8b9      	bhi.n	8004b44 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	0fd10fd0 	.word	0x0fd10fd0
 8004be0:	0fd30fd2 	.word	0x0fd30fd2
 8004be4:	0fd50fd4 	.word	0x0fd50fd4
 8004be8:	0fd70fd6 	.word	0x0fd70fd6

08004bec <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f84d 	bl	8004c94 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004c02:	461a      	mov	r2, r3
 8004c04:	491f      	ldr	r1, [pc, #124]	; (8004c84 <JPEG_Set_HuffEnc_Mem+0x98>)
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ff0e 	bl	8004a28 <JPEG_Set_HuffAC_Mem>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	e030      	b.n	8004c7c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004c22:	461a      	mov	r2, r3
 8004c24:	4918      	ldr	r1, [pc, #96]	; (8004c88 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fefe 	bl	8004a28 <JPEG_Set_HuffAC_Mem>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	e020      	b.n	8004c7c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004c42:	461a      	mov	r2, r3
 8004c44:	4911      	ldr	r1, [pc, #68]	; (8004c8c <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fe6a 	bl	8004920 <JPEG_Set_HuffDC_Mem>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	e010      	b.n	8004c7c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004c62:	461a      	mov	r2, r3
 8004c64:	490a      	ldr	r1, [pc, #40]	; (8004c90 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fe5a 	bl	8004920 <JPEG_Set_HuffDC_Mem>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	e000      	b.n	8004c7c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	08010310 	.word	0x08010310
 8004c88:	080103c4 	.word	0x080103c4
 8004c8c:	080102d8 	.word	0x080102d8
 8004c90:	080102f4 	.word	0x080102f4

08004c94 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b08b      	sub	sp, #44	; 0x2c
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8004c9c:	4b80      	ldr	r3, [pc, #512]	; (8004ea0 <JPEG_Set_Huff_DHTMem+0x20c>)
 8004c9e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004ca0:	4b80      	ldr	r3, [pc, #512]	; (8004ea4 <JPEG_Set_Huff_DHTMem+0x210>)
 8004ca2:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004ca4:	4b80      	ldr	r3, [pc, #512]	; (8004ea8 <JPEG_Set_Huff_DHTMem+0x214>)
 8004ca6:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8004ca8:	4b80      	ldr	r3, [pc, #512]	; (8004eac <JPEG_Set_Huff_DHTMem+0x218>)
 8004caa:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	623b      	str	r3, [r7, #32]
  index = 16;
 8004cb8:	2310      	movs	r3, #16
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004cbc:	e01d      	b.n	8004cfa <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	5cd3      	ldrb	r3, [r2, r3]
 8004cc6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	3b02      	subs	r3, #2
 8004ccc:	6979      	ldr	r1, [r7, #20]
 8004cce:	5ccb      	ldrb	r3, [r1, r3]
 8004cd0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004cd2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	3b03      	subs	r3, #3
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004cde:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	3a04      	subs	r2, #4
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004ce8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	601a      	str	r2, [r3, #0]
    address--;
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d8de      	bhi.n	8004cbe <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d08:	3318      	adds	r3, #24
 8004d0a:	623b      	str	r3, [r7, #32]
  index = 12;
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d10:	e021      	b.n	8004d56 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	3b01      	subs	r3, #1
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4413      	add	r3, r2
 8004d1a:	7c1b      	ldrb	r3, [r3, #16]
 8004d1c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	3b02      	subs	r3, #2
 8004d22:	6979      	ldr	r1, [r7, #20]
 8004d24:	440b      	add	r3, r1
 8004d26:	7c1b      	ldrb	r3, [r3, #16]
 8004d28:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004d2a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	3b03      	subs	r3, #3
 8004d30:	6979      	ldr	r1, [r7, #20]
 8004d32:	440b      	add	r3, r1
 8004d34:	7c1b      	ldrb	r3, [r3, #16]
 8004d36:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004d38:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3c:	3a04      	subs	r2, #4
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	440a      	add	r2, r1
 8004d42:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004d44:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	601a      	str	r2, [r3, #0]
    address--;
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	3b04      	subs	r3, #4
 8004d4e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	3b04      	subs	r3, #4
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d8da      	bhi.n	8004d12 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d64:	3328      	adds	r3, #40	; 0x28
 8004d66:	623b      	str	r3, [r7, #32]
  index = 16;
 8004d68:	2310      	movs	r3, #16
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d6c:	e01d      	b.n	8004daa <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	3b01      	subs	r3, #1
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	5cd3      	ldrb	r3, [r2, r3]
 8004d76:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	3b02      	subs	r3, #2
 8004d7c:	69f9      	ldr	r1, [r7, #28]
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004d82:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	3b03      	subs	r3, #3
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004d8e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	3a04      	subs	r2, #4
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004d98:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	601a      	str	r2, [r3, #0]
    address--;
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	3b04      	subs	r3, #4
 8004da2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	3b04      	subs	r3, #4
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d8de      	bhi.n	8004d6e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004db8:	33cc      	adds	r3, #204	; 0xcc
 8004dba:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	; (8004eb0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004dcc:	021a      	lsls	r2, r3, #8
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	3b04      	subs	r3, #4
 8004de6:	623b      	str	r3, [r7, #32]
  index = 160;
 8004de8:	23a0      	movs	r3, #160	; 0xa0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004dec:	e021      	b.n	8004e32 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	3b01      	subs	r3, #1
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	7c1b      	ldrb	r3, [r3, #16]
 8004df8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	3b02      	subs	r3, #2
 8004dfe:	69f9      	ldr	r1, [r7, #28]
 8004e00:	440b      	add	r3, r1
 8004e02:	7c1b      	ldrb	r3, [r3, #16]
 8004e04:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e06:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	3b03      	subs	r3, #3
 8004e0c:	69f9      	ldr	r1, [r7, #28]
 8004e0e:	440b      	add	r3, r1
 8004e10:	7c1b      	ldrb	r3, [r3, #16]
 8004e12:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e14:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	3a04      	subs	r2, #4
 8004e1a:	69f9      	ldr	r1, [r7, #28]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e20:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	601a      	str	r2, [r3, #0]
    address--;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	3b04      	subs	r3, #4
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d8da      	bhi.n	8004dee <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004e40:	33cc      	adds	r3, #204	; 0xcc
 8004e42:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	061a      	lsls	r2, r3, #24
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004e6e:	33dc      	adds	r3, #220	; 0xdc
 8004e70:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	7bdb      	ldrb	r3, [r3, #15]
 8004e80:	021a      	lsls	r2, r3, #8
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	7b92      	ldrb	r2, [r2, #14]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	3b04      	subs	r3, #4
 8004e98:	623b      	str	r3, [r7, #32]
  index = 12;
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e9e:	e027      	b.n	8004ef0 <JPEG_Set_Huff_DHTMem+0x25c>
 8004ea0:	08010310 	.word	0x08010310
 8004ea4:	080103c4 	.word	0x080103c4
 8004ea8:	080102d8 	.word	0x080102d8
 8004eac:	080102f4 	.word	0x080102f4
 8004eb0:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	5cd3      	ldrb	r3, [r2, r3]
 8004ebc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004ebe:	6939      	ldr	r1, [r7, #16]
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	440b      	add	r3, r1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004ec8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	6939      	ldr	r1, [r7, #16]
 8004ed0:	5ccb      	ldrb	r3, [r1, r3]
 8004ed2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004ed4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed8:	3a02      	subs	r2, #2
 8004eda:	6939      	ldr	r1, [r7, #16]
 8004edc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004ede:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	601a      	str	r2, [r3, #0]
    address--;
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	3b04      	subs	r3, #4
 8004ee8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	3b04      	subs	r3, #4
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d8de      	bhi.n	8004eb4 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004efe:	33dc      	adds	r3, #220	; 0xdc
 8004f00:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	7c5b      	ldrb	r3, [r3, #17]
 8004f0e:	061a      	lsls	r2, r3, #24
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	7c1b      	ldrb	r3, [r3, #16]
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f2c:	33e8      	adds	r3, #232	; 0xe8
 8004f2e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4b6d      	ldr	r3, [pc, #436]	; (80050ec <JPEG_Set_Huff_DHTMem+0x458>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	7edb      	ldrb	r3, [r3, #27]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	7e92      	ldrb	r2, [r2, #26]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	3b04      	subs	r3, #4
 8004f56:	623b      	str	r3, [r7, #32]
  index = 8;
 8004f58:	2308      	movs	r3, #8
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004f5c:	e021      	b.n	8004fa2 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	3301      	adds	r3, #1
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4413      	add	r3, r2
 8004f66:	7c1b      	ldrb	r3, [r3, #16]
 8004f68:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004f6a:	6939      	ldr	r1, [r7, #16]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	440b      	add	r3, r1
 8004f70:	3310      	adds	r3, #16
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004f76:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	6939      	ldr	r1, [r7, #16]
 8004f7e:	440b      	add	r3, r1
 8004f80:	7c1b      	ldrb	r3, [r3, #16]
 8004f82:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004f84:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	3a02      	subs	r2, #2
 8004f8a:	6939      	ldr	r1, [r7, #16]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004f90:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	601a      	str	r2, [r3, #0]
    address--;
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d8da      	bhi.n	8004f5e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004fb0:	33e8      	adds	r3, #232	; 0xe8
 8004fb2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	061a      	lsls	r2, r3, #24
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004fde:	33f8      	adds	r3, #248	; 0xf8
 8004fe0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b41      	ldr	r3, [pc, #260]	; (80050ec <JPEG_Set_Huff_DHTMem+0x458>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	7bdb      	ldrb	r3, [r3, #15]
 8004ff0:	021a      	lsls	r2, r3, #8
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	7b92      	ldrb	r2, [r2, #14]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	3b04      	subs	r3, #4
 8005008:	623b      	str	r3, [r7, #32]
  index = 12;
 800500a:	230c      	movs	r3, #12
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800500e:	e01d      	b.n	800504c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	3301      	adds	r3, #1
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	5cd3      	ldrb	r3, [r2, r3]
 8005018:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800501a:	69b9      	ldr	r1, [r7, #24]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	440b      	add	r3, r1
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005024:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	3b01      	subs	r3, #1
 800502a:	69b9      	ldr	r1, [r7, #24]
 800502c:	5ccb      	ldrb	r3, [r1, r3]
 800502e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005030:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8005032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005034:	3a02      	subs	r2, #2
 8005036:	69b9      	ldr	r1, [r7, #24]
 8005038:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800503a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	601a      	str	r2, [r3, #0]
    address--;
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	3b04      	subs	r3, #4
 8005044:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	3b04      	subs	r3, #4
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	2b03      	cmp	r3, #3
 8005050:	d8de      	bhi.n	8005010 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800505a:	33f8      	adds	r3, #248	; 0xf8
 800505c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	7c5b      	ldrb	r3, [r3, #17]
 800506a:	061a      	lsls	r2, r3, #24
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	431a      	orrs	r2, r3
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	7c1b      	ldrb	r3, [r3, #16]
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005088:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800508c:	623b      	str	r3, [r7, #32]
  index = 160;
 800508e:	23a0      	movs	r3, #160	; 0xa0
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005092:	e021      	b.n	80050d8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	3301      	adds	r3, #1
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4413      	add	r3, r2
 800509c:	7c1b      	ldrb	r3, [r3, #16]
 800509e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	440b      	add	r3, r1
 80050a6:	3310      	adds	r3, #16
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050ac:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	3b01      	subs	r3, #1
 80050b2:	69b9      	ldr	r1, [r7, #24]
 80050b4:	440b      	add	r3, r1
 80050b6:	7c1b      	ldrb	r3, [r3, #16]
 80050b8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80050ba:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80050bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050be:	3a02      	subs	r2, #2
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	440a      	add	r2, r1
 80050c4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80050c6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	601a      	str	r2, [r3, #0]
    address--;
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	3b04      	subs	r3, #4
 80050d0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	3b04      	subs	r3, #4
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d8da      	bhi.n	8005094 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80050de:	bf00      	nop
 80050e0:	372c      	adds	r7, #44	; 0x2c
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	ffff0000 	.word	0xffff0000

080050f0 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d006      	beq.n	800510c <HAL_PWREx_ConfigSupply+0x1c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d003      	beq.n	800510c <HAL_PWREx_ConfigSupply+0x1c>
 8005104:	21ef      	movs	r1, #239	; 0xef
 8005106:	481a      	ldr	r0, [pc, #104]	; (8005170 <HAL_PWREx_ConfigSupply+0x80>)
 8005108:	f7fb fff1 	bl	80010ee <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <HAL_PWREx_ConfigSupply+0x84>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d008      	beq.n	800512a <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005118:	4b16      	ldr	r3, [pc, #88]	; (8005174 <HAL_PWREx_ConfigSupply+0x84>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d001      	beq.n	800512a <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e01d      	b.n	8005166 <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_PWREx_ConfigSupply+0x84>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f023 0207 	bic.w	r2, r3, #7
 8005132:	4910      	ldr	r1, [pc, #64]	; (8005174 <HAL_PWREx_ConfigSupply+0x84>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4313      	orrs	r3, r2
 8005138:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800513a:	f7fc fa8b 	bl	8001654 <HAL_GetTick>
 800513e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8005140:	e009      	b.n	8005156 <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8005142:	f7fc fa87 	bl	8001654 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005150:	d901      	bls.n	8005156 <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e007      	b.n	8005166 <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8005156:	4b07      	ldr	r3, [pc, #28]	; (8005174 <HAL_PWREx_ConfigSupply+0x84>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005162:	d1ee      	bne.n	8005142 <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	0800fd7c 	.word	0x0800fd7c
 8005174:	58024800 	.word	0x58024800

08005178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f000 bcc9 	b.w	8005b1e <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d028      	beq.n	80051e6 <HAL_RCC_OscConfig+0x6e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d122      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d11c      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d110      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6e>
 80051dc:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80051e0:	48a2      	ldr	r0, [pc, #648]	; (800546c <HAL_RCC_OscConfig+0x2f4>)
 80051e2:	f7fb ff84 	bl	80010ee <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 809d 	beq.w	800532e <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00e      	beq.n	800521a <HAL_RCC_OscConfig+0xa2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005204:	d009      	beq.n	800521a <HAL_RCC_OscConfig+0xa2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800520e:	d004      	beq.n	800521a <HAL_RCC_OscConfig+0xa2>
 8005210:	f240 1175 	movw	r1, #373	; 0x175
 8005214:	4895      	ldr	r0, [pc, #596]	; (800546c <HAL_RCC_OscConfig+0x2f4>)
 8005216:	f7fb ff6a 	bl	80010ee <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800521a:	4b95      	ldr	r3, [pc, #596]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005224:	4b92      	ldr	r3, [pc, #584]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	2b10      	cmp	r3, #16
 800522e:	d007      	beq.n	8005240 <HAL_RCC_OscConfig+0xc8>
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	2b18      	cmp	r3, #24
 8005234:	d111      	bne.n	800525a <HAL_RCC_OscConfig+0xe2>
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d10c      	bne.n	800525a <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005240:	4b8b      	ldr	r3, [pc, #556]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d06f      	beq.n	800532c <HAL_RCC_OscConfig+0x1b4>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d16b      	bne.n	800532c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	f000 bc62 	b.w	8005b1e <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0xfa>
 8005264:	4b82      	ldr	r3, [pc, #520]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a81      	ldr	r2, [pc, #516]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 800526a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e02e      	b.n	80052d0 <HAL_RCC_OscConfig+0x158>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x11c>
 800527a:	4b7d      	ldr	r3, [pc, #500]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a7c      	ldr	r2, [pc, #496]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4b7a      	ldr	r3, [pc, #488]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a79      	ldr	r2, [pc, #484]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 800528c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e01d      	b.n	80052d0 <HAL_RCC_OscConfig+0x158>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800529c:	d10c      	bne.n	80052b8 <HAL_RCC_OscConfig+0x140>
 800529e:	4b74      	ldr	r3, [pc, #464]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a73      	ldr	r2, [pc, #460]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	4b71      	ldr	r3, [pc, #452]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a70      	ldr	r2, [pc, #448]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e00b      	b.n	80052d0 <HAL_RCC_OscConfig+0x158>
 80052b8:	4b6d      	ldr	r3, [pc, #436]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a6c      	ldr	r2, [pc, #432]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	4b6a      	ldr	r3, [pc, #424]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a69      	ldr	r2, [pc, #420]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d014      	beq.n	8005302 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fc f9bc 	bl	8001654 <HAL_GetTick>
 80052dc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052de:	e009      	b.n	80052f4 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e0:	f7fc f9b8 	bl	8001654 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	; 0x64
 80052ec:	d902      	bls.n	80052f4 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	f000 bc15 	b.w	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052f4:	4b5e      	ldr	r3, [pc, #376]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ef      	beq.n	80052e0 <HAL_RCC_OscConfig+0x168>
 8005300:	e015      	b.n	800532e <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005302:	f7fc f9a7 	bl	8001654 <HAL_GetTick>
 8005306:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005308:	e009      	b.n	800531e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800530a:	f7fc f9a3 	bl	8001654 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b64      	cmp	r3, #100	; 0x64
 8005316:	d902      	bls.n	800531e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	f000 bc00 	b.w	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800531e:	4b54      	ldr	r3, [pc, #336]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1ef      	bne.n	800530a <HAL_RCC_OscConfig+0x192>
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 80d8 	beq.w	80054ec <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d018      	beq.n	8005376 <HAL_RCC_OscConfig+0x1fe>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d014      	beq.n	8005376 <HAL_RCC_OscConfig+0x1fe>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d010      	beq.n	8005376 <HAL_RCC_OscConfig+0x1fe>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b09      	cmp	r3, #9
 800535a:	d00c      	beq.n	8005376 <HAL_RCC_OscConfig+0x1fe>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	2b11      	cmp	r3, #17
 8005362:	d008      	beq.n	8005376 <HAL_RCC_OscConfig+0x1fe>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b19      	cmp	r3, #25
 800536a:	d004      	beq.n	8005376 <HAL_RCC_OscConfig+0x1fe>
 800536c:	f240 11a9 	movw	r1, #425	; 0x1a9
 8005370:	483e      	ldr	r0, [pc, #248]	; (800546c <HAL_RCC_OscConfig+0x2f4>)
 8005372:	f7fb febc 	bl	80010ee <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b7f      	cmp	r3, #127	; 0x7f
 800537c:	d904      	bls.n	8005388 <HAL_RCC_OscConfig+0x210>
 800537e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005382:	483a      	ldr	r0, [pc, #232]	; (800546c <HAL_RCC_OscConfig+0x2f4>)
 8005384:	f7fb feb3 	bl	80010ee <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005388:	4b39      	ldr	r3, [pc, #228]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005390:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005392:	4b37      	ldr	r3, [pc, #220]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d007      	beq.n	80053ae <HAL_RCC_OscConfig+0x236>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b18      	cmp	r3, #24
 80053a2:	d149      	bne.n	8005438 <HAL_RCC_OscConfig+0x2c0>
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d144      	bne.n	8005438 <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ae:	4b30      	ldr	r3, [pc, #192]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_RCC_OscConfig+0x24e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e3ab      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053c6:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 0219 	bic.w	r2, r3, #25
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4927      	ldr	r1, [pc, #156]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fc f93c 	bl	8001654 <HAL_GetTick>
 80053dc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e0:	f7fc f938 	bl	8001654 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e395      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053f2:	4b1f      	ldr	r3, [pc, #124]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fe:	f7fc f957 	bl	80016b0 <HAL_GetREVID>
 8005402:	4602      	mov	r2, r0
 8005404:	f241 0303 	movw	r3, #4099	; 0x1003
 8005408:	429a      	cmp	r2, r3
 800540a:	d80a      	bhi.n	8005422 <HAL_RCC_OscConfig+0x2aa>
 800540c:	4b18      	ldr	r3, [pc, #96]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	031b      	lsls	r3, r3, #12
 800541a:	4915      	ldr	r1, [pc, #84]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005420:	e064      	b.n	80054ec <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005422:	4b13      	ldr	r3, [pc, #76]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	490f      	ldr	r1, [pc, #60]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005432:	4313      	orrs	r3, r2
 8005434:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005436:	e059      	b.n	80054ec <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d03c      	beq.n	80054ba <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 0219 	bic.w	r2, r3, #25
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4908      	ldr	r1, [pc, #32]	; (8005470 <HAL_RCC_OscConfig+0x2f8>)
 800544e:	4313      	orrs	r3, r2
 8005450:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fc f8ff 	bl	8001654 <HAL_GetTick>
 8005456:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005458:	e00c      	b.n	8005474 <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800545a:	f7fc f8fb 	bl	8001654 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d905      	bls.n	8005474 <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e358      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
 800546c:	0800fdb8 	.word	0x0800fdb8
 8005470:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005474:	4b95      	ldr	r3, [pc, #596]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0ec      	beq.n	800545a <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005480:	f7fc f916 	bl	80016b0 <HAL_GetREVID>
 8005484:	4602      	mov	r2, r0
 8005486:	f241 0303 	movw	r3, #4099	; 0x1003
 800548a:	429a      	cmp	r2, r3
 800548c:	d80a      	bhi.n	80054a4 <HAL_RCC_OscConfig+0x32c>
 800548e:	4b8f      	ldr	r3, [pc, #572]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	031b      	lsls	r3, r3, #12
 800549c:	498b      	ldr	r1, [pc, #556]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	604b      	str	r3, [r1, #4]
 80054a2:	e023      	b.n	80054ec <HAL_RCC_OscConfig+0x374>
 80054a4:	4b89      	ldr	r3, [pc, #548]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	4986      	ldr	r1, [pc, #536]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
 80054b8:	e018      	b.n	80054ec <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ba:	4b84      	ldr	r3, [pc, #528]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a83      	ldr	r2, [pc, #524]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fc f8c5 	bl	8001654 <HAL_GetTick>
 80054ca:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ce:	f7fc f8c1 	bl	8001654 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e31e      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054e0:	4b7a      	ldr	r3, [pc, #488]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80a5 	beq.w	8005644 <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_RCC_OscConfig+0x39c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d004      	beq.n	8005514 <HAL_RCC_OscConfig+0x39c>
 800550a:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800550e:	4870      	ldr	r0, [pc, #448]	; (80056d0 <HAL_RCC_OscConfig+0x558>)
 8005510:	f7fb fded 	bl	80010ee <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	2b1f      	cmp	r3, #31
 800551a:	d904      	bls.n	8005526 <HAL_RCC_OscConfig+0x3ae>
 800551c:	f240 11fb 	movw	r1, #507	; 0x1fb
 8005520:	486b      	ldr	r0, [pc, #428]	; (80056d0 <HAL_RCC_OscConfig+0x558>)
 8005522:	f7fb fde4 	bl	80010ee <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005526:	4b69      	ldr	r3, [pc, #420]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800552e:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005530:	4b66      	ldr	r3, [pc, #408]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d007      	beq.n	800554c <HAL_RCC_OscConfig+0x3d4>
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b18      	cmp	r3, #24
 8005540:	d12d      	bne.n	800559e <HAL_RCC_OscConfig+0x426>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b01      	cmp	r3, #1
 800554a:	d128      	bne.n	800559e <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800554c:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_OscConfig+0x3ec>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	2b80      	cmp	r3, #128	; 0x80
 800555e:	d001      	beq.n	8005564 <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e2dc      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005564:	f7fc f8a4 	bl	80016b0 <HAL_GetREVID>
 8005568:	4602      	mov	r2, r0
 800556a:	f241 0303 	movw	r3, #4099	; 0x1003
 800556e:	429a      	cmp	r2, r3
 8005570:	d80a      	bhi.n	8005588 <HAL_RCC_OscConfig+0x410>
 8005572:	4b56      	ldr	r3, [pc, #344]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	069b      	lsls	r3, r3, #26
 8005580:	4952      	ldr	r1, [pc, #328]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005586:	e05d      	b.n	8005644 <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005588:	4b50      	ldr	r3, [pc, #320]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	494d      	ldr	r1, [pc, #308]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005598:	4313      	orrs	r3, r2
 800559a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800559c:	e052      	b.n	8005644 <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d035      	beq.n	8005612 <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055a6:	4b49      	ldr	r3, [pc, #292]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a48      	ldr	r2, [pc, #288]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fc f84f 	bl	8001654 <HAL_GetTick>
 80055b6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055ba:	f7fc f84b 	bl	8001654 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e2a8      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055cc:	4b3f      	ldr	r3, [pc, #252]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055d8:	f7fc f86a 	bl	80016b0 <HAL_GetREVID>
 80055dc:	4602      	mov	r2, r0
 80055de:	f241 0303 	movw	r3, #4099	; 0x1003
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d80a      	bhi.n	80055fc <HAL_RCC_OscConfig+0x484>
 80055e6:	4b39      	ldr	r3, [pc, #228]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	069b      	lsls	r3, r3, #26
 80055f4:	4935      	ldr	r1, [pc, #212]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
 80055fa:	e023      	b.n	8005644 <HAL_RCC_OscConfig+0x4cc>
 80055fc:	4b33      	ldr	r3, [pc, #204]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	061b      	lsls	r3, r3, #24
 800560a:	4930      	ldr	r1, [pc, #192]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 800560c:	4313      	orrs	r3, r2
 800560e:	60cb      	str	r3, [r1, #12]
 8005610:	e018      	b.n	8005644 <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a2d      	ldr	r2, [pc, #180]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fc f819 	bl	8001654 <HAL_GetTick>
 8005622:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005626:	f7fc f815 	bl	8001654 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e272      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005638:	4b24      	ldr	r3, [pc, #144]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f0      	bne.n	8005626 <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d047      	beq.n	80056e0 <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_RCC_OscConfig+0x4f2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d004      	beq.n	800566a <HAL_RCC_OscConfig+0x4f2>
 8005660:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8005664:	481a      	ldr	r0, [pc, #104]	; (80056d0 <HAL_RCC_OscConfig+0x558>)
 8005666:	f7fb fd42 	bl	80010ee <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d019      	beq.n	80056a6 <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005676:	4a15      	ldr	r2, [pc, #84]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567e:	f7fb ffe9 	bl	8001654 <HAL_GetTick>
 8005682:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005686:	f7fb ffe5 	bl	8001654 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e242      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x50e>
 80056a4:	e01c      	b.n	80056e0 <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80056a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056aa:	4a08      	ldr	r2, [pc, #32]	; (80056cc <HAL_RCC_OscConfig+0x554>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b2:	f7fb ffcf 	bl	8001654 <HAL_GetTick>
 80056b6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056b8:	e00c      	b.n	80056d4 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fb ffcb 	bl	8001654 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d905      	bls.n	80056d4 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e228      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
 80056cc:	58024400 	.word	0x58024400
 80056d0:	0800fdb8 	.word	0x0800fdb8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056d4:	4b71      	ldr	r3, [pc, #452]	; (800589c <HAL_RCC_OscConfig+0x724>)
 80056d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1ec      	bne.n	80056ba <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d043      	beq.n	8005774 <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_RCC_OscConfig+0x58e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d004      	beq.n	8005706 <HAL_RCC_OscConfig+0x58e>
 80056fc:	f240 2167 	movw	r1, #615	; 0x267
 8005700:	4867      	ldr	r0, [pc, #412]	; (80058a0 <HAL_RCC_OscConfig+0x728>)
 8005702:	f7fb fcf4 	bl	80010ee <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d019      	beq.n	8005742 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800570e:	4b63      	ldr	r3, [pc, #396]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a62      	ldr	r2, [pc, #392]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005718:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800571a:	f7fb ff9b 	bl	8001654 <HAL_GetTick>
 800571e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005722:	f7fb ff97 	bl	8001654 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e1f4      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005734:	4b59      	ldr	r3, [pc, #356]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x5aa>
 8005740:	e018      	b.n	8005774 <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005742:	4b56      	ldr	r3, [pc, #344]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a55      	ldr	r2, [pc, #340]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800574c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800574e:	f7fb ff81 	bl	8001654 <HAL_GetTick>
 8005752:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005756:	f7fb ff7d 	bl	8001654 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e1da      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005768:	4b4c      	ldr	r3, [pc, #304]	; (800589c <HAL_RCC_OscConfig+0x724>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8099 	beq.w	80058b4 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <HAL_RCC_OscConfig+0x62c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d008      	beq.n	80057a4 <HAL_RCC_OscConfig+0x62c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b05      	cmp	r3, #5
 8005798:	d004      	beq.n	80057a4 <HAL_RCC_OscConfig+0x62c>
 800579a:	f240 2191 	movw	r1, #657	; 0x291
 800579e:	4840      	ldr	r0, [pc, #256]	; (80058a0 <HAL_RCC_OscConfig+0x728>)
 80057a0:	f7fb fca5 	bl	80010ee <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057a4:	4b3f      	ldr	r3, [pc, #252]	; (80058a4 <HAL_RCC_OscConfig+0x72c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a3e      	ldr	r2, [pc, #248]	; (80058a4 <HAL_RCC_OscConfig+0x72c>)
 80057aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b0:	f7fb ff50 	bl	8001654 <HAL_GetTick>
 80057b4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057b8:	f7fb ff4c 	bl	8001654 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b64      	cmp	r3, #100	; 0x64
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1a9      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ca:	4b36      	ldr	r3, [pc, #216]	; (80058a4 <HAL_RCC_OscConfig+0x72c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d106      	bne.n	80057ec <HAL_RCC_OscConfig+0x674>
 80057de:	4b2f      	ldr	r3, [pc, #188]	; (800589c <HAL_RCC_OscConfig+0x724>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a2e      	ldr	r2, [pc, #184]	; (800589c <HAL_RCC_OscConfig+0x724>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ea:	e02d      	b.n	8005848 <HAL_RCC_OscConfig+0x6d0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10c      	bne.n	800580e <HAL_RCC_OscConfig+0x696>
 80057f4:	4b29      	ldr	r3, [pc, #164]	; (800589c <HAL_RCC_OscConfig+0x724>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a28      	ldr	r2, [pc, #160]	; (800589c <HAL_RCC_OscConfig+0x724>)
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	4b26      	ldr	r3, [pc, #152]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a25      	ldr	r2, [pc, #148]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005806:	f023 0304 	bic.w	r3, r3, #4
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
 800580c:	e01c      	b.n	8005848 <HAL_RCC_OscConfig+0x6d0>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b05      	cmp	r3, #5
 8005814:	d10c      	bne.n	8005830 <HAL_RCC_OscConfig+0x6b8>
 8005816:	4b21      	ldr	r3, [pc, #132]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	4a20      	ldr	r2, [pc, #128]	; (800589c <HAL_RCC_OscConfig+0x724>)
 800581c:	f043 0304 	orr.w	r3, r3, #4
 8005820:	6713      	str	r3, [r2, #112]	; 0x70
 8005822:	4b1e      	ldr	r3, [pc, #120]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	4a1d      	ldr	r2, [pc, #116]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
 800582e:	e00b      	b.n	8005848 <HAL_RCC_OscConfig+0x6d0>
 8005830:	4b1a      	ldr	r3, [pc, #104]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4a19      	ldr	r2, [pc, #100]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
 800583c:	4b17      	ldr	r3, [pc, #92]	; (800589c <HAL_RCC_OscConfig+0x724>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	4a16      	ldr	r2, [pc, #88]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005842:	f023 0304 	bic.w	r3, r3, #4
 8005846:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d015      	beq.n	800587c <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005850:	f7fb ff00 	bl	8001654 <HAL_GetTick>
 8005854:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005856:	e00a      	b.n	800586e <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005858:	f7fb fefc 	bl	8001654 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e157      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800586e:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCC_OscConfig+0x724>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ee      	beq.n	8005858 <HAL_RCC_OscConfig+0x6e0>
 800587a:	e01b      	b.n	80058b4 <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587c:	f7fb feea 	bl	8001654 <HAL_GetTick>
 8005880:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005882:	e011      	b.n	80058a8 <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005884:	f7fb fee6 	bl	8001654 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005892:	4293      	cmp	r3, r2
 8005894:	d908      	bls.n	80058a8 <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e141      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
 800589a:	bf00      	nop
 800589c:	58024400 	.word	0x58024400
 80058a0:	0800fdb8 	.word	0x0800fdb8
 80058a4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058a8:	4b9f      	ldr	r3, [pc, #636]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e7      	bne.n	8005884 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00c      	beq.n	80058d6 <HAL_RCC_OscConfig+0x75e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d008      	beq.n	80058d6 <HAL_RCC_OscConfig+0x75e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d004      	beq.n	80058d6 <HAL_RCC_OscConfig+0x75e>
 80058cc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80058d0:	4896      	ldr	r0, [pc, #600]	; (8005b2c <HAL_RCC_OscConfig+0x9b4>)
 80058d2:	f7fb fc0c 	bl	80010ee <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 811e 	beq.w	8005b1c <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058e0:	4b91      	ldr	r3, [pc, #580]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058e8:	2b18      	cmp	r3, #24
 80058ea:	f000 8115 	beq.w	8005b18 <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	f040 80f6 	bne.w	8005ae4 <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d010      	beq.n	8005922 <HAL_RCC_OscConfig+0x7aa>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <HAL_RCC_OscConfig+0x7aa>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	2b03      	cmp	r3, #3
 800590e:	d008      	beq.n	8005922 <HAL_RCC_OscConfig+0x7aa>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	2b02      	cmp	r3, #2
 8005916:	d004      	beq.n	8005922 <HAL_RCC_OscConfig+0x7aa>
 8005918:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800591c:	4883      	ldr	r0, [pc, #524]	; (8005b2c <HAL_RCC_OscConfig+0x9b4>)
 800591e:	f7fb fbe6 	bl	80010ee <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_RCC_OscConfig+0x7ba>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	2b3f      	cmp	r3, #63	; 0x3f
 8005930:	d904      	bls.n	800593c <HAL_RCC_OscConfig+0x7c4>
 8005932:	f240 21cd 	movw	r1, #717	; 0x2cd
 8005936:	487d      	ldr	r0, [pc, #500]	; (8005b2c <HAL_RCC_OscConfig+0x9b4>)
 8005938:	f7fb fbd9 	bl	80010ee <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	2b03      	cmp	r3, #3
 8005942:	d904      	bls.n	800594e <HAL_RCC_OscConfig+0x7d6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d904      	bls.n	8005958 <HAL_RCC_OscConfig+0x7e0>
 800594e:	f240 21ce 	movw	r1, #718	; 0x2ce
 8005952:	4876      	ldr	r0, [pc, #472]	; (8005b2c <HAL_RCC_OscConfig+0x9b4>)
 8005954:	f7fb fbcb 	bl	80010ee <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_RCC_OscConfig+0x7f0>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005964:	2b80      	cmp	r3, #128	; 0x80
 8005966:	d904      	bls.n	8005972 <HAL_RCC_OscConfig+0x7fa>
 8005968:	f240 21cf 	movw	r1, #719	; 0x2cf
 800596c:	486f      	ldr	r0, [pc, #444]	; (8005b2c <HAL_RCC_OscConfig+0x9b4>)
 800596e:	f7fb fbbe 	bl	80010ee <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_RCC_OscConfig+0x80a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	2b80      	cmp	r3, #128	; 0x80
 8005980:	d904      	bls.n	800598c <HAL_RCC_OscConfig+0x814>
 8005982:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8005986:	4869      	ldr	r0, [pc, #420]	; (8005b2c <HAL_RCC_OscConfig+0x9b4>)
 8005988:	f7fb fbb1 	bl	80010ee <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_RCC_OscConfig+0x824>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	2b80      	cmp	r3, #128	; 0x80
 800599a:	d904      	bls.n	80059a6 <HAL_RCC_OscConfig+0x82e>
 800599c:	f240 21d1 	movw	r1, #721	; 0x2d1
 80059a0:	4862      	ldr	r0, [pc, #392]	; (8005b2c <HAL_RCC_OscConfig+0x9b4>)
 80059a2:	f7fb fba4 	bl	80010ee <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ae:	d304      	bcc.n	80059ba <HAL_RCC_OscConfig+0x842>
 80059b0:	f240 21d2 	movw	r1, #722	; 0x2d2
 80059b4:	485d      	ldr	r0, [pc, #372]	; (8005b2c <HAL_RCC_OscConfig+0x9b4>)
 80059b6:	f7fb fb9a 	bl	80010ee <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b5b      	ldr	r3, [pc, #364]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a5a      	ldr	r2, [pc, #360]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 80059c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c6:	f7fb fe45 	bl	8001654 <HAL_GetTick>
 80059ca:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ce:	f7fb fe41 	bl	8001654 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e09e      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059e0:	4b51      	ldr	r3, [pc, #324]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f0      	bne.n	80059ce <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059ec:	4b4e      	ldr	r3, [pc, #312]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 80059ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f0:	4b4f      	ldr	r3, [pc, #316]	; (8005b30 <HAL_RCC_OscConfig+0x9b8>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059fc:	0112      	lsls	r2, r2, #4
 80059fe:	430a      	orrs	r2, r1
 8005a00:	4949      	ldr	r1, [pc, #292]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	628b      	str	r3, [r1, #40]	; 0x28
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a14:	3b01      	subs	r3, #1
 8005a16:	025b      	lsls	r3, r3, #9
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	3b01      	subs	r3, #1
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a36:	493c      	ldr	r1, [pc, #240]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a3c:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	4a39      	ldr	r2, [pc, #228]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a48:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4c:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <HAL_RCC_OscConfig+0x9bc>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a54:	00d2      	lsls	r2, r2, #3
 8005a56:	4934      	ldr	r1, [pc, #208]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a5c:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	f023 020c 	bic.w	r2, r3, #12
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	492f      	ldr	r1, [pc, #188]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a6e:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	f023 0202 	bic.w	r2, r3, #2
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	492b      	ldr	r1, [pc, #172]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a28      	ldr	r2, [pc, #160]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a98:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005aa4:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	4a1f      	ldr	r2, [pc, #124]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1c      	ldr	r2, [pc, #112]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fb fdca 	bl	8001654 <HAL_GetTick>
 8005ac0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fb fdc6 	bl	8001654 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e023      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x94c>
 8005ae2:	e01b      	b.n	8005b1c <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae4:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a0f      	ldr	r2, [pc, #60]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fb fdb0 	bl	8001654 <HAL_GetTick>
 8005af4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fb fdac 	bl	8001654 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e009      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <HAL_RCC_OscConfig+0x9b0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x980>
 8005b16:	e001      	b.n	8005b1c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3728      	adds	r7, #40	; 0x28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	0800fdb8 	.word	0x0800fdb8
 8005b30:	fffffc0c 	.word	0xfffffc0c
 8005b34:	ffff0007 	.word	0xffff0007

08005b38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e345      	b.n	80061d8 <HAL_RCC_ClockConfig+0x6a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x24>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b3f      	cmp	r3, #63	; 0x3f
 8005b5a:	d904      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x2e>
 8005b5c:	f240 3152 	movw	r1, #850	; 0x352
 8005b60:	4827      	ldr	r0, [pc, #156]	; (8005c00 <HAL_RCC_ClockConfig+0xc8>)
 8005b62:	f7fb fac4 	bl	80010ee <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d031      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d02e      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d02b      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d028      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d025      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b05      	cmp	r3, #5
 8005b88:	d022      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d01f      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b07      	cmp	r3, #7
 8005b94:	d01c      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d019      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b09      	cmp	r3, #9
 8005ba0:	d016      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b0a      	cmp	r3, #10
 8005ba6:	d013      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b0b      	cmp	r3, #11
 8005bac:	d010      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b0c      	cmp	r3, #12
 8005bb2:	d00d      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b0d      	cmp	r3, #13
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b0e      	cmp	r3, #14
 8005bbe:	d007      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b0f      	cmp	r3, #15
 8005bc4:	d004      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x98>
 8005bc6:	f240 3153 	movw	r1, #851	; 0x353
 8005bca:	480d      	ldr	r0, [pc, #52]	; (8005c00 <HAL_RCC_ClockConfig+0xc8>)
 8005bcc:	f7fb fa8f 	bl	80010ee <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <HAL_RCC_ClockConfig+0xcc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d914      	bls.n	8005c08 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <HAL_RCC_ClockConfig+0xcc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f023 020f 	bic.w	r2, r3, #15
 8005be6:	4907      	ldr	r1, [pc, #28]	; (8005c04 <HAL_RCC_ClockConfig+0xcc>)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bee:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <HAL_RCC_ClockConfig+0xcc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d005      	beq.n	8005c08 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e2eb      	b.n	80061d8 <HAL_RCC_ClockConfig+0x6a0>
 8005c00:	0800fdb8 	.word	0x0800fdb8
 8005c04:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d029      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	4b9a      	ldr	r3, [pc, #616]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d921      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d014      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x11e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d010      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x11e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b50      	cmp	r3, #80	; 0x50
 8005c3a:	d00c      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x11e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b60      	cmp	r3, #96	; 0x60
 8005c42:	d008      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x11e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b70      	cmp	r3, #112	; 0x70
 8005c4a:	d004      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x11e>
 8005c4c:	f240 316e 	movw	r1, #878	; 0x36e
 8005c50:	488d      	ldr	r0, [pc, #564]	; (8005e88 <HAL_RCC_ClockConfig+0x350>)
 8005c52:	f7fb fa4c 	bl	80010ee <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c56:	4b8b      	ldr	r3, [pc, #556]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	4988      	ldr	r1, [pc, #544]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d029      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	4b82      	ldr	r3, [pc, #520]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d921      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d014      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x17e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d010      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x17e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	2b50      	cmp	r3, #80	; 0x50
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x17e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	2b60      	cmp	r3, #96	; 0x60
 8005ca2:	d008      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x17e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	2b70      	cmp	r3, #112	; 0x70
 8005caa:	d004      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x17e>
 8005cac:	f44f 715e 	mov.w	r1, #888	; 0x378
 8005cb0:	4875      	ldr	r0, [pc, #468]	; (8005e88 <HAL_RCC_ClockConfig+0x350>)
 8005cb2:	f7fb fa1c 	bl	80010ee <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cb6:	4b73      	ldr	r3, [pc, #460]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	4970      	ldr	r1, [pc, #448]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d02d      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	4b6a      	ldr	r3, [pc, #424]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d925      	bls.n	8005d30 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d018      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x1e6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf4:	d013      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x1e6>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005cfe:	d00e      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x1e6>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d08:	d009      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x1e6>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d12:	d004      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x1e6>
 8005d14:	f240 3182 	movw	r1, #898	; 0x382
 8005d18:	485b      	ldr	r0, [pc, #364]	; (8005e88 <HAL_RCC_ClockConfig+0x350>)
 8005d1a:	f7fb f9e8 	bl	80010ee <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d1e:	4b59      	ldr	r3, [pc, #356]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	4956      	ldr	r1, [pc, #344]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d029      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d921      	bls.n	8005d90 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d014      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x246>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	2b40      	cmp	r3, #64	; 0x40
 8005d5a:	d010      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x246>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	2b50      	cmp	r3, #80	; 0x50
 8005d62:	d00c      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x246>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	2b60      	cmp	r3, #96	; 0x60
 8005d6a:	d008      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x246>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	2b70      	cmp	r3, #112	; 0x70
 8005d72:	d004      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x246>
 8005d74:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8005d78:	4843      	ldr	r0, [pc, #268]	; (8005e88 <HAL_RCC_ClockConfig+0x350>)
 8005d7a:	f7fb f9b8 	bl	80010ee <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d7e:	4b41      	ldr	r3, [pc, #260]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	493e      	ldr	r1, [pc, #248]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d039      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	4b38      	ldr	r3, [pc, #224]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d931      	bls.n	8005e10 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d024      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d020      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	2b09      	cmp	r3, #9
 8005dc2:	d01c      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b0a      	cmp	r3, #10
 8005dca:	d018      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b0b      	cmp	r3, #11
 8005dd2:	d014      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	d010      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	2b0d      	cmp	r3, #13
 8005de2:	d00c      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	2b0e      	cmp	r3, #14
 8005dea:	d008      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	2b0f      	cmp	r3, #15
 8005df2:	d004      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2c6>
 8005df4:	f240 3197 	movw	r1, #919	; 0x397
 8005df8:	4823      	ldr	r0, [pc, #140]	; (8005e88 <HAL_RCC_ClockConfig+0x350>)
 8005dfa:	f7fb f978 	bl	80010ee <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dfe:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f023 020f 	bic.w	r2, r3, #15
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	491e      	ldr	r1, [pc, #120]	; (8005e84 <HAL_RCC_ClockConfig+0x34c>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80a2 	beq.w	8005f62 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d032      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2e:	d02d      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005e38:	d028      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005e42:	d023      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005e4c:	d01e      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e56:	d019      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005e60:	d014      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005e6a:	d00f      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e76:	f240 319f 	movw	r1, #927	; 0x39f
 8005e7a:	4803      	ldr	r0, [pc, #12]	; (8005e88 <HAL_RCC_ClockConfig+0x350>)
 8005e7c:	f7fb f937 	bl	80010ee <assert_failed>
 8005e80:	e004      	b.n	8005e8c <HAL_RCC_ClockConfig+0x354>
 8005e82:	bf00      	nop
 8005e84:	58024400 	.word	0x58024400
 8005e88:	0800fdb8 	.word	0x0800fdb8
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d010      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x37e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x37e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d008      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x37e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d004      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x37e>
 8005eac:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8005eb0:	4858      	ldr	r0, [pc, #352]	; (8006014 <HAL_RCC_ClockConfig+0x4dc>)
 8005eb2:	f7fb f91c 	bl	80010ee <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005eb6:	4b58      	ldr	r3, [pc, #352]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	4955      	ldr	r1, [pc, #340]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ed0:	4b51      	ldr	r3, [pc, #324]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d121      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e17b      	b.n	80061d8 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ee8:	4b4b      	ldr	r3, [pc, #300]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d115      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e16f      	b.n	80061d8 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d107      	bne.n	8005f10 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f00:	4b45      	ldr	r3, [pc, #276]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e163      	b.n	80061d8 <HAL_RCC_ClockConfig+0x6a0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f10:	4b41      	ldr	r3, [pc, #260]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e15b      	b.n	80061d8 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f20:	4b3d      	ldr	r3, [pc, #244]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f023 0207 	bic.w	r2, r3, #7
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	493a      	ldr	r1, [pc, #232]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f32:	f7fb fb8f 	bl	8001654 <HAL_GetTick>
 8005f36:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f38:	e00a      	b.n	8005f50 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f3a:	f7fb fb8b 	bl	8001654 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e143      	b.n	80061d8 <HAL_RCC_ClockConfig+0x6a0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f50:	4b31      	ldr	r3, [pc, #196]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d1eb      	bne.n	8005f3a <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d039      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	4b29      	ldr	r3, [pc, #164]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d231      	bcs.n	8005fe2 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d024      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d020      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d01c      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b0a      	cmp	r3, #10
 8005f9c:	d018      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b0b      	cmp	r3, #11
 8005fa4:	d014      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b0c      	cmp	r3, #12
 8005fac:	d010      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	2b0d      	cmp	r3, #13
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2b0e      	cmp	r3, #14
 8005fbc:	d008      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	d004      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x498>
 8005fc6:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8005fca:	4812      	ldr	r0, [pc, #72]	; (8006014 <HAL_RCC_ClockConfig+0x4dc>)
 8005fcc:	f7fb f88f 	bl	80010ee <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd0:	4b11      	ldr	r3, [pc, #68]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f023 020f 	bic.w	r2, r3, #15
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	490e      	ldr	r1, [pc, #56]	; (8006018 <HAL_RCC_ClockConfig+0x4e0>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe2:	4b0e      	ldr	r3, [pc, #56]	; (800601c <HAL_RCC_ClockConfig+0x4e4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d217      	bcs.n	8006020 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <HAL_RCC_ClockConfig+0x4e4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f023 020f 	bic.w	r2, r3, #15
 8005ff8:	4908      	ldr	r1, [pc, #32]	; (800601c <HAL_RCC_ClockConfig+0x4e4>)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <HAL_RCC_ClockConfig+0x4e4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d008      	beq.n	8006020 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e0e2      	b.n	80061d8 <HAL_RCC_ClockConfig+0x6a0>
 8006012:	bf00      	nop
 8006014:	0800fdb8 	.word	0x0800fdb8
 8006018:	58024400 	.word	0x58024400
 800601c:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d029      	beq.n	8006080 <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	4b6b      	ldr	r3, [pc, #428]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006038:	429a      	cmp	r2, r3
 800603a:	d221      	bcs.n	8006080 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d014      	beq.n	800606e <HAL_RCC_ClockConfig+0x536>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d010      	beq.n	800606e <HAL_RCC_ClockConfig+0x536>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b50      	cmp	r3, #80	; 0x50
 8006052:	d00c      	beq.n	800606e <HAL_RCC_ClockConfig+0x536>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b60      	cmp	r3, #96	; 0x60
 800605a:	d008      	beq.n	800606e <HAL_RCC_ClockConfig+0x536>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b70      	cmp	r3, #112	; 0x70
 8006062:	d004      	beq.n	800606e <HAL_RCC_ClockConfig+0x536>
 8006064:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8006068:	485e      	ldr	r0, [pc, #376]	; (80061e4 <HAL_RCC_ClockConfig+0x6ac>)
 800606a:	f7fb f840 	bl	80010ee <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800606e:	4b5c      	ldr	r3, [pc, #368]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	4959      	ldr	r1, [pc, #356]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 800607c:	4313      	orrs	r3, r2
 800607e:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d029      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	4b53      	ldr	r3, [pc, #332]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006098:	429a      	cmp	r2, r3
 800609a:	d221      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d014      	beq.n	80060ce <HAL_RCC_ClockConfig+0x596>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d010      	beq.n	80060ce <HAL_RCC_ClockConfig+0x596>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	2b50      	cmp	r3, #80	; 0x50
 80060b2:	d00c      	beq.n	80060ce <HAL_RCC_ClockConfig+0x596>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	2b60      	cmp	r3, #96	; 0x60
 80060ba:	d008      	beq.n	80060ce <HAL_RCC_ClockConfig+0x596>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	2b70      	cmp	r3, #112	; 0x70
 80060c2:	d004      	beq.n	80060ce <HAL_RCC_ClockConfig+0x596>
 80060c4:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80060c8:	4846      	ldr	r0, [pc, #280]	; (80061e4 <HAL_RCC_ClockConfig+0x6ac>)
 80060ca:	f7fb f810 	bl	80010ee <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060ce:	4b44      	ldr	r3, [pc, #272]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	4941      	ldr	r1, [pc, #260]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d02d      	beq.n	8006148 <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	4b3b      	ldr	r3, [pc, #236]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d225      	bcs.n	8006148 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d018      	beq.n	8006136 <HAL_RCC_ClockConfig+0x5fe>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610c:	d013      	beq.n	8006136 <HAL_RCC_ClockConfig+0x5fe>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006116:	d00e      	beq.n	8006136 <HAL_RCC_ClockConfig+0x5fe>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006120:	d009      	beq.n	8006136 <HAL_RCC_ClockConfig+0x5fe>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800612a:	d004      	beq.n	8006136 <HAL_RCC_ClockConfig+0x5fe>
 800612c:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8006130:	482c      	ldr	r0, [pc, #176]	; (80061e4 <HAL_RCC_ClockConfig+0x6ac>)
 8006132:	f7fa ffdc 	bl	80010ee <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006136:	4b2a      	ldr	r3, [pc, #168]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	4927      	ldr	r1, [pc, #156]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 8006144:	4313      	orrs	r3, r2
 8006146:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d029      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	4b21      	ldr	r3, [pc, #132]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006160:	429a      	cmp	r2, r3
 8006162:	d221      	bcs.n	80061a8 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d014      	beq.n	8006196 <HAL_RCC_ClockConfig+0x65e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	d010      	beq.n	8006196 <HAL_RCC_ClockConfig+0x65e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	2b50      	cmp	r3, #80	; 0x50
 800617a:	d00c      	beq.n	8006196 <HAL_RCC_ClockConfig+0x65e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b60      	cmp	r3, #96	; 0x60
 8006182:	d008      	beq.n	8006196 <HAL_RCC_ClockConfig+0x65e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	2b70      	cmp	r3, #112	; 0x70
 800618a:	d004      	beq.n	8006196 <HAL_RCC_ClockConfig+0x65e>
 800618c:	f240 4112 	movw	r1, #1042	; 0x412
 8006190:	4814      	ldr	r0, [pc, #80]	; (80061e4 <HAL_RCC_ClockConfig+0x6ac>)
 8006192:	f7fa ffac 	bl	80010ee <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	490f      	ldr	r1, [pc, #60]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061a8:	f000 f824 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 80061ac:	4601      	mov	r1, r0
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <HAL_RCC_ClockConfig+0x6a8>)
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <HAL_RCC_ClockConfig+0x6b0>)
 80061ba:	5cd3      	ldrb	r3, [r2, r3]
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	fa21 f303 	lsr.w	r3, r1, r3
 80061c4:	4a09      	ldr	r2, [pc, #36]	; (80061ec <HAL_RCC_ClockConfig+0x6b4>)
 80061c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <HAL_RCC_ClockConfig+0x6b8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fb f9f7 	bl	80015c0 <HAL_InitTick>
 80061d2:	4603      	mov	r3, r0
 80061d4:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80061d6:	7afb      	ldrb	r3, [r7, #11]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	58024400 	.word	0x58024400
 80061e4:	0800fdb8 	.word	0x0800fdb8
 80061e8:	080102c0 	.word	0x080102c0
 80061ec:	24000000 	.word	0x24000000
 80061f0:	24000008 	.word	0x24000008

080061f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b089      	sub	sp, #36	; 0x24
 80061f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061fa:	4baf      	ldr	r3, [pc, #700]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006202:	2b18      	cmp	r3, #24
 8006204:	f200 814e 	bhi.w	80064a4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006275 	.word	0x08006275
 8006214:	080064a5 	.word	0x080064a5
 8006218:	080064a5 	.word	0x080064a5
 800621c:	080064a5 	.word	0x080064a5
 8006220:	080064a5 	.word	0x080064a5
 8006224:	080064a5 	.word	0x080064a5
 8006228:	080064a5 	.word	0x080064a5
 800622c:	080064a5 	.word	0x080064a5
 8006230:	0800629b 	.word	0x0800629b
 8006234:	080064a5 	.word	0x080064a5
 8006238:	080064a5 	.word	0x080064a5
 800623c:	080064a5 	.word	0x080064a5
 8006240:	080064a5 	.word	0x080064a5
 8006244:	080064a5 	.word	0x080064a5
 8006248:	080064a5 	.word	0x080064a5
 800624c:	080064a5 	.word	0x080064a5
 8006250:	080062a1 	.word	0x080062a1
 8006254:	080064a5 	.word	0x080064a5
 8006258:	080064a5 	.word	0x080064a5
 800625c:	080064a5 	.word	0x080064a5
 8006260:	080064a5 	.word	0x080064a5
 8006264:	080064a5 	.word	0x080064a5
 8006268:	080064a5 	.word	0x080064a5
 800626c:	080064a5 	.word	0x080064a5
 8006270:	080062a7 	.word	0x080062a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006274:	4b90      	ldr	r3, [pc, #576]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006280:	4b8d      	ldr	r3, [pc, #564]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	4a8c      	ldr	r2, [pc, #560]	; (80064bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006292:	e10a      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006294:	4b89      	ldr	r3, [pc, #548]	; (80064bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006296:	61bb      	str	r3, [r7, #24]
    break;
 8006298:	e107      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800629a:	4b89      	ldr	r3, [pc, #548]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800629c:	61bb      	str	r3, [r7, #24]
    break;
 800629e:	e104      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80062a0:	4b88      	ldr	r3, [pc, #544]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80062a2:	61bb      	str	r3, [r7, #24]
    break;
 80062a4:	e101      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062a6:	4b84      	ldr	r3, [pc, #528]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80062b0:	4b81      	ldr	r3, [pc, #516]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	091b      	lsrs	r3, r3, #4
 80062b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062bc:	4b7e      	ldr	r3, [pc, #504]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80062c6:	4b7c      	ldr	r3, [pc, #496]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	08db      	lsrs	r3, r3, #3
 80062cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80da 	beq.w	800649e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d05a      	beq.n	80063a6 <HAL_RCC_GetSysClockFreq+0x1b2>
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d302      	bcc.n	80062fa <HAL_RCC_GetSysClockFreq+0x106>
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d078      	beq.n	80063ea <HAL_RCC_GetSysClockFreq+0x1f6>
 80062f8:	e099      	b.n	800642e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062fa:	4b6f      	ldr	r3, [pc, #444]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02d      	beq.n	8006362 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006306:	4b6c      	ldr	r3, [pc, #432]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	08db      	lsrs	r3, r3, #3
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	4a6a      	ldr	r2, [pc, #424]	; (80064bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006312:	fa22 f303 	lsr.w	r3, r2, r3
 8006316:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006330:	4b61      	ldr	r3, [pc, #388]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006340:	ed97 6a02 	vldr	s12, [r7, #8]
 8006344:	eddf 5a60 	vldr	s11, [pc, #384]	; 80064c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006360:	e087      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80064cc <HAL_RCC_GetSysClockFreq+0x2d8>
 8006370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006384:	ed97 6a02 	vldr	s12, [r7, #8]
 8006388:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80064c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800638c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a4:	e065      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80064d0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80063b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b8:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80063cc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80064c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80063d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e8:	e043      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	ee07 3a90 	vmov	s15, r3
 80063f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80064d4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80063f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fc:	4b2e      	ldr	r3, [pc, #184]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006404:	ee07 3a90 	vmov	s15, r3
 8006408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006410:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80064c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006428:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800642c:	e021      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006438:	eddf 6a25 	vldr	s13, [pc, #148]	; 80064d0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800643c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006440:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006450:	ed97 6a02 	vldr	s12, [r7, #8]
 8006454:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80064c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006470:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	0a5b      	lsrs	r3, r3, #9
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	3301      	adds	r3, #1
 800647e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800648a:	edd7 6a07 	vldr	s13, [r7, #28]
 800648e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006496:	ee17 3a90 	vmov	r3, s15
 800649a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800649c:	e005      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	61bb      	str	r3, [r7, #24]
    break;
 80064a2:	e002      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80064a6:	61bb      	str	r3, [r7, #24]
    break;
 80064a8:	bf00      	nop
  }

  return sysclockfreq;
 80064aa:	69bb      	ldr	r3, [r7, #24]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3724      	adds	r7, #36	; 0x24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	58024400 	.word	0x58024400
 80064bc:	03d09000 	.word	0x03d09000
 80064c0:	003d0900 	.word	0x003d0900
 80064c4:	00b71b00 	.word	0x00b71b00
 80064c8:	46000000 	.word	0x46000000
 80064cc:	4c742400 	.word	0x4c742400
 80064d0:	4a742400 	.word	0x4a742400
 80064d4:	4b371b00 	.word	0x4b371b00

080064d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064dc:	f001 fc94 	bl	8007e08 <HAL_RCCEx_GetD1SysClockFreq>
 80064e0:	4601      	mov	r1, r0
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <HAL_RCC_GetHCLKFreq+0x2c>)
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	4a07      	ldr	r2, [pc, #28]	; (8006508 <HAL_RCC_GetHCLKFreq+0x30>)
 80064ec:	5cd3      	ldrb	r3, [r2, r3]
 80064ee:	f003 031f 	and.w	r3, r3, #31
 80064f2:	fa21 f303 	lsr.w	r3, r1, r3
 80064f6:	4a05      	ldr	r2, [pc, #20]	; (800650c <HAL_RCC_GetHCLKFreq+0x34>)
 80064f8:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 80064fa:	4b04      	ldr	r3, [pc, #16]	; (800650c <HAL_RCC_GetHCLKFreq+0x34>)
 80064fc:	681b      	ldr	r3, [r3, #0]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	58024400 	.word	0x58024400
 8006508:	080102c0 	.word	0x080102c0
 800650c:	24000004 	.word	0x24000004

08006510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006514:	f7ff ffe0 	bl	80064d8 <HAL_RCC_GetHCLKFreq>
 8006518:	4601      	mov	r1, r0
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	091b      	lsrs	r3, r3, #4
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	4a04      	ldr	r2, [pc, #16]	; (8006538 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006526:	5cd3      	ldrb	r3, [r2, r3]
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006530:	4618      	mov	r0, r3
 8006532:	bd80      	pop	{r7, pc}
 8006534:	58024400 	.word	0x58024400
 8006538:	080102c0 	.word	0x080102c0

0800653c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006540:	f7ff ffca 	bl	80064d8 <HAL_RCC_GetHCLKFreq>
 8006544:	4601      	mov	r1, r0
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	4a04      	ldr	r2, [pc, #16]	; (8006564 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006552:	5cd3      	ldrb	r3, [r2, r3]
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800655c:	4618      	mov	r0, r3
 800655e:	bd80      	pop	{r7, pc}
 8006560:	58024400 	.word	0x58024400
 8006564:	080102c0 	.word	0x080102c0

08006568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006570:	2300      	movs	r3, #0
 8006572:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006574:	2300      	movs	r3, #0
 8006576:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d03d      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658c:	d013      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006592:	d802      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006598:	e01f      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x72>
 800659a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800659e:	d013      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80065a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065a4:	d01c      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80065a6:	e018      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a8:	4baf      	ldr	r3, [pc, #700]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	4aae      	ldr	r2, [pc, #696]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065b4:	e015      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3304      	adds	r3, #4
 80065ba:	2102      	movs	r1, #2
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fc3f 	bl	8007e40 <RCCEx_PLL2_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065c6:	e00c      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3324      	adds	r3, #36	; 0x24
 80065cc:	2102      	movs	r1, #2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 fd58 	bl	8008084 <RCCEx_PLL3_Config>
 80065d4:	4603      	mov	r3, r0
 80065d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065d8:	e003      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	75fb      	strb	r3, [r7, #23]
      break;
 80065de:	e000      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80065e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065e8:	4b9f      	ldr	r3, [pc, #636]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f4:	499c      	ldr	r1, [pc, #624]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	650b      	str	r3, [r1, #80]	; 0x50
 80065fa:	e001      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006608:	2b00      	cmp	r3, #0
 800660a:	d03d      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006610:	2b04      	cmp	r3, #4
 8006612:	d826      	bhi.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006631 	.word	0x08006631
 8006620:	0800663f 	.word	0x0800663f
 8006624:	08006651 	.word	0x08006651
 8006628:	08006669 	.word	0x08006669
 800662c:	08006669 	.word	0x08006669
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006630:	4b8d      	ldr	r3, [pc, #564]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4a8c      	ldr	r2, [pc, #560]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800663c:	e015      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	2100      	movs	r1, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f001 fbfb 	bl	8007e40 <RCCEx_PLL2_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800664e:	e00c      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3324      	adds	r3, #36	; 0x24
 8006654:	2100      	movs	r1, #0
 8006656:	4618      	mov	r0, r3
 8006658:	f001 fd14 	bl	8008084 <RCCEx_PLL3_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006660:	e003      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	75fb      	strb	r3, [r7, #23]
      break;
 8006666:	e000      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d109      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006670:	4b7d      	ldr	r3, [pc, #500]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	f023 0207 	bic.w	r2, r3, #7
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667c:	497a      	ldr	r1, [pc, #488]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800667e:	4313      	orrs	r3, r2
 8006680:	650b      	str	r3, [r1, #80]	; 0x50
 8006682:	e001      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006690:	2b00      	cmp	r3, #0
 8006692:	d03e      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006698:	2b80      	cmp	r3, #128	; 0x80
 800669a:	d01c      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800669c:	2b80      	cmp	r3, #128	; 0x80
 800669e:	d804      	bhi.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x142>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d00d      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80066a8:	e01e      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80066aa:	2bc0      	cmp	r3, #192	; 0xc0
 80066ac:	d01f      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x186>
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d01e      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80066b4:	e018      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b6:	4b6c      	ldr	r3, [pc, #432]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	4a6b      	ldr	r2, [pc, #428]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066c2:	e017      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3304      	adds	r3, #4
 80066c8:	2100      	movs	r1, #0
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fbb8 	bl	8007e40 <RCCEx_PLL2_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066d4:	e00e      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3324      	adds	r3, #36	; 0x24
 80066da:	2100      	movs	r1, #0
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 fcd1 	bl	8008084 <RCCEx_PLL3_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066e6:	e005      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
      break;
 80066ec:	e002      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80066f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80066fa:	4b5b      	ldr	r3, [pc, #364]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006706:	4958      	ldr	r1, [pc, #352]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006708:	4313      	orrs	r3, r2
 800670a:	650b      	str	r3, [r1, #80]	; 0x50
 800670c:	e001      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800671a:	2b00      	cmp	r3, #0
 800671c:	d044      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006728:	d01f      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800672a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800672e:	d805      	bhi.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006738:	d00e      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800673a:	e01f      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800673c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006740:	d01f      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006742:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006746:	d01e      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006748:	e018      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800674a:	4b47      	ldr	r3, [pc, #284]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	4a46      	ldr	r2, [pc, #280]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006756:	e017      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fb6e 	bl	8007e40 <RCCEx_PLL2_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006768:	e00e      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3324      	adds	r3, #36	; 0x24
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f001 fc87 	bl	8008084 <RCCEx_PLL3_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800677a:	e005      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	75fb      	strb	r3, [r7, #23]
      break;
 8006780:	e002      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006782:	bf00      	nop
 8006784:	e000      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800678e:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006792:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800679c:	4932      	ldr	r1, [pc, #200]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	658b      	str	r3, [r1, #88]	; 0x58
 80067a2:	e001      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
 80067a6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d044      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067be:	d01f      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c4:	d805      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80067ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ce:	d00e      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 80067d0:	e01f      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80067d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067d6:	d01f      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80067d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067dc:	d01e      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80067de:	e018      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e0:	4b21      	ldr	r3, [pc, #132]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	4a20      	ldr	r2, [pc, #128]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067ec:	e017      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3304      	adds	r3, #4
 80067f2:	2100      	movs	r1, #0
 80067f4:	4618      	mov	r0, r3
 80067f6:	f001 fb23 	bl	8007e40 <RCCEx_PLL2_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80067fe:	e00e      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3324      	adds	r3, #36	; 0x24
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f001 fc3c 	bl	8008084 <RCCEx_PLL3_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006810:	e005      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	75fb      	strb	r3, [r7, #23]
      break;
 8006816:	e002      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006818:	bf00      	nop
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800681c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006824:	4b10      	ldr	r3, [pc, #64]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006832:	490d      	ldr	r1, [pc, #52]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006834:	4313      	orrs	r3, r2
 8006836:	658b      	str	r3, [r1, #88]	; 0x58
 8006838:	e001      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d035      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684e:	2b10      	cmp	r3, #16
 8006850:	d00c      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006852:	2b10      	cmp	r3, #16
 8006854:	d802      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01b      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800685a:	e017      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800685c:	2b20      	cmp	r3, #32
 800685e:	d00c      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006860:	2b30      	cmp	r3, #48	; 0x30
 8006862:	d018      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006864:	e012      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006866:	bf00      	nop
 8006868:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800686c:	4baf      	ldr	r3, [pc, #700]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4aae      	ldr	r2, [pc, #696]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006878:	e00e      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3304      	adds	r3, #4
 800687e:	2102      	movs	r1, #2
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fadd 	bl	8007e40 <RCCEx_PLL2_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800688a:	e005      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
      break;
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800689e:	4ba3      	ldr	r3, [pc, #652]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068aa:	49a0      	ldr	r1, [pc, #640]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068b0:	e001      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d042      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ca:	d01f      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d0:	d805      	bhi.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x384>
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	d00e      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x392>
 80068dc:	e01f      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80068de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068e2:	d01f      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80068e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e8:	d01e      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80068ea:	e018      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ec:	4b8f      	ldr	r3, [pc, #572]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	4a8e      	ldr	r2, [pc, #568]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068f8:	e017      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f001 fa9d 	bl	8007e40 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800690a:	e00e      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3324      	adds	r3, #36	; 0x24
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f001 fbb6 	bl	8008084 <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800691c:	e005      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	75fb      	strb	r3, [r7, #23]
      break;
 8006922:	e002      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006924:	bf00      	nop
 8006926:	e000      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d109      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006930:	4b7e      	ldr	r3, [pc, #504]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006934:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693c:	497b      	ldr	r1, [pc, #492]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800693e:	4313      	orrs	r3, r2
 8006940:	650b      	str	r3, [r1, #80]	; 0x50
 8006942:	e001      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d042      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800695c:	d01b      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800695e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006962:	d805      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d022      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800696c:	d00a      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800696e:	e01b      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006970:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006974:	d01d      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800697a:	d01c      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800697c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006980:	d01b      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006982:	e011      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	2101      	movs	r1, #1
 800698a:	4618      	mov	r0, r3
 800698c:	f001 fa58 	bl	8007e40 <RCCEx_PLL2_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006994:	e012      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3324      	adds	r3, #36	; 0x24
 800699a:	2101      	movs	r1, #1
 800699c:	4618      	mov	r0, r3
 800699e:	f001 fb71 	bl	8008084 <RCCEx_PLL3_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069a6:	e009      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	e006      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069ae:	bf00      	nop
 80069b0:	e004      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069b2:	bf00      	nop
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069b6:	bf00      	nop
 80069b8:	e000      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069c2:	4b5a      	ldr	r3, [pc, #360]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ce:	4957      	ldr	r1, [pc, #348]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	650b      	str	r3, [r1, #80]	; 0x50
 80069d4:	e001      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d044      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f0:	d01b      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80069f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f6:	d805      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d022      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80069fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a00:	d00a      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006a02:	e01b      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a08:	d01d      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a0e:	d01c      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006a10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a14:	d01b      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a16:	e011      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fa0e 	bl	8007e40 <RCCEx_PLL2_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a28:	e012      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3324      	adds	r3, #36	; 0x24
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 fb27 	bl	8008084 <RCCEx_PLL3_Config>
 8006a36:	4603      	mov	r3, r0
 8006a38:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a3a:	e009      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a40:	e006      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a42:	bf00      	nop
 8006a44:	e004      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a46:	bf00      	nop
 8006a48:	e002      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a4a:	bf00      	nop
 8006a4c:	e000      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a56:	4b35      	ldr	r3, [pc, #212]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a64:	4931      	ldr	r1, [pc, #196]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	658b      	str	r3, [r1, #88]	; 0x58
 8006a6a:	e001      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02d      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a84:	d005      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a8a:	d009      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d013      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006a90:	e00f      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a92:	4b26      	ldr	r3, [pc, #152]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	4a25      	ldr	r2, [pc, #148]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006a9e:	e00c      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f9ca 	bl	8007e40 <RCCEx_PLL2_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ab0:	e003      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006acc:	4917      	ldr	r1, [pc, #92]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ad2:	e001      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d037      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d81b      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b31 	.word	0x08006b31
 8006af8:	08006b05 	.word	0x08006b05
 8006afc:	08006b13 	.word	0x08006b13
 8006b00:	08006b31 	.word	0x08006b31
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b04:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b10:	e00f      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	2102      	movs	r1, #2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 f991 	bl	8007e40 <RCCEx_PLL2_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b22:	e006      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	75fb      	strb	r3, [r7, #23]
      break;
 8006b28:	e003      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006b2a:	bf00      	nop
 8006b2c:	58024400 	.word	0x58024400
      break;
 8006b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b38:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3c:	f023 0203 	bic.w	r2, r3, #3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b44:	4901      	ldr	r1, [pc, #4]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b4a:	e003      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8006b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 829b 	beq.w	8007098 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6c:	f000 81a9 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7a:	f000 81a2 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b84:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8006b88:	f000 819b 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b92:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8006b96:	f000 8194 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ba0:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8006ba4:	f000 818d 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bae:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8006bb2:	f000 8186 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bbc:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8006bc0:	f000 817f 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bca:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8006bce:	f000 8178 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bd8:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8006bdc:	f000 8171 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006be6:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8006bea:	f000 816a 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bf4:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8006bf8:	f000 8163 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c02:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8006c06:	f000 815c 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c10:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8006c14:	f000 8155 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c1e:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8006c22:	f000 814e 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c2c:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8006c30:	f000 8147 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c3a:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8006c3e:	f000 8140 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c48:	4aa8      	ldr	r2, [pc, #672]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	f000 8139 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c56:	4aa6      	ldr	r2, [pc, #664]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	f000 8132 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c64:	4aa3      	ldr	r2, [pc, #652]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	f000 812b 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c72:	4aa1      	ldr	r2, [pc, #644]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	f000 8124 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c80:	4a9e      	ldr	r2, [pc, #632]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	f000 811d 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c8e:	4a9c      	ldr	r2, [pc, #624]	; (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	f000 8116 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c9c:	4a99      	ldr	r2, [pc, #612]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	f000 810f 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006caa:	4a97      	ldr	r2, [pc, #604]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	f000 8108 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cb8:	4a94      	ldr	r2, [pc, #592]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	f000 8101 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cc6:	4a92      	ldr	r2, [pc, #584]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	f000 80fa 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cd4:	4a8f      	ldr	r2, [pc, #572]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	f000 80f3 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ce2:	4a8d      	ldr	r2, [pc, #564]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	f000 80ec 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf0:	4a8a      	ldr	r2, [pc, #552]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	f000 80e5 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cfe:	4a88      	ldr	r2, [pc, #544]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	f000 80de 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d0c:	4a85      	ldr	r2, [pc, #532]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	f000 80d7 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d1a:	4a83      	ldr	r2, [pc, #524]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	f000 80d0 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d28:	4a80      	ldr	r2, [pc, #512]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	f000 80c9 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d36:	4a7e      	ldr	r2, [pc, #504]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	f000 80c2 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d44:	4a7b      	ldr	r2, [pc, #492]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	f000 80bb 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d52:	4a79      	ldr	r2, [pc, #484]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	f000 80b4 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d60:	4a76      	ldr	r2, [pc, #472]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	f000 80ad 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d6e:	4a74      	ldr	r2, [pc, #464]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	f000 80a6 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d7c:	4a71      	ldr	r2, [pc, #452]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	f000 809f 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d8a:	4a6f      	ldr	r2, [pc, #444]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	f000 8098 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d98:	4a6c      	ldr	r2, [pc, #432]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f000 8091 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006da6:	4a6a      	ldr	r2, [pc, #424]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	f000 808a 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006db4:	4a67      	ldr	r2, [pc, #412]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	f000 8083 	beq.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dc2:	4a65      	ldr	r2, [pc, #404]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d07c      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dce:	4a63      	ldr	r2, [pc, #396]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d076      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dda:	4a61      	ldr	r2, [pc, #388]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d070      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006de6:	4a5f      	ldr	r2, [pc, #380]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d06a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006df2:	4a5d      	ldr	r2, [pc, #372]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d064      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dfe:	4a5b      	ldr	r2, [pc, #364]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d05e      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e0a:	4a59      	ldr	r2, [pc, #356]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d058      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e16:	4a57      	ldr	r2, [pc, #348]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d052      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e22:	4a55      	ldr	r2, [pc, #340]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d04c      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e2e:	4a53      	ldr	r2, [pc, #332]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d046      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e3a:	4a51      	ldr	r2, [pc, #324]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d040      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e46:	4a4f      	ldr	r2, [pc, #316]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d03a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e52:	4a4d      	ldr	r2, [pc, #308]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d034      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e5e:	4a4b      	ldr	r2, [pc, #300]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d02e      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e6a:	4a49      	ldr	r2, [pc, #292]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d028      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e76:	4a47      	ldr	r2, [pc, #284]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d022      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e82:	4a45      	ldr	r2, [pc, #276]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d01c      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e8e:	4a43      	ldr	r2, [pc, #268]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d016      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e9a:	4a41      	ldr	r2, [pc, #260]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d010      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ea6:	4a3f      	ldr	r2, [pc, #252]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eb2:	4a3d      	ldr	r2, [pc, #244]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006eb8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006ebc:	483b      	ldr	r0, [pc, #236]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8006ebe:	f7fa f916 	bl	80010ee <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ec2:	4b3b      	ldr	r3, [pc, #236]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a3a      	ldr	r2, [pc, #232]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8006ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ece:	f7fa fbc1 	bl	8001654 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ed4:	e06e      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed6:	f7fa fbbd 	bl	8001654 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b64      	cmp	r3, #100	; 0x64
 8006ee2:	d967      	bls.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	75fb      	strb	r3, [r7, #23]
        break;
 8006ee8:	e06a      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8006eea:	bf00      	nop
 8006eec:	00010300 	.word	0x00010300
 8006ef0:	00011300 	.word	0x00011300
 8006ef4:	00012300 	.word	0x00012300
 8006ef8:	00013300 	.word	0x00013300
 8006efc:	00014300 	.word	0x00014300
 8006f00:	00015300 	.word	0x00015300
 8006f04:	00016300 	.word	0x00016300
 8006f08:	00017300 	.word	0x00017300
 8006f0c:	00018300 	.word	0x00018300
 8006f10:	00019300 	.word	0x00019300
 8006f14:	0001a300 	.word	0x0001a300
 8006f18:	0001b300 	.word	0x0001b300
 8006f1c:	0001c300 	.word	0x0001c300
 8006f20:	0001d300 	.word	0x0001d300
 8006f24:	0001e300 	.word	0x0001e300
 8006f28:	0001f300 	.word	0x0001f300
 8006f2c:	00020300 	.word	0x00020300
 8006f30:	00021300 	.word	0x00021300
 8006f34:	00022300 	.word	0x00022300
 8006f38:	00023300 	.word	0x00023300
 8006f3c:	00024300 	.word	0x00024300
 8006f40:	00025300 	.word	0x00025300
 8006f44:	00026300 	.word	0x00026300
 8006f48:	00027300 	.word	0x00027300
 8006f4c:	00028300 	.word	0x00028300
 8006f50:	00029300 	.word	0x00029300
 8006f54:	0002a300 	.word	0x0002a300
 8006f58:	0002b300 	.word	0x0002b300
 8006f5c:	0002c300 	.word	0x0002c300
 8006f60:	0002d300 	.word	0x0002d300
 8006f64:	0002e300 	.word	0x0002e300
 8006f68:	0002f300 	.word	0x0002f300
 8006f6c:	00030300 	.word	0x00030300
 8006f70:	00031300 	.word	0x00031300
 8006f74:	00032300 	.word	0x00032300
 8006f78:	00033300 	.word	0x00033300
 8006f7c:	00034300 	.word	0x00034300
 8006f80:	00035300 	.word	0x00035300
 8006f84:	00036300 	.word	0x00036300
 8006f88:	00037300 	.word	0x00037300
 8006f8c:	00038300 	.word	0x00038300
 8006f90:	00039300 	.word	0x00039300
 8006f94:	0003a300 	.word	0x0003a300
 8006f98:	0003b300 	.word	0x0003b300
 8006f9c:	0003c300 	.word	0x0003c300
 8006fa0:	0003d300 	.word	0x0003d300
 8006fa4:	0003e300 	.word	0x0003e300
 8006fa8:	0003f300 	.word	0x0003f300
 8006fac:	0800fdf0 	.word	0x0800fdf0
 8006fb0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fb4:	4bb9      	ldr	r3, [pc, #740]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d08a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d166      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fc6:	4bb6      	ldr	r3, [pc, #728]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fd0:	4053      	eors	r3, r2
 8006fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d013      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fda:	4bb1      	ldr	r3, [pc, #708]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fe4:	4bae      	ldr	r3, [pc, #696]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe8:	4aad      	ldr	r2, [pc, #692]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff0:	4bab      	ldr	r3, [pc, #684]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	4aaa      	ldr	r2, [pc, #680]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006ffc:	4aa8      	ldr	r2, [pc, #672]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700c:	d115      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700e:	f7fa fb21 	bl	8001654 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007014:	e00b      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007016:	f7fa fb1d 	bl	8001654 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	f241 3288 	movw	r2, #5000	; 0x1388
 8007024:	4293      	cmp	r3, r2
 8007026:	d902      	bls.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	75fb      	strb	r3, [r7, #23]
            break;
 800702c:	e005      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800702e:	4b9c      	ldr	r3, [pc, #624]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0ed      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d126      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800704e:	d10d      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8007050:	4b93      	ldr	r3, [pc, #588]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800705e:	0919      	lsrs	r1, r3, #4
 8007060:	4b90      	ldr	r3, [pc, #576]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007062:	400b      	ands	r3, r1
 8007064:	498e      	ldr	r1, [pc, #568]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007066:	4313      	orrs	r3, r2
 8007068:	610b      	str	r3, [r1, #16]
 800706a:	e005      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 800706c:	4b8c      	ldr	r3, [pc, #560]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	4a8b      	ldr	r2, [pc, #556]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007076:	6113      	str	r3, [r2, #16]
 8007078:	4b89      	ldr	r3, [pc, #548]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800707a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007086:	4986      	ldr	r1, [pc, #536]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007088:	4313      	orrs	r3, r2
 800708a:	670b      	str	r3, [r1, #112]	; 0x70
 800708c:	e004      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	75bb      	strb	r3, [r7, #22]
 8007092:	e001      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d07e      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070a8:	2b28      	cmp	r3, #40	; 0x28
 80070aa:	d867      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc14>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	08007183 	.word	0x08007183
 80070b8:	0800717d 	.word	0x0800717d
 80070bc:	0800717d 	.word	0x0800717d
 80070c0:	0800717d 	.word	0x0800717d
 80070c4:	0800717d 	.word	0x0800717d
 80070c8:	0800717d 	.word	0x0800717d
 80070cc:	0800717d 	.word	0x0800717d
 80070d0:	0800717d 	.word	0x0800717d
 80070d4:	08007159 	.word	0x08007159
 80070d8:	0800717d 	.word	0x0800717d
 80070dc:	0800717d 	.word	0x0800717d
 80070e0:	0800717d 	.word	0x0800717d
 80070e4:	0800717d 	.word	0x0800717d
 80070e8:	0800717d 	.word	0x0800717d
 80070ec:	0800717d 	.word	0x0800717d
 80070f0:	0800717d 	.word	0x0800717d
 80070f4:	0800716b 	.word	0x0800716b
 80070f8:	0800717d 	.word	0x0800717d
 80070fc:	0800717d 	.word	0x0800717d
 8007100:	0800717d 	.word	0x0800717d
 8007104:	0800717d 	.word	0x0800717d
 8007108:	0800717d 	.word	0x0800717d
 800710c:	0800717d 	.word	0x0800717d
 8007110:	0800717d 	.word	0x0800717d
 8007114:	08007183 	.word	0x08007183
 8007118:	0800717d 	.word	0x0800717d
 800711c:	0800717d 	.word	0x0800717d
 8007120:	0800717d 	.word	0x0800717d
 8007124:	0800717d 	.word	0x0800717d
 8007128:	0800717d 	.word	0x0800717d
 800712c:	0800717d 	.word	0x0800717d
 8007130:	0800717d 	.word	0x0800717d
 8007134:	08007183 	.word	0x08007183
 8007138:	0800717d 	.word	0x0800717d
 800713c:	0800717d 	.word	0x0800717d
 8007140:	0800717d 	.word	0x0800717d
 8007144:	0800717d 	.word	0x0800717d
 8007148:	0800717d 	.word	0x0800717d
 800714c:	0800717d 	.word	0x0800717d
 8007150:	0800717d 	.word	0x0800717d
 8007154:	08007183 	.word	0x08007183
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3304      	adds	r3, #4
 800715c:	2101      	movs	r1, #1
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fe6e 	bl	8007e40 <RCCEx_PLL2_Config>
 8007164:	4603      	mov	r3, r0
 8007166:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007168:	e00c      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3324      	adds	r3, #36	; 0x24
 800716e:	2101      	movs	r1, #1
 8007170:	4618      	mov	r0, r3
 8007172:	f000 ff87 	bl	8008084 <RCCEx_PLL3_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800717a:	e003      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	75fb      	strb	r3, [r7, #23]
      break;
 8007180:	e000      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8007182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800718a:	4b45      	ldr	r3, [pc, #276]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800718c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007196:	4942      	ldr	r1, [pc, #264]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007198:	4313      	orrs	r3, r2
 800719a:	654b      	str	r3, [r1, #84]	; 0x54
 800719c:	e001      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d037      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d820      	bhi.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071ff 	.word	0x080071ff
 80071c0:	080071d5 	.word	0x080071d5
 80071c4:	080071e7 	.word	0x080071e7
 80071c8:	080071ff 	.word	0x080071ff
 80071cc:	080071ff 	.word	0x080071ff
 80071d0:	080071ff 	.word	0x080071ff
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	2101      	movs	r1, #1
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fe30 	bl	8007e40 <RCCEx_PLL2_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071e4:	e00c      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3324      	adds	r3, #36	; 0x24
 80071ea:	2101      	movs	r1, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 ff49 	bl	8008084 <RCCEx_PLL3_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071f6:	e003      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	75fb      	strb	r3, [r7, #23]
      break;
 80071fc:	e000      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 80071fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007200:	7dfb      	ldrb	r3, [r7, #23]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007206:	4b26      	ldr	r3, [pc, #152]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	f023 0207 	bic.w	r2, r3, #7
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007212:	4923      	ldr	r1, [pc, #140]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007214:	4313      	orrs	r3, r2
 8007216:	654b      	str	r3, [r1, #84]	; 0x54
 8007218:	e001      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d040      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007230:	2b05      	cmp	r3, #5
 8007232:	d821      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007234:	a201      	add	r2, pc, #4	; (adr r2, 800723c <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8007236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723a:	bf00      	nop
 800723c:	0800727f 	.word	0x0800727f
 8007240:	08007255 	.word	0x08007255
 8007244:	08007267 	.word	0x08007267
 8007248:	0800727f 	.word	0x0800727f
 800724c:	0800727f 	.word	0x0800727f
 8007250:	0800727f 	.word	0x0800727f
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3304      	adds	r3, #4
 8007258:	2101      	movs	r1, #1
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fdf0 	bl	8007e40 <RCCEx_PLL2_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007264:	e00c      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3324      	adds	r3, #36	; 0x24
 800726a:	2101      	movs	r1, #1
 800726c:	4618      	mov	r0, r3
 800726e:	f000 ff09 	bl	8008084 <RCCEx_PLL3_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007276:	e003      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75fb      	strb	r3, [r7, #23]
      break;
 800727c:	e000      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800727e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d110      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007286:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728a:	f023 0207 	bic.w	r2, r3, #7
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	4902      	ldr	r1, [pc, #8]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007296:	4313      	orrs	r3, r2
 8007298:	658b      	str	r3, [r1, #88]	; 0x58
 800729a:	e007      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800729c:	58024800 	.word	0x58024800
 80072a0:	58024400 	.word	0x58024400
 80072a4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d044      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c2:	d01b      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80072c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c8:	d805      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d022      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80072ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072d2:	d00a      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80072d4:	e01b      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xda6>
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072da:	d01d      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80072dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072e0:	d01c      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80072e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072e6:	d01b      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 80072e8:	e011      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3304      	adds	r3, #4
 80072ee:	2100      	movs	r1, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fda5 	bl	8007e40 <RCCEx_PLL2_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80072fa:	e012      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3324      	adds	r3, #36	; 0x24
 8007300:	2102      	movs	r1, #2
 8007302:	4618      	mov	r0, r3
 8007304:	f000 febe 	bl	8008084 <RCCEx_PLL3_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800730c:	e009      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
      break;
 8007312:	e006      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007314:	bf00      	nop
 8007316:	e004      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007318:	bf00      	nop
 800731a:	e002      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 800731c:	bf00      	nop
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8007320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007328:	4bb7      	ldr	r3, [pc, #732]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800732a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007336:	49b4      	ldr	r1, [pc, #720]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007338:	4313      	orrs	r3, r2
 800733a:	654b      	str	r3, [r1, #84]	; 0x54
 800733c:	e001      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d044      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007358:	d01b      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 800735a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800735e:	d805      	bhi.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d022      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8007364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007368:	d00a      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800736a:	e01b      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007370:	d01d      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xe46>
 8007372:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007376:	d01c      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8007378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800737c:	d01b      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 800737e:	e011      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3304      	adds	r3, #4
 8007384:	2100      	movs	r1, #0
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fd5a 	bl	8007e40 <RCCEx_PLL2_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007390:	e012      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3324      	adds	r3, #36	; 0x24
 8007396:	2102      	movs	r1, #2
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fe73 	bl	8008084 <RCCEx_PLL3_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073a2:	e009      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	75fb      	strb	r3, [r7, #23]
      break;
 80073a8:	e006      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80073aa:	bf00      	nop
 80073ac:	e004      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80073b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073be:	4b92      	ldr	r3, [pc, #584]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80073c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073cc:	498e      	ldr	r1, [pc, #568]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	658b      	str	r3, [r1, #88]	; 0x58
 80073d2:	e001      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d044      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ee:	d01b      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 80073f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073f4:	d805      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d022      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 80073fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fe:	d00a      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8007400:	e01b      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xed2>
 8007402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007406:	d01d      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007408:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800740c:	d01c      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 800740e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007412:	d01b      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8007414:	e011      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3304      	adds	r3, #4
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fd0f 	bl	8007e40 <RCCEx_PLL2_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007426:	e012      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3324      	adds	r3, #36	; 0x24
 800742c:	2102      	movs	r1, #2
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fe28 	bl	8008084 <RCCEx_PLL3_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007438:	e009      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
      break;
 800743e:	e006      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007440:	bf00      	nop
 8007442:	e004      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007444:	bf00      	nop
 8007446:	e002      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8007448:	bf00      	nop
 800744a:	e000      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800744c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007454:	4b6c      	ldr	r3, [pc, #432]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007458:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007462:	4969      	ldr	r1, [pc, #420]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007464:	4313      	orrs	r3, r2
 8007466:	658b      	str	r3, [r1, #88]	; 0x58
 8007468:	e001      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d037      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007484:	d015      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007490:	d00f      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074a6:	d004      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80074a8:	f240 413a 	movw	r1, #1082	; 0x43a
 80074ac:	4857      	ldr	r0, [pc, #348]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 80074ae:	f7f9 fe1e 	bl	80010ee <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074bc:	d10b      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3324      	adds	r3, #36	; 0x24
 80074c2:	2102      	movs	r1, #2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fddd 	bl	8008084 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00c      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	75bb      	strb	r3, [r7, #22]
 80074d4:	e009      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074d6:	4b4c      	ldr	r3, [pc, #304]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e4:	4948      	ldr	r1, [pc, #288]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d037      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007500:	d015      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750c:	d00f      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800751e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007522:	d004      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007524:	f240 414f 	movw	r1, #1103	; 0x44f
 8007528:	4838      	ldr	r0, [pc, #224]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 800752a:	f7f9 fde0 	bl	80010ee <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007538:	d10b      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	2102      	movs	r1, #2
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fd9f 	bl	8008084 <RCCEx_PLL3_Config>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00c      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75bb      	strb	r3, [r7, #22]
 8007550:	e009      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007552:	4b2d      	ldr	r3, [pc, #180]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007556:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007560:	4929      	ldr	r1, [pc, #164]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8007562:	4313      	orrs	r3, r2
 8007564:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d030      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757c:	d00d      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1032>
 800757e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007582:	d016      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x104a>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d111      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fc56 	bl	8007e40 <RCCEx_PLL2_Config>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007598:	e00c      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3324      	adds	r3, #36	; 0x24
 800759e:	2102      	movs	r1, #2
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fd6f 	bl	8008084 <RCCEx_PLL3_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80075aa:	e003      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	75fb      	strb	r3, [r7, #23]
      break;
 80075b0:	e000      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 80075b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075ba:	4b13      	ldr	r3, [pc, #76]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075c8:	490f      	ldr	r1, [pc, #60]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	658b      	str	r3, [r1, #88]	; 0x58
 80075ce:	e001      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d034      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075ea:	d011      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80075ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075f0:	d01a      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80075f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075f6:	d114      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f8:	4b03      	ldr	r3, [pc, #12]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	4a02      	ldr	r2, [pc, #8]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80075fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007604:	e011      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 8007606:	bf00      	nop
 8007608:	58024400 	.word	0x58024400
 800760c:	0800fdf0 	.word	0x0800fdf0

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3324      	adds	r3, #36	; 0x24
 8007614:	2101      	movs	r1, #1
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fd34 	bl	8008084 <RCCEx_PLL3_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007620:	e003      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
      break;
 8007626:	e000      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8007628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007630:	4b9c      	ldr	r3, [pc, #624]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007634:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763e:	4999      	ldr	r1, [pc, #612]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007640:	4313      	orrs	r3, r2
 8007642:	654b      	str	r3, [r1, #84]	; 0x54
 8007644:	e001      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d037      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x110a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007666:	d004      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8007668:	f240 41b7 	movw	r1, #1207	; 0x4b7
 800766c:	488e      	ldr	r0, [pc, #568]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800766e:	f7f9 fd3e 	bl	80010ee <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800767a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767e:	d007      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007680:	e00f      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007682:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	4a87      	ldr	r2, [pc, #540]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800768c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800768e:	e00b      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	2102      	movs	r1, #2
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fbd2 	bl	8007e40 <RCCEx_PLL2_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80076a0:	e002      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
      break;
 80076a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80076ae:	4b7d      	ldr	r3, [pc, #500]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ba:	497a      	ldr	r1, [pc, #488]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80076c0:	e001      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3324      	adds	r3, #36	; 0x24
 80076d6:	2102      	movs	r1, #2
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fcd3 	bl	8008084 <RCCEx_PLL3_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d02f      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fc:	d00c      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007702:	d802      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d011      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8007708:	e00d      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x11be>
 800770a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770e:	d00f      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007714:	d00e      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 8007716:	e006      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007718:	4b62      	ldr	r3, [pc, #392]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4a61      	ldr	r2, [pc, #388]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800771e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007722:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007724:	e007      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
      break;
 800772a:	e004      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 800772c:	bf00      	nop
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007730:	bf00      	nop
 8007732:	e000      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8007734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d109      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800773c:	4b59      	ldr	r3, [pc, #356]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800773e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007748:	4956      	ldr	r1, [pc, #344]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	654b      	str	r3, [r1, #84]	; 0x54
 800774e:	e001      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d016      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007764:	2b00      	cmp	r3, #0
 8007766:	d009      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007770:	d004      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8007772:	f240 5116 	movw	r1, #1302	; 0x516
 8007776:	484c      	ldr	r0, [pc, #304]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007778:	f7f9 fcb9 	bl	80010ee <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800777c:	4b49      	ldr	r3, [pc, #292]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800777e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007788:	4946      	ldr	r1, [pc, #280]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800778a:	4313      	orrs	r3, r2
 800778c:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d019      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80077aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ae:	d004      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80077b0:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80077b4:	483c      	ldr	r0, [pc, #240]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80077b6:	f7f9 fc9a 	bl	80010ee <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80077ba:	4b3a      	ldr	r3, [pc, #232]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80077c8:	4936      	ldr	r1, [pc, #216]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d016      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ea:	d004      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80077ec:	f240 512a 	movw	r1, #1322	; 0x52a
 80077f0:	482d      	ldr	r0, [pc, #180]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80077f2:	f7f9 fc7c 	bl	80010ee <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077f6:	4b2b      	ldr	r3, [pc, #172]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007802:	4928      	ldr	r1, [pc, #160]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007804:	4313      	orrs	r3, r2
 8007806:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01d      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007828:	d004      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 800782a:	f240 5134 	movw	r1, #1332	; 0x534
 800782e:	481e      	ldr	r0, [pc, #120]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8007830:	f7f9 fc5d 	bl	80010ee <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007834:	4b1b      	ldr	r3, [pc, #108]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800783a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800783e:	6113      	str	r3, [r2, #16]
 8007840:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800784a:	4916      	ldr	r1, [pc, #88]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800784c:	4313      	orrs	r3, r2
 800784e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	da1b      	bge.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00e      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007868:	d009      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007872:	d004      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8007874:	f240 513e 	movw	r1, #1342	; 0x53e
 8007878:	480b      	ldr	r0, [pc, #44]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800787a:	f7f9 fc38 	bl	80010ee <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007882:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788a:	4906      	ldr	r1, [pc, #24]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800788c:	4313      	orrs	r3, r2
 800788e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007890:	7dbb      	ldrb	r3, [r7, #22]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	e000      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	58024400 	.word	0x58024400
 80078a8:	0800fdf0 	.word	0x0800fdf0

080078ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80078b0:	f7fe fe12 	bl	80064d8 <HAL_RCC_GetHCLKFreq>
 80078b4:	4601      	mov	r1, r0
 80078b6:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	091b      	lsrs	r3, r3, #4
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80078c2:	5cd3      	ldrb	r3, [r2, r3]
 80078c4:	f003 031f 	and.w	r3, r3, #31
 80078c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	58024400 	.word	0x58024400
 80078d4:	080102c0 	.word	0x080102c0

080078d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80078d8:	b480      	push	{r7}
 80078da:	b089      	sub	sp, #36	; 0x24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078e0:	4b9d      	ldr	r3, [pc, #628]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80078ea:	4b9b      	ldr	r3, [pc, #620]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	0b1b      	lsrs	r3, r3, #12
 80078f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078f4:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80078f6:	4b98      	ldr	r3, [pc, #608]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007900:	4b95      	ldr	r3, [pc, #596]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007904:	08db      	lsrs	r3, r3, #3
 8007906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007918:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 810a 	beq.w	8007b38 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d05a      	beq.n	80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 800792a:	2b01      	cmp	r3, #1
 800792c:	d302      	bcc.n	8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 800792e:	2b02      	cmp	r3, #2
 8007930:	d078      	beq.n	8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8007932:	e099      	b.n	8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007934:	4b88      	ldr	r3, [pc, #544]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	d02d      	beq.n	800799c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007940:	4b85      	ldr	r3, [pc, #532]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	08db      	lsrs	r3, r3, #3
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	4a84      	ldr	r2, [pc, #528]	; (8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
 8007950:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796a:	4b7b      	ldr	r3, [pc, #492]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797a:	ed97 6a03 	vldr	s12, [r7, #12]
 800797e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800799a:	e087      	b.n	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b64 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ae:	4b6a      	ldr	r3, [pc, #424]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079be:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80079c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079de:	e065      	b.n	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80079ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f2:	4b59      	ldr	r3, [pc, #356]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a22:	e043      	b.n	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a36:	4b48      	ldr	r3, [pc, #288]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a66:	e021      	b.n	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b37      	ldr	r3, [pc, #220]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007aac:	4b2a      	ldr	r3, [pc, #168]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	0a5b      	lsrs	r3, r3, #9
 8007ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad2:	ee17 2a90 	vmov	r2, s15
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ada:	4b1f      	ldr	r3, [pc, #124]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	0c1b      	lsrs	r3, r3, #16
 8007ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007af0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b00:	ee17 2a90 	vmov	r2, s15
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007b08:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	0e1b      	lsrs	r3, r3, #24
 8007b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b2e:	ee17 2a90 	vmov	r2, s15
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b36:	e008      	b.n	8007b4a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	609a      	str	r2, [r3, #8]
}
 8007b4a:	bf00      	nop
 8007b4c:	3724      	adds	r7, #36	; 0x24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	58024400 	.word	0x58024400
 8007b5c:	03d09000 	.word	0x03d09000
 8007b60:	46000000 	.word	0x46000000
 8007b64:	4c742400 	.word	0x4c742400
 8007b68:	4a742400 	.word	0x4a742400
 8007b6c:	4b371b00 	.word	0x4b371b00

08007b70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b089      	sub	sp, #36	; 0x24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b78:	4b9d      	ldr	r3, [pc, #628]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007b82:	4b9b      	ldr	r3, [pc, #620]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	0d1b      	lsrs	r3, r3, #20
 8007b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b8c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8007b8e:	4b98      	ldr	r3, [pc, #608]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b96:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007b98:	4b95      	ldr	r3, [pc, #596]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	08db      	lsrs	r3, r3, #3
 8007b9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	fb02 f303 	mul.w	r3, r2, r3
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 810a 	beq.w	8007dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d05a      	beq.n	8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d302      	bcc.n	8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d078      	beq.n	8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8007bca:	e099      	b.n	8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bcc:	4b88      	ldr	r3, [pc, #544]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d02d      	beq.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bd8:	4b85      	ldr	r3, [pc, #532]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	4a84      	ldr	r2, [pc, #528]	; (8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	ee07 3a90 	vmov	s15, r3
 8007bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c02:	4b7b      	ldr	r3, [pc, #492]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007c32:	e087      	b.n	8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c46:	4b6a      	ldr	r3, [pc, #424]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c76:	e065      	b.n	8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8a:	4b59      	ldr	r3, [pc, #356]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cba:	e043      	b.n	8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cce:	4b48      	ldr	r3, [pc, #288]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cfe:	e021      	b.n	8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d12:	4b37      	ldr	r3, [pc, #220]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007d44:	4b2a      	ldr	r3, [pc, #168]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	0a5b      	lsrs	r3, r3, #9
 8007d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d6a:	ee17 2a90 	vmov	r2, s15
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007d72:	4b1f      	ldr	r3, [pc, #124]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	0c1b      	lsrs	r3, r3, #16
 8007d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7c:	ee07 3a90 	vmov	s15, r3
 8007d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d98:	ee17 2a90 	vmov	r2, s15
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007da0:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	0e1b      	lsrs	r3, r3, #24
 8007da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc6:	ee17 2a90 	vmov	r2, s15
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007dce:	e008      	b.n	8007de2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	609a      	str	r2, [r3, #8]
}
 8007de2:	bf00      	nop
 8007de4:	3724      	adds	r7, #36	; 0x24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	58024400 	.word	0x58024400
 8007df4:	03d09000 	.word	0x03d09000
 8007df8:	46000000 	.word	0x46000000
 8007dfc:	4c742400 	.word	0x4c742400
 8007e00:	4a742400 	.word	0x4a742400
 8007e04:	4b371b00 	.word	0x4b371b00

08007e08 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e0c:	f7fe f9f2 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 8007e10:	4601      	mov	r1, r0
 8007e12:	4b08      	ldr	r3, [pc, #32]	; (8007e34 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	4a06      	ldr	r2, [pc, #24]	; (8007e38 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007e1e:	5cd3      	ldrb	r3, [r2, r3]
 8007e20:	f003 031f 	and.w	r3, r3, #31
 8007e24:	fa21 f303 	lsr.w	r3, r1, r3
 8007e28:	4a04      	ldr	r2, [pc, #16]	; (8007e3c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007e2a:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007e2c:	4b03      	ldr	r3, [pc, #12]	; (8007e3c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	58024400 	.word	0x58024400
 8007e38:	080102c0 	.word	0x080102c0
 8007e3c:	24000000 	.word	0x24000000

08007e40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <RCCEx_PLL2_Config+0x1e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b3f      	cmp	r3, #63	; 0x3f
 8007e5c:	d904      	bls.n	8007e68 <RCCEx_PLL2_Config+0x28>
 8007e5e:	f640 2186 	movw	r1, #2694	; 0xa86
 8007e62:	4885      	ldr	r0, [pc, #532]	; (8008078 <RCCEx_PLL2_Config+0x238>)
 8007e64:	f7f9 f943 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d904      	bls.n	8007e7a <RCCEx_PLL2_Config+0x3a>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e78:	d904      	bls.n	8007e84 <RCCEx_PLL2_Config+0x44>
 8007e7a:	f640 2187 	movw	r1, #2695	; 0xa87
 8007e7e:	487e      	ldr	r0, [pc, #504]	; (8008078 <RCCEx_PLL2_Config+0x238>)
 8007e80:	f7f9 f935 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <RCCEx_PLL2_Config+0x54>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b80      	cmp	r3, #128	; 0x80
 8007e92:	d904      	bls.n	8007e9e <RCCEx_PLL2_Config+0x5e>
 8007e94:	f640 2188 	movw	r1, #2696	; 0xa88
 8007e98:	4877      	ldr	r0, [pc, #476]	; (8008078 <RCCEx_PLL2_Config+0x238>)
 8007e9a:	f7f9 f928 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <RCCEx_PLL2_Config+0x6e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d904      	bls.n	8007eb8 <RCCEx_PLL2_Config+0x78>
 8007eae:	f640 2189 	movw	r1, #2697	; 0xa89
 8007eb2:	4871      	ldr	r0, [pc, #452]	; (8008078 <RCCEx_PLL2_Config+0x238>)
 8007eb4:	f7f9 f91b 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <RCCEx_PLL2_Config+0x88>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	2b80      	cmp	r3, #128	; 0x80
 8007ec6:	d904      	bls.n	8007ed2 <RCCEx_PLL2_Config+0x92>
 8007ec8:	f640 218a 	movw	r1, #2698	; 0xa8a
 8007ecc:	486a      	ldr	r0, [pc, #424]	; (8008078 <RCCEx_PLL2_Config+0x238>)
 8007ece:	f7f9 f90e 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d010      	beq.n	8007efc <RCCEx_PLL2_Config+0xbc>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	2b40      	cmp	r3, #64	; 0x40
 8007ee0:	d00c      	beq.n	8007efc <RCCEx_PLL2_Config+0xbc>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	2b80      	cmp	r3, #128	; 0x80
 8007ee8:	d008      	beq.n	8007efc <RCCEx_PLL2_Config+0xbc>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	2bc0      	cmp	r3, #192	; 0xc0
 8007ef0:	d004      	beq.n	8007efc <RCCEx_PLL2_Config+0xbc>
 8007ef2:	f640 218b 	movw	r1, #2699	; 0xa8b
 8007ef6:	4860      	ldr	r0, [pc, #384]	; (8008078 <RCCEx_PLL2_Config+0x238>)
 8007ef8:	f7f9 f8f9 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d008      	beq.n	8007f16 <RCCEx_PLL2_Config+0xd6>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d004      	beq.n	8007f16 <RCCEx_PLL2_Config+0xd6>
 8007f0c:	f640 218c 	movw	r1, #2700	; 0xa8c
 8007f10:	4859      	ldr	r0, [pc, #356]	; (8008078 <RCCEx_PLL2_Config+0x238>)
 8007f12:	f7f9 f8ec 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1e:	d304      	bcc.n	8007f2a <RCCEx_PLL2_Config+0xea>
 8007f20:	f640 218d 	movw	r1, #2701	; 0xa8d
 8007f24:	4854      	ldr	r0, [pc, #336]	; (8008078 <RCCEx_PLL2_Config+0x238>)
 8007f26:	f7f9 f8e2 	bl	80010ee <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f2a:	4b54      	ldr	r3, [pc, #336]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d101      	bne.n	8007f3a <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e099      	b.n	800806e <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f3a:	4b50      	ldr	r3, [pc, #320]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a4f      	ldr	r2, [pc, #316]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007f40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f46:	f7f9 fb85 	bl	8001654 <HAL_GetTick>
 8007f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f4c:	e008      	b.n	8007f60 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f4e:	f7f9 fb81 	bl	8001654 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d901      	bls.n	8007f60 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e086      	b.n	800806e <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f60:	4b46      	ldr	r3, [pc, #280]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1f0      	bne.n	8007f4e <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f6c:	4b43      	ldr	r3, [pc, #268]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	031b      	lsls	r3, r3, #12
 8007f7a:	4940      	ldr	r1, [pc, #256]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	025b      	lsls	r3, r3, #9
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	041b      	lsls	r3, r3, #16
 8007f9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	061b      	lsls	r3, r3, #24
 8007fac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fb0:	4932      	ldr	r1, [pc, #200]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fb6:	4b31      	ldr	r3, [pc, #196]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	492e      	ldr	r1, [pc, #184]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fc8:	4b2c      	ldr	r3, [pc, #176]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	f023 0220 	bic.w	r2, r3, #32
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	4929      	ldr	r1, [pc, #164]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fda:	4b28      	ldr	r3, [pc, #160]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	4a27      	ldr	r2, [pc, #156]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007fe0:	f023 0310 	bic.w	r3, r3, #16
 8007fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fe6:	4b25      	ldr	r3, [pc, #148]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fea:	4b25      	ldr	r3, [pc, #148]	; (8008080 <RCCEx_PLL2_Config+0x240>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	69d2      	ldr	r2, [r2, #28]
 8007ff2:	00d2      	lsls	r2, r2, #3
 8007ff4:	4921      	ldr	r1, [pc, #132]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ffa:	4b20      	ldr	r3, [pc, #128]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	4a1f      	ldr	r2, [pc, #124]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8008000:	f043 0310 	orr.w	r3, r3, #16
 8008004:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d106      	bne.n	800801a <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800800c:	4b1b      	ldr	r3, [pc, #108]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	4a1a      	ldr	r2, [pc, #104]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8008012:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008018:	e00f      	b.n	800803a <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d106      	bne.n	800802e <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008020:	4b16      	ldr	r3, [pc, #88]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	4a15      	ldr	r2, [pc, #84]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8008026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800802a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800802c:	e005      	b.n	800803a <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	4a12      	ldr	r2, [pc, #72]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8008034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008038:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800803a:	4b10      	ldr	r3, [pc, #64]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a0f      	ldr	r2, [pc, #60]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8008040:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008046:	f7f9 fb05 	bl	8001654 <HAL_GetTick>
 800804a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800804c:	e008      	b.n	8008060 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800804e:	f7f9 fb01 	bl	8001654 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e006      	b.n	800806e <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008060:	4b06      	ldr	r3, [pc, #24]	; (800807c <RCCEx_PLL2_Config+0x23c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0f0      	beq.n	800804e <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	0800fdf0 	.word	0x0800fdf0
 800807c:	58024400 	.word	0x58024400
 8008080:	ffff0007 	.word	0xffff0007

08008084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <RCCEx_PLL3_Config+0x1e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b3f      	cmp	r3, #63	; 0x3f
 80080a0:	d904      	bls.n	80080ac <RCCEx_PLL3_Config+0x28>
 80080a2:	f640 21ee 	movw	r1, #2798	; 0xaee
 80080a6:	4887      	ldr	r0, [pc, #540]	; (80082c4 <RCCEx_PLL3_Config+0x240>)
 80080a8:	f7f9 f821 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d904      	bls.n	80080be <RCCEx_PLL3_Config+0x3a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080bc:	d904      	bls.n	80080c8 <RCCEx_PLL3_Config+0x44>
 80080be:	f640 21ef 	movw	r1, #2799	; 0xaef
 80080c2:	4880      	ldr	r0, [pc, #512]	; (80082c4 <RCCEx_PLL3_Config+0x240>)
 80080c4:	f7f9 f813 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <RCCEx_PLL3_Config+0x54>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d904      	bls.n	80080e2 <RCCEx_PLL3_Config+0x5e>
 80080d8:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 80080dc:	4879      	ldr	r0, [pc, #484]	; (80082c4 <RCCEx_PLL3_Config+0x240>)
 80080de:	f7f9 f806 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <RCCEx_PLL3_Config+0x6e>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b80      	cmp	r3, #128	; 0x80
 80080f0:	d904      	bls.n	80080fc <RCCEx_PLL3_Config+0x78>
 80080f2:	f640 21f1 	movw	r1, #2801	; 0xaf1
 80080f6:	4873      	ldr	r0, [pc, #460]	; (80082c4 <RCCEx_PLL3_Config+0x240>)
 80080f8:	f7f8 fff9 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <RCCEx_PLL3_Config+0x88>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b80      	cmp	r3, #128	; 0x80
 800810a:	d904      	bls.n	8008116 <RCCEx_PLL3_Config+0x92>
 800810c:	f640 21f2 	movw	r1, #2802	; 0xaf2
 8008110:	486c      	ldr	r0, [pc, #432]	; (80082c4 <RCCEx_PLL3_Config+0x240>)
 8008112:	f7f8 ffec 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d013      	beq.n	8008146 <RCCEx_PLL3_Config+0xc2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008126:	d00e      	beq.n	8008146 <RCCEx_PLL3_Config+0xc2>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008130:	d009      	beq.n	8008146 <RCCEx_PLL3_Config+0xc2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800813a:	d004      	beq.n	8008146 <RCCEx_PLL3_Config+0xc2>
 800813c:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8008140:	4860      	ldr	r0, [pc, #384]	; (80082c4 <RCCEx_PLL3_Config+0x240>)
 8008142:	f7f8 ffd4 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <RCCEx_PLL3_Config+0xde>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008156:	d004      	beq.n	8008162 <RCCEx_PLL3_Config+0xde>
 8008158:	f640 21f4 	movw	r1, #2804	; 0xaf4
 800815c:	4859      	ldr	r0, [pc, #356]	; (80082c4 <RCCEx_PLL3_Config+0x240>)
 800815e:	f7f8 ffc6 	bl	80010ee <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800816a:	d304      	bcc.n	8008176 <RCCEx_PLL3_Config+0xf2>
 800816c:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8008170:	4854      	ldr	r0, [pc, #336]	; (80082c4 <RCCEx_PLL3_Config+0x240>)
 8008172:	f7f8 ffbc 	bl	80010ee <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008176:	4b54      	ldr	r3, [pc, #336]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	2b03      	cmp	r3, #3
 8008180:	d101      	bne.n	8008186 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e099      	b.n	80082ba <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008186:	4b50      	ldr	r3, [pc, #320]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a4f      	ldr	r2, [pc, #316]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 800818c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008192:	f7f9 fa5f 	bl	8001654 <HAL_GetTick>
 8008196:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008198:	e008      	b.n	80081ac <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800819a:	f7f9 fa5b 	bl	8001654 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d901      	bls.n	80081ac <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e086      	b.n	80082ba <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081ac:	4b46      	ldr	r3, [pc, #280]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1f0      	bne.n	800819a <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80081b8:	4b43      	ldr	r3, [pc, #268]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	051b      	lsls	r3, r3, #20
 80081c6:	4940      	ldr	r1, [pc, #256]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	628b      	str	r3, [r1, #40]	; 0x28
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	3b01      	subs	r3, #1
 80081dc:	025b      	lsls	r3, r3, #9
 80081de:	b29b      	uxth	r3, r3
 80081e0:	431a      	orrs	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	041b      	lsls	r3, r3, #16
 80081ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	061b      	lsls	r3, r3, #24
 80081f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081fc:	4932      	ldr	r1, [pc, #200]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008202:	4b31      	ldr	r3, [pc, #196]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	492e      	ldr	r1, [pc, #184]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008210:	4313      	orrs	r3, r2
 8008212:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008214:	4b2c      	ldr	r3, [pc, #176]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	4929      	ldr	r1, [pc, #164]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008222:	4313      	orrs	r3, r2
 8008224:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008226:	4b28      	ldr	r3, [pc, #160]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822a:	4a27      	ldr	r2, [pc, #156]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 800822c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008232:	4b25      	ldr	r3, [pc, #148]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008236:	4b25      	ldr	r3, [pc, #148]	; (80082cc <RCCEx_PLL3_Config+0x248>)
 8008238:	4013      	ands	r3, r2
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	69d2      	ldr	r2, [r2, #28]
 800823e:	00d2      	lsls	r2, r2, #3
 8008240:	4921      	ldr	r1, [pc, #132]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008242:	4313      	orrs	r3, r2
 8008244:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008246:	4b20      	ldr	r3, [pc, #128]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	4a1f      	ldr	r2, [pc, #124]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 800824c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008258:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a1a      	ldr	r2, [pc, #104]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 800825e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008262:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008264:	e00f      	b.n	8008286 <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d106      	bne.n	800827a <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800826c:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4a15      	ldr	r2, [pc, #84]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008276:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008278:	e005      	b.n	8008286 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800827a:	4b13      	ldr	r3, [pc, #76]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	4a12      	ldr	r2, [pc, #72]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008284:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008286:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a0f      	ldr	r2, [pc, #60]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 800828c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008292:	f7f9 f9df 	bl	8001654 <HAL_GetTick>
 8008296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008298:	e008      	b.n	80082ac <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800829a:	f7f9 f9db 	bl	8001654 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d901      	bls.n	80082ac <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e006      	b.n	80082ba <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <RCCEx_PLL3_Config+0x244>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0f0      	beq.n	800829a <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	0800fdf0 	.word	0x0800fdf0
 80082c8:	58024400 	.word	0x58024400
 80082cc:	ffff0007 	.word	0xffff0007

080082d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e285      	b.n	80087f2 <HAL_SPI_Init+0x522>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a96      	ldr	r2, [pc, #600]	; (8008544 <HAL_SPI_Init+0x274>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d01c      	beq.n	800832a <HAL_SPI_Init+0x5a>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a94      	ldr	r2, [pc, #592]	; (8008548 <HAL_SPI_Init+0x278>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d017      	beq.n	800832a <HAL_SPI_Init+0x5a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a93      	ldr	r2, [pc, #588]	; (800854c <HAL_SPI_Init+0x27c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d012      	beq.n	800832a <HAL_SPI_Init+0x5a>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a91      	ldr	r2, [pc, #580]	; (8008550 <HAL_SPI_Init+0x280>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00d      	beq.n	800832a <HAL_SPI_Init+0x5a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a90      	ldr	r2, [pc, #576]	; (8008554 <HAL_SPI_Init+0x284>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d008      	beq.n	800832a <HAL_SPI_Init+0x5a>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a8e      	ldr	r2, [pc, #568]	; (8008558 <HAL_SPI_Init+0x288>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d003      	beq.n	800832a <HAL_SPI_Init+0x5a>
 8008322:	21f7      	movs	r1, #247	; 0xf7
 8008324:	488d      	ldr	r0, [pc, #564]	; (800855c <HAL_SPI_Init+0x28c>)
 8008326:	f7f8 fee2 	bl	80010ee <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d008      	beq.n	8008344 <HAL_SPI_Init+0x74>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800833a:	d003      	beq.n	8008344 <HAL_SPI_Init+0x74>
 800833c:	21f8      	movs	r1, #248	; 0xf8
 800833e:	4887      	ldr	r0, [pc, #540]	; (800855c <HAL_SPI_Init+0x28c>)
 8008340:	f7f8 fed5 	bl	80010ee <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d012      	beq.n	8008372 <HAL_SPI_Init+0xa2>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008354:	d00d      	beq.n	8008372 <HAL_SPI_Init+0xa2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800835e:	d008      	beq.n	8008372 <HAL_SPI_Init+0xa2>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008368:	d003      	beq.n	8008372 <HAL_SPI_Init+0xa2>
 800836a:	21f9      	movs	r1, #249	; 0xf9
 800836c:	487b      	ldr	r0, [pc, #492]	; (800855c <HAL_SPI_Init+0x28c>)
 800836e:	f7f8 febe 	bl	80010ee <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	2b1f      	cmp	r3, #31
 8008378:	d077      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	2b1e      	cmp	r3, #30
 8008380:	d073      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	2b1d      	cmp	r3, #29
 8008388:	d06f      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b1c      	cmp	r3, #28
 8008390:	d06b      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b1b      	cmp	r3, #27
 8008398:	d067      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	2b1a      	cmp	r3, #26
 80083a0:	d063      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b19      	cmp	r3, #25
 80083a8:	d05f      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	2b18      	cmp	r3, #24
 80083b0:	d05b      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	2b17      	cmp	r3, #23
 80083b8:	d057      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	2b16      	cmp	r3, #22
 80083c0:	d053      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	2b15      	cmp	r3, #21
 80083c8:	d04f      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b14      	cmp	r3, #20
 80083d0:	d04b      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	2b13      	cmp	r3, #19
 80083d8:	d047      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	2b15      	cmp	r3, #21
 80083e0:	d043      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	2b12      	cmp	r3, #18
 80083e8:	d03f      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	2b11      	cmp	r3, #17
 80083f0:	d03b      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d037      	beq.n	800846a <HAL_SPI_Init+0x19a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	2b0f      	cmp	r3, #15
 8008400:	d033      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b0e      	cmp	r3, #14
 8008408:	d02f      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	2b0d      	cmp	r3, #13
 8008410:	d02b      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	2b0c      	cmp	r3, #12
 8008418:	d027      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b0b      	cmp	r3, #11
 8008420:	d023      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	2b0a      	cmp	r3, #10
 8008428:	d01f      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	2b09      	cmp	r3, #9
 8008430:	d01b      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	2b08      	cmp	r3, #8
 8008438:	d017      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	2b07      	cmp	r3, #7
 8008440:	d013      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	2b06      	cmp	r3, #6
 8008448:	d00f      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b05      	cmp	r3, #5
 8008450:	d00b      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	2b04      	cmp	r3, #4
 8008458:	d007      	beq.n	800846a <HAL_SPI_Init+0x19a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d003      	beq.n	800846a <HAL_SPI_Init+0x19a>
 8008462:	21fa      	movs	r1, #250	; 0xfa
 8008464:	483d      	ldr	r0, [pc, #244]	; (800855c <HAL_SPI_Init+0x28c>)
 8008466:	f7f8 fe42 	bl	80010ee <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d047      	beq.n	8008502 <HAL_SPI_Init+0x232>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008476:	2b20      	cmp	r3, #32
 8008478:	d043      	beq.n	8008502 <HAL_SPI_Init+0x232>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847e:	2b40      	cmp	r3, #64	; 0x40
 8008480:	d03f      	beq.n	8008502 <HAL_SPI_Init+0x232>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	2b60      	cmp	r3, #96	; 0x60
 8008488:	d03b      	beq.n	8008502 <HAL_SPI_Init+0x232>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848e:	2b80      	cmp	r3, #128	; 0x80
 8008490:	d037      	beq.n	8008502 <HAL_SPI_Init+0x232>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008496:	2ba0      	cmp	r3, #160	; 0xa0
 8008498:	d033      	beq.n	8008502 <HAL_SPI_Init+0x232>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849e:	2bc0      	cmp	r3, #192	; 0xc0
 80084a0:	d02f      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	2be0      	cmp	r3, #224	; 0xe0
 80084a8:	d02b      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084b2:	d026      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80084bc:	d021      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80084c6:	d01c      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084cc:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 80084d0:	d017      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80084da:	d012      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e0:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80084e4:	d00d      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80084ee:	d008      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80084f8:	d003      	beq.n	8008502 <HAL_SPI_Init+0x232>
 80084fa:	21fb      	movs	r1, #251	; 0xfb
 80084fc:	4817      	ldr	r0, [pc, #92]	; (800855c <HAL_SPI_Init+0x28c>)
 80084fe:	f7f8 fdf6 	bl	80010ee <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800850a:	d00c      	beq.n	8008526 <HAL_SPI_Init+0x256>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <HAL_SPI_Init+0x256>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800851c:	d003      	beq.n	8008526 <HAL_SPI_Init+0x256>
 800851e:	21fc      	movs	r1, #252	; 0xfc
 8008520:	480e      	ldr	r0, [pc, #56]	; (800855c <HAL_SPI_Init+0x28c>)
 8008522:	f7f8 fde4 	bl	80010ee <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800852e:	d017      	beq.n	8008560 <HAL_SPI_Init+0x290>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008534:	2b00      	cmp	r3, #0
 8008536:	d013      	beq.n	8008560 <HAL_SPI_Init+0x290>
 8008538:	21fd      	movs	r1, #253	; 0xfd
 800853a:	4808      	ldr	r0, [pc, #32]	; (800855c <HAL_SPI_Init+0x28c>)
 800853c:	f7f8 fdd7 	bl	80010ee <assert_failed>
 8008540:	e00e      	b.n	8008560 <HAL_SPI_Init+0x290>
 8008542:	bf00      	nop
 8008544:	40013000 	.word	0x40013000
 8008548:	40003800 	.word	0x40003800
 800854c:	40003c00 	.word	0x40003c00
 8008550:	40013400 	.word	0x40013400
 8008554:	40015000 	.word	0x40015000
 8008558:	58001400 	.word	0x58001400
 800855c:	0800fe2c 	.word	0x0800fe2c
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d026      	beq.n	80085b6 <HAL_SPI_Init+0x2e6>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008570:	d021      	beq.n	80085b6 <HAL_SPI_Init+0x2e6>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857a:	d01c      	beq.n	80085b6 <HAL_SPI_Init+0x2e6>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008584:	d017      	beq.n	80085b6 <HAL_SPI_Init+0x2e6>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858e:	d012      	beq.n	80085b6 <HAL_SPI_Init+0x2e6>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008598:	d00d      	beq.n	80085b6 <HAL_SPI_Init+0x2e6>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80085a2:	d008      	beq.n	80085b6 <HAL_SPI_Init+0x2e6>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 80085ac:	d003      	beq.n	80085b6 <HAL_SPI_Init+0x2e6>
 80085ae:	21fe      	movs	r1, #254	; 0xfe
 80085b0:	4892      	ldr	r0, [pc, #584]	; (80087fc <HAL_SPI_Init+0x52c>)
 80085b2:	f7f8 fd9c 	bl	80010ee <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <HAL_SPI_Init+0x300>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085c6:	d003      	beq.n	80085d0 <HAL_SPI_Init+0x300>
 80085c8:	21ff      	movs	r1, #255	; 0xff
 80085ca:	488c      	ldr	r0, [pc, #560]	; (80087fc <HAL_SPI_Init+0x52c>)
 80085cc:	f7f8 fd8f 	bl	80010ee <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <HAL_SPI_Init+0x31c>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085e0:	d004      	beq.n	80085ec <HAL_SPI_Init+0x31c>
 80085e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085e6:	4885      	ldr	r0, [pc, #532]	; (80087fc <HAL_SPI_Init+0x52c>)
 80085e8:	f7f8 fd81 	bl	80010ee <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d11b      	bne.n	800862c <HAL_SPI_Init+0x35c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d009      	beq.n	8008610 <HAL_SPI_Init+0x340>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008604:	d004      	beq.n	8008610 <HAL_SPI_Init+0x340>
 8008606:	f240 1103 	movw	r1, #259	; 0x103
 800860a:	487c      	ldr	r0, [pc, #496]	; (80087fc <HAL_SPI_Init+0x52c>)
 800860c:	f7f8 fd6f 	bl	80010ee <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d009      	beq.n	800862c <HAL_SPI_Init+0x35c>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008620:	d004      	beq.n	800862c <HAL_SPI_Init+0x35c>
 8008622:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008626:	4875      	ldr	r0, [pc, #468]	; (80087fc <HAL_SPI_Init+0x52c>)
 8008628:	f7f8 fd61 	bl	80010ee <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a72      	ldr	r2, [pc, #456]	; (8008800 <HAL_SPI_Init+0x530>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00f      	beq.n	800865c <HAL_SPI_Init+0x38c>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a70      	ldr	r2, [pc, #448]	; (8008804 <HAL_SPI_Init+0x534>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00a      	beq.n	800865c <HAL_SPI_Init+0x38c>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a6f      	ldr	r2, [pc, #444]	; (8008808 <HAL_SPI_Init+0x538>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d005      	beq.n	800865c <HAL_SPI_Init+0x38c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	2b0f      	cmp	r3, #15
 8008656:	d901      	bls.n	800865c <HAL_SPI_Init+0x38c>
  {
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e0ca      	b.n	80087f2 <HAL_SPI_Init+0x522>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fc9d 	bl	8008f9c <SPI_GetPacketSize>
 8008662:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a65      	ldr	r2, [pc, #404]	; (8008800 <HAL_SPI_Init+0x530>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00c      	beq.n	8008688 <HAL_SPI_Init+0x3b8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a64      	ldr	r2, [pc, #400]	; (8008804 <HAL_SPI_Init+0x534>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d007      	beq.n	8008688 <HAL_SPI_Init+0x3b8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a62      	ldr	r2, [pc, #392]	; (8008808 <HAL_SPI_Init+0x538>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d002      	beq.n	8008688 <HAL_SPI_Init+0x3b8>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b08      	cmp	r3, #8
 8008686:	d811      	bhi.n	80086ac <HAL_SPI_Init+0x3dc>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800868c:	4a5c      	ldr	r2, [pc, #368]	; (8008800 <HAL_SPI_Init+0x530>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d009      	beq.n	80086a6 <HAL_SPI_Init+0x3d6>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a5b      	ldr	r2, [pc, #364]	; (8008804 <HAL_SPI_Init+0x534>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d004      	beq.n	80086a6 <HAL_SPI_Init+0x3d6>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a59      	ldr	r2, [pc, #356]	; (8008808 <HAL_SPI_Init+0x538>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d104      	bne.n	80086b0 <HAL_SPI_Init+0x3e0>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d901      	bls.n	80086b0 <HAL_SPI_Init+0x3e0>
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0a0      	b.n	80087f2 <HAL_SPI_Init+0x522>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <HAL_SPI_Init+0x3fa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7f8 fd19 	bl	80010fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0201 	bic.w	r2, r2, #1
 80086e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086ea:	d110      	bne.n	800870e <HAL_SPI_Init+0x43e>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f4:	d10b      	bne.n	800870e <HAL_SPI_Init+0x43e>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d107      	bne.n	800870e <HAL_SPI_Init+0x43e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800870c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69da      	ldr	r2, [r3, #28]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	431a      	orrs	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008720:	ea42 0103 	orr.w	r1, r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68da      	ldr	r2, [r3, #12]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	431a      	orrs	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800876e:	ea42 0103 	orr.w	r1, r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d113      	bne.n	80087ae <HAL_SPI_Init+0x4de>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008798:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0201 	bic.w	r2, r2, #1
 80087bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <HAL_SPI_Init+0x510>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	0800fe2c 	.word	0x0800fe2c
 8008800:	40013000 	.word	0x40013000
 8008804:	40003800 	.word	0x40003800
 8008808:	40003c00 	.word	0x40003c00

0800880c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08c      	sub	sp, #48	; 0x30
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t   tmp_mode;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <HAL_SPI_TransmitReceive+0x26>
 8008828:	f240 41c2 	movw	r1, #1218	; 0x4c2
 800882c:	489a      	ldr	r0, [pc, #616]	; (8008a98 <HAL_SPI_TransmitReceive+0x28c>)
 800882e:	f7f8 fc5e 	bl	80010ee <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_SPI_TransmitReceive+0x34>
 800883c:	2302      	movs	r3, #2
 800883e:	e2da      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x5ea>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008848:	f7f8 ff04 	bl	8001654 <HAL_GetTick>
 800884c:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800884e:	887b      	ldrh	r3, [r7, #2]
 8008850:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8008852:	887b      	ldrh	r3, [r7, #2]
 8008854:	84bb      	strh	r3, [r7, #36]	; 0x24
  tmp_state           = hspi->State;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800885c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008864:	7efb      	ldrb	r3, [r7, #27]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d014      	beq.n	8008894 <HAL_SPI_TransmitReceive+0x88>
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008870:	d106      	bne.n	8008880 <HAL_SPI_TransmitReceive+0x74>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <HAL_SPI_TransmitReceive+0x74>
 800887a:	7efb      	ldrb	r3, [r7, #27]
 800887c:	2b04      	cmp	r3, #4
 800887e:	d009      	beq.n	8008894 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 8008880:	2302      	movs	r3, #2
 8008882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800888e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008892:	e2b0      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x5ea>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <HAL_SPI_TransmitReceive+0x9a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <HAL_SPI_TransmitReceive+0x9a>
 80088a0:	887b      	ldrh	r3, [r7, #2]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d109      	bne.n	80088ba <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088b8:	e29d      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x5ea>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d003      	beq.n	80088ce <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2205      	movs	r2, #5
 80088ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	887a      	ldrh	r2, [r7, #2]
 80088e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	887a      	ldrh	r2, [r7, #2]
 80088e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	887a      	ldrh	r2, [r7, #2]
 80088f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	887a      	ldrh	r2, [r7, #2]
 80088fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	4b61      	ldr	r3, [pc, #388]	; (8008a9c <HAL_SPI_TransmitReceive+0x290>)
 8008916:	4013      	ands	r3, r2
 8008918:	8879      	ldrh	r1, [r7, #2]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	6812      	ldr	r2, [r2, #0]
 800891e:	430b      	orrs	r3, r1
 8008920:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800893a:	d107      	bne.n	800894c <HAL_SPI_TransmitReceive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800894a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2b0f      	cmp	r3, #15
 8008952:	d970      	bls.n	8008a36 <HAL_SPI_TransmitReceive+0x22a>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008954:	e044      	b.n	80089e0 <HAL_SPI_TransmitReceive+0x1d4>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b02      	cmp	r3, #2
 8008962:	d11a      	bne.n	800899a <HAL_SPI_TransmitReceive+0x18e>
 8008964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008966:	2b00      	cmp	r3, #0
 8008968:	d017      	beq.n	800899a <HAL_SPI_TransmitReceive+0x18e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6812      	ldr	r2, [r2, #0]
 8008974:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897a:	1d1a      	adds	r2, r3, #4
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008986:	b29b      	uxth	r3, r3
 8008988:	3b01      	subs	r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008998:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	695a      	ldr	r2, [r3, #20]
 80089a0:	f248 0308 	movw	r3, #32776	; 0x8008
 80089a4:	4013      	ands	r3, r2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d01a      	beq.n	80089e0 <HAL_SPI_TransmitReceive+0x1d4>
 80089aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d017      	beq.n	80089e0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089ba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c0:	1d1a      	adds	r2, r3, #4
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089de:	84bb      	strh	r3, [r7, #36]	; 0x24
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80089e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1b7      	bne.n	8008956 <HAL_SPI_TransmitReceive+0x14a>
 80089e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1b4      	bne.n	8008956 <HAL_SPI_TransmitReceive+0x14a>
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089ec:	f7f8 fe32 	bl	8001654 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d803      	bhi.n	8008a04 <HAL_SPI_TransmitReceive+0x1f8>
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d103      	bne.n	8008a0c <HAL_SPI_TransmitReceive+0x200>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f040 81ce 	bne.w	8008da8 <HAL_SPI_TransmitReceive+0x59c>
    {
      /* Call standard close procedure with error check */
      SPI_CloseTransfer(hspi);
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 f9f7 	bl	8008e00 <SPI_CloseTransfer>

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      hspi->State = HAL_SPI_STATE_READY;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e1df      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x5ea>
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	2b07      	cmp	r3, #7
 8008a3c:	f240 81ac 	bls.w	8008d98 <HAL_SPI_TransmitReceive+0x58c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008a40:	e0b0      	b.n	8008ba4 <HAL_SPI_TransmitReceive+0x398>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d140      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x2c6>
 8008a50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d03d      	beq.n	8008ad2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d921      	bls.n	8008aa0 <HAL_SPI_TransmitReceive+0x294>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01d      	beq.n	8008aa0 <HAL_SPI_TransmitReceive+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6812      	ldr	r2, [r2, #0]
 8008a6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a74:	1d1a      	adds	r2, r3, #4
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b02      	subs	r3, #2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008a94:	e01d      	b.n	8008ad2 <HAL_SPI_TransmitReceive+0x2c6>
 8008a96:	bf00      	nop
 8008a98:	0800fe2c 	.word	0x0800fe2c
 8008a9c:	ffff0000 	.word	0xffff0000
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3320      	adds	r3, #32
 8008aaa:	8812      	ldrh	r2, [r2, #0]
 8008aac:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab2:	1c9a      	adds	r2, r3, #2
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ad0:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d03d      	beq.n	8008b5c <HAL_SPI_TransmitReceive+0x350>
 8008ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d03a      	beq.n	8008b5c <HAL_SPI_TransmitReceive+0x350>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d018      	beq.n	8008b26 <HAL_SPI_TransmitReceive+0x31a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008afe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b04:	1d1a      	adds	r2, r3, #4
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b02      	subs	r3, #2
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b22:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008b24:	e01a      	b.n	8008b5c <HAL_SPI_TransmitReceive+0x350>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b32:	8812      	ldrh	r2, [r2, #0]
 8008b34:	b292      	uxth	r2, r2
 8008b36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b3c:	1c9a      	adds	r2, r3, #2
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b5c:	f7f8 fd7a 	bl	8001654 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d803      	bhi.n	8008b74 <HAL_SPI_TransmitReceive+0x368>
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b72:	d102      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x36e>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d114      	bne.n	8008ba4 <HAL_SPI_TransmitReceive+0x398>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 f940 	bl	8008e00 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e128      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f47f af4b 	bne.w	8008a42 <HAL_SPI_TransmitReceive+0x236>
 8008bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f47f af47 	bne.w	8008a42 <HAL_SPI_TransmitReceive+0x236>
 8008bb4:	e0f8      	b.n	8008da8 <HAL_SPI_TransmitReceive+0x59c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d15c      	bne.n	8008c7e <HAL_SPI_TransmitReceive+0x472>
 8008bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d059      	beq.n	8008c7e <HAL_SPI_TransmitReceive+0x472>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d91c      	bls.n	8008c0a <HAL_SPI_TransmitReceive+0x3fe>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd4:	2b40      	cmp	r3, #64	; 0x40
 8008bd6:	d918      	bls.n	8008c0a <HAL_SPI_TransmitReceive+0x3fe>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be8:	1d1a      	adds	r2, r3, #4
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3b04      	subs	r3, #4
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c06:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008c08:	e039      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x472>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008c0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d91d      	bls.n	8008c4c <HAL_SPI_TransmitReceive+0x440>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d019      	beq.n	8008c4c <HAL_SPI_TransmitReceive+0x440>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3320      	adds	r3, #32
 8008c22:	8812      	ldrh	r2, [r2, #0]
 8008c24:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2a:	1c9a      	adds	r2, r3, #2
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	3b02      	subs	r3, #2
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008c4a:	e018      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3320      	adds	r3, #32
 8008c56:	7812      	ldrb	r2, [r2, #0]
 8008c58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c7c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d061      	beq.n	8008d50 <HAL_SPI_TransmitReceive+0x544>
 8008c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d05e      	beq.n	8008d50 <HAL_SPI_TransmitReceive+0x544>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d018      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0x4c6>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008caa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb0:	1d1a      	adds	r2, r3, #4
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	3b04      	subs	r3, #4
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cce:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008cd0:	e03e      	b.n	8008d50 <HAL_SPI_TransmitReceive+0x544>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ce0:	d91b      	bls.n	8008d1a <HAL_SPI_TransmitReceive+0x50e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cee:	8812      	ldrh	r2, [r2, #0]
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cf8:	1c9a      	adds	r2, r3, #2
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b02      	subs	r3, #2
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d18:	e01a      	b.n	8008d50 <HAL_SPI_TransmitReceive+0x544>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d26:	7812      	ldrb	r2, [r2, #0]
 8008d28:	b2d2      	uxtb	r2, r2
 8008d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d4e:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d50:	f7f8 fc80 	bl	8001654 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d803      	bhi.n	8008d68 <HAL_SPI_TransmitReceive+0x55c>
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d66:	d102      	bne.n	8008d6e <HAL_SPI_TransmitReceive+0x562>
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d114      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x58c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f846 	bl	8008e00 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e02e      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x5ea>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f47f af0b 	bne.w	8008bb6 <HAL_SPI_TransmitReceive+0x3aa>
 8008da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f47f af07 	bne.w	8008bb6 <HAL_SPI_TransmitReceive+0x3aa>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	2200      	movs	r2, #0
 8008db0:	2108      	movs	r1, #8
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 f8c4 	bl	8008f40 <SPI_WaitOnFlagUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d007      	beq.n	8008dce <HAL_SPI_TransmitReceive+0x5c2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc4:	f043 0220 	orr.w	r2, r3, #32
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 f816 	bl	8008e00 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_SPI_TransmitReceive+0x5e6>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e001      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x5ea>
  }
  return errorcode;
 8008df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3728      	adds	r7, #40	; 0x28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop

08008e00 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0208 	orr.w	r2, r2, #8
 8008e1e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0210 	orr.w	r2, r2, #16
 8008e2e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0201 	bic.w	r2, r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6919      	ldr	r1, [r3, #16]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	4b3c      	ldr	r3, [pc, #240]	; (8008f3c <SPI_CloseTransfer+0x13c>)
 8008e4c:	400b      	ands	r3, r1
 8008e4e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008e5e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d014      	beq.n	8008e96 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00f      	beq.n	8008e96 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	699a      	ldr	r2, [r3, #24]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0220 	orr.w	r2, r2, #32
 8008e94:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d014      	beq.n	8008ecc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00f      	beq.n	8008ecc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eb2:	f043 0204 	orr.w	r2, r3, #4
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00f      	beq.n	8008ef6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008edc:	f043 0201 	orr.w	r2, r3, #1
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	699a      	ldr	r2, [r3, #24]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00f      	beq.n	8008f20 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f06:	f043 0208 	orr.w	r2, r3, #8
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699a      	ldr	r2, [r3, #24]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f1e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	fffffc90 	.word	0xfffffc90

08008f40 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f50:	e010      	b.n	8008f74 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f52:	f7f8 fb7f 	bl	8001654 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d803      	bhi.n	8008f6a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f68:	d102      	bne.n	8008f70 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e00f      	b.n	8008f94 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	bf0c      	ite	eq
 8008f84:	2301      	moveq	r3, #1
 8008f86:	2300      	movne	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d0df      	beq.n	8008f52 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa8:	095b      	lsrs	r3, r3, #5
 8008faa:	3301      	adds	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	08db      	lsrs	r3, r3, #3
 8008fbc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	fb02 f303 	mul.w	r3, r2, r3
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
	...

08008fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e0ab      	b.n	800913e <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d032      	beq.n	8009054 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a55      	ldr	r2, [pc, #340]	; (8009148 <HAL_UART_Init+0x174>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d05f      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a53      	ldr	r2, [pc, #332]	; (800914c <HAL_UART_Init+0x178>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d05a      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a52      	ldr	r2, [pc, #328]	; (8009150 <HAL_UART_Init+0x17c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d055      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a50      	ldr	r2, [pc, #320]	; (8009154 <HAL_UART_Init+0x180>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d050      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a4f      	ldr	r2, [pc, #316]	; (8009158 <HAL_UART_Init+0x184>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d04b      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a4d      	ldr	r2, [pc, #308]	; (800915c <HAL_UART_Init+0x188>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d046      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a4c      	ldr	r2, [pc, #304]	; (8009160 <HAL_UART_Init+0x18c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d041      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a4a      	ldr	r2, [pc, #296]	; (8009164 <HAL_UART_Init+0x190>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d03c      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a49      	ldr	r2, [pc, #292]	; (8009168 <HAL_UART_Init+0x194>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d037      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009048:	f44f 7199 	mov.w	r1, #306	; 0x132
 800904c:	4847      	ldr	r0, [pc, #284]	; (800916c <HAL_UART_Init+0x198>)
 800904e:	f7f8 f84e 	bl	80010ee <assert_failed>
 8009052:	e031      	b.n	80090b8 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a3b      	ldr	r2, [pc, #236]	; (8009148 <HAL_UART_Init+0x174>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d02c      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a3a      	ldr	r2, [pc, #232]	; (800914c <HAL_UART_Init+0x178>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d027      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a38      	ldr	r2, [pc, #224]	; (8009150 <HAL_UART_Init+0x17c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d022      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a37      	ldr	r2, [pc, #220]	; (8009154 <HAL_UART_Init+0x180>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d01d      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a35      	ldr	r2, [pc, #212]	; (8009158 <HAL_UART_Init+0x184>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d018      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a34      	ldr	r2, [pc, #208]	; (800915c <HAL_UART_Init+0x188>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d013      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a32      	ldr	r2, [pc, #200]	; (8009160 <HAL_UART_Init+0x18c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00e      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a31      	ldr	r2, [pc, #196]	; (8009164 <HAL_UART_Init+0x190>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d009      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a2f      	ldr	r2, [pc, #188]	; (8009168 <HAL_UART_Init+0x194>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d004      	beq.n	80090b8 <HAL_UART_Init+0xe4>
 80090ae:	f240 1137 	movw	r1, #311	; 0x137
 80090b2:	482e      	ldr	r0, [pc, #184]	; (800916c <HAL_UART_Init+0x198>)
 80090b4:	f7f8 f81b 	bl	80010ee <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7f8 f9cc 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2224      	movs	r2, #36	; 0x24
 80090d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0201 	bic.w	r2, r2, #1
 80090e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f841 	bl	8009170 <UART_SetConfig>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d101      	bne.n	80090f8 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e022      	b.n	800913e <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f002 fa93 	bl	800b62c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009114:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009124:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0201 	orr.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f002 fbee 	bl	800b918 <UART_CheckIdleState>
 800913c:	4603      	mov	r3, r0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40011000 	.word	0x40011000
 800914c:	40004400 	.word	0x40004400
 8009150:	40004800 	.word	0x40004800
 8009154:	40004c00 	.word	0x40004c00
 8009158:	40005000 	.word	0x40005000
 800915c:	40011400 	.word	0x40011400
 8009160:	40007800 	.word	0x40007800
 8009164:	40007c00 	.word	0x40007c00
 8009168:	58000c00 	.word	0x58000c00
 800916c:	0800fe64 	.word	0x0800fe64

08009170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009170:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009174:	b090      	sub	sp, #64	; 0x40
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800917a:	2300      	movs	r3, #0
 800917c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009184:	2300      	movs	r3, #0
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4a17      	ldr	r2, [pc, #92]	; (80091ec <UART_SetConfig+0x7c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d904      	bls.n	800919c <UART_SetConfig+0x2c>
 8009192:	f640 3134 	movw	r1, #2868	; 0xb34
 8009196:	4816      	ldr	r0, [pc, #88]	; (80091f0 <UART_SetConfig+0x80>)
 8009198:	f7f7 ffa9 	bl	80010ee <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091a4:	d00d      	beq.n	80091c2 <UART_SetConfig+0x52>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <UART_SetConfig+0x52>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b6:	d004      	beq.n	80091c2 <UART_SetConfig+0x52>
 80091b8:	f640 3135 	movw	r1, #2869	; 0xb35
 80091bc:	480c      	ldr	r0, [pc, #48]	; (80091f0 <UART_SetConfig+0x80>)
 80091be:	f7f7 ff96 	bl	80010ee <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a0b      	ldr	r2, [pc, #44]	; (80091f4 <UART_SetConfig+0x84>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d115      	bne.n	80091f8 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d037      	beq.n	8009244 <UART_SetConfig+0xd4>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091dc:	d032      	beq.n	8009244 <UART_SetConfig+0xd4>
 80091de:	f640 3138 	movw	r1, #2872	; 0xb38
 80091e2:	4803      	ldr	r0, [pc, #12]	; (80091f0 <UART_SetConfig+0x80>)
 80091e4:	f7f7 ff83 	bl	80010ee <assert_failed>
 80091e8:	e02c      	b.n	8009244 <UART_SetConfig+0xd4>
 80091ea:	bf00      	nop
 80091ec:	00bebc20 	.word	0x00bebc20
 80091f0:	0800fe64 	.word	0x0800fe64
 80091f4:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009200:	d012      	beq.n	8009228 <UART_SetConfig+0xb8>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00e      	beq.n	8009228 <UART_SetConfig+0xb8>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009212:	d009      	beq.n	8009228 <UART_SetConfig+0xb8>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800921c:	d004      	beq.n	8009228 <UART_SetConfig+0xb8>
 800921e:	f640 313c 	movw	r1, #2876	; 0xb3c
 8009222:	48aa      	ldr	r0, [pc, #680]	; (80094cc <UART_SetConfig+0x35c>)
 8009224:	f7f7 ff63 	bl	80010ee <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d009      	beq.n	8009244 <UART_SetConfig+0xd4>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009238:	d004      	beq.n	8009244 <UART_SetConfig+0xd4>
 800923a:	f640 313d 	movw	r1, #2877	; 0xb3d
 800923e:	48a3      	ldr	r0, [pc, #652]	; (80094cc <UART_SetConfig+0x35c>)
 8009240:	f7f7 ff55 	bl	80010ee <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00e      	beq.n	800926a <UART_SetConfig+0xfa>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009254:	d009      	beq.n	800926a <UART_SetConfig+0xfa>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800925e:	d004      	beq.n	800926a <UART_SetConfig+0xfa>
 8009260:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8009264:	4899      	ldr	r0, [pc, #612]	; (80094cc <UART_SetConfig+0x35c>)
 8009266:	f7f7 ff42 	bl	80010ee <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	f023 030c 	bic.w	r3, r3, #12
 8009272:	2b00      	cmp	r3, #0
 8009274:	d103      	bne.n	800927e <UART_SetConfig+0x10e>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d104      	bne.n	8009288 <UART_SetConfig+0x118>
 800927e:	f640 3141 	movw	r1, #2881	; 0xb41
 8009282:	4892      	ldr	r0, [pc, #584]	; (80094cc <UART_SetConfig+0x35c>)
 8009284:	f7f7 ff33 	bl	80010ee <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d013      	beq.n	80092b8 <UART_SetConfig+0x148>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009298:	d00e      	beq.n	80092b8 <UART_SetConfig+0x148>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092a2:	d009      	beq.n	80092b8 <UART_SetConfig+0x148>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092ac:	d004      	beq.n	80092b8 <UART_SetConfig+0x148>
 80092ae:	f640 3142 	movw	r1, #2882	; 0xb42
 80092b2:	4886      	ldr	r0, [pc, #536]	; (80094cc <UART_SetConfig+0x35c>)
 80092b4:	f7f7 ff1b 	bl	80010ee <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <UART_SetConfig+0x164>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c8:	d004      	beq.n	80092d4 <UART_SetConfig+0x164>
 80092ca:	f640 3143 	movw	r1, #2883	; 0xb43
 80092ce:	487f      	ldr	r0, [pc, #508]	; (80094cc <UART_SetConfig+0x35c>)
 80092d0:	f7f7 ff0d 	bl	80010ee <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d030      	beq.n	800933e <UART_SetConfig+0x1ce>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d02c      	beq.n	800933e <UART_SetConfig+0x1ce>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d028      	beq.n	800933e <UART_SetConfig+0x1ce>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d024      	beq.n	800933e <UART_SetConfig+0x1ce>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	d020      	beq.n	800933e <UART_SetConfig+0x1ce>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b05      	cmp	r3, #5
 8009302:	d01c      	beq.n	800933e <UART_SetConfig+0x1ce>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	2b06      	cmp	r3, #6
 800930a:	d018      	beq.n	800933e <UART_SetConfig+0x1ce>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b07      	cmp	r3, #7
 8009312:	d014      	beq.n	800933e <UART_SetConfig+0x1ce>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	2b08      	cmp	r3, #8
 800931a:	d010      	beq.n	800933e <UART_SetConfig+0x1ce>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	2b09      	cmp	r3, #9
 8009322:	d00c      	beq.n	800933e <UART_SetConfig+0x1ce>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b0a      	cmp	r3, #10
 800932a:	d008      	beq.n	800933e <UART_SetConfig+0x1ce>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	2b0b      	cmp	r3, #11
 8009332:	d004      	beq.n	800933e <UART_SetConfig+0x1ce>
 8009334:	f640 3144 	movw	r1, #2884	; 0xb44
 8009338:	4864      	ldr	r0, [pc, #400]	; (80094cc <UART_SetConfig+0x35c>)
 800933a:	f7f7 fed8 	bl	80010ee <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	431a      	orrs	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	431a      	orrs	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	4313      	orrs	r3, r2
 8009354:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800935c:	4313      	orrs	r3, r2
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	4b5a      	ldr	r3, [pc, #360]	; (80094d0 <UART_SetConfig+0x360>)
 8009368:	4013      	ands	r3, r2
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009370:	430b      	orrs	r3, r1
 8009372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68da      	ldr	r2, [r3, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a4f      	ldr	r2, [pc, #316]	; (80094d4 <UART_SetConfig+0x364>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d004      	beq.n	80093a4 <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093a0:	4313      	orrs	r3, r2
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
 80093aa:	4b4b      	ldr	r3, [pc, #300]	; (80094d8 <UART_SetConfig+0x368>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	6812      	ldr	r2, [r2, #0]
 80093b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093b4:	430b      	orrs	r3, r1
 80093b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	f023 010f 	bic.w	r1, r3, #15
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a42      	ldr	r2, [pc, #264]	; (80094dc <UART_SetConfig+0x36c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	f040 8085 	bne.w	80094e4 <UART_SetConfig+0x374>
 80093da:	4b41      	ldr	r3, [pc, #260]	; (80094e0 <UART_SetConfig+0x370>)
 80093dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093e2:	2b28      	cmp	r3, #40	; 0x28
 80093e4:	d86c      	bhi.n	80094c0 <UART_SetConfig+0x350>
 80093e6:	a201      	add	r2, pc, #4	; (adr r2, 80093ec <UART_SetConfig+0x27c>)
 80093e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ec:	08009491 	.word	0x08009491
 80093f0:	080094c1 	.word	0x080094c1
 80093f4:	080094c1 	.word	0x080094c1
 80093f8:	080094c1 	.word	0x080094c1
 80093fc:	080094c1 	.word	0x080094c1
 8009400:	080094c1 	.word	0x080094c1
 8009404:	080094c1 	.word	0x080094c1
 8009408:	080094c1 	.word	0x080094c1
 800940c:	08009499 	.word	0x08009499
 8009410:	080094c1 	.word	0x080094c1
 8009414:	080094c1 	.word	0x080094c1
 8009418:	080094c1 	.word	0x080094c1
 800941c:	080094c1 	.word	0x080094c1
 8009420:	080094c1 	.word	0x080094c1
 8009424:	080094c1 	.word	0x080094c1
 8009428:	080094c1 	.word	0x080094c1
 800942c:	080094a1 	.word	0x080094a1
 8009430:	080094c1 	.word	0x080094c1
 8009434:	080094c1 	.word	0x080094c1
 8009438:	080094c1 	.word	0x080094c1
 800943c:	080094c1 	.word	0x080094c1
 8009440:	080094c1 	.word	0x080094c1
 8009444:	080094c1 	.word	0x080094c1
 8009448:	080094c1 	.word	0x080094c1
 800944c:	080094a9 	.word	0x080094a9
 8009450:	080094c1 	.word	0x080094c1
 8009454:	080094c1 	.word	0x080094c1
 8009458:	080094c1 	.word	0x080094c1
 800945c:	080094c1 	.word	0x080094c1
 8009460:	080094c1 	.word	0x080094c1
 8009464:	080094c1 	.word	0x080094c1
 8009468:	080094c1 	.word	0x080094c1
 800946c:	080094b1 	.word	0x080094b1
 8009470:	080094c1 	.word	0x080094c1
 8009474:	080094c1 	.word	0x080094c1
 8009478:	080094c1 	.word	0x080094c1
 800947c:	080094c1 	.word	0x080094c1
 8009480:	080094c1 	.word	0x080094c1
 8009484:	080094c1 	.word	0x080094c1
 8009488:	080094c1 	.word	0x080094c1
 800948c:	080094b9 	.word	0x080094b9
 8009490:	2301      	movs	r3, #1
 8009492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009496:	e23b      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009498:	2304      	movs	r3, #4
 800949a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800949e:	e237      	b.n	8009910 <UART_SetConfig+0x7a0>
 80094a0:	2308      	movs	r3, #8
 80094a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094a6:	e233      	b.n	8009910 <UART_SetConfig+0x7a0>
 80094a8:	2310      	movs	r3, #16
 80094aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094ae:	e22f      	b.n	8009910 <UART_SetConfig+0x7a0>
 80094b0:	2320      	movs	r3, #32
 80094b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094b6:	e22b      	b.n	8009910 <UART_SetConfig+0x7a0>
 80094b8:	2340      	movs	r3, #64	; 0x40
 80094ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094be:	e227      	b.n	8009910 <UART_SetConfig+0x7a0>
 80094c0:	2380      	movs	r3, #128	; 0x80
 80094c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094c6:	bf00      	nop
 80094c8:	e222      	b.n	8009910 <UART_SetConfig+0x7a0>
 80094ca:	bf00      	nop
 80094cc:	0800fe64 	.word	0x0800fe64
 80094d0:	cfff69f3 	.word	0xcfff69f3
 80094d4:	58000c00 	.word	0x58000c00
 80094d8:	11fff4ff 	.word	0x11fff4ff
 80094dc:	40011000 	.word	0x40011000
 80094e0:	58024400 	.word	0x58024400
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4ac9      	ldr	r2, [pc, #804]	; (8009810 <UART_SetConfig+0x6a0>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d131      	bne.n	8009552 <UART_SetConfig+0x3e2>
 80094ee:	4bc9      	ldr	r3, [pc, #804]	; (8009814 <UART_SetConfig+0x6a4>)
 80094f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	2b05      	cmp	r3, #5
 80094f8:	d826      	bhi.n	8009548 <UART_SetConfig+0x3d8>
 80094fa:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <UART_SetConfig+0x390>)
 80094fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009500:	08009519 	.word	0x08009519
 8009504:	08009521 	.word	0x08009521
 8009508:	08009529 	.word	0x08009529
 800950c:	08009531 	.word	0x08009531
 8009510:	08009539 	.word	0x08009539
 8009514:	08009541 	.word	0x08009541
 8009518:	2300      	movs	r3, #0
 800951a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800951e:	e1f7      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009520:	2304      	movs	r3, #4
 8009522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009526:	e1f3      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009528:	2308      	movs	r3, #8
 800952a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800952e:	e1ef      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009530:	2310      	movs	r3, #16
 8009532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009536:	e1eb      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009538:	2320      	movs	r3, #32
 800953a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800953e:	e1e7      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009540:	2340      	movs	r3, #64	; 0x40
 8009542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009546:	e1e3      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009548:	2380      	movs	r3, #128	; 0x80
 800954a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800954e:	bf00      	nop
 8009550:	e1de      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4ab0      	ldr	r2, [pc, #704]	; (8009818 <UART_SetConfig+0x6a8>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d132      	bne.n	80095c2 <UART_SetConfig+0x452>
 800955c:	4bad      	ldr	r3, [pc, #692]	; (8009814 <UART_SetConfig+0x6a4>)
 800955e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009560:	f003 0307 	and.w	r3, r3, #7
 8009564:	2b05      	cmp	r3, #5
 8009566:	d827      	bhi.n	80095b8 <UART_SetConfig+0x448>
 8009568:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <UART_SetConfig+0x400>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	08009589 	.word	0x08009589
 8009574:	08009591 	.word	0x08009591
 8009578:	08009599 	.word	0x08009599
 800957c:	080095a1 	.word	0x080095a1
 8009580:	080095a9 	.word	0x080095a9
 8009584:	080095b1 	.word	0x080095b1
 8009588:	2300      	movs	r3, #0
 800958a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800958e:	e1bf      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009590:	2304      	movs	r3, #4
 8009592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009596:	e1bb      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009598:	2308      	movs	r3, #8
 800959a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800959e:	e1b7      	b.n	8009910 <UART_SetConfig+0x7a0>
 80095a0:	2310      	movs	r3, #16
 80095a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095a6:	e1b3      	b.n	8009910 <UART_SetConfig+0x7a0>
 80095a8:	2320      	movs	r3, #32
 80095aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095ae:	e1af      	b.n	8009910 <UART_SetConfig+0x7a0>
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095b6:	e1ab      	b.n	8009910 <UART_SetConfig+0x7a0>
 80095b8:	2380      	movs	r3, #128	; 0x80
 80095ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095be:	bf00      	nop
 80095c0:	e1a6      	b.n	8009910 <UART_SetConfig+0x7a0>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a95      	ldr	r2, [pc, #596]	; (800981c <UART_SetConfig+0x6ac>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d132      	bne.n	8009632 <UART_SetConfig+0x4c2>
 80095cc:	4b91      	ldr	r3, [pc, #580]	; (8009814 <UART_SetConfig+0x6a4>)
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	2b05      	cmp	r3, #5
 80095d6:	d827      	bhi.n	8009628 <UART_SetConfig+0x4b8>
 80095d8:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <UART_SetConfig+0x470>)
 80095da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095de:	bf00      	nop
 80095e0:	080095f9 	.word	0x080095f9
 80095e4:	08009601 	.word	0x08009601
 80095e8:	08009609 	.word	0x08009609
 80095ec:	08009611 	.word	0x08009611
 80095f0:	08009619 	.word	0x08009619
 80095f4:	08009621 	.word	0x08009621
 80095f8:	2300      	movs	r3, #0
 80095fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095fe:	e187      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009600:	2304      	movs	r3, #4
 8009602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009606:	e183      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009608:	2308      	movs	r3, #8
 800960a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800960e:	e17f      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009610:	2310      	movs	r3, #16
 8009612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009616:	e17b      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009618:	2320      	movs	r3, #32
 800961a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800961e:	e177      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009626:	e173      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009628:	2380      	movs	r3, #128	; 0x80
 800962a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800962e:	bf00      	nop
 8009630:	e16e      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a7a      	ldr	r2, [pc, #488]	; (8009820 <UART_SetConfig+0x6b0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d132      	bne.n	80096a2 <UART_SetConfig+0x532>
 800963c:	4b75      	ldr	r3, [pc, #468]	; (8009814 <UART_SetConfig+0x6a4>)
 800963e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	2b05      	cmp	r3, #5
 8009646:	d827      	bhi.n	8009698 <UART_SetConfig+0x528>
 8009648:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <UART_SetConfig+0x4e0>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	08009669 	.word	0x08009669
 8009654:	08009671 	.word	0x08009671
 8009658:	08009679 	.word	0x08009679
 800965c:	08009681 	.word	0x08009681
 8009660:	08009689 	.word	0x08009689
 8009664:	08009691 	.word	0x08009691
 8009668:	2300      	movs	r3, #0
 800966a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800966e:	e14f      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009670:	2304      	movs	r3, #4
 8009672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009676:	e14b      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009678:	2308      	movs	r3, #8
 800967a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800967e:	e147      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009680:	2310      	movs	r3, #16
 8009682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009686:	e143      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009688:	2320      	movs	r3, #32
 800968a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800968e:	e13f      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009690:	2340      	movs	r3, #64	; 0x40
 8009692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009696:	e13b      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009698:	2380      	movs	r3, #128	; 0x80
 800969a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800969e:	bf00      	nop
 80096a0:	e136      	b.n	8009910 <UART_SetConfig+0x7a0>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a5f      	ldr	r2, [pc, #380]	; (8009824 <UART_SetConfig+0x6b4>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d178      	bne.n	800979e <UART_SetConfig+0x62e>
 80096ac:	4b59      	ldr	r3, [pc, #356]	; (8009814 <UART_SetConfig+0x6a4>)
 80096ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096b4:	2b28      	cmp	r3, #40	; 0x28
 80096b6:	d86d      	bhi.n	8009794 <UART_SetConfig+0x624>
 80096b8:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <UART_SetConfig+0x550>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	08009765 	.word	0x08009765
 80096c4:	08009795 	.word	0x08009795
 80096c8:	08009795 	.word	0x08009795
 80096cc:	08009795 	.word	0x08009795
 80096d0:	08009795 	.word	0x08009795
 80096d4:	08009795 	.word	0x08009795
 80096d8:	08009795 	.word	0x08009795
 80096dc:	08009795 	.word	0x08009795
 80096e0:	0800976d 	.word	0x0800976d
 80096e4:	08009795 	.word	0x08009795
 80096e8:	08009795 	.word	0x08009795
 80096ec:	08009795 	.word	0x08009795
 80096f0:	08009795 	.word	0x08009795
 80096f4:	08009795 	.word	0x08009795
 80096f8:	08009795 	.word	0x08009795
 80096fc:	08009795 	.word	0x08009795
 8009700:	08009775 	.word	0x08009775
 8009704:	08009795 	.word	0x08009795
 8009708:	08009795 	.word	0x08009795
 800970c:	08009795 	.word	0x08009795
 8009710:	08009795 	.word	0x08009795
 8009714:	08009795 	.word	0x08009795
 8009718:	08009795 	.word	0x08009795
 800971c:	08009795 	.word	0x08009795
 8009720:	0800977d 	.word	0x0800977d
 8009724:	08009795 	.word	0x08009795
 8009728:	08009795 	.word	0x08009795
 800972c:	08009795 	.word	0x08009795
 8009730:	08009795 	.word	0x08009795
 8009734:	08009795 	.word	0x08009795
 8009738:	08009795 	.word	0x08009795
 800973c:	08009795 	.word	0x08009795
 8009740:	08009785 	.word	0x08009785
 8009744:	08009795 	.word	0x08009795
 8009748:	08009795 	.word	0x08009795
 800974c:	08009795 	.word	0x08009795
 8009750:	08009795 	.word	0x08009795
 8009754:	08009795 	.word	0x08009795
 8009758:	08009795 	.word	0x08009795
 800975c:	08009795 	.word	0x08009795
 8009760:	0800978d 	.word	0x0800978d
 8009764:	2301      	movs	r3, #1
 8009766:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800976a:	e0d1      	b.n	8009910 <UART_SetConfig+0x7a0>
 800976c:	2304      	movs	r3, #4
 800976e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009772:	e0cd      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009774:	2308      	movs	r3, #8
 8009776:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800977a:	e0c9      	b.n	8009910 <UART_SetConfig+0x7a0>
 800977c:	2310      	movs	r3, #16
 800977e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009782:	e0c5      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009784:	2320      	movs	r3, #32
 8009786:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800978a:	e0c1      	b.n	8009910 <UART_SetConfig+0x7a0>
 800978c:	2340      	movs	r3, #64	; 0x40
 800978e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009792:	e0bd      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009794:	2380      	movs	r3, #128	; 0x80
 8009796:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800979a:	bf00      	nop
 800979c:	e0b8      	b.n	8009910 <UART_SetConfig+0x7a0>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a21      	ldr	r2, [pc, #132]	; (8009828 <UART_SetConfig+0x6b8>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d141      	bne.n	800982c <UART_SetConfig+0x6bc>
 80097a8:	4b1a      	ldr	r3, [pc, #104]	; (8009814 <UART_SetConfig+0x6a4>)
 80097aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	2b05      	cmp	r3, #5
 80097b2:	d827      	bhi.n	8009804 <UART_SetConfig+0x694>
 80097b4:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <UART_SetConfig+0x64c>)
 80097b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ba:	bf00      	nop
 80097bc:	080097d5 	.word	0x080097d5
 80097c0:	080097dd 	.word	0x080097dd
 80097c4:	080097e5 	.word	0x080097e5
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	080097f5 	.word	0x080097f5
 80097d0:	080097fd 	.word	0x080097fd
 80097d4:	2300      	movs	r3, #0
 80097d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097da:	e099      	b.n	8009910 <UART_SetConfig+0x7a0>
 80097dc:	2304      	movs	r3, #4
 80097de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097e2:	e095      	b.n	8009910 <UART_SetConfig+0x7a0>
 80097e4:	2308      	movs	r3, #8
 80097e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097ea:	e091      	b.n	8009910 <UART_SetConfig+0x7a0>
 80097ec:	2310      	movs	r3, #16
 80097ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097f2:	e08d      	b.n	8009910 <UART_SetConfig+0x7a0>
 80097f4:	2320      	movs	r3, #32
 80097f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097fa:	e089      	b.n	8009910 <UART_SetConfig+0x7a0>
 80097fc:	2340      	movs	r3, #64	; 0x40
 80097fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009802:	e085      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009804:	2380      	movs	r3, #128	; 0x80
 8009806:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800980a:	bf00      	nop
 800980c:	e080      	b.n	8009910 <UART_SetConfig+0x7a0>
 800980e:	bf00      	nop
 8009810:	40004400 	.word	0x40004400
 8009814:	58024400 	.word	0x58024400
 8009818:	40004800 	.word	0x40004800
 800981c:	40004c00 	.word	0x40004c00
 8009820:	40005000 	.word	0x40005000
 8009824:	40011400 	.word	0x40011400
 8009828:	40007800 	.word	0x40007800
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a98      	ldr	r2, [pc, #608]	; (8009a94 <UART_SetConfig+0x924>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d131      	bne.n	800989a <UART_SetConfig+0x72a>
 8009836:	4b98      	ldr	r3, [pc, #608]	; (8009a98 <UART_SetConfig+0x928>)
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	2b05      	cmp	r3, #5
 8009840:	d826      	bhi.n	8009890 <UART_SetConfig+0x720>
 8009842:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <UART_SetConfig+0x6d8>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	08009861 	.word	0x08009861
 800984c:	08009869 	.word	0x08009869
 8009850:	08009871 	.word	0x08009871
 8009854:	08009879 	.word	0x08009879
 8009858:	08009881 	.word	0x08009881
 800985c:	08009889 	.word	0x08009889
 8009860:	2300      	movs	r3, #0
 8009862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009866:	e053      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009868:	2304      	movs	r3, #4
 800986a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800986e:	e04f      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009870:	2308      	movs	r3, #8
 8009872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009876:	e04b      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009878:	2310      	movs	r3, #16
 800987a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800987e:	e047      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009880:	2320      	movs	r3, #32
 8009882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009886:	e043      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009888:	2340      	movs	r3, #64	; 0x40
 800988a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800988e:	e03f      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009890:	2380      	movs	r3, #128	; 0x80
 8009892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009896:	bf00      	nop
 8009898:	e03a      	b.n	8009910 <UART_SetConfig+0x7a0>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a7f      	ldr	r2, [pc, #508]	; (8009a9c <UART_SetConfig+0x92c>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d132      	bne.n	800990a <UART_SetConfig+0x79a>
 80098a4:	4b7c      	ldr	r3, [pc, #496]	; (8009a98 <UART_SetConfig+0x928>)
 80098a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	2b05      	cmp	r3, #5
 80098ae:	d827      	bhi.n	8009900 <UART_SetConfig+0x790>
 80098b0:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <UART_SetConfig+0x748>)
 80098b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b6:	bf00      	nop
 80098b8:	080098d1 	.word	0x080098d1
 80098bc:	080098d9 	.word	0x080098d9
 80098c0:	080098e1 	.word	0x080098e1
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	2302      	movs	r3, #2
 80098d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098d6:	e01b      	b.n	8009910 <UART_SetConfig+0x7a0>
 80098d8:	2304      	movs	r3, #4
 80098da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098de:	e017      	b.n	8009910 <UART_SetConfig+0x7a0>
 80098e0:	2308      	movs	r3, #8
 80098e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098e6:	e013      	b.n	8009910 <UART_SetConfig+0x7a0>
 80098e8:	2310      	movs	r3, #16
 80098ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ee:	e00f      	b.n	8009910 <UART_SetConfig+0x7a0>
 80098f0:	2320      	movs	r3, #32
 80098f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098f6:	e00b      	b.n	8009910 <UART_SetConfig+0x7a0>
 80098f8:	2340      	movs	r3, #64	; 0x40
 80098fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098fe:	e007      	b.n	8009910 <UART_SetConfig+0x7a0>
 8009900:	2380      	movs	r3, #128	; 0x80
 8009902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009906:	bf00      	nop
 8009908:	e002      	b.n	8009910 <UART_SetConfig+0x7a0>
 800990a:	2380      	movs	r3, #128	; 0x80
 800990c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a61      	ldr	r2, [pc, #388]	; (8009a9c <UART_SetConfig+0x92c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	f040 86f3 	bne.w	800a702 <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800991c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009920:	2b08      	cmp	r3, #8
 8009922:	f000 80bd 	beq.w	8009aa0 <UART_SetConfig+0x930>
 8009926:	2b08      	cmp	r3, #8
 8009928:	dc04      	bgt.n	8009934 <UART_SetConfig+0x7c4>
 800992a:	2b02      	cmp	r3, #2
 800992c:	d00c      	beq.n	8009948 <UART_SetConfig+0x7d8>
 800992e:	2b04      	cmp	r3, #4
 8009930:	d05b      	beq.n	80099ea <UART_SetConfig+0x87a>
 8009932:	e276      	b.n	8009e22 <UART_SetConfig+0xcb2>
 8009934:	2b20      	cmp	r3, #32
 8009936:	f000 81ad 	beq.w	8009c94 <UART_SetConfig+0xb24>
 800993a:	2b40      	cmp	r3, #64	; 0x40
 800993c:	f000 821a 	beq.w	8009d74 <UART_SetConfig+0xc04>
 8009940:	2b10      	cmp	r3, #16
 8009942:	f000 8101 	beq.w	8009b48 <UART_SetConfig+0x9d8>
 8009946:	e26c      	b.n	8009e22 <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009948:	f7fd ffb0 	bl	80078ac <HAL_RCCEx_GetD3PCLK1Freq>
 800994c:	4602      	mov	r2, r0
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d044      	beq.n	80099e0 <UART_SetConfig+0x870>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	2b01      	cmp	r3, #1
 800995c:	d03e      	beq.n	80099dc <UART_SetConfig+0x86c>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	2b02      	cmp	r3, #2
 8009964:	d038      	beq.n	80099d8 <UART_SetConfig+0x868>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	2b03      	cmp	r3, #3
 800996c:	d032      	beq.n	80099d4 <UART_SetConfig+0x864>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	2b04      	cmp	r3, #4
 8009974:	d02c      	beq.n	80099d0 <UART_SetConfig+0x860>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	2b05      	cmp	r3, #5
 800997c:	d026      	beq.n	80099cc <UART_SetConfig+0x85c>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	2b06      	cmp	r3, #6
 8009984:	d020      	beq.n	80099c8 <UART_SetConfig+0x858>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998a:	2b07      	cmp	r3, #7
 800998c:	d01a      	beq.n	80099c4 <UART_SetConfig+0x854>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	2b08      	cmp	r3, #8
 8009994:	d014      	beq.n	80099c0 <UART_SetConfig+0x850>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	2b09      	cmp	r3, #9
 800999c:	d00e      	beq.n	80099bc <UART_SetConfig+0x84c>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	2b0a      	cmp	r3, #10
 80099a4:	d008      	beq.n	80099b8 <UART_SetConfig+0x848>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	2b0b      	cmp	r3, #11
 80099ac:	d102      	bne.n	80099b4 <UART_SetConfig+0x844>
 80099ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099b2:	e016      	b.n	80099e2 <UART_SetConfig+0x872>
 80099b4:	2301      	movs	r3, #1
 80099b6:	e014      	b.n	80099e2 <UART_SetConfig+0x872>
 80099b8:	2380      	movs	r3, #128	; 0x80
 80099ba:	e012      	b.n	80099e2 <UART_SetConfig+0x872>
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	e010      	b.n	80099e2 <UART_SetConfig+0x872>
 80099c0:	2320      	movs	r3, #32
 80099c2:	e00e      	b.n	80099e2 <UART_SetConfig+0x872>
 80099c4:	2310      	movs	r3, #16
 80099c6:	e00c      	b.n	80099e2 <UART_SetConfig+0x872>
 80099c8:	230c      	movs	r3, #12
 80099ca:	e00a      	b.n	80099e2 <UART_SetConfig+0x872>
 80099cc:	230a      	movs	r3, #10
 80099ce:	e008      	b.n	80099e2 <UART_SetConfig+0x872>
 80099d0:	2308      	movs	r3, #8
 80099d2:	e006      	b.n	80099e2 <UART_SetConfig+0x872>
 80099d4:	2306      	movs	r3, #6
 80099d6:	e004      	b.n	80099e2 <UART_SetConfig+0x872>
 80099d8:	2304      	movs	r3, #4
 80099da:	e002      	b.n	80099e2 <UART_SetConfig+0x872>
 80099dc:	2302      	movs	r3, #2
 80099de:	e000      	b.n	80099e2 <UART_SetConfig+0x872>
 80099e0:	2301      	movs	r3, #1
 80099e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099e8:	e21f      	b.n	8009e2a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ea:	f107 0318 	add.w	r3, r7, #24
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fd ff72 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d044      	beq.n	8009a88 <UART_SetConfig+0x918>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d03e      	beq.n	8009a84 <UART_SetConfig+0x914>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d038      	beq.n	8009a80 <UART_SetConfig+0x910>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d032      	beq.n	8009a7c <UART_SetConfig+0x90c>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d02c      	beq.n	8009a78 <UART_SetConfig+0x908>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	d026      	beq.n	8009a74 <UART_SetConfig+0x904>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	2b06      	cmp	r3, #6
 8009a2c:	d020      	beq.n	8009a70 <UART_SetConfig+0x900>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	2b07      	cmp	r3, #7
 8009a34:	d01a      	beq.n	8009a6c <UART_SetConfig+0x8fc>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	2b08      	cmp	r3, #8
 8009a3c:	d014      	beq.n	8009a68 <UART_SetConfig+0x8f8>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	2b09      	cmp	r3, #9
 8009a44:	d00e      	beq.n	8009a64 <UART_SetConfig+0x8f4>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	2b0a      	cmp	r3, #10
 8009a4c:	d008      	beq.n	8009a60 <UART_SetConfig+0x8f0>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	2b0b      	cmp	r3, #11
 8009a54:	d102      	bne.n	8009a5c <UART_SetConfig+0x8ec>
 8009a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a5a:	e016      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e014      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a60:	2380      	movs	r3, #128	; 0x80
 8009a62:	e012      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a64:	2340      	movs	r3, #64	; 0x40
 8009a66:	e010      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a68:	2320      	movs	r3, #32
 8009a6a:	e00e      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a6c:	2310      	movs	r3, #16
 8009a6e:	e00c      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a70:	230c      	movs	r3, #12
 8009a72:	e00a      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a74:	230a      	movs	r3, #10
 8009a76:	e008      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	e006      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a7c:	2306      	movs	r3, #6
 8009a7e:	e004      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a80:	2304      	movs	r3, #4
 8009a82:	e002      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e000      	b.n	8009a8a <UART_SetConfig+0x91a>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a90:	e1cb      	b.n	8009e2a <UART_SetConfig+0xcba>
 8009a92:	bf00      	nop
 8009a94:	40007c00 	.word	0x40007c00
 8009a98:	58024400 	.word	0x58024400
 8009a9c:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe f863 	bl	8007b70 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d044      	beq.n	8009b3e <UART_SetConfig+0x9ce>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d03e      	beq.n	8009b3a <UART_SetConfig+0x9ca>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d038      	beq.n	8009b36 <UART_SetConfig+0x9c6>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d032      	beq.n	8009b32 <UART_SetConfig+0x9c2>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d02c      	beq.n	8009b2e <UART_SetConfig+0x9be>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	d026      	beq.n	8009b2a <UART_SetConfig+0x9ba>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	2b06      	cmp	r3, #6
 8009ae2:	d020      	beq.n	8009b26 <UART_SetConfig+0x9b6>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b07      	cmp	r3, #7
 8009aea:	d01a      	beq.n	8009b22 <UART_SetConfig+0x9b2>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	2b08      	cmp	r3, #8
 8009af2:	d014      	beq.n	8009b1e <UART_SetConfig+0x9ae>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	2b09      	cmp	r3, #9
 8009afa:	d00e      	beq.n	8009b1a <UART_SetConfig+0x9aa>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	2b0a      	cmp	r3, #10
 8009b02:	d008      	beq.n	8009b16 <UART_SetConfig+0x9a6>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b08:	2b0b      	cmp	r3, #11
 8009b0a:	d102      	bne.n	8009b12 <UART_SetConfig+0x9a2>
 8009b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b10:	e016      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e014      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b16:	2380      	movs	r3, #128	; 0x80
 8009b18:	e012      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b1a:	2340      	movs	r3, #64	; 0x40
 8009b1c:	e010      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b1e:	2320      	movs	r3, #32
 8009b20:	e00e      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b22:	2310      	movs	r3, #16
 8009b24:	e00c      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b26:	230c      	movs	r3, #12
 8009b28:	e00a      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b2a:	230a      	movs	r3, #10
 8009b2c:	e008      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b2e:	2308      	movs	r3, #8
 8009b30:	e006      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b32:	2306      	movs	r3, #6
 8009b34:	e004      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b36:	2304      	movs	r3, #4
 8009b38:	e002      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e000      	b.n	8009b40 <UART_SetConfig+0x9d0>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b46:	e170      	b.n	8009e2a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b48:	4b79      	ldr	r3, [pc, #484]	; (8009d30 <UART_SetConfig+0xbc0>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d054      	beq.n	8009bfe <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b54:	4b76      	ldr	r3, [pc, #472]	; (8009d30 <UART_SetConfig+0xbc0>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	08db      	lsrs	r3, r3, #3
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	4a75      	ldr	r2, [pc, #468]	; (8009d34 <UART_SetConfig+0xbc4>)
 8009b60:	40da      	lsrs	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d044      	beq.n	8009bf4 <UART_SetConfig+0xa84>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d03e      	beq.n	8009bf0 <UART_SetConfig+0xa80>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d038      	beq.n	8009bec <UART_SetConfig+0xa7c>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d032      	beq.n	8009be8 <UART_SetConfig+0xa78>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d02c      	beq.n	8009be4 <UART_SetConfig+0xa74>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	2b05      	cmp	r3, #5
 8009b90:	d026      	beq.n	8009be0 <UART_SetConfig+0xa70>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b06      	cmp	r3, #6
 8009b98:	d020      	beq.n	8009bdc <UART_SetConfig+0xa6c>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b07      	cmp	r3, #7
 8009ba0:	d01a      	beq.n	8009bd8 <UART_SetConfig+0xa68>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b08      	cmp	r3, #8
 8009ba8:	d014      	beq.n	8009bd4 <UART_SetConfig+0xa64>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b09      	cmp	r3, #9
 8009bb0:	d00e      	beq.n	8009bd0 <UART_SetConfig+0xa60>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b0a      	cmp	r3, #10
 8009bb8:	d008      	beq.n	8009bcc <UART_SetConfig+0xa5c>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b0b      	cmp	r3, #11
 8009bc0:	d102      	bne.n	8009bc8 <UART_SetConfig+0xa58>
 8009bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bc6:	e016      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e014      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bcc:	2380      	movs	r3, #128	; 0x80
 8009bce:	e012      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	e010      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	e00e      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bd8:	2310      	movs	r3, #16
 8009bda:	e00c      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bdc:	230c      	movs	r3, #12
 8009bde:	e00a      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009be0:	230a      	movs	r3, #10
 8009be2:	e008      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009be4:	2308      	movs	r3, #8
 8009be6:	e006      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009be8:	2306      	movs	r3, #6
 8009bea:	e004      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bec:	2304      	movs	r3, #4
 8009bee:	e002      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	e000      	b.n	8009bf6 <UART_SetConfig+0xa86>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009bfc:	e115      	b.n	8009e2a <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d043      	beq.n	8009c8e <UART_SetConfig+0xb1e>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d03d      	beq.n	8009c8a <UART_SetConfig+0xb1a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d037      	beq.n	8009c86 <UART_SetConfig+0xb16>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d031      	beq.n	8009c82 <UART_SetConfig+0xb12>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	d02b      	beq.n	8009c7e <UART_SetConfig+0xb0e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d025      	beq.n	8009c7a <UART_SetConfig+0xb0a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c32:	2b06      	cmp	r3, #6
 8009c34:	d01f      	beq.n	8009c76 <UART_SetConfig+0xb06>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	2b07      	cmp	r3, #7
 8009c3c:	d019      	beq.n	8009c72 <UART_SetConfig+0xb02>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	2b08      	cmp	r3, #8
 8009c44:	d013      	beq.n	8009c6e <UART_SetConfig+0xafe>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	2b09      	cmp	r3, #9
 8009c4c:	d00d      	beq.n	8009c6a <UART_SetConfig+0xafa>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	2b0a      	cmp	r3, #10
 8009c54:	d007      	beq.n	8009c66 <UART_SetConfig+0xaf6>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b0b      	cmp	r3, #11
 8009c5c:	d101      	bne.n	8009c62 <UART_SetConfig+0xaf2>
 8009c5e:	4b36      	ldr	r3, [pc, #216]	; (8009d38 <UART_SetConfig+0xbc8>)
 8009c60:	e016      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c62:	4b34      	ldr	r3, [pc, #208]	; (8009d34 <UART_SetConfig+0xbc4>)
 8009c64:	e014      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c66:	4b35      	ldr	r3, [pc, #212]	; (8009d3c <UART_SetConfig+0xbcc>)
 8009c68:	e012      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c6a:	4b35      	ldr	r3, [pc, #212]	; (8009d40 <UART_SetConfig+0xbd0>)
 8009c6c:	e010      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c6e:	4b35      	ldr	r3, [pc, #212]	; (8009d44 <UART_SetConfig+0xbd4>)
 8009c70:	e00e      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c72:	4b35      	ldr	r3, [pc, #212]	; (8009d48 <UART_SetConfig+0xbd8>)
 8009c74:	e00c      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c76:	4b35      	ldr	r3, [pc, #212]	; (8009d4c <UART_SetConfig+0xbdc>)
 8009c78:	e00a      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c7a:	4b35      	ldr	r3, [pc, #212]	; (8009d50 <UART_SetConfig+0xbe0>)
 8009c7c:	e008      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c7e:	4b35      	ldr	r3, [pc, #212]	; (8009d54 <UART_SetConfig+0xbe4>)
 8009c80:	e006      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c82:	4b35      	ldr	r3, [pc, #212]	; (8009d58 <UART_SetConfig+0xbe8>)
 8009c84:	e004      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c86:	4b35      	ldr	r3, [pc, #212]	; (8009d5c <UART_SetConfig+0xbec>)
 8009c88:	e002      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c8a:	4b35      	ldr	r3, [pc, #212]	; (8009d60 <UART_SetConfig+0xbf0>)
 8009c8c:	e000      	b.n	8009c90 <UART_SetConfig+0xb20>
 8009c8e:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <UART_SetConfig+0xbc4>)
 8009c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c92:	e0ca      	b.n	8009e2a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d046      	beq.n	8009d2a <UART_SetConfig+0xbba>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d040      	beq.n	8009d26 <UART_SetConfig+0xbb6>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d03a      	beq.n	8009d22 <UART_SetConfig+0xbb2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb0:	2b03      	cmp	r3, #3
 8009cb2:	d034      	beq.n	8009d1e <UART_SetConfig+0xbae>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	d02e      	beq.n	8009d1a <UART_SetConfig+0xbaa>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	2b05      	cmp	r3, #5
 8009cc2:	d028      	beq.n	8009d16 <UART_SetConfig+0xba6>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc8:	2b06      	cmp	r3, #6
 8009cca:	d022      	beq.n	8009d12 <UART_SetConfig+0xba2>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	2b07      	cmp	r3, #7
 8009cd2:	d01c      	beq.n	8009d0e <UART_SetConfig+0xb9e>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d016      	beq.n	8009d0a <UART_SetConfig+0xb9a>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	2b09      	cmp	r3, #9
 8009ce2:	d00f      	beq.n	8009d04 <UART_SetConfig+0xb94>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	2b0a      	cmp	r3, #10
 8009cea:	d008      	beq.n	8009cfe <UART_SetConfig+0xb8e>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf0:	2b0b      	cmp	r3, #11
 8009cf2:	d102      	bne.n	8009cfa <UART_SetConfig+0xb8a>
 8009cf4:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009cf8:	e018      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <UART_SetConfig+0xbd8>)
 8009cfc:	e016      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009cfe:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009d02:	e013      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d04:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009d08:	e010      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d0a:	4b16      	ldr	r3, [pc, #88]	; (8009d64 <UART_SetConfig+0xbf4>)
 8009d0c:	e00e      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d0e:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <UART_SetConfig+0xbc8>)
 8009d10:	e00c      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <UART_SetConfig+0xbf8>)
 8009d14:	e00a      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d16:	4b15      	ldr	r3, [pc, #84]	; (8009d6c <UART_SetConfig+0xbfc>)
 8009d18:	e008      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d1a:	4b08      	ldr	r3, [pc, #32]	; (8009d3c <UART_SetConfig+0xbcc>)
 8009d1c:	e006      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d1e:	4b14      	ldr	r3, [pc, #80]	; (8009d70 <UART_SetConfig+0xc00>)
 8009d20:	e004      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d22:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <UART_SetConfig+0xbd0>)
 8009d24:	e002      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d26:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <UART_SetConfig+0xbd4>)
 8009d28:	e000      	b.n	8009d2c <UART_SetConfig+0xbbc>
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <UART_SetConfig+0xbd8>)
 8009d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d2e:	e07c      	b.n	8009e2a <UART_SetConfig+0xcba>
 8009d30:	58024400 	.word	0x58024400
 8009d34:	03d09000 	.word	0x03d09000
 8009d38:	0003d090 	.word	0x0003d090
 8009d3c:	0007a120 	.word	0x0007a120
 8009d40:	000f4240 	.word	0x000f4240
 8009d44:	001e8480 	.word	0x001e8480
 8009d48:	003d0900 	.word	0x003d0900
 8009d4c:	00516155 	.word	0x00516155
 8009d50:	0061a800 	.word	0x0061a800
 8009d54:	007a1200 	.word	0x007a1200
 8009d58:	00a2c2aa 	.word	0x00a2c2aa
 8009d5c:	00f42400 	.word	0x00f42400
 8009d60:	01e84800 	.word	0x01e84800
 8009d64:	0001e848 	.word	0x0001e848
 8009d68:	00051615 	.word	0x00051615
 8009d6c:	00061a80 	.word	0x00061a80
 8009d70:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d04e      	beq.n	8009e1a <UART_SetConfig+0xcaa>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d047      	beq.n	8009e14 <UART_SetConfig+0xca4>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d040      	beq.n	8009e0e <UART_SetConfig+0xc9e>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d039      	beq.n	8009e08 <UART_SetConfig+0xc98>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	2b04      	cmp	r3, #4
 8009d9a:	d032      	beq.n	8009e02 <UART_SetConfig+0xc92>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	2b05      	cmp	r3, #5
 8009da2:	d02b      	beq.n	8009dfc <UART_SetConfig+0xc8c>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	2b06      	cmp	r3, #6
 8009daa:	d024      	beq.n	8009df6 <UART_SetConfig+0xc86>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2b07      	cmp	r3, #7
 8009db2:	d01d      	beq.n	8009df0 <UART_SetConfig+0xc80>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d016      	beq.n	8009dea <UART_SetConfig+0xc7a>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	2b09      	cmp	r3, #9
 8009dc2:	d00f      	beq.n	8009de4 <UART_SetConfig+0xc74>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	2b0a      	cmp	r3, #10
 8009dca:	d008      	beq.n	8009dde <UART_SetConfig+0xc6e>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2b0b      	cmp	r3, #11
 8009dd2:	d101      	bne.n	8009dd8 <UART_SetConfig+0xc68>
 8009dd4:	2380      	movs	r3, #128	; 0x80
 8009dd6:	e022      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ddc:	e01f      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009de2:	e01c      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009de8:	e019      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dee:	e016      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009df4:	e013      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009df6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009dfa:	e010      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009dfc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009e00:	e00d      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e06:	e00a      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009e08:	f241 5355 	movw	r3, #5461	; 0x1555
 8009e0c:	e007      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e12:	e004      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e18:	e001      	b.n	8009e1e <UART_SetConfig+0xcae>
 8009e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e20:	e003      	b.n	8009e2a <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009e28:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f001 83e8 	beq.w	800b602 <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	4413      	add	r3, r2
 8009e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d305      	bcc.n	8009e4e <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d904      	bls.n	8009e58 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e54:	f001 bbd5 	b.w	800b602 <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8009e58:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	f000 8154 	beq.w	800a10a <UART_SetConfig+0xf9a>
 8009e62:	2b08      	cmp	r3, #8
 8009e64:	dc06      	bgt.n	8009e74 <UART_SetConfig+0xd04>
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d00f      	beq.n	8009e8a <UART_SetConfig+0xd1a>
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	f000 80ac 	beq.w	8009fc8 <UART_SetConfig+0xe58>
 8009e70:	f000 bc30 	b.w	800a6d4 <UART_SetConfig+0x1564>
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	f000 832d 	beq.w	800a4d4 <UART_SetConfig+0x1364>
 8009e7a:	2b40      	cmp	r3, #64	; 0x40
 8009e7c:	f000 83a5 	beq.w	800a5ca <UART_SetConfig+0x145a>
 8009e80:	2b10      	cmp	r3, #16
 8009e82:	f000 81e3 	beq.w	800a24c <UART_SetConfig+0x10dc>
 8009e86:	f000 bc25 	b.w	800a6d4 <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e8a:	f7fd fd0f 	bl	80078ac <HAL_RCCEx_GetD3PCLK1Freq>
 8009e8e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	4618      	mov	r0, r3
 8009e94:	f04f 0100 	mov.w	r1, #0
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d067      	beq.n	8009f70 <UART_SetConfig+0xe00>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d05e      	beq.n	8009f66 <UART_SetConfig+0xdf6>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d055      	beq.n	8009f5c <UART_SetConfig+0xdec>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d04c      	beq.n	8009f52 <UART_SetConfig+0xde2>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d043      	beq.n	8009f48 <UART_SetConfig+0xdd8>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	2b05      	cmp	r3, #5
 8009ec6:	d03a      	beq.n	8009f3e <UART_SetConfig+0xdce>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	2b06      	cmp	r3, #6
 8009ece:	d031      	beq.n	8009f34 <UART_SetConfig+0xdc4>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	2b07      	cmp	r3, #7
 8009ed6:	d028      	beq.n	8009f2a <UART_SetConfig+0xdba>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d01f      	beq.n	8009f20 <UART_SetConfig+0xdb0>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d016      	beq.n	8009f16 <UART_SetConfig+0xda6>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	2b0a      	cmp	r3, #10
 8009eee:	d00d      	beq.n	8009f0c <UART_SetConfig+0xd9c>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	2b0b      	cmp	r3, #11
 8009ef6:	d104      	bne.n	8009f02 <UART_SetConfig+0xd92>
 8009ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009efc:	f04f 0400 	mov.w	r4, #0
 8009f00:	e03a      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f02:	f04f 0301 	mov.w	r3, #1
 8009f06:	f04f 0400 	mov.w	r4, #0
 8009f0a:	e035      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f0c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009f10:	f04f 0400 	mov.w	r4, #0
 8009f14:	e030      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009f1a:	f04f 0400 	mov.w	r4, #0
 8009f1e:	e02b      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f20:	f04f 0320 	mov.w	r3, #32
 8009f24:	f04f 0400 	mov.w	r4, #0
 8009f28:	e026      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f2a:	f04f 0310 	mov.w	r3, #16
 8009f2e:	f04f 0400 	mov.w	r4, #0
 8009f32:	e021      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f34:	f04f 030c 	mov.w	r3, #12
 8009f38:	f04f 0400 	mov.w	r4, #0
 8009f3c:	e01c      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f3e:	f04f 030a 	mov.w	r3, #10
 8009f42:	f04f 0400 	mov.w	r4, #0
 8009f46:	e017      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f48:	f04f 0308 	mov.w	r3, #8
 8009f4c:	f04f 0400 	mov.w	r4, #0
 8009f50:	e012      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f52:	f04f 0306 	mov.w	r3, #6
 8009f56:	f04f 0400 	mov.w	r4, #0
 8009f5a:	e00d      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f5c:	f04f 0304 	mov.w	r3, #4
 8009f60:	f04f 0400 	mov.w	r4, #0
 8009f64:	e008      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f66:	f04f 0302 	mov.w	r3, #2
 8009f6a:	f04f 0400 	mov.w	r4, #0
 8009f6e:	e003      	b.n	8009f78 <UART_SetConfig+0xe08>
 8009f70:	f04f 0301 	mov.w	r3, #1
 8009f74:	f04f 0400 	mov.w	r4, #0
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4623      	mov	r3, r4
 8009f7c:	f7f6 fa08 	bl	8000390 <__aeabi_uldivmod>
 8009f80:	4603      	mov	r3, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	4619      	mov	r1, r3
 8009f86:	4622      	mov	r2, r4
 8009f88:	f04f 0300 	mov.w	r3, #0
 8009f8c:	f04f 0400 	mov.w	r4, #0
 8009f90:	0214      	lsls	r4, r2, #8
 8009f92:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009f96:	020b      	lsls	r3, r1, #8
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6852      	ldr	r2, [r2, #4]
 8009f9c:	0852      	lsrs	r2, r2, #1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	eb13 0b01 	adds.w	fp, r3, r1
 8009fa8:	eb44 0c02 	adc.w	ip, r4, r2
 8009fac:	4658      	mov	r0, fp
 8009fae:	4661      	mov	r1, ip
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f04f 0400 	mov.w	r4, #0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4623      	mov	r3, r4
 8009fbc:	f7f6 f9e8 	bl	8000390 <__aeabi_uldivmod>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009fc6:	e389      	b.n	800a6dc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fc8:	f107 0318 	add.w	r3, r7, #24
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fd fc83 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f04f 0100 	mov.w	r1, #0
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d067      	beq.n	800a0b2 <UART_SetConfig+0xf42>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d05e      	beq.n	800a0a8 <UART_SetConfig+0xf38>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d055      	beq.n	800a09e <UART_SetConfig+0xf2e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d04c      	beq.n	800a094 <UART_SetConfig+0xf24>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d043      	beq.n	800a08a <UART_SetConfig+0xf1a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b05      	cmp	r3, #5
 800a008:	d03a      	beq.n	800a080 <UART_SetConfig+0xf10>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b06      	cmp	r3, #6
 800a010:	d031      	beq.n	800a076 <UART_SetConfig+0xf06>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	2b07      	cmp	r3, #7
 800a018:	d028      	beq.n	800a06c <UART_SetConfig+0xefc>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	2b08      	cmp	r3, #8
 800a020:	d01f      	beq.n	800a062 <UART_SetConfig+0xef2>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a026:	2b09      	cmp	r3, #9
 800a028:	d016      	beq.n	800a058 <UART_SetConfig+0xee8>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	2b0a      	cmp	r3, #10
 800a030:	d00d      	beq.n	800a04e <UART_SetConfig+0xede>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	2b0b      	cmp	r3, #11
 800a038:	d104      	bne.n	800a044 <UART_SetConfig+0xed4>
 800a03a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a03e:	f04f 0400 	mov.w	r4, #0
 800a042:	e03a      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a044:	f04f 0301 	mov.w	r3, #1
 800a048:	f04f 0400 	mov.w	r4, #0
 800a04c:	e035      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a04e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a052:	f04f 0400 	mov.w	r4, #0
 800a056:	e030      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a058:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a05c:	f04f 0400 	mov.w	r4, #0
 800a060:	e02b      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a062:	f04f 0320 	mov.w	r3, #32
 800a066:	f04f 0400 	mov.w	r4, #0
 800a06a:	e026      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a06c:	f04f 0310 	mov.w	r3, #16
 800a070:	f04f 0400 	mov.w	r4, #0
 800a074:	e021      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a076:	f04f 030c 	mov.w	r3, #12
 800a07a:	f04f 0400 	mov.w	r4, #0
 800a07e:	e01c      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a080:	f04f 030a 	mov.w	r3, #10
 800a084:	f04f 0400 	mov.w	r4, #0
 800a088:	e017      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a08a:	f04f 0308 	mov.w	r3, #8
 800a08e:	f04f 0400 	mov.w	r4, #0
 800a092:	e012      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a094:	f04f 0306 	mov.w	r3, #6
 800a098:	f04f 0400 	mov.w	r4, #0
 800a09c:	e00d      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a09e:	f04f 0304 	mov.w	r3, #4
 800a0a2:	f04f 0400 	mov.w	r4, #0
 800a0a6:	e008      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a0a8:	f04f 0302 	mov.w	r3, #2
 800a0ac:	f04f 0400 	mov.w	r4, #0
 800a0b0:	e003      	b.n	800a0ba <UART_SetConfig+0xf4a>
 800a0b2:	f04f 0301 	mov.w	r3, #1
 800a0b6:	f04f 0400 	mov.w	r4, #0
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4623      	mov	r3, r4
 800a0be:	f7f6 f967 	bl	8000390 <__aeabi_uldivmod>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	4622      	mov	r2, r4
 800a0ca:	f04f 0300 	mov.w	r3, #0
 800a0ce:	f04f 0400 	mov.w	r4, #0
 800a0d2:	0214      	lsls	r4, r2, #8
 800a0d4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a0d8:	020b      	lsls	r3, r1, #8
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6852      	ldr	r2, [r2, #4]
 800a0de:	0852      	lsrs	r2, r2, #1
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	f04f 0200 	mov.w	r2, #0
 800a0e6:	eb13 0b01 	adds.w	fp, r3, r1
 800a0ea:	eb44 0c02 	adc.w	ip, r4, r2
 800a0ee:	4658      	mov	r0, fp
 800a0f0:	4661      	mov	r1, ip
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f04f 0400 	mov.w	r4, #0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4623      	mov	r3, r4
 800a0fe:	f7f6 f947 	bl	8000390 <__aeabi_uldivmod>
 800a102:	4603      	mov	r3, r0
 800a104:	460c      	mov	r4, r1
 800a106:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a108:	e2e8      	b.n	800a6dc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a10a:	f107 030c 	add.w	r3, r7, #12
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fd fd2e 	bl	8007b70 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	4618      	mov	r0, r3
 800a118:	f04f 0100 	mov.w	r1, #0
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	d067      	beq.n	800a1f4 <UART_SetConfig+0x1084>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d05e      	beq.n	800a1ea <UART_SetConfig+0x107a>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	2b02      	cmp	r3, #2
 800a132:	d055      	beq.n	800a1e0 <UART_SetConfig+0x1070>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d04c      	beq.n	800a1d6 <UART_SetConfig+0x1066>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b04      	cmp	r3, #4
 800a142:	d043      	beq.n	800a1cc <UART_SetConfig+0x105c>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	2b05      	cmp	r3, #5
 800a14a:	d03a      	beq.n	800a1c2 <UART_SetConfig+0x1052>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	2b06      	cmp	r3, #6
 800a152:	d031      	beq.n	800a1b8 <UART_SetConfig+0x1048>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	2b07      	cmp	r3, #7
 800a15a:	d028      	beq.n	800a1ae <UART_SetConfig+0x103e>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2b08      	cmp	r3, #8
 800a162:	d01f      	beq.n	800a1a4 <UART_SetConfig+0x1034>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	2b09      	cmp	r3, #9
 800a16a:	d016      	beq.n	800a19a <UART_SetConfig+0x102a>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	2b0a      	cmp	r3, #10
 800a172:	d00d      	beq.n	800a190 <UART_SetConfig+0x1020>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a178:	2b0b      	cmp	r3, #11
 800a17a:	d104      	bne.n	800a186 <UART_SetConfig+0x1016>
 800a17c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a180:	f04f 0400 	mov.w	r4, #0
 800a184:	e03a      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a186:	f04f 0301 	mov.w	r3, #1
 800a18a:	f04f 0400 	mov.w	r4, #0
 800a18e:	e035      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a190:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a194:	f04f 0400 	mov.w	r4, #0
 800a198:	e030      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a19a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a19e:	f04f 0400 	mov.w	r4, #0
 800a1a2:	e02b      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1a4:	f04f 0320 	mov.w	r3, #32
 800a1a8:	f04f 0400 	mov.w	r4, #0
 800a1ac:	e026      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1ae:	f04f 0310 	mov.w	r3, #16
 800a1b2:	f04f 0400 	mov.w	r4, #0
 800a1b6:	e021      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1b8:	f04f 030c 	mov.w	r3, #12
 800a1bc:	f04f 0400 	mov.w	r4, #0
 800a1c0:	e01c      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1c2:	f04f 030a 	mov.w	r3, #10
 800a1c6:	f04f 0400 	mov.w	r4, #0
 800a1ca:	e017      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1cc:	f04f 0308 	mov.w	r3, #8
 800a1d0:	f04f 0400 	mov.w	r4, #0
 800a1d4:	e012      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1d6:	f04f 0306 	mov.w	r3, #6
 800a1da:	f04f 0400 	mov.w	r4, #0
 800a1de:	e00d      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1e0:	f04f 0304 	mov.w	r3, #4
 800a1e4:	f04f 0400 	mov.w	r4, #0
 800a1e8:	e008      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1ea:	f04f 0302 	mov.w	r3, #2
 800a1ee:	f04f 0400 	mov.w	r4, #0
 800a1f2:	e003      	b.n	800a1fc <UART_SetConfig+0x108c>
 800a1f4:	f04f 0301 	mov.w	r3, #1
 800a1f8:	f04f 0400 	mov.w	r4, #0
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4623      	mov	r3, r4
 800a200:	f7f6 f8c6 	bl	8000390 <__aeabi_uldivmod>
 800a204:	4603      	mov	r3, r0
 800a206:	460c      	mov	r4, r1
 800a208:	4619      	mov	r1, r3
 800a20a:	4622      	mov	r2, r4
 800a20c:	f04f 0300 	mov.w	r3, #0
 800a210:	f04f 0400 	mov.w	r4, #0
 800a214:	0214      	lsls	r4, r2, #8
 800a216:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a21a:	020b      	lsls	r3, r1, #8
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	6852      	ldr	r2, [r2, #4]
 800a220:	0852      	lsrs	r2, r2, #1
 800a222:	4611      	mov	r1, r2
 800a224:	f04f 0200 	mov.w	r2, #0
 800a228:	eb13 0b01 	adds.w	fp, r3, r1
 800a22c:	eb44 0c02 	adc.w	ip, r4, r2
 800a230:	4658      	mov	r0, fp
 800a232:	4661      	mov	r1, ip
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f04f 0400 	mov.w	r4, #0
 800a23c:	461a      	mov	r2, r3
 800a23e:	4623      	mov	r3, r4
 800a240:	f7f6 f8a6 	bl	8000390 <__aeabi_uldivmod>
 800a244:	4603      	mov	r3, r0
 800a246:	460c      	mov	r4, r1
 800a248:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a24a:	e247      	b.n	800a6dc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a24c:	4b96      	ldr	r3, [pc, #600]	; (800a4a8 <UART_SetConfig+0x1338>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0320 	and.w	r3, r3, #32
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 80a3 	beq.w	800a3a0 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a25a:	4b93      	ldr	r3, [pc, #588]	; (800a4a8 <UART_SetConfig+0x1338>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	08db      	lsrs	r3, r3, #3
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	4a91      	ldr	r2, [pc, #580]	; (800a4ac <UART_SetConfig+0x133c>)
 800a266:	fa22 f303 	lsr.w	r3, r2, r3
 800a26a:	4618      	mov	r0, r3
 800a26c:	f04f 0100 	mov.w	r1, #0
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2b00      	cmp	r3, #0
 800a276:	d067      	beq.n	800a348 <UART_SetConfig+0x11d8>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d05e      	beq.n	800a33e <UART_SetConfig+0x11ce>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	2b02      	cmp	r3, #2
 800a286:	d055      	beq.n	800a334 <UART_SetConfig+0x11c4>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d04c      	beq.n	800a32a <UART_SetConfig+0x11ba>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b04      	cmp	r3, #4
 800a296:	d043      	beq.n	800a320 <UART_SetConfig+0x11b0>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b05      	cmp	r3, #5
 800a29e:	d03a      	beq.n	800a316 <UART_SetConfig+0x11a6>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	2b06      	cmp	r3, #6
 800a2a6:	d031      	beq.n	800a30c <UART_SetConfig+0x119c>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	2b07      	cmp	r3, #7
 800a2ae:	d028      	beq.n	800a302 <UART_SetConfig+0x1192>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b4:	2b08      	cmp	r3, #8
 800a2b6:	d01f      	beq.n	800a2f8 <UART_SetConfig+0x1188>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	2b09      	cmp	r3, #9
 800a2be:	d016      	beq.n	800a2ee <UART_SetConfig+0x117e>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	2b0a      	cmp	r3, #10
 800a2c6:	d00d      	beq.n	800a2e4 <UART_SetConfig+0x1174>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	2b0b      	cmp	r3, #11
 800a2ce:	d104      	bne.n	800a2da <UART_SetConfig+0x116a>
 800a2d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2d4:	f04f 0400 	mov.w	r4, #0
 800a2d8:	e03a      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a2da:	f04f 0301 	mov.w	r3, #1
 800a2de:	f04f 0400 	mov.w	r4, #0
 800a2e2:	e035      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a2e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a2e8:	f04f 0400 	mov.w	r4, #0
 800a2ec:	e030      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a2ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a2f2:	f04f 0400 	mov.w	r4, #0
 800a2f6:	e02b      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a2f8:	f04f 0320 	mov.w	r3, #32
 800a2fc:	f04f 0400 	mov.w	r4, #0
 800a300:	e026      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a302:	f04f 0310 	mov.w	r3, #16
 800a306:	f04f 0400 	mov.w	r4, #0
 800a30a:	e021      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a30c:	f04f 030c 	mov.w	r3, #12
 800a310:	f04f 0400 	mov.w	r4, #0
 800a314:	e01c      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a316:	f04f 030a 	mov.w	r3, #10
 800a31a:	f04f 0400 	mov.w	r4, #0
 800a31e:	e017      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a320:	f04f 0308 	mov.w	r3, #8
 800a324:	f04f 0400 	mov.w	r4, #0
 800a328:	e012      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a32a:	f04f 0306 	mov.w	r3, #6
 800a32e:	f04f 0400 	mov.w	r4, #0
 800a332:	e00d      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a334:	f04f 0304 	mov.w	r3, #4
 800a338:	f04f 0400 	mov.w	r4, #0
 800a33c:	e008      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a33e:	f04f 0302 	mov.w	r3, #2
 800a342:	f04f 0400 	mov.w	r4, #0
 800a346:	e003      	b.n	800a350 <UART_SetConfig+0x11e0>
 800a348:	f04f 0301 	mov.w	r3, #1
 800a34c:	f04f 0400 	mov.w	r4, #0
 800a350:	461a      	mov	r2, r3
 800a352:	4623      	mov	r3, r4
 800a354:	f7f6 f81c 	bl	8000390 <__aeabi_uldivmod>
 800a358:	4603      	mov	r3, r0
 800a35a:	460c      	mov	r4, r1
 800a35c:	4619      	mov	r1, r3
 800a35e:	4622      	mov	r2, r4
 800a360:	f04f 0300 	mov.w	r3, #0
 800a364:	f04f 0400 	mov.w	r4, #0
 800a368:	0214      	lsls	r4, r2, #8
 800a36a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a36e:	020b      	lsls	r3, r1, #8
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6852      	ldr	r2, [r2, #4]
 800a374:	0852      	lsrs	r2, r2, #1
 800a376:	4611      	mov	r1, r2
 800a378:	f04f 0200 	mov.w	r2, #0
 800a37c:	eb13 0b01 	adds.w	fp, r3, r1
 800a380:	eb44 0c02 	adc.w	ip, r4, r2
 800a384:	4658      	mov	r0, fp
 800a386:	4661      	mov	r1, ip
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f04f 0400 	mov.w	r4, #0
 800a390:	461a      	mov	r2, r3
 800a392:	4623      	mov	r3, r4
 800a394:	f7f5 fffc 	bl	8000390 <__aeabi_uldivmod>
 800a398:	4603      	mov	r3, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a39e:	e19d      	b.n	800a6dc <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d05b      	beq.n	800a460 <UART_SetConfig+0x12f0>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d053      	beq.n	800a458 <UART_SetConfig+0x12e8>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d04b      	beq.n	800a450 <UART_SetConfig+0x12e0>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d043      	beq.n	800a448 <UART_SetConfig+0x12d8>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	d03b      	beq.n	800a440 <UART_SetConfig+0x12d0>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b05      	cmp	r3, #5
 800a3ce:	d033      	beq.n	800a438 <UART_SetConfig+0x12c8>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	d02b      	beq.n	800a430 <UART_SetConfig+0x12c0>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b07      	cmp	r3, #7
 800a3de:	d023      	beq.n	800a428 <UART_SetConfig+0x12b8>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d01b      	beq.n	800a420 <UART_SetConfig+0x12b0>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b09      	cmp	r3, #9
 800a3ee:	d013      	beq.n	800a418 <UART_SetConfig+0x12a8>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b0a      	cmp	r3, #10
 800a3f6:	d00b      	beq.n	800a410 <UART_SetConfig+0x12a0>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b0b      	cmp	r3, #11
 800a3fe:	d103      	bne.n	800a408 <UART_SetConfig+0x1298>
 800a400:	4b2a      	ldr	r3, [pc, #168]	; (800a4ac <UART_SetConfig+0x133c>)
 800a402:	f04f 0400 	mov.w	r4, #0
 800a406:	e02e      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a408:	4b29      	ldr	r3, [pc, #164]	; (800a4b0 <UART_SetConfig+0x1340>)
 800a40a:	f04f 0403 	mov.w	r4, #3
 800a40e:	e02a      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a410:	4b28      	ldr	r3, [pc, #160]	; (800a4b4 <UART_SetConfig+0x1344>)
 800a412:	f04f 0400 	mov.w	r4, #0
 800a416:	e026      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a418:	4b27      	ldr	r3, [pc, #156]	; (800a4b8 <UART_SetConfig+0x1348>)
 800a41a:	f04f 0400 	mov.w	r4, #0
 800a41e:	e022      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a420:	4b26      	ldr	r3, [pc, #152]	; (800a4bc <UART_SetConfig+0x134c>)
 800a422:	f04f 0400 	mov.w	r4, #0
 800a426:	e01e      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a428:	4b25      	ldr	r3, [pc, #148]	; (800a4c0 <UART_SetConfig+0x1350>)
 800a42a:	f04f 0400 	mov.w	r4, #0
 800a42e:	e01a      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a430:	a419      	add	r4, pc, #100	; (adr r4, 800a498 <UART_SetConfig+0x1328>)
 800a432:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a436:	e016      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a438:	4b22      	ldr	r3, [pc, #136]	; (800a4c4 <UART_SetConfig+0x1354>)
 800a43a:	f04f 0400 	mov.w	r4, #0
 800a43e:	e012      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a440:	4b21      	ldr	r3, [pc, #132]	; (800a4c8 <UART_SetConfig+0x1358>)
 800a442:	f04f 0400 	mov.w	r4, #0
 800a446:	e00e      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a448:	a415      	add	r4, pc, #84	; (adr r4, 800a4a0 <UART_SetConfig+0x1330>)
 800a44a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a44e:	e00a      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a450:	4b1e      	ldr	r3, [pc, #120]	; (800a4cc <UART_SetConfig+0x135c>)
 800a452:	f04f 0400 	mov.w	r4, #0
 800a456:	e006      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a458:	4b1d      	ldr	r3, [pc, #116]	; (800a4d0 <UART_SetConfig+0x1360>)
 800a45a:	f04f 0401 	mov.w	r4, #1
 800a45e:	e002      	b.n	800a466 <UART_SetConfig+0x12f6>
 800a460:	4b13      	ldr	r3, [pc, #76]	; (800a4b0 <UART_SetConfig+0x1340>)
 800a462:	f04f 0403 	mov.w	r4, #3
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	6852      	ldr	r2, [r2, #4]
 800a46a:	0852      	lsrs	r2, r2, #1
 800a46c:	4611      	mov	r1, r2
 800a46e:	f04f 0200 	mov.w	r2, #0
 800a472:	eb13 0b01 	adds.w	fp, r3, r1
 800a476:	eb44 0c02 	adc.w	ip, r4, r2
 800a47a:	4658      	mov	r0, fp
 800a47c:	4661      	mov	r1, ip
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f04f 0400 	mov.w	r4, #0
 800a486:	461a      	mov	r2, r3
 800a488:	4623      	mov	r3, r4
 800a48a:	f7f5 ff81 	bl	8000390 <__aeabi_uldivmod>
 800a48e:	4603      	mov	r3, r0
 800a490:	460c      	mov	r4, r1
 800a492:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a494:	e122      	b.n	800a6dc <UART_SetConfig+0x156c>
 800a496:	bf00      	nop
 800a498:	51615500 	.word	0x51615500
 800a49c:	00000000 	.word	0x00000000
 800a4a0:	a2c2aa00 	.word	0xa2c2aa00
 800a4a4:	00000000 	.word	0x00000000
 800a4a8:	58024400 	.word	0x58024400
 800a4ac:	03d09000 	.word	0x03d09000
 800a4b0:	d0900000 	.word	0xd0900000
 800a4b4:	07a12000 	.word	0x07a12000
 800a4b8:	0f424000 	.word	0x0f424000
 800a4bc:	1e848000 	.word	0x1e848000
 800a4c0:	3d090000 	.word	0x3d090000
 800a4c4:	61a80000 	.word	0x61a80000
 800a4c8:	7a120000 	.word	0x7a120000
 800a4cc:	f4240000 	.word	0xf4240000
 800a4d0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d05b      	beq.n	800a594 <UART_SetConfig+0x1424>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d053      	beq.n	800a58c <UART_SetConfig+0x141c>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d04b      	beq.n	800a584 <UART_SetConfig+0x1414>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d043      	beq.n	800a57c <UART_SetConfig+0x140c>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d03b      	beq.n	800a574 <UART_SetConfig+0x1404>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	2b05      	cmp	r3, #5
 800a502:	d033      	beq.n	800a56c <UART_SetConfig+0x13fc>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	2b06      	cmp	r3, #6
 800a50a:	d02b      	beq.n	800a564 <UART_SetConfig+0x13f4>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a510:	2b07      	cmp	r3, #7
 800a512:	d023      	beq.n	800a55c <UART_SetConfig+0x13ec>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d01b      	beq.n	800a554 <UART_SetConfig+0x13e4>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	2b09      	cmp	r3, #9
 800a522:	d013      	beq.n	800a54c <UART_SetConfig+0x13dc>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a528:	2b0a      	cmp	r3, #10
 800a52a:	d00b      	beq.n	800a544 <UART_SetConfig+0x13d4>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a530:	2b0b      	cmp	r3, #11
 800a532:	d103      	bne.n	800a53c <UART_SetConfig+0x13cc>
 800a534:	4bc0      	ldr	r3, [pc, #768]	; (800a838 <UART_SetConfig+0x16c8>)
 800a536:	f04f 0400 	mov.w	r4, #0
 800a53a:	e02e      	b.n	800a59a <UART_SetConfig+0x142a>
 800a53c:	4bbf      	ldr	r3, [pc, #764]	; (800a83c <UART_SetConfig+0x16cc>)
 800a53e:	f04f 0400 	mov.w	r4, #0
 800a542:	e02a      	b.n	800a59a <UART_SetConfig+0x142a>
 800a544:	4bbe      	ldr	r3, [pc, #760]	; (800a840 <UART_SetConfig+0x16d0>)
 800a546:	f04f 0400 	mov.w	r4, #0
 800a54a:	e026      	b.n	800a59a <UART_SetConfig+0x142a>
 800a54c:	4bbd      	ldr	r3, [pc, #756]	; (800a844 <UART_SetConfig+0x16d4>)
 800a54e:	f04f 0400 	mov.w	r4, #0
 800a552:	e022      	b.n	800a59a <UART_SetConfig+0x142a>
 800a554:	4bbc      	ldr	r3, [pc, #752]	; (800a848 <UART_SetConfig+0x16d8>)
 800a556:	f04f 0400 	mov.w	r4, #0
 800a55a:	e01e      	b.n	800a59a <UART_SetConfig+0x142a>
 800a55c:	4bbb      	ldr	r3, [pc, #748]	; (800a84c <UART_SetConfig+0x16dc>)
 800a55e:	f04f 0400 	mov.w	r4, #0
 800a562:	e01a      	b.n	800a59a <UART_SetConfig+0x142a>
 800a564:	a4b0      	add	r4, pc, #704	; (adr r4, 800a828 <UART_SetConfig+0x16b8>)
 800a566:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a56a:	e016      	b.n	800a59a <UART_SetConfig+0x142a>
 800a56c:	4bb8      	ldr	r3, [pc, #736]	; (800a850 <UART_SetConfig+0x16e0>)
 800a56e:	f04f 0400 	mov.w	r4, #0
 800a572:	e012      	b.n	800a59a <UART_SetConfig+0x142a>
 800a574:	4bb7      	ldr	r3, [pc, #732]	; (800a854 <UART_SetConfig+0x16e4>)
 800a576:	f04f 0400 	mov.w	r4, #0
 800a57a:	e00e      	b.n	800a59a <UART_SetConfig+0x142a>
 800a57c:	a4ac      	add	r4, pc, #688	; (adr r4, 800a830 <UART_SetConfig+0x16c0>)
 800a57e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a582:	e00a      	b.n	800a59a <UART_SetConfig+0x142a>
 800a584:	4bb4      	ldr	r3, [pc, #720]	; (800a858 <UART_SetConfig+0x16e8>)
 800a586:	f04f 0400 	mov.w	r4, #0
 800a58a:	e006      	b.n	800a59a <UART_SetConfig+0x142a>
 800a58c:	4bb3      	ldr	r3, [pc, #716]	; (800a85c <UART_SetConfig+0x16ec>)
 800a58e:	f04f 0400 	mov.w	r4, #0
 800a592:	e002      	b.n	800a59a <UART_SetConfig+0x142a>
 800a594:	4ba9      	ldr	r3, [pc, #676]	; (800a83c <UART_SetConfig+0x16cc>)
 800a596:	f04f 0400 	mov.w	r4, #0
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6852      	ldr	r2, [r2, #4]
 800a59e:	0852      	lsrs	r2, r2, #1
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	f04f 0200 	mov.w	r2, #0
 800a5a6:	eb13 0b01 	adds.w	fp, r3, r1
 800a5aa:	eb44 0c02 	adc.w	ip, r4, r2
 800a5ae:	4658      	mov	r0, fp
 800a5b0:	4661      	mov	r1, ip
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f04f 0400 	mov.w	r4, #0
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	4623      	mov	r3, r4
 800a5be:	f7f5 fee7 	bl	8000390 <__aeabi_uldivmod>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a5c8:	e088      	b.n	800a6dc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d064      	beq.n	800a69c <UART_SetConfig+0x152c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d05b      	beq.n	800a692 <UART_SetConfig+0x1522>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d052      	beq.n	800a688 <UART_SetConfig+0x1518>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d04a      	beq.n	800a680 <UART_SetConfig+0x1510>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	d041      	beq.n	800a676 <UART_SetConfig+0x1506>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	2b05      	cmp	r3, #5
 800a5f8:	d039      	beq.n	800a66e <UART_SetConfig+0x14fe>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	2b06      	cmp	r3, #6
 800a600:	d031      	beq.n	800a666 <UART_SetConfig+0x14f6>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	2b07      	cmp	r3, #7
 800a608:	d028      	beq.n	800a65c <UART_SetConfig+0x14ec>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	2b08      	cmp	r3, #8
 800a610:	d01f      	beq.n	800a652 <UART_SetConfig+0x14e2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b09      	cmp	r3, #9
 800a618:	d016      	beq.n	800a648 <UART_SetConfig+0x14d8>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b0a      	cmp	r3, #10
 800a620:	d00d      	beq.n	800a63e <UART_SetConfig+0x14ce>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	2b0b      	cmp	r3, #11
 800a628:	d104      	bne.n	800a634 <UART_SetConfig+0x14c4>
 800a62a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a62e:	f04f 0400 	mov.w	r4, #0
 800a632:	e037      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a634:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a638:	f04f 0400 	mov.w	r4, #0
 800a63c:	e032      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a63e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a642:	f04f 0400 	mov.w	r4, #0
 800a646:	e02d      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a64c:	f04f 0400 	mov.w	r4, #0
 800a650:	e028      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a652:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a656:	f04f 0400 	mov.w	r4, #0
 800a65a:	e023      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a65c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a660:	f04f 0400 	mov.w	r4, #0
 800a664:	e01e      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a666:	4b7e      	ldr	r3, [pc, #504]	; (800a860 <UART_SetConfig+0x16f0>)
 800a668:	f04f 0400 	mov.w	r4, #0
 800a66c:	e01a      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a66e:	4b7d      	ldr	r3, [pc, #500]	; (800a864 <UART_SetConfig+0x16f4>)
 800a670:	f04f 0400 	mov.w	r4, #0
 800a674:	e016      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a676:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a67a:	f04f 0400 	mov.w	r4, #0
 800a67e:	e011      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a680:	4b79      	ldr	r3, [pc, #484]	; (800a868 <UART_SetConfig+0x16f8>)
 800a682:	f04f 0400 	mov.w	r4, #0
 800a686:	e00d      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a68c:	f04f 0400 	mov.w	r4, #0
 800a690:	e008      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a696:	f04f 0400 	mov.w	r4, #0
 800a69a:	e003      	b.n	800a6a4 <UART_SetConfig+0x1534>
 800a69c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a6a0:	f04f 0400 	mov.w	r4, #0
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	6852      	ldr	r2, [r2, #4]
 800a6a8:	0852      	lsrs	r2, r2, #1
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	f04f 0200 	mov.w	r2, #0
 800a6b0:	eb13 0b01 	adds.w	fp, r3, r1
 800a6b4:	eb44 0c02 	adc.w	ip, r4, r2
 800a6b8:	4658      	mov	r0, fp
 800a6ba:	4661      	mov	r1, ip
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f04f 0400 	mov.w	r4, #0
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4623      	mov	r3, r4
 800a6c8:	f7f5 fe62 	bl	8000390 <__aeabi_uldivmod>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a6d2:	e003      	b.n	800a6dc <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a6da:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6e2:	d309      	bcc.n	800a6f8 <UART_SetConfig+0x1588>
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ea:	d205      	bcs.n	800a6f8 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6f2:	60da      	str	r2, [r3, #12]
 800a6f4:	f000 bf85 	b.w	800b602 <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fe:	f000 bf80 	b.w	800b602 <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a70a:	f040 83da 	bne.w	800aec2 <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 800a70e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a712:	2b40      	cmp	r3, #64	; 0x40
 800a714:	f200 83b3 	bhi.w	800ae7e <UART_SetConfig+0x1d0e>
 800a718:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <UART_SetConfig+0x15b0>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a86d 	.word	0x0800a86d
 800a724:	0800a925 	.word	0x0800a925
 800a728:	0800ae7f 	.word	0x0800ae7f
 800a72c:	0800ae7f 	.word	0x0800ae7f
 800a730:	0800a9dd 	.word	0x0800a9dd
 800a734:	0800ae7f 	.word	0x0800ae7f
 800a738:	0800ae7f 	.word	0x0800ae7f
 800a73c:	0800ae7f 	.word	0x0800ae7f
 800a740:	0800aa99 	.word	0x0800aa99
 800a744:	0800ae7f 	.word	0x0800ae7f
 800a748:	0800ae7f 	.word	0x0800ae7f
 800a74c:	0800ae7f 	.word	0x0800ae7f
 800a750:	0800ae7f 	.word	0x0800ae7f
 800a754:	0800ae7f 	.word	0x0800ae7f
 800a758:	0800ae7f 	.word	0x0800ae7f
 800a75c:	0800ae7f 	.word	0x0800ae7f
 800a760:	0800ab55 	.word	0x0800ab55
 800a764:	0800ae7f 	.word	0x0800ae7f
 800a768:	0800ae7f 	.word	0x0800ae7f
 800a76c:	0800ae7f 	.word	0x0800ae7f
 800a770:	0800ae7f 	.word	0x0800ae7f
 800a774:	0800ae7f 	.word	0x0800ae7f
 800a778:	0800ae7f 	.word	0x0800ae7f
 800a77c:	0800ae7f 	.word	0x0800ae7f
 800a780:	0800ae7f 	.word	0x0800ae7f
 800a784:	0800ae7f 	.word	0x0800ae7f
 800a788:	0800ae7f 	.word	0x0800ae7f
 800a78c:	0800ae7f 	.word	0x0800ae7f
 800a790:	0800ae7f 	.word	0x0800ae7f
 800a794:	0800ae7f 	.word	0x0800ae7f
 800a798:	0800ae7f 	.word	0x0800ae7f
 800a79c:	0800ae7f 	.word	0x0800ae7f
 800a7a0:	0800acc7 	.word	0x0800acc7
 800a7a4:	0800ae7f 	.word	0x0800ae7f
 800a7a8:	0800ae7f 	.word	0x0800ae7f
 800a7ac:	0800ae7f 	.word	0x0800ae7f
 800a7b0:	0800ae7f 	.word	0x0800ae7f
 800a7b4:	0800ae7f 	.word	0x0800ae7f
 800a7b8:	0800ae7f 	.word	0x0800ae7f
 800a7bc:	0800ae7f 	.word	0x0800ae7f
 800a7c0:	0800ae7f 	.word	0x0800ae7f
 800a7c4:	0800ae7f 	.word	0x0800ae7f
 800a7c8:	0800ae7f 	.word	0x0800ae7f
 800a7cc:	0800ae7f 	.word	0x0800ae7f
 800a7d0:	0800ae7f 	.word	0x0800ae7f
 800a7d4:	0800ae7f 	.word	0x0800ae7f
 800a7d8:	0800ae7f 	.word	0x0800ae7f
 800a7dc:	0800ae7f 	.word	0x0800ae7f
 800a7e0:	0800ae7f 	.word	0x0800ae7f
 800a7e4:	0800ae7f 	.word	0x0800ae7f
 800a7e8:	0800ae7f 	.word	0x0800ae7f
 800a7ec:	0800ae7f 	.word	0x0800ae7f
 800a7f0:	0800ae7f 	.word	0x0800ae7f
 800a7f4:	0800ae7f 	.word	0x0800ae7f
 800a7f8:	0800ae7f 	.word	0x0800ae7f
 800a7fc:	0800ae7f 	.word	0x0800ae7f
 800a800:	0800ae7f 	.word	0x0800ae7f
 800a804:	0800ae7f 	.word	0x0800ae7f
 800a808:	0800ae7f 	.word	0x0800ae7f
 800a80c:	0800ae7f 	.word	0x0800ae7f
 800a810:	0800ae7f 	.word	0x0800ae7f
 800a814:	0800ae7f 	.word	0x0800ae7f
 800a818:	0800ae7f 	.word	0x0800ae7f
 800a81c:	0800ae7f 	.word	0x0800ae7f
 800a820:	0800adbd 	.word	0x0800adbd
 800a824:	f3af 8000 	nop.w
 800a828:	05161500 	.word	0x05161500
 800a82c:	00000000 	.word	0x00000000
 800a830:	0a2c2a00 	.word	0x0a2c2a00
 800a834:	00000000 	.word	0x00000000
 800a838:	003d0900 	.word	0x003d0900
 800a83c:	3d090000 	.word	0x3d090000
 800a840:	007a1200 	.word	0x007a1200
 800a844:	00f42400 	.word	0x00f42400
 800a848:	01e84800 	.word	0x01e84800
 800a84c:	03d09000 	.word	0x03d09000
 800a850:	061a8000 	.word	0x061a8000
 800a854:	07a12000 	.word	0x07a12000
 800a858:	0f424000 	.word	0x0f424000
 800a85c:	1e848000 	.word	0x1e848000
 800a860:	000aaa00 	.word	0x000aaa00
 800a864:	000ccc00 	.word	0x000ccc00
 800a868:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a86c:	f7fb fe50 	bl	8006510 <HAL_RCC_GetPCLK1Freq>
 800a870:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	2b00      	cmp	r3, #0
 800a878:	d044      	beq.n	800a904 <UART_SetConfig+0x1794>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d03e      	beq.n	800a900 <UART_SetConfig+0x1790>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b02      	cmp	r3, #2
 800a888:	d038      	beq.n	800a8fc <UART_SetConfig+0x178c>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d032      	beq.n	800a8f8 <UART_SetConfig+0x1788>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b04      	cmp	r3, #4
 800a898:	d02c      	beq.n	800a8f4 <UART_SetConfig+0x1784>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b05      	cmp	r3, #5
 800a8a0:	d026      	beq.n	800a8f0 <UART_SetConfig+0x1780>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b06      	cmp	r3, #6
 800a8a8:	d020      	beq.n	800a8ec <UART_SetConfig+0x177c>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b07      	cmp	r3, #7
 800a8b0:	d01a      	beq.n	800a8e8 <UART_SetConfig+0x1778>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b08      	cmp	r3, #8
 800a8b8:	d014      	beq.n	800a8e4 <UART_SetConfig+0x1774>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b09      	cmp	r3, #9
 800a8c0:	d00e      	beq.n	800a8e0 <UART_SetConfig+0x1770>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b0a      	cmp	r3, #10
 800a8c8:	d008      	beq.n	800a8dc <UART_SetConfig+0x176c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b0b      	cmp	r3, #11
 800a8d0:	d102      	bne.n	800a8d8 <UART_SetConfig+0x1768>
 800a8d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8d6:	e016      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e014      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8dc:	2380      	movs	r3, #128	; 0x80
 800a8de:	e012      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8e0:	2340      	movs	r3, #64	; 0x40
 800a8e2:	e010      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8e4:	2320      	movs	r3, #32
 800a8e6:	e00e      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	e00c      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8ec:	230c      	movs	r3, #12
 800a8ee:	e00a      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8f0:	230a      	movs	r3, #10
 800a8f2:	e008      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8f4:	2308      	movs	r3, #8
 800a8f6:	e006      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8f8:	2306      	movs	r3, #6
 800a8fa:	e004      	b.n	800a906 <UART_SetConfig+0x1796>
 800a8fc:	2304      	movs	r3, #4
 800a8fe:	e002      	b.n	800a906 <UART_SetConfig+0x1796>
 800a900:	2302      	movs	r3, #2
 800a902:	e000      	b.n	800a906 <UART_SetConfig+0x1796>
 800a904:	2301      	movs	r3, #1
 800a906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a908:	fbb2 f3f3 	udiv	r3, r2, r3
 800a90c:	005a      	lsls	r2, r3, #1
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	085b      	lsrs	r3, r3, #1
 800a914:	441a      	add	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a91e:	b29b      	uxth	r3, r3
 800a920:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a922:	e2b0      	b.n	800ae86 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a924:	f7fb fe0a 	bl	800653c <HAL_RCC_GetPCLK2Freq>
 800a928:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d044      	beq.n	800a9bc <UART_SetConfig+0x184c>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b01      	cmp	r3, #1
 800a938:	d03e      	beq.n	800a9b8 <UART_SetConfig+0x1848>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d038      	beq.n	800a9b4 <UART_SetConfig+0x1844>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	2b03      	cmp	r3, #3
 800a948:	d032      	beq.n	800a9b0 <UART_SetConfig+0x1840>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	2b04      	cmp	r3, #4
 800a950:	d02c      	beq.n	800a9ac <UART_SetConfig+0x183c>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	2b05      	cmp	r3, #5
 800a958:	d026      	beq.n	800a9a8 <UART_SetConfig+0x1838>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	2b06      	cmp	r3, #6
 800a960:	d020      	beq.n	800a9a4 <UART_SetConfig+0x1834>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	2b07      	cmp	r3, #7
 800a968:	d01a      	beq.n	800a9a0 <UART_SetConfig+0x1830>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	2b08      	cmp	r3, #8
 800a970:	d014      	beq.n	800a99c <UART_SetConfig+0x182c>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	2b09      	cmp	r3, #9
 800a978:	d00e      	beq.n	800a998 <UART_SetConfig+0x1828>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	2b0a      	cmp	r3, #10
 800a980:	d008      	beq.n	800a994 <UART_SetConfig+0x1824>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	2b0b      	cmp	r3, #11
 800a988:	d102      	bne.n	800a990 <UART_SetConfig+0x1820>
 800a98a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a98e:	e016      	b.n	800a9be <UART_SetConfig+0x184e>
 800a990:	2301      	movs	r3, #1
 800a992:	e014      	b.n	800a9be <UART_SetConfig+0x184e>
 800a994:	2380      	movs	r3, #128	; 0x80
 800a996:	e012      	b.n	800a9be <UART_SetConfig+0x184e>
 800a998:	2340      	movs	r3, #64	; 0x40
 800a99a:	e010      	b.n	800a9be <UART_SetConfig+0x184e>
 800a99c:	2320      	movs	r3, #32
 800a99e:	e00e      	b.n	800a9be <UART_SetConfig+0x184e>
 800a9a0:	2310      	movs	r3, #16
 800a9a2:	e00c      	b.n	800a9be <UART_SetConfig+0x184e>
 800a9a4:	230c      	movs	r3, #12
 800a9a6:	e00a      	b.n	800a9be <UART_SetConfig+0x184e>
 800a9a8:	230a      	movs	r3, #10
 800a9aa:	e008      	b.n	800a9be <UART_SetConfig+0x184e>
 800a9ac:	2308      	movs	r3, #8
 800a9ae:	e006      	b.n	800a9be <UART_SetConfig+0x184e>
 800a9b0:	2306      	movs	r3, #6
 800a9b2:	e004      	b.n	800a9be <UART_SetConfig+0x184e>
 800a9b4:	2304      	movs	r3, #4
 800a9b6:	e002      	b.n	800a9be <UART_SetConfig+0x184e>
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e000      	b.n	800a9be <UART_SetConfig+0x184e>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c4:	005a      	lsls	r2, r3, #1
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	441a      	add	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9da:	e254      	b.n	800ae86 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9dc:	f107 0318 	add.w	r3, r7, #24
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fc ff79 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9e6:	69fa      	ldr	r2, [r7, #28]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d044      	beq.n	800aa7a <UART_SetConfig+0x190a>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d03e      	beq.n	800aa76 <UART_SetConfig+0x1906>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d038      	beq.n	800aa72 <UART_SetConfig+0x1902>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d032      	beq.n	800aa6e <UART_SetConfig+0x18fe>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b04      	cmp	r3, #4
 800aa0e:	d02c      	beq.n	800aa6a <UART_SetConfig+0x18fa>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b05      	cmp	r3, #5
 800aa16:	d026      	beq.n	800aa66 <UART_SetConfig+0x18f6>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b06      	cmp	r3, #6
 800aa1e:	d020      	beq.n	800aa62 <UART_SetConfig+0x18f2>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	2b07      	cmp	r3, #7
 800aa26:	d01a      	beq.n	800aa5e <UART_SetConfig+0x18ee>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	2b08      	cmp	r3, #8
 800aa2e:	d014      	beq.n	800aa5a <UART_SetConfig+0x18ea>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2b09      	cmp	r3, #9
 800aa36:	d00e      	beq.n	800aa56 <UART_SetConfig+0x18e6>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3c:	2b0a      	cmp	r3, #10
 800aa3e:	d008      	beq.n	800aa52 <UART_SetConfig+0x18e2>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	2b0b      	cmp	r3, #11
 800aa46:	d102      	bne.n	800aa4e <UART_SetConfig+0x18de>
 800aa48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa4c:	e016      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e014      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa52:	2380      	movs	r3, #128	; 0x80
 800aa54:	e012      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	e010      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa5a:	2320      	movs	r3, #32
 800aa5c:	e00e      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa5e:	2310      	movs	r3, #16
 800aa60:	e00c      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa62:	230c      	movs	r3, #12
 800aa64:	e00a      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa66:	230a      	movs	r3, #10
 800aa68:	e008      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa6a:	2308      	movs	r3, #8
 800aa6c:	e006      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa6e:	2306      	movs	r3, #6
 800aa70:	e004      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa72:	2304      	movs	r3, #4
 800aa74:	e002      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e000      	b.n	800aa7c <UART_SetConfig+0x190c>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa80:	005a      	lsls	r2, r3, #1
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	085b      	lsrs	r3, r3, #1
 800aa88:	441a      	add	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa96:	e1f6      	b.n	800ae86 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa98:	f107 030c 	add.w	r3, r7, #12
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fd f867 	bl	8007b70 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d044      	beq.n	800ab36 <UART_SetConfig+0x19c6>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d03e      	beq.n	800ab32 <UART_SetConfig+0x19c2>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d038      	beq.n	800ab2e <UART_SetConfig+0x19be>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d032      	beq.n	800ab2a <UART_SetConfig+0x19ba>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d02c      	beq.n	800ab26 <UART_SetConfig+0x19b6>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	2b05      	cmp	r3, #5
 800aad2:	d026      	beq.n	800ab22 <UART_SetConfig+0x19b2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad8:	2b06      	cmp	r3, #6
 800aada:	d020      	beq.n	800ab1e <UART_SetConfig+0x19ae>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	2b07      	cmp	r3, #7
 800aae2:	d01a      	beq.n	800ab1a <UART_SetConfig+0x19aa>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d014      	beq.n	800ab16 <UART_SetConfig+0x19a6>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b09      	cmp	r3, #9
 800aaf2:	d00e      	beq.n	800ab12 <UART_SetConfig+0x19a2>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b0a      	cmp	r3, #10
 800aafa:	d008      	beq.n	800ab0e <UART_SetConfig+0x199e>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b0b      	cmp	r3, #11
 800ab02:	d102      	bne.n	800ab0a <UART_SetConfig+0x199a>
 800ab04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab08:	e016      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e014      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab0e:	2380      	movs	r3, #128	; 0x80
 800ab10:	e012      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab12:	2340      	movs	r3, #64	; 0x40
 800ab14:	e010      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab16:	2320      	movs	r3, #32
 800ab18:	e00e      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab1a:	2310      	movs	r3, #16
 800ab1c:	e00c      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	e00a      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab22:	230a      	movs	r3, #10
 800ab24:	e008      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab26:	2308      	movs	r3, #8
 800ab28:	e006      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab2a:	2306      	movs	r3, #6
 800ab2c:	e004      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab2e:	2304      	movs	r3, #4
 800ab30:	e002      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab32:	2302      	movs	r3, #2
 800ab34:	e000      	b.n	800ab38 <UART_SetConfig+0x19c8>
 800ab36:	2301      	movs	r3, #1
 800ab38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3c:	005a      	lsls	r2, r3, #1
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	085b      	lsrs	r3, r3, #1
 800ab44:	441a      	add	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab52:	e198      	b.n	800ae86 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab54:	4b87      	ldr	r3, [pc, #540]	; (800ad74 <UART_SetConfig+0x1c04>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d05e      	beq.n	800ac1e <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab60:	4b84      	ldr	r3, [pc, #528]	; (800ad74 <UART_SetConfig+0x1c04>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	08db      	lsrs	r3, r3, #3
 800ab66:	f003 0303 	and.w	r3, r3, #3
 800ab6a:	4a83      	ldr	r2, [pc, #524]	; (800ad78 <UART_SetConfig+0x1c08>)
 800ab6c:	40da      	lsrs	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d044      	beq.n	800ac00 <UART_SetConfig+0x1a90>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d03e      	beq.n	800abfc <UART_SetConfig+0x1a8c>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d038      	beq.n	800abf8 <UART_SetConfig+0x1a88>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d032      	beq.n	800abf4 <UART_SetConfig+0x1a84>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	2b04      	cmp	r3, #4
 800ab94:	d02c      	beq.n	800abf0 <UART_SetConfig+0x1a80>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	2b05      	cmp	r3, #5
 800ab9c:	d026      	beq.n	800abec <UART_SetConfig+0x1a7c>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	2b06      	cmp	r3, #6
 800aba4:	d020      	beq.n	800abe8 <UART_SetConfig+0x1a78>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	2b07      	cmp	r3, #7
 800abac:	d01a      	beq.n	800abe4 <UART_SetConfig+0x1a74>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb2:	2b08      	cmp	r3, #8
 800abb4:	d014      	beq.n	800abe0 <UART_SetConfig+0x1a70>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	2b09      	cmp	r3, #9
 800abbc:	d00e      	beq.n	800abdc <UART_SetConfig+0x1a6c>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc2:	2b0a      	cmp	r3, #10
 800abc4:	d008      	beq.n	800abd8 <UART_SetConfig+0x1a68>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abca:	2b0b      	cmp	r3, #11
 800abcc:	d102      	bne.n	800abd4 <UART_SetConfig+0x1a64>
 800abce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abd2:	e016      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abd4:	2301      	movs	r3, #1
 800abd6:	e014      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abd8:	2380      	movs	r3, #128	; 0x80
 800abda:	e012      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abdc:	2340      	movs	r3, #64	; 0x40
 800abde:	e010      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abe0:	2320      	movs	r3, #32
 800abe2:	e00e      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abe4:	2310      	movs	r3, #16
 800abe6:	e00c      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abe8:	230c      	movs	r3, #12
 800abea:	e00a      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abec:	230a      	movs	r3, #10
 800abee:	e008      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abf0:	2308      	movs	r3, #8
 800abf2:	e006      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abf4:	2306      	movs	r3, #6
 800abf6:	e004      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abf8:	2304      	movs	r3, #4
 800abfa:	e002      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800abfc:	2302      	movs	r3, #2
 800abfe:	e000      	b.n	800ac02 <UART_SetConfig+0x1a92>
 800ac00:	2301      	movs	r3, #1
 800ac02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac06:	005a      	lsls	r2, r3, #1
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	085b      	lsrs	r3, r3, #1
 800ac0e:	441a      	add	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800ac1c:	e133      	b.n	800ae86 <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d043      	beq.n	800acae <UART_SetConfig+0x1b3e>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d03d      	beq.n	800acaa <UART_SetConfig+0x1b3a>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d037      	beq.n	800aca6 <UART_SetConfig+0x1b36>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d031      	beq.n	800aca2 <UART_SetConfig+0x1b32>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d02b      	beq.n	800ac9e <UART_SetConfig+0x1b2e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	d025      	beq.n	800ac9a <UART_SetConfig+0x1b2a>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac52:	2b06      	cmp	r3, #6
 800ac54:	d01f      	beq.n	800ac96 <UART_SetConfig+0x1b26>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	2b07      	cmp	r3, #7
 800ac5c:	d019      	beq.n	800ac92 <UART_SetConfig+0x1b22>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	2b08      	cmp	r3, #8
 800ac64:	d013      	beq.n	800ac8e <UART_SetConfig+0x1b1e>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	2b09      	cmp	r3, #9
 800ac6c:	d00d      	beq.n	800ac8a <UART_SetConfig+0x1b1a>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	2b0a      	cmp	r3, #10
 800ac74:	d007      	beq.n	800ac86 <UART_SetConfig+0x1b16>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	2b0b      	cmp	r3, #11
 800ac7c:	d101      	bne.n	800ac82 <UART_SetConfig+0x1b12>
 800ac7e:	4b3f      	ldr	r3, [pc, #252]	; (800ad7c <UART_SetConfig+0x1c0c>)
 800ac80:	e016      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800ac82:	4b3f      	ldr	r3, [pc, #252]	; (800ad80 <UART_SetConfig+0x1c10>)
 800ac84:	e014      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800ac86:	4b3f      	ldr	r3, [pc, #252]	; (800ad84 <UART_SetConfig+0x1c14>)
 800ac88:	e012      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800ac8a:	4b3f      	ldr	r3, [pc, #252]	; (800ad88 <UART_SetConfig+0x1c18>)
 800ac8c:	e010      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800ac8e:	4b3f      	ldr	r3, [pc, #252]	; (800ad8c <UART_SetConfig+0x1c1c>)
 800ac90:	e00e      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800ac92:	4b3f      	ldr	r3, [pc, #252]	; (800ad90 <UART_SetConfig+0x1c20>)
 800ac94:	e00c      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800ac96:	4b3f      	ldr	r3, [pc, #252]	; (800ad94 <UART_SetConfig+0x1c24>)
 800ac98:	e00a      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800ac9a:	4b3f      	ldr	r3, [pc, #252]	; (800ad98 <UART_SetConfig+0x1c28>)
 800ac9c:	e008      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800ac9e:	4b3f      	ldr	r3, [pc, #252]	; (800ad9c <UART_SetConfig+0x1c2c>)
 800aca0:	e006      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800aca2:	4b3f      	ldr	r3, [pc, #252]	; (800ada0 <UART_SetConfig+0x1c30>)
 800aca4:	e004      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800aca6:	4b3f      	ldr	r3, [pc, #252]	; (800ada4 <UART_SetConfig+0x1c34>)
 800aca8:	e002      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800acaa:	4b33      	ldr	r3, [pc, #204]	; (800ad78 <UART_SetConfig+0x1c08>)
 800acac:	e000      	b.n	800acb0 <UART_SetConfig+0x1b40>
 800acae:	4b34      	ldr	r3, [pc, #208]	; (800ad80 <UART_SetConfig+0x1c10>)
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	6852      	ldr	r2, [r2, #4]
 800acb4:	0852      	lsrs	r2, r2, #1
 800acb6:	441a      	add	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acc4:	e0df      	b.n	800ae86 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	d045      	beq.n	800ad5a <UART_SetConfig+0x1bea>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d03f      	beq.n	800ad56 <UART_SetConfig+0x1be6>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d039      	beq.n	800ad52 <UART_SetConfig+0x1be2>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d033      	beq.n	800ad4e <UART_SetConfig+0x1bde>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	2b04      	cmp	r3, #4
 800acec:	d02d      	beq.n	800ad4a <UART_SetConfig+0x1bda>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d027      	beq.n	800ad46 <UART_SetConfig+0x1bd6>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	2b06      	cmp	r3, #6
 800acfc:	d021      	beq.n	800ad42 <UART_SetConfig+0x1bd2>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	2b07      	cmp	r3, #7
 800ad04:	d01b      	beq.n	800ad3e <UART_SetConfig+0x1bce>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	2b08      	cmp	r3, #8
 800ad0c:	d015      	beq.n	800ad3a <UART_SetConfig+0x1bca>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad12:	2b09      	cmp	r3, #9
 800ad14:	d00f      	beq.n	800ad36 <UART_SetConfig+0x1bc6>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b0a      	cmp	r3, #10
 800ad1c:	d008      	beq.n	800ad30 <UART_SetConfig+0x1bc0>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	2b0b      	cmp	r3, #11
 800ad24:	d102      	bne.n	800ad2c <UART_SetConfig+0x1bbc>
 800ad26:	f647 2312 	movw	r3, #31250	; 0x7a12
 800ad2a:	e017      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad2c:	4b18      	ldr	r3, [pc, #96]	; (800ad90 <UART_SetConfig+0x1c20>)
 800ad2e:	e015      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad30:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ad34:	e012      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad36:	4b1c      	ldr	r3, [pc, #112]	; (800ada8 <UART_SetConfig+0x1c38>)
 800ad38:	e010      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad3a:	4b1c      	ldr	r3, [pc, #112]	; (800adac <UART_SetConfig+0x1c3c>)
 800ad3c:	e00e      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <UART_SetConfig+0x1c0c>)
 800ad40:	e00c      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad42:	4b1b      	ldr	r3, [pc, #108]	; (800adb0 <UART_SetConfig+0x1c40>)
 800ad44:	e00a      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad46:	4b1b      	ldr	r3, [pc, #108]	; (800adb4 <UART_SetConfig+0x1c44>)
 800ad48:	e008      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad4a:	4b0e      	ldr	r3, [pc, #56]	; (800ad84 <UART_SetConfig+0x1c14>)
 800ad4c:	e006      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad4e:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <UART_SetConfig+0x1c48>)
 800ad50:	e004      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad52:	4b0d      	ldr	r3, [pc, #52]	; (800ad88 <UART_SetConfig+0x1c18>)
 800ad54:	e002      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad56:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <UART_SetConfig+0x1c1c>)
 800ad58:	e000      	b.n	800ad5c <UART_SetConfig+0x1bec>
 800ad5a:	4b0d      	ldr	r3, [pc, #52]	; (800ad90 <UART_SetConfig+0x1c20>)
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	6852      	ldr	r2, [r2, #4]
 800ad60:	0852      	lsrs	r2, r2, #1
 800ad62:	441a      	add	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad70:	e089      	b.n	800ae86 <UART_SetConfig+0x1d16>
 800ad72:	bf00      	nop
 800ad74:	58024400 	.word	0x58024400
 800ad78:	03d09000 	.word	0x03d09000
 800ad7c:	0007a120 	.word	0x0007a120
 800ad80:	07a12000 	.word	0x07a12000
 800ad84:	000f4240 	.word	0x000f4240
 800ad88:	001e8480 	.word	0x001e8480
 800ad8c:	003d0900 	.word	0x003d0900
 800ad90:	007a1200 	.word	0x007a1200
 800ad94:	00a2c2aa 	.word	0x00a2c2aa
 800ad98:	00c35000 	.word	0x00c35000
 800ad9c:	00f42400 	.word	0x00f42400
 800ada0:	01458554 	.word	0x01458554
 800ada4:	01e84800 	.word	0x01e84800
 800ada8:	0001e848 	.word	0x0001e848
 800adac:	0003d090 	.word	0x0003d090
 800adb0:	000a2c2a 	.word	0x000a2c2a
 800adb4:	000c3500 	.word	0x000c3500
 800adb8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d04f      	beq.n	800ae64 <UART_SetConfig+0x1cf4>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d048      	beq.n	800ae5e <UART_SetConfig+0x1cee>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b02      	cmp	r3, #2
 800add2:	d041      	beq.n	800ae58 <UART_SetConfig+0x1ce8>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b03      	cmp	r3, #3
 800adda:	d03a      	beq.n	800ae52 <UART_SetConfig+0x1ce2>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b04      	cmp	r3, #4
 800ade2:	d033      	beq.n	800ae4c <UART_SetConfig+0x1cdc>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	2b05      	cmp	r3, #5
 800adea:	d02c      	beq.n	800ae46 <UART_SetConfig+0x1cd6>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	2b06      	cmp	r3, #6
 800adf2:	d025      	beq.n	800ae40 <UART_SetConfig+0x1cd0>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	2b07      	cmp	r3, #7
 800adfa:	d01e      	beq.n	800ae3a <UART_SetConfig+0x1cca>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	2b08      	cmp	r3, #8
 800ae02:	d017      	beq.n	800ae34 <UART_SetConfig+0x1cc4>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	2b09      	cmp	r3, #9
 800ae0a:	d010      	beq.n	800ae2e <UART_SetConfig+0x1cbe>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	2b0a      	cmp	r3, #10
 800ae12:	d009      	beq.n	800ae28 <UART_SetConfig+0x1cb8>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	2b0b      	cmp	r3, #11
 800ae1a:	d102      	bne.n	800ae22 <UART_SetConfig+0x1cb2>
 800ae1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae20:	e022      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae26:	e01f      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae2c:	e01c      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae32:	e019      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae38:	e016      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae3e:	e013      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae40:	f241 5354 	movw	r3, #5460	; 0x1554
 800ae44:	e010      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae46:	f641 1398 	movw	r3, #6552	; 0x1998
 800ae4a:	e00d      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae50:	e00a      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae52:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ae56:	e007      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae5c:	e004      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae62:	e001      	b.n	800ae68 <UART_SetConfig+0x1cf8>
 800ae64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6852      	ldr	r2, [r2, #4]
 800ae6c:	0852      	lsrs	r2, r2, #1
 800ae6e:	441a      	add	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae7c:	e003      	b.n	800ae86 <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ae84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae88:	2b0f      	cmp	r3, #15
 800ae8a:	d916      	bls.n	800aeba <UART_SetConfig+0x1d4a>
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae92:	d212      	bcs.n	800aeba <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	f023 030f 	bic.w	r3, r3, #15
 800ae9c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea0:	085b      	lsrs	r3, r3, #1
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	f003 0307 	and.w	r3, r3, #7
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeac:	4313      	orrs	r3, r2
 800aeae:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aeb6:	60da      	str	r2, [r3, #12]
 800aeb8:	e3a3      	b.n	800b602 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec0:	e39f      	b.n	800b602 <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 800aec2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aec6:	2b40      	cmp	r3, #64	; 0x40
 800aec8:	f200 8388 	bhi.w	800b5dc <UART_SetConfig+0x246c>
 800aecc:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <UART_SetConfig+0x1d64>)
 800aece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed2:	bf00      	nop
 800aed4:	0800afd9 	.word	0x0800afd9
 800aed8:	0800b08f 	.word	0x0800b08f
 800aedc:	0800b5dd 	.word	0x0800b5dd
 800aee0:	0800b5dd 	.word	0x0800b5dd
 800aee4:	0800b145 	.word	0x0800b145
 800aee8:	0800b5dd 	.word	0x0800b5dd
 800aeec:	0800b5dd 	.word	0x0800b5dd
 800aef0:	0800b5dd 	.word	0x0800b5dd
 800aef4:	0800b1ff 	.word	0x0800b1ff
 800aef8:	0800b5dd 	.word	0x0800b5dd
 800aefc:	0800b5dd 	.word	0x0800b5dd
 800af00:	0800b5dd 	.word	0x0800b5dd
 800af04:	0800b5dd 	.word	0x0800b5dd
 800af08:	0800b5dd 	.word	0x0800b5dd
 800af0c:	0800b5dd 	.word	0x0800b5dd
 800af10:	0800b5dd 	.word	0x0800b5dd
 800af14:	0800b2b9 	.word	0x0800b2b9
 800af18:	0800b5dd 	.word	0x0800b5dd
 800af1c:	0800b5dd 	.word	0x0800b5dd
 800af20:	0800b5dd 	.word	0x0800b5dd
 800af24:	0800b5dd 	.word	0x0800b5dd
 800af28:	0800b5dd 	.word	0x0800b5dd
 800af2c:	0800b5dd 	.word	0x0800b5dd
 800af30:	0800b5dd 	.word	0x0800b5dd
 800af34:	0800b5dd 	.word	0x0800b5dd
 800af38:	0800b5dd 	.word	0x0800b5dd
 800af3c:	0800b5dd 	.word	0x0800b5dd
 800af40:	0800b5dd 	.word	0x0800b5dd
 800af44:	0800b5dd 	.word	0x0800b5dd
 800af48:	0800b5dd 	.word	0x0800b5dd
 800af4c:	0800b5dd 	.word	0x0800b5dd
 800af50:	0800b5dd 	.word	0x0800b5dd
 800af54:	0800b429 	.word	0x0800b429
 800af58:	0800b5dd 	.word	0x0800b5dd
 800af5c:	0800b5dd 	.word	0x0800b5dd
 800af60:	0800b5dd 	.word	0x0800b5dd
 800af64:	0800b5dd 	.word	0x0800b5dd
 800af68:	0800b5dd 	.word	0x0800b5dd
 800af6c:	0800b5dd 	.word	0x0800b5dd
 800af70:	0800b5dd 	.word	0x0800b5dd
 800af74:	0800b5dd 	.word	0x0800b5dd
 800af78:	0800b5dd 	.word	0x0800b5dd
 800af7c:	0800b5dd 	.word	0x0800b5dd
 800af80:	0800b5dd 	.word	0x0800b5dd
 800af84:	0800b5dd 	.word	0x0800b5dd
 800af88:	0800b5dd 	.word	0x0800b5dd
 800af8c:	0800b5dd 	.word	0x0800b5dd
 800af90:	0800b5dd 	.word	0x0800b5dd
 800af94:	0800b5dd 	.word	0x0800b5dd
 800af98:	0800b5dd 	.word	0x0800b5dd
 800af9c:	0800b5dd 	.word	0x0800b5dd
 800afa0:	0800b5dd 	.word	0x0800b5dd
 800afa4:	0800b5dd 	.word	0x0800b5dd
 800afa8:	0800b5dd 	.word	0x0800b5dd
 800afac:	0800b5dd 	.word	0x0800b5dd
 800afb0:	0800b5dd 	.word	0x0800b5dd
 800afb4:	0800b5dd 	.word	0x0800b5dd
 800afb8:	0800b5dd 	.word	0x0800b5dd
 800afbc:	0800b5dd 	.word	0x0800b5dd
 800afc0:	0800b5dd 	.word	0x0800b5dd
 800afc4:	0800b5dd 	.word	0x0800b5dd
 800afc8:	0800b5dd 	.word	0x0800b5dd
 800afcc:	0800b5dd 	.word	0x0800b5dd
 800afd0:	0800b5dd 	.word	0x0800b5dd
 800afd4:	0800b51d 	.word	0x0800b51d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afd8:	f7fb fa9a 	bl	8006510 <HAL_RCC_GetPCLK1Freq>
 800afdc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d044      	beq.n	800b070 <UART_SetConfig+0x1f00>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	2b01      	cmp	r3, #1
 800afec:	d03e      	beq.n	800b06c <UART_SetConfig+0x1efc>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d038      	beq.n	800b068 <UART_SetConfig+0x1ef8>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	2b03      	cmp	r3, #3
 800affc:	d032      	beq.n	800b064 <UART_SetConfig+0x1ef4>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	2b04      	cmp	r3, #4
 800b004:	d02c      	beq.n	800b060 <UART_SetConfig+0x1ef0>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	2b05      	cmp	r3, #5
 800b00c:	d026      	beq.n	800b05c <UART_SetConfig+0x1eec>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	2b06      	cmp	r3, #6
 800b014:	d020      	beq.n	800b058 <UART_SetConfig+0x1ee8>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01a:	2b07      	cmp	r3, #7
 800b01c:	d01a      	beq.n	800b054 <UART_SetConfig+0x1ee4>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b022:	2b08      	cmp	r3, #8
 800b024:	d014      	beq.n	800b050 <UART_SetConfig+0x1ee0>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02a:	2b09      	cmp	r3, #9
 800b02c:	d00e      	beq.n	800b04c <UART_SetConfig+0x1edc>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	2b0a      	cmp	r3, #10
 800b034:	d008      	beq.n	800b048 <UART_SetConfig+0x1ed8>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	2b0b      	cmp	r3, #11
 800b03c:	d102      	bne.n	800b044 <UART_SetConfig+0x1ed4>
 800b03e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b042:	e016      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b044:	2301      	movs	r3, #1
 800b046:	e014      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b048:	2380      	movs	r3, #128	; 0x80
 800b04a:	e012      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b04c:	2340      	movs	r3, #64	; 0x40
 800b04e:	e010      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b050:	2320      	movs	r3, #32
 800b052:	e00e      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b054:	2310      	movs	r3, #16
 800b056:	e00c      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b058:	230c      	movs	r3, #12
 800b05a:	e00a      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b05c:	230a      	movs	r3, #10
 800b05e:	e008      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b060:	2308      	movs	r3, #8
 800b062:	e006      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b064:	2306      	movs	r3, #6
 800b066:	e004      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b068:	2304      	movs	r3, #4
 800b06a:	e002      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b06c:	2302      	movs	r3, #2
 800b06e:	e000      	b.n	800b072 <UART_SetConfig+0x1f02>
 800b070:	2301      	movs	r3, #1
 800b072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b074:	fbb2 f2f3 	udiv	r2, r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	085b      	lsrs	r3, r3, #1
 800b07e:	441a      	add	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	fbb2 f3f3 	udiv	r3, r2, r3
 800b088:	b29b      	uxth	r3, r3
 800b08a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b08c:	e2aa      	b.n	800b5e4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b08e:	f7fb fa55 	bl	800653c <HAL_RCC_GetPCLK2Freq>
 800b092:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d044      	beq.n	800b126 <UART_SetConfig+0x1fb6>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d03e      	beq.n	800b122 <UART_SetConfig+0x1fb2>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d038      	beq.n	800b11e <UART_SetConfig+0x1fae>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	d032      	beq.n	800b11a <UART_SetConfig+0x1faa>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	2b04      	cmp	r3, #4
 800b0ba:	d02c      	beq.n	800b116 <UART_SetConfig+0x1fa6>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c0:	2b05      	cmp	r3, #5
 800b0c2:	d026      	beq.n	800b112 <UART_SetConfig+0x1fa2>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	2b06      	cmp	r3, #6
 800b0ca:	d020      	beq.n	800b10e <UART_SetConfig+0x1f9e>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b07      	cmp	r3, #7
 800b0d2:	d01a      	beq.n	800b10a <UART_SetConfig+0x1f9a>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	2b08      	cmp	r3, #8
 800b0da:	d014      	beq.n	800b106 <UART_SetConfig+0x1f96>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	2b09      	cmp	r3, #9
 800b0e2:	d00e      	beq.n	800b102 <UART_SetConfig+0x1f92>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	2b0a      	cmp	r3, #10
 800b0ea:	d008      	beq.n	800b0fe <UART_SetConfig+0x1f8e>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b0b      	cmp	r3, #11
 800b0f2:	d102      	bne.n	800b0fa <UART_SetConfig+0x1f8a>
 800b0f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0f8:	e016      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e014      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b0fe:	2380      	movs	r3, #128	; 0x80
 800b100:	e012      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b102:	2340      	movs	r3, #64	; 0x40
 800b104:	e010      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b106:	2320      	movs	r3, #32
 800b108:	e00e      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b10a:	2310      	movs	r3, #16
 800b10c:	e00c      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b10e:	230c      	movs	r3, #12
 800b110:	e00a      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b112:	230a      	movs	r3, #10
 800b114:	e008      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b116:	2308      	movs	r3, #8
 800b118:	e006      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b11a:	2306      	movs	r3, #6
 800b11c:	e004      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b11e:	2304      	movs	r3, #4
 800b120:	e002      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b122:	2302      	movs	r3, #2
 800b124:	e000      	b.n	800b128 <UART_SetConfig+0x1fb8>
 800b126:	2301      	movs	r3, #1
 800b128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b12a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	085b      	lsrs	r3, r3, #1
 800b134:	441a      	add	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13e:	b29b      	uxth	r3, r3
 800b140:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b142:	e24f      	b.n	800b5e4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b144:	f107 0318 	add.w	r3, r7, #24
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fc fbc5 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	d044      	beq.n	800b1e2 <UART_SetConfig+0x2072>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d03e      	beq.n	800b1de <UART_SetConfig+0x206e>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	2b02      	cmp	r3, #2
 800b166:	d038      	beq.n	800b1da <UART_SetConfig+0x206a>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d032      	beq.n	800b1d6 <UART_SetConfig+0x2066>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	2b04      	cmp	r3, #4
 800b176:	d02c      	beq.n	800b1d2 <UART_SetConfig+0x2062>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17c:	2b05      	cmp	r3, #5
 800b17e:	d026      	beq.n	800b1ce <UART_SetConfig+0x205e>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b184:	2b06      	cmp	r3, #6
 800b186:	d020      	beq.n	800b1ca <UART_SetConfig+0x205a>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	2b07      	cmp	r3, #7
 800b18e:	d01a      	beq.n	800b1c6 <UART_SetConfig+0x2056>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	2b08      	cmp	r3, #8
 800b196:	d014      	beq.n	800b1c2 <UART_SetConfig+0x2052>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	2b09      	cmp	r3, #9
 800b19e:	d00e      	beq.n	800b1be <UART_SetConfig+0x204e>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a4:	2b0a      	cmp	r3, #10
 800b1a6:	d008      	beq.n	800b1ba <UART_SetConfig+0x204a>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	2b0b      	cmp	r3, #11
 800b1ae:	d102      	bne.n	800b1b6 <UART_SetConfig+0x2046>
 800b1b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1b4:	e016      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e014      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1ba:	2380      	movs	r3, #128	; 0x80
 800b1bc:	e012      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1be:	2340      	movs	r3, #64	; 0x40
 800b1c0:	e010      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1c2:	2320      	movs	r3, #32
 800b1c4:	e00e      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1c6:	2310      	movs	r3, #16
 800b1c8:	e00c      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1ca:	230c      	movs	r3, #12
 800b1cc:	e00a      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1ce:	230a      	movs	r3, #10
 800b1d0:	e008      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1d2:	2308      	movs	r3, #8
 800b1d4:	e006      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1d6:	2306      	movs	r3, #6
 800b1d8:	e004      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1da:	2304      	movs	r3, #4
 800b1dc:	e002      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1de:	2302      	movs	r3, #2
 800b1e0:	e000      	b.n	800b1e4 <UART_SetConfig+0x2074>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	441a      	add	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1fc:	e1f2      	b.n	800b5e4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1fe:	f107 030c 	add.w	r3, r7, #12
 800b202:	4618      	mov	r0, r3
 800b204:	f7fc fcb4 	bl	8007b70 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d044      	beq.n	800b29c <UART_SetConfig+0x212c>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	2b01      	cmp	r3, #1
 800b218:	d03e      	beq.n	800b298 <UART_SetConfig+0x2128>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d038      	beq.n	800b294 <UART_SetConfig+0x2124>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	2b03      	cmp	r3, #3
 800b228:	d032      	beq.n	800b290 <UART_SetConfig+0x2120>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d02c      	beq.n	800b28c <UART_SetConfig+0x211c>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	2b05      	cmp	r3, #5
 800b238:	d026      	beq.n	800b288 <UART_SetConfig+0x2118>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23e:	2b06      	cmp	r3, #6
 800b240:	d020      	beq.n	800b284 <UART_SetConfig+0x2114>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	2b07      	cmp	r3, #7
 800b248:	d01a      	beq.n	800b280 <UART_SetConfig+0x2110>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	2b08      	cmp	r3, #8
 800b250:	d014      	beq.n	800b27c <UART_SetConfig+0x210c>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	2b09      	cmp	r3, #9
 800b258:	d00e      	beq.n	800b278 <UART_SetConfig+0x2108>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	2b0a      	cmp	r3, #10
 800b260:	d008      	beq.n	800b274 <UART_SetConfig+0x2104>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	2b0b      	cmp	r3, #11
 800b268:	d102      	bne.n	800b270 <UART_SetConfig+0x2100>
 800b26a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b26e:	e016      	b.n	800b29e <UART_SetConfig+0x212e>
 800b270:	2301      	movs	r3, #1
 800b272:	e014      	b.n	800b29e <UART_SetConfig+0x212e>
 800b274:	2380      	movs	r3, #128	; 0x80
 800b276:	e012      	b.n	800b29e <UART_SetConfig+0x212e>
 800b278:	2340      	movs	r3, #64	; 0x40
 800b27a:	e010      	b.n	800b29e <UART_SetConfig+0x212e>
 800b27c:	2320      	movs	r3, #32
 800b27e:	e00e      	b.n	800b29e <UART_SetConfig+0x212e>
 800b280:	2310      	movs	r3, #16
 800b282:	e00c      	b.n	800b29e <UART_SetConfig+0x212e>
 800b284:	230c      	movs	r3, #12
 800b286:	e00a      	b.n	800b29e <UART_SetConfig+0x212e>
 800b288:	230a      	movs	r3, #10
 800b28a:	e008      	b.n	800b29e <UART_SetConfig+0x212e>
 800b28c:	2308      	movs	r3, #8
 800b28e:	e006      	b.n	800b29e <UART_SetConfig+0x212e>
 800b290:	2306      	movs	r3, #6
 800b292:	e004      	b.n	800b29e <UART_SetConfig+0x212e>
 800b294:	2304      	movs	r3, #4
 800b296:	e002      	b.n	800b29e <UART_SetConfig+0x212e>
 800b298:	2302      	movs	r3, #2
 800b29a:	e000      	b.n	800b29e <UART_SetConfig+0x212e>
 800b29c:	2301      	movs	r3, #1
 800b29e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	085b      	lsrs	r3, r3, #1
 800b2a8:	441a      	add	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2b6:	e195      	b.n	800b5e4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b8:	4b87      	ldr	r3, [pc, #540]	; (800b4d8 <UART_SetConfig+0x2368>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0320 	and.w	r3, r3, #32
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d05d      	beq.n	800b380 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2c4:	4b84      	ldr	r3, [pc, #528]	; (800b4d8 <UART_SetConfig+0x2368>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	08db      	lsrs	r3, r3, #3
 800b2ca:	f003 0303 	and.w	r3, r3, #3
 800b2ce:	4a83      	ldr	r2, [pc, #524]	; (800b4dc <UART_SetConfig+0x236c>)
 800b2d0:	40da      	lsrs	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d044      	beq.n	800b364 <UART_SetConfig+0x21f4>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d03e      	beq.n	800b360 <UART_SetConfig+0x21f0>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d038      	beq.n	800b35c <UART_SetConfig+0x21ec>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d032      	beq.n	800b358 <UART_SetConfig+0x21e8>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	2b04      	cmp	r3, #4
 800b2f8:	d02c      	beq.n	800b354 <UART_SetConfig+0x21e4>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fe:	2b05      	cmp	r3, #5
 800b300:	d026      	beq.n	800b350 <UART_SetConfig+0x21e0>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	2b06      	cmp	r3, #6
 800b308:	d020      	beq.n	800b34c <UART_SetConfig+0x21dc>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2b07      	cmp	r3, #7
 800b310:	d01a      	beq.n	800b348 <UART_SetConfig+0x21d8>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	2b08      	cmp	r3, #8
 800b318:	d014      	beq.n	800b344 <UART_SetConfig+0x21d4>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	2b09      	cmp	r3, #9
 800b320:	d00e      	beq.n	800b340 <UART_SetConfig+0x21d0>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	2b0a      	cmp	r3, #10
 800b328:	d008      	beq.n	800b33c <UART_SetConfig+0x21cc>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	2b0b      	cmp	r3, #11
 800b330:	d102      	bne.n	800b338 <UART_SetConfig+0x21c8>
 800b332:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b336:	e016      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b338:	2301      	movs	r3, #1
 800b33a:	e014      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b33c:	2380      	movs	r3, #128	; 0x80
 800b33e:	e012      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b340:	2340      	movs	r3, #64	; 0x40
 800b342:	e010      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b344:	2320      	movs	r3, #32
 800b346:	e00e      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b348:	2310      	movs	r3, #16
 800b34a:	e00c      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b34c:	230c      	movs	r3, #12
 800b34e:	e00a      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b350:	230a      	movs	r3, #10
 800b352:	e008      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b354:	2308      	movs	r3, #8
 800b356:	e006      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b358:	2306      	movs	r3, #6
 800b35a:	e004      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b35c:	2304      	movs	r3, #4
 800b35e:	e002      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b360:	2302      	movs	r3, #2
 800b362:	e000      	b.n	800b366 <UART_SetConfig+0x21f6>
 800b364:	2301      	movs	r3, #1
 800b366:	fbb2 f2f3 	udiv	r2, r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	085b      	lsrs	r3, r3, #1
 800b370:	441a      	add	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b37e:	e131      	b.n	800b5e4 <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b384:	2b00      	cmp	r3, #0
 800b386:	d043      	beq.n	800b410 <UART_SetConfig+0x22a0>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d03d      	beq.n	800b40c <UART_SetConfig+0x229c>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	2b02      	cmp	r3, #2
 800b396:	d037      	beq.n	800b408 <UART_SetConfig+0x2298>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39c:	2b03      	cmp	r3, #3
 800b39e:	d031      	beq.n	800b404 <UART_SetConfig+0x2294>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	d02b      	beq.n	800b400 <UART_SetConfig+0x2290>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	2b05      	cmp	r3, #5
 800b3ae:	d025      	beq.n	800b3fc <UART_SetConfig+0x228c>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b4:	2b06      	cmp	r3, #6
 800b3b6:	d01f      	beq.n	800b3f8 <UART_SetConfig+0x2288>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	2b07      	cmp	r3, #7
 800b3be:	d019      	beq.n	800b3f4 <UART_SetConfig+0x2284>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d013      	beq.n	800b3f0 <UART_SetConfig+0x2280>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	2b09      	cmp	r3, #9
 800b3ce:	d00d      	beq.n	800b3ec <UART_SetConfig+0x227c>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d4:	2b0a      	cmp	r3, #10
 800b3d6:	d007      	beq.n	800b3e8 <UART_SetConfig+0x2278>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3dc:	2b0b      	cmp	r3, #11
 800b3de:	d101      	bne.n	800b3e4 <UART_SetConfig+0x2274>
 800b3e0:	4b3f      	ldr	r3, [pc, #252]	; (800b4e0 <UART_SetConfig+0x2370>)
 800b3e2:	e016      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b3e4:	4b3d      	ldr	r3, [pc, #244]	; (800b4dc <UART_SetConfig+0x236c>)
 800b3e6:	e014      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b3e8:	4b3e      	ldr	r3, [pc, #248]	; (800b4e4 <UART_SetConfig+0x2374>)
 800b3ea:	e012      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b3ec:	4b3e      	ldr	r3, [pc, #248]	; (800b4e8 <UART_SetConfig+0x2378>)
 800b3ee:	e010      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b3f0:	4b3e      	ldr	r3, [pc, #248]	; (800b4ec <UART_SetConfig+0x237c>)
 800b3f2:	e00e      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b3f4:	4b3e      	ldr	r3, [pc, #248]	; (800b4f0 <UART_SetConfig+0x2380>)
 800b3f6:	e00c      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b3f8:	4b3e      	ldr	r3, [pc, #248]	; (800b4f4 <UART_SetConfig+0x2384>)
 800b3fa:	e00a      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b3fc:	4b3e      	ldr	r3, [pc, #248]	; (800b4f8 <UART_SetConfig+0x2388>)
 800b3fe:	e008      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b400:	4b3e      	ldr	r3, [pc, #248]	; (800b4fc <UART_SetConfig+0x238c>)
 800b402:	e006      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b404:	4b3e      	ldr	r3, [pc, #248]	; (800b500 <UART_SetConfig+0x2390>)
 800b406:	e004      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b408:	4b3e      	ldr	r3, [pc, #248]	; (800b504 <UART_SetConfig+0x2394>)
 800b40a:	e002      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b40c:	4b3e      	ldr	r3, [pc, #248]	; (800b508 <UART_SetConfig+0x2398>)
 800b40e:	e000      	b.n	800b412 <UART_SetConfig+0x22a2>
 800b410:	4b32      	ldr	r3, [pc, #200]	; (800b4dc <UART_SetConfig+0x236c>)
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	6852      	ldr	r2, [r2, #4]
 800b416:	0852      	lsrs	r2, r2, #1
 800b418:	441a      	add	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b422:	b29b      	uxth	r3, r3
 800b424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b426:	e0dd      	b.n	800b5e4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d046      	beq.n	800b4be <UART_SetConfig+0x234e>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	2b01      	cmp	r3, #1
 800b436:	d040      	beq.n	800b4ba <UART_SetConfig+0x234a>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d03a      	beq.n	800b4b6 <UART_SetConfig+0x2346>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b444:	2b03      	cmp	r3, #3
 800b446:	d034      	beq.n	800b4b2 <UART_SetConfig+0x2342>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d02e      	beq.n	800b4ae <UART_SetConfig+0x233e>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	2b05      	cmp	r3, #5
 800b456:	d028      	beq.n	800b4aa <UART_SetConfig+0x233a>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	2b06      	cmp	r3, #6
 800b45e:	d022      	beq.n	800b4a6 <UART_SetConfig+0x2336>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b464:	2b07      	cmp	r3, #7
 800b466:	d01c      	beq.n	800b4a2 <UART_SetConfig+0x2332>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46c:	2b08      	cmp	r3, #8
 800b46e:	d016      	beq.n	800b49e <UART_SetConfig+0x232e>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b474:	2b09      	cmp	r3, #9
 800b476:	d00f      	beq.n	800b498 <UART_SetConfig+0x2328>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47c:	2b0a      	cmp	r3, #10
 800b47e:	d008      	beq.n	800b492 <UART_SetConfig+0x2322>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	2b0b      	cmp	r3, #11
 800b486:	d102      	bne.n	800b48e <UART_SetConfig+0x231e>
 800b488:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b48c:	e018      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b48e:	4b18      	ldr	r3, [pc, #96]	; (800b4f0 <UART_SetConfig+0x2380>)
 800b490:	e016      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b492:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b496:	e013      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b498:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b49c:	e010      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b49e:	4b1b      	ldr	r3, [pc, #108]	; (800b50c <UART_SetConfig+0x239c>)
 800b4a0:	e00e      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b4a2:	4b0f      	ldr	r3, [pc, #60]	; (800b4e0 <UART_SetConfig+0x2370>)
 800b4a4:	e00c      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b4a6:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <UART_SetConfig+0x23a0>)
 800b4a8:	e00a      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b4aa:	4b1a      	ldr	r3, [pc, #104]	; (800b514 <UART_SetConfig+0x23a4>)
 800b4ac:	e008      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b4ae:	4b0d      	ldr	r3, [pc, #52]	; (800b4e4 <UART_SetConfig+0x2374>)
 800b4b0:	e006      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b4b2:	4b19      	ldr	r3, [pc, #100]	; (800b518 <UART_SetConfig+0x23a8>)
 800b4b4:	e004      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b4b6:	4b0c      	ldr	r3, [pc, #48]	; (800b4e8 <UART_SetConfig+0x2378>)
 800b4b8:	e002      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b4ba:	4b0c      	ldr	r3, [pc, #48]	; (800b4ec <UART_SetConfig+0x237c>)
 800b4bc:	e000      	b.n	800b4c0 <UART_SetConfig+0x2350>
 800b4be:	4b0c      	ldr	r3, [pc, #48]	; (800b4f0 <UART_SetConfig+0x2380>)
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	6852      	ldr	r2, [r2, #4]
 800b4c4:	0852      	lsrs	r2, r2, #1
 800b4c6:	441a      	add	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4d4:	e086      	b.n	800b5e4 <UART_SetConfig+0x2474>
 800b4d6:	bf00      	nop
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	03d09000 	.word	0x03d09000
 800b4e0:	0003d090 	.word	0x0003d090
 800b4e4:	0007a120 	.word	0x0007a120
 800b4e8:	000f4240 	.word	0x000f4240
 800b4ec:	001e8480 	.word	0x001e8480
 800b4f0:	003d0900 	.word	0x003d0900
 800b4f4:	00516155 	.word	0x00516155
 800b4f8:	0061a800 	.word	0x0061a800
 800b4fc:	007a1200 	.word	0x007a1200
 800b500:	00a2c2aa 	.word	0x00a2c2aa
 800b504:	00f42400 	.word	0x00f42400
 800b508:	01e84800 	.word	0x01e84800
 800b50c:	0001e848 	.word	0x0001e848
 800b510:	00051615 	.word	0x00051615
 800b514:	00061a80 	.word	0x00061a80
 800b518:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b520:	2b00      	cmp	r3, #0
 800b522:	d04e      	beq.n	800b5c2 <UART_SetConfig+0x2452>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d047      	beq.n	800b5bc <UART_SetConfig+0x244c>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b530:	2b02      	cmp	r3, #2
 800b532:	d040      	beq.n	800b5b6 <UART_SetConfig+0x2446>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d039      	beq.n	800b5b0 <UART_SetConfig+0x2440>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	2b04      	cmp	r3, #4
 800b542:	d032      	beq.n	800b5aa <UART_SetConfig+0x243a>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	2b05      	cmp	r3, #5
 800b54a:	d02b      	beq.n	800b5a4 <UART_SetConfig+0x2434>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b550:	2b06      	cmp	r3, #6
 800b552:	d024      	beq.n	800b59e <UART_SetConfig+0x242e>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b558:	2b07      	cmp	r3, #7
 800b55a:	d01d      	beq.n	800b598 <UART_SetConfig+0x2428>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	2b08      	cmp	r3, #8
 800b562:	d016      	beq.n	800b592 <UART_SetConfig+0x2422>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b568:	2b09      	cmp	r3, #9
 800b56a:	d00f      	beq.n	800b58c <UART_SetConfig+0x241c>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b570:	2b0a      	cmp	r3, #10
 800b572:	d008      	beq.n	800b586 <UART_SetConfig+0x2416>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b578:	2b0b      	cmp	r3, #11
 800b57a:	d101      	bne.n	800b580 <UART_SetConfig+0x2410>
 800b57c:	2380      	movs	r3, #128	; 0x80
 800b57e:	e022      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b584:	e01f      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b58a:	e01c      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b58c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b590:	e019      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b596:	e016      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b59c:	e013      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b59e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b5a2:	e010      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b5a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b5a8:	e00d      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b5aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5ae:	e00a      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b5b0:	f241 5355 	movw	r3, #5461	; 0x1555
 800b5b4:	e007      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b5b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5ba:	e004      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b5bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5c0:	e001      	b.n	800b5c6 <UART_SetConfig+0x2456>
 800b5c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	6852      	ldr	r2, [r2, #4]
 800b5ca:	0852      	lsrs	r2, r2, #1
 800b5cc:	441a      	add	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5da:	e003      	b.n	800b5e4 <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b5e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e6:	2b0f      	cmp	r3, #15
 800b5e8:	d908      	bls.n	800b5fc <UART_SetConfig+0x248c>
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f0:	d204      	bcs.n	800b5fc <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5f8:	60da      	str	r2, [r3, #12]
 800b5fa:	e002      	b.n	800b602 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b61e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b622:	4618      	mov	r0, r3
 800b624:	3740      	adds	r7, #64	; 0x40
 800b626:	46bd      	mov	sp, r7
 800b628:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b62c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b638:	2bff      	cmp	r3, #255	; 0xff
 800b63a:	d904      	bls.n	800b646 <UART_AdvFeatureConfig+0x1a>
 800b63c:	f640 4149 	movw	r1, #3145	; 0xc49
 800b640:	4899      	ldr	r0, [pc, #612]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b642:	f7f5 fd54 	bl	80010ee <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d018      	beq.n	800b684 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d009      	beq.n	800b66e <UART_AdvFeatureConfig+0x42>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b662:	d004      	beq.n	800b66e <UART_AdvFeatureConfig+0x42>
 800b664:	f640 414e 	movw	r1, #3150	; 0xc4e
 800b668:	488f      	ldr	r0, [pc, #572]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b66a:	f7f5 fd40 	bl	80010ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	430a      	orrs	r2, r1
 800b682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b688:	f003 0302 	and.w	r3, r3, #2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d018      	beq.n	800b6c2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b694:	2b00      	cmp	r3, #0
 800b696:	d009      	beq.n	800b6ac <UART_AdvFeatureConfig+0x80>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6a0:	d004      	beq.n	800b6ac <UART_AdvFeatureConfig+0x80>
 800b6a2:	f640 4155 	movw	r1, #3157	; 0xc55
 800b6a6:	4880      	ldr	r0, [pc, #512]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b6a8:	f7f5 fd21 	bl	80010ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c6:	f003 0304 	and.w	r3, r3, #4
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d018      	beq.n	800b700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d009      	beq.n	800b6ea <UART_AdvFeatureConfig+0xbe>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b6de:	d004      	beq.n	800b6ea <UART_AdvFeatureConfig+0xbe>
 800b6e0:	f640 415c 	movw	r1, #3164	; 0xc5c
 800b6e4:	4870      	ldr	r0, [pc, #448]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b6e6:	f7f5 fd02 	bl	80010ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d018      	beq.n	800b73e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b710:	2b00      	cmp	r3, #0
 800b712:	d009      	beq.n	800b728 <UART_AdvFeatureConfig+0xfc>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b71c:	d004      	beq.n	800b728 <UART_AdvFeatureConfig+0xfc>
 800b71e:	f640 4163 	movw	r1, #3171	; 0xc63
 800b722:	4861      	ldr	r0, [pc, #388]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b724:	f7f5 fce3 	bl	80010ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	430a      	orrs	r2, r1
 800b73c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b742:	f003 0310 	and.w	r3, r3, #16
 800b746:	2b00      	cmp	r3, #0
 800b748:	d018      	beq.n	800b77c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d009      	beq.n	800b766 <UART_AdvFeatureConfig+0x13a>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b75a:	d004      	beq.n	800b766 <UART_AdvFeatureConfig+0x13a>
 800b75c:	f640 416a 	movw	r1, #3178	; 0xc6a
 800b760:	4851      	ldr	r0, [pc, #324]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b762:	f7f5 fcc4 	bl	80010ee <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b00      	cmp	r3, #0
 800b786:	d018      	beq.n	800b7ba <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d009      	beq.n	800b7a4 <UART_AdvFeatureConfig+0x178>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b798:	d004      	beq.n	800b7a4 <UART_AdvFeatureConfig+0x178>
 800b79a:	f640 4171 	movw	r1, #3185	; 0xc71
 800b79e:	4842      	ldr	r0, [pc, #264]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b7a0:	f7f5 fca5 	bl	80010ee <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 8082 	beq.w	800b8cc <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a37      	ldr	r2, [pc, #220]	; (800b8ac <UART_AdvFeatureConfig+0x280>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d027      	beq.n	800b822 <UART_AdvFeatureConfig+0x1f6>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a36      	ldr	r2, [pc, #216]	; (800b8b0 <UART_AdvFeatureConfig+0x284>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d022      	beq.n	800b822 <UART_AdvFeatureConfig+0x1f6>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a34      	ldr	r2, [pc, #208]	; (800b8b4 <UART_AdvFeatureConfig+0x288>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d01d      	beq.n	800b822 <UART_AdvFeatureConfig+0x1f6>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a33      	ldr	r2, [pc, #204]	; (800b8b8 <UART_AdvFeatureConfig+0x28c>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d018      	beq.n	800b822 <UART_AdvFeatureConfig+0x1f6>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a31      	ldr	r2, [pc, #196]	; (800b8bc <UART_AdvFeatureConfig+0x290>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d013      	beq.n	800b822 <UART_AdvFeatureConfig+0x1f6>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a30      	ldr	r2, [pc, #192]	; (800b8c0 <UART_AdvFeatureConfig+0x294>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d00e      	beq.n	800b822 <UART_AdvFeatureConfig+0x1f6>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a2e      	ldr	r2, [pc, #184]	; (800b8c4 <UART_AdvFeatureConfig+0x298>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d009      	beq.n	800b822 <UART_AdvFeatureConfig+0x1f6>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a2d      	ldr	r2, [pc, #180]	; (800b8c8 <UART_AdvFeatureConfig+0x29c>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d004      	beq.n	800b822 <UART_AdvFeatureConfig+0x1f6>
 800b818:	f640 4178 	movw	r1, #3192	; 0xc78
 800b81c:	4822      	ldr	r0, [pc, #136]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b81e:	f7f5 fc66 	bl	80010ee <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b826:	2b00      	cmp	r3, #0
 800b828:	d009      	beq.n	800b83e <UART_AdvFeatureConfig+0x212>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b82e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b832:	d004      	beq.n	800b83e <UART_AdvFeatureConfig+0x212>
 800b834:	f640 4179 	movw	r1, #3193	; 0xc79
 800b838:	481b      	ldr	r0, [pc, #108]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b83a:	f7f5 fc58 	bl	80010ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b85c:	d136      	bne.n	800b8cc <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b862:	2b00      	cmp	r3, #0
 800b864:	d013      	beq.n	800b88e <UART_AdvFeatureConfig+0x262>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b86a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b86e:	d00e      	beq.n	800b88e <UART_AdvFeatureConfig+0x262>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b878:	d009      	beq.n	800b88e <UART_AdvFeatureConfig+0x262>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b87e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b882:	d004      	beq.n	800b88e <UART_AdvFeatureConfig+0x262>
 800b884:	f640 417e 	movw	r1, #3198	; 0xc7e
 800b888:	4807      	ldr	r0, [pc, #28]	; (800b8a8 <UART_AdvFeatureConfig+0x27c>)
 800b88a:	f7f5 fc30 	bl	80010ee <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	605a      	str	r2, [r3, #4]
 800b8a4:	e012      	b.n	800b8cc <UART_AdvFeatureConfig+0x2a0>
 800b8a6:	bf00      	nop
 800b8a8:	0800fe64 	.word	0x0800fe64
 800b8ac:	40011000 	.word	0x40011000
 800b8b0:	40004400 	.word	0x40004400
 800b8b4:	40004800 	.word	0x40004800
 800b8b8:	40004c00 	.word	0x40004c00
 800b8bc:	40005000 	.word	0x40005000
 800b8c0:	40011400 	.word	0x40011400
 800b8c4:	40007800 	.word	0x40007800
 800b8c8:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d018      	beq.n	800b90a <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d009      	beq.n	800b8f4 <UART_AdvFeatureConfig+0x2c8>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b8e8:	d004      	beq.n	800b8f4 <UART_AdvFeatureConfig+0x2c8>
 800b8ea:	f640 4186 	movw	r1, #3206	; 0xc86
 800b8ee:	4809      	ldr	r0, [pc, #36]	; (800b914 <UART_AdvFeatureConfig+0x2e8>)
 800b8f0:	f7f5 fbfd 	bl	80010ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	430a      	orrs	r2, r1
 800b908:	605a      	str	r2, [r3, #4]
  }
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	0800fe64 	.word	0x0800fe64

0800b918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af02      	add	r7, sp, #8
 800b91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b928:	f7f5 fe94 	bl	8001654 <HAL_GetTick>
 800b92c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0308 	and.w	r3, r3, #8
 800b938:	2b08      	cmp	r3, #8
 800b93a:	d10e      	bne.n	800b95a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b93c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f82c 	bl	800b9a8 <UART_WaitOnFlagUntilTimeout>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b956:	2303      	movs	r3, #3
 800b958:	e022      	b.n	800b9a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b04      	cmp	r3, #4
 800b966:	d10e      	bne.n	800b986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f816 	bl	800b9a8 <UART_WaitOnFlagUntilTimeout>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e00c      	b.n	800b9a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2220      	movs	r2, #32
 800b98a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	603b      	str	r3, [r7, #0]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9b8:	e062      	b.n	800ba80 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c0:	d05e      	beq.n	800ba80 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9c2:	f7f5 fe47 	bl	8001654 <HAL_GetTick>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	69ba      	ldr	r2, [r7, #24]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d302      	bcc.n	800b9d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d11d      	bne.n	800ba14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f022 0201 	bic.w	r2, r2, #1
 800b9f6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2220      	movs	r2, #32
 800ba04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e045      	b.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0304 	and.w	r3, r3, #4
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d02e      	beq.n	800ba80 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba30:	d126      	bne.n	800ba80 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba3a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689a      	ldr	r2, [r3, #8]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0201 	bic.w	r2, r2, #1
 800ba5a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2220      	movs	r2, #32
 800ba68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2220      	movs	r2, #32
 800ba70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e00f      	b.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	69da      	ldr	r2, [r3, #28]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	4013      	ands	r3, r2
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	bf0c      	ite	eq
 800ba90:	2301      	moveq	r3, #1
 800ba92:	2300      	movne	r3, #0
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	461a      	mov	r2, r3
 800ba98:	79fb      	ldrb	r3, [r7, #7]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d08d      	beq.n	800b9ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a2e      	ldr	r2, [pc, #184]	; (800bb70 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d027      	beq.n	800bb0a <HAL_UARTEx_DisableFifoMode+0x62>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a2d      	ldr	r2, [pc, #180]	; (800bb74 <HAL_UARTEx_DisableFifoMode+0xcc>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d022      	beq.n	800bb0a <HAL_UARTEx_DisableFifoMode+0x62>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a2b      	ldr	r2, [pc, #172]	; (800bb78 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d01d      	beq.n	800bb0a <HAL_UARTEx_DisableFifoMode+0x62>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a2a      	ldr	r2, [pc, #168]	; (800bb7c <HAL_UARTEx_DisableFifoMode+0xd4>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d018      	beq.n	800bb0a <HAL_UARTEx_DisableFifoMode+0x62>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a28      	ldr	r2, [pc, #160]	; (800bb80 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d013      	beq.n	800bb0a <HAL_UARTEx_DisableFifoMode+0x62>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a27      	ldr	r2, [pc, #156]	; (800bb84 <HAL_UARTEx_DisableFifoMode+0xdc>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d00e      	beq.n	800bb0a <HAL_UARTEx_DisableFifoMode+0x62>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a25      	ldr	r2, [pc, #148]	; (800bb88 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d009      	beq.n	800bb0a <HAL_UARTEx_DisableFifoMode+0x62>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a24      	ldr	r2, [pc, #144]	; (800bb8c <HAL_UARTEx_DisableFifoMode+0xe4>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d004      	beq.n	800bb0a <HAL_UARTEx_DisableFifoMode+0x62>
 800bb00:	f240 2111 	movw	r1, #529	; 0x211
 800bb04:	4822      	ldr	r0, [pc, #136]	; (800bb90 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800bb06:	f7f5 faf2 	bl	80010ee <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d101      	bne.n	800bb18 <HAL_UARTEx_DisableFifoMode+0x70>
 800bb14:	2302      	movs	r3, #2
 800bb16:	e027      	b.n	800bb68 <HAL_UARTEx_DisableFifoMode+0xc0>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2224      	movs	r2, #36	; 0x24
 800bb24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f022 0201 	bic.w	r2, r2, #1
 800bb3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	40011000 	.word	0x40011000
 800bb74:	40004400 	.word	0x40004400
 800bb78:	40004800 	.word	0x40004800
 800bb7c:	40004c00 	.word	0x40004c00
 800bb80:	40005000 	.word	0x40005000
 800bb84:	40011400 	.word	0x40011400
 800bb88:	40007800 	.word	0x40007800
 800bb8c:	40007c00 	.word	0x40007c00
 800bb90:	0800fea0 	.word	0x0800fea0

0800bb94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a40      	ldr	r2, [pc, #256]	; (800bca4 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d027      	beq.n	800bbf8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a3e      	ldr	r2, [pc, #248]	; (800bca8 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d022      	beq.n	800bbf8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a3d      	ldr	r2, [pc, #244]	; (800bcac <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d01d      	beq.n	800bbf8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a3b      	ldr	r2, [pc, #236]	; (800bcb0 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d018      	beq.n	800bbf8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a3a      	ldr	r2, [pc, #232]	; (800bcb4 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d013      	beq.n	800bbf8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a38      	ldr	r2, [pc, #224]	; (800bcb8 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d00e      	beq.n	800bbf8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a37      	ldr	r2, [pc, #220]	; (800bcbc <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d009      	beq.n	800bbf8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a35      	ldr	r2, [pc, #212]	; (800bcc0 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d004      	beq.n	800bbf8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800bbee:	f240 213f 	movw	r1, #575	; 0x23f
 800bbf2:	4834      	ldr	r0, [pc, #208]	; (800bcc4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800bbf4:	f7f5 fa7b 	bl	80010ee <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d018      	beq.n	800bc30 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc04:	d014      	beq.n	800bc30 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0c:	d010      	beq.n	800bc30 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bc14:	d00c      	beq.n	800bc30 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc1c:	d008      	beq.n	800bc30 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800bc24:	d004      	beq.n	800bc30 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800bc26:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc2a:	4826      	ldr	r0, [pc, #152]	; (800bcc4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800bc2c:	f7f5 fa5f 	bl	80010ee <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d101      	bne.n	800bc3e <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	e02d      	b.n	800bc9a <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2224      	movs	r2, #36	; 0x24
 800bc4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f022 0201 	bic.w	r2, r2, #1
 800bc64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	430a      	orrs	r2, r1
 800bc78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f8be 	bl	800bdfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	40011000 	.word	0x40011000
 800bca8:	40004400 	.word	0x40004400
 800bcac:	40004800 	.word	0x40004800
 800bcb0:	40004c00 	.word	0x40004c00
 800bcb4:	40005000 	.word	0x40005000
 800bcb8:	40011400 	.word	0x40011400
 800bcbc:	40007800 	.word	0x40007800
 800bcc0:	40007c00 	.word	0x40007c00
 800bcc4:	0800fea0 	.word	0x0800fea0

0800bcc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a40      	ldr	r2, [pc, #256]	; (800bdd8 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d027      	beq.n	800bd2c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a3e      	ldr	r2, [pc, #248]	; (800bddc <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d022      	beq.n	800bd2c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a3d      	ldr	r2, [pc, #244]	; (800bde0 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d01d      	beq.n	800bd2c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a3b      	ldr	r2, [pc, #236]	; (800bde4 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d018      	beq.n	800bd2c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a3a      	ldr	r2, [pc, #232]	; (800bde8 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d013      	beq.n	800bd2c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a38      	ldr	r2, [pc, #224]	; (800bdec <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d00e      	beq.n	800bd2c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a37      	ldr	r2, [pc, #220]	; (800bdf0 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d009      	beq.n	800bd2c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a35      	ldr	r2, [pc, #212]	; (800bdf4 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d004      	beq.n	800bd2c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800bd22:	f44f 711c 	mov.w	r1, #624	; 0x270
 800bd26:	4834      	ldr	r0, [pc, #208]	; (800bdf8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800bd28:	f7f5 f9e1 	bl	80010ee <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d018      	beq.n	800bd64 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd38:	d014      	beq.n	800bd64 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd40:	d010      	beq.n	800bd64 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800bd48:	d00c      	beq.n	800bd64 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd50:	d008      	beq.n	800bd64 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800bd58:	d004      	beq.n	800bd64 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800bd5a:	f240 2171 	movw	r1, #625	; 0x271
 800bd5e:	4826      	ldr	r0, [pc, #152]	; (800bdf8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800bd60:	f7f5 f9c5 	bl	80010ee <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d101      	bne.n	800bd72 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800bd6e:	2302      	movs	r3, #2
 800bd70:	e02d      	b.n	800bdce <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2224      	movs	r2, #36	; 0x24
 800bd7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 0201 	bic.w	r2, r2, #1
 800bd98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	430a      	orrs	r2, r1
 800bdac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 f824 	bl	800bdfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	40011000 	.word	0x40011000
 800bddc:	40004400 	.word	0x40004400
 800bde0:	40004800 	.word	0x40004800
 800bde4:	40004c00 	.word	0x40004c00
 800bde8:	40005000 	.word	0x40005000
 800bdec:	40011400 	.word	0x40011400
 800bdf0:	40007800 	.word	0x40007800
 800bdf4:	40007c00 	.word	0x40007c00
 800bdf8:	0800fea0 	.word	0x0800fea0

0800bdfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b089      	sub	sp, #36	; 0x24
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800be04:	4a2f      	ldr	r2, [pc, #188]	; (800bec4 <UARTEx_SetNbDataToProcess+0xc8>)
 800be06:	f107 0314 	add.w	r3, r7, #20
 800be0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be0e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800be12:	4a2d      	ldr	r2, [pc, #180]	; (800bec8 <UARTEx_SetNbDataToProcess+0xcc>)
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be1c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be24:	2b00      	cmp	r3, #0
 800be26:	d108      	bne.n	800be3a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be38:	e03d      	b.n	800beb6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be3a:	2308      	movs	r3, #8
 800be3c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be3e:	2308      	movs	r3, #8
 800be40:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	0e5b      	lsrs	r3, r3, #25
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	f003 0307 	and.w	r3, r3, #7
 800be50:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	0f5b      	lsrs	r3, r3, #29
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	f003 0307 	and.w	r3, r3, #7
 800be60:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800be62:	7fbb      	ldrb	r3, [r7, #30]
 800be64:	7f3a      	ldrb	r2, [r7, #28]
 800be66:	f107 0120 	add.w	r1, r7, #32
 800be6a:	440a      	add	r2, r1
 800be6c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800be70:	fb02 f303 	mul.w	r3, r2, r3
 800be74:	7f3a      	ldrb	r2, [r7, #28]
 800be76:	f107 0120 	add.w	r1, r7, #32
 800be7a:	440a      	add	r2, r1
 800be7c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800be80:	fb93 f3f2 	sdiv	r3, r3, r2
 800be84:	b29a      	uxth	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800be8c:	7ffb      	ldrb	r3, [r7, #31]
 800be8e:	7f7a      	ldrb	r2, [r7, #29]
 800be90:	f107 0120 	add.w	r1, r7, #32
 800be94:	440a      	add	r2, r1
 800be96:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800be9a:	fb02 f303 	mul.w	r3, r2, r3
 800be9e:	7f7a      	ldrb	r2, [r7, #29]
 800bea0:	f107 0120 	add.w	r1, r7, #32
 800bea4:	440a      	add	r2, r1
 800bea6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800beaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800beae:	b29a      	uxth	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800beb6:	bf00      	nop
 800beb8:	3724      	adds	r7, #36	; 0x24
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	0800fedc 	.word	0x0800fedc
 800bec8:	0800fee4 	.word	0x0800fee4

0800becc <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af00      	add	r7, sp, #0
    /* Initialize WiFi GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Configure GPIO pins : PA1 PA2 PA0 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = CONF_WINC_PIN_RESET;
 800bed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bed6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800bed8:	2301      	movs	r3, #1
 800beda:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;    // GPIO_PULLDOWN;
 800bedc:	2300      	movs	r3, #0
 800bede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bee0:	2300      	movs	r3, #0
 800bee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_PORT_RESET, &GPIO_InitStruct);
 800bee8:	1d3b      	adds	r3, r7, #4
 800beea:	4619      	mov	r1, r3
 800beec:	480c      	ldr	r0, [pc, #48]	; (800bf20 <init_chip_pins+0x54>)
 800beee:	f7f7 fe33 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin   = CONF_WINC_PIN_CHIP_ENABLE;
 800bef2:	2320      	movs	r3, #32
 800bef4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(CONF_WINC_PORT_CHIP_ENABLE, &GPIO_InitStruct);
 800bef6:	1d3b      	adds	r3, r7, #4
 800bef8:	4619      	mov	r1, r3
 800befa:	480a      	ldr	r0, [pc, #40]	; (800bf24 <init_chip_pins+0x58>)
 800befc:	f7f7 fe2c 	bl	8003b58 <HAL_GPIO_Init>

    
    /* Set INIT value */
// SO: seems irrelevant for my implementation   HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
// SO: seems irrelevant for my implementation   HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
    HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
 800bf00:	2200      	movs	r2, #0
 800bf02:	2120      	movs	r1, #32
 800bf04:	4807      	ldr	r0, [pc, #28]	; (800bf24 <init_chip_pins+0x58>)
 800bf06:	f7f8 f8d7 	bl	80040b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bf10:	4803      	ldr	r0, [pc, #12]	; (800bf20 <init_chip_pins+0x54>)
 800bf12:	f7f8 f8d1 	bl	80040b8 <HAL_GPIO_WritePin>

}
 800bf16:	bf00      	nop
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	58020c00 	.word	0x58020c00
 800bf24:	58020000 	.word	0x58020000

0800bf28 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 800bf2c:	f7ff ffce 	bl	800becc <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 800bf30:	f000 f804 	bl	800bf3c <nm_bsp_reset>

	return M2M_SUCCESS;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_RESET);
//    HAL_Delay(100);

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
	HAL_GPIO_WritePin(CONF_WINC_PORT_CHIP_ENABLE,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 800bf40:	2201      	movs	r2, #1
 800bf42:	2120      	movs	r1, #32
 800bf44:	4808      	ldr	r0, [pc, #32]	; (800bf68 <nm_bsp_reset+0x2c>)
 800bf46:	f7f8 f8b7 	bl	80040b8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800bf4a:	2064      	movs	r0, #100	; 0x64
 800bf4c:	f7f5 fb8e 	bl	800166c <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PORT_RESET,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 800bf50:	2201      	movs	r2, #1
 800bf52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bf56:	4805      	ldr	r0, [pc, #20]	; (800bf6c <nm_bsp_reset+0x30>)
 800bf58:	f7f8 f8ae 	bl	80040b8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800bf5c:	2064      	movs	r0, #100	; 0x64
 800bf5e:	f7f5 fb85 	bl	800166c <HAL_Delay>

}
 800bf62:	bf00      	nop
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	58020000 	.word	0x58020000
 800bf6c:	58020c00 	.word	0x58020c00

0800bf70 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7f5 fb77 	bl	800166c <HAL_Delay>
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b088      	sub	sp, #32
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    /* EXTI2 init ISR function - called from nm_bsp_register_isr() */

//     __GPIOC_CLK_ENABLE(); // --
    __GPIOD_CLK_ENABLE(); // ++
 800bf90:	4b13      	ldr	r3, [pc, #76]	; (800bfe0 <nm_bsp_register_isr+0x58>)
 800bf92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf96:	4a12      	ldr	r2, [pc, #72]	; (800bfe0 <nm_bsp_register_isr+0x58>)
 800bf98:	f043 0308 	orr.w	r3, r3, #8
 800bf9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bfa0:	4b0f      	ldr	r3, [pc, #60]	; (800bfe0 <nm_bsp_register_isr+0x58>)
 800bfa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfa6:	f003 0308 	and.w	r3, r3, #8
 800bfaa:	60bb      	str	r3, [r7, #8]
 800bfac:	68bb      	ldr	r3, [r7, #8]
	 //__GPIOA_CLK_ENABLE();

    GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 800bfae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800bfb4:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <nm_bsp_register_isr+0x5c>)
 800bfb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CONF_WINC_SPI_INT_PORT, &GPIO_InitStruct);
 800bfbc:	f107 030c 	add.w	r3, r7, #12
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4809      	ldr	r0, [pc, #36]	; (800bfe8 <nm_bsp_register_isr+0x60>)
 800bfc4:	f7f7 fdc8 	bl	8003b58 <HAL_GPIO_Init>

    /* EXTI 12 (PD12) interrupt init*/
    HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2100      	movs	r1, #0
 800bfcc:	2028      	movs	r0, #40	; 0x28
 800bfce:	f7f5 fc8d 	bl	80018ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 800bfd2:	2028      	movs	r0, #40	; 0x28
 800bfd4:	f7f5 fcb4 	bl	8001940 <HAL_NVIC_EnableIRQ>
//	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
//	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
//	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
//#endif

}
 800bfd8:	bf00      	nop
 800bfda:	3720      	adds	r7, #32
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	58024400 	.word	0x58024400
 800bfe4:	11210000 	.word	0x11210000
 800bfe8:	58020c00 	.word	0x58020c00

0800bfec <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	4603      	mov	r3, r0
 800bff4:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d108      	bne.n	800c00e <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0); // TODO: see why here it's 0x01 while in the beginning it was 0x00
 800bffc:	2200      	movs	r2, #0
 800bffe:	2101      	movs	r1, #1
 800c000:	2028      	movs	r0, #40	; 0x28
 800c002:	f7f5 fc73 	bl	80018ec <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800c006:	2028      	movs	r0, #40	; 0x28
 800c008:	f7f5 fc9a 	bl	8001940 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 800c00c:	e002      	b.n	800c014 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 800c00e:	2028      	movs	r0, #40	; 0x28
 800c010:	f7f5 fcae 	bl	8001970 <HAL_NVIC_DisableIRQ>
}
 800c014:	bf00      	nop
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	4603      	mov	r3, r0
 800c024:	71fb      	strb	r3, [r7, #7]
    if (select)
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d006      	beq.n	800c03a <spi_select_slave+0x1e>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 800c02c:	2200      	movs	r2, #0
 800c02e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c032:	4807      	ldr	r0, [pc, #28]	; (800c050 <spi_select_slave+0x34>)
 800c034:	f7f8 f840 	bl	80040b8 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 800c038:	e005      	b.n	800c046 <spi_select_slave+0x2a>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800c03a:	2201      	movs	r2, #1
 800c03c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c040:	4803      	ldr	r0, [pc, #12]	; (800c050 <spi_select_slave+0x34>)
 800c042:	f7f8 f839 	bl	80040b8 <HAL_GPIO_WritePin>
}
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	58020400 	.word	0x58020400

0800c054 <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af02      	add	r7, sp, #8
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	4613      	mov	r3, r2
 800c060:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
   if(u16Sz > NM_BUS_DUMMY_BUFF_SIZE)
 800c062:	88fb      	ldrh	r3, [r7, #6]
 800c064:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c068:	d901      	bls.n	800c06e <spi_rw+0x1a>
   {
	   M2M_ERR("%s:size is too big. error (%d)\n",__FUNCTION__,status);
	   return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e03e      	b.n	800c0ec <spi_rw+0x98>
   }
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 800c06e:	2001      	movs	r0, #1
 800c070:	f7ff ffd4 	bl	800c01c <spi_select_slave>


    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10c      	bne.n	800c094 <spi_rw+0x40>
	{
		status = HAL_SPI_TransmitReceive(&hspiWifi,spiDummyBuf,pu8Miso,u16Sz,SPI_TIMEOUT_MSEC);
 800c07a:	88fa      	ldrh	r2, [r7, #6]
 800c07c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	4613      	mov	r3, r2
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	491b      	ldr	r1, [pc, #108]	; (800c0f4 <spi_rw+0xa0>)
 800c088:	481b      	ldr	r0, [pc, #108]	; (800c0f8 <spi_rw+0xa4>)
 800c08a:	f7fc fbbf 	bl	800880c <HAL_SPI_TransmitReceive>
 800c08e:	4603      	mov	r3, r0
 800c090:	75fb      	strb	r3, [r7, #23]
 800c092:	e021      	b.n	800c0d8 <spi_rw+0x84>
    }
    else if(pu8Miso == NULL)
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d112      	bne.n	800c0c0 <spi_rw+0x6c>
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,spiDummyBuf,u16Sz,SPI_TIMEOUT_MSEC);
 800c09a:	88fa      	ldrh	r2, [r7, #6]
 800c09c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	4a13      	ldr	r2, [pc, #76]	; (800c0f4 <spi_rw+0xa0>)
 800c0a6:	68f9      	ldr	r1, [r7, #12]
 800c0a8:	4813      	ldr	r0, [pc, #76]	; (800c0f8 <spi_rw+0xa4>)
 800c0aa:	f7fc fbaf 	bl	800880c <HAL_SPI_TransmitReceive>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 800c0b2:	88fb      	ldrh	r3, [r7, #6]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	480e      	ldr	r0, [pc, #56]	; (800c0f4 <spi_rw+0xa0>)
 800c0ba:	f002 fdae 	bl	800ec1a <memset>
 800c0be:	e00b      	b.n	800c0d8 <spi_rw+0x84>
    }
    else
    {
        status = HAL_SPI_TransmitReceive(&hspiWifi,pu8Mosi,pu8Miso,u16Sz,SPI_TIMEOUT_MSEC);
 800c0c0:	88fa      	ldrh	r2, [r7, #6]
 800c0c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	68f9      	ldr	r1, [r7, #12]
 800c0ce:	480a      	ldr	r0, [pc, #40]	; (800c0f8 <spi_rw+0xa4>)
 800c0d0:	f7fc fb9c 	bl	800880c <HAL_SPI_TransmitReceive>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	75fb      	strb	r3, [r7, #23]
    }

    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 800c0d8:	7dfb      	ldrb	r3, [r7, #23]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <spi_rw+0x90>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
        return status;
 800c0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0e2:	e003      	b.n	800c0ec <spi_rw+0x98>
    }

  	spi_select_slave(false);
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	f7ff ff99 	bl	800c01c <spi_select_slave>

	return M2M_SUCCESS;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	2400009c 	.word	0x2400009c
 800c0f8:	240003dc 	.word	0x240003dc

0800c0fc <nm_bus_wifi_spi_init>:
#endif
#endif //CONF_WINC_USE_SPI

void nm_bus_wifi_spi_init(SPI_HandleTypeDef *hspi)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* Peripheral clock enable */
    SPI_WIFI_CLK_ENABLE();
 800c104:	4b1d      	ldr	r3, [pc, #116]	; (800c17c <nm_bus_wifi_spi_init+0x80>)
 800c106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c10a:	4a1c      	ldr	r2, [pc, #112]	; (800c17c <nm_bus_wifi_spi_init+0x80>)
 800c10c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c110:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c114:	4b19      	ldr	r3, [pc, #100]	; (800c17c <nm_bus_wifi_spi_init+0x80>)
 800c116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c11a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c11e:	60bb      	str	r3, [r7, #8]
 800c120:	68bb      	ldr	r3, [r7, #8]

    /* Configure GPIO pin : PA4 - we are using ST GPIO definitions for winc1500 */
    GPIO_InitStruct.Pin   = SPI_WIFI_CS_PIN;
 800c122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800c128:	2301      	movs	r3, #1
 800c12a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800c12c:	2301      	movs	r3, #1
 800c12e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c130:	2303      	movs	r3, #3
 800c132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_CS_GPIO_PORT, &GPIO_InitStruct);
 800c138:	f107 030c 	add.w	r3, r7, #12
 800c13c:	4619      	mov	r1, r3
 800c13e:	4810      	ldr	r0, [pc, #64]	; (800c180 <nm_bus_wifi_spi_init+0x84>)
 800c140:	f7f7 fd0a 	bl	8003b58 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 800c144:	2201      	movs	r2, #1
 800c146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c14a:	480d      	ldr	r0, [pc, #52]	; (800c180 <nm_bus_wifi_spi_init+0x84>)
 800c14c:	f7f7 ffb4 	bl	80040b8 <HAL_GPIO_WritePin>
    /**SPIx GPIO Configuration
    PB13     ------> SPI_WIFI_SCK
    PB14     ------> SPI_WIFI_MISO
    PB15     ------> SPI_WIFI_MOSI
    */
    GPIO_InitStruct.Pin = SPI_WIFI_SCK_PIN|SPI_WIFI_MISO_PIN|SPI_WIFI_MOSI_PIN;
 800c150:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800c154:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c156:	2302      	movs	r3, #2
 800c158:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c15a:	2302      	movs	r3, #2
 800c15c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c15e:	2303      	movs	r3, #3
 800c160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = SPI2_WIFI_AF;
 800c162:	2305      	movs	r3, #5
 800c164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI_WIFI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800c166:	f107 030c 	add.w	r3, r7, #12
 800c16a:	4619      	mov	r1, r3
 800c16c:	4804      	ldr	r0, [pc, #16]	; (800c180 <nm_bus_wifi_spi_init+0x84>)
 800c16e:	f7f7 fcf3 	bl	8003b58 <HAL_GPIO_Init>

}
 800c172:	bf00      	nop
 800c174:	3720      	adds	r7, #32
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	58024400 	.word	0x58024400
 800c180:	58020400 	.word	0x58020400

0800c184 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73fb      	strb	r3, [r7, #15]

	 /* WiFi SPI init function - called from nm_bus_init() */

	hspiWifi.Instance			   = SPI_WIFI;
 800c190:	4b17      	ldr	r3, [pc, #92]	; (800c1f0 <nm_bus_init+0x6c>)
 800c192:	4a18      	ldr	r2, [pc, #96]	; (800c1f4 <nm_bus_init+0x70>)
 800c194:	601a      	str	r2, [r3, #0]
	hspiWifi.Init.Mode			   = SPI_MODE_MASTER;
 800c196:	4b16      	ldr	r3, [pc, #88]	; (800c1f0 <nm_bus_init+0x6c>)
 800c198:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800c19c:	605a      	str	r2, [r3, #4]
	hspiWifi.Init.Direction 	   = SPI_DIRECTION_2LINES;
 800c19e:	4b14      	ldr	r3, [pc, #80]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	609a      	str	r2, [r3, #8]
	hspiWifi.Init.DataSize		   = SPI_DATASIZE_8BIT;
 800c1a4:	4b12      	ldr	r3, [pc, #72]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1a6:	2207      	movs	r2, #7
 800c1a8:	60da      	str	r2, [r3, #12]
	hspiWifi.Init.CLKPolarity	   = SPI_POLARITY_LOW;
 800c1aa:	4b11      	ldr	r3, [pc, #68]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	611a      	str	r2, [r3, #16]
	hspiWifi.Init.CLKPhase		   = SPI_PHASE_1EDGE;
 800c1b0:	4b0f      	ldr	r3, [pc, #60]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	615a      	str	r2, [r3, #20]
	hspiWifi.Init.NSS			   = SPI_NSS_SOFT;
 800c1b6:	4b0e      	ldr	r3, [pc, #56]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c1bc:	619a      	str	r2, [r3, #24]
	hspiWifi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c1be:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c1c4:	61da      	str	r2, [r3, #28]
	hspiWifi.Init.FirstBit		   = SPI_FIRSTBIT_MSB;
 800c1c6:	4b0a      	ldr	r3, [pc, #40]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	621a      	str	r2, [r3, #32]
	hspiWifi.Init.TIMode		   = SPI_TIMODE_DISABLE;
 800c1cc:	4b08      	ldr	r3, [pc, #32]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	625a      	str	r2, [r3, #36]	; 0x24
	hspiWifi.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800c1d2:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	629a      	str	r2, [r3, #40]	; 0x28
	hspiWifi.Init.CRCPolynomial    = 10;
 800c1d8:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1da:	220a      	movs	r2, #10
 800c1dc:	62da      	str	r2, [r3, #44]	; 0x2c
//	  hspiWifi.Init.CRCLength		 = SPI_CRC_LENGTH_DATASIZE;
//	  hspiWifi.Init.NSSPMode		 = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspiWifi) != HAL_OK)
 800c1de:	4804      	ldr	r0, [pc, #16]	; (800c1f0 <nm_bus_init+0x6c>)
 800c1e0:	f7fc f876 	bl	80082d0 <HAL_SPI_Init>

	// END OF SO: remove


//	HAL_SPI_MspInit(&hspiWifi); // SO: removed since it's called twice
	return result;
 800c1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	240003dc 	.word	0x240003dc
 800c1f4:	40003800 	.word	0x40003800

0800c1f8 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	6039      	str	r1, [r7, #0]
 800c202:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 800c204:	2300      	movs	r3, #0
 800c206:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d10d      	bne.n	800c22a <nm_bus_ioctl+0x32>
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	6818      	ldr	r0, [r3, #0]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	6859      	ldr	r1, [r3, #4]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	891b      	ldrh	r3, [r3, #8]
 800c21e:	461a      	mov	r2, r3
 800c220:	f7ff ff18 	bl	800c054 <spi_rw>
 800c224:	4603      	mov	r3, r0
 800c226:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c228:	e002      	b.n	800c230 <nm_bus_ioctl+0x38>
		default:
			s8Ret = -1;
 800c22a:	23ff      	movs	r3, #255	; 0xff
 800c22c:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("invalide ioclt cmd\n");
			break;
 800c22e:	bf00      	nop
	}

	return s8Ret;
 800c230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 800c23c:	b480      	push	{r7}
 800c23e:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d010      	beq.n	800c280 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	781a      	ldrb	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	701a      	strb	r2, [r3, #0]
		pDst++;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	60fb      	str	r3, [r7, #12]
		pSrc++;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	3301      	adds	r3, #1
 800c270:	60bb      	str	r3, [r7, #8]
	}while(--sz);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3b01      	subs	r3, #1
 800c276:	607b      	str	r3, [r7, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1ef      	bne.n	800c25e <m2m_memcpy+0x12>
 800c27e:	e000      	b.n	800c282 <m2m_memcpy+0x36>
	if(sz == 0) return;
 800c280:	bf00      	nop
}
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	460b      	mov	r3, r1
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00c      	beq.n	800c2ba <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	7afa      	ldrb	r2, [r7, #11]
 800c2a4:	701a      	strb	r2, [r3, #0]
		pBuf++;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
	}while(--sz);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	607b      	str	r3, [r7, #4]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1f3      	bne.n	800c2a0 <m2m_memset+0x14>
 800c2b8:	e000      	b.n	800c2bc <m2m_memset+0x30>
	if(sz == 0) return;
 800c2ba:	bf00      	nop
}
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
 800c2d2:	e005      	b.n	800c2e0 <m2m_strlen+0x1a>
	{
		u16StrLen ++;
 800c2d4:	89fb      	ldrh	r3, [r7, #14]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	81fb      	strh	r3, [r7, #14]
		pcStr++;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	607b      	str	r3, [r7, #4]
	while(*pcStr)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1f5      	bne.n	800c2d4 <m2m_strlen+0xe>
	}
	return u16StrLen;
 800c2e8:	89fb      	ldrh	r3, [r7, #14]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3714      	adds	r7, #20
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
	...

0800c2f8 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

void isr(void)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 800c2fc:	4b05      	ldr	r3, [pc, #20]	; (800c314 <isr+0x1c>)
 800c2fe:	78db      	ldrb	r3, [r3, #3]
 800c300:	b2db      	uxtb	r3, r3
 800c302:	3301      	adds	r3, #1
 800c304:	b2da      	uxtb	r2, r3
 800c306:	4b03      	ldr	r3, [pc, #12]	; (800c314 <isr+0x1c>)
 800c308:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 800c30a:	bf00      	nop
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	24000464 	.word	0x24000464

0800c318 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800c31e:	2300      	movs	r3, #0
 800c320:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 800c322:	4b14      	ldr	r3, [pc, #80]	; (800c374 <hif_set_rx_done+0x5c>)
 800c324:	2200      	movs	r2, #0
 800c326:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 800c328:	2001      	movs	r0, #1
 800c32a:	f7ff fe5f 	bl	800bfec <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 800c32e:	463b      	mov	r3, r7
 800c330:	4619      	mov	r1, r3
 800c332:	f241 0070 	movw	r0, #4208	; 0x1070
 800c336:	f001 fbf8 	bl	800db2a <nm_read_reg_with_ret>
 800c33a:	4603      	mov	r3, r0
 800c33c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800c33e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10f      	bne.n	800c366 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	f043 0302 	orr.w	r3, r3, #2
 800c34c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	4619      	mov	r1, r3
 800c352:	f241 0070 	movw	r0, #4208	; 0x1070
 800c356:	f001 fbf6 	bl	800db46 <nm_write_reg>
 800c35a:	4603      	mov	r3, r0
 800c35c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800c35e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c362:	2b00      	cmp	r3, #0
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 800c364:	e000      	b.n	800c368 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 800c366:	bf00      	nop
	return ret;
 800c368:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	24000464 	.word	0x24000464

0800c378 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	603a      	str	r2, [r7, #0]
 800c382:	71fb      	strb	r3, [r7, #7]
 800c384:	460b      	mov	r3, r1
 800c386:	80bb      	strh	r3, [r7, #4]


}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c39a:	2300      	movs	r3, #0
 800c39c:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800c39e:	4b14      	ldr	r3, [pc, #80]	; (800c3f0 <hif_chip_wake+0x5c>)
 800c3a0:	789b      	ldrb	r3, [r3, #2]
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 800c3a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ac:	e01c      	b.n	800c3e8 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800c3ae:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <hif_chip_wake+0x5c>)
 800c3b0:	785b      	ldrb	r3, [r3, #1]
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10c      	bne.n	800c3d2 <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800c3b8:	4b0d      	ldr	r3, [pc, #52]	; (800c3f0 <hif_chip_wake+0x5c>)
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 800c3c2:	f001 f9f7 	bl	800d7b4 <chip_wake>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c3ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d107      	bne.n	800c3e2 <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 800c3d2:	4b07      	ldr	r3, [pc, #28]	; (800c3f0 <hif_chip_wake+0x5c>)
 800c3d4:	785b      	ldrb	r3, [r3, #1]
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	3301      	adds	r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	4b04      	ldr	r3, [pc, #16]	; (800c3f0 <hif_chip_wake+0x5c>)
 800c3de:	705a      	strb	r2, [r3, #1]
 800c3e0:	e000      	b.n	800c3e4 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 800c3e2:	bf00      	nop
ERR1:
	return ret;
 800c3e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	24000464 	.word	0x24000464

0800c3f4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 800c3f8:	4b08      	ldr	r3, [pc, #32]	; (800c41c <hif_chip_sleep_sc+0x28>)
 800c3fa:	785b      	ldrb	r3, [r3, #1]
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d006      	beq.n	800c410 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 800c402:	4b06      	ldr	r3, [pc, #24]	; (800c41c <hif_chip_sleep_sc+0x28>)
 800c404:	785b      	ldrb	r3, [r3, #1]
 800c406:	b2db      	uxtb	r3, r3
 800c408:	3b01      	subs	r3, #1
 800c40a:	b2da      	uxtb	r2, r3
 800c40c:	4b03      	ldr	r3, [pc, #12]	; (800c41c <hif_chip_sleep_sc+0x28>)
 800c40e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	24000464 	.word	0x24000464

0800c420 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800c426:	2300      	movs	r3, #0
 800c428:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 800c42a:	4b12      	ldr	r3, [pc, #72]	; (800c474 <hif_chip_sleep+0x54>)
 800c42c:	785b      	ldrb	r3, [r3, #1]
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b00      	cmp	r3, #0
 800c432:	d006      	beq.n	800c442 <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 800c434:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <hif_chip_sleep+0x54>)
 800c436:	785b      	ldrb	r3, [r3, #1]
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	3b01      	subs	r3, #1
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <hif_chip_sleep+0x54>)
 800c440:	705a      	strb	r2, [r3, #1]
	}

	if(gstrHifCxt.u8ChipSleep == 0)
 800c442:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <hif_chip_sleep+0x54>)
 800c444:	785b      	ldrb	r3, [r3, #1]
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10c      	bne.n	800c466 <hif_chip_sleep+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800c44c:	4b09      	ldr	r3, [pc, #36]	; (800c474 <hif_chip_sleep+0x54>)
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b00      	cmp	r3, #0
 800c454:	d007      	beq.n	800c466 <hif_chip_sleep+0x46>
		{
			ret = chip_sleep();
 800c456:	f001 f949 	bl	800d6ec <chip_sleep>
 800c45a:	4603      	mov	r3, r0
 800c45c:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c45e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c462:	2b00      	cmp	r3, #0
 800c464:	e000      	b.n	800c468 <hif_chip_sleep+0x48>
		}
		else
		{
		}
	}
ERR1:
 800c466:	bf00      	nop
	return ret;
 800c468:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	24000464 	.word	0x24000464

0800c478 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 800c480:	2228      	movs	r2, #40	; 0x28
 800c482:	2100      	movs	r1, #0
 800c484:	4807      	ldr	r0, [pc, #28]	; (800c4a4 <hif_init+0x2c>)
 800c486:	f7ff ff01 	bl	800c28c <m2m_memset>
	nm_bsp_register_isr(isr);
 800c48a:	4807      	ldr	r0, [pc, #28]	; (800c4a8 <hif_init+0x30>)
 800c48c:	f7ff fd7c 	bl	800bf88 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 800c490:	4906      	ldr	r1, [pc, #24]	; (800c4ac <hif_init+0x34>)
 800c492:	2003      	movs	r0, #3
 800c494:	f000 fc18 	bl	800ccc8 <hif_register_cb>
	return M2M_SUCCESS;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	24000464 	.word	0x24000464
 800c4a8:	0800c2f9 	.word	0x0800c2f9
 800c4ac:	0800c379 	.word	0x0800c379

0800c4b0 <hif_send>:
				Packet buffer size (including the HIF header).
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	603a      	str	r2, [r7, #0]
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	71fb      	strb	r3, [r7, #7]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	71bb      	strb	r3, [r7, #6]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	80bb      	strh	r3, [r7, #4]
    /* temp is 16 bit variable used to read a volatile memory location to
       pass to function/macro, which is not using volatile variable.
       it is done due to IAR warning.
    */
    uint16  temp;
	sint8	ret = M2M_ERR_SEND;
 800c4c6:	23ff      	movs	r3, #255	; 0xff
 800c4c8:	77fb      	strb	r3, [r7, #31]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 800c4ca:	79bb      	ldrb	r3, [r7, #6]
 800c4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 800c4d4:	79fb      	ldrb	r3, [r7, #7]
 800c4d6:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 800c4d8:	2308      	movs	r3, #8
 800c4da:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 800c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d009      	beq.n	800c4f6 <hif_send+0x46>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 800c4e2:	8b7b      	ldrh	r3, [r7, #26]
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800c4e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c4ea:	440b      	add	r3, r1
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	4413      	add	r3, r2
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	837b      	strh	r3, [r7, #26]
 800c4f4:	e005      	b.n	800c502 <hif_send+0x52>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 800c4f6:	8b7b      	ldrh	r3, [r7, #26]
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	88bb      	ldrh	r3, [r7, #4]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	837b      	strh	r3, [r7, #26]
	}
	ret = hif_chip_wake();
 800c502:	f7ff ff47 	bl	800c394 <hif_chip_wake>
 800c506:	4603      	mov	r3, r0
 800c508:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 800c50a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f040 80e9 	bne.w	800c6e6 <hif_send+0x236>
	{
		volatile uint32 reg, dma_addr = 0;
 800c514:	2300      	movs	r3, #0
 800c516:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
        temp = (uint16)strHif.u16Length;
 800c520:	8b7b      	ldrh	r3, [r7, #26]
 800c522:	83bb      	strh	r3, [r7, #28]
		reg |= (uint32)u8Gid;
 800c524:	79fa      	ldrb	r2, [r7, #7]
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	4313      	orrs	r3, r2
 800c52a:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 800c52c:	79bb      	ldrb	r3, [r7, #6]
 800c52e:	021a      	lsls	r2, r3, #8
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	4313      	orrs	r3, r2
 800c534:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)temp<<16);
 800c536:	8bbb      	ldrh	r3, [r7, #28]
 800c538:	041a      	lsls	r2, r3, #16
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	4619      	mov	r1, r3
 800c544:	f241 008c 	movw	r0, #4236	; 0x108c
 800c548:	f001 fafd 	bl	800db46 <nm_write_reg>
 800c54c:	4603      	mov	r3, r0
 800c54e:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800c550:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f040 80da 	bne.w	800c70e <hif_send+0x25e>

		reg = 0UL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f043 0302 	orr.w	r3, r3, #2
 800c564:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	4619      	mov	r1, r3
 800c56a:	f241 0078 	movw	r0, #4216	; 0x1078
 800c56e:	f001 faea 	bl	800db46 <nm_write_reg>
 800c572:	4603      	mov	r3, r0
 800c574:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800c576:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f040 80c9 	bne.w	800c712 <hif_send+0x262>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	613b      	str	r3, [r7, #16]

		for(cnt = 0; cnt < 1000; cnt ++)
 800c584:	2300      	movs	r3, #0
 800c586:	81fb      	strh	r3, [r7, #14]
 800c588:	e03b      	b.n	800c602 <hif_send+0x152>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 800c58a:	f107 0314 	add.w	r3, r7, #20
 800c58e:	4619      	mov	r1, r3
 800c590:	f241 0078 	movw	r0, #4216	; 0x1078
 800c594:	f001 fac9 	bl	800db2a <nm_read_reg_with_ret>
 800c598:	4603      	mov	r3, r0
 800c59a:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 800c59c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d134      	bne.n	800c60e <hif_send+0x15e>
			/*
			 * If it takes too long to get a response, the slow down to
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 800c5a4:	89fb      	ldrh	r3, [r7, #14]
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c5ac:	d310      	bcc.n	800c5d0 <hif_send+0x120>
				if(cnt < 501) {
 800c5ae:	89fb      	ldrh	r3, [r7, #14]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c5b6:	d808      	bhi.n	800c5ca <hif_send+0x11a>
					M2M_INFO("Slowing down...\n");
 800c5b8:	485d      	ldr	r0, [pc, #372]	; (800c730 <hif_send+0x280>)
 800c5ba:	f002 fb37 	bl	800ec2c <iprintf>
 800c5be:	485d      	ldr	r0, [pc, #372]	; (800c734 <hif_send+0x284>)
 800c5c0:	f002 fbbc 	bl	800ed3c <puts>
 800c5c4:	200d      	movs	r0, #13
 800c5c6:	f002 fb49 	bl	800ec5c <putchar>
				}
				nm_bsp_sleep(1);
 800c5ca:	2001      	movs	r0, #1
 800c5cc:	f7ff fcd0 	bl	800bf70 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10e      	bne.n	800c5f8 <hif_send+0x148>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 800c5da:	f107 0310 	add.w	r3, r7, #16
 800c5de:	4619      	mov	r1, r3
 800c5e0:	4855      	ldr	r0, [pc, #340]	; (800c738 <hif_send+0x288>)
 800c5e2:	f001 faa2 	bl	800db2a <nm_read_reg_with_ret>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 800c5ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00f      	beq.n	800c612 <hif_send+0x162>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	613b      	str	r3, [r7, #16]
					goto ERR1;
 800c5f6:	e093      	b.n	800c720 <hif_send+0x270>
		for(cnt = 0; cnt < 1000; cnt ++)
 800c5f8:	89fb      	ldrh	r3, [r7, #14]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	81fb      	strh	r3, [r7, #14]
 800c602:	89fb      	ldrh	r3, [r7, #14]
 800c604:	b29b      	uxth	r3, r3
 800c606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c60a:	d3be      	bcc.n	800c58a <hif_send+0xda>
 800c60c:	e002      	b.n	800c614 <hif_send+0x164>
			if(ret != M2M_SUCCESS) break;
 800c60e:	bf00      	nop
 800c610:	e000      	b.n	800c614 <hif_send+0x164>
				}
				/*in case of success break */
                break;
 800c612:	bf00      	nop
			}
		}
        
		if (dma_addr != 0)
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d055      	beq.n	800c6c6 <hif_send+0x216>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 800c61e:	8b7b      	ldrh	r3, [r7, #26]
 800c620:	b29b      	uxth	r3, r3
 800c622:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	f107 0118 	add.w	r1, r7, #24
 800c62a:	2208      	movs	r2, #8
 800c62c:	4618      	mov	r0, r3
 800c62e:	f001 fb07 	bl	800dc40 <nm_write_block>
 800c632:	4603      	mov	r3, r0
 800c634:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800c636:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d16b      	bne.n	800c716 <hif_send+0x266>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	3308      	adds	r3, #8
 800c642:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00f      	beq.n	800c66a <hif_send+0x1ba>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	88ba      	ldrh	r2, [r7, #4]
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	4618      	mov	r0, r3
 800c652:	f001 faf5 	bl	800dc40 <nm_write_block>
 800c656:	4603      	mov	r3, r0
 800c658:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800c65a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d15b      	bne.n	800c71a <hif_send+0x26a>
				u32CurrAddr += u16CtrlBufSize;
 800c662:	88ba      	ldrh	r2, [r7, #4]
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	4413      	add	r3, r2
 800c668:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d016      	beq.n	800c69e <hif_send+0x1ee>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 800c670:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c672:	88bb      	ldrh	r3, [r7, #4]
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	461a      	mov	r2, r3
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	4413      	add	r3, r2
 800c67c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c684:	4618      	mov	r0, r3
 800c686:	f001 fadb 	bl	800dc40 <nm_write_block>
 800c68a:	4603      	mov	r3, r0
 800c68c:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800c68e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d143      	bne.n	800c71e <hif_send+0x26e>
				u32CurrAddr += u16DataSize;
 800c696:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	4413      	add	r3, r2
 800c69c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	f043 0302 	orr.w	r3, r3, #2
 800c6aa:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f241 006c 	movw	r0, #4204	; 0x106c
 800c6b4:	f001 fa47 	bl	800db46 <nm_write_reg>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800c6bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01d      	beq.n	800c700 <hif_send+0x250>
 800c6c4:	e02c      	b.n	800c720 <hif_send+0x270>
		}
		else
		{
			ret = hif_chip_sleep();
 800c6c6:	f7ff feab 	bl	800c420 <hif_chip_sleep>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	77fb      	strb	r3, [r7, #31]
			M2M_PRINT("Failed to alloc rx size %d\r\n",ret);
 800c6ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4819      	ldr	r0, [pc, #100]	; (800c73c <hif_send+0x28c>)
 800c6d6:	f002 faa9 	bl	800ec2c <iprintf>
 800c6da:	200d      	movs	r0, #13
 800c6dc:	f002 fabe 	bl	800ec5c <putchar>
			ret = M2M_ERR_MEM_ALLOC;
 800c6e0:	23fd      	movs	r3, #253	; 0xfd
 800c6e2:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 800c6e4:	e01e      	b.n	800c724 <hif_send+0x274>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
 800c6e6:	f240 12a3 	movw	r2, #419	; 0x1a3
 800c6ea:	4915      	ldr	r1, [pc, #84]	; (800c740 <hif_send+0x290>)
 800c6ec:	4815      	ldr	r0, [pc, #84]	; (800c744 <hif_send+0x294>)
 800c6ee:	f002 fa9d 	bl	800ec2c <iprintf>
 800c6f2:	4815      	ldr	r0, [pc, #84]	; (800c748 <hif_send+0x298>)
 800c6f4:	f002 fb22 	bl	800ed3c <puts>
 800c6f8:	200d      	movs	r0, #13
 800c6fa:	f002 faaf 	bl	800ec5c <putchar>
		goto ERR2;
 800c6fe:	e011      	b.n	800c724 <hif_send+0x274>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 800c700:	f7ff fe8e 	bl	800c420 <hif_chip_sleep>
 800c704:	4603      	mov	r3, r0
 800c706:	77fb      	strb	r3, [r7, #31]
	return ret;
 800c708:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c70c:	e00c      	b.n	800c728 <hif_send+0x278>
		if(M2M_SUCCESS != ret) goto ERR1;
 800c70e:	bf00      	nop
 800c710:	e006      	b.n	800c720 <hif_send+0x270>
		if(M2M_SUCCESS != ret) goto ERR1;
 800c712:	bf00      	nop
 800c714:	e004      	b.n	800c720 <hif_send+0x270>
			if(M2M_SUCCESS != ret) goto ERR1;
 800c716:	bf00      	nop
 800c718:	e002      	b.n	800c720 <hif_send+0x270>
				if(M2M_SUCCESS != ret) goto ERR1;
 800c71a:	bf00      	nop
 800c71c:	e000      	b.n	800c720 <hif_send+0x270>
				if(M2M_SUCCESS != ret) goto ERR1;
 800c71e:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 800c720:	f7ff fe68 	bl	800c3f4 <hif_chip_sleep_sc>
ERR2:
	/*logical error*/
	return ret;
 800c724:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3720      	adds	r7, #32
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	0800feec 	.word	0x0800feec
 800c734:	0800fef8 	.word	0x0800fef8
 800c738:	00150400 	.word	0x00150400
 800c73c:	0800ff08 	.word	0x0800ff08
 800c740:	080104f8 	.word	0x080104f8
 800c744:	0800ff28 	.word	0x0800ff28
 800c748:	0800ff3c 	.word	0x0800ff3c

0800c74c <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b088      	sub	sp, #32
 800c750:	af02      	add	r7, sp, #8
    uint16 temp;
	sint8 ret = M2M_SUCCESS;
 800c752:	2300      	movs	r3, #0
 800c754:	75fb      	strb	r3, [r7, #23]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 800c756:	f107 030c 	add.w	r3, r7, #12
 800c75a:	4619      	mov	r1, r3
 800c75c:	f241 0070 	movw	r0, #4208	; 0x1070
 800c760:	f001 f9e3 	bl	800db2a <nm_read_reg_with_ret>
 800c764:	4603      	mov	r3, r0
 800c766:	75fb      	strb	r3, [r7, #23]
	if(M2M_SUCCESS == ret)
 800c768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f040 81b8 	bne.w	800cae2 <hif_isr+0x396>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f003 0301 	and.w	r3, r3, #1
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 81a1 	beq.w	800cac0 <hif_isr+0x374>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
 800c77e:	2000      	movs	r0, #0
 800c780:	f7ff fc34 	bl	800bfec <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f023 0301 	bic.w	r3, r3, #1
 800c78a:	60fb      	str	r3, [r7, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4619      	mov	r1, r3
 800c790:	f241 0070 	movw	r0, #4208	; 0x1070
 800c794:	f001 f9d7 	bl	800db46 <nm_write_reg>
 800c798:	4603      	mov	r3, r0
 800c79a:	75fb      	strb	r3, [r7, #23]
			if(ret != M2M_SUCCESS)goto ERR1;
 800c79c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f040 81ab 	bne.w	800cafc <hif_isr+0x3b0>
			gstrHifCxt.u8HifRXDone = 1;
 800c7a6:	4ba3      	ldr	r3, [pc, #652]	; (800ca34 <hif_isr+0x2e8>)
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	089b      	lsrs	r3, r3, #2
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7b6:	82bb      	strh	r3, [r7, #20]
			if (size > 0) {
 800c7b8:	8abb      	ldrh	r3, [r7, #20]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 8171 	beq.w	800caa2 <hif_isr+0x356>
				uint32 address = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	607b      	str	r3, [r7, #4]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 800c7c4:	1d3b      	adds	r3, r7, #4
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	f241 0084 	movw	r0, #4228	; 0x1084
 800c7cc:	f001 f9ad 	bl	800db2a <nm_read_reg_with_ret>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	75fb      	strb	r3, [r7, #23]
				if(M2M_SUCCESS != ret)
 800c7d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00f      	beq.n	800c7fc <hif_isr+0xb0>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
 800c7dc:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c7e0:	4995      	ldr	r1, [pc, #596]	; (800ca38 <hif_isr+0x2ec>)
 800c7e2:	4896      	ldr	r0, [pc, #600]	; (800ca3c <hif_isr+0x2f0>)
 800c7e4:	f002 fa22 	bl	800ec2c <iprintf>
 800c7e8:	4895      	ldr	r0, [pc, #596]	; (800ca40 <hif_isr+0x2f4>)
 800c7ea:	f002 faa7 	bl	800ed3c <puts>
 800c7ee:	200d      	movs	r0, #13
 800c7f0:	f002 fa34 	bl	800ec5c <putchar>
					nm_bsp_interrupt_ctrl(1);
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	f7ff fbf9 	bl	800bfec <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800c7fa:	e180      	b.n	800cafe <hif_isr+0x3b2>
				}
				gstrHifCxt.u32RxAddr = address;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a8d      	ldr	r2, [pc, #564]	; (800ca34 <hif_isr+0x2e8>)
 800c800:	6053      	str	r3, [r2, #4]
				gstrHifCxt.u32RxSize = size;
 800c802:	8abb      	ldrh	r3, [r7, #20]
 800c804:	4a8b      	ldr	r2, [pc, #556]	; (800ca34 <hif_isr+0x2e8>)
 800c806:	6093      	str	r3, [r2, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f107 0108 	add.w	r1, r7, #8
 800c80e:	2204      	movs	r2, #4
 800c810:	4618      	mov	r0, r3
 800c812:	f001 f9b9 	bl	800db88 <nm_read_block>
 800c816:	4603      	mov	r3, r0
 800c818:	75fb      	strb	r3, [r7, #23]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 800c81a:	897b      	ldrh	r3, [r7, #10]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	817b      	strh	r3, [r7, #10]
				if(M2M_SUCCESS != ret)
 800c820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00f      	beq.n	800c848 <hif_isr+0xfc>
				{
					M2M_ERR("(hif) address bus fail\n");
 800c828:	f240 12df 	movw	r2, #479	; 0x1df
 800c82c:	4982      	ldr	r1, [pc, #520]	; (800ca38 <hif_isr+0x2ec>)
 800c82e:	4883      	ldr	r0, [pc, #524]	; (800ca3c <hif_isr+0x2f0>)
 800c830:	f002 f9fc 	bl	800ec2c <iprintf>
 800c834:	4883      	ldr	r0, [pc, #524]	; (800ca44 <hif_isr+0x2f8>)
 800c836:	f002 fa81 	bl	800ed3c <puts>
 800c83a:	200d      	movs	r0, #13
 800c83c:	f002 fa0e 	bl	800ec5c <putchar>
					nm_bsp_interrupt_ctrl(1);
 800c840:	2001      	movs	r0, #1
 800c842:	f7ff fbd3 	bl	800bfec <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800c846:	e15a      	b.n	800cafe <hif_isr+0x3b2>
				}
				if(strHif.u16Length != size)
 800c848:	897b      	ldrh	r3, [r7, #10]
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	8aba      	ldrh	r2, [r7, #20]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d022      	beq.n	800c898 <hif_isr+0x14c>
				{
					if((size - strHif.u16Length) > 4)
 800c852:	8abb      	ldrh	r3, [r7, #20]
 800c854:	897a      	ldrh	r2, [r7, #10]
 800c856:	b292      	uxth	r2, r2
 800c858:	1a9b      	subs	r3, r3, r2
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	dd1c      	ble.n	800c898 <hif_isr+0x14c>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
 800c85e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c862:	4975      	ldr	r1, [pc, #468]	; (800ca38 <hif_isr+0x2ec>)
 800c864:	4875      	ldr	r0, [pc, #468]	; (800ca3c <hif_isr+0x2f0>)
 800c866:	f002 f9e1 	bl	800ec2c <iprintf>
 800c86a:	8ab9      	ldrh	r1, [r7, #20]
 800c86c:	897b      	ldrh	r3, [r7, #10]
 800c86e:	b29b      	uxth	r3, r3
 800c870:	461a      	mov	r2, r3
 800c872:	7a3b      	ldrb	r3, [r7, #8]
 800c874:	b2db      	uxtb	r3, r3
 800c876:	4618      	mov	r0, r3
 800c878:	7a7b      	ldrb	r3, [r7, #9]
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	4603      	mov	r3, r0
 800c880:	4871      	ldr	r0, [pc, #452]	; (800ca48 <hif_isr+0x2fc>)
 800c882:	f002 f9d3 	bl	800ec2c <iprintf>
 800c886:	200d      	movs	r0, #13
 800c888:	f002 f9e8 	bl	800ec5c <putchar>
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
 800c88c:	2001      	movs	r0, #1
 800c88e:	f7ff fbad 	bl	800bfec <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
 800c892:	23fa      	movs	r3, #250	; 0xfa
 800c894:	75fb      	strb	r3, [r7, #23]
						goto ERR1;
 800c896:	e132      	b.n	800cafe <hif_isr+0x3b2>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 800c898:	7a3b      	ldrb	r3, [r7, #8]
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d11d      	bne.n	800c8dc <hif_isr+0x190>
				{
					if(gstrHifCxt.pfWifiCb)
 800c8a0:	4b64      	ldr	r3, [pc, #400]	; (800ca34 <hif_isr+0x2e8>)
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00c      	beq.n	800c8c2 <hif_isr+0x176>
                    {
                        temp = (uint16)strHif.u16Length;
 800c8a8:	897b      	ldrh	r3, [r7, #10]
 800c8aa:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c8ac:	4b61      	ldr	r3, [pc, #388]	; (800ca34 <hif_isr+0x2e8>)
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	7a7a      	ldrb	r2, [r7, #9]
 800c8b2:	b2d0      	uxtb	r0, r2
 800c8b4:	8a7a      	ldrh	r2, [r7, #18]
 800c8b6:	3a08      	subs	r2, #8
 800c8b8:	b291      	uxth	r1, r2
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	3208      	adds	r2, #8
 800c8be:	4798      	blx	r3
 800c8c0:	e0d0      	b.n	800ca64 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("WIFI callback is not registered\n");
 800c8c2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c8c6:	495c      	ldr	r1, [pc, #368]	; (800ca38 <hif_isr+0x2ec>)
 800c8c8:	485c      	ldr	r0, [pc, #368]	; (800ca3c <hif_isr+0x2f0>)
 800c8ca:	f002 f9af 	bl	800ec2c <iprintf>
 800c8ce:	485f      	ldr	r0, [pc, #380]	; (800ca4c <hif_isr+0x300>)
 800c8d0:	f002 fa34 	bl	800ed3c <puts>
 800c8d4:	200d      	movs	r0, #13
 800c8d6:	f002 f9c1 	bl	800ec5c <putchar>
 800c8da:	e0c3      	b.n	800ca64 <hif_isr+0x318>
					}

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 800c8dc:	7a3b      	ldrb	r3, [r7, #8]
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d11d      	bne.n	800c920 <hif_isr+0x1d4>
				{
					if(gstrHifCxt.pfIpCb)
 800c8e4:	4b53      	ldr	r3, [pc, #332]	; (800ca34 <hif_isr+0x2e8>)
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00c      	beq.n	800c906 <hif_isr+0x1ba>
					{
                        temp = (uint16)strHif.u16Length;
 800c8ec:	897b      	ldrh	r3, [r7, #10]
 800c8ee:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c8f0:	4b50      	ldr	r3, [pc, #320]	; (800ca34 <hif_isr+0x2e8>)
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	7a7a      	ldrb	r2, [r7, #9]
 800c8f6:	b2d0      	uxtb	r0, r2
 800c8f8:	8a7a      	ldrh	r2, [r7, #18]
 800c8fa:	3a08      	subs	r2, #8
 800c8fc:	b291      	uxth	r1, r2
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	3208      	adds	r2, #8
 800c902:	4798      	blx	r3
 800c904:	e0ae      	b.n	800ca64 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Scoket callback is not registered\n");
 800c906:	f240 2205 	movw	r2, #517	; 0x205
 800c90a:	494b      	ldr	r1, [pc, #300]	; (800ca38 <hif_isr+0x2ec>)
 800c90c:	484b      	ldr	r0, [pc, #300]	; (800ca3c <hif_isr+0x2f0>)
 800c90e:	f002 f98d 	bl	800ec2c <iprintf>
 800c912:	484f      	ldr	r0, [pc, #316]	; (800ca50 <hif_isr+0x304>)
 800c914:	f002 fa12 	bl	800ed3c <puts>
 800c918:	200d      	movs	r0, #13
 800c91a:	f002 f99f 	bl	800ec5c <putchar>
 800c91e:	e0a1      	b.n	800ca64 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 800c920:	7a3b      	ldrb	r3, [r7, #8]
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b04      	cmp	r3, #4
 800c926:	d11d      	bne.n	800c964 <hif_isr+0x218>
				{
					if(gstrHifCxt.pfOtaCb)
 800c928:	4b42      	ldr	r3, [pc, #264]	; (800ca34 <hif_isr+0x2e8>)
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00c      	beq.n	800c94a <hif_isr+0x1fe>
					{
                            temp = (uint16)strHif.u16Length;
 800c930:	897b      	ldrh	r3, [r7, #10]
 800c932:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c934:	4b3f      	ldr	r3, [pc, #252]	; (800ca34 <hif_isr+0x2e8>)
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	7a7a      	ldrb	r2, [r7, #9]
 800c93a:	b2d0      	uxtb	r0, r2
 800c93c:	8a7a      	ldrh	r2, [r7, #18]
 800c93e:	3a08      	subs	r2, #8
 800c940:	b291      	uxth	r1, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	3208      	adds	r2, #8
 800c946:	4798      	blx	r3
 800c948:	e08c      	b.n	800ca64 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Ota callback is not registered\n");
 800c94a:	f240 2211 	movw	r2, #529	; 0x211
 800c94e:	493a      	ldr	r1, [pc, #232]	; (800ca38 <hif_isr+0x2ec>)
 800c950:	483a      	ldr	r0, [pc, #232]	; (800ca3c <hif_isr+0x2f0>)
 800c952:	f002 f96b 	bl	800ec2c <iprintf>
 800c956:	483f      	ldr	r0, [pc, #252]	; (800ca54 <hif_isr+0x308>)
 800c958:	f002 f9f0 	bl	800ed3c <puts>
 800c95c:	200d      	movs	r0, #13
 800c95e:	f002 f97d 	bl	800ec5c <putchar>
 800c962:	e07f      	b.n	800ca64 <hif_isr+0x318>
                    }
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 800c964:	7a3b      	ldrb	r3, [r7, #8]
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b06      	cmp	r3, #6
 800c96a:	d11d      	bne.n	800c9a8 <hif_isr+0x25c>
				{
					if(gstrHifCxt.pfCryptoCb)
 800c96c:	4b31      	ldr	r3, [pc, #196]	; (800ca34 <hif_isr+0x2e8>)
 800c96e:	6a1b      	ldr	r3, [r3, #32]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00c      	beq.n	800c98e <hif_isr+0x242>
					{
                        temp = (uint16)strHif.u16Length;
 800c974:	897b      	ldrh	r3, [r7, #10]
 800c976:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c978:	4b2e      	ldr	r3, [pc, #184]	; (800ca34 <hif_isr+0x2e8>)
 800c97a:	6a1b      	ldr	r3, [r3, #32]
 800c97c:	7a7a      	ldrb	r2, [r7, #9]
 800c97e:	b2d0      	uxtb	r0, r2
 800c980:	8a7a      	ldrh	r2, [r7, #18]
 800c982:	3a08      	subs	r2, #8
 800c984:	b291      	uxth	r1, r2
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	3208      	adds	r2, #8
 800c98a:	4798      	blx	r3
 800c98c:	e06a      	b.n	800ca64 <hif_isr+0x318>
                    }
					else
					{
						M2M_ERR("Crypto callback is not registered\n");
 800c98e:	f240 221d 	movw	r2, #541	; 0x21d
 800c992:	4929      	ldr	r1, [pc, #164]	; (800ca38 <hif_isr+0x2ec>)
 800c994:	4829      	ldr	r0, [pc, #164]	; (800ca3c <hif_isr+0x2f0>)
 800c996:	f002 f949 	bl	800ec2c <iprintf>
 800c99a:	482f      	ldr	r0, [pc, #188]	; (800ca58 <hif_isr+0x30c>)
 800c99c:	f002 f9ce 	bl	800ed3c <puts>
 800c9a0:	200d      	movs	r0, #13
 800c9a2:	f002 f95b 	bl	800ec5c <putchar>
 800c9a6:	e05d      	b.n	800ca64 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 800c9a8:	7a3b      	ldrb	r3, [r7, #8]
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b07      	cmp	r3, #7
 800c9ae:	d11d      	bne.n	800c9ec <hif_isr+0x2a0>
				{
					if(gstrHifCxt.pfSigmaCb)
 800c9b0:	4b20      	ldr	r3, [pc, #128]	; (800ca34 <hif_isr+0x2e8>)
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00c      	beq.n	800c9d2 <hif_isr+0x286>
					{
                        temp = (uint16)strHif.u16Length;
 800c9b8:	897b      	ldrh	r3, [r7, #10]
 800c9ba:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800c9bc:	4b1d      	ldr	r3, [pc, #116]	; (800ca34 <hif_isr+0x2e8>)
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	7a7a      	ldrb	r2, [r7, #9]
 800c9c2:	b2d0      	uxtb	r0, r2
 800c9c4:	8a7a      	ldrh	r2, [r7, #18]
 800c9c6:	3a08      	subs	r2, #8
 800c9c8:	b291      	uxth	r1, r2
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	3208      	adds	r2, #8
 800c9ce:	4798      	blx	r3
 800c9d0:	e048      	b.n	800ca64 <hif_isr+0x318>
					}
					else
					{
						M2M_ERR("Sigma callback is not registered\n");
 800c9d2:	f240 2229 	movw	r2, #553	; 0x229
 800c9d6:	4918      	ldr	r1, [pc, #96]	; (800ca38 <hif_isr+0x2ec>)
 800c9d8:	4818      	ldr	r0, [pc, #96]	; (800ca3c <hif_isr+0x2f0>)
 800c9da:	f002 f927 	bl	800ec2c <iprintf>
 800c9de:	481f      	ldr	r0, [pc, #124]	; (800ca5c <hif_isr+0x310>)
 800c9e0:	f002 f9ac 	bl	800ed3c <puts>
 800c9e4:	200d      	movs	r0, #13
 800c9e6:	f002 f939 	bl	800ec5c <putchar>
 800c9ea:	e03b      	b.n	800ca64 <hif_isr+0x318>
					}
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 800c9ec:	7a3b      	ldrb	r3, [r7, #8]
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b05      	cmp	r3, #5
 800c9f2:	d110      	bne.n	800ca16 <hif_isr+0x2ca>
				{
				    if(gstrHifCxt.pfSslCb)
 800c9f4:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <hif_isr+0x2e8>)
 800c9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d033      	beq.n	800ca64 <hif_isr+0x318>
					{
					    temp = (uint16)strHif.u16Length;
 800c9fc:	897b      	ldrh	r3, [r7, #10]
 800c9fe:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800ca00:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <hif_isr+0x2e8>)
 800ca02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca04:	7a7a      	ldrb	r2, [r7, #9]
 800ca06:	b2d0      	uxtb	r0, r2
 800ca08:	8a7a      	ldrh	r2, [r7, #18]
 800ca0a:	3a08      	subs	r2, #8
 800ca0c:	b291      	uxth	r1, r2
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	3208      	adds	r2, #8
 800ca12:	4798      	blx	r3
 800ca14:	e026      	b.n	800ca64 <hif_isr+0x318>
					}
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
 800ca16:	f240 2236 	movw	r2, #566	; 0x236
 800ca1a:	4907      	ldr	r1, [pc, #28]	; (800ca38 <hif_isr+0x2ec>)
 800ca1c:	4807      	ldr	r0, [pc, #28]	; (800ca3c <hif_isr+0x2f0>)
 800ca1e:	f002 f905 	bl	800ec2c <iprintf>
 800ca22:	480f      	ldr	r0, [pc, #60]	; (800ca60 <hif_isr+0x314>)
 800ca24:	f002 f98a 	bl	800ed3c <puts>
 800ca28:	200d      	movs	r0, #13
 800ca2a:	f002 f917 	bl	800ec5c <putchar>
					ret = M2M_ERR_BUS_FAIL;
 800ca2e:	23fa      	movs	r3, #250	; 0xfa
 800ca30:	75fb      	strb	r3, [r7, #23]
					goto ERR1;
 800ca32:	e064      	b.n	800cafe <hif_isr+0x3b2>
 800ca34:	24000464 	.word	0x24000464
 800ca38:	08010504 	.word	0x08010504
 800ca3c:	0800ff28 	.word	0x0800ff28
 800ca40:	0800ff58 	.word	0x0800ff58
 800ca44:	0800ff7c 	.word	0x0800ff7c
 800ca48:	0800ff94 	.word	0x0800ff94
 800ca4c:	0800ffd4 	.word	0x0800ffd4
 800ca50:	0800fff4 	.word	0x0800fff4
 800ca54:	08010018 	.word	0x08010018
 800ca58:	08010038 	.word	0x08010038
 800ca5c:	0801005c 	.word	0x0801005c
 800ca60:	08010080 	.word	0x08010080
				}
				if(gstrHifCxt.u8HifRXDone)
 800ca64:	4b29      	ldr	r3, [pc, #164]	; (800cb0c <hif_isr+0x3c0>)
 800ca66:	789b      	ldrb	r3, [r3, #2]
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d047      	beq.n	800cafe <hif_isr+0x3b2>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
 800ca6e:	f44f 720f 	mov.w	r2, #572	; 0x23c
 800ca72:	4927      	ldr	r1, [pc, #156]	; (800cb10 <hif_isr+0x3c4>)
 800ca74:	4827      	ldr	r0, [pc, #156]	; (800cb14 <hif_isr+0x3c8>)
 800ca76:	f002 f8d9 	bl	800ec2c <iprintf>
 800ca7a:	7a3b      	ldrb	r3, [r7, #8]
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	4619      	mov	r1, r3
 800ca80:	7a7b      	ldrb	r3, [r7, #9]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	461a      	mov	r2, r3
 800ca86:	4824      	ldr	r0, [pc, #144]	; (800cb18 <hif_isr+0x3cc>)
 800ca88:	f002 f8d0 	bl	800ec2c <iprintf>
 800ca8c:	200d      	movs	r0, #13
 800ca8e:	f002 f8e5 	bl	800ec5c <putchar>
					ret = hif_set_rx_done();
 800ca92:	f7ff fc41 	bl	800c318 <hif_set_rx_done>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
					if(ret != M2M_SUCCESS) goto ERR1;
 800ca9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	e02d      	b.n	800cafe <hif_isr+0x3b2>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
 800caa2:	f240 2243 	movw	r2, #579	; 0x243
 800caa6:	491a      	ldr	r1, [pc, #104]	; (800cb10 <hif_isr+0x3c4>)
 800caa8:	481a      	ldr	r0, [pc, #104]	; (800cb14 <hif_isr+0x3c8>)
 800caaa:	f002 f8bf 	bl	800ec2c <iprintf>
 800caae:	481b      	ldr	r0, [pc, #108]	; (800cb1c <hif_isr+0x3d0>)
 800cab0:	f002 f944 	bl	800ed3c <puts>
 800cab4:	200d      	movs	r0, #13
 800cab6:	f002 f8d1 	bl	800ec5c <putchar>
				ret = M2M_ERR_RCV;
 800caba:	23fe      	movs	r3, #254	; 0xfe
 800cabc:	75fb      	strb	r3, [r7, #23]
				goto ERR1;
 800cabe:	e01e      	b.n	800cafe <hif_isr+0x3b2>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
 800cac0:	f240 224b 	movw	r2, #587	; 0x24b
 800cac4:	4912      	ldr	r1, [pc, #72]	; (800cb10 <hif_isr+0x3c4>)
 800cac6:	4813      	ldr	r0, [pc, #76]	; (800cb14 <hif_isr+0x3c8>)
 800cac8:	f002 f8b0 	bl	800ec2c <iprintf>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4619      	mov	r1, r3
 800cad0:	4813      	ldr	r0, [pc, #76]	; (800cb20 <hif_isr+0x3d4>)
 800cad2:	f002 f8ab 	bl	800ec2c <iprintf>
 800cad6:	200d      	movs	r0, #13
 800cad8:	f002 f8c0 	bl	800ec5c <putchar>
			ret = M2M_ERR_FAIL;
 800cadc:	23f4      	movs	r3, #244	; 0xf4
 800cade:	75fb      	strb	r3, [r7, #23]
			goto ERR1;
 800cae0:	e00d      	b.n	800cafe <hif_isr+0x3b2>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
 800cae2:	f44f 7215 	mov.w	r2, #596	; 0x254
 800cae6:	490a      	ldr	r1, [pc, #40]	; (800cb10 <hif_isr+0x3c4>)
 800cae8:	480a      	ldr	r0, [pc, #40]	; (800cb14 <hif_isr+0x3c8>)
 800caea:	f002 f89f 	bl	800ec2c <iprintf>
 800caee:	480d      	ldr	r0, [pc, #52]	; (800cb24 <hif_isr+0x3d8>)
 800caf0:	f002 f924 	bl	800ed3c <puts>
 800caf4:	200d      	movs	r0, #13
 800caf6:	f002 f8b1 	bl	800ec5c <putchar>
		goto ERR1;
 800cafa:	e000      	b.n	800cafe <hif_isr+0x3b2>
			if(ret != M2M_SUCCESS)goto ERR1;
 800cafc:	bf00      	nop
	}

ERR1:
	return ret;
 800cafe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3718      	adds	r7, #24
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	24000464 	.word	0x24000464
 800cb10:	08010504 	.word	0x08010504
 800cb14:	0800ff28 	.word	0x0800ff28
 800cb18:	08010098 	.word	0x08010098
 800cb1c:	080100c4 	.word	0x080100c4
 800cb20:	080100d8 	.word	0x080100d8
 800cb24:	080100f4 	.word	0x080100f4

0800cb28 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	71fb      	strb	r3, [r7, #7]
	while (gstrHifCxt.u8Interrupt) {
 800cb32:	e01f      	b.n	800cb74 <hif_handle_isr+0x4c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
 800cb34:	4b15      	ldr	r3, [pc, #84]	; (800cb8c <hif_handle_isr+0x64>)
 800cb36:	78db      	ldrb	r3, [r3, #3]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	4b13      	ldr	r3, [pc, #76]	; (800cb8c <hif_handle_isr+0x64>)
 800cb40:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
 800cb42:	f7ff fe03 	bl	800c74c <hif_isr>
 800cb46:	4603      	mov	r3, r0
 800cb48:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 800cb4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d100      	bne.n	800cb54 <hif_handle_isr+0x2c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
 800cb52:	e00f      	b.n	800cb74 <hif_handle_isr+0x4c>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
 800cb54:	f240 2271 	movw	r2, #625	; 0x271
 800cb58:	490d      	ldr	r1, [pc, #52]	; (800cb90 <hif_handle_isr+0x68>)
 800cb5a:	480e      	ldr	r0, [pc, #56]	; (800cb94 <hif_handle_isr+0x6c>)
 800cb5c:	f002 f866 	bl	800ec2c <iprintf>
 800cb60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb64:	4619      	mov	r1, r3
 800cb66:	480c      	ldr	r0, [pc, #48]	; (800cb98 <hif_handle_isr+0x70>)
 800cb68:	f002 f860 	bl	800ec2c <iprintf>
 800cb6c:	200d      	movs	r0, #13
 800cb6e:	f002 f875 	bl	800ec5c <putchar>
			ret = hif_isr();
 800cb72:	e7e6      	b.n	800cb42 <hif_handle_isr+0x1a>
	while (gstrHifCxt.u8Interrupt) {
 800cb74:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <hif_handle_isr+0x64>)
 800cb76:	78db      	ldrb	r3, [r3, #3]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1da      	bne.n	800cb34 <hif_handle_isr+0xc>
			}
		}
	}

	return ret;
 800cb7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	24000464 	.word	0x24000464
 800cb90:	0801050c 	.word	0x0801050c
 800cb94:	0800ff28 	.word	0x0800ff28
 800cb98:	08010118 	.word	0x08010118

0800cb9c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	4611      	mov	r1, r2
 800cba8:	461a      	mov	r2, r3
 800cbaa:	460b      	mov	r3, r1
 800cbac:	80fb      	strh	r3, [r7, #6]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d005      	beq.n	800cbc8 <hif_receive+0x2c>
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d002      	beq.n	800cbc8 <hif_receive+0x2c>
 800cbc2:	88fb      	ldrh	r3, [r7, #6]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d116      	bne.n	800cbf6 <hif_receive+0x5a>
	{
		if(isDone)
 800cbc8:	797b      	ldrb	r3, [r7, #5]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d004      	beq.n	800cbd8 <hif_receive+0x3c>
		{
			/* set RX done */
			ret = hif_set_rx_done();
 800cbce:	f7ff fba3 	bl	800c318 <hif_set_rx_done>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800cbd6:	e065      	b.n	800cca4 <hif_receive+0x108>
			ret = M2M_ERR_FAIL;
 800cbd8:	23f4      	movs	r3, #244	; 0xf4
 800cbda:	75fb      	strb	r3, [r7, #23]
			M2M_ERR(" hif_receive: Invalid argument\n");
 800cbdc:	f240 2292 	movw	r2, #658	; 0x292
 800cbe0:	4933      	ldr	r1, [pc, #204]	; (800ccb0 <hif_receive+0x114>)
 800cbe2:	4834      	ldr	r0, [pc, #208]	; (800ccb4 <hif_receive+0x118>)
 800cbe4:	f002 f822 	bl	800ec2c <iprintf>
 800cbe8:	4833      	ldr	r0, [pc, #204]	; (800ccb8 <hif_receive+0x11c>)
 800cbea:	f002 f8a7 	bl	800ed3c <puts>
 800cbee:	200d      	movs	r0, #13
 800cbf0:	f002 f834 	bl	800ec5c <putchar>
		goto ERR1;
 800cbf4:	e056      	b.n	800cca4 <hif_receive+0x108>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800cbf6:	88fa      	ldrh	r2, [r7, #6]
 800cbf8:	4b30      	ldr	r3, [pc, #192]	; (800ccbc <hif_receive+0x120>)
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d912      	bls.n	800cc26 <hif_receive+0x8a>
	{
		ret = M2M_ERR_FAIL;
 800cc00:	23f4      	movs	r3, #244	; 0xf4
 800cc02:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
 800cc04:	f240 229a 	movw	r2, #666	; 0x29a
 800cc08:	4929      	ldr	r1, [pc, #164]	; (800ccb0 <hif_receive+0x114>)
 800cc0a:	482a      	ldr	r0, [pc, #168]	; (800ccb4 <hif_receive+0x118>)
 800cc0c:	f002 f80e 	bl	800ec2c <iprintf>
 800cc10:	88f9      	ldrh	r1, [r7, #6]
 800cc12:	4b2a      	ldr	r3, [pc, #168]	; (800ccbc <hif_receive+0x120>)
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	461a      	mov	r2, r3
 800cc18:	4829      	ldr	r0, [pc, #164]	; (800ccc0 <hif_receive+0x124>)
 800cc1a:	f002 f807 	bl	800ec2c <iprintf>
 800cc1e:	200d      	movs	r0, #13
 800cc20:	f002 f81c 	bl	800ec5c <putchar>
		goto ERR1;
 800cc24:	e03e      	b.n	800cca4 <hif_receive+0x108>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 800cc26:	4b25      	ldr	r3, [pc, #148]	; (800ccbc <hif_receive+0x120>)
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d309      	bcc.n	800cc44 <hif_receive+0xa8>
 800cc30:	88fa      	ldrh	r2, [r7, #6]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	441a      	add	r2, r3
 800cc36:	4b21      	ldr	r3, [pc, #132]	; (800ccbc <hif_receive+0x120>)
 800cc38:	6859      	ldr	r1, [r3, #4]
 800cc3a:	4b20      	ldr	r3, [pc, #128]	; (800ccbc <hif_receive+0x120>)
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	440b      	add	r3, r1
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d90e      	bls.n	800cc62 <hif_receive+0xc6>
	{
		ret = M2M_ERR_FAIL;
 800cc44:	23f4      	movs	r3, #244	; 0xf4
 800cc46:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
 800cc48:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800cc4c:	4918      	ldr	r1, [pc, #96]	; (800ccb0 <hif_receive+0x114>)
 800cc4e:	4819      	ldr	r0, [pc, #100]	; (800ccb4 <hif_receive+0x118>)
 800cc50:	f001 ffec 	bl	800ec2c <iprintf>
 800cc54:	481b      	ldr	r0, [pc, #108]	; (800ccc4 <hif_receive+0x128>)
 800cc56:	f002 f871 	bl	800ed3c <puts>
 800cc5a:	200d      	movs	r0, #13
 800cc5c:	f001 fffe 	bl	800ec5c <putchar>
		goto ERR1;
 800cc60:	e020      	b.n	800cca4 <hif_receive+0x108>
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 800cc62:	88fb      	ldrh	r3, [r7, #6]
 800cc64:	461a      	mov	r2, r3
 800cc66:	68b9      	ldr	r1, [r7, #8]
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f000 ff8d 	bl	800db88 <nm_read_block>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 800cc72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d111      	bne.n	800cc9e <hif_receive+0x102>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 800cc7a:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <hif_receive+0x120>)
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <hif_receive+0x120>)
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	441a      	add	r2, r3
 800cc84:	88f9      	ldrh	r1, [r7, #6]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	440b      	add	r3, r1
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d002      	beq.n	800cc94 <hif_receive+0xf8>
 800cc8e:	797b      	ldrb	r3, [r7, #5]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d006      	beq.n	800cca2 <hif_receive+0x106>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 800cc94:	f7ff fb40 	bl	800c318 <hif_set_rx_done>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	75fb      	strb	r3, [r7, #23]
 800cc9c:	e002      	b.n	800cca4 <hif_receive+0x108>
	if(ret != M2M_SUCCESS)goto ERR1;
 800cc9e:	bf00      	nop
 800cca0:	e000      	b.n	800cca4 <hif_receive+0x108>
	}

ERR1:
 800cca2:	bf00      	nop
	return ret;
 800cca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3718      	adds	r7, #24
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	0801051c 	.word	0x0801051c
 800ccb4:	0800ff28 	.word	0x0800ff28
 800ccb8:	08010148 	.word	0x08010148
 800ccbc:	24000464 	.word	0x24000464
 800ccc0:	08010168 	.word	0x08010168
 800ccc4:	080101b0 	.word	0x080101b0

0800ccc8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	6039      	str	r1, [r7, #0]
 800ccd2:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 800ccd8:	79fb      	ldrb	r3, [r7, #7]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	2b06      	cmp	r3, #6
 800ccde:	d82d      	bhi.n	800cd3c <hif_register_cb+0x74>
 800cce0:	a201      	add	r2, pc, #4	; (adr r2, 800cce8 <hif_register_cb+0x20>)
 800cce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce6:	bf00      	nop
 800cce8:	0800cd0d 	.word	0x0800cd0d
 800ccec:	0800cd05 	.word	0x0800cd05
 800ccf0:	0800cd1d 	.word	0x0800cd1d
 800ccf4:	0800cd15 	.word	0x0800cd15
 800ccf8:	0800cd35 	.word	0x0800cd35
 800ccfc:	0800cd25 	.word	0x0800cd25
 800cd00:	0800cd2d 	.word	0x0800cd2d
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 800cd04:	4a19      	ldr	r2, [pc, #100]	; (800cd6c <hif_register_cb+0xa4>)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	6113      	str	r3, [r2, #16]
			break;
 800cd0a:	e028      	b.n	800cd5e <hif_register_cb+0x96>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 800cd0c:	4a17      	ldr	r2, [pc, #92]	; (800cd6c <hif_register_cb+0xa4>)
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	60d3      	str	r3, [r2, #12]
			break;
 800cd12:	e024      	b.n	800cd5e <hif_register_cb+0x96>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 800cd14:	4a15      	ldr	r2, [pc, #84]	; (800cd6c <hif_register_cb+0xa4>)
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	6153      	str	r3, [r2, #20]
			break;
 800cd1a:	e020      	b.n	800cd5e <hif_register_cb+0x96>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 800cd1c:	4a13      	ldr	r2, [pc, #76]	; (800cd6c <hif_register_cb+0xa4>)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	61d3      	str	r3, [r2, #28]
			break;
 800cd22:	e01c      	b.n	800cd5e <hif_register_cb+0x96>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 800cd24:	4a11      	ldr	r2, [pc, #68]	; (800cd6c <hif_register_cb+0xa4>)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	6213      	str	r3, [r2, #32]
			break;
 800cd2a:	e018      	b.n	800cd5e <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 800cd2c:	4a0f      	ldr	r2, [pc, #60]	; (800cd6c <hif_register_cb+0xa4>)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	6193      	str	r3, [r2, #24]
			break;
 800cd32:	e014      	b.n	800cd5e <hif_register_cb+0x96>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 800cd34:	4a0d      	ldr	r2, [pc, #52]	; (800cd6c <hif_register_cb+0xa4>)
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 800cd3a:	e010      	b.n	800cd5e <hif_register_cb+0x96>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
 800cd3c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800cd40:	490b      	ldr	r1, [pc, #44]	; (800cd70 <hif_register_cb+0xa8>)
 800cd42:	480c      	ldr	r0, [pc, #48]	; (800cd74 <hif_register_cb+0xac>)
 800cd44:	f001 ff72 	bl	800ec2c <iprintf>
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	480a      	ldr	r0, [pc, #40]	; (800cd78 <hif_register_cb+0xb0>)
 800cd4e:	f001 ff6d 	bl	800ec2c <iprintf>
 800cd52:	200d      	movs	r0, #13
 800cd54:	f001 ff82 	bl	800ec5c <putchar>
			ret = M2M_ERR_FAIL;
 800cd58:	23f4      	movs	r3, #244	; 0xf4
 800cd5a:	73fb      	strb	r3, [r7, #15]
			break;
 800cd5c:	bf00      	nop
	}
	return ret;
 800cd5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	24000464 	.word	0x24000464
 800cd70:	08010528 	.word	0x08010528
 800cd74:	0800ff28 	.word	0x0800ff28
 800cd78:	080101f4 	.word	0x080101f4

0800cd7c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b0aa      	sub	sp, #168	; 0xa8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	603a      	str	r2, [r7, #0]
 800cd86:	71fb      	strb	r3, [r7, #7]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 800cd8c:	79fb      	ldrb	r3, [r7, #7]
 800cd8e:	2b2c      	cmp	r3, #44	; 0x2c
 800cd90:	d117      	bne.n	800cdc2 <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800cd92:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800cd96:	2300      	movs	r3, #0
 800cd98:	2204      	movs	r2, #4
 800cd9a:	6838      	ldr	r0, [r7, #0]
 800cd9c:	f7ff fefe 	bl	800cb9c <hif_receive>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f040 8162 	bne.w	800d06c <m2m_wifi_cb+0x2f0>
		{
			if (gpfAppWifiCb)
 800cda8:	4bb2      	ldr	r3, [pc, #712]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 815d 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 800cdb2:	4bb0      	ldr	r3, [pc, #704]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800cdba:	4611      	mov	r1, r2
 800cdbc:	202c      	movs	r0, #44	; 0x2c
 800cdbe:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
 800cdc0:	e154      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 800cdc2:	79fb      	ldrb	r3, [r7, #7]
 800cdc4:	2b1b      	cmp	r3, #27
 800cdc6:	d117      	bne.n	800cdf8 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800cdc8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800cdcc:	2300      	movs	r3, #0
 800cdce:	2208      	movs	r2, #8
 800cdd0:	6838      	ldr	r0, [r7, #0]
 800cdd2:	f7ff fee3 	bl	800cb9c <hif_receive>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f040 8147 	bne.w	800d06c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800cdde:	4ba5      	ldr	r3, [pc, #660]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 8142 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 800cde8:	4ba2      	ldr	r3, [pc, #648]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	201b      	movs	r0, #27
 800cdf4:	4798      	blx	r3
}
 800cdf6:	e139      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 800cdf8:	79fb      	ldrb	r3, [r7, #7]
 800cdfa:	2b06      	cmp	r3, #6
 800cdfc:	d117      	bne.n	800ce2e <m2m_wifi_cb+0xb2>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800cdfe:	f107 0108 	add.w	r1, r7, #8
 800ce02:	2301      	movs	r3, #1
 800ce04:	2230      	movs	r2, #48	; 0x30
 800ce06:	6838      	ldr	r0, [r7, #0]
 800ce08:	f7ff fec8 	bl	800cb9c <hif_receive>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f040 812c 	bne.w	800d06c <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800ce14:	4b97      	ldr	r3, [pc, #604]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f000 8127 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 800ce1e:	4b95      	ldr	r3, [pc, #596]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f107 0208 	add.w	r2, r7, #8
 800ce26:	4611      	mov	r1, r2
 800ce28:	2006      	movs	r0, #6
 800ce2a:	4798      	blx	r3
}
 800ce2c:	e11e      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 800ce2e:	79fb      	ldrb	r3, [r7, #7]
 800ce30:	2b0e      	cmp	r3, #14
 800ce32:	f000 811b 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	2b32      	cmp	r3, #50	; 0x32
 800ce3a:	d117      	bne.n	800ce6c <m2m_wifi_cb+0xf0>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800ce3c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ce40:	2300      	movs	r3, #0
 800ce42:	2214      	movs	r2, #20
 800ce44:	6838      	ldr	r0, [r7, #0]
 800ce46:	f7ff fea9 	bl	800cb9c <hif_receive>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f040 810d 	bne.w	800d06c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800ce52:	4b88      	ldr	r3, [pc, #544]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 8108 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 800ce5c:	4b85      	ldr	r3, [pc, #532]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ce64:	4611      	mov	r1, r2
 800ce66:	2032      	movs	r0, #50	; 0x32
 800ce68:	4798      	blx	r3
}
 800ce6a:	e0ff      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 800ce6c:	79fb      	ldrb	r3, [r7, #7]
 800ce6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ce70:	d11e      	bne.n	800ceb0 <m2m_wifi_cb+0x134>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
 800ce72:	f107 0308 	add.w	r3, r7, #8
 800ce76:	2264      	movs	r2, #100	; 0x64
 800ce78:	2100      	movs	r1, #0
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff fa06 	bl	800c28c <m2m_memset>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 800ce80:	f107 0108 	add.w	r1, r7, #8
 800ce84:	2300      	movs	r3, #0
 800ce86:	2264      	movs	r2, #100	; 0x64
 800ce88:	6838      	ldr	r0, [r7, #0]
 800ce8a:	f7ff fe87 	bl	800cb9c <hif_receive>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f040 80eb 	bne.w	800d06c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800ce96:	4b77      	ldr	r3, [pc, #476]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 80e6 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 800cea0:	4b74      	ldr	r3, [pc, #464]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f107 0208 	add.w	r2, r7, #8
 800cea8:	4611      	mov	r1, r2
 800ceaa:	202f      	movs	r0, #47	; 0x2f
 800ceac:	4798      	blx	r3
}
 800ceae:	e0dd      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b34      	cmp	r3, #52	; 0x34
 800ceb4:	d115      	bne.n	800cee2 <m2m_wifi_cb+0x166>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 800ceb6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800ceba:	2300      	movs	r3, #0
 800cebc:	2204      	movs	r2, #4
 800cebe:	6838      	ldr	r0, [r7, #0]
 800cec0:	f7ff fe6c 	bl	800cb9c <hif_receive>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f040 80d0 	bne.w	800d06c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800cecc:	4b69      	ldr	r3, [pc, #420]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f000 80cb 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 800ced6:	4b67      	ldr	r3, [pc, #412]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2100      	movs	r1, #0
 800cedc:	2034      	movs	r0, #52	; 0x34
 800cede:	4798      	blx	r3
}
 800cee0:	e0c4      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	2b11      	cmp	r3, #17
 800cee6:	d11e      	bne.n	800cf26 <m2m_wifi_cb+0x1aa>
		gu8scanInProgress = 0;
 800cee8:	4b63      	ldr	r3, [pc, #396]	; (800d078 <m2m_wifi_cb+0x2fc>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 800ceee:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800cef2:	2300      	movs	r3, #0
 800cef4:	2204      	movs	r2, #4
 800cef6:	6838      	ldr	r0, [r7, #0]
 800cef8:	f7ff fe50 	bl	800cb9c <hif_receive>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f040 80b4 	bne.w	800d06c <m2m_wifi_cb+0x2f0>
			gu8ChNum = strState.u8NumofCh;
 800cf04:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800cf08:	4b5c      	ldr	r3, [pc, #368]	; (800d07c <m2m_wifi_cb+0x300>)
 800cf0a:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
 800cf0c:	4b59      	ldr	r3, [pc, #356]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 80ab 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800cf16:	4b57      	ldr	r3, [pc, #348]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800cf1e:	4611      	mov	r1, r2
 800cf20:	2011      	movs	r0, #17
 800cf22:	4798      	blx	r3
}
 800cf24:	e0a2      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	2b13      	cmp	r3, #19
 800cf2a:	d117      	bne.n	800cf5c <m2m_wifi_cb+0x1e0>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 800cf2c:	f107 0108 	add.w	r1, r7, #8
 800cf30:	2300      	movs	r3, #0
 800cf32:	222c      	movs	r2, #44	; 0x2c
 800cf34:	6838      	ldr	r0, [r7, #0]
 800cf36:	f7ff fe31 	bl	800cb9c <hif_receive>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f040 8095 	bne.w	800d06c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800cf42:	4b4c      	ldr	r3, [pc, #304]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 8090 	beq.w	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 800cf4c:	4b49      	ldr	r3, [pc, #292]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f107 0208 	add.w	r2, r7, #8
 800cf54:	4611      	mov	r1, r2
 800cf56:	2013      	movs	r0, #19
 800cf58:	4798      	blx	r3
}
 800cf5a:	e087      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 800cf5c:	79fb      	ldrb	r3, [r7, #7]
 800cf5e:	2b04      	cmp	r3, #4
 800cf60:	d115      	bne.n	800cf8e <m2m_wifi_cb+0x212>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800cf62:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800cf66:	2300      	movs	r3, #0
 800cf68:	2204      	movs	r2, #4
 800cf6a:	6838      	ldr	r0, [r7, #0]
 800cf6c:	f7ff fe16 	bl	800cb9c <hif_receive>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d17a      	bne.n	800d06c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800cf76:	4b3f      	ldr	r3, [pc, #252]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d076      	beq.n	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 800cf7e:	4b3d      	ldr	r3, [pc, #244]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800cf86:	4611      	mov	r1, r2
 800cf88:	2004      	movs	r0, #4
 800cf8a:	4798      	blx	r3
}
 800cf8c:	e06e      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	2b65      	cmp	r3, #101	; 0x65
 800cf92:	d115      	bne.n	800cfc0 <m2m_wifi_cb+0x244>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800cf94:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800cf98:	2300      	movs	r3, #0
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	6838      	ldr	r0, [r7, #0]
 800cf9e:	f7ff fdfd 	bl	800cb9c <hif_receive>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d161      	bne.n	800d06c <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800cfa8:	4b32      	ldr	r3, [pc, #200]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d05d      	beq.n	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 800cfb0:	4b30      	ldr	r3, [pc, #192]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800cfb8:	4611      	mov	r1, r2
 800cfba:	2065      	movs	r0, #101	; 0x65
 800cfbc:	4798      	blx	r3
}
 800cfbe:	e055      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 800cfc0:	79fb      	ldrb	r3, [r7, #7]
 800cfc2:	2b09      	cmp	r3, #9
 800cfc4:	d115      	bne.n	800cff2 <m2m_wifi_cb+0x276>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 800cfc6:	f107 0108 	add.w	r1, r7, #8
 800cfca:	2301      	movs	r3, #1
 800cfcc:	2264      	movs	r2, #100	; 0x64
 800cfce:	6838      	ldr	r0, [r7, #0]
 800cfd0:	f7ff fde4 	bl	800cb9c <hif_receive>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d148      	bne.n	800d06c <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800cfda:	4b26      	ldr	r3, [pc, #152]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d044      	beq.n	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 800cfe2:	4b24      	ldr	r3, [pc, #144]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f107 0208 	add.w	r2, r7, #8
 800cfea:	4611      	mov	r1, r2
 800cfec:	2009      	movs	r0, #9
 800cfee:	4798      	blx	r3
}
 800cff0:	e03c      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800cff2:	79fb      	ldrb	r3, [r7, #7]
 800cff4:	2b2a      	cmp	r3, #42	; 0x2a
 800cff6:	d115      	bne.n	800d024 <m2m_wifi_cb+0x2a8>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 800cff8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800cffc:	2301      	movs	r3, #1
 800cffe:	2204      	movs	r2, #4
 800d000:	6838      	ldr	r0, [r7, #0]
 800d002:	f7ff fdcb 	bl	800cb9c <hif_receive>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d12f      	bne.n	800d06c <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800d00c:	4b19      	ldr	r3, [pc, #100]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d02b      	beq.n	800d06c <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 800d014:	4b17      	ldr	r3, [pc, #92]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800d01c:	4611      	mov	r1, r2
 800d01e:	202a      	movs	r0, #42	; 0x2a
 800d020:	4798      	blx	r3
}
 800d022:	e023      	b.n	800d06c <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	2b20      	cmp	r3, #32
 800d028:	d120      	bne.n	800d06c <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 800d02a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800d02e:	2300      	movs	r3, #0
 800d030:	2208      	movs	r2, #8
 800d032:	6838      	ldr	r0, [r7, #0]
 800d034:	f7ff fdb2 	bl	800cb9c <hif_receive>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d116      	bne.n	800d06c <m2m_wifi_cb+0x2f0>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	f103 0008 	add.w	r0, r3, #8
 800d044:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d046:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800d04a:	2301      	movs	r3, #1
 800d04c:	f7ff fda6 	bl	800cb9c <hif_receive>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <m2m_wifi_cb+0x2f0>
				if(gpfAppWifiCb)
 800d056:	4b07      	ldr	r3, [pc, #28]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d006      	beq.n	800d06c <m2m_wifi_cb+0x2f0>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 800d05e:	4b05      	ldr	r3, [pc, #20]	; (800d074 <m2m_wifi_cb+0x2f8>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d066:	4611      	mov	r1, r2
 800d068:	2020      	movs	r0, #32
 800d06a:	4798      	blx	r3
}
 800d06c:	bf00      	nop
 800d06e:	37a8      	adds	r7, #168	; 0xa8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	240001cc 	.word	0x240001cc
 800d078:	240001c9 	.word	0x240001c9
 800d07c:	240001c8 	.word	0x240001c8

0800d080 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_IND_CRL | (uint8)M2M_REQ_DATA_PKT), NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b090      	sub	sp, #64	; 0x40
 800d084:	af02      	add	r7, sp, #8
 800d086:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
 800d088:	2300      	movs	r3, #0
 800d08a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 800d08e:	2301      	movs	r3, #1
 800d090:	72fb      	strb	r3, [r7, #11]

	if(param == NULL) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d103      	bne.n	800d0a0 <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
 800d098:	23f4      	movs	r3, #244	; 0xf4
 800d09a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		goto _EXIT0;
 800d09e:	e059      	b.n	800d154 <m2m_wifi_init+0xd4>
	}

	gpfAppWifiCb = param->pfAppWifiCb;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a2e      	ldr	r2, [pc, #184]	; (800d160 <m2m_wifi_init+0xe0>)
 800d0a6:	6013      	str	r3, [r2, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
 800d0a8:	4b2e      	ldr	r3, [pc, #184]	; (800d164 <m2m_wifi_init+0xe4>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
 800d0ae:	f107 030b 	add.w	r3, r7, #11
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 feae 	bl	800de14 <nm_drv_init>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800d0be:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d145      	bne.n	800d152 <m2m_wifi_init+0xd2>
	/* Initialize host interface module */
	ret = hif_init(NULL);
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	f7ff f9d6 	bl	800c478 <hif_init>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800d0d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d136      	bne.n	800d148 <m2m_wifi_init+0xc8>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
 800d0da:	4923      	ldr	r1, [pc, #140]	; (800d168 <m2m_wifi_init+0xe8>)
 800d0dc:	2001      	movs	r0, #1
 800d0de:	f7ff fdf3 	bl	800ccc8 <hif_register_cb>

	ret = nm_get_firmware_full_info(&strtmp);
 800d0e2:	f107 030c 	add.w	r3, r7, #12
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 fdf4 	bl	800dcd4 <nm_get_firmware_full_info>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	printf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 800d0f2:	7c3b      	ldrb	r3, [r7, #16]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	7c7b      	ldrb	r3, [r7, #17]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	7cbb      	ldrb	r3, [r7, #18]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	4603      	mov	r3, r0
 800d104:	4819      	ldr	r0, [pc, #100]	; (800d16c <m2m_wifi_init+0xec>)
 800d106:	f001 fd91 	bl	800ec2c <iprintf>
	printf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 800d10a:	f107 030c 	add.w	r3, r7, #12
 800d10e:	f103 0216 	add.w	r2, r3, #22
 800d112:	f107 030c 	add.w	r3, r7, #12
 800d116:	330a      	adds	r3, #10
 800d118:	4619      	mov	r1, r3
 800d11a:	4815      	ldr	r0, [pc, #84]	; (800d170 <m2m_wifi_init+0xf0>)
 800d11c:	f001 fd86 	bl	800ec2c <iprintf>
	printf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 800d120:	7cfb      	ldrb	r3, [r7, #19]
 800d122:	4619      	mov	r1, r3
 800d124:	7d3b      	ldrb	r3, [r7, #20]
 800d126:	461a      	mov	r2, r3
 800d128:	7d7b      	ldrb	r3, [r7, #21]
 800d12a:	4812      	ldr	r0, [pc, #72]	; (800d174 <m2m_wifi_init+0xf4>)
 800d12c:	f001 fd7e 	bl	800ec2c <iprintf>
	printf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800d130:	2304      	movs	r3, #4
 800d132:	2205      	movs	r2, #5
 800d134:	2113      	movs	r1, #19
 800d136:	4810      	ldr	r0, [pc, #64]	; (800d178 <m2m_wifi_init+0xf8>)
 800d138:	f001 fd78 	bl	800ec2c <iprintf>
	printf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 800d13c:	4a0f      	ldr	r2, [pc, #60]	; (800d17c <m2m_wifi_init+0xfc>)
 800d13e:	4910      	ldr	r1, [pc, #64]	; (800d180 <m2m_wifi_init+0x100>)
 800d140:	4810      	ldr	r0, [pc, #64]	; (800d184 <m2m_wifi_init+0x104>)
 800d142:	f001 fd73 	bl	800ec2c <iprintf>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmware Version\n");
	}

	goto _EXIT0;
 800d146:	e005      	b.n	800d154 <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 800d148:	bf00      	nop

_EXIT1:
	nm_drv_deinit(NULL);
 800d14a:	2000      	movs	r0, #0
 800d14c:	f000 fec4 	bl	800ded8 <nm_drv_deinit>
 800d150:	e000      	b.n	800d154 <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 800d152:	bf00      	nop
_EXIT0:
	return ret;
 800d154:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3738      	adds	r7, #56	; 0x38
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	240001cc 	.word	0x240001cc
 800d164:	240001c9 	.word	0x240001c9
 800d168:	0800cd7d 	.word	0x0800cd7d
 800d16c:	08010200 	.word	0x08010200
 800d170:	08010228 	.word	0x08010228
 800d174:	08010244 	.word	0x08010244
 800d178:	08010268 	.word	0x08010268
 800d17c:	08010280 	.word	0x08010280
 800d180:	0801028c 	.word	0x0801028c
 800d184:	08010298 	.word	0x08010298

0800d188 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
 800d190:	f7ff fcca 	bl	800cb28 <hif_handle_isr>
 800d194:	4603      	mov	r3, r0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b086      	sub	sp, #24
 800d1a2:	af02      	add	r7, sp, #8
 800d1a4:	60f8      	str	r0, [r7, #12]
 800d1a6:	607b      	str	r3, [r7, #4]
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	72fb      	strb	r3, [r7, #11]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	72bb      	strb	r3, [r7, #10]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
 800d1b0:	7aba      	ldrb	r2, [r7, #10]
 800d1b2:	7af9      	ldrb	r1, [r7, #11]
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9301      	str	r3, [sp, #4]
 800d1b8:	8b3b      	ldrh	r3, [r7, #24]
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f000 f805 	bl	800d1ce <m2m_wifi_connect_sc>
 800d1c4:	4603      	mov	r3, r0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b0aa      	sub	sp, #168	; 0xa8
 800d1d2:	af04      	add	r7, sp, #16
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	607b      	str	r3, [r7, #4]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	72fb      	strb	r3, [r7, #11]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	72bb      	strb	r3, [r7, #10]
	sint8				ret = M2M_SUCCESS;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
 800d1e6:	7abb      	ldrb	r3, [r7, #10]
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d053      	beq.n	800d294 <m2m_wifi_connect_sc+0xc6>
	{
		if(pvAuthInfo == NULL)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d103      	bne.n	800d1fa <m2m_wifi_connect_sc+0x2c>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
 800d1f2:	23f4      	movs	r3, #244	; 0xf4
 800d1f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d1f8:	e113      	b.n	800d422 <m2m_wifi_connect_sc+0x254>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
 800d1fa:	7abb      	ldrb	r3, [r7, #10]
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d149      	bne.n	800d294 <m2m_wifi_connect_sc+0xc6>
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7ff f860 	bl	800c2c6 <m2m_strlen>
 800d206:	4603      	mov	r3, r0
 800d208:	2b40      	cmp	r3, #64	; 0x40
 800d20a:	d143      	bne.n	800d294 <m2m_wifi_connect_sc+0xc6>
		{
			uint8 i = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			uint8* pu8Psk = (uint8*)pvAuthInfo;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			while(i < (M2M_MAX_PSK_LEN-1))
 800d218:	e038      	b.n	800d28c <m2m_wifi_connect_sc+0xbe>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 800d21a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d21e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d222:	4413      	add	r3, r2
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b2f      	cmp	r3, #47	; 0x2f
 800d228:	d927      	bls.n	800d27a <m2m_wifi_connect_sc+0xac>
 800d22a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d22e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d232:	4413      	add	r3, r2
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b39      	cmp	r3, #57	; 0x39
 800d238:	d907      	bls.n	800d24a <m2m_wifi_connect_sc+0x7c>
 800d23a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d23e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d242:	4413      	add	r3, r2
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b40      	cmp	r3, #64	; 0x40
 800d248:	d917      	bls.n	800d27a <m2m_wifi_connect_sc+0xac>
 800d24a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d24e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d252:	4413      	add	r3, r2
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	2b46      	cmp	r3, #70	; 0x46
 800d258:	d907      	bls.n	800d26a <m2m_wifi_connect_sc+0x9c>
 800d25a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d25e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d262:	4413      	add	r3, r2
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	2b60      	cmp	r3, #96	; 0x60
 800d268:	d907      	bls.n	800d27a <m2m_wifi_connect_sc+0xac>
 800d26a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d26e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d272:	4413      	add	r3, r2
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2b66      	cmp	r3, #102	; 0x66
 800d278:	d903      	bls.n	800d282 <m2m_wifi_connect_sc+0xb4>
				{
					M2M_ERR("Invalid Key\n");
					ret = M2M_ERR_FAIL;
 800d27a:	23f4      	movs	r3, #244	; 0xf4
 800d27c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					goto ERR1;
 800d280:	e0cf      	b.n	800d422 <m2m_wifi_connect_sc+0x254>
				}
				i++;
 800d282:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d286:	3301      	adds	r3, #1
 800d288:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			while(i < (M2M_MAX_PSK_LEN-1))
 800d28c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d290:	2b3f      	cmp	r3, #63	; 0x3f
 800d292:	d9c2      	bls.n	800d21a <m2m_wifi_connect_sc+0x4c>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
 800d294:	7afb      	ldrb	r3, [r7, #11]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d002      	beq.n	800d2a0 <m2m_wifi_connect_sc+0xd2>
 800d29a:	7afb      	ldrb	r3, [r7, #11]
 800d29c:	2b20      	cmp	r3, #32
 800d29e:	d903      	bls.n	800d2a8 <m2m_wifi_connect_sc+0xda>
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
 800d2a0:	23f4      	movs	r3, #244	; 0xf4
 800d2a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
 800d2a6:	e0bc      	b.n	800d422 <m2m_wifi_connect_sc+0x254>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
 800d2a8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d003      	beq.n	800d2b8 <m2m_wifi_connect_sc+0xea>
 800d2b0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d2b4:	2b0e      	cmp	r3, #14
 800d2b6:	d907      	bls.n	800d2c8 <m2m_wifi_connect_sc+0xfa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
 800d2b8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d2bc:	2bff      	cmp	r3, #255	; 0xff
 800d2be:	d003      	beq.n	800d2c8 <m2m_wifi_connect_sc+0xfa>
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
 800d2c0:	23f4      	movs	r3, #244	; 0xf4
 800d2c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d2c6:	e0ac      	b.n	800d422 <m2m_wifi_connect_sc+0x254>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
 800d2c8:	7afa      	ldrb	r2, [r7, #11]
 800d2ca:	f107 0314 	add.w	r3, r7, #20
 800d2ce:	3346      	adds	r3, #70	; 0x46
 800d2d0:	68f9      	ldr	r1, [r7, #12]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe ffba 	bl	800c24c <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
 800d2d8:	7afb      	ldrb	r3, [r7, #11]
 800d2da:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800d2de:	4413      	add	r3, r2
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	f803 2c3e 	strb.w	r2, [r3, #-62]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
 800d2e6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d2ea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
 800d2ee:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bf14      	ite	ne
 800d2f6:	2301      	movne	r3, #1
 800d2f8:	2300      	moveq	r3, #0
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
 800d300:	f107 0314 	add.w	r3, r7, #20
 800d304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	pstrAuthInfo->u8SecType		= u8SecType;
 800d308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d30c:	7aba      	ldrb	r2, [r7, #10]
 800d30e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if(u8SecType == M2M_WIFI_SEC_WEP)
 800d312:	7abb      	ldrb	r3, [r7, #10]
 800d314:	2b03      	cmp	r3, #3
 800d316:	d143      	bne.n	800d3a0 <m2m_wifi_connect_sc+0x1d2>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
 800d31e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
 800d326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d334:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
 800d336:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	2b03      	cmp	r3, #3
 800d33e:	d903      	bls.n	800d348 <m2m_wifi_connect_sc+0x17a>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
 800d340:	23f4      	movs	r3, #244	; 0xf4
 800d342:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d346:	e06c      	b.n	800d422 <m2m_wifi_connect_sc+0x254>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
 800d348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d34c:	785b      	ldrb	r3, [r3, #1]
 800d34e:	3b01      	subs	r3, #1
 800d350:	b2da      	uxtb	r2, r3
 800d352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d356:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
 800d358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d35c:	785b      	ldrb	r3, [r3, #1]
 800d35e:	2b0a      	cmp	r3, #10
 800d360:	d008      	beq.n	800d374 <m2m_wifi_connect_sc+0x1a6>
 800d362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d366:	785b      	ldrb	r3, [r3, #1]
 800d368:	2b1a      	cmp	r3, #26
 800d36a:	d003      	beq.n	800d374 <m2m_wifi_connect_sc+0x1a6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
 800d36c:	23f4      	movs	r3, #244	; 0xf4
 800d36e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d372:	e056      	b.n	800d422 <m2m_wifi_connect_sc+0x254>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
 800d374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d378:	1c98      	adds	r0, r3, #2
 800d37a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d37e:	1c99      	adds	r1, r3, #2
 800d380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d384:	785b      	ldrb	r3, [r3, #1]
 800d386:	461a      	mov	r2, r3
 800d388:	f7fe ff60 	bl	800c24c <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
 800d38c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d390:	785b      	ldrb	r3, [r3, #1]
 800d392:	461a      	mov	r2, r3
 800d394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d398:	4413      	add	r3, r2
 800d39a:	2200      	movs	r2, #0
 800d39c:	709a      	strb	r2, [r3, #2]
 800d39e:	e030      	b.n	800d402 <m2m_wifi_connect_sc+0x234>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
 800d3a0:	7abb      	ldrb	r3, [r7, #10]
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d11b      	bne.n	800d3de <m2m_wifi_connect_sc+0x210>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7fe ff8d 	bl	800c2c6 <m2m_strlen>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
 800d3b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d003      	beq.n	800d3c2 <m2m_wifi_connect_sc+0x1f4>
 800d3ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d3be:	2b40      	cmp	r3, #64	; 0x40
 800d3c0:	d903      	bls.n	800d3ca <m2m_wifi_connect_sc+0x1fc>
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
 800d3c2:	23f4      	movs	r3, #244	; 0xf4
 800d3c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 800d3c8:	e02b      	b.n	800d422 <m2m_wifi_connect_sc+0x254>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
 800d3ca:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d3ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	6879      	ldr	r1, [r7, #4]
 800d3d8:	f7fe ff38 	bl	800c24c <m2m_memcpy>
 800d3dc:	e011      	b.n	800d402 <m2m_wifi_connect_sc+0x234>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
 800d3de:	7abb      	ldrb	r3, [r7, #10]
 800d3e0:	2b04      	cmp	r3, #4
 800d3e2:	d107      	bne.n	800d3f4 <m2m_wifi_connect_sc+0x226>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
 800d3e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3e8:	223e      	movs	r2, #62	; 0x3e
 800d3ea:	6879      	ldr	r1, [r7, #4]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe ff2d 	bl	800c24c <m2m_memcpy>
 800d3f2:	e006      	b.n	800d402 <m2m_wifi_connect_sc+0x234>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
 800d3f4:	7abb      	ldrb	r3, [r7, #10]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d003      	beq.n	800d402 <m2m_wifi_connect_sc+0x234>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
 800d3fa:	23f4      	movs	r3, #244	; 0xf4
 800d3fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
 800d400:	e00f      	b.n	800d422 <m2m_wifi_connect_sc+0x254>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
 800d402:	f107 0214 	add.w	r2, r7, #20
 800d406:	2300      	movs	r3, #0
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	2300      	movs	r3, #0
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	2300      	movs	r3, #0
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	236c      	movs	r3, #108	; 0x6c
 800d414:	2128      	movs	r1, #40	; 0x28
 800d416:	2001      	movs	r0, #1
 800d418:	f7ff f84a 	bl	800c4b0 <hif_send>
 800d41c:	4603      	mov	r3, r0
 800d41e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

ERR1:
	return ret;
 800d422:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800d426:	4618      	mov	r0, r3
 800d428:	3798      	adds	r7, #152	; 0x98
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
 800d42e:	b480      	push	{r7}
 800d430:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
	...

0800d440 <m2m_wifi_request_scan>:
	strScanRegion.u16ScanRegion = ScanRegion;
	s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_REGION, (uint8*)&strScanRegion, sizeof(tstrM2MScanRegion),NULL, 0,0);
	return s8Ret;
}
sint8 m2m_wifi_request_scan(uint8 ch)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af04      	add	r7, sp, #16
 800d446:	4603      	mov	r3, r0
 800d448:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = M2M_SUCCESS;
 800d44a:	2300      	movs	r3, #0
 800d44c:	73fb      	strb	r3, [r7, #15]

	if(!gu8scanInProgress)
 800d44e:	4b1a      	ldr	r3, [pc, #104]	; (800d4b8 <m2m_wifi_request_scan+0x78>)
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b00      	cmp	r3, #0
 800d456:	d124      	bne.n	800d4a2 <m2m_wifi_request_scan+0x62>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
 800d458:	79fb      	ldrb	r3, [r7, #7]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d002      	beq.n	800d464 <m2m_wifi_request_scan+0x24>
 800d45e:	79fb      	ldrb	r3, [r7, #7]
 800d460:	2b0e      	cmp	r3, #14
 800d462:	d902      	bls.n	800d46a <m2m_wifi_request_scan+0x2a>
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	2bff      	cmp	r3, #255	; 0xff
 800d468:	d118      	bne.n	800d49c <m2m_wifi_request_scan+0x5c>
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	723b      	strb	r3, [r7, #8]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 800d46e:	f107 0208 	add.w	r2, r7, #8
 800d472:	2300      	movs	r3, #0
 800d474:	9302      	str	r3, [sp, #8]
 800d476:	2300      	movs	r3, #0
 800d478:	9301      	str	r3, [sp, #4]
 800d47a:	2300      	movs	r3, #0
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	2304      	movs	r3, #4
 800d480:	2110      	movs	r1, #16
 800d482:	2001      	movs	r0, #1
 800d484:	f7ff f814 	bl	800c4b0 <hif_send>
 800d488:	4603      	mov	r3, r0
 800d48a:	73fb      	strb	r3, [r7, #15]
			if(s8Ret == M2M_SUCCESS)
 800d48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d109      	bne.n	800d4a8 <m2m_wifi_request_scan+0x68>
			{
				gu8scanInProgress = 1;
 800d494:	4b08      	ldr	r3, [pc, #32]	; (800d4b8 <m2m_wifi_request_scan+0x78>)
 800d496:	2201      	movs	r2, #1
 800d498:	701a      	strb	r2, [r3, #0]
		{
 800d49a:	e005      	b.n	800d4a8 <m2m_wifi_request_scan+0x68>
			}
		}
		else
		{
			s8Ret = M2M_ERR_INVALID_ARG;
 800d49c:	23f1      	movs	r3, #241	; 0xf1
 800d49e:	73fb      	strb	r3, [r7, #15]
 800d4a0:	e003      	b.n	800d4aa <m2m_wifi_request_scan+0x6a>
		}
	}
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
 800d4a2:	23f2      	movs	r3, #242	; 0xf2
 800d4a4:	73fb      	strb	r3, [r7, #15]
 800d4a6:	e000      	b.n	800d4aa <m2m_wifi_request_scan+0x6a>
		{
 800d4a8:	bf00      	nop
	}
	return s8Ret;
 800d4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	240001c9 	.word	0x240001c9

0800d4bc <m2m_wifi_req_scan_result>:
			 which mean if large delay occur between the scan request and the scan result request,
			 the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b088      	sub	sp, #32
 800d4c0:	af04      	add	r7, sp, #16
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	73fb      	strb	r3, [r7, #15]
	tstrM2mReqScanResult strReqScanRlt;
	strReqScanRlt.u8Index = index;
 800d4ca:	79fb      	ldrb	r3, [r7, #7]
 800d4cc:	723b      	strb	r3, [r7, #8]
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 800d4ce:	f107 0208 	add.w	r2, r7, #8
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	9302      	str	r3, [sp, #8]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	9301      	str	r3, [sp, #4]
 800d4da:	2300      	movs	r3, #0
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	2304      	movs	r3, #4
 800d4e0:	2112      	movs	r1, #18
 800d4e2:	2001      	movs	r0, #1
 800d4e4:	f7fe ffe4 	bl	800c4b0 <hif_send>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	73fb      	strb	r3, [r7, #15]
	return ret;
 800d4ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <m2m_wifi_get_num_ap_found>:
@warning     That function need to be called in the wifi_cb in M2M_WIFI_RESP_SCAN_DONE,
			 calling that function in any other place will return undefined/undated numbers.
			 Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	af00      	add	r7, sp, #0
	return gu8ChNum;
 800d4fc:	4b03      	ldr	r3, [pc, #12]	; (800d50c <m2m_wifi_get_num_ap_found+0x14>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	b2db      	uxtb	r3, r3
}
 800d502:	4618      	mov	r0, r3
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	240001c8 	.word	0x240001c8

0800d510 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800d518:	2300      	movs	r3, #0
 800d51a:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d526:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 800d528:	6939      	ldr	r1, [r7, #16]
 800d52a:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 800d52e:	f000 fb0a 	bl	800db46 <nm_write_reg>
		if(val32 != 0) {
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d013      	beq.n	800d560 <chip_apply_conf+0x50>
			uint32 reg = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 800d53c:	f107 030c 	add.w	r3, r7, #12
 800d540:	4619      	mov	r1, r3
 800d542:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 800d546:	f000 faf0 	bl	800db2a <nm_read_reg_with_ret>
 800d54a:	4603      	mov	r3, r0
 800d54c:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 800d54e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1e8      	bne.n	800d528 <chip_apply_conf+0x18>
				if(reg == val32)
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d002      	beq.n	800d564 <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 800d55e:	e7e3      	b.n	800d528 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 800d560:	bf00      	nop
 800d562:	e000      	b.n	800d566 <chip_apply_conf+0x56>
					break;
 800d564:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3718      	adds	r7, #24
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 800d57a:	2300      	movs	r3, #0
 800d57c:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 800d57e:	463b      	mov	r3, r7
 800d580:	4619      	mov	r1, r3
 800d582:	f241 4008 	movw	r0, #5128	; 0x1408
 800d586:	f000 fad0 	bl	800db2a <nm_read_reg_with_ret>
 800d58a:	4603      	mov	r3, r0
 800d58c:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d58e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d12b      	bne.n	800d5ee <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d59c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f241 4008 	movw	r0, #5128	; 0x1408
 800d5a6:	f000 face 	bl	800db46 <nm_write_reg>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d11d      	bne.n	800d5f2 <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 800d5b6:	463b      	mov	r3, r7
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800d5be:	f000 fab4 	bl	800db2a <nm_read_reg_with_ret>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d113      	bne.n	800d5f6 <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5d4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	4619      	mov	r1, r3
 800d5da:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800d5de:	f000 fab2 	bl	800db46 <nm_write_reg>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 800d5e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5ea:	2b00      	cmp	r3, #0
ERR1:
 800d5ec:	e004      	b.n	800d5f8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d5ee:	bf00      	nop
 800d5f0:	e002      	b.n	800d5f8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d5f2:	bf00      	nop
 800d5f4:	e000      	b.n	800d5f8 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 800d5f6:	bf00      	nop
	return ret;
 800d5f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 800d60a:	4b31      	ldr	r3, [pc, #196]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d157      	bne.n	800d6c2 <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800d612:	492f      	ldr	r1, [pc, #188]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d614:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d618:	f000 fa87 	bl	800db2a <nm_read_reg_with_ret>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d004      	beq.n	800d62c <nmi_get_chipid+0x28>
			chipid = 0;
 800d622:	4b2b      	ldr	r3, [pc, #172]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d624:	2200      	movs	r2, #0
 800d626:	601a      	str	r2, [r3, #0]
			return 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	e04c      	b.n	800d6c6 <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800d62c:	1d3b      	adds	r3, r7, #4
 800d62e:	4619      	mov	r1, r3
 800d630:	f241 30f4 	movw	r0, #5108	; 0x13f4
 800d634:	f000 fa79 	bl	800db2a <nm_read_reg_with_ret>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d004      	beq.n	800d648 <nmi_get_chipid+0x44>
			chipid = 0;
 800d63e:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d640:	2200      	movs	r2, #0
 800d642:	601a      	str	r2, [r3, #0]
			return 0;
 800d644:	2300      	movs	r3, #0
 800d646:	e03e      	b.n	800d6c6 <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 800d648:	4b21      	ldr	r3, [pc, #132]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a21      	ldr	r2, [pc, #132]	; (800d6d4 <nmi_get_chipid+0xd0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d106      	bne.n	800d660 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d028      	beq.n	800d6aa <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 800d658:	4b1d      	ldr	r3, [pc, #116]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d65a:	4a1f      	ldr	r2, [pc, #124]	; (800d6d8 <nmi_get_chipid+0xd4>)
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	e024      	b.n	800d6aa <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 800d660:	4b1b      	ldr	r3, [pc, #108]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a1d      	ldr	r2, [pc, #116]	; (800d6dc <nmi_get_chipid+0xd8>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d10d      	bne.n	800d686 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	d01c      	beq.n	800d6aa <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b04      	cmp	r3, #4
 800d674:	d103      	bne.n	800d67e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800d676:	4b16      	ldr	r3, [pc, #88]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d678:	4a19      	ldr	r2, [pc, #100]	; (800d6e0 <nmi_get_chipid+0xdc>)
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	e015      	b.n	800d6aa <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 800d67e:	4b14      	ldr	r3, [pc, #80]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d680:	4a18      	ldr	r2, [pc, #96]	; (800d6e4 <nmi_get_chipid+0xe0>)
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	e011      	b.n	800d6aa <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800d686:	4b12      	ldr	r3, [pc, #72]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a17      	ldr	r2, [pc, #92]	; (800d6e8 <nmi_get_chipid+0xe4>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d10c      	bne.n	800d6aa <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800d690:	490f      	ldr	r1, [pc, #60]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d692:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 800d696:	f000 fa48 	bl	800db2a <nm_read_reg_with_ret>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d004      	beq.n	800d6aa <nmi_get_chipid+0xa6>
			chipid = 0;
 800d6a0:	4b0b      	ldr	r3, [pc, #44]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
			return 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e00d      	b.n	800d6c6 <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 800d6aa:	4b09      	ldr	r3, [pc, #36]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d6b2:	4a07      	ldr	r2, [pc, #28]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d6b4:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 800d6b6:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800d6be:	4a04      	ldr	r2, [pc, #16]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d6c0:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 800d6c2:	4b03      	ldr	r3, [pc, #12]	; (800d6d0 <nmi_get_chipid+0xcc>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3708      	adds	r7, #8
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	240001d0 	.word	0x240001d0
 800d6d4:	001002a0 	.word	0x001002a0
 800d6d8:	001002a1 	.word	0x001002a1
 800d6dc:	001002b0 	.word	0x001002b0
 800d6e0:	001002b1 	.word	0x001002b1
 800d6e4:	001002b2 	.word	0x001002b2
 800d6e8:	001000f0 	.word	0x001000f0

0800d6ec <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	2010      	movs	r0, #16
 800d6fc:	f000 fa15 	bl	800db2a <nm_read_reg_with_ret>
 800d700:	4603      	mov	r3, r0
 800d702:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800d704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d144      	bne.n	800d796 <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	f003 0301 	and.w	r3, r3, #1
 800d712:	2b00      	cmp	r3, #0
 800d714:	d000      	beq.n	800d718 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800d716:	e7ee      	b.n	800d6f6 <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 800d718:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800d71a:	463b      	mov	r3, r7
 800d71c:	4619      	mov	r1, r3
 800d71e:	2001      	movs	r0, #1
 800d720:	f000 fa03 	bl	800db2a <nm_read_reg_with_ret>
 800d724:	4603      	mov	r3, r0
 800d726:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d134      	bne.n	800d79a <chip_sleep+0xae>
	if(reg & NBIT1)
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	f003 0302 	and.w	r3, r3, #2
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00e      	beq.n	800d758 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	f023 0302 	bic.w	r3, r3, #2
 800d740:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	4619      	mov	r1, r3
 800d746:	2001      	movs	r0, #1
 800d748:	f000 f9fd 	bl	800db46 <nm_write_reg>
 800d74c:	4603      	mov	r3, r0
 800d74e:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800d750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d122      	bne.n	800d79e <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800d758:	463b      	mov	r3, r7
 800d75a:	4619      	mov	r1, r3
 800d75c:	200b      	movs	r0, #11
 800d75e:	f000 f9e4 	bl	800db2a <nm_read_reg_with_ret>
 800d762:	4603      	mov	r3, r0
 800d764:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800d766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d119      	bne.n	800d7a2 <chip_sleep+0xb6>
	if(reg & NBIT0)
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	f003 0301 	and.w	r3, r3, #1
 800d774:	2b00      	cmp	r3, #0
 800d776:	d016      	beq.n	800d7a6 <chip_sleep+0xba>
	{
		reg &= ~NBIT0;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	f023 0301 	bic.w	r3, r3, #1
 800d77e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	4619      	mov	r1, r3
 800d784:	200b      	movs	r0, #11
 800d786:	f000 f9de 	bl	800db46 <nm_write_reg>
 800d78a:	4603      	mov	r3, r0
 800d78c:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 800d78e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d792:	2b00      	cmp	r3, #0
	}

ERR1:
 800d794:	e007      	b.n	800d7a6 <chip_sleep+0xba>
		if(ret != M2M_SUCCESS) goto ERR1;
 800d796:	bf00      	nop
 800d798:	e006      	b.n	800d7a8 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d79a:	bf00      	nop
 800d79c:	e004      	b.n	800d7a8 <chip_sleep+0xbc>
		if(ret != M2M_SUCCESS)goto ERR1;
 800d79e:	bf00      	nop
 800d7a0:	e002      	b.n	800d7a8 <chip_sleep+0xbc>
	if(ret != M2M_SUCCESS)goto ERR1;
 800d7a2:	bf00      	nop
 800d7a4:	e000      	b.n	800d7a8 <chip_sleep+0xbc>
ERR1:
 800d7a6:	bf00      	nop
	return ret;
 800d7a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <chip_wake>:
sint8 chip_wake(void)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	607b      	str	r3, [r7, #4]
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	603b      	str	r3, [r7, #0]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 800d7ca:	1d3b      	adds	r3, r7, #4
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	200b      	movs	r0, #11
 800d7d0:	f000 f9ab 	bl	800db2a <nm_read_reg_with_ret>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d14e      	bne.n	800d87e <chip_wake+0xca>

	if(!(reg & NBIT0))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d10c      	bne.n	800d804 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f043 0301 	orr.w	r3, r3, #1
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	200b      	movs	r0, #11
 800d7f4:	f000 f9a7 	bl	800db46 <nm_write_reg>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d7fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d13e      	bne.n	800d882 <chip_wake+0xce>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 800d804:	1d3b      	adds	r3, r7, #4
 800d806:	4619      	mov	r1, r3
 800d808:	2001      	movs	r0, #1
 800d80a:	f000 f98e 	bl	800db2a <nm_read_reg_with_ret>
 800d80e:	4603      	mov	r3, r0
 800d810:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d135      	bne.n	800d886 <chip_wake+0xd2>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f003 0302 	and.w	r3, r3, #2
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10c      	bne.n	800d83e <chip_wake+0x8a>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f043 0302 	orr.w	r3, r3, #2
 800d82a:	4619      	mov	r1, r3
 800d82c:	2001      	movs	r0, #1
 800d82e:	f000 f98a 	bl	800db46 <nm_write_reg>
 800d832:	4603      	mov	r3, r0
 800d834:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800d836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d125      	bne.n	800d88a <chip_wake+0xd6>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 800d83e:	463b      	mov	r3, r7
 800d840:	4619      	mov	r1, r3
 800d842:	200f      	movs	r0, #15
 800d844:	f000 f971 	bl	800db2a <nm_read_reg_with_ret>
 800d848:	4603      	mov	r3, r0
 800d84a:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 800d84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d11c      	bne.n	800d88e <chip_wake+0xda>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	f003 0304 	and.w	r3, r3, #4
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10b      	bne.n	800d876 <chip_wake+0xc2>
			break;
		}
		nm_bsp_sleep(2);
 800d85e:	2002      	movs	r0, #2
 800d860:	f7fe fb86 	bl	800bf70 <nm_bsp_sleep>
		trials++;
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	3301      	adds	r3, #1
 800d868:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2b04      	cmp	r3, #4
 800d86e:	d9e6      	bls.n	800d83e <chip_wake+0x8a>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 800d870:	23fc      	movs	r3, #252	; 0xfc
 800d872:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 800d874:	e00c      	b.n	800d890 <chip_wake+0xdc>
			break;
 800d876:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800d878:	f000 f93c 	bl	800daf4 <nm_bus_reset>
 800d87c:	e008      	b.n	800d890 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d87e:	bf00      	nop
 800d880:	e006      	b.n	800d890 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d882:	bf00      	nop
 800d884:	e004      	b.n	800d890 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800d886:	bf00      	nop
 800d888:	e002      	b.n	800d890 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800d88a:	bf00      	nop
 800d88c:	e000      	b.n	800d890 <chip_wake+0xdc>
			goto _WAKE_EXIT;
 800d88e:	bf00      	nop

_WAKE_EXIT:
	return ret;
 800d890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b088      	sub	sp, #32
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	61bb      	str	r3, [r7, #24]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 800d8b6:	4b3f      	ldr	r3, [pc, #252]	; (800d9b4 <wait_for_bootrom+0x118>)
 800d8b8:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800d8be:	f241 0014 	movw	r0, #4116	; 0x1014
 800d8c2:	f000 f926 	bl	800db12 <nm_read_reg>
 800d8c6:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	db03      	blt.n	800d8d6 <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	f7fe fb4e 	bl	800bf70 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 800d8d4:	e7f3      	b.n	800d8be <wait_for_bootrom+0x22>
			break;
 800d8d6:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 800d8d8:	4837      	ldr	r0, [pc, #220]	; (800d9b8 <wait_for_bootrom+0x11c>)
 800d8da:	f000 f91a 	bl	800db12 <nm_read_reg>
 800d8de:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	f003 0301 	and.w	r3, r3, #1
 800d8e6:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d119      	bne.n	800d922 <wait_for_bootrom+0x86>
	{
		reg = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 800d8f2:	e012      	b.n	800d91a <wait_for_bootrom+0x7e>
		{
			nm_bsp_sleep(1);
 800d8f4:	2001      	movs	r0, #1
 800d8f6:	f7fe fb3b 	bl	800bf70 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 800d8fa:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 800d8fe:	f000 f908 	bl	800db12 <nm_read_reg>
 800d902:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	3301      	adds	r3, #1
 800d908:	617b      	str	r3, [r7, #20]
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	f644 6220 	movw	r2, #20000	; 0x4e20
 800d910:	4293      	cmp	r3, r2
 800d912:	d902      	bls.n	800d91a <wait_for_bootrom+0x7e>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 800d914:	23fb      	movs	r3, #251	; 0xfb
 800d916:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800d918:	e045      	b.n	800d9a6 <wait_for_bootrom+0x10a>
		while(reg != M2M_FINISH_BOOT_ROM)
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	4a27      	ldr	r2, [pc, #156]	; (800d9bc <wait_for_bootrom+0x120>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d1e8      	bne.n	800d8f4 <wait_for_bootrom+0x58>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	2b02      	cmp	r3, #2
 800d926:	d10a      	bne.n	800d93e <wait_for_bootrom+0xa2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800d928:	4925      	ldr	r1, [pc, #148]	; (800d9c0 <wait_for_bootrom+0x124>)
 800d92a:	4826      	ldr	r0, [pc, #152]	; (800d9c4 <wait_for_bootrom+0x128>)
 800d92c:	f000 f90b 	bl	800db46 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 800d930:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800d934:	f241 008c 	movw	r0, #4236	; 0x108c
 800d938:	f000 f905 	bl	800db46 <nm_write_reg>
 800d93c:	e01c      	b.n	800d978 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 800d93e:	79fb      	ldrb	r3, [r7, #7]
 800d940:	2b03      	cmp	r3, #3
 800d942:	d109      	bne.n	800d958 <wait_for_bootrom+0xbc>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800d944:	491e      	ldr	r1, [pc, #120]	; (800d9c0 <wait_for_bootrom+0x124>)
 800d946:	481f      	ldr	r0, [pc, #124]	; (800d9c4 <wait_for_bootrom+0x128>)
 800d948:	f000 f8fd 	bl	800db46 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 800d94c:	2100      	movs	r1, #0
 800d94e:	f241 008c 	movw	r0, #4236	; 0x108c
 800d952:	f000 f8f8 	bl	800db46 <nm_write_reg>
 800d956:	e00f      	b.n	800d978 <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800d958:	79fb      	ldrb	r3, [r7, #7]
 800d95a:	2b04      	cmp	r3, #4
 800d95c:	d107      	bne.n	800d96e <wait_for_bootrom+0xd2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 800d95e:	2380      	movs	r3, #128	; 0x80
 800d960:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800d962:	68f9      	ldr	r1, [r7, #12]
 800d964:	f241 008c 	movw	r0, #4236	; 0x108c
 800d968:	f000 f8ed 	bl	800db46 <nm_write_reg>
 800d96c:	e004      	b.n	800d978 <wait_for_bootrom+0xdc>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 800d96e:	68f9      	ldr	r1, [r7, #12]
 800d970:	f241 008c 	movw	r0, #4236	; 0x108c
 800d974:	f000 f8e7 	bl	800db46 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800d978:	f7ff fe44 	bl	800d604 <nmi_get_chipid>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d982:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 800d986:	d306      	bcc.n	800d996 <wait_for_bootrom+0xfa>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	f043 0302 	orr.w	r3, r3, #2
 800d98e:	4618      	mov	r0, r3
 800d990:	f7ff fdbe 	bl	800d510 <chip_apply_conf>
 800d994:	e002      	b.n	800d99c <wait_for_bootrom+0x100>
	} else {
		chip_apply_conf(u32GpReg1);
 800d996:	6938      	ldr	r0, [r7, #16]
 800d998:	f7ff fdba 	bl	800d510 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 800d99c:	490a      	ldr	r1, [pc, #40]	; (800d9c8 <wait_for_bootrom+0x12c>)
 800d99e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 800d9a2:	f000 f8d0 	bl	800db46 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 800d9a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3720      	adds	r7, #32
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	13541354 	.word	0x13541354
 800d9b8:	000207bc 	.word	0x000207bc
 800d9bc:	10add09e 	.word	0x10add09e
 800d9c0:	3c1cd57d 	.word	0x3c1cd57d
 800d9c4:	000207ac 	.word	0x000207ac
 800d9c8:	ef522f61 	.word	0xef522f61

0800d9cc <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b088      	sub	sp, #32
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	61bb      	str	r3, [r7, #24]
 800d9de:	2300      	movs	r3, #0
 800d9e0:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 800d9e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d9e6:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 800d9e8:	f241 038c 	movw	r3, #4236	; 0x108c
 800d9ec:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 800d9ee:	4b1a      	ldr	r3, [pc, #104]	; (800da58 <wait_for_firmware_start+0x8c>)
 800d9f0:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 800d9f2:	79fb      	ldrb	r3, [r7, #7]
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d002      	beq.n	800d9fe <wait_for_firmware_start+0x32>
 800d9f8:	79fb      	ldrb	r3, [r7, #7]
 800d9fa:	2b03      	cmp	r3, #3
 800d9fc:	d116      	bne.n	800da2c <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 800d9fe:	4b17      	ldr	r3, [pc, #92]	; (800da5c <wait_for_firmware_start+0x90>)
 800da00:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 800da02:	4b17      	ldr	r3, [pc, #92]	; (800da60 <wait_for_firmware_start+0x94>)
 800da04:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800da06:	e011      	b.n	800da2c <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800da08:	2002      	movs	r0, #2
 800da0a:	f7fe fab1 	bl	800bf70 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	4618      	mov	r0, r3
 800da12:	f000 f87e 	bl	800db12 <nm_read_reg>
 800da16:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	3301      	adds	r3, #1
 800da1c:	617b      	str	r3, [r7, #20]
 800da1e:	697a      	ldr	r2, [r7, #20]
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	429a      	cmp	r2, r3
 800da24:	d302      	bcc.n	800da2c <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800da26:	23fb      	movs	r3, #251	; 0xfb
 800da28:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800da2a:	e00e      	b.n	800da4a <wait_for_firmware_start+0x7e>
	while (checkValue != reg)
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	69ba      	ldr	r2, [r7, #24]
 800da30:	429a      	cmp	r2, r3
 800da32:	d1e9      	bne.n	800da08 <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	4a08      	ldr	r2, [pc, #32]	; (800da58 <wait_for_firmware_start+0x8c>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d105      	bne.n	800da48 <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 800da3c:	2100      	movs	r1, #0
 800da3e:	f241 008c 	movw	r0, #4236	; 0x108c
 800da42:	f000 f880 	bl	800db46 <nm_write_reg>
 800da46:	e000      	b.n	800da4a <wait_for_firmware_start+0x7e>
	}
ERR:
 800da48:	bf00      	nop
	return ret;
 800da4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3720      	adds	r7, #32
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	02532636 	.word	0x02532636
 800da5c:	000207ac 	.word	0x000207ac
 800da60:	d75dc1c3 	.word	0xd75dc1c3

0800da64 <chip_deinit>:

sint8 chip_deinit(void)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800da6e:	463b      	mov	r3, r7
 800da70:	4619      	mov	r1, r3
 800da72:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800da76:	f000 f858 	bl	800db2a <nm_read_reg_with_ret>
 800da7a:	4603      	mov	r3, r0
 800da7c:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800da7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10f      	bne.n	800daa6 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da8c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	4619      	mov	r1, r3
 800da92:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800da96:	f000 f856 	bl	800db46 <nm_write_reg>
 800da9a:	4603      	mov	r3, r0
 800da9c:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800da9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800daa2:	2b00      	cmp	r3, #0
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
 800daa4:	e000      	b.n	800daa8 <chip_deinit+0x44>
		goto ERR1;
 800daa6:	bf00      	nop
	return ret;
 800daa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800dabc:	2300      	movs	r3, #0
 800dabe:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7fe fb5f 	bl	800c184 <nm_bus_init>
 800dac6:	4603      	mov	r3, r0
 800dac8:	73fb      	strb	r3, [r7, #15]
	return ret;
 800daca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b082      	sub	sp, #8
 800dada:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800dadc:	2300      	movs	r3, #0
 800dade:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 800dae0:	f7fe fbac 	bl	800c23c <nm_bus_deinit>
 800dae4:	4603      	mov	r3, r0
 800dae6:	71fb      	strb	r3, [r7, #7]

	return ret;
 800dae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800dafa:	2300      	movs	r3, #0
 800dafc:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
    ret = nm_spi_reset();
 800dafe:	f000 fea9 	bl	800e854 <nm_spi_reset>
 800db02:	4603      	mov	r3, r0
 800db04:	71fb      	strb	r3, [r7, #7]
	return ret;
 800db06:	f997 3007 	ldrsb.w	r3, [r7, #7]
#elif defined (CONF_WINC_USE_I2C)
#else
#error "Plesae define bus usage"
	return ret;
#endif
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 ff0a 	bl	800e934 <nm_spi_read_reg>
 800db20:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
 800db22:	4618      	mov	r0, r3
 800db24:	3708      	adds	r7, #8
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800db34:	6839      	ldr	r1, [r7, #0]
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 ff0b 	bl	800e952 <nm_spi_read_reg_with_ret>
 800db3c:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b082      	sub	sp, #8
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
 800db4e:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 ff17 	bl	800e986 <nm_spi_write_reg>
 800db58:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b084      	sub	sp, #16
 800db66:	af00      	add	r7, sp, #0
 800db68:	60f8      	str	r0, [r7, #12]
 800db6a:	60b9      	str	r1, [r7, #8]
 800db6c:	4613      	mov	r3, r2
 800db6e:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 800db70:	88fb      	ldrh	r3, [r7, #6]
 800db72:	461a      	mov	r2, r3
 800db74:	68b9      	ldr	r1, [r7, #8]
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 ff1f 	bl	800e9ba <nm_spi_read_block>
 800db7c:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
	...

0800db88 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800db94:	4b20      	ldr	r3, [pc, #128]	; (800dc18 <nm_read_block+0x90>)
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	3b08      	subs	r3, #8
 800db9a:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800db9c:	2300      	movs	r3, #0
 800db9e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800dba0:	2300      	movs	r3, #0
 800dba2:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800dba4:	8a3b      	ldrh	r3, [r7, #16]
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d80f      	bhi.n	800dbcc <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	b292      	uxth	r2, r2
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7ff ffd2 	bl	800db62 <p_nm_read_block>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	b2da      	uxtb	r2, r3
 800dbc2:	7cfb      	ldrb	r3, [r7, #19]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	74fb      	strb	r3, [r7, #19]
			break;
 800dbca:	e01f      	b.n	800dc0c <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	8a3a      	ldrh	r2, [r7, #16]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f7ff ffc3 	bl	800db62 <p_nm_read_block>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	7cfb      	ldrb	r3, [r7, #19]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800dbe8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10c      	bne.n	800dc0a <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800dbf0:	8a3b      	ldrh	r3, [r7, #16]
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800dbf8:	8a3b      	ldrh	r3, [r7, #16]
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800dc00:	8a3b      	ldrh	r3, [r7, #16]
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	4413      	add	r3, r2
 800dc06:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800dc08:	e7cc      	b.n	800dba4 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800dc0a:	bf00      	nop
		}
	}

	return s8Ret;
 800dc0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3718      	adds	r7, #24
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	24000010 	.word	0x24000010

0800dc1c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	4613      	mov	r3, r2
 800dc28:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800dc2a:	88fb      	ldrh	r3, [r7, #6]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	68b9      	ldr	r1, [r7, #8]
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f000 fee0 	bl	800e9f6 <nm_spi_write_block>
 800dc36:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800dc4c:	4b20      	ldr	r3, [pc, #128]	; (800dcd0 <nm_write_block+0x90>)
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	3b08      	subs	r3, #8
 800dc52:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800dc54:	2300      	movs	r3, #0
 800dc56:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800dc5c:	8a3b      	ldrh	r3, [r7, #16]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d80f      	bhi.n	800dc84 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	4413      	add	r3, r2
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	b292      	uxth	r2, r2
 800dc6e:	4619      	mov	r1, r3
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f7ff ffd3 	bl	800dc1c <p_nm_write_block>
 800dc76:	4603      	mov	r3, r0
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	7cfb      	ldrb	r3, [r7, #19]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	74fb      	strb	r3, [r7, #19]
			break;
 800dc82:	e01f      	b.n	800dcc4 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	4413      	add	r3, r2
 800dc8a:	8a3a      	ldrh	r2, [r7, #16]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f7ff ffc4 	bl	800dc1c <p_nm_write_block>
 800dc94:	4603      	mov	r3, r0
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	7cfb      	ldrb	r3, [r7, #19]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 800dca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10c      	bne.n	800dcc2 <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 800dca8:	8a3b      	ldrh	r3, [r7, #16]
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	1ad3      	subs	r3, r2, r3
 800dcae:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 800dcb0:	8a3b      	ldrh	r3, [r7, #16]
 800dcb2:	697a      	ldr	r2, [r7, #20]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 800dcb8:	8a3b      	ldrh	r3, [r7, #16]
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 800dcc0:	e7cc      	b.n	800dc5c <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800dcc2:	bf00      	nop
		}
	}

	return s8Ret;
 800dcc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3718      	adds	r7, #24
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	24000010 	.word	0x24000010

0800dcd4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 800dce0:	2300      	movs	r3, #0
 800dce2:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 800dce4:	f107 030c 	add.w	r3, r7, #12
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f000 8086 	beq.w	800de02 <nm_get_firmware_full_info+0x12e>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 800dcf6:	2228      	movs	r2, #40	; 0x28
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7fe fac6 	bl	800c28c <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 800dd00:	f107 0314 	add.w	r3, r7, #20
 800dd04:	4619      	mov	r1, r3
 800dd06:	4842      	ldr	r0, [pc, #264]	; (800de10 <nm_get_firmware_full_info+0x13c>)
 800dd08:	f7ff ff0f 	bl	800db2a <nm_read_reg_with_ret>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 800dd10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d174      	bne.n	800de02 <nm_get_firmware_full_info+0x12e>
		{
			if(reg != 0)
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d06e      	beq.n	800ddfc <nm_get_firmware_full_info+0x128>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800dd24:	f107 010c 	add.w	r1, r7, #12
 800dd28:	2208      	movs	r2, #8
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7ff ff2c 	bl	800db88 <nm_read_block>
 800dd30:	4603      	mov	r3, r0
 800dd32:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 800dd34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d163      	bne.n	800de04 <nm_get_firmware_full_info+0x130>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d054      	beq.n	800ddf6 <nm_get_firmware_full_info+0x122>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800dd52:	2228      	movs	r2, #40	; 0x28
 800dd54:	6879      	ldr	r1, [r7, #4]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff ff16 	bl	800db88 <nm_read_block>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 800dd60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d14d      	bne.n	800de04 <nm_get_firmware_full_info+0x130>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	791b      	ldrb	r3, [r3, #4]
 800dd6c:	021b      	lsls	r3, r3, #8
 800dd6e:	b21a      	sxth	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	795b      	ldrb	r3, [r3, #5]
 800dd74:	011b      	lsls	r3, r3, #4
 800dd76:	b21b      	sxth	r3, r3
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	b21b      	sxth	r3, r3
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	b21a      	sxth	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	799b      	ldrb	r3, [r3, #6]
 800dd84:	b21b      	sxth	r3, r3
 800dd86:	f003 030f 	and.w	r3, r3, #15
 800dd8a:	b21b      	sxth	r3, r3
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	b21b      	sxth	r3, r3
 800dd90:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 800dd92:	f241 3354 	movw	r3, #4948	; 0x1354
 800dd96:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	79db      	ldrb	r3, [r3, #7]
 800dd9c:	021b      	lsls	r3, r3, #8
 800dd9e:	b21a      	sxth	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	7a1b      	ldrb	r3, [r3, #8]
 800dda4:	011b      	lsls	r3, r3, #4
 800dda6:	b21b      	sxth	r3, r3
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	b21b      	sxth	r3, r3
 800ddac:	4313      	orrs	r3, r2
 800ddae:	b21a      	sxth	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	7a5b      	ldrb	r3, [r3, #9]
 800ddb4:	b21b      	sxth	r3, r3
 800ddb6:	f003 030f 	and.w	r3, r3, #15
 800ddba:	b21b      	sxth	r3, r3
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	b21b      	sxth	r3, r3
 800ddc0:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 800ddc2:	8bbb      	ldrh	r3, [r7, #28]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d005      	beq.n	800ddd4 <nm_get_firmware_full_info+0x100>
 800ddc8:	8b3b      	ldrh	r3, [r7, #24]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d002      	beq.n	800ddd4 <nm_get_firmware_full_info+0x100>
 800ddce:	8b3b      	ldrh	r3, [r7, #24]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d102      	bne.n	800ddda <nm_get_firmware_full_info+0x106>
								ret = M2M_ERR_FAIL;
 800ddd4:	23f4      	movs	r3, #244	; 0xf4
 800ddd6:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800ddd8:	e014      	b.n	800de04 <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 800ddda:	8b7a      	ldrh	r2, [r7, #26]
 800dddc:	8b3b      	ldrh	r3, [r7, #24]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d202      	bcs.n	800dde8 <nm_get_firmware_full_info+0x114>
								/*The current driver version should be larger or equal
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 800dde2:	23f3      	movs	r3, #243	; 0xf3
 800dde4:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800dde6:	e00d      	b.n	800de04 <nm_get_firmware_full_info+0x130>
							}
							if(curr_drv_ver >  curr_firm_ver) {
 800dde8:	8b7a      	ldrh	r2, [r7, #26]
 800ddea:	8bbb      	ldrh	r3, [r7, #28]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d909      	bls.n	800de04 <nm_get_firmware_full_info+0x130>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 800ddf0:	23f3      	movs	r3, #243	; 0xf3
 800ddf2:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 800ddf4:	e006      	b.n	800de04 <nm_get_firmware_full_info+0x130>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 800ddf6:	23f4      	movs	r3, #244	; 0xf4
 800ddf8:	77fb      	strb	r3, [r7, #31]
 800ddfa:	e003      	b.n	800de04 <nm_get_firmware_full_info+0x130>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 800ddfc:	23f4      	movs	r3, #244	; 0xf4
 800ddfe:	77fb      	strb	r3, [r7, #31]
 800de00:	e000      	b.n	800de04 <nm_get_firmware_full_info+0x130>
			}
		}
	}
EXIT:
 800de02:	bf00      	nop
	return ret;
 800de04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3720      	adds	r7, #32
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	000c0008 	.word	0x000c0008

0800de14 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 800de1c:	2300      	movs	r3, #0
 800de1e:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode;

	if(NULL != arg) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00b      	beq.n	800de3e <nm_drv_init+0x2a>
		u8Mode = *((uint8 *)arg);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 800de2c:	7bbb      	ldrb	r3, [r7, #14]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d002      	beq.n	800de38 <nm_drv_init+0x24>
 800de32:	7bbb      	ldrb	r3, [r7, #14]
 800de34:	2b04      	cmp	r3, #4
 800de36:	d904      	bls.n	800de42 <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 800de38:	2301      	movs	r3, #1
 800de3a:	73bb      	strb	r3, [r7, #14]
 800de3c:	e001      	b.n	800de42 <nm_drv_init+0x2e>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
 800de3e:	2301      	movs	r3, #1
 800de40:	73bb      	strb	r3, [r7, #14]
	}

	ret = nm_bus_iface_init(NULL);
 800de42:	2000      	movs	r0, #0
 800de44:	f7ff fe36 	bl	800dab4 <nm_bus_iface_init>
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800de4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d135      	bne.n	800dec0 <nm_drv_init+0xac>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	printf("Chip ID %lx\n", nmi_get_chipid());
 800de54:	f7ff fbd6 	bl	800d604 <nmi_get_chipid>
 800de58:	4603      	mov	r3, r0
 800de5a:	4619      	mov	r1, r3
 800de5c:	481d      	ldr	r0, [pc, #116]	; (800ded4 <nm_drv_init+0xc0>)
 800de5e:	f000 fee5 	bl	800ec2c <iprintf>
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
 800de62:	f000 fd09 	bl	800e878 <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff fd17 	bl	800d89c <wait_for_bootrom>
 800de6e:	4603      	mov	r3, r0
 800de70:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800de72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d11a      	bne.n	800deb0 <nm_drv_init+0x9c>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 800de7a:	7bbb      	ldrb	r3, [r7, #14]
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7ff fda5 	bl	800d9cc <wait_for_firmware_start>
 800de82:	4603      	mov	r3, r0
 800de84:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800de86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d112      	bne.n	800deb4 <nm_drv_init+0xa0>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	2b02      	cmp	r3, #2
 800de92:	d017      	beq.n	800dec4 <nm_drv_init+0xb0>
 800de94:	7bbb      	ldrb	r3, [r7, #14]
 800de96:	2b03      	cmp	r3, #3
 800de98:	d014      	beq.n	800dec4 <nm_drv_init+0xb0>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 800de9a:	f7ff fb69 	bl	800d570 <enable_interrupts>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800dea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d106      	bne.n	800deb8 <nm_drv_init+0xa4>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
 800deaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deae:	e00c      	b.n	800deca <nm_drv_init+0xb6>
		goto ERR2;
 800deb0:	bf00      	nop
 800deb2:	e002      	b.n	800deba <nm_drv_init+0xa6>
		goto ERR2;
 800deb4:	bf00      	nop
 800deb6:	e000      	b.n	800deba <nm_drv_init+0xa6>
		goto ERR2;
 800deb8:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 800deba:	f7ff fe0c 	bl	800dad6 <nm_bus_iface_deinit>
 800debe:	e002      	b.n	800dec6 <nm_drv_init+0xb2>
		goto ERR1;
 800dec0:	bf00      	nop
 800dec2:	e000      	b.n	800dec6 <nm_drv_init+0xb2>
ERR1:
 800dec4:	bf00      	nop
	return ret;
 800dec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	080102b0 	.word	0x080102b0

0800ded8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 800dee0:	f7ff fdc0 	bl	800da64 <chip_deinit>
 800dee4:	4603      	mov	r3, r0
 800dee6:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800dee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d113      	bne.n	800df18 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 800def0:	2000      	movs	r0, #0
 800def2:	f000 fe0b 	bl	800eb0c <spi_flash_enable>
 800def6:	4603      	mov	r3, r0
 800def8:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800defa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d10c      	bne.n	800df1c <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
 800df02:	f7ff fde8 	bl	800dad6 <nm_bus_iface_deinit>
 800df06:	4603      	mov	r3, r0
 800df08:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800df0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d106      	bne.n	800df20 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800df12:	f000 fd01 	bl	800e918 <nm_spi_deinit>
 800df16:	e004      	b.n	800df22 <nm_drv_deinit+0x4a>
		goto ERR1;
 800df18:	bf00      	nop
 800df1a:	e002      	b.n	800df22 <nm_drv_deinit+0x4a>
		goto ERR1;
 800df1c:	bf00      	nop
 800df1e:	e000      	b.n	800df22 <nm_drv_deinit+0x4a>
		goto ERR1;
 800df20:	bf00      	nop
#endif

ERR1:
	return ret;
 800df22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df26:	4618      	mov	r0, r3
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b086      	sub	sp, #24
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
 800df36:	460b      	mov	r3, r1
 800df38:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800df42:	887b      	ldrh	r3, [r7, #2]
 800df44:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800df46:	f107 030c 	add.w	r3, r7, #12
 800df4a:	4619      	mov	r1, r3
 800df4c:	2003      	movs	r0, #3
 800df4e:	f7fe f953 	bl	800c1f8 <nm_bus_ioctl>
 800df52:	4603      	mov	r3, r0
}
 800df54:	4618      	mov	r0, r3
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b086      	sub	sp, #24
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	460b      	mov	r3, r1
 800df66:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
 800df6c:	2300      	movs	r3, #0
 800df6e:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800df70:	887b      	ldrh	r3, [r7, #2]
 800df72:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800df74:	f107 030c 	add.w	r3, r7, #12
 800df78:	4619      	mov	r1, r3
 800df7a:	2003      	movs	r0, #3
 800df7c:	f7fe f93c 	bl	800c1f8 <nm_bus_ioctl>
 800df80:	4603      	mov	r3, r0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3718      	adds	r7, #24
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
	...

0800df8c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	460a      	mov	r2, r1
 800df96:	71fb      	strb	r3, [r7, #7]
 800df98:	4613      	mov	r3, r2
 800df9a:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 800df9c:	79fb      	ldrb	r3, [r7, #7]
 800df9e:	005a      	lsls	r2, r3, #1
 800dfa0:	79bb      	ldrb	r3, [r7, #6]
 800dfa2:	4053      	eors	r3, r2
 800dfa4:	4a03      	ldr	r2, [pc, #12]	; (800dfb4 <crc7_byte+0x28>)
 800dfa6:	5cd3      	ldrb	r3, [r2, r3]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	08010538 	.word	0x08010538

0800dfb8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
 800dfc4:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800dfc6:	e00a      	b.n	800dfde <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	1c5a      	adds	r2, r3, #1
 800dfcc:	60ba      	str	r2, [r7, #8]
 800dfce:	781a      	ldrb	r2, [r3, #0]
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff ffd9 	bl	800df8c <crc7_byte>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	1e5a      	subs	r2, r3, #1
 800dfe2:	607a      	str	r2, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1ef      	bne.n	800dfc8 <crc7+0x10>
	return crc;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
	...

0800dff4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b088      	sub	sp, #32
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60b9      	str	r1, [r7, #8]
 800dffc:	607a      	str	r2, [r7, #4]
 800dffe:	603b      	str	r3, [r7, #0]
 800e000:	4603      	mov	r3, r0
 800e002:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 800e004:	2305      	movs	r3, #5
 800e006:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 800e008:	2301      	movs	r3, #1
 800e00a:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
 800e00e:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	3bc1      	subs	r3, #193	; 0xc1
 800e014:	2b0e      	cmp	r3, #14
 800e016:	f200 80cc 	bhi.w	800e1b2 <spi_cmd+0x1be>
 800e01a:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <spi_cmd+0x2c>)
 800e01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e020:	0800e0d9 	.word	0x0800e0d9
 800e024:	0800e0d9 	.word	0x0800e0d9
 800e028:	0800e135 	.word	0x0800e135
 800e02c:	0800e079 	.word	0x0800e079
 800e030:	0800e0a3 	.word	0x0800e0a3
 800e034:	0800e0b5 	.word	0x0800e0b5
 800e038:	0800e103 	.word	0x0800e103
 800e03c:	0800e103 	.word	0x0800e103
 800e040:	0800e179 	.word	0x0800e179
 800e044:	0800e05d 	.word	0x0800e05d
 800e048:	0800e1b3 	.word	0x0800e1b3
 800e04c:	0800e1b3 	.word	0x0800e1b3
 800e050:	0800e1b3 	.word	0x0800e1b3
 800e054:	0800e1b3 	.word	0x0800e1b3
 800e058:	0800e0c7 	.word	0x0800e0c7
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	0c1b      	lsrs	r3, r3, #16
 800e060:	b2db      	uxtb	r3, r3
 800e062:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	0a1b      	lsrs	r3, r3, #8
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e072:	2305      	movs	r3, #5
 800e074:	77fb      	strb	r3, [r7, #31]
		break;
 800e076:	e09f      	b.n	800e1b8 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	0a1b      	lsrs	r3, r3, #8
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800e080:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e084:	2b00      	cmp	r3, #0
 800e086:	d004      	beq.n	800e092 <spi_cmd+0x9e>
 800e088:	7d7b      	ldrb	r3, [r7, #21]
 800e08a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	b2db      	uxtb	r3, r3
 800e096:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e098:	2300      	movs	r3, #0
 800e09a:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e09c:	2305      	movs	r3, #5
 800e09e:	77fb      	strb	r3, [r7, #31]
		break;
 800e0a0:	e08a      	b.n	800e1b8 <spi_cmd+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e0ae:	2305      	movs	r3, #5
 800e0b0:	77fb      	strb	r3, [r7, #31]
		break;
 800e0b2:	e081      	b.n	800e1b8 <spi_cmd+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e0c0:	2305      	movs	r3, #5
 800e0c2:	77fb      	strb	r3, [r7, #31]
		break;
 800e0c4:	e078      	b.n	800e1b8 <spi_cmd+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 800e0c6:	23ff      	movs	r3, #255	; 0xff
 800e0c8:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 800e0ca:	23ff      	movs	r3, #255	; 0xff
 800e0cc:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 800e0ce:	23ff      	movs	r3, #255	; 0xff
 800e0d0:	75fb      	strb	r3, [r7, #23]
		len = 5;
 800e0d2:	2305      	movs	r3, #5
 800e0d4:	77fb      	strb	r3, [r7, #31]
		break;
 800e0d6:	e06f      	b.n	800e1b8 <spi_cmd+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	0c1b      	lsrs	r3, r3, #16
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	0a1b      	lsrs	r3, r3, #8
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	0a1b      	lsrs	r3, r3, #8
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	767b      	strb	r3, [r7, #25]
		len = 7;
 800e0fc:	2307      	movs	r3, #7
 800e0fe:	77fb      	strb	r3, [r7, #31]
		break;
 800e100:	e05a      	b.n	800e1b8 <spi_cmd+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	0c1b      	lsrs	r3, r3, #16
 800e106:	b2db      	uxtb	r3, r3
 800e108:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	0a1b      	lsrs	r3, r3, #8
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	b2db      	uxtb	r3, r3
 800e116:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	0c1b      	lsrs	r3, r3, #16
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	0a1b      	lsrs	r3, r3, #8
 800e124:	b2db      	uxtb	r3, r3
 800e126:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800e12e:	2308      	movs	r3, #8
 800e130:	77fb      	strb	r3, [r7, #31]
		break;
 800e132:	e041      	b.n	800e1b8 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	0a1b      	lsrs	r3, r3, #8
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 800e13c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e140:	2b00      	cmp	r3, #0
 800e142:	d004      	beq.n	800e14e <spi_cmd+0x15a>
 800e144:	7d7b      	ldrb	r3, [r7, #21]
 800e146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	b2db      	uxtb	r3, r3
 800e152:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	0e1b      	lsrs	r3, r3, #24
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	0c1b      	lsrs	r3, r3, #16
 800e160:	b2db      	uxtb	r3, r3
 800e162:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	0a1b      	lsrs	r3, r3, #8
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	76bb      	strb	r3, [r7, #26]
		len = 8;
 800e172:	2308      	movs	r3, #8
 800e174:	77fb      	strb	r3, [r7, #31]
		break;
 800e176:	e01f      	b.n	800e1b8 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	0c1b      	lsrs	r3, r3, #16
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	0a1b      	lsrs	r3, r3, #8
 800e184:	b2db      	uxtb	r3, r3
 800e186:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	0e1b      	lsrs	r3, r3, #24
 800e192:	b2db      	uxtb	r3, r3
 800e194:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	0c1b      	lsrs	r3, r3, #16
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	0a1b      	lsrs	r3, r3, #8
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	76fb      	strb	r3, [r7, #27]
		len = 9;
 800e1ac:	2309      	movs	r3, #9
 800e1ae:	77fb      	strb	r3, [r7, #31]
		break;
 800e1b0:	e002      	b.n	800e1b8 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	77bb      	strb	r3, [r7, #30]
		break;
 800e1b6:	bf00      	nop
	}

	if (result) {
 800e1b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d028      	beq.n	800e212 <spi_cmd+0x21e>
		if (!gu8Crc_off)
 800e1c0:	4b17      	ldr	r3, [pc, #92]	; (800e220 <spi_cmd+0x22c>)
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d114      	bne.n	800e1f2 <spi_cmd+0x1fe>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800e1c8:	7ffb      	ldrb	r3, [r7, #31]
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	f107 0314 	add.w	r3, r7, #20
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	207f      	movs	r0, #127	; 0x7f
 800e1d6:	f7ff feef 	bl	800dfb8 <crc7>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	461a      	mov	r2, r3
 800e1de:	7ffb      	ldrb	r3, [r7, #31]
 800e1e0:	3b01      	subs	r3, #1
 800e1e2:	0052      	lsls	r2, r2, #1
 800e1e4:	b2d2      	uxtb	r2, r2
 800e1e6:	f107 0120 	add.w	r1, r7, #32
 800e1ea:	440b      	add	r3, r1
 800e1ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800e1f0:	e002      	b.n	800e1f8 <spi_cmd+0x204>
		else
			len-=1;
 800e1f2:	7ffb      	ldrb	r3, [r7, #31]
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800e1f8:	7ffb      	ldrb	r3, [r7, #31]
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	f107 0314 	add.w	r3, r7, #20
 800e200:	4611      	mov	r1, r2
 800e202:	4618      	mov	r0, r3
 800e204:	f7ff feaa 	bl	800df5c <nmi_spi_write>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <spi_cmd+0x21e>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 800e20e:	2300      	movs	r3, #0
 800e210:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 800e212:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3720      	adds	r7, #32
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	240001d4 	.word	0x240001d4

0800e224 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	4603      	mov	r3, r0
 800e22c:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 800e22e:	2301      	movs	r3, #1
 800e230:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 800e232:	4b19      	ldr	r3, [pc, #100]	; (800e298 <spi_data_rsp+0x74>)
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d102      	bne.n	800e240 <spi_data_rsp+0x1c>
		len = 2;
 800e23a:	2302      	movs	r3, #2
 800e23c:	73fb      	strb	r3, [r7, #15]
 800e23e:	e001      	b.n	800e244 <spi_data_rsp+0x20>
	else
		len = 3;
 800e240:	2303      	movs	r3, #3
 800e242:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800e244:	7bfb      	ldrb	r3, [r7, #15]
 800e246:	b29a      	uxth	r2, r3
 800e248:	f107 0308 	add.w	r3, r7, #8
 800e24c:	4611      	mov	r1, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f7ff fe6d 	bl	800df2e <nmi_spi_read>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d002      	beq.n	800e260 <spi_data_rsp+0x3c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
 800e25a:	2300      	movs	r3, #0
 800e25c:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800e25e:	e015      	b.n	800e28c <spi_data_rsp+0x68>
	}

	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	3b01      	subs	r3, #1
 800e264:	f107 0210 	add.w	r2, r7, #16
 800e268:	4413      	add	r3, r2
 800e26a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d108      	bne.n	800e284 <spi_data_rsp+0x60>
 800e272:	7bfb      	ldrb	r3, [r7, #15]
 800e274:	3b02      	subs	r3, #2
 800e276:	f107 0210 	add.w	r2, r7, #16
 800e27a:	4413      	add	r3, r2
 800e27c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800e280:	2bc3      	cmp	r3, #195	; 0xc3
 800e282:	d002      	beq.n	800e28a <spi_data_rsp+0x66>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
 800e284:	2300      	movs	r3, #0
 800e286:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 800e288:	e000      	b.n	800e28c <spi_data_rsp+0x68>
	}
_fail_:
 800e28a:	bf00      	nop

	return result;
 800e28c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	240001d4 	.word	0x240001d4

0800e29c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	73fb      	strb	r3, [r7, #15]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
 800e2ac:	2bcf      	cmp	r3, #207	; 0xcf
 800e2ae:	d005      	beq.n	800e2bc <spi_cmd_rsp+0x20>
 800e2b0:	79fb      	ldrb	r3, [r7, #7]
 800e2b2:	2bc5      	cmp	r3, #197	; 0xc5
 800e2b4:	d002      	beq.n	800e2bc <spi_cmd_rsp+0x20>
		 (cmd == CMD_TERMINATE) ||
 800e2b6:	79fb      	ldrb	r3, [r7, #7]
 800e2b8:	2bc6      	cmp	r3, #198	; 0xc6
 800e2ba:	d10b      	bne.n	800e2d4 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e2bc:	f107 030d 	add.w	r3, r7, #13
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7ff fe33 	bl	800df2e <nmi_spi_read>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <spi_cmd_rsp+0x38>
			result = N_FAIL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e2d2:	e033      	b.n	800e33c <spi_cmd_rsp+0xa0>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800e2d4:	230a      	movs	r3, #10
 800e2d6:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e2d8:	f107 030d 	add.w	r3, r7, #13
 800e2dc:	2101      	movs	r1, #1
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff fe25 	bl	800df2e <nmi_spi_read>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d002      	beq.n	800e2f0 <spi_cmd_rsp+0x54>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e2ee:	e025      	b.n	800e33c <spi_cmd_rsp+0xa0>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 800e2f0:	7b7b      	ldrb	r3, [r7, #13]
 800e2f2:	79fa      	ldrb	r2, [r7, #7]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d007      	beq.n	800e308 <spi_cmd_rsp+0x6c>
 800e2f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2fc:	b2da      	uxtb	r2, r3
 800e2fe:	3a01      	subs	r2, #1
 800e300:	b2d2      	uxtb	r2, r2
 800e302:	73ba      	strb	r2, [r7, #14]
 800e304:	2b00      	cmp	r3, #0
 800e306:	dce7      	bgt.n	800e2d8 <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 800e308:	230a      	movs	r3, #10
 800e30a:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e30c:	f107 030d 	add.w	r3, r7, #13
 800e310:	2101      	movs	r1, #1
 800e312:	4618      	mov	r0, r3
 800e314:	f7ff fe0b 	bl	800df2e <nmi_spi_read>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 800e31e:	2300      	movs	r3, #0
 800e320:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 800e322:	e00b      	b.n	800e33c <spi_cmd_rsp+0xa0>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800e324:	7b7b      	ldrb	r3, [r7, #13]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d007      	beq.n	800e33a <spi_cmd_rsp+0x9e>
 800e32a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	3a01      	subs	r2, #1
 800e332:	b2d2      	uxtb	r2, r2
 800e334:	73ba      	strb	r2, [r7, #14]
 800e336:	2b00      	cmp	r3, #0
 800e338:	dce8      	bgt.n	800e30c <spi_cmd_rsp+0x70>

_fail_:
 800e33a:	bf00      	nop

	return result;
 800e33c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	460b      	mov	r3, r1
 800e352:	807b      	strh	r3, [r7, #2]
 800e354:	4613      	mov	r3, r2
 800e356:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 800e358:	2301      	movs	r3, #1
 800e35a:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 800e360:	887b      	ldrh	r3, [r7, #2]
 800e362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e366:	d802      	bhi.n	800e36e <spi_data_read+0x26>
			nbytes = sz;
 800e368:	887b      	ldrh	r3, [r7, #2]
 800e36a:	827b      	strh	r3, [r7, #18]
 800e36c:	e002      	b.n	800e374 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800e36e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e372:	827b      	strh	r3, [r7, #18]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 800e374:	230a      	movs	r3, #10
 800e376:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800e378:	f107 030b 	add.w	r3, r7, #11
 800e37c:	2101      	movs	r1, #1
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff fdd5 	bl	800df2e <nmi_spi_read>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 800e38a:	2300      	movs	r3, #0
 800e38c:	747b      	strb	r3, [r7, #17]
				break;
 800e38e:	e010      	b.n	800e3b2 <spi_data_read+0x6a>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
 800e390:	7afb      	ldrb	r3, [r7, #11]
 800e392:	091b      	lsrs	r3, r3, #4
 800e394:	b2db      	uxtb	r3, r3
 800e396:	f003 030f 	and.w	r3, r3, #15
 800e39a:	2b0f      	cmp	r3, #15
 800e39c:	d008      	beq.n	800e3b0 <spi_data_read+0x68>
				break;
		} while (retry--);
 800e39e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	3a01      	subs	r2, #1
 800e3a6:	b292      	uxth	r2, r2
 800e3a8:	82fa      	strh	r2, [r7, #22]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1e4      	bne.n	800e378 <spi_data_read+0x30>
 800e3ae:	e000      	b.n	800e3b2 <spi_data_read+0x6a>
				break;
 800e3b0:	bf00      	nop

		if (result == N_FAIL)
 800e3b2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d035      	beq.n	800e426 <spi_data_read+0xde>
			break;

		if (retry <= 0) {
 800e3ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	dc02      	bgt.n	800e3c8 <spi_data_read+0x80>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	747b      	strb	r3, [r7, #17]
			break;
 800e3c6:	e02f      	b.n	800e428 <spi_data_read+0xe0>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 800e3c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	8a7a      	ldrh	r2, [r7, #18]
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7ff fdaa 	bl	800df2e <nmi_spi_read>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d002      	beq.n	800e3e6 <spi_data_read+0x9e>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	747b      	strb	r3, [r7, #17]
			break;
 800e3e4:	e020      	b.n	800e428 <spi_data_read+0xe0>
		}
		if(!clockless)
 800e3e6:	787b      	ldrb	r3, [r7, #1]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10f      	bne.n	800e40c <spi_data_read+0xc4>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 800e3ec:	4b11      	ldr	r3, [pc, #68]	; (800e434 <spi_data_read+0xec>)
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10b      	bne.n	800e40c <spi_data_read+0xc4>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 800e3f4:	f107 030c 	add.w	r3, r7, #12
 800e3f8:	2102      	movs	r1, #2
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7ff fd97 	bl	800df2e <nmi_spi_read>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d002      	beq.n	800e40c <spi_data_read+0xc4>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 800e406:	2300      	movs	r3, #0
 800e408:	747b      	strb	r3, [r7, #17]
					break;
 800e40a:	e00d      	b.n	800e428 <spi_data_read+0xe0>
				}
			}
		}
		ix += nbytes;
 800e40c:	8aba      	ldrh	r2, [r7, #20]
 800e40e:	8a7b      	ldrh	r3, [r7, #18]
 800e410:	4413      	add	r3, r2
 800e412:	b29b      	uxth	r3, r3
 800e414:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 800e416:	8a7b      	ldrh	r3, [r7, #18]
 800e418:	887a      	ldrh	r2, [r7, #2]
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	807b      	strh	r3, [r7, #2]

	} while (sz);
 800e41e:	887b      	ldrh	r3, [r7, #2]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d19d      	bne.n	800e360 <spi_data_read+0x18>
 800e424:	e000      	b.n	800e428 <spi_data_read+0xe0>
			break;
 800e426:	bf00      	nop

	return result;
 800e428:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	240001d4 	.word	0x240001d4

0800e438 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	460b      	mov	r3, r1
 800e442:	807b      	strh	r3, [r7, #2]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
 800e444:	2301      	movs	r3, #1
 800e446:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 800e448:	2300      	movs	r3, #0
 800e44a:	81bb      	strh	r3, [r7, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	82fb      	strh	r3, [r7, #22]
	do {
		if (sz <= DATA_PKT_SZ)
 800e450:	887b      	ldrh	r3, [r7, #2]
 800e452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e456:	d802      	bhi.n	800e45e <spi_data_write+0x26>
			nbytes = sz;
 800e458:	887b      	ldrh	r3, [r7, #2]
 800e45a:	82bb      	strh	r3, [r7, #20]
 800e45c:	e002      	b.n	800e464 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 800e45e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e462:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 800e464:	23f0      	movs	r3, #240	; 0xf0
 800e466:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 800e468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d109      	bne.n	800e484 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 800e470:	887b      	ldrh	r3, [r7, #2]
 800e472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e476:	d802      	bhi.n	800e47e <spi_data_write+0x46>
				order = 0x3;
 800e478:	2303      	movs	r3, #3
 800e47a:	74bb      	strb	r3, [r7, #18]
 800e47c:	e00b      	b.n	800e496 <spi_data_write+0x5e>
			else
				order = 0x1;
 800e47e:	2301      	movs	r3, #1
 800e480:	74bb      	strb	r3, [r7, #18]
 800e482:	e008      	b.n	800e496 <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 800e484:	887b      	ldrh	r3, [r7, #2]
 800e486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e48a:	d802      	bhi.n	800e492 <spi_data_write+0x5a>
				order = 0x3;
 800e48c:	2303      	movs	r3, #3
 800e48e:	74bb      	strb	r3, [r7, #18]
 800e490:	e001      	b.n	800e496 <spi_data_write+0x5e>
			else
				order = 0x2;
 800e492:	2302      	movs	r3, #2
 800e494:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 800e496:	7c7a      	ldrb	r2, [r7, #17]
 800e498:	7cbb      	ldrb	r3, [r7, #18]
 800e49a:	4313      	orrs	r3, r2
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 800e4a0:	f107 0311 	add.w	r3, r7, #17
 800e4a4:	2101      	movs	r1, #1
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7ff fd58 	bl	800df5c <nmi_spi_write>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d002      	beq.n	800e4b8 <spi_data_write+0x80>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	74fb      	strb	r3, [r7, #19]
			break;
 800e4b6:	e02a      	b.n	800e50e <spi_data_write+0xd6>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 800e4b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	4413      	add	r3, r2
 800e4c0:	8aba      	ldrh	r2, [r7, #20]
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff fd49 	bl	800df5c <nmi_spi_write>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <spi_data_write+0x9e>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	74fb      	strb	r3, [r7, #19]
			break;
 800e4d4:	e01b      	b.n	800e50e <spi_data_write+0xd6>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 800e4d6:	4b11      	ldr	r3, [pc, #68]	; (800e51c <spi_data_write+0xe4>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10b      	bne.n	800e4f6 <spi_data_write+0xbe>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 800e4de:	f107 030c 	add.w	r3, r7, #12
 800e4e2:	2102      	movs	r1, #2
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7ff fd39 	bl	800df5c <nmi_spi_write>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <spi_data_write+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	74fb      	strb	r3, [r7, #19]
				break;
 800e4f4:	e00b      	b.n	800e50e <spi_data_write+0xd6>
			}
		}

		ix += nbytes;
 800e4f6:	8afa      	ldrh	r2, [r7, #22]
 800e4f8:	8abb      	ldrh	r3, [r7, #20]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 800e500:	887a      	ldrh	r2, [r7, #2]
 800e502:	8abb      	ldrh	r3, [r7, #20]
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	807b      	strh	r3, [r7, #2]
	} while (sz);
 800e508:	887b      	ldrh	r3, [r7, #2]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1a0      	bne.n	800e450 <spi_data_write+0x18>


	return result;
 800e50e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e512:	4618      	mov	r0, r3
 800e514:	3718      	adds	r7, #24
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	240001d4 	.word	0x240001d4

0800e520 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af02      	add	r7, sp, #8
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800e52a:	230a      	movs	r3, #10
 800e52c:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800e52e:	2301      	movs	r3, #1
 800e530:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 800e532:	23c9      	movs	r3, #201	; 0xc9
 800e534:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	733b      	strb	r3, [r7, #12]

_RETRY_:
	if (addr <= 0x30)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b30      	cmp	r3, #48	; 0x30
 800e53e:	d804      	bhi.n	800e54a <spi_write_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 800e540:	23c3      	movs	r3, #195	; 0xc3
 800e542:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800e544:	2301      	movs	r3, #1
 800e546:	733b      	strb	r3, [r7, #12]
 800e548:	e003      	b.n	800e552 <spi_write_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
 800e54a:	23c9      	movs	r3, #201	; 0xc9
 800e54c:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800e552:	7b78      	ldrb	r0, [r7, #13]
 800e554:	7b3b      	ldrb	r3, [r7, #12]
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	2304      	movs	r3, #4
 800e55a:	683a      	ldr	r2, [r7, #0]
 800e55c:	6879      	ldr	r1, [r7, #4]
 800e55e:	f7ff fd49 	bl	800dff4 <spi_cmd>
 800e562:	4603      	mov	r3, r0
 800e564:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d109      	bne.n	800e582 <spi_write_reg+0x62>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e56e:	7b7b      	ldrb	r3, [r7, #13]
 800e570:	4618      	mov	r0, r3
 800e572:	f7ff fe93 	bl	800e29c <spi_cmd_rsp>
 800e576:	4603      	mov	r3, r0
 800e578:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e57a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e57e:	2b01      	cmp	r3, #1
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
		goto _FAIL_;
	}

#endif
_FAIL_:
 800e580:	e000      	b.n	800e584 <spi_write_reg+0x64>
		goto _FAIL_;
 800e582:	bf00      	nop
	if(result != N_OK)
 800e584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d017      	beq.n	800e5bc <spi_write_reg+0x9c>
	{
		nm_bsp_sleep(1);
 800e58c:	2001      	movs	r0, #1
 800e58e:	f7fd fcef 	bl	800bf70 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e592:	2300      	movs	r3, #0
 800e594:	9300      	str	r3, [sp, #0]
 800e596:	2300      	movs	r3, #0
 800e598:	2200      	movs	r2, #0
 800e59a:	2100      	movs	r1, #0
 800e59c:	20cf      	movs	r0, #207	; 0xcf
 800e59e:	f7ff fd29 	bl	800dff4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e5a2:	20cf      	movs	r0, #207	; 0xcf
 800e5a4:	f7ff fe7a 	bl	800e29c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 800e5a8:	2001      	movs	r0, #1
 800e5aa:	f7fd fce1 	bl	800bf70 <nm_bsp_sleep>
		retry--;
 800e5ae:	7bfb      	ldrb	r3, [r7, #15]
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d000      	beq.n	800e5bc <spi_write_reg+0x9c>
 800e5ba:	e7be      	b.n	800e53a <spi_write_reg+0x1a>
	}

	return result;
 800e5bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af02      	add	r7, sp, #8
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800e5d6:	230a      	movs	r3, #10
 800e5d8:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 800e5da:	23c7      	movs	r3, #199	; 0xc7
 800e5dc:	757b      	strb	r3, [r7, #21]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 800e5de:	88fb      	ldrh	r3, [r7, #6]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d101      	bne.n	800e5e8 <nm_spi_write+0x20>
		size = 2;
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 800e5e8:	88fa      	ldrh	r2, [r7, #6]
 800e5ea:	7d78      	ldrb	r0, [r7, #21]
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	68f9      	ldr	r1, [r7, #12]
 800e5f6:	f7ff fcfd 	bl	800dff4 <spi_cmd>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e5fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e602:	2b01      	cmp	r3, #1
 800e604:	d11e      	bne.n	800e644 <nm_spi_write+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e606:	7d7b      	ldrb	r3, [r7, #21]
 800e608:	4618      	mov	r0, r3
 800e60a:	f7ff fe47 	bl	800e29c <spi_cmd_rsp>
 800e60e:	4603      	mov	r3, r0
 800e610:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e616:	2b01      	cmp	r3, #1
 800e618:	d116      	bne.n	800e648 <nm_spi_write+0x80>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800e61a:	88fb      	ldrh	r3, [r7, #6]
 800e61c:	4619      	mov	r1, r3
 800e61e:	68b8      	ldr	r0, [r7, #8]
 800e620:	f7ff ff0a 	bl	800e438 <spi_data_write>
 800e624:	4603      	mov	r3, r0
 800e626:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e628:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d10d      	bne.n	800e64c <nm_spi_write+0x84>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 800e630:	7d7b      	ldrb	r3, [r7, #21]
 800e632:	4618      	mov	r0, r3
 800e634:	f7ff fdf6 	bl	800e224 <spi_data_rsp>
 800e638:	4603      	mov	r3, r0
 800e63a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e63c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e640:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}

_FAIL_:
 800e642:	e004      	b.n	800e64e <nm_spi_write+0x86>
		goto _FAIL_;
 800e644:	bf00      	nop
 800e646:	e002      	b.n	800e64e <nm_spi_write+0x86>
		goto _FAIL_;
 800e648:	bf00      	nop
 800e64a:	e000      	b.n	800e64e <nm_spi_write+0x86>
		goto _FAIL_;
 800e64c:	bf00      	nop
	if(result != N_OK)
 800e64e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d017      	beq.n	800e686 <nm_spi_write+0xbe>
	{
		nm_bsp_sleep(1);
 800e656:	2001      	movs	r0, #1
 800e658:	f7fd fc8a 	bl	800bf70 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e65c:	2300      	movs	r3, #0
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	2300      	movs	r3, #0
 800e662:	2200      	movs	r2, #0
 800e664:	2100      	movs	r1, #0
 800e666:	20cf      	movs	r0, #207	; 0xcf
 800e668:	f7ff fcc4 	bl	800dff4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e66c:	20cf      	movs	r0, #207	; 0xcf
 800e66e:	f7ff fe15 	bl	800e29c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800e672:	2001      	movs	r0, #1
 800e674:	f7fd fc7c 	bl	800bf70 <nm_bsp_sleep>
		retry--;
 800e678:	7dbb      	ldrb	r3, [r7, #22]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800e67e:	7dbb      	ldrb	r3, [r7, #22]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d000      	beq.n	800e686 <nm_spi_write+0xbe>
 800e684:	e7ab      	b.n	800e5de <nm_spi_write+0x16>
	}


	return result;
 800e686:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b086      	sub	sp, #24
 800e696:	af02      	add	r7, sp, #8
 800e698:	6078      	str	r0, [r7, #4]
 800e69a:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 800e69c:	230a      	movs	r3, #10
 800e69e:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_READ;
 800e6a4:	23ca      	movs	r3, #202	; 0xca
 800e6a6:	737b      	strb	r3, [r7, #13]
	uint8 tmp[4];
	uint8 clockless = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	733b      	strb	r3, [r7, #12]

_RETRY_:

	if (addr <= 0xff)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2bff      	cmp	r3, #255	; 0xff
 800e6b0:	d804      	bhi.n	800e6bc <spi_read_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 800e6b2:	23c4      	movs	r3, #196	; 0xc4
 800e6b4:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	733b      	strb	r3, [r7, #12]
 800e6ba:	e003      	b.n	800e6c4 <spi_read_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
 800e6bc:	23ca      	movs	r3, #202	; 0xca
 800e6be:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800e6c4:	7b78      	ldrb	r0, [r7, #13]
 800e6c6:	7b3b      	ldrb	r3, [r7, #12]
 800e6c8:	9300      	str	r3, [sp, #0]
 800e6ca:	2304      	movs	r3, #4
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	6879      	ldr	r1, [r7, #4]
 800e6d0:	f7ff fc90 	bl	800dff4 <spi_cmd>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e6d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d124      	bne.n	800e72a <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e6e0:	7b7b      	ldrb	r3, [r7, #13]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7ff fdda 	bl	800e29c <spi_cmd_rsp>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e6ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d11c      	bne.n	800e72e <spi_read_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 800e6f4:	7b3a      	ldrb	r2, [r7, #12]
 800e6f6:	f107 0308 	add.w	r3, r7, #8
 800e6fa:	2104      	movs	r1, #4
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff fe23 	bl	800e348 <spi_data_read>
 800e702:	4603      	mov	r3, r0
 800e704:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 800e706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d111      	bne.n	800e732 <spi_read_reg+0xa0>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
 800e70e:	7a3b      	ldrb	r3, [r7, #8]
 800e710:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 800e712:	7a7b      	ldrb	r3, [r7, #9]
 800e714:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800e716:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800e718:	7abb      	ldrb	r3, [r7, #10]
 800e71a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 800e71c:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 800e71e:	7afb      	ldrb	r3, [r7, #11]
 800e720:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 800e722:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	601a      	str	r2, [r3, #0]
 800e728:	e004      	b.n	800e734 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e72a:	bf00      	nop
 800e72c:	e002      	b.n	800e734 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e72e:	bf00      	nop
 800e730:	e000      	b.n	800e734 <spi_read_reg+0xa2>
		goto _FAIL_;
 800e732:	bf00      	nop

_FAIL_:
	if(result != N_OK)
 800e734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d017      	beq.n	800e76c <spi_read_reg+0xda>
	{

		nm_bsp_sleep(1);
 800e73c:	2001      	movs	r0, #1
 800e73e:	f7fd fc17 	bl	800bf70 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e742:	2300      	movs	r3, #0
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	2300      	movs	r3, #0
 800e748:	2200      	movs	r2, #0
 800e74a:	2100      	movs	r1, #0
 800e74c:	20cf      	movs	r0, #207	; 0xcf
 800e74e:	f7ff fc51 	bl	800dff4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e752:	20cf      	movs	r0, #207	; 0xcf
 800e754:	f7ff fda2 	bl	800e29c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 800e758:	2001      	movs	r0, #1
 800e75a:	f7fd fc09 	bl	800bf70 <nm_bsp_sleep>
		retry--;
 800e75e:	7bfb      	ldrb	r3, [r7, #15]
 800e760:	3b01      	subs	r3, #1
 800e762:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d000      	beq.n	800e76c <spi_read_reg+0xda>
 800e76a:	e79f      	b.n	800e6ac <spi_read_reg+0x1a>
	}

	return result;
 800e76c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b088      	sub	sp, #32
 800e77c:	af02      	add	r7, sp, #8
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	4613      	mov	r3, r2
 800e784:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800e786:	23c8      	movs	r3, #200	; 0xc8
 800e788:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800e78a:	230a      	movs	r3, #10
 800e78c:	75bb      	strb	r3, [r7, #22]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 800e78e:	2300      	movs	r3, #0
 800e790:	757b      	strb	r3, [r7, #21]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
 800e792:	88fb      	ldrh	r3, [r7, #6]
 800e794:	2b01      	cmp	r3, #1
 800e796:	d103      	bne.n	800e7a0 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800e798:	2302      	movs	r3, #2
 800e79a:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 800e79c:	2301      	movs	r3, #1
 800e79e:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 800e7a0:	88fa      	ldrh	r2, [r7, #6]
 800e7a2:	7d38      	ldrb	r0, [r7, #20]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	68f9      	ldr	r1, [r7, #12]
 800e7ae:	f7ff fc21 	bl	800dff4 <spi_cmd>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e7b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d125      	bne.n	800e80a <nm_spi_read+0x92>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 800e7be:	7d3b      	ldrb	r3, [r7, #20]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7ff fd6b 	bl	800e29c <spi_cmd_rsp>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800e7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d11d      	bne.n	800e80e <nm_spi_read+0x96>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 800e7d2:	7d7b      	ldrb	r3, [r7, #21]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00c      	beq.n	800e7f2 <nm_spi_read+0x7a>
	{
		result = spi_data_read(tmp, size,0);
 800e7d8:	88f9      	ldrh	r1, [r7, #6]
 800e7da:	f107 0310 	add.w	r3, r7, #16
 800e7de:	2200      	movs	r2, #0
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff fdb1 	bl	800e348 <spi_data_read>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 800e7ea:	7c3a      	ldrb	r2, [r7, #16]
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	701a      	strb	r2, [r3, #0]
 800e7f0:	e007      	b.n	800e802 <nm_spi_read+0x8a>
	}
	else
		result = spi_data_read(buf, size,0);
 800e7f2:	88fb      	ldrh	r3, [r7, #6]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	68b8      	ldr	r0, [r7, #8]
 800e7fa:	f7ff fda5 	bl	800e348 <spi_data_read>
 800e7fe:	4603      	mov	r3, r0
 800e800:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 800e802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e806:	2b01      	cmp	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
		goto _FAIL_;
	}
#endif

_FAIL_:
 800e808:	e002      	b.n	800e810 <nm_spi_read+0x98>
		goto _FAIL_;
 800e80a:	bf00      	nop
 800e80c:	e000      	b.n	800e810 <nm_spi_read+0x98>
		goto _FAIL_;
 800e80e:	bf00      	nop
	if(result != N_OK)
 800e810:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e814:	2b01      	cmp	r3, #1
 800e816:	d017      	beq.n	800e848 <nm_spi_read+0xd0>
	{
		nm_bsp_sleep(1);
 800e818:	2001      	movs	r0, #1
 800e81a:	f7fd fba9 	bl	800bf70 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e81e:	2300      	movs	r3, #0
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	2300      	movs	r3, #0
 800e824:	2200      	movs	r2, #0
 800e826:	2100      	movs	r1, #0
 800e828:	20cf      	movs	r0, #207	; 0xcf
 800e82a:	f7ff fbe3 	bl	800dff4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800e82e:	20cf      	movs	r0, #207	; 0xcf
 800e830:	f7ff fd34 	bl	800e29c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 800e834:	2001      	movs	r0, #1
 800e836:	f7fd fb9b 	bl	800bf70 <nm_bsp_sleep>
		retry--;
 800e83a:	7dbb      	ldrb	r3, [r7, #22]
 800e83c:	3b01      	subs	r3, #1
 800e83e:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 800e840:	7dbb      	ldrb	r3, [r7, #22]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d000      	beq.n	800e848 <nm_spi_read+0xd0>
 800e846:	e7a4      	b.n	800e792 <nm_spi_read+0x1a>
	}

	return result;
 800e848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800e85a:	2300      	movs	r3, #0
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	2300      	movs	r3, #0
 800e860:	2200      	movs	r2, #0
 800e862:	2100      	movs	r1, #0
 800e864:	20cf      	movs	r0, #207	; 0xcf
 800e866:	f7ff fbc5 	bl	800dff4 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 800e86a:	20cf      	movs	r0, #207	; 0xcf
 800e86c:	f7ff fd16 	bl	800e29c <spi_cmd_rsp>
	return M2M_SUCCESS;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	603b      	str	r3, [r7, #0]


	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 800e882:	4b24      	ldr	r3, [pc, #144]	; (800e914 <nm_spi_init+0x9c>)
 800e884:	2200      	movs	r2, #0
 800e886:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 800e888:	463b      	mov	r3, r7
 800e88a:	4619      	mov	r1, r3
 800e88c:	f64e 0024 	movw	r0, #59428	; 0xe824
 800e890:	f7ff feff 	bl	800e692 <spi_read_reg>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10d      	bne.n	800e8b6 <nm_spi_init+0x3e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800e89a:	4b1e      	ldr	r3, [pc, #120]	; (800e914 <nm_spi_init+0x9c>)
 800e89c:	2201      	movs	r2, #1
 800e89e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 800e8a0:	463b      	mov	r3, r7
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	f64e 0024 	movw	r0, #59428	; 0xe824
 800e8a8:	f7ff fef3 	bl	800e692 <spi_read_reg>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d101      	bne.n	800e8b6 <nm_spi_init+0x3e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	e02a      	b.n	800e90c <nm_spi_init+0x94>
		}
	}
	if(gu8Crc_off == 0)
 800e8b6:	4b17      	ldr	r3, [pc, #92]	; (800e914 <nm_spi_init+0x9c>)
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d119      	bne.n	800e8f2 <nm_spi_init+0x7a>
	{
		reg &= ~0xc;	/* disable crc checking */
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	f023 030c 	bic.w	r3, r3, #12
 800e8c4:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8cc:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800e8d4:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	f64e 0024 	movw	r0, #59428	; 0xe824
 800e8de:	f7ff fe1f 	bl	800e520 <spi_write_reg>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d101      	bne.n	800e8ec <nm_spi_init+0x74>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	e00f      	b.n	800e90c <nm_spi_init+0x94>
		}
		gu8Crc_off = 1;
 800e8ec:	4b09      	ldr	r3, [pc, #36]	; (800e914 <nm_spi_init+0x9c>)
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
 800e8f2:	1d3b      	adds	r3, r7, #4
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e8fa:	f7ff feca 	bl	800e692 <spi_read_reg>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d102      	bne.n	800e90a <nm_spi_init+0x92>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
 800e904:	f06f 0305 	mvn.w	r3, #5
 800e908:	e000      	b.n	800e90c <nm_spi_init+0x94>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	//spi_init_pkt_sz();


	return M2M_SUCCESS;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	240001d4 	.word	0x240001d4

0800e918 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
 800e918:	b480      	push	{r7}
 800e91a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 800e91c:	4b04      	ldr	r3, [pc, #16]	; (800e930 <nm_spi_deinit+0x18>)
 800e91e:	2200      	movs	r2, #0
 800e920:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop
 800e930:	240001d4 	.word	0x240001d4

0800e934 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
 800e93c:	f107 030c 	add.w	r3, r7, #12
 800e940:	4619      	mov	r1, r3
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff fea5 	bl	800e692 <spi_read_reg>

	return u32Val;
 800e948:	68fb      	ldr	r3, [r7, #12]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b084      	sub	sp, #16
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7ff fe97 	bl	800e692 <spi_read_reg>
 800e964:	4603      	mov	r3, r0
 800e966:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d102      	bne.n	800e976 <nm_spi_read_reg_with_ret+0x24>
 800e970:	2300      	movs	r3, #0
 800e972:	73fb      	strb	r3, [r7, #15]
 800e974:	e001      	b.n	800e97a <nm_spi_read_reg_with_ret+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e976:	23fa      	movs	r3, #250	; 0xfa
 800e978:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800e97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b084      	sub	sp, #16
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7ff fdc4 	bl	800e520 <spi_write_reg>
 800e998:	4603      	mov	r3, r0
 800e99a:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d102      	bne.n	800e9aa <nm_spi_write_reg+0x24>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	73fb      	strb	r3, [r7, #15]
 800e9a8:	e001      	b.n	800e9ae <nm_spi_write_reg+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e9aa:	23fa      	movs	r3, #250	; 0xfa
 800e9ac:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800e9ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b086      	sub	sp, #24
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	60f8      	str	r0, [r7, #12]
 800e9c2:	60b9      	str	r1, [r7, #8]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 800e9c8:	88fb      	ldrh	r3, [r7, #6]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	68b9      	ldr	r1, [r7, #8]
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f7ff fed2 	bl	800e778 <nm_spi_read>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800e9d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d102      	bne.n	800e9e6 <nm_spi_read_block+0x2c>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	75fb      	strb	r3, [r7, #23]
 800e9e4:	e001      	b.n	800e9ea <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800e9e6:	23fa      	movs	r3, #250	; 0xfa
 800e9e8:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800e9ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b086      	sub	sp, #24
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	60f8      	str	r0, [r7, #12]
 800e9fe:	60b9      	str	r1, [r7, #8]
 800ea00:	4613      	mov	r3, r2
 800ea02:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 800ea04:	88fb      	ldrh	r3, [r7, #6]
 800ea06:	461a      	mov	r2, r3
 800ea08:	68b9      	ldr	r1, [r7, #8]
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f7ff fddc 	bl	800e5c8 <nm_spi_write>
 800ea10:	4603      	mov	r3, r0
 800ea12:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800ea14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d102      	bne.n	800ea22 <nm_spi_write_block+0x2c>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	75fb      	strb	r3, [r7, #23]
 800ea20:	e001      	b.n	800ea26 <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800ea22:	23fa      	movs	r3, #250	; 0xfa
 800ea24:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800ea26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
	...

0800ea34 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800ea3a:	463b      	mov	r3, r7
 800ea3c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	22b9      	movs	r2, #185	; 0xb9
 800ea42:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800ea44:	2100      	movs	r1, #0
 800ea46:	4810      	ldr	r0, [pc, #64]	; (800ea88 <spi_flash_enter_low_power_mode+0x54>)
 800ea48:	f7ff f87d 	bl	800db46 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	4619      	mov	r1, r3
 800ea52:	480e      	ldr	r0, [pc, #56]	; (800ea8c <spi_flash_enter_low_power_mode+0x58>)
 800ea54:	f7ff f877 	bl	800db46 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800ea58:	2101      	movs	r1, #1
 800ea5a:	480d      	ldr	r0, [pc, #52]	; (800ea90 <spi_flash_enter_low_power_mode+0x5c>)
 800ea5c:	f7ff f873 	bl	800db46 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800ea60:	2100      	movs	r1, #0
 800ea62:	480c      	ldr	r0, [pc, #48]	; (800ea94 <spi_flash_enter_low_power_mode+0x60>)
 800ea64:	f7ff f86f 	bl	800db46 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800ea68:	2181      	movs	r1, #129	; 0x81
 800ea6a:	480b      	ldr	r0, [pc, #44]	; (800ea98 <spi_flash_enter_low_power_mode+0x64>)
 800ea6c:	f7ff f86b 	bl	800db46 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800ea70:	bf00      	nop
 800ea72:	480a      	ldr	r0, [pc, #40]	; (800ea9c <spi_flash_enter_low_power_mode+0x68>)
 800ea74:	f7ff f84d 	bl	800db12 <nm_read_reg>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d1f9      	bne.n	800ea72 <spi_flash_enter_low_power_mode+0x3e>
}
 800ea7e:	bf00      	nop
 800ea80:	3708      	adds	r7, #8
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	00010208 	.word	0x00010208
 800ea8c:	0001020c 	.word	0x0001020c
 800ea90:	00010214 	.word	0x00010214
 800ea94:	0001021c 	.word	0x0001021c
 800ea98:	00010204 	.word	0x00010204
 800ea9c:	00010218 	.word	0x00010218

0800eaa0 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800eaa6:	463b      	mov	r3, r7
 800eaa8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	22ab      	movs	r2, #171	; 0xab
 800eaae:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 800eab0:	2100      	movs	r1, #0
 800eab2:	4810      	ldr	r0, [pc, #64]	; (800eaf4 <spi_flash_leave_low_power_mode+0x54>)
 800eab4:	f7ff f847 	bl	800db46 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	4619      	mov	r1, r3
 800eabe:	480e      	ldr	r0, [pc, #56]	; (800eaf8 <spi_flash_leave_low_power_mode+0x58>)
 800eac0:	f7ff f841 	bl	800db46 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800eac4:	2101      	movs	r1, #1
 800eac6:	480d      	ldr	r0, [pc, #52]	; (800eafc <spi_flash_leave_low_power_mode+0x5c>)
 800eac8:	f7ff f83d 	bl	800db46 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 800eacc:	2100      	movs	r1, #0
 800eace:	480c      	ldr	r0, [pc, #48]	; (800eb00 <spi_flash_leave_low_power_mode+0x60>)
 800ead0:	f7ff f839 	bl	800db46 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 800ead4:	2181      	movs	r1, #129	; 0x81
 800ead6:	480b      	ldr	r0, [pc, #44]	; (800eb04 <spi_flash_leave_low_power_mode+0x64>)
 800ead8:	f7ff f835 	bl	800db46 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 800eadc:	bf00      	nop
 800eade:	480a      	ldr	r0, [pc, #40]	; (800eb08 <spi_flash_leave_low_power_mode+0x68>)
 800eae0:	f7ff f817 	bl	800db12 <nm_read_reg>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d1f9      	bne.n	800eade <spi_flash_leave_low_power_mode+0x3e>
}
 800eaea:	bf00      	nop
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	00010208 	.word	0x00010208
 800eaf8:	0001020c 	.word	0x0001020c
 800eafc:	00010214 	.word	0x00010214
 800eb00:	0001021c 	.word	0x0001021c
 800eb04:	00010204 	.word	0x00010204
 800eb08:	00010218 	.word	0x00010218

0800eb0c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	4603      	mov	r3, r0
 800eb14:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800eb16:	2300      	movs	r3, #0
 800eb18:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {
 800eb1a:	f7fe fd73 	bl	800d604 <nmi_get_chipid>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb24:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 800eb28:	d331      	bcc.n	800eb8e <spi_flash_enable+0x82>
		uint32 u32Val;

		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800eb2a:	f107 0308 	add.w	r3, r7, #8
 800eb2e:	4619      	mov	r1, r3
 800eb30:	f241 4010 	movw	r0, #5136	; 0x1410
 800eb34:	f7fe fff9 	bl	800db2a <nm_read_reg_with_ret>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 800eb3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d126      	bne.n	800eb92 <spi_flash_enable+0x86>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	4b16      	ldr	r3, [pc, #88]	; (800eba0 <spi_flash_enable+0x94>)
 800eb48:	4013      	ands	r3, r2
 800eb4a:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	4b15      	ldr	r3, [pc, #84]	; (800eba4 <spi_flash_enable+0x98>)
 800eb50:	4313      	orrs	r3, r2
 800eb52:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	4619      	mov	r1, r3
 800eb58:	f241 4010 	movw	r0, #5136	; 0x1410
 800eb5c:	f7fe fff3 	bl	800db46 <nm_write_reg>
		if(enable) {
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <spi_flash_enable+0x60>
			spi_flash_leave_low_power_mode();
 800eb66:	f7ff ff9b 	bl	800eaa0 <spi_flash_leave_low_power_mode>
 800eb6a:	e001      	b.n	800eb70 <spi_flash_enable+0x64>
		} else {
			spi_flash_enter_low_power_mode();
 800eb6c:	f7ff ff62 	bl	800ea34 <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	4b0b      	ldr	r3, [pc, #44]	; (800eba0 <spi_flash_enable+0x94>)
 800eb74:	4013      	ands	r3, r2
 800eb76:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb7e:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	4619      	mov	r1, r3
 800eb84:	f241 4010 	movw	r0, #5136	; 0x1410
 800eb88:	f7fe ffdd 	bl	800db46 <nm_write_reg>
 800eb8c:	e002      	b.n	800eb94 <spi_flash_enable+0x88>
	}
ERR1:
 800eb8e:	bf00      	nop
 800eb90:	e000      	b.n	800eb94 <spi_flash_enable+0x88>
			goto ERR1;
 800eb92:	bf00      	nop
	return s8Ret;
 800eb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	f8888fff 	.word	0xf8888fff
 800eba4:	01111000 	.word	0x01111000

0800eba8 <__errno>:
 800eba8:	4b01      	ldr	r3, [pc, #4]	; (800ebb0 <__errno+0x8>)
 800ebaa:	6818      	ldr	r0, [r3, #0]
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	24000014 	.word	0x24000014

0800ebb4 <__libc_init_array>:
 800ebb4:	b570      	push	{r4, r5, r6, lr}
 800ebb6:	4e0d      	ldr	r6, [pc, #52]	; (800ebec <__libc_init_array+0x38>)
 800ebb8:	4c0d      	ldr	r4, [pc, #52]	; (800ebf0 <__libc_init_array+0x3c>)
 800ebba:	1ba4      	subs	r4, r4, r6
 800ebbc:	10a4      	asrs	r4, r4, #2
 800ebbe:	2500      	movs	r5, #0
 800ebc0:	42a5      	cmp	r5, r4
 800ebc2:	d109      	bne.n	800ebd8 <__libc_init_array+0x24>
 800ebc4:	4e0b      	ldr	r6, [pc, #44]	; (800ebf4 <__libc_init_array+0x40>)
 800ebc6:	4c0c      	ldr	r4, [pc, #48]	; (800ebf8 <__libc_init_array+0x44>)
 800ebc8:	f000 ffc2 	bl	800fb50 <_init>
 800ebcc:	1ba4      	subs	r4, r4, r6
 800ebce:	10a4      	asrs	r4, r4, #2
 800ebd0:	2500      	movs	r5, #0
 800ebd2:	42a5      	cmp	r5, r4
 800ebd4:	d105      	bne.n	800ebe2 <__libc_init_array+0x2e>
 800ebd6:	bd70      	pop	{r4, r5, r6, pc}
 800ebd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebdc:	4798      	blx	r3
 800ebde:	3501      	adds	r5, #1
 800ebe0:	e7ee      	b.n	800ebc0 <__libc_init_array+0xc>
 800ebe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebe6:	4798      	blx	r3
 800ebe8:	3501      	adds	r5, #1
 800ebea:	e7f2      	b.n	800ebd2 <__libc_init_array+0x1e>
 800ebec:	080106d8 	.word	0x080106d8
 800ebf0:	080106d8 	.word	0x080106d8
 800ebf4:	080106d8 	.word	0x080106d8
 800ebf8:	080106dc 	.word	0x080106dc

0800ebfc <memcmp>:
 800ebfc:	b530      	push	{r4, r5, lr}
 800ebfe:	2400      	movs	r4, #0
 800ec00:	42a2      	cmp	r2, r4
 800ec02:	d101      	bne.n	800ec08 <memcmp+0xc>
 800ec04:	2000      	movs	r0, #0
 800ec06:	e007      	b.n	800ec18 <memcmp+0x1c>
 800ec08:	5d03      	ldrb	r3, [r0, r4]
 800ec0a:	3401      	adds	r4, #1
 800ec0c:	190d      	adds	r5, r1, r4
 800ec0e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ec12:	42ab      	cmp	r3, r5
 800ec14:	d0f4      	beq.n	800ec00 <memcmp+0x4>
 800ec16:	1b58      	subs	r0, r3, r5
 800ec18:	bd30      	pop	{r4, r5, pc}

0800ec1a <memset>:
 800ec1a:	4402      	add	r2, r0
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d100      	bne.n	800ec24 <memset+0xa>
 800ec22:	4770      	bx	lr
 800ec24:	f803 1b01 	strb.w	r1, [r3], #1
 800ec28:	e7f9      	b.n	800ec1e <memset+0x4>
	...

0800ec2c <iprintf>:
 800ec2c:	b40f      	push	{r0, r1, r2, r3}
 800ec2e:	4b0a      	ldr	r3, [pc, #40]	; (800ec58 <iprintf+0x2c>)
 800ec30:	b513      	push	{r0, r1, r4, lr}
 800ec32:	681c      	ldr	r4, [r3, #0]
 800ec34:	b124      	cbz	r4, 800ec40 <iprintf+0x14>
 800ec36:	69a3      	ldr	r3, [r4, #24]
 800ec38:	b913      	cbnz	r3, 800ec40 <iprintf+0x14>
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f000 fa36 	bl	800f0ac <__sinit>
 800ec40:	ab05      	add	r3, sp, #20
 800ec42:	9a04      	ldr	r2, [sp, #16]
 800ec44:	68a1      	ldr	r1, [r4, #8]
 800ec46:	9301      	str	r3, [sp, #4]
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f000 fbef 	bl	800f42c <_vfiprintf_r>
 800ec4e:	b002      	add	sp, #8
 800ec50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec54:	b004      	add	sp, #16
 800ec56:	4770      	bx	lr
 800ec58:	24000014 	.word	0x24000014

0800ec5c <putchar>:
 800ec5c:	b538      	push	{r3, r4, r5, lr}
 800ec5e:	4b08      	ldr	r3, [pc, #32]	; (800ec80 <putchar+0x24>)
 800ec60:	681c      	ldr	r4, [r3, #0]
 800ec62:	4605      	mov	r5, r0
 800ec64:	b124      	cbz	r4, 800ec70 <putchar+0x14>
 800ec66:	69a3      	ldr	r3, [r4, #24]
 800ec68:	b913      	cbnz	r3, 800ec70 <putchar+0x14>
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 fa1e 	bl	800f0ac <__sinit>
 800ec70:	68a2      	ldr	r2, [r4, #8]
 800ec72:	4629      	mov	r1, r5
 800ec74:	4620      	mov	r0, r4
 800ec76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec7a:	f000 be75 	b.w	800f968 <_putc_r>
 800ec7e:	bf00      	nop
 800ec80:	24000014 	.word	0x24000014

0800ec84 <_puts_r>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	460e      	mov	r6, r1
 800ec88:	4605      	mov	r5, r0
 800ec8a:	b118      	cbz	r0, 800ec94 <_puts_r+0x10>
 800ec8c:	6983      	ldr	r3, [r0, #24]
 800ec8e:	b90b      	cbnz	r3, 800ec94 <_puts_r+0x10>
 800ec90:	f000 fa0c 	bl	800f0ac <__sinit>
 800ec94:	69ab      	ldr	r3, [r5, #24]
 800ec96:	68ac      	ldr	r4, [r5, #8]
 800ec98:	b913      	cbnz	r3, 800eca0 <_puts_r+0x1c>
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	f000 fa06 	bl	800f0ac <__sinit>
 800eca0:	4b23      	ldr	r3, [pc, #140]	; (800ed30 <_puts_r+0xac>)
 800eca2:	429c      	cmp	r4, r3
 800eca4:	d117      	bne.n	800ecd6 <_puts_r+0x52>
 800eca6:	686c      	ldr	r4, [r5, #4]
 800eca8:	89a3      	ldrh	r3, [r4, #12]
 800ecaa:	071b      	lsls	r3, r3, #28
 800ecac:	d51d      	bpl.n	800ecea <_puts_r+0x66>
 800ecae:	6923      	ldr	r3, [r4, #16]
 800ecb0:	b1db      	cbz	r3, 800ecea <_puts_r+0x66>
 800ecb2:	3e01      	subs	r6, #1
 800ecb4:	68a3      	ldr	r3, [r4, #8]
 800ecb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	60a3      	str	r3, [r4, #8]
 800ecbe:	b9e9      	cbnz	r1, 800ecfc <_puts_r+0x78>
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	da2e      	bge.n	800ed22 <_puts_r+0x9e>
 800ecc4:	4622      	mov	r2, r4
 800ecc6:	210a      	movs	r1, #10
 800ecc8:	4628      	mov	r0, r5
 800ecca:	f000 f83f 	bl	800ed4c <__swbuf_r>
 800ecce:	3001      	adds	r0, #1
 800ecd0:	d011      	beq.n	800ecf6 <_puts_r+0x72>
 800ecd2:	200a      	movs	r0, #10
 800ecd4:	e011      	b.n	800ecfa <_puts_r+0x76>
 800ecd6:	4b17      	ldr	r3, [pc, #92]	; (800ed34 <_puts_r+0xb0>)
 800ecd8:	429c      	cmp	r4, r3
 800ecda:	d101      	bne.n	800ece0 <_puts_r+0x5c>
 800ecdc:	68ac      	ldr	r4, [r5, #8]
 800ecde:	e7e3      	b.n	800eca8 <_puts_r+0x24>
 800ece0:	4b15      	ldr	r3, [pc, #84]	; (800ed38 <_puts_r+0xb4>)
 800ece2:	429c      	cmp	r4, r3
 800ece4:	bf08      	it	eq
 800ece6:	68ec      	ldreq	r4, [r5, #12]
 800ece8:	e7de      	b.n	800eca8 <_puts_r+0x24>
 800ecea:	4621      	mov	r1, r4
 800ecec:	4628      	mov	r0, r5
 800ecee:	f000 f87f 	bl	800edf0 <__swsetup_r>
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d0dd      	beq.n	800ecb2 <_puts_r+0x2e>
 800ecf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	da04      	bge.n	800ed0a <_puts_r+0x86>
 800ed00:	69a2      	ldr	r2, [r4, #24]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	dc06      	bgt.n	800ed14 <_puts_r+0x90>
 800ed06:	290a      	cmp	r1, #10
 800ed08:	d004      	beq.n	800ed14 <_puts_r+0x90>
 800ed0a:	6823      	ldr	r3, [r4, #0]
 800ed0c:	1c5a      	adds	r2, r3, #1
 800ed0e:	6022      	str	r2, [r4, #0]
 800ed10:	7019      	strb	r1, [r3, #0]
 800ed12:	e7cf      	b.n	800ecb4 <_puts_r+0x30>
 800ed14:	4622      	mov	r2, r4
 800ed16:	4628      	mov	r0, r5
 800ed18:	f000 f818 	bl	800ed4c <__swbuf_r>
 800ed1c:	3001      	adds	r0, #1
 800ed1e:	d1c9      	bne.n	800ecb4 <_puts_r+0x30>
 800ed20:	e7e9      	b.n	800ecf6 <_puts_r+0x72>
 800ed22:	6823      	ldr	r3, [r4, #0]
 800ed24:	200a      	movs	r0, #10
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	6022      	str	r2, [r4, #0]
 800ed2a:	7018      	strb	r0, [r3, #0]
 800ed2c:	e7e5      	b.n	800ecfa <_puts_r+0x76>
 800ed2e:	bf00      	nop
 800ed30:	0801065c 	.word	0x0801065c
 800ed34:	0801067c 	.word	0x0801067c
 800ed38:	0801063c 	.word	0x0801063c

0800ed3c <puts>:
 800ed3c:	4b02      	ldr	r3, [pc, #8]	; (800ed48 <puts+0xc>)
 800ed3e:	4601      	mov	r1, r0
 800ed40:	6818      	ldr	r0, [r3, #0]
 800ed42:	f7ff bf9f 	b.w	800ec84 <_puts_r>
 800ed46:	bf00      	nop
 800ed48:	24000014 	.word	0x24000014

0800ed4c <__swbuf_r>:
 800ed4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4e:	460e      	mov	r6, r1
 800ed50:	4614      	mov	r4, r2
 800ed52:	4605      	mov	r5, r0
 800ed54:	b118      	cbz	r0, 800ed5e <__swbuf_r+0x12>
 800ed56:	6983      	ldr	r3, [r0, #24]
 800ed58:	b90b      	cbnz	r3, 800ed5e <__swbuf_r+0x12>
 800ed5a:	f000 f9a7 	bl	800f0ac <__sinit>
 800ed5e:	4b21      	ldr	r3, [pc, #132]	; (800ede4 <__swbuf_r+0x98>)
 800ed60:	429c      	cmp	r4, r3
 800ed62:	d12a      	bne.n	800edba <__swbuf_r+0x6e>
 800ed64:	686c      	ldr	r4, [r5, #4]
 800ed66:	69a3      	ldr	r3, [r4, #24]
 800ed68:	60a3      	str	r3, [r4, #8]
 800ed6a:	89a3      	ldrh	r3, [r4, #12]
 800ed6c:	071a      	lsls	r2, r3, #28
 800ed6e:	d52e      	bpl.n	800edce <__swbuf_r+0x82>
 800ed70:	6923      	ldr	r3, [r4, #16]
 800ed72:	b363      	cbz	r3, 800edce <__swbuf_r+0x82>
 800ed74:	6923      	ldr	r3, [r4, #16]
 800ed76:	6820      	ldr	r0, [r4, #0]
 800ed78:	1ac0      	subs	r0, r0, r3
 800ed7a:	6963      	ldr	r3, [r4, #20]
 800ed7c:	b2f6      	uxtb	r6, r6
 800ed7e:	4283      	cmp	r3, r0
 800ed80:	4637      	mov	r7, r6
 800ed82:	dc04      	bgt.n	800ed8e <__swbuf_r+0x42>
 800ed84:	4621      	mov	r1, r4
 800ed86:	4628      	mov	r0, r5
 800ed88:	f000 f926 	bl	800efd8 <_fflush_r>
 800ed8c:	bb28      	cbnz	r0, 800edda <__swbuf_r+0x8e>
 800ed8e:	68a3      	ldr	r3, [r4, #8]
 800ed90:	3b01      	subs	r3, #1
 800ed92:	60a3      	str	r3, [r4, #8]
 800ed94:	6823      	ldr	r3, [r4, #0]
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	6022      	str	r2, [r4, #0]
 800ed9a:	701e      	strb	r6, [r3, #0]
 800ed9c:	6963      	ldr	r3, [r4, #20]
 800ed9e:	3001      	adds	r0, #1
 800eda0:	4283      	cmp	r3, r0
 800eda2:	d004      	beq.n	800edae <__swbuf_r+0x62>
 800eda4:	89a3      	ldrh	r3, [r4, #12]
 800eda6:	07db      	lsls	r3, r3, #31
 800eda8:	d519      	bpl.n	800edde <__swbuf_r+0x92>
 800edaa:	2e0a      	cmp	r6, #10
 800edac:	d117      	bne.n	800edde <__swbuf_r+0x92>
 800edae:	4621      	mov	r1, r4
 800edb0:	4628      	mov	r0, r5
 800edb2:	f000 f911 	bl	800efd8 <_fflush_r>
 800edb6:	b190      	cbz	r0, 800edde <__swbuf_r+0x92>
 800edb8:	e00f      	b.n	800edda <__swbuf_r+0x8e>
 800edba:	4b0b      	ldr	r3, [pc, #44]	; (800ede8 <__swbuf_r+0x9c>)
 800edbc:	429c      	cmp	r4, r3
 800edbe:	d101      	bne.n	800edc4 <__swbuf_r+0x78>
 800edc0:	68ac      	ldr	r4, [r5, #8]
 800edc2:	e7d0      	b.n	800ed66 <__swbuf_r+0x1a>
 800edc4:	4b09      	ldr	r3, [pc, #36]	; (800edec <__swbuf_r+0xa0>)
 800edc6:	429c      	cmp	r4, r3
 800edc8:	bf08      	it	eq
 800edca:	68ec      	ldreq	r4, [r5, #12]
 800edcc:	e7cb      	b.n	800ed66 <__swbuf_r+0x1a>
 800edce:	4621      	mov	r1, r4
 800edd0:	4628      	mov	r0, r5
 800edd2:	f000 f80d 	bl	800edf0 <__swsetup_r>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d0cc      	beq.n	800ed74 <__swbuf_r+0x28>
 800edda:	f04f 37ff 	mov.w	r7, #4294967295
 800edde:	4638      	mov	r0, r7
 800ede0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ede2:	bf00      	nop
 800ede4:	0801065c 	.word	0x0801065c
 800ede8:	0801067c 	.word	0x0801067c
 800edec:	0801063c 	.word	0x0801063c

0800edf0 <__swsetup_r>:
 800edf0:	4b32      	ldr	r3, [pc, #200]	; (800eebc <__swsetup_r+0xcc>)
 800edf2:	b570      	push	{r4, r5, r6, lr}
 800edf4:	681d      	ldr	r5, [r3, #0]
 800edf6:	4606      	mov	r6, r0
 800edf8:	460c      	mov	r4, r1
 800edfa:	b125      	cbz	r5, 800ee06 <__swsetup_r+0x16>
 800edfc:	69ab      	ldr	r3, [r5, #24]
 800edfe:	b913      	cbnz	r3, 800ee06 <__swsetup_r+0x16>
 800ee00:	4628      	mov	r0, r5
 800ee02:	f000 f953 	bl	800f0ac <__sinit>
 800ee06:	4b2e      	ldr	r3, [pc, #184]	; (800eec0 <__swsetup_r+0xd0>)
 800ee08:	429c      	cmp	r4, r3
 800ee0a:	d10f      	bne.n	800ee2c <__swsetup_r+0x3c>
 800ee0c:	686c      	ldr	r4, [r5, #4]
 800ee0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	0715      	lsls	r5, r2, #28
 800ee16:	d42c      	bmi.n	800ee72 <__swsetup_r+0x82>
 800ee18:	06d0      	lsls	r0, r2, #27
 800ee1a:	d411      	bmi.n	800ee40 <__swsetup_r+0x50>
 800ee1c:	2209      	movs	r2, #9
 800ee1e:	6032      	str	r2, [r6, #0]
 800ee20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee24:	81a3      	strh	r3, [r4, #12]
 800ee26:	f04f 30ff 	mov.w	r0, #4294967295
 800ee2a:	e03e      	b.n	800eeaa <__swsetup_r+0xba>
 800ee2c:	4b25      	ldr	r3, [pc, #148]	; (800eec4 <__swsetup_r+0xd4>)
 800ee2e:	429c      	cmp	r4, r3
 800ee30:	d101      	bne.n	800ee36 <__swsetup_r+0x46>
 800ee32:	68ac      	ldr	r4, [r5, #8]
 800ee34:	e7eb      	b.n	800ee0e <__swsetup_r+0x1e>
 800ee36:	4b24      	ldr	r3, [pc, #144]	; (800eec8 <__swsetup_r+0xd8>)
 800ee38:	429c      	cmp	r4, r3
 800ee3a:	bf08      	it	eq
 800ee3c:	68ec      	ldreq	r4, [r5, #12]
 800ee3e:	e7e6      	b.n	800ee0e <__swsetup_r+0x1e>
 800ee40:	0751      	lsls	r1, r2, #29
 800ee42:	d512      	bpl.n	800ee6a <__swsetup_r+0x7a>
 800ee44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee46:	b141      	cbz	r1, 800ee5a <__swsetup_r+0x6a>
 800ee48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee4c:	4299      	cmp	r1, r3
 800ee4e:	d002      	beq.n	800ee56 <__swsetup_r+0x66>
 800ee50:	4630      	mov	r0, r6
 800ee52:	f000 fa19 	bl	800f288 <_free_r>
 800ee56:	2300      	movs	r3, #0
 800ee58:	6363      	str	r3, [r4, #52]	; 0x34
 800ee5a:	89a3      	ldrh	r3, [r4, #12]
 800ee5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee60:	81a3      	strh	r3, [r4, #12]
 800ee62:	2300      	movs	r3, #0
 800ee64:	6063      	str	r3, [r4, #4]
 800ee66:	6923      	ldr	r3, [r4, #16]
 800ee68:	6023      	str	r3, [r4, #0]
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	f043 0308 	orr.w	r3, r3, #8
 800ee70:	81a3      	strh	r3, [r4, #12]
 800ee72:	6923      	ldr	r3, [r4, #16]
 800ee74:	b94b      	cbnz	r3, 800ee8a <__swsetup_r+0x9a>
 800ee76:	89a3      	ldrh	r3, [r4, #12]
 800ee78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee80:	d003      	beq.n	800ee8a <__swsetup_r+0x9a>
 800ee82:	4621      	mov	r1, r4
 800ee84:	4630      	mov	r0, r6
 800ee86:	f000 f9bf 	bl	800f208 <__smakebuf_r>
 800ee8a:	89a2      	ldrh	r2, [r4, #12]
 800ee8c:	f012 0301 	ands.w	r3, r2, #1
 800ee90:	d00c      	beq.n	800eeac <__swsetup_r+0xbc>
 800ee92:	2300      	movs	r3, #0
 800ee94:	60a3      	str	r3, [r4, #8]
 800ee96:	6963      	ldr	r3, [r4, #20]
 800ee98:	425b      	negs	r3, r3
 800ee9a:	61a3      	str	r3, [r4, #24]
 800ee9c:	6923      	ldr	r3, [r4, #16]
 800ee9e:	b953      	cbnz	r3, 800eeb6 <__swsetup_r+0xc6>
 800eea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eea4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800eea8:	d1ba      	bne.n	800ee20 <__swsetup_r+0x30>
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}
 800eeac:	0792      	lsls	r2, r2, #30
 800eeae:	bf58      	it	pl
 800eeb0:	6963      	ldrpl	r3, [r4, #20]
 800eeb2:	60a3      	str	r3, [r4, #8]
 800eeb4:	e7f2      	b.n	800ee9c <__swsetup_r+0xac>
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	e7f7      	b.n	800eeaa <__swsetup_r+0xba>
 800eeba:	bf00      	nop
 800eebc:	24000014 	.word	0x24000014
 800eec0:	0801065c 	.word	0x0801065c
 800eec4:	0801067c 	.word	0x0801067c
 800eec8:	0801063c 	.word	0x0801063c

0800eecc <__sflush_r>:
 800eecc:	898a      	ldrh	r2, [r1, #12]
 800eece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eed2:	4605      	mov	r5, r0
 800eed4:	0710      	lsls	r0, r2, #28
 800eed6:	460c      	mov	r4, r1
 800eed8:	d458      	bmi.n	800ef8c <__sflush_r+0xc0>
 800eeda:	684b      	ldr	r3, [r1, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	dc05      	bgt.n	800eeec <__sflush_r+0x20>
 800eee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	dc02      	bgt.n	800eeec <__sflush_r+0x20>
 800eee6:	2000      	movs	r0, #0
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eeee:	2e00      	cmp	r6, #0
 800eef0:	d0f9      	beq.n	800eee6 <__sflush_r+0x1a>
 800eef2:	2300      	movs	r3, #0
 800eef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eef8:	682f      	ldr	r7, [r5, #0]
 800eefa:	6a21      	ldr	r1, [r4, #32]
 800eefc:	602b      	str	r3, [r5, #0]
 800eefe:	d032      	beq.n	800ef66 <__sflush_r+0x9a>
 800ef00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef02:	89a3      	ldrh	r3, [r4, #12]
 800ef04:	075a      	lsls	r2, r3, #29
 800ef06:	d505      	bpl.n	800ef14 <__sflush_r+0x48>
 800ef08:	6863      	ldr	r3, [r4, #4]
 800ef0a:	1ac0      	subs	r0, r0, r3
 800ef0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef0e:	b10b      	cbz	r3, 800ef14 <__sflush_r+0x48>
 800ef10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef12:	1ac0      	subs	r0, r0, r3
 800ef14:	2300      	movs	r3, #0
 800ef16:	4602      	mov	r2, r0
 800ef18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef1a:	6a21      	ldr	r1, [r4, #32]
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	47b0      	blx	r6
 800ef20:	1c43      	adds	r3, r0, #1
 800ef22:	89a3      	ldrh	r3, [r4, #12]
 800ef24:	d106      	bne.n	800ef34 <__sflush_r+0x68>
 800ef26:	6829      	ldr	r1, [r5, #0]
 800ef28:	291d      	cmp	r1, #29
 800ef2a:	d848      	bhi.n	800efbe <__sflush_r+0xf2>
 800ef2c:	4a29      	ldr	r2, [pc, #164]	; (800efd4 <__sflush_r+0x108>)
 800ef2e:	40ca      	lsrs	r2, r1
 800ef30:	07d6      	lsls	r6, r2, #31
 800ef32:	d544      	bpl.n	800efbe <__sflush_r+0xf2>
 800ef34:	2200      	movs	r2, #0
 800ef36:	6062      	str	r2, [r4, #4]
 800ef38:	04d9      	lsls	r1, r3, #19
 800ef3a:	6922      	ldr	r2, [r4, #16]
 800ef3c:	6022      	str	r2, [r4, #0]
 800ef3e:	d504      	bpl.n	800ef4a <__sflush_r+0x7e>
 800ef40:	1c42      	adds	r2, r0, #1
 800ef42:	d101      	bne.n	800ef48 <__sflush_r+0x7c>
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	b903      	cbnz	r3, 800ef4a <__sflush_r+0x7e>
 800ef48:	6560      	str	r0, [r4, #84]	; 0x54
 800ef4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef4c:	602f      	str	r7, [r5, #0]
 800ef4e:	2900      	cmp	r1, #0
 800ef50:	d0c9      	beq.n	800eee6 <__sflush_r+0x1a>
 800ef52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef56:	4299      	cmp	r1, r3
 800ef58:	d002      	beq.n	800ef60 <__sflush_r+0x94>
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f000 f994 	bl	800f288 <_free_r>
 800ef60:	2000      	movs	r0, #0
 800ef62:	6360      	str	r0, [r4, #52]	; 0x34
 800ef64:	e7c0      	b.n	800eee8 <__sflush_r+0x1c>
 800ef66:	2301      	movs	r3, #1
 800ef68:	4628      	mov	r0, r5
 800ef6a:	47b0      	blx	r6
 800ef6c:	1c41      	adds	r1, r0, #1
 800ef6e:	d1c8      	bne.n	800ef02 <__sflush_r+0x36>
 800ef70:	682b      	ldr	r3, [r5, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d0c5      	beq.n	800ef02 <__sflush_r+0x36>
 800ef76:	2b1d      	cmp	r3, #29
 800ef78:	d001      	beq.n	800ef7e <__sflush_r+0xb2>
 800ef7a:	2b16      	cmp	r3, #22
 800ef7c:	d101      	bne.n	800ef82 <__sflush_r+0xb6>
 800ef7e:	602f      	str	r7, [r5, #0]
 800ef80:	e7b1      	b.n	800eee6 <__sflush_r+0x1a>
 800ef82:	89a3      	ldrh	r3, [r4, #12]
 800ef84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef88:	81a3      	strh	r3, [r4, #12]
 800ef8a:	e7ad      	b.n	800eee8 <__sflush_r+0x1c>
 800ef8c:	690f      	ldr	r7, [r1, #16]
 800ef8e:	2f00      	cmp	r7, #0
 800ef90:	d0a9      	beq.n	800eee6 <__sflush_r+0x1a>
 800ef92:	0793      	lsls	r3, r2, #30
 800ef94:	680e      	ldr	r6, [r1, #0]
 800ef96:	bf08      	it	eq
 800ef98:	694b      	ldreq	r3, [r1, #20]
 800ef9a:	600f      	str	r7, [r1, #0]
 800ef9c:	bf18      	it	ne
 800ef9e:	2300      	movne	r3, #0
 800efa0:	eba6 0807 	sub.w	r8, r6, r7
 800efa4:	608b      	str	r3, [r1, #8]
 800efa6:	f1b8 0f00 	cmp.w	r8, #0
 800efaa:	dd9c      	ble.n	800eee6 <__sflush_r+0x1a>
 800efac:	4643      	mov	r3, r8
 800efae:	463a      	mov	r2, r7
 800efb0:	6a21      	ldr	r1, [r4, #32]
 800efb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efb4:	4628      	mov	r0, r5
 800efb6:	47b0      	blx	r6
 800efb8:	2800      	cmp	r0, #0
 800efba:	dc06      	bgt.n	800efca <__sflush_r+0xfe>
 800efbc:	89a3      	ldrh	r3, [r4, #12]
 800efbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efc2:	81a3      	strh	r3, [r4, #12]
 800efc4:	f04f 30ff 	mov.w	r0, #4294967295
 800efc8:	e78e      	b.n	800eee8 <__sflush_r+0x1c>
 800efca:	4407      	add	r7, r0
 800efcc:	eba8 0800 	sub.w	r8, r8, r0
 800efd0:	e7e9      	b.n	800efa6 <__sflush_r+0xda>
 800efd2:	bf00      	nop
 800efd4:	20400001 	.word	0x20400001

0800efd8 <_fflush_r>:
 800efd8:	b538      	push	{r3, r4, r5, lr}
 800efda:	690b      	ldr	r3, [r1, #16]
 800efdc:	4605      	mov	r5, r0
 800efde:	460c      	mov	r4, r1
 800efe0:	b1db      	cbz	r3, 800f01a <_fflush_r+0x42>
 800efe2:	b118      	cbz	r0, 800efec <_fflush_r+0x14>
 800efe4:	6983      	ldr	r3, [r0, #24]
 800efe6:	b90b      	cbnz	r3, 800efec <_fflush_r+0x14>
 800efe8:	f000 f860 	bl	800f0ac <__sinit>
 800efec:	4b0c      	ldr	r3, [pc, #48]	; (800f020 <_fflush_r+0x48>)
 800efee:	429c      	cmp	r4, r3
 800eff0:	d109      	bne.n	800f006 <_fflush_r+0x2e>
 800eff2:	686c      	ldr	r4, [r5, #4]
 800eff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eff8:	b17b      	cbz	r3, 800f01a <_fflush_r+0x42>
 800effa:	4621      	mov	r1, r4
 800effc:	4628      	mov	r0, r5
 800effe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f002:	f7ff bf63 	b.w	800eecc <__sflush_r>
 800f006:	4b07      	ldr	r3, [pc, #28]	; (800f024 <_fflush_r+0x4c>)
 800f008:	429c      	cmp	r4, r3
 800f00a:	d101      	bne.n	800f010 <_fflush_r+0x38>
 800f00c:	68ac      	ldr	r4, [r5, #8]
 800f00e:	e7f1      	b.n	800eff4 <_fflush_r+0x1c>
 800f010:	4b05      	ldr	r3, [pc, #20]	; (800f028 <_fflush_r+0x50>)
 800f012:	429c      	cmp	r4, r3
 800f014:	bf08      	it	eq
 800f016:	68ec      	ldreq	r4, [r5, #12]
 800f018:	e7ec      	b.n	800eff4 <_fflush_r+0x1c>
 800f01a:	2000      	movs	r0, #0
 800f01c:	bd38      	pop	{r3, r4, r5, pc}
 800f01e:	bf00      	nop
 800f020:	0801065c 	.word	0x0801065c
 800f024:	0801067c 	.word	0x0801067c
 800f028:	0801063c 	.word	0x0801063c

0800f02c <std>:
 800f02c:	2300      	movs	r3, #0
 800f02e:	b510      	push	{r4, lr}
 800f030:	4604      	mov	r4, r0
 800f032:	e9c0 3300 	strd	r3, r3, [r0]
 800f036:	6083      	str	r3, [r0, #8]
 800f038:	8181      	strh	r1, [r0, #12]
 800f03a:	6643      	str	r3, [r0, #100]	; 0x64
 800f03c:	81c2      	strh	r2, [r0, #14]
 800f03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f042:	6183      	str	r3, [r0, #24]
 800f044:	4619      	mov	r1, r3
 800f046:	2208      	movs	r2, #8
 800f048:	305c      	adds	r0, #92	; 0x5c
 800f04a:	f7ff fde6 	bl	800ec1a <memset>
 800f04e:	4b05      	ldr	r3, [pc, #20]	; (800f064 <std+0x38>)
 800f050:	6263      	str	r3, [r4, #36]	; 0x24
 800f052:	4b05      	ldr	r3, [pc, #20]	; (800f068 <std+0x3c>)
 800f054:	62a3      	str	r3, [r4, #40]	; 0x28
 800f056:	4b05      	ldr	r3, [pc, #20]	; (800f06c <std+0x40>)
 800f058:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f05a:	4b05      	ldr	r3, [pc, #20]	; (800f070 <std+0x44>)
 800f05c:	6224      	str	r4, [r4, #32]
 800f05e:	6323      	str	r3, [r4, #48]	; 0x30
 800f060:	bd10      	pop	{r4, pc}
 800f062:	bf00      	nop
 800f064:	0800f9f5 	.word	0x0800f9f5
 800f068:	0800fa17 	.word	0x0800fa17
 800f06c:	0800fa4f 	.word	0x0800fa4f
 800f070:	0800fa73 	.word	0x0800fa73

0800f074 <_cleanup_r>:
 800f074:	4901      	ldr	r1, [pc, #4]	; (800f07c <_cleanup_r+0x8>)
 800f076:	f000 b885 	b.w	800f184 <_fwalk_reent>
 800f07a:	bf00      	nop
 800f07c:	0800efd9 	.word	0x0800efd9

0800f080 <__sfmoreglue>:
 800f080:	b570      	push	{r4, r5, r6, lr}
 800f082:	1e4a      	subs	r2, r1, #1
 800f084:	2568      	movs	r5, #104	; 0x68
 800f086:	4355      	muls	r5, r2
 800f088:	460e      	mov	r6, r1
 800f08a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f08e:	f000 f949 	bl	800f324 <_malloc_r>
 800f092:	4604      	mov	r4, r0
 800f094:	b140      	cbz	r0, 800f0a8 <__sfmoreglue+0x28>
 800f096:	2100      	movs	r1, #0
 800f098:	e9c0 1600 	strd	r1, r6, [r0]
 800f09c:	300c      	adds	r0, #12
 800f09e:	60a0      	str	r0, [r4, #8]
 800f0a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0a4:	f7ff fdb9 	bl	800ec1a <memset>
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	bd70      	pop	{r4, r5, r6, pc}

0800f0ac <__sinit>:
 800f0ac:	6983      	ldr	r3, [r0, #24]
 800f0ae:	b510      	push	{r4, lr}
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	bb33      	cbnz	r3, 800f102 <__sinit+0x56>
 800f0b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f0b8:	6503      	str	r3, [r0, #80]	; 0x50
 800f0ba:	4b12      	ldr	r3, [pc, #72]	; (800f104 <__sinit+0x58>)
 800f0bc:	4a12      	ldr	r2, [pc, #72]	; (800f108 <__sinit+0x5c>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6282      	str	r2, [r0, #40]	; 0x28
 800f0c2:	4298      	cmp	r0, r3
 800f0c4:	bf04      	itt	eq
 800f0c6:	2301      	moveq	r3, #1
 800f0c8:	6183      	streq	r3, [r0, #24]
 800f0ca:	f000 f81f 	bl	800f10c <__sfp>
 800f0ce:	6060      	str	r0, [r4, #4]
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f000 f81b 	bl	800f10c <__sfp>
 800f0d6:	60a0      	str	r0, [r4, #8]
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f000 f817 	bl	800f10c <__sfp>
 800f0de:	2200      	movs	r2, #0
 800f0e0:	60e0      	str	r0, [r4, #12]
 800f0e2:	2104      	movs	r1, #4
 800f0e4:	6860      	ldr	r0, [r4, #4]
 800f0e6:	f7ff ffa1 	bl	800f02c <std>
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	2109      	movs	r1, #9
 800f0ee:	68a0      	ldr	r0, [r4, #8]
 800f0f0:	f7ff ff9c 	bl	800f02c <std>
 800f0f4:	2202      	movs	r2, #2
 800f0f6:	2112      	movs	r1, #18
 800f0f8:	68e0      	ldr	r0, [r4, #12]
 800f0fa:	f7ff ff97 	bl	800f02c <std>
 800f0fe:	2301      	movs	r3, #1
 800f100:	61a3      	str	r3, [r4, #24]
 800f102:	bd10      	pop	{r4, pc}
 800f104:	08010638 	.word	0x08010638
 800f108:	0800f075 	.word	0x0800f075

0800f10c <__sfp>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	4b1b      	ldr	r3, [pc, #108]	; (800f17c <__sfp+0x70>)
 800f110:	681e      	ldr	r6, [r3, #0]
 800f112:	69b3      	ldr	r3, [r6, #24]
 800f114:	4607      	mov	r7, r0
 800f116:	b913      	cbnz	r3, 800f11e <__sfp+0x12>
 800f118:	4630      	mov	r0, r6
 800f11a:	f7ff ffc7 	bl	800f0ac <__sinit>
 800f11e:	3648      	adds	r6, #72	; 0x48
 800f120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f124:	3b01      	subs	r3, #1
 800f126:	d503      	bpl.n	800f130 <__sfp+0x24>
 800f128:	6833      	ldr	r3, [r6, #0]
 800f12a:	b133      	cbz	r3, 800f13a <__sfp+0x2e>
 800f12c:	6836      	ldr	r6, [r6, #0]
 800f12e:	e7f7      	b.n	800f120 <__sfp+0x14>
 800f130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f134:	b16d      	cbz	r5, 800f152 <__sfp+0x46>
 800f136:	3468      	adds	r4, #104	; 0x68
 800f138:	e7f4      	b.n	800f124 <__sfp+0x18>
 800f13a:	2104      	movs	r1, #4
 800f13c:	4638      	mov	r0, r7
 800f13e:	f7ff ff9f 	bl	800f080 <__sfmoreglue>
 800f142:	6030      	str	r0, [r6, #0]
 800f144:	2800      	cmp	r0, #0
 800f146:	d1f1      	bne.n	800f12c <__sfp+0x20>
 800f148:	230c      	movs	r3, #12
 800f14a:	603b      	str	r3, [r7, #0]
 800f14c:	4604      	mov	r4, r0
 800f14e:	4620      	mov	r0, r4
 800f150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f152:	4b0b      	ldr	r3, [pc, #44]	; (800f180 <__sfp+0x74>)
 800f154:	6665      	str	r5, [r4, #100]	; 0x64
 800f156:	e9c4 5500 	strd	r5, r5, [r4]
 800f15a:	60a5      	str	r5, [r4, #8]
 800f15c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f160:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f164:	2208      	movs	r2, #8
 800f166:	4629      	mov	r1, r5
 800f168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f16c:	f7ff fd55 	bl	800ec1a <memset>
 800f170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f178:	e7e9      	b.n	800f14e <__sfp+0x42>
 800f17a:	bf00      	nop
 800f17c:	08010638 	.word	0x08010638
 800f180:	ffff0001 	.word	0xffff0001

0800f184 <_fwalk_reent>:
 800f184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f188:	4680      	mov	r8, r0
 800f18a:	4689      	mov	r9, r1
 800f18c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f190:	2600      	movs	r6, #0
 800f192:	b914      	cbnz	r4, 800f19a <_fwalk_reent+0x16>
 800f194:	4630      	mov	r0, r6
 800f196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f19a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f19e:	3f01      	subs	r7, #1
 800f1a0:	d501      	bpl.n	800f1a6 <_fwalk_reent+0x22>
 800f1a2:	6824      	ldr	r4, [r4, #0]
 800f1a4:	e7f5      	b.n	800f192 <_fwalk_reent+0xe>
 800f1a6:	89ab      	ldrh	r3, [r5, #12]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d907      	bls.n	800f1bc <_fwalk_reent+0x38>
 800f1ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	d003      	beq.n	800f1bc <_fwalk_reent+0x38>
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	47c8      	blx	r9
 800f1ba:	4306      	orrs	r6, r0
 800f1bc:	3568      	adds	r5, #104	; 0x68
 800f1be:	e7ee      	b.n	800f19e <_fwalk_reent+0x1a>

0800f1c0 <__swhatbuf_r>:
 800f1c0:	b570      	push	{r4, r5, r6, lr}
 800f1c2:	460e      	mov	r6, r1
 800f1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c8:	2900      	cmp	r1, #0
 800f1ca:	b096      	sub	sp, #88	; 0x58
 800f1cc:	4614      	mov	r4, r2
 800f1ce:	461d      	mov	r5, r3
 800f1d0:	da07      	bge.n	800f1e2 <__swhatbuf_r+0x22>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	602b      	str	r3, [r5, #0]
 800f1d6:	89b3      	ldrh	r3, [r6, #12]
 800f1d8:	061a      	lsls	r2, r3, #24
 800f1da:	d410      	bmi.n	800f1fe <__swhatbuf_r+0x3e>
 800f1dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1e0:	e00e      	b.n	800f200 <__swhatbuf_r+0x40>
 800f1e2:	466a      	mov	r2, sp
 800f1e4:	f000 fc6c 	bl	800fac0 <_fstat_r>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	dbf2      	blt.n	800f1d2 <__swhatbuf_r+0x12>
 800f1ec:	9a01      	ldr	r2, [sp, #4]
 800f1ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f1f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f1f6:	425a      	negs	r2, r3
 800f1f8:	415a      	adcs	r2, r3
 800f1fa:	602a      	str	r2, [r5, #0]
 800f1fc:	e7ee      	b.n	800f1dc <__swhatbuf_r+0x1c>
 800f1fe:	2340      	movs	r3, #64	; 0x40
 800f200:	2000      	movs	r0, #0
 800f202:	6023      	str	r3, [r4, #0]
 800f204:	b016      	add	sp, #88	; 0x58
 800f206:	bd70      	pop	{r4, r5, r6, pc}

0800f208 <__smakebuf_r>:
 800f208:	898b      	ldrh	r3, [r1, #12]
 800f20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f20c:	079d      	lsls	r5, r3, #30
 800f20e:	4606      	mov	r6, r0
 800f210:	460c      	mov	r4, r1
 800f212:	d507      	bpl.n	800f224 <__smakebuf_r+0x1c>
 800f214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	6123      	str	r3, [r4, #16]
 800f21c:	2301      	movs	r3, #1
 800f21e:	6163      	str	r3, [r4, #20]
 800f220:	b002      	add	sp, #8
 800f222:	bd70      	pop	{r4, r5, r6, pc}
 800f224:	ab01      	add	r3, sp, #4
 800f226:	466a      	mov	r2, sp
 800f228:	f7ff ffca 	bl	800f1c0 <__swhatbuf_r>
 800f22c:	9900      	ldr	r1, [sp, #0]
 800f22e:	4605      	mov	r5, r0
 800f230:	4630      	mov	r0, r6
 800f232:	f000 f877 	bl	800f324 <_malloc_r>
 800f236:	b948      	cbnz	r0, 800f24c <__smakebuf_r+0x44>
 800f238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f23c:	059a      	lsls	r2, r3, #22
 800f23e:	d4ef      	bmi.n	800f220 <__smakebuf_r+0x18>
 800f240:	f023 0303 	bic.w	r3, r3, #3
 800f244:	f043 0302 	orr.w	r3, r3, #2
 800f248:	81a3      	strh	r3, [r4, #12]
 800f24a:	e7e3      	b.n	800f214 <__smakebuf_r+0xc>
 800f24c:	4b0d      	ldr	r3, [pc, #52]	; (800f284 <__smakebuf_r+0x7c>)
 800f24e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	6020      	str	r0, [r4, #0]
 800f254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f258:	81a3      	strh	r3, [r4, #12]
 800f25a:	9b00      	ldr	r3, [sp, #0]
 800f25c:	6163      	str	r3, [r4, #20]
 800f25e:	9b01      	ldr	r3, [sp, #4]
 800f260:	6120      	str	r0, [r4, #16]
 800f262:	b15b      	cbz	r3, 800f27c <__smakebuf_r+0x74>
 800f264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f268:	4630      	mov	r0, r6
 800f26a:	f000 fc3b 	bl	800fae4 <_isatty_r>
 800f26e:	b128      	cbz	r0, 800f27c <__smakebuf_r+0x74>
 800f270:	89a3      	ldrh	r3, [r4, #12]
 800f272:	f023 0303 	bic.w	r3, r3, #3
 800f276:	f043 0301 	orr.w	r3, r3, #1
 800f27a:	81a3      	strh	r3, [r4, #12]
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	431d      	orrs	r5, r3
 800f280:	81a5      	strh	r5, [r4, #12]
 800f282:	e7cd      	b.n	800f220 <__smakebuf_r+0x18>
 800f284:	0800f075 	.word	0x0800f075

0800f288 <_free_r>:
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	4605      	mov	r5, r0
 800f28c:	2900      	cmp	r1, #0
 800f28e:	d045      	beq.n	800f31c <_free_r+0x94>
 800f290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f294:	1f0c      	subs	r4, r1, #4
 800f296:	2b00      	cmp	r3, #0
 800f298:	bfb8      	it	lt
 800f29a:	18e4      	addlt	r4, r4, r3
 800f29c:	f000 fc44 	bl	800fb28 <__malloc_lock>
 800f2a0:	4a1f      	ldr	r2, [pc, #124]	; (800f320 <_free_r+0x98>)
 800f2a2:	6813      	ldr	r3, [r2, #0]
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	b933      	cbnz	r3, 800f2b6 <_free_r+0x2e>
 800f2a8:	6063      	str	r3, [r4, #4]
 800f2aa:	6014      	str	r4, [r2, #0]
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2b2:	f000 bc3a 	b.w	800fb2a <__malloc_unlock>
 800f2b6:	42a3      	cmp	r3, r4
 800f2b8:	d90c      	bls.n	800f2d4 <_free_r+0x4c>
 800f2ba:	6821      	ldr	r1, [r4, #0]
 800f2bc:	1862      	adds	r2, r4, r1
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	bf04      	itt	eq
 800f2c2:	681a      	ldreq	r2, [r3, #0]
 800f2c4:	685b      	ldreq	r3, [r3, #4]
 800f2c6:	6063      	str	r3, [r4, #4]
 800f2c8:	bf04      	itt	eq
 800f2ca:	1852      	addeq	r2, r2, r1
 800f2cc:	6022      	streq	r2, [r4, #0]
 800f2ce:	6004      	str	r4, [r0, #0]
 800f2d0:	e7ec      	b.n	800f2ac <_free_r+0x24>
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	685a      	ldr	r2, [r3, #4]
 800f2d6:	b10a      	cbz	r2, 800f2dc <_free_r+0x54>
 800f2d8:	42a2      	cmp	r2, r4
 800f2da:	d9fa      	bls.n	800f2d2 <_free_r+0x4a>
 800f2dc:	6819      	ldr	r1, [r3, #0]
 800f2de:	1858      	adds	r0, r3, r1
 800f2e0:	42a0      	cmp	r0, r4
 800f2e2:	d10b      	bne.n	800f2fc <_free_r+0x74>
 800f2e4:	6820      	ldr	r0, [r4, #0]
 800f2e6:	4401      	add	r1, r0
 800f2e8:	1858      	adds	r0, r3, r1
 800f2ea:	4282      	cmp	r2, r0
 800f2ec:	6019      	str	r1, [r3, #0]
 800f2ee:	d1dd      	bne.n	800f2ac <_free_r+0x24>
 800f2f0:	6810      	ldr	r0, [r2, #0]
 800f2f2:	6852      	ldr	r2, [r2, #4]
 800f2f4:	605a      	str	r2, [r3, #4]
 800f2f6:	4401      	add	r1, r0
 800f2f8:	6019      	str	r1, [r3, #0]
 800f2fa:	e7d7      	b.n	800f2ac <_free_r+0x24>
 800f2fc:	d902      	bls.n	800f304 <_free_r+0x7c>
 800f2fe:	230c      	movs	r3, #12
 800f300:	602b      	str	r3, [r5, #0]
 800f302:	e7d3      	b.n	800f2ac <_free_r+0x24>
 800f304:	6820      	ldr	r0, [r4, #0]
 800f306:	1821      	adds	r1, r4, r0
 800f308:	428a      	cmp	r2, r1
 800f30a:	bf04      	itt	eq
 800f30c:	6811      	ldreq	r1, [r2, #0]
 800f30e:	6852      	ldreq	r2, [r2, #4]
 800f310:	6062      	str	r2, [r4, #4]
 800f312:	bf04      	itt	eq
 800f314:	1809      	addeq	r1, r1, r0
 800f316:	6021      	streq	r1, [r4, #0]
 800f318:	605c      	str	r4, [r3, #4]
 800f31a:	e7c7      	b.n	800f2ac <_free_r+0x24>
 800f31c:	bd38      	pop	{r3, r4, r5, pc}
 800f31e:	bf00      	nop
 800f320:	240001d8 	.word	0x240001d8

0800f324 <_malloc_r>:
 800f324:	b570      	push	{r4, r5, r6, lr}
 800f326:	1ccd      	adds	r5, r1, #3
 800f328:	f025 0503 	bic.w	r5, r5, #3
 800f32c:	3508      	adds	r5, #8
 800f32e:	2d0c      	cmp	r5, #12
 800f330:	bf38      	it	cc
 800f332:	250c      	movcc	r5, #12
 800f334:	2d00      	cmp	r5, #0
 800f336:	4606      	mov	r6, r0
 800f338:	db01      	blt.n	800f33e <_malloc_r+0x1a>
 800f33a:	42a9      	cmp	r1, r5
 800f33c:	d903      	bls.n	800f346 <_malloc_r+0x22>
 800f33e:	230c      	movs	r3, #12
 800f340:	6033      	str	r3, [r6, #0]
 800f342:	2000      	movs	r0, #0
 800f344:	bd70      	pop	{r4, r5, r6, pc}
 800f346:	f000 fbef 	bl	800fb28 <__malloc_lock>
 800f34a:	4a21      	ldr	r2, [pc, #132]	; (800f3d0 <_malloc_r+0xac>)
 800f34c:	6814      	ldr	r4, [r2, #0]
 800f34e:	4621      	mov	r1, r4
 800f350:	b991      	cbnz	r1, 800f378 <_malloc_r+0x54>
 800f352:	4c20      	ldr	r4, [pc, #128]	; (800f3d4 <_malloc_r+0xb0>)
 800f354:	6823      	ldr	r3, [r4, #0]
 800f356:	b91b      	cbnz	r3, 800f360 <_malloc_r+0x3c>
 800f358:	4630      	mov	r0, r6
 800f35a:	f000 fb3b 	bl	800f9d4 <_sbrk_r>
 800f35e:	6020      	str	r0, [r4, #0]
 800f360:	4629      	mov	r1, r5
 800f362:	4630      	mov	r0, r6
 800f364:	f000 fb36 	bl	800f9d4 <_sbrk_r>
 800f368:	1c43      	adds	r3, r0, #1
 800f36a:	d124      	bne.n	800f3b6 <_malloc_r+0x92>
 800f36c:	230c      	movs	r3, #12
 800f36e:	6033      	str	r3, [r6, #0]
 800f370:	4630      	mov	r0, r6
 800f372:	f000 fbda 	bl	800fb2a <__malloc_unlock>
 800f376:	e7e4      	b.n	800f342 <_malloc_r+0x1e>
 800f378:	680b      	ldr	r3, [r1, #0]
 800f37a:	1b5b      	subs	r3, r3, r5
 800f37c:	d418      	bmi.n	800f3b0 <_malloc_r+0x8c>
 800f37e:	2b0b      	cmp	r3, #11
 800f380:	d90f      	bls.n	800f3a2 <_malloc_r+0x7e>
 800f382:	600b      	str	r3, [r1, #0]
 800f384:	50cd      	str	r5, [r1, r3]
 800f386:	18cc      	adds	r4, r1, r3
 800f388:	4630      	mov	r0, r6
 800f38a:	f000 fbce 	bl	800fb2a <__malloc_unlock>
 800f38e:	f104 000b 	add.w	r0, r4, #11
 800f392:	1d23      	adds	r3, r4, #4
 800f394:	f020 0007 	bic.w	r0, r0, #7
 800f398:	1ac3      	subs	r3, r0, r3
 800f39a:	d0d3      	beq.n	800f344 <_malloc_r+0x20>
 800f39c:	425a      	negs	r2, r3
 800f39e:	50e2      	str	r2, [r4, r3]
 800f3a0:	e7d0      	b.n	800f344 <_malloc_r+0x20>
 800f3a2:	428c      	cmp	r4, r1
 800f3a4:	684b      	ldr	r3, [r1, #4]
 800f3a6:	bf16      	itet	ne
 800f3a8:	6063      	strne	r3, [r4, #4]
 800f3aa:	6013      	streq	r3, [r2, #0]
 800f3ac:	460c      	movne	r4, r1
 800f3ae:	e7eb      	b.n	800f388 <_malloc_r+0x64>
 800f3b0:	460c      	mov	r4, r1
 800f3b2:	6849      	ldr	r1, [r1, #4]
 800f3b4:	e7cc      	b.n	800f350 <_malloc_r+0x2c>
 800f3b6:	1cc4      	adds	r4, r0, #3
 800f3b8:	f024 0403 	bic.w	r4, r4, #3
 800f3bc:	42a0      	cmp	r0, r4
 800f3be:	d005      	beq.n	800f3cc <_malloc_r+0xa8>
 800f3c0:	1a21      	subs	r1, r4, r0
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f000 fb06 	bl	800f9d4 <_sbrk_r>
 800f3c8:	3001      	adds	r0, #1
 800f3ca:	d0cf      	beq.n	800f36c <_malloc_r+0x48>
 800f3cc:	6025      	str	r5, [r4, #0]
 800f3ce:	e7db      	b.n	800f388 <_malloc_r+0x64>
 800f3d0:	240001d8 	.word	0x240001d8
 800f3d4:	240001dc 	.word	0x240001dc

0800f3d8 <__sfputc_r>:
 800f3d8:	6893      	ldr	r3, [r2, #8]
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	b410      	push	{r4}
 800f3e0:	6093      	str	r3, [r2, #8]
 800f3e2:	da08      	bge.n	800f3f6 <__sfputc_r+0x1e>
 800f3e4:	6994      	ldr	r4, [r2, #24]
 800f3e6:	42a3      	cmp	r3, r4
 800f3e8:	db01      	blt.n	800f3ee <__sfputc_r+0x16>
 800f3ea:	290a      	cmp	r1, #10
 800f3ec:	d103      	bne.n	800f3f6 <__sfputc_r+0x1e>
 800f3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3f2:	f7ff bcab 	b.w	800ed4c <__swbuf_r>
 800f3f6:	6813      	ldr	r3, [r2, #0]
 800f3f8:	1c58      	adds	r0, r3, #1
 800f3fa:	6010      	str	r0, [r2, #0]
 800f3fc:	7019      	strb	r1, [r3, #0]
 800f3fe:	4608      	mov	r0, r1
 800f400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <__sfputs_r>:
 800f406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f408:	4606      	mov	r6, r0
 800f40a:	460f      	mov	r7, r1
 800f40c:	4614      	mov	r4, r2
 800f40e:	18d5      	adds	r5, r2, r3
 800f410:	42ac      	cmp	r4, r5
 800f412:	d101      	bne.n	800f418 <__sfputs_r+0x12>
 800f414:	2000      	movs	r0, #0
 800f416:	e007      	b.n	800f428 <__sfputs_r+0x22>
 800f418:	463a      	mov	r2, r7
 800f41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f41e:	4630      	mov	r0, r6
 800f420:	f7ff ffda 	bl	800f3d8 <__sfputc_r>
 800f424:	1c43      	adds	r3, r0, #1
 800f426:	d1f3      	bne.n	800f410 <__sfputs_r+0xa>
 800f428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f42c <_vfiprintf_r>:
 800f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f430:	460c      	mov	r4, r1
 800f432:	b09d      	sub	sp, #116	; 0x74
 800f434:	4617      	mov	r7, r2
 800f436:	461d      	mov	r5, r3
 800f438:	4606      	mov	r6, r0
 800f43a:	b118      	cbz	r0, 800f444 <_vfiprintf_r+0x18>
 800f43c:	6983      	ldr	r3, [r0, #24]
 800f43e:	b90b      	cbnz	r3, 800f444 <_vfiprintf_r+0x18>
 800f440:	f7ff fe34 	bl	800f0ac <__sinit>
 800f444:	4b7c      	ldr	r3, [pc, #496]	; (800f638 <_vfiprintf_r+0x20c>)
 800f446:	429c      	cmp	r4, r3
 800f448:	d158      	bne.n	800f4fc <_vfiprintf_r+0xd0>
 800f44a:	6874      	ldr	r4, [r6, #4]
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	0718      	lsls	r0, r3, #28
 800f450:	d55e      	bpl.n	800f510 <_vfiprintf_r+0xe4>
 800f452:	6923      	ldr	r3, [r4, #16]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d05b      	beq.n	800f510 <_vfiprintf_r+0xe4>
 800f458:	2300      	movs	r3, #0
 800f45a:	9309      	str	r3, [sp, #36]	; 0x24
 800f45c:	2320      	movs	r3, #32
 800f45e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f462:	2330      	movs	r3, #48	; 0x30
 800f464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f468:	9503      	str	r5, [sp, #12]
 800f46a:	f04f 0b01 	mov.w	fp, #1
 800f46e:	46b8      	mov	r8, r7
 800f470:	4645      	mov	r5, r8
 800f472:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f476:	b10b      	cbz	r3, 800f47c <_vfiprintf_r+0x50>
 800f478:	2b25      	cmp	r3, #37	; 0x25
 800f47a:	d154      	bne.n	800f526 <_vfiprintf_r+0xfa>
 800f47c:	ebb8 0a07 	subs.w	sl, r8, r7
 800f480:	d00b      	beq.n	800f49a <_vfiprintf_r+0x6e>
 800f482:	4653      	mov	r3, sl
 800f484:	463a      	mov	r2, r7
 800f486:	4621      	mov	r1, r4
 800f488:	4630      	mov	r0, r6
 800f48a:	f7ff ffbc 	bl	800f406 <__sfputs_r>
 800f48e:	3001      	adds	r0, #1
 800f490:	f000 80c2 	beq.w	800f618 <_vfiprintf_r+0x1ec>
 800f494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f496:	4453      	add	r3, sl
 800f498:	9309      	str	r3, [sp, #36]	; 0x24
 800f49a:	f898 3000 	ldrb.w	r3, [r8]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	f000 80ba 	beq.w	800f618 <_vfiprintf_r+0x1ec>
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4ae:	9304      	str	r3, [sp, #16]
 800f4b0:	9307      	str	r3, [sp, #28]
 800f4b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4b6:	931a      	str	r3, [sp, #104]	; 0x68
 800f4b8:	46a8      	mov	r8, r5
 800f4ba:	2205      	movs	r2, #5
 800f4bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f4c0:	485e      	ldr	r0, [pc, #376]	; (800f63c <_vfiprintf_r+0x210>)
 800f4c2:	f7f0 ff15 	bl	80002f0 <memchr>
 800f4c6:	9b04      	ldr	r3, [sp, #16]
 800f4c8:	bb78      	cbnz	r0, 800f52a <_vfiprintf_r+0xfe>
 800f4ca:	06d9      	lsls	r1, r3, #27
 800f4cc:	bf44      	itt	mi
 800f4ce:	2220      	movmi	r2, #32
 800f4d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f4d4:	071a      	lsls	r2, r3, #28
 800f4d6:	bf44      	itt	mi
 800f4d8:	222b      	movmi	r2, #43	; 0x2b
 800f4da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f4de:	782a      	ldrb	r2, [r5, #0]
 800f4e0:	2a2a      	cmp	r2, #42	; 0x2a
 800f4e2:	d02a      	beq.n	800f53a <_vfiprintf_r+0x10e>
 800f4e4:	9a07      	ldr	r2, [sp, #28]
 800f4e6:	46a8      	mov	r8, r5
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	250a      	movs	r5, #10
 800f4ec:	4641      	mov	r1, r8
 800f4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4f2:	3b30      	subs	r3, #48	; 0x30
 800f4f4:	2b09      	cmp	r3, #9
 800f4f6:	d969      	bls.n	800f5cc <_vfiprintf_r+0x1a0>
 800f4f8:	b360      	cbz	r0, 800f554 <_vfiprintf_r+0x128>
 800f4fa:	e024      	b.n	800f546 <_vfiprintf_r+0x11a>
 800f4fc:	4b50      	ldr	r3, [pc, #320]	; (800f640 <_vfiprintf_r+0x214>)
 800f4fe:	429c      	cmp	r4, r3
 800f500:	d101      	bne.n	800f506 <_vfiprintf_r+0xda>
 800f502:	68b4      	ldr	r4, [r6, #8]
 800f504:	e7a2      	b.n	800f44c <_vfiprintf_r+0x20>
 800f506:	4b4f      	ldr	r3, [pc, #316]	; (800f644 <_vfiprintf_r+0x218>)
 800f508:	429c      	cmp	r4, r3
 800f50a:	bf08      	it	eq
 800f50c:	68f4      	ldreq	r4, [r6, #12]
 800f50e:	e79d      	b.n	800f44c <_vfiprintf_r+0x20>
 800f510:	4621      	mov	r1, r4
 800f512:	4630      	mov	r0, r6
 800f514:	f7ff fc6c 	bl	800edf0 <__swsetup_r>
 800f518:	2800      	cmp	r0, #0
 800f51a:	d09d      	beq.n	800f458 <_vfiprintf_r+0x2c>
 800f51c:	f04f 30ff 	mov.w	r0, #4294967295
 800f520:	b01d      	add	sp, #116	; 0x74
 800f522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f526:	46a8      	mov	r8, r5
 800f528:	e7a2      	b.n	800f470 <_vfiprintf_r+0x44>
 800f52a:	4a44      	ldr	r2, [pc, #272]	; (800f63c <_vfiprintf_r+0x210>)
 800f52c:	1a80      	subs	r0, r0, r2
 800f52e:	fa0b f000 	lsl.w	r0, fp, r0
 800f532:	4318      	orrs	r0, r3
 800f534:	9004      	str	r0, [sp, #16]
 800f536:	4645      	mov	r5, r8
 800f538:	e7be      	b.n	800f4b8 <_vfiprintf_r+0x8c>
 800f53a:	9a03      	ldr	r2, [sp, #12]
 800f53c:	1d11      	adds	r1, r2, #4
 800f53e:	6812      	ldr	r2, [r2, #0]
 800f540:	9103      	str	r1, [sp, #12]
 800f542:	2a00      	cmp	r2, #0
 800f544:	db01      	blt.n	800f54a <_vfiprintf_r+0x11e>
 800f546:	9207      	str	r2, [sp, #28]
 800f548:	e004      	b.n	800f554 <_vfiprintf_r+0x128>
 800f54a:	4252      	negs	r2, r2
 800f54c:	f043 0302 	orr.w	r3, r3, #2
 800f550:	9207      	str	r2, [sp, #28]
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	f898 3000 	ldrb.w	r3, [r8]
 800f558:	2b2e      	cmp	r3, #46	; 0x2e
 800f55a:	d10e      	bne.n	800f57a <_vfiprintf_r+0x14e>
 800f55c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f560:	2b2a      	cmp	r3, #42	; 0x2a
 800f562:	d138      	bne.n	800f5d6 <_vfiprintf_r+0x1aa>
 800f564:	9b03      	ldr	r3, [sp, #12]
 800f566:	1d1a      	adds	r2, r3, #4
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	9203      	str	r2, [sp, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	bfb8      	it	lt
 800f570:	f04f 33ff 	movlt.w	r3, #4294967295
 800f574:	f108 0802 	add.w	r8, r8, #2
 800f578:	9305      	str	r3, [sp, #20]
 800f57a:	4d33      	ldr	r5, [pc, #204]	; (800f648 <_vfiprintf_r+0x21c>)
 800f57c:	f898 1000 	ldrb.w	r1, [r8]
 800f580:	2203      	movs	r2, #3
 800f582:	4628      	mov	r0, r5
 800f584:	f7f0 feb4 	bl	80002f0 <memchr>
 800f588:	b140      	cbz	r0, 800f59c <_vfiprintf_r+0x170>
 800f58a:	2340      	movs	r3, #64	; 0x40
 800f58c:	1b40      	subs	r0, r0, r5
 800f58e:	fa03 f000 	lsl.w	r0, r3, r0
 800f592:	9b04      	ldr	r3, [sp, #16]
 800f594:	4303      	orrs	r3, r0
 800f596:	f108 0801 	add.w	r8, r8, #1
 800f59a:	9304      	str	r3, [sp, #16]
 800f59c:	f898 1000 	ldrb.w	r1, [r8]
 800f5a0:	482a      	ldr	r0, [pc, #168]	; (800f64c <_vfiprintf_r+0x220>)
 800f5a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5a6:	2206      	movs	r2, #6
 800f5a8:	f108 0701 	add.w	r7, r8, #1
 800f5ac:	f7f0 fea0 	bl	80002f0 <memchr>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d037      	beq.n	800f624 <_vfiprintf_r+0x1f8>
 800f5b4:	4b26      	ldr	r3, [pc, #152]	; (800f650 <_vfiprintf_r+0x224>)
 800f5b6:	bb1b      	cbnz	r3, 800f600 <_vfiprintf_r+0x1d4>
 800f5b8:	9b03      	ldr	r3, [sp, #12]
 800f5ba:	3307      	adds	r3, #7
 800f5bc:	f023 0307 	bic.w	r3, r3, #7
 800f5c0:	3308      	adds	r3, #8
 800f5c2:	9303      	str	r3, [sp, #12]
 800f5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5c6:	444b      	add	r3, r9
 800f5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ca:	e750      	b.n	800f46e <_vfiprintf_r+0x42>
 800f5cc:	fb05 3202 	mla	r2, r5, r2, r3
 800f5d0:	2001      	movs	r0, #1
 800f5d2:	4688      	mov	r8, r1
 800f5d4:	e78a      	b.n	800f4ec <_vfiprintf_r+0xc0>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f108 0801 	add.w	r8, r8, #1
 800f5dc:	9305      	str	r3, [sp, #20]
 800f5de:	4619      	mov	r1, r3
 800f5e0:	250a      	movs	r5, #10
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5e8:	3a30      	subs	r2, #48	; 0x30
 800f5ea:	2a09      	cmp	r2, #9
 800f5ec:	d903      	bls.n	800f5f6 <_vfiprintf_r+0x1ca>
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d0c3      	beq.n	800f57a <_vfiprintf_r+0x14e>
 800f5f2:	9105      	str	r1, [sp, #20]
 800f5f4:	e7c1      	b.n	800f57a <_vfiprintf_r+0x14e>
 800f5f6:	fb05 2101 	mla	r1, r5, r1, r2
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	4680      	mov	r8, r0
 800f5fe:	e7f0      	b.n	800f5e2 <_vfiprintf_r+0x1b6>
 800f600:	ab03      	add	r3, sp, #12
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	4622      	mov	r2, r4
 800f606:	4b13      	ldr	r3, [pc, #76]	; (800f654 <_vfiprintf_r+0x228>)
 800f608:	a904      	add	r1, sp, #16
 800f60a:	4630      	mov	r0, r6
 800f60c:	f3af 8000 	nop.w
 800f610:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f614:	4681      	mov	r9, r0
 800f616:	d1d5      	bne.n	800f5c4 <_vfiprintf_r+0x198>
 800f618:	89a3      	ldrh	r3, [r4, #12]
 800f61a:	065b      	lsls	r3, r3, #25
 800f61c:	f53f af7e 	bmi.w	800f51c <_vfiprintf_r+0xf0>
 800f620:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f622:	e77d      	b.n	800f520 <_vfiprintf_r+0xf4>
 800f624:	ab03      	add	r3, sp, #12
 800f626:	9300      	str	r3, [sp, #0]
 800f628:	4622      	mov	r2, r4
 800f62a:	4b0a      	ldr	r3, [pc, #40]	; (800f654 <_vfiprintf_r+0x228>)
 800f62c:	a904      	add	r1, sp, #16
 800f62e:	4630      	mov	r0, r6
 800f630:	f000 f888 	bl	800f744 <_printf_i>
 800f634:	e7ec      	b.n	800f610 <_vfiprintf_r+0x1e4>
 800f636:	bf00      	nop
 800f638:	0801065c 	.word	0x0801065c
 800f63c:	0801069c 	.word	0x0801069c
 800f640:	0801067c 	.word	0x0801067c
 800f644:	0801063c 	.word	0x0801063c
 800f648:	080106a2 	.word	0x080106a2
 800f64c:	080106a6 	.word	0x080106a6
 800f650:	00000000 	.word	0x00000000
 800f654:	0800f407 	.word	0x0800f407

0800f658 <_printf_common>:
 800f658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f65c:	4691      	mov	r9, r2
 800f65e:	461f      	mov	r7, r3
 800f660:	688a      	ldr	r2, [r1, #8]
 800f662:	690b      	ldr	r3, [r1, #16]
 800f664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f668:	4293      	cmp	r3, r2
 800f66a:	bfb8      	it	lt
 800f66c:	4613      	movlt	r3, r2
 800f66e:	f8c9 3000 	str.w	r3, [r9]
 800f672:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f676:	4606      	mov	r6, r0
 800f678:	460c      	mov	r4, r1
 800f67a:	b112      	cbz	r2, 800f682 <_printf_common+0x2a>
 800f67c:	3301      	adds	r3, #1
 800f67e:	f8c9 3000 	str.w	r3, [r9]
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	0699      	lsls	r1, r3, #26
 800f686:	bf42      	ittt	mi
 800f688:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f68c:	3302      	addmi	r3, #2
 800f68e:	f8c9 3000 	strmi.w	r3, [r9]
 800f692:	6825      	ldr	r5, [r4, #0]
 800f694:	f015 0506 	ands.w	r5, r5, #6
 800f698:	d107      	bne.n	800f6aa <_printf_common+0x52>
 800f69a:	f104 0a19 	add.w	sl, r4, #25
 800f69e:	68e3      	ldr	r3, [r4, #12]
 800f6a0:	f8d9 2000 	ldr.w	r2, [r9]
 800f6a4:	1a9b      	subs	r3, r3, r2
 800f6a6:	42ab      	cmp	r3, r5
 800f6a8:	dc28      	bgt.n	800f6fc <_printf_common+0xa4>
 800f6aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f6ae:	6822      	ldr	r2, [r4, #0]
 800f6b0:	3300      	adds	r3, #0
 800f6b2:	bf18      	it	ne
 800f6b4:	2301      	movne	r3, #1
 800f6b6:	0692      	lsls	r2, r2, #26
 800f6b8:	d42d      	bmi.n	800f716 <_printf_common+0xbe>
 800f6ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6be:	4639      	mov	r1, r7
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	47c0      	blx	r8
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	d020      	beq.n	800f70a <_printf_common+0xb2>
 800f6c8:	6823      	ldr	r3, [r4, #0]
 800f6ca:	68e5      	ldr	r5, [r4, #12]
 800f6cc:	f8d9 2000 	ldr.w	r2, [r9]
 800f6d0:	f003 0306 	and.w	r3, r3, #6
 800f6d4:	2b04      	cmp	r3, #4
 800f6d6:	bf08      	it	eq
 800f6d8:	1aad      	subeq	r5, r5, r2
 800f6da:	68a3      	ldr	r3, [r4, #8]
 800f6dc:	6922      	ldr	r2, [r4, #16]
 800f6de:	bf0c      	ite	eq
 800f6e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6e4:	2500      	movne	r5, #0
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	bfc4      	itt	gt
 800f6ea:	1a9b      	subgt	r3, r3, r2
 800f6ec:	18ed      	addgt	r5, r5, r3
 800f6ee:	f04f 0900 	mov.w	r9, #0
 800f6f2:	341a      	adds	r4, #26
 800f6f4:	454d      	cmp	r5, r9
 800f6f6:	d11a      	bne.n	800f72e <_printf_common+0xd6>
 800f6f8:	2000      	movs	r0, #0
 800f6fa:	e008      	b.n	800f70e <_printf_common+0xb6>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	4652      	mov	r2, sl
 800f700:	4639      	mov	r1, r7
 800f702:	4630      	mov	r0, r6
 800f704:	47c0      	blx	r8
 800f706:	3001      	adds	r0, #1
 800f708:	d103      	bne.n	800f712 <_printf_common+0xba>
 800f70a:	f04f 30ff 	mov.w	r0, #4294967295
 800f70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f712:	3501      	adds	r5, #1
 800f714:	e7c3      	b.n	800f69e <_printf_common+0x46>
 800f716:	18e1      	adds	r1, r4, r3
 800f718:	1c5a      	adds	r2, r3, #1
 800f71a:	2030      	movs	r0, #48	; 0x30
 800f71c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f720:	4422      	add	r2, r4
 800f722:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f726:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f72a:	3302      	adds	r3, #2
 800f72c:	e7c5      	b.n	800f6ba <_printf_common+0x62>
 800f72e:	2301      	movs	r3, #1
 800f730:	4622      	mov	r2, r4
 800f732:	4639      	mov	r1, r7
 800f734:	4630      	mov	r0, r6
 800f736:	47c0      	blx	r8
 800f738:	3001      	adds	r0, #1
 800f73a:	d0e6      	beq.n	800f70a <_printf_common+0xb2>
 800f73c:	f109 0901 	add.w	r9, r9, #1
 800f740:	e7d8      	b.n	800f6f4 <_printf_common+0x9c>
	...

0800f744 <_printf_i>:
 800f744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f748:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f74c:	460c      	mov	r4, r1
 800f74e:	7e09      	ldrb	r1, [r1, #24]
 800f750:	b085      	sub	sp, #20
 800f752:	296e      	cmp	r1, #110	; 0x6e
 800f754:	4617      	mov	r7, r2
 800f756:	4606      	mov	r6, r0
 800f758:	4698      	mov	r8, r3
 800f75a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f75c:	f000 80b3 	beq.w	800f8c6 <_printf_i+0x182>
 800f760:	d822      	bhi.n	800f7a8 <_printf_i+0x64>
 800f762:	2963      	cmp	r1, #99	; 0x63
 800f764:	d036      	beq.n	800f7d4 <_printf_i+0x90>
 800f766:	d80a      	bhi.n	800f77e <_printf_i+0x3a>
 800f768:	2900      	cmp	r1, #0
 800f76a:	f000 80b9 	beq.w	800f8e0 <_printf_i+0x19c>
 800f76e:	2958      	cmp	r1, #88	; 0x58
 800f770:	f000 8083 	beq.w	800f87a <_printf_i+0x136>
 800f774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f778:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f77c:	e032      	b.n	800f7e4 <_printf_i+0xa0>
 800f77e:	2964      	cmp	r1, #100	; 0x64
 800f780:	d001      	beq.n	800f786 <_printf_i+0x42>
 800f782:	2969      	cmp	r1, #105	; 0x69
 800f784:	d1f6      	bne.n	800f774 <_printf_i+0x30>
 800f786:	6820      	ldr	r0, [r4, #0]
 800f788:	6813      	ldr	r3, [r2, #0]
 800f78a:	0605      	lsls	r5, r0, #24
 800f78c:	f103 0104 	add.w	r1, r3, #4
 800f790:	d52a      	bpl.n	800f7e8 <_printf_i+0xa4>
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	6011      	str	r1, [r2, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	da03      	bge.n	800f7a2 <_printf_i+0x5e>
 800f79a:	222d      	movs	r2, #45	; 0x2d
 800f79c:	425b      	negs	r3, r3
 800f79e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f7a2:	486f      	ldr	r0, [pc, #444]	; (800f960 <_printf_i+0x21c>)
 800f7a4:	220a      	movs	r2, #10
 800f7a6:	e039      	b.n	800f81c <_printf_i+0xd8>
 800f7a8:	2973      	cmp	r1, #115	; 0x73
 800f7aa:	f000 809d 	beq.w	800f8e8 <_printf_i+0x1a4>
 800f7ae:	d808      	bhi.n	800f7c2 <_printf_i+0x7e>
 800f7b0:	296f      	cmp	r1, #111	; 0x6f
 800f7b2:	d020      	beq.n	800f7f6 <_printf_i+0xb2>
 800f7b4:	2970      	cmp	r1, #112	; 0x70
 800f7b6:	d1dd      	bne.n	800f774 <_printf_i+0x30>
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	f043 0320 	orr.w	r3, r3, #32
 800f7be:	6023      	str	r3, [r4, #0]
 800f7c0:	e003      	b.n	800f7ca <_printf_i+0x86>
 800f7c2:	2975      	cmp	r1, #117	; 0x75
 800f7c4:	d017      	beq.n	800f7f6 <_printf_i+0xb2>
 800f7c6:	2978      	cmp	r1, #120	; 0x78
 800f7c8:	d1d4      	bne.n	800f774 <_printf_i+0x30>
 800f7ca:	2378      	movs	r3, #120	; 0x78
 800f7cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7d0:	4864      	ldr	r0, [pc, #400]	; (800f964 <_printf_i+0x220>)
 800f7d2:	e055      	b.n	800f880 <_printf_i+0x13c>
 800f7d4:	6813      	ldr	r3, [r2, #0]
 800f7d6:	1d19      	adds	r1, r3, #4
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	6011      	str	r1, [r2, #0]
 800f7dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e08c      	b.n	800f902 <_printf_i+0x1be>
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	6011      	str	r1, [r2, #0]
 800f7ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f7f0:	bf18      	it	ne
 800f7f2:	b21b      	sxthne	r3, r3
 800f7f4:	e7cf      	b.n	800f796 <_printf_i+0x52>
 800f7f6:	6813      	ldr	r3, [r2, #0]
 800f7f8:	6825      	ldr	r5, [r4, #0]
 800f7fa:	1d18      	adds	r0, r3, #4
 800f7fc:	6010      	str	r0, [r2, #0]
 800f7fe:	0628      	lsls	r0, r5, #24
 800f800:	d501      	bpl.n	800f806 <_printf_i+0xc2>
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	e002      	b.n	800f80c <_printf_i+0xc8>
 800f806:	0668      	lsls	r0, r5, #25
 800f808:	d5fb      	bpl.n	800f802 <_printf_i+0xbe>
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	4854      	ldr	r0, [pc, #336]	; (800f960 <_printf_i+0x21c>)
 800f80e:	296f      	cmp	r1, #111	; 0x6f
 800f810:	bf14      	ite	ne
 800f812:	220a      	movne	r2, #10
 800f814:	2208      	moveq	r2, #8
 800f816:	2100      	movs	r1, #0
 800f818:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f81c:	6865      	ldr	r5, [r4, #4]
 800f81e:	60a5      	str	r5, [r4, #8]
 800f820:	2d00      	cmp	r5, #0
 800f822:	f2c0 8095 	blt.w	800f950 <_printf_i+0x20c>
 800f826:	6821      	ldr	r1, [r4, #0]
 800f828:	f021 0104 	bic.w	r1, r1, #4
 800f82c:	6021      	str	r1, [r4, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d13d      	bne.n	800f8ae <_printf_i+0x16a>
 800f832:	2d00      	cmp	r5, #0
 800f834:	f040 808e 	bne.w	800f954 <_printf_i+0x210>
 800f838:	4665      	mov	r5, ip
 800f83a:	2a08      	cmp	r2, #8
 800f83c:	d10b      	bne.n	800f856 <_printf_i+0x112>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	07db      	lsls	r3, r3, #31
 800f842:	d508      	bpl.n	800f856 <_printf_i+0x112>
 800f844:	6923      	ldr	r3, [r4, #16]
 800f846:	6862      	ldr	r2, [r4, #4]
 800f848:	429a      	cmp	r2, r3
 800f84a:	bfde      	ittt	le
 800f84c:	2330      	movle	r3, #48	; 0x30
 800f84e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f852:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f856:	ebac 0305 	sub.w	r3, ip, r5
 800f85a:	6123      	str	r3, [r4, #16]
 800f85c:	f8cd 8000 	str.w	r8, [sp]
 800f860:	463b      	mov	r3, r7
 800f862:	aa03      	add	r2, sp, #12
 800f864:	4621      	mov	r1, r4
 800f866:	4630      	mov	r0, r6
 800f868:	f7ff fef6 	bl	800f658 <_printf_common>
 800f86c:	3001      	adds	r0, #1
 800f86e:	d14d      	bne.n	800f90c <_printf_i+0x1c8>
 800f870:	f04f 30ff 	mov.w	r0, #4294967295
 800f874:	b005      	add	sp, #20
 800f876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f87a:	4839      	ldr	r0, [pc, #228]	; (800f960 <_printf_i+0x21c>)
 800f87c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f880:	6813      	ldr	r3, [r2, #0]
 800f882:	6821      	ldr	r1, [r4, #0]
 800f884:	1d1d      	adds	r5, r3, #4
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	6015      	str	r5, [r2, #0]
 800f88a:	060a      	lsls	r2, r1, #24
 800f88c:	d50b      	bpl.n	800f8a6 <_printf_i+0x162>
 800f88e:	07ca      	lsls	r2, r1, #31
 800f890:	bf44      	itt	mi
 800f892:	f041 0120 	orrmi.w	r1, r1, #32
 800f896:	6021      	strmi	r1, [r4, #0]
 800f898:	b91b      	cbnz	r3, 800f8a2 <_printf_i+0x15e>
 800f89a:	6822      	ldr	r2, [r4, #0]
 800f89c:	f022 0220 	bic.w	r2, r2, #32
 800f8a0:	6022      	str	r2, [r4, #0]
 800f8a2:	2210      	movs	r2, #16
 800f8a4:	e7b7      	b.n	800f816 <_printf_i+0xd2>
 800f8a6:	064d      	lsls	r5, r1, #25
 800f8a8:	bf48      	it	mi
 800f8aa:	b29b      	uxthmi	r3, r3
 800f8ac:	e7ef      	b.n	800f88e <_printf_i+0x14a>
 800f8ae:	4665      	mov	r5, ip
 800f8b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8b4:	fb02 3311 	mls	r3, r2, r1, r3
 800f8b8:	5cc3      	ldrb	r3, [r0, r3]
 800f8ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f8be:	460b      	mov	r3, r1
 800f8c0:	2900      	cmp	r1, #0
 800f8c2:	d1f5      	bne.n	800f8b0 <_printf_i+0x16c>
 800f8c4:	e7b9      	b.n	800f83a <_printf_i+0xf6>
 800f8c6:	6813      	ldr	r3, [r2, #0]
 800f8c8:	6825      	ldr	r5, [r4, #0]
 800f8ca:	6961      	ldr	r1, [r4, #20]
 800f8cc:	1d18      	adds	r0, r3, #4
 800f8ce:	6010      	str	r0, [r2, #0]
 800f8d0:	0628      	lsls	r0, r5, #24
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	d501      	bpl.n	800f8da <_printf_i+0x196>
 800f8d6:	6019      	str	r1, [r3, #0]
 800f8d8:	e002      	b.n	800f8e0 <_printf_i+0x19c>
 800f8da:	066a      	lsls	r2, r5, #25
 800f8dc:	d5fb      	bpl.n	800f8d6 <_printf_i+0x192>
 800f8de:	8019      	strh	r1, [r3, #0]
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	6123      	str	r3, [r4, #16]
 800f8e4:	4665      	mov	r5, ip
 800f8e6:	e7b9      	b.n	800f85c <_printf_i+0x118>
 800f8e8:	6813      	ldr	r3, [r2, #0]
 800f8ea:	1d19      	adds	r1, r3, #4
 800f8ec:	6011      	str	r1, [r2, #0]
 800f8ee:	681d      	ldr	r5, [r3, #0]
 800f8f0:	6862      	ldr	r2, [r4, #4]
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	f7f0 fcfb 	bl	80002f0 <memchr>
 800f8fa:	b108      	cbz	r0, 800f900 <_printf_i+0x1bc>
 800f8fc:	1b40      	subs	r0, r0, r5
 800f8fe:	6060      	str	r0, [r4, #4]
 800f900:	6863      	ldr	r3, [r4, #4]
 800f902:	6123      	str	r3, [r4, #16]
 800f904:	2300      	movs	r3, #0
 800f906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f90a:	e7a7      	b.n	800f85c <_printf_i+0x118>
 800f90c:	6923      	ldr	r3, [r4, #16]
 800f90e:	462a      	mov	r2, r5
 800f910:	4639      	mov	r1, r7
 800f912:	4630      	mov	r0, r6
 800f914:	47c0      	blx	r8
 800f916:	3001      	adds	r0, #1
 800f918:	d0aa      	beq.n	800f870 <_printf_i+0x12c>
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	079b      	lsls	r3, r3, #30
 800f91e:	d413      	bmi.n	800f948 <_printf_i+0x204>
 800f920:	68e0      	ldr	r0, [r4, #12]
 800f922:	9b03      	ldr	r3, [sp, #12]
 800f924:	4298      	cmp	r0, r3
 800f926:	bfb8      	it	lt
 800f928:	4618      	movlt	r0, r3
 800f92a:	e7a3      	b.n	800f874 <_printf_i+0x130>
 800f92c:	2301      	movs	r3, #1
 800f92e:	464a      	mov	r2, r9
 800f930:	4639      	mov	r1, r7
 800f932:	4630      	mov	r0, r6
 800f934:	47c0      	blx	r8
 800f936:	3001      	adds	r0, #1
 800f938:	d09a      	beq.n	800f870 <_printf_i+0x12c>
 800f93a:	3501      	adds	r5, #1
 800f93c:	68e3      	ldr	r3, [r4, #12]
 800f93e:	9a03      	ldr	r2, [sp, #12]
 800f940:	1a9b      	subs	r3, r3, r2
 800f942:	42ab      	cmp	r3, r5
 800f944:	dcf2      	bgt.n	800f92c <_printf_i+0x1e8>
 800f946:	e7eb      	b.n	800f920 <_printf_i+0x1dc>
 800f948:	2500      	movs	r5, #0
 800f94a:	f104 0919 	add.w	r9, r4, #25
 800f94e:	e7f5      	b.n	800f93c <_printf_i+0x1f8>
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1ac      	bne.n	800f8ae <_printf_i+0x16a>
 800f954:	7803      	ldrb	r3, [r0, #0]
 800f956:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f95a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f95e:	e76c      	b.n	800f83a <_printf_i+0xf6>
 800f960:	080106ad 	.word	0x080106ad
 800f964:	080106be 	.word	0x080106be

0800f968 <_putc_r>:
 800f968:	b570      	push	{r4, r5, r6, lr}
 800f96a:	460d      	mov	r5, r1
 800f96c:	4614      	mov	r4, r2
 800f96e:	4606      	mov	r6, r0
 800f970:	b118      	cbz	r0, 800f97a <_putc_r+0x12>
 800f972:	6983      	ldr	r3, [r0, #24]
 800f974:	b90b      	cbnz	r3, 800f97a <_putc_r+0x12>
 800f976:	f7ff fb99 	bl	800f0ac <__sinit>
 800f97a:	4b13      	ldr	r3, [pc, #76]	; (800f9c8 <_putc_r+0x60>)
 800f97c:	429c      	cmp	r4, r3
 800f97e:	d112      	bne.n	800f9a6 <_putc_r+0x3e>
 800f980:	6874      	ldr	r4, [r6, #4]
 800f982:	68a3      	ldr	r3, [r4, #8]
 800f984:	3b01      	subs	r3, #1
 800f986:	2b00      	cmp	r3, #0
 800f988:	60a3      	str	r3, [r4, #8]
 800f98a:	da16      	bge.n	800f9ba <_putc_r+0x52>
 800f98c:	69a2      	ldr	r2, [r4, #24]
 800f98e:	4293      	cmp	r3, r2
 800f990:	db02      	blt.n	800f998 <_putc_r+0x30>
 800f992:	b2eb      	uxtb	r3, r5
 800f994:	2b0a      	cmp	r3, #10
 800f996:	d110      	bne.n	800f9ba <_putc_r+0x52>
 800f998:	4622      	mov	r2, r4
 800f99a:	4629      	mov	r1, r5
 800f99c:	4630      	mov	r0, r6
 800f99e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9a2:	f7ff b9d3 	b.w	800ed4c <__swbuf_r>
 800f9a6:	4b09      	ldr	r3, [pc, #36]	; (800f9cc <_putc_r+0x64>)
 800f9a8:	429c      	cmp	r4, r3
 800f9aa:	d101      	bne.n	800f9b0 <_putc_r+0x48>
 800f9ac:	68b4      	ldr	r4, [r6, #8]
 800f9ae:	e7e8      	b.n	800f982 <_putc_r+0x1a>
 800f9b0:	4b07      	ldr	r3, [pc, #28]	; (800f9d0 <_putc_r+0x68>)
 800f9b2:	429c      	cmp	r4, r3
 800f9b4:	bf08      	it	eq
 800f9b6:	68f4      	ldreq	r4, [r6, #12]
 800f9b8:	e7e3      	b.n	800f982 <_putc_r+0x1a>
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	1c5a      	adds	r2, r3, #1
 800f9be:	6022      	str	r2, [r4, #0]
 800f9c0:	701d      	strb	r5, [r3, #0]
 800f9c2:	b2e8      	uxtb	r0, r5
 800f9c4:	bd70      	pop	{r4, r5, r6, pc}
 800f9c6:	bf00      	nop
 800f9c8:	0801065c 	.word	0x0801065c
 800f9cc:	0801067c 	.word	0x0801067c
 800f9d0:	0801063c 	.word	0x0801063c

0800f9d4 <_sbrk_r>:
 800f9d4:	b538      	push	{r3, r4, r5, lr}
 800f9d6:	4c06      	ldr	r4, [pc, #24]	; (800f9f0 <_sbrk_r+0x1c>)
 800f9d8:	2300      	movs	r3, #0
 800f9da:	4605      	mov	r5, r0
 800f9dc:	4608      	mov	r0, r1
 800f9de:	6023      	str	r3, [r4, #0]
 800f9e0:	f7f1 fc68 	bl	80012b4 <_sbrk>
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	d102      	bne.n	800f9ee <_sbrk_r+0x1a>
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	b103      	cbz	r3, 800f9ee <_sbrk_r+0x1a>
 800f9ec:	602b      	str	r3, [r5, #0]
 800f9ee:	bd38      	pop	{r3, r4, r5, pc}
 800f9f0:	2400048c 	.word	0x2400048c

0800f9f4 <__sread>:
 800f9f4:	b510      	push	{r4, lr}
 800f9f6:	460c      	mov	r4, r1
 800f9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9fc:	f000 f896 	bl	800fb2c <_read_r>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	bfab      	itete	ge
 800fa04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa06:	89a3      	ldrhlt	r3, [r4, #12]
 800fa08:	181b      	addge	r3, r3, r0
 800fa0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa0e:	bfac      	ite	ge
 800fa10:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa12:	81a3      	strhlt	r3, [r4, #12]
 800fa14:	bd10      	pop	{r4, pc}

0800fa16 <__swrite>:
 800fa16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1a:	461f      	mov	r7, r3
 800fa1c:	898b      	ldrh	r3, [r1, #12]
 800fa1e:	05db      	lsls	r3, r3, #23
 800fa20:	4605      	mov	r5, r0
 800fa22:	460c      	mov	r4, r1
 800fa24:	4616      	mov	r6, r2
 800fa26:	d505      	bpl.n	800fa34 <__swrite+0x1e>
 800fa28:	2302      	movs	r3, #2
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa30:	f000 f868 	bl	800fb04 <_lseek_r>
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa3e:	81a3      	strh	r3, [r4, #12]
 800fa40:	4632      	mov	r2, r6
 800fa42:	463b      	mov	r3, r7
 800fa44:	4628      	mov	r0, r5
 800fa46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa4a:	f000 b817 	b.w	800fa7c <_write_r>

0800fa4e <__sseek>:
 800fa4e:	b510      	push	{r4, lr}
 800fa50:	460c      	mov	r4, r1
 800fa52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa56:	f000 f855 	bl	800fb04 <_lseek_r>
 800fa5a:	1c43      	adds	r3, r0, #1
 800fa5c:	89a3      	ldrh	r3, [r4, #12]
 800fa5e:	bf15      	itete	ne
 800fa60:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa6a:	81a3      	strheq	r3, [r4, #12]
 800fa6c:	bf18      	it	ne
 800fa6e:	81a3      	strhne	r3, [r4, #12]
 800fa70:	bd10      	pop	{r4, pc}

0800fa72 <__sclose>:
 800fa72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa76:	f000 b813 	b.w	800faa0 <_close_r>
	...

0800fa7c <_write_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4c07      	ldr	r4, [pc, #28]	; (800fa9c <_write_r+0x20>)
 800fa80:	4605      	mov	r5, r0
 800fa82:	4608      	mov	r0, r1
 800fa84:	4611      	mov	r1, r2
 800fa86:	2200      	movs	r2, #0
 800fa88:	6022      	str	r2, [r4, #0]
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	f7f1 fbc1 	bl	8001212 <_write>
 800fa90:	1c43      	adds	r3, r0, #1
 800fa92:	d102      	bne.n	800fa9a <_write_r+0x1e>
 800fa94:	6823      	ldr	r3, [r4, #0]
 800fa96:	b103      	cbz	r3, 800fa9a <_write_r+0x1e>
 800fa98:	602b      	str	r3, [r5, #0]
 800fa9a:	bd38      	pop	{r3, r4, r5, pc}
 800fa9c:	2400048c 	.word	0x2400048c

0800faa0 <_close_r>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	4c06      	ldr	r4, [pc, #24]	; (800fabc <_close_r+0x1c>)
 800faa4:	2300      	movs	r3, #0
 800faa6:	4605      	mov	r5, r0
 800faa8:	4608      	mov	r0, r1
 800faaa:	6023      	str	r3, [r4, #0]
 800faac:	f7f1 fbcd 	bl	800124a <_close>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d102      	bne.n	800faba <_close_r+0x1a>
 800fab4:	6823      	ldr	r3, [r4, #0]
 800fab6:	b103      	cbz	r3, 800faba <_close_r+0x1a>
 800fab8:	602b      	str	r3, [r5, #0]
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	2400048c 	.word	0x2400048c

0800fac0 <_fstat_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4c07      	ldr	r4, [pc, #28]	; (800fae0 <_fstat_r+0x20>)
 800fac4:	2300      	movs	r3, #0
 800fac6:	4605      	mov	r5, r0
 800fac8:	4608      	mov	r0, r1
 800faca:	4611      	mov	r1, r2
 800facc:	6023      	str	r3, [r4, #0]
 800face:	f7f1 fbc8 	bl	8001262 <_fstat>
 800fad2:	1c43      	adds	r3, r0, #1
 800fad4:	d102      	bne.n	800fadc <_fstat_r+0x1c>
 800fad6:	6823      	ldr	r3, [r4, #0]
 800fad8:	b103      	cbz	r3, 800fadc <_fstat_r+0x1c>
 800fada:	602b      	str	r3, [r5, #0]
 800fadc:	bd38      	pop	{r3, r4, r5, pc}
 800fade:	bf00      	nop
 800fae0:	2400048c 	.word	0x2400048c

0800fae4 <_isatty_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4c06      	ldr	r4, [pc, #24]	; (800fb00 <_isatty_r+0x1c>)
 800fae8:	2300      	movs	r3, #0
 800faea:	4605      	mov	r5, r0
 800faec:	4608      	mov	r0, r1
 800faee:	6023      	str	r3, [r4, #0]
 800faf0:	f7f1 fbc7 	bl	8001282 <_isatty>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_isatty_r+0x1a>
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_isatty_r+0x1a>
 800fafc:	602b      	str	r3, [r5, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	2400048c 	.word	0x2400048c

0800fb04 <_lseek_r>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	4c07      	ldr	r4, [pc, #28]	; (800fb24 <_lseek_r+0x20>)
 800fb08:	4605      	mov	r5, r0
 800fb0a:	4608      	mov	r0, r1
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	2200      	movs	r2, #0
 800fb10:	6022      	str	r2, [r4, #0]
 800fb12:	461a      	mov	r2, r3
 800fb14:	f7f1 fbc0 	bl	8001298 <_lseek>
 800fb18:	1c43      	adds	r3, r0, #1
 800fb1a:	d102      	bne.n	800fb22 <_lseek_r+0x1e>
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	b103      	cbz	r3, 800fb22 <_lseek_r+0x1e>
 800fb20:	602b      	str	r3, [r5, #0]
 800fb22:	bd38      	pop	{r3, r4, r5, pc}
 800fb24:	2400048c 	.word	0x2400048c

0800fb28 <__malloc_lock>:
 800fb28:	4770      	bx	lr

0800fb2a <__malloc_unlock>:
 800fb2a:	4770      	bx	lr

0800fb2c <_read_r>:
 800fb2c:	b538      	push	{r3, r4, r5, lr}
 800fb2e:	4c07      	ldr	r4, [pc, #28]	; (800fb4c <_read_r+0x20>)
 800fb30:	4605      	mov	r5, r0
 800fb32:	4608      	mov	r0, r1
 800fb34:	4611      	mov	r1, r2
 800fb36:	2200      	movs	r2, #0
 800fb38:	6022      	str	r2, [r4, #0]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	f7f1 fb4c 	bl	80011d8 <_read>
 800fb40:	1c43      	adds	r3, r0, #1
 800fb42:	d102      	bne.n	800fb4a <_read_r+0x1e>
 800fb44:	6823      	ldr	r3, [r4, #0]
 800fb46:	b103      	cbz	r3, 800fb4a <_read_r+0x1e>
 800fb48:	602b      	str	r3, [r5, #0]
 800fb4a:	bd38      	pop	{r3, r4, r5, pc}
 800fb4c:	2400048c 	.word	0x2400048c

0800fb50 <_init>:
 800fb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb52:	bf00      	nop
 800fb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb56:	bc08      	pop	{r3}
 800fb58:	469e      	mov	lr, r3
 800fb5a:	4770      	bx	lr

0800fb5c <_fini>:
 800fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5e:	bf00      	nop
 800fb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb62:	bc08      	pop	{r3}
 800fb64:	469e      	mov	lr, r3
 800fb66:	4770      	bx	lr
